<?xml version="1.0" encoding="utf-8"?>
<codeintel version="2.0" name="PHP 5.3.0" description="Cix data for PHP 5.3.0" file="php-5.3.cix">
  <file lang="PHP" mtime="1255111479" path="php-5.3.cix">
    <scope ilk="blob" lang="PHP" name="*" id="global">
      <scope name="stdClass" ilk="class"/>
      <scope doc="@ingroup ZendEngine&#10;@brief Basic Exception class.&#10;@since PHP 5.0" ilk="class" line="244" lineend="331" name="Exception">
        <scope attributes="final private" doc="Prevent clone" ilk="function" line="266" lineend="266" name="__clone" signature="__clone()"/>
        <scope attributes="__ctor__" doc="Construct an exception&#10;&#10;@param $message Some text describing the exception&#10;@param $code    Some code describing the exception" ilk="function" line="273" lineend="282" name="__construct" signature="__construct(message=NULL, code=0)"/>
        <scope attributes="final public" doc="@return the message passed to the constructor" ilk="function" line="286" lineend="289" name="getMessage" returns="the" signature="getMessage()"/>
        <scope attributes="final public" doc="@return the code passed to the constructor" ilk="function" line="293" lineend="296" name="getCode" returns="the" signature="getCode()"/>
        <scope attributes="final public" doc="@return the name of the file where the exception was thrown" ilk="function" line="300" lineend="303" name="getFile" returns="the" signature="getFile()"/>
        <scope attributes="final public" doc="@return the line number where the exception was thrown" ilk="function" line="307" lineend="310" name="getLine" returns="the" signature="getLine()"/>
        <scope attributes="final public" doc="@return the stack trace as array" ilk="function" line="314" lineend="317" name="getTrace" returns="the" signature="getTrace()"/>
        <scope attributes="final public" doc="@return the stack trace as string" ilk="function" line="321" lineend="323" name="getTraceAsString" returns="the" signature="getTraceAsString()"/>
        <scope attributes="public" doc="@return string represenation of exception" ilk="function" line="327" lineend="330" name="__toString" returns="string" signature="__toString()"/>
        <variable attributes="protected" citdl="message" line="247" name="message"/>
        <variable attributes="private" line="250" name="string"/>
        <variable attributes="protected" citdl="code" line="253" name="code"/>
        <variable attributes="protected" citdl="__FILE__" line="256" name="file"/>
        <variable attributes="protected" citdl="__LINE__" line="259" name="line"/>
        <variable attributes="private" citdl="debug_backtrace()" line="262" name="trace"/>
      </scope>
      <scope name="ErrorException" ilk="class" classrefs="Exception">
        <scope name="__construct" signature="__construct(string message, int code, int severity [, string filename [, int lineno [, Exception previous]]])" doc="ErrorException constructor" ilk="function" src="zend_exceptions.c"/>
        <scope name="getSeverity" signature="getSeverity()" doc="Get the exception severity" ilk="function" src="zend_exceptions.c" returns="int"/>
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="getMessage" signature="getMessage()"/>
        <scope ilk="function" name="getCode" signature="getCode()"/>
        <scope ilk="function" name="getFile" signature="getFile()"/>
        <scope ilk="function" name="getLine" signature="getLine()"/>
        <scope ilk="function" name="getTrace" signature="getTrace()"/>
        <scope ilk="function" name="getPrevious" signature="getPrevious()"/>
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <variable name="message"/>
        <variable name="code"/>
        <variable name="file"/>
        <variable name="line"/>
        <variable name="severity"/>
      </scope>
      <scope name="Closure" ilk="class">
        <scope name="__construct" signature="__construct()" doc="Private constructor preventing instantiation" ilk="function" src="zend_closures.c"/>
      </scope>
      <scope name="DateTime" ilk="class">
        <scope name="__construct" signature="__construct([string time[, DateTimeZone object]])" doc="Creates new DateTime object" ilk="function" src="php_date.c"/>
        <scope name="__wakeup" signature="__wakeup()" doc="" ilk="function" src="php_date.c"/>
        <scope name="__set_state" signature="__set_state()" doc="" ilk="function" src="php_date.c"/>
        <scope ilk="function" name="createFromFormat" signature="createFromFormat()"/>
        <scope ilk="function" name="getLastErrors" signature="getLastErrors()"/>
        <scope ilk="function" name="format" signature="format()"/>
        <scope ilk="function" name="modify" signature="modify()"/>
        <scope ilk="function" name="add" signature="add()"/>
        <scope ilk="function" name="sub" signature="sub()"/>
        <scope ilk="function" name="getTimezone" signature="getTimezone()"/>
        <scope ilk="function" name="setTimezone" signature="setTimezone()"/>
        <scope ilk="function" name="getOffset" signature="getOffset()"/>
        <scope ilk="function" name="setTime" signature="setTime()"/>
        <scope ilk="function" name="setDate" signature="setDate()"/>
        <scope ilk="function" name="setISODate" signature="setISODate()"/>
        <scope ilk="function" name="setTimestamp" signature="setTimestamp()"/>
        <scope ilk="function" name="getTimestamp" signature="getTimestamp()"/>
        <scope ilk="function" name="diff" signature="diff()"/>
        <variable name="ATOM" citdl="string" ilk="constant"/>
        <variable name="COOKIE" citdl="string" ilk="constant"/>
        <variable name="ISO8601" citdl="string" ilk="constant"/>
        <variable name="RFC822" citdl="string" ilk="constant"/>
        <variable name="RFC850" citdl="string" ilk="constant"/>
        <variable name="RFC1036" citdl="string" ilk="constant"/>
        <variable name="RFC1123" citdl="string" ilk="constant"/>
        <variable name="RFC2822" citdl="string" ilk="constant"/>
        <variable name="RFC3339" citdl="string" ilk="constant"/>
        <variable name="RSS" citdl="string" ilk="constant"/>
        <variable name="W3C" citdl="string" ilk="constant"/>
      </scope>
      <scope name="DateTimeZone" ilk="class">
        <scope name="__construct" signature="__construct(string timezone)" doc="Creates new DateTimeZone object" ilk="function" src="php_date.c"/>
        <scope ilk="function" name="getName" signature="getName()"/>
        <scope ilk="function" name="getOffset" signature="getOffset()"/>
        <scope ilk="function" name="getTransitions" signature="getTransitions()"/>
        <scope ilk="function" name="getLocation" signature="getLocation()"/>
        <scope ilk="function" name="listAbbreviations" signature="listAbbreviations()"/>
        <scope ilk="function" name="listIdentifiers" signature="listIdentifiers()"/>
        <variable name="AFRICA" citdl="integer" ilk="constant"/>
        <variable name="AMERICA" citdl="integer" ilk="constant"/>
        <variable name="ANTARCTICA" citdl="integer" ilk="constant"/>
        <variable name="ARCTIC" citdl="integer" ilk="constant"/>
        <variable name="ASIA" citdl="integer" ilk="constant"/>
        <variable name="ATLANTIC" citdl="integer" ilk="constant"/>
        <variable name="AUSTRALIA" citdl="integer" ilk="constant"/>
        <variable name="EUROPE" citdl="integer" ilk="constant"/>
        <variable name="INDIAN" citdl="integer" ilk="constant"/>
        <variable name="PACIFIC" citdl="integer" ilk="constant"/>
        <variable name="UTC" citdl="integer" ilk="constant"/>
        <variable name="ALL" citdl="integer" ilk="constant"/>
        <variable name="ALL_WITH_BC" citdl="integer" ilk="constant"/>
        <variable name="PER_COUNTRY" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="DateInterval" ilk="class">
        <scope name="__construct" signature="__construct([string interval_spec])" doc="Creates new DateInterval object" ilk="function" src="php_date.c"/>
        <scope ilk="function" name="format" signature="format()"/>
        <scope ilk="function" name="createFromDateString" signature="createFromDateString()"/>
      </scope>
      <scope name="DatePeriod" ilk="class">
        <scope name="__construct" signature="__construct(DateTime $start, DateInterval $interval, int recurrences" doc="Creates new DatePeriod object" ilk="function" src="php_date.c"/>
        <variable name="EXCLUDE_START_DATE" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="LibXMLError" ilk="class"/>
      <scope name="SQLite3" ilk="class">
        <scope name="open" signature="open(String filename [, int Flags [, string Encryption Key]])" doc="Opens a SQLite Database if the build includes&#10;encryption then it will attempt to use the key" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="close" signature="close()" doc="Close a SQLite Database" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="exec" signature="exec(String Query)" doc="Executes a result-less query against a given database" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="version" signature="version()" doc="Returns the SQLite Library version as a string constant&#10;and as a number" ilk="function" src="sqlite3.c" returns="Array"/>
        <scope name="lastInsertRowID" signature="lastInsertRowID()" doc="Returns the rowid of the most recent INSERT into the&#10;database from the database connection" ilk="function" src="sqlite3.c" returns="int"/>
        <scope name="lastErrorCode" signature="lastErrorCode()" doc="Returns the numeric result code of the most recent&#10;failed sqlite API call for the database connection" ilk="function" src="sqlite3.c" returns="int"/>
        <scope name="lastErrorMsg" signature="lastErrorMsg()" doc="Returns english text describing the most recent failed&#10;sqlite API call for the database connection" ilk="function" src="sqlite3.c" returns="string"/>
        <scope name="loadExtension" signature="loadExtension(String Shared Library)" doc="Attempts to load an SQLite extension library" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="changes" signature="changes()" doc="Returns the number of database rows that were changed&#10;or inserted or deleted by the most recent SQL statement" ilk="function" src="sqlite3.c" returns="int"/>
        <scope name="escapeString" signature="escapeString(String value)" doc="Returns a string that has been properly escaped" ilk="function" src="sqlite3.c" returns="String"/>
        <scope name="prepare" signature="prepare(String Query)" doc="Returns a prepared SQL statement for execution" ilk="function" src="sqlite3.c" returns="SQLite3Stmt"/>
        <scope name="query" signature="query(String Query)" doc="Returns true or false for queries that return data it&#10;will return a SQLite Result object" ilk="function" src="sqlite3.c" returns="SQLite3Result"/>
        <scope name="querySingle" signature="querySingle(String Query [, bool entire_row = false])" doc="Returns a string of the first column or an array of the&#10;entire row" ilk="function" src="sqlite3.c" returns="SQLite3Result"/>
        <scope name="createFunction" signature="createFunction(string name, mixed callback [, int argcount])" doc="Allows registration of a PHP function as a SQLite UDF&#10;that can be called within SQL statements" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="createAggregate" signature="createAggregate(string name, mixed step, mixed final [, int argcount])" doc="Allows registration of a PHP function for use as an&#10;aggregate" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="openBlob" signature="openBlob(string table, string column, int rowid [, string dbname])" doc="Open a blob as a stream which we can read write to" ilk="function" src="sqlite3.c" returns="resource"/>
        <scope name="enableExceptions" signature="enableExceptions([bool enableExceptions = false])" doc="Enables an exception error mode" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope ilk="function" name="__construct" signature="__construct()"/>
      </scope>
      <scope name="SQLite3Stmt" ilk="class">
        <scope name="paramCount" signature="paramCount()" doc="Returns the number of parameters within the prepared&#10;statement" ilk="function" src="sqlite3.c" returns="int"/>
        <scope name="close" signature="close()" doc="Closes the prepared statement" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="reset" signature="reset()" doc="Reset the prepared statement to the state before it was&#10;executed bindings still remain" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="clear" signature="clear()" doc="Clear all current bound parameters" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="execute" signature="execute()" doc="Executes a prepared statement and returns a result set&#10;object" ilk="function" src="sqlite3.c" returns="SQLite3Result"/>
        <scope name="bindParam" signature="bindParam(int parameter_number, mixed parameter [, int type])" doc="Bind Paramater to a stmt variable" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="bindValue" signature="bindValue(int parameter_number, mixed parameter [, int type])" doc="Bind Value of a parameter to a stmt variable" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="__construct" signature="__construct(SQLite3 dbobject, String Statement)" doc="constructor for SQLite Stmt" ilk="function" src="sqlite3.c" returns="int"/>
      </scope>
      <scope name="SQLite3Result" ilk="class">
        <scope name="numColumns" signature="numColumns()" doc="Number of columns in the result set" ilk="function" src="sqlite3.c" returns="int"/>
        <scope name="columnName" signature="columnName(int column)" doc="Returns the name of the nth column" ilk="function" src="sqlite3.c" returns="string"/>
        <scope name="columnType" signature="columnType(int column)" doc="Returns the type of the nth column" ilk="function" src="sqlite3.c" returns="int"/>
        <scope name="fetchArray" signature="fetchArray([int mode])" doc="Fetch a result row as both an associative or&#10;numerically indexed array or both" ilk="function" src="sqlite3.c" returns="array"/>
        <scope name="reset" signature="reset()" doc="Resets the result set back to the first row" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="finalize" signature="finalize()" doc="Closes the result set" ilk="function" src="sqlite3.c" returns="bool"/>
        <scope name="__construct" signature="__construct()" doc="constructor for SQLite Result" ilk="function" src="sqlite3.c" returns="int"/>
      </scope>
      <scope name="DOMException" ilk="class" classrefs="Exception">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="getMessage" signature="getMessage()"/>
        <scope ilk="function" name="getCode" signature="getCode()"/>
        <scope ilk="function" name="getFile" signature="getFile()"/>
        <scope ilk="function" name="getLine" signature="getLine()"/>
        <scope ilk="function" name="getTrace" signature="getTrace()"/>
        <scope ilk="function" name="getPrevious" signature="getPrevious()"/>
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <variable name="message"/>
        <variable name="code"/>
        <variable name="file"/>
        <variable name="line"/>
      </scope>
      <scope name="DOMStringList" ilk="class">
        <scope ilk="function" name="item" signature="item()"/>
      </scope>
      <scope name="DOMNameList" ilk="class">
        <scope ilk="function" name="getName" signature="getName()"/>
        <scope ilk="function" name="getNamespaceURI" signature="getNamespaceURI()"/>
      </scope>
      <scope name="DOMImplementationList" ilk="class">
        <scope ilk="function" name="item" signature="item()"/>
      </scope>
      <scope name="DOMImplementationSource" ilk="class">
        <scope ilk="function" name="getDomimplementation" signature="getDomimplementation()"/>
        <scope ilk="function" name="getDomimplementations" signature="getDomimplementations()"/>
      </scope>
      <scope name="DOMImplementation" ilk="class">
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="hasFeature" signature="hasFeature()"/>
        <scope ilk="function" name="createDocumentType" signature="createDocumentType()"/>
        <scope ilk="function" name="createDocument" signature="createDocument()"/>
      </scope>
      <scope name="DOMNode" ilk="class">
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope name="getNodePath" signature="getNodePath()" doc="Gets an xpath for a node" ilk="function" src="node.c" returns="int"/>
        <scope name="getLineNo" signature="getLineNo()" doc="Gets line number for a node" ilk="function" src="node.c" returns="int"/>
        <scope name="C14N" signature="C14N([bool exclusive [, bool with_comments [, array xpath [, array ns_prefixes]]]])" doc="Canonicalize nodes to a string" ilk="function" src="node.c" returns="string"/>
        <scope name="C14NFile" signature="C14NFile(string uri [, bool exclusive [, bool with_comments [, array xpath [, array ns_prefixes]]]])" doc="Canonicalize nodes to a file" ilk="function" src="node.c" returns="int"/>
      </scope>
      <scope name="DOMNameSpaceNode" ilk="class"/>
      <scope name="DOMDocumentFragment" ilk="class" classrefs="DOMNode">
        <scope name="__construct" signature="__construct()" doc="" ilk="function" src="documentfragment.c" returns="void"/>
        <scope name="appendXML" signature="appendXML(string data)" doc="" ilk="function" src="documentfragment.c" returns="void"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMDocument" ilk="class" classrefs="DOMNode">
        <scope ilk="function" name="createElement" signature="createElement()"/>
        <scope ilk="function" name="createDocumentFragment" signature="createDocumentFragment()"/>
        <scope ilk="function" name="createTextNode" signature="createTextNode()"/>
        <scope ilk="function" name="createComment" signature="createComment()"/>
        <scope ilk="function" name="createCDATASection" signature="createCDATASection()"/>
        <scope ilk="function" name="createProcessingInstruction" signature="createProcessingInstruction()"/>
        <scope ilk="function" name="createAttribute" signature="createAttribute()"/>
        <scope ilk="function" name="createEntityReference" signature="createEntityReference()"/>
        <scope ilk="function" name="getElementsByTagName" signature="getElementsByTagName()"/>
        <scope ilk="function" name="importNode" signature="importNode()"/>
        <scope ilk="function" name="createElementNS" signature="createElementNS()"/>
        <scope ilk="function" name="createAttributeNS" signature="createAttributeNS()"/>
        <scope ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS()"/>
        <scope ilk="function" name="getElementById" signature="getElementById()"/>
        <scope ilk="function" name="adoptNode" signature="adoptNode()"/>
        <scope ilk="function" name="normalizeDocument" signature="normalizeDocument()"/>
        <scope ilk="function" name="renameNode" signature="renameNode()"/>
        <scope ilk="function" name="load" signature="load()"/>
        <scope ilk="function" name="save" signature="save()"/>
        <scope ilk="function" name="loadXML" signature="loadXML()"/>
        <scope ilk="function" name="saveXML" signature="saveXML()"/>
        <scope name="__construct" signature="__construct([string version], [string encoding])" doc="" ilk="function" src="document.c" returns="void"/>
        <scope ilk="function" name="validate" signature="validate()"/>
        <scope ilk="function" name="xinclude" signature="xinclude()"/>
        <scope ilk="function" name="loadHTML" signature="loadHTML()"/>
        <scope ilk="function" name="loadHTMLFile" signature="loadHTMLFile()"/>
        <scope ilk="function" name="saveHTML" signature="saveHTML()"/>
        <scope ilk="function" name="saveHTMLFile" signature="saveHTMLFile()"/>
        <scope ilk="function" name="schemaValidate" signature="schemaValidate()"/>
        <scope ilk="function" name="schemaValidateSource" signature="schemaValidateSource()"/>
        <scope ilk="function" name="relaxNGValidate" signature="relaxNGValidate()"/>
        <scope ilk="function" name="relaxNGValidateSource" signature="relaxNGValidateSource()"/>
        <scope name="registerNodeClass" signature="registerNodeClass(string baseclass, string extendedclass)" doc="Register extended class used to create base node type" ilk="function" src="document.c" returns="boolean"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMNodeList" ilk="class">
        <scope ilk="function" name="item" signature="item()"/>
      </scope>
      <scope name="DOMNamedNodeMap" ilk="class">
        <scope ilk="function" name="getNamedItem" signature="getNamedItem()"/>
        <scope ilk="function" name="setNamedItem" signature="setNamedItem()"/>
        <scope ilk="function" name="removeNamedItem" signature="removeNamedItem()"/>
        <scope ilk="function" name="item" signature="item()"/>
        <scope ilk="function" name="getNamedItemNS" signature="getNamedItemNS()"/>
        <scope ilk="function" name="setNamedItemNS" signature="setNamedItemNS()"/>
        <scope ilk="function" name="removeNamedItemNS" signature="removeNamedItemNS()"/>
      </scope>
      <scope name="DOMCharacterData" ilk="class" classrefs="DOMNode">
        <scope ilk="function" name="substringData" signature="substringData()"/>
        <scope ilk="function" name="appendData" signature="appendData()"/>
        <scope ilk="function" name="insertData" signature="insertData()"/>
        <scope ilk="function" name="deleteData" signature="deleteData()"/>
        <scope ilk="function" name="replaceData" signature="replaceData()"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMAttr" ilk="class" classrefs="DOMNode">
        <scope ilk="function" name="isId" signature="isId()"/>
        <scope name="__construct" signature="__construct(string name, [string value])" doc="" ilk="function" src="attr.c" returns="void"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMElement" ilk="class" classrefs="DOMNode">
        <scope ilk="function" name="getAttribute" signature="getAttribute()"/>
        <scope ilk="function" name="setAttribute" signature="setAttribute()"/>
        <scope ilk="function" name="removeAttribute" signature="removeAttribute()"/>
        <scope ilk="function" name="getAttributeNode" signature="getAttributeNode()"/>
        <scope ilk="function" name="setAttributeNode" signature="setAttributeNode()"/>
        <scope ilk="function" name="removeAttributeNode" signature="removeAttributeNode()"/>
        <scope ilk="function" name="getElementsByTagName" signature="getElementsByTagName()"/>
        <scope ilk="function" name="getAttributeNS" signature="getAttributeNS()"/>
        <scope ilk="function" name="setAttributeNS" signature="setAttributeNS()"/>
        <scope ilk="function" name="removeAttributeNS" signature="removeAttributeNS()"/>
        <scope ilk="function" name="getAttributeNodeNS" signature="getAttributeNodeNS()"/>
        <scope ilk="function" name="setAttributeNodeNS" signature="setAttributeNodeNS()"/>
        <scope ilk="function" name="getElementsByTagNameNS" signature="getElementsByTagNameNS()"/>
        <scope ilk="function" name="hasAttribute" signature="hasAttribute()"/>
        <scope ilk="function" name="hasAttributeNS" signature="hasAttributeNS()"/>
        <scope ilk="function" name="setIdAttribute" signature="setIdAttribute()"/>
        <scope ilk="function" name="setIdAttributeNS" signature="setIdAttributeNS()"/>
        <scope ilk="function" name="setIdAttributeNode" signature="setIdAttributeNode()"/>
        <scope name="__construct" signature="__construct(string name, [string value], [string uri])" doc="" ilk="function" src="element.c" returns="void"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMText" ilk="class" classrefs="DOMCharacterData">
        <scope ilk="function" name="splitText" signature="splitText()"/>
        <scope ilk="function" name="isWhitespaceInElementContent" signature="isWhitespaceInElementContent()"/>
        <scope ilk="function" name="isElementContentWhitespace" signature="isElementContentWhitespace()"/>
        <scope ilk="function" name="replaceWholeText" signature="replaceWholeText()"/>
        <scope name="__construct" signature="__construct([string value])" doc="" ilk="function" src="text.c" returns="void"/>
        <scope ilk="function" name="substringData" signature="substringData()"/>
        <scope ilk="function" name="appendData" signature="appendData()"/>
        <scope ilk="function" name="insertData" signature="insertData()"/>
        <scope ilk="function" name="deleteData" signature="deleteData()"/>
        <scope ilk="function" name="replaceData" signature="replaceData()"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMComment" ilk="class" classrefs="DOMCharacterData">
        <scope name="__construct" signature="__construct([string value])" doc="" ilk="function" src="comment.c" returns="void"/>
        <scope ilk="function" name="substringData" signature="substringData()"/>
        <scope ilk="function" name="appendData" signature="appendData()"/>
        <scope ilk="function" name="insertData" signature="insertData()"/>
        <scope ilk="function" name="deleteData" signature="deleteData()"/>
        <scope ilk="function" name="replaceData" signature="replaceData()"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMTypeinfo" ilk="class"/>
      <scope name="DOMUserDataHandler" ilk="class">
        <scope ilk="function" name="handle" signature="handle()"/>
      </scope>
      <scope name="DOMDomError" ilk="class"/>
      <scope name="DOMErrorHandler" ilk="class">
        <scope ilk="function" name="handleError" signature="handleError()"/>
      </scope>
      <scope name="DOMLocator" ilk="class"/>
      <scope name="DOMConfiguration" ilk="class">
        <scope ilk="function" name="setParameter" signature="setParameter()"/>
        <scope ilk="function" name="getParameter" signature="getParameter()"/>
        <scope ilk="function" name="canSetParameter" signature="canSetParameter()"/>
      </scope>
      <scope name="DOMCdataSection" ilk="class" classrefs="DOMText">
        <scope name="__construct" signature="__construct(string value)" doc="" ilk="function" src="cdatasection.c" returns="void"/>
        <scope ilk="function" name="splitText" signature="splitText()"/>
        <scope ilk="function" name="isWhitespaceInElementContent" signature="isWhitespaceInElementContent()"/>
        <scope ilk="function" name="isElementContentWhitespace" signature="isElementContentWhitespace()"/>
        <scope ilk="function" name="replaceWholeText" signature="replaceWholeText()"/>
        <scope ilk="function" name="substringData" signature="substringData()"/>
        <scope ilk="function" name="appendData" signature="appendData()"/>
        <scope ilk="function" name="insertData" signature="insertData()"/>
        <scope ilk="function" name="deleteData" signature="deleteData()"/>
        <scope ilk="function" name="replaceData" signature="replaceData()"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMDocumentType" ilk="class" classrefs="DOMNode">
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMNotation" ilk="class"/>
      <scope name="DOMEntity" ilk="class" classrefs="DOMNode">
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMEntityReference" ilk="class" classrefs="DOMNode">
        <scope name="__construct" signature="__construct(string name)" doc="" ilk="function" src="entityreference.c" returns="void"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMProcessingInstruction" ilk="class" classrefs="DOMNode">
        <scope name="__construct" signature="__construct(string name, [string value])" doc="" ilk="function" src="processinginstruction.c" returns="void"/>
        <scope ilk="function" name="insertBefore" signature="insertBefore()"/>
        <scope ilk="function" name="replaceChild" signature="replaceChild()"/>
        <scope ilk="function" name="removeChild" signature="removeChild()"/>
        <scope ilk="function" name="appendChild" signature="appendChild()"/>
        <scope ilk="function" name="hasChildNodes" signature="hasChildNodes()"/>
        <scope ilk="function" name="cloneNode" signature="cloneNode()"/>
        <scope ilk="function" name="normalize" signature="normalize()"/>
        <scope ilk="function" name="isSupported" signature="isSupported()"/>
        <scope ilk="function" name="hasAttributes" signature="hasAttributes()"/>
        <scope ilk="function" name="compareDocumentPosition" signature="compareDocumentPosition()"/>
        <scope ilk="function" name="isSameNode" signature="isSameNode()"/>
        <scope ilk="function" name="lookupPrefix" signature="lookupPrefix()"/>
        <scope ilk="function" name="isDefaultNamespace" signature="isDefaultNamespace()"/>
        <scope ilk="function" name="lookupNamespaceUri" signature="lookupNamespaceUri()"/>
        <scope ilk="function" name="isEqualNode" signature="isEqualNode()"/>
        <scope ilk="function" name="getFeature" signature="getFeature()"/>
        <scope ilk="function" name="setUserData" signature="setUserData()"/>
        <scope ilk="function" name="getUserData" signature="getUserData()"/>
        <scope ilk="function" name="getNodePath" signature="getNodePath()"/>
        <scope ilk="function" name="getLineNo" signature="getLineNo()"/>
        <scope ilk="function" name="C14N" signature="C14N()"/>
        <scope ilk="function" name="C14NFile" signature="C14NFile()"/>
      </scope>
      <scope name="DOMStringExtend" ilk="class">
        <scope ilk="function" name="findOffset16" signature="findOffset16()"/>
        <scope ilk="function" name="findOffset32" signature="findOffset32()"/>
      </scope>
      <scope name="DOMXPath" ilk="class">
        <scope name="__construct" signature="__construct(DOMDocument doc)" doc="U" ilk="function" src="xpath.c" returns="void"/>
        <scope ilk="function" name="registerNamespace" signature="registerNamespace()"/>
        <scope ilk="function" name="query" signature="query()"/>
        <scope ilk="function" name="evaluate" signature="evaluate()"/>
        <scope ilk="function" name="registerPhpFunctions" signature="registerPhpFunctions()"/>
      </scope>
      <scope name="finfo" ilk="class">
        <scope ilk="function" name="finfo" signature="finfo()"/>
        <scope ilk="function" name="set_flags" signature="set_flags()"/>
        <scope ilk="function" name="file" signature="file()"/>
        <scope ilk="function" name="buffer" signature="buffer()"/>
      </scope>
      <scope classrefs="Exception" doc="@ingroup SPL&#10;@brief Exception that represents error in the program logic.&#10;@since PHP 5.1&#10;&#10;This kind of exceptions should directly leed to a fix in your code." ilk="class" line="339" lineend="341" name="LogicException"/>
      <scope classrefs="LogicException" doc="@ingroup SPL&#10;@brief Exception thrown when a function call was illegal.&#10;@since PHP 5.1" ilk="class" line="347" lineend="349" name="BadFunctionCallException"/>
      <scope classrefs="BadFunctionCallException" doc="@ingroup SPL&#10;@brief Exception thrown when a method call was illegal.&#10;@since PHP 5.1" ilk="class" line="355" lineend="357" name="BadMethodCallException"/>
      <scope classrefs="LogicException" doc="@ingroup SPL&#10;@brief Exception that denotes a value not in the valid domain was used.&#10;@since PHP 5.1&#10;&#10;This kind of exception should be used to inform about domain erors in &#10;mathematical sense.&#10;&#10;@see RangeException" ilk="class" line="368" lineend="370" name="DomainException"/>
      <scope classrefs="LogicException" doc="@ingroup SPL&#10;@brief Exception that denotes invalid arguments were passed.&#10;@since PHP 5.1&#10;&#10;@see UnexpectedValueException" ilk="class" line="378" lineend="380" name="InvalidArgumentException"/>
      <scope classrefs="LogicException" doc="@ingroup SPL&#10;@brief Exception thrown when a parameter exceeds the allowed length.&#10;@since PHP 5.1&#10;&#10;This can be used for strings length, array size, file size, number of &#10;elements read from an Iterator and so on." ilk="class" line="389" lineend="391" name="LengthException"/>
      <scope classrefs="LogicException" doc="@ingroup SPL&#10;@brief Exception thrown when an illegal index was requested.&#10;@since PHP 5.1&#10;&#10;This represents errors that should be detected at compile time.&#10;&#10;@see OutOfBoundsException" ilk="class" line="401" lineend="403" name="OutOfRangeException"/>
      <scope classrefs="Exception" doc="@ingroup SPL&#10;@brief Exception thrown for errors that are only detectable at runtime. &#10;@since PHP 5.1" ilk="class" line="409" lineend="411" name="RuntimeException"/>
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#10;@brief Exception thrown when an illegal index was requested.&#10;@since PHP 5.1&#10;&#10;This represents errors that cannot be detected at compile time.&#10;&#10;@see OutOfRangeException" ilk="class" line="421" lineend="423" name="OutOfBoundsException"/>
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#10;@brief Exception thrown to indicate arithmetic/buffer overflow.&#10;@since PHP 5.1" ilk="class" line="429" lineend="431" name="OverflowException"/>
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#10;@brief Exception thrown to indicate range errors during program execution.&#10;@since PHP 5.1&#10;&#10;Normally this means there was an arithmetic error other than under/overflow.&#10;This is the runtime version of DomainException.&#10;&#10;@see DomainException" ilk="class" line="442" lineend="444" name="RangeException"/>
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#10;@brief Exception thrown to indicate arithmetic/buffer underflow.&#10;@since PHP 5.1" ilk="class" line="450" lineend="452" name="UnderflowException"/>
      <scope classrefs="RuntimeException" doc="@ingroup SPL&#10;@brief Exception thrown to indicate an unexpected value.&#10;@since PHP 5.1&#10;&#10;Typically this happens when a function calls another function and espects&#10;the return value to be of a certain type or value not including arithmetic&#10;or buffer related errors. &#10;&#10;@see InvalidArgumentException" ilk="class" line="464" lineend="466" name="UnexpectedValueException"/>
      <scope doc="@file recursiveiteratoriterator.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class RecursiveIteratorIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/**&#13;&#10;@brief   Iterates through recursive iterators&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.2&#13;&#10;@since PHP 5.0&#13;&#10;&#13;&#10;The objects of this class are created by instances of RecursiveIterator. &#13;&#10;Elements of those iterators may be traversable themselves. If so these &#13;&#10;sub elements are recursed into." ilk="class" interfacerefs="OuterIterator" line="22" lineend="235" name="RecursiveIteratorIterator">
        <scope attributes="__ctor__" doc="Construct from RecursiveIterator&#13;&#10;&#13;&#10;@param it     RecursiveIterator to iterate&#13;&#10;@param mode   Operation mode (one of):&#13;&#10;              - LEAVES_ONLY only show leaves&#13;&#10;              - SELF_FIRST  show parents prior to their childs&#13;&#10;              - CHILD_FIRST show all children prior to their parent&#13;&#10;@param flags  Control flags, zero or any combination of the following&#13;&#10;              (since PHP 5.1).&#13;&#10;              - CATCH_GET_CHILD which catches exceptions during&#13;&#10;                getChildren() calls and simply jumps to the next &#13;&#10;                element." ilk="function" line="53" lineend="58" name="__construct" signature="__construct(RecursiveIterator, Operation, Control)"/>
        <scope doc="Rewind to top iterator as set in constructor" ilk="function" line="62" lineend="71" name="rewind" signature="rewind()"/>
        <scope doc="@return whether iterator is valid" ilk="function" line="75" lineend="87" name="valid" returns="whether" signature="valid()"/>
        <scope doc="@return current key" ilk="function" line="91" lineend="95" name="key" returns="current" signature="key()"/>
        <scope doc="@return current element" ilk="function" line="99" lineend="103" name="current" returns="current" signature="current()"/>
        <scope doc="Forward to next element" ilk="function" line="107" lineend="154" name="next" signature="next()"/>
        <scope doc="@return Sub Iterator at given level or if unspecified the current sub &#13;&#10;         Iterator" ilk="function" line="159" lineend="165" name="getSubIterator" returns="Sub" signature="getSubIterator(level=NULL)"/>
        <scope doc="@return The inner iterator" ilk="function" line="170" lineend="173" name="getInnerIterator" returns="The" signature="getInnerIterator()"/>
        <scope doc="@return Current Depth (Number of parents)" ilk="function" line="177" lineend="180" name="getDepth" returns="Current" signature="getDepth()"/>
        <scope doc="@return whether current sub iterators current element has children&#13;&#10;@since PHP 5.1" ilk="function" line="185" lineend="188" name="callHasChildren" returns="whether" signature="callHasChildren()"/>
        <scope doc="@return current sub iterators current children&#13;&#10;@since PHP 5.1" ilk="function" line="193" lineend="196" name="callGetChildren" returns="current" signature="callGetChildren()"/>
        <scope doc="Called right after calling getChildren() and its rewind().&#13;&#10;@since PHP 5.1" ilk="function" line="201" lineend="203" name="beginChildren" signature="beginChildren()"/>
        <scope doc="Called after current child iterator is invalid and right before it&#13;&#10;gets destructed.&#13;&#10;@since PHP 5.1" ilk="function" line="209" lineend="211" name="endChildren" signature="endChildren()"/>
        <scope attributes="private" ilk="function" line="213" lineend="228" name="callNextElement" signature="callNextElement(after_move)"/>
        <scope doc="Called when the next element is available" ilk="function" line="232" lineend="234" name="nextElement" signature="nextElement()"/>
        <variable citdl="int" ilk="constant" line="25" name="LEAVES_ONLY"/>
        <variable citdl="int" ilk="constant" line="27" name="SELF_FIRST"/>
        <variable citdl="int" ilk="constant" line="29" name="CHILD_FIRST"/>
        <variable citdl="int" ilk="constant" line="33" name="CATCH_GET_CHILD"/>
        <variable attributes="private" citdl="array()" line="35" name="ait"/>
        <variable attributes="private" citdl="int" line="36" name="count"/>
        <variable attributes="private" citdl="self.LEAVES_ONLY" line="37" name="mode"/>
        <variable attributes="private" citdl="int" line="38" name="flags"/>
      </scope>
      <scope doc="@file iteratoriterator.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class IteratorIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/** @ingroup SPL&#13;&#10;@brief Basic Iterator wrapper&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;This iterator wrapper allows to convert anything that is traversable into &#13;&#10;an Iterator. It is very important to understand that most classes that do &#13;&#10;not implement Iterator have their reasone to. Most likely they do not allow&#13;&#10;the full Iterator feature set. If so you need to provide techniques to&#13;&#10;prevent missuse. If you do not you must expect exceptions or fatal erros.&#13;&#10;&#13;&#10;It is also possible to derive the class and implement IteratorAggregate by&#13;&#10;downcasting the instances returned in getIterator. See the following&#13;&#10;example (assuming BaseClass implements Traversable):&#13;&#10;\code&#13;&#10;class SomeClass extends BaseClass implements IteratorAggregate&#13;&#10;{&#13;&#10;  function getIterator()&#13;&#10;  {&#13;&#10;    return new IteratorIterator($this, 'BaseClass');&#13;&#10;  }&#13;&#10;}&#13;&#10;\endcode&#13;&#10;&#13;&#10;As you can see in the example this approach requires that the class to &#13;&#10;downcast to is actually a base class of the specified iterator to wrap.&#13;&#10;Omitting the downcast in the above example would result in an endless loop&#13;&#10;since IteratorIterator::__construct() would call SomeClass::getIterator()." ilk="class" interfacerefs="OuterIterator" line="40" lineend="119" name="IteratorIterator">
        <scope attributes="__ctor__" doc="Construct an IteratorIterator from an Iterator or an IteratorAggregate.&#13;&#10;&#13;&#10;@param iterator  inner iterator&#13;&#10;@param classname optional class the iterator has to be downcasted to" ilk="function" line="47" lineend="61" name="__construct" signature="__construct(inner, optional)"/>
        <scope doc="\return the inner iterator as passed to the constructor" ilk="function" line="65" lineend="68" name="getInnerIterator" returns="this.iterator" signature="getInnerIterator()"/>
        <scope doc="\return whether the iterator is valid" ilk="function" line="72" lineend="75" name="valid" returns="this.iterator.valid()" signature="valid()"/>
        <scope doc="\return current key" ilk="function" line="79" lineend="82" name="key" returns="this.iterator.key()" signature="key()"/>
        <scope doc="\return current value" ilk="function" line="86" lineend="89" name="current" returns="this.iterator.current()" signature="current()"/>
        <scope doc="forward to next element" ilk="function" line="93" lineend="96" name="next" returns="this.iterator.next()" signature="next()"/>
        <scope doc="rewind to the first element" ilk="function" line="100" lineend="103" name="rewind" returns="this.iterator.rewind()" signature="rewind()"/>
        <scope doc="Aggregate the inner iterator&#13;&#10;&#13;&#10;@param func    Name of method to invoke&#13;&#10;@param params  Array of parameters to pass to method" ilk="function" line="110" lineend="113" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)"/>
        <variable attributes="private" line="118" name="iterator"/>
      </scope>
      <scope attributes="abstract" doc="@file filteriterator.inc&#10;@ingroup SPL&#10;@brief class FilterIterator&#10;@author  Marcus Boerger&#10;@date    2003 - 2006&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/**&#13;&#10;@brief   Abstract filter for iterators&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.1&#13;&#10;@since PHP 5.0&#13;&#10;&#13;&#10;Instances of this class act as a filter around iterators. In other words &#13;&#10;you can put an iterator into the constructor and the instance will only &#13;&#10;return selected (accepted) elements.&#13;&#10;&#13;&#10;The only thing that needs to be done to make this work is implementing &#13;&#10;method accept(). Typically this invloves reading the current element or &#13;&#10;key of the inner Iterator and checking whether it is acceptable." ilk="class" interfacerefs="OuterIterator" line="26" lineend="125" name="FilterIterator">
        <scope attributes="__ctor__" doc="Constructs a filter around another iterator.&#13;&#10;&#13;&#10;@param it     Iterator to filter" ilk="function" line="35" lineend="37" name="__construct" signature="__construct(Iterator)"/>
        <scope doc="Rewind the inner iterator." ilk="function" line="42" lineend="45" name="rewind" signature="rewind()"/>
        <scope attributes="abstract" doc="Accept function to decide whether an element of the inner iterator&#13;&#10;should be accessible through the Filteriterator.&#13;&#10;&#13;&#10;@return whether or not to expose the current element of the inner&#13;&#10;        iterator." ilk="function" line="54" lineend="54" name="accept" returns="whether" signature="accept()"/>
        <scope attributes="protected" doc="Fetch next element and store it.&#13;&#10;&#13;&#10;@return void" ilk="function" line="61" lineend="68" name="fetch" signature="fetch()"/>
        <scope doc="Move to next element&#13;&#10;&#13;&#10;@return void" ilk="function" line="75" lineend="78" name="next" signature="next()"/>
        <scope doc="@return Whether more elements are available" ilk="function" line="83" lineend="85" name="valid" returns="Whether" signature="valid()"/>
        <scope doc="@return The current key" ilk="function" line="90" lineend="92" name="key" returns="The" signature="key()"/>
        <scope doc="@return The current value" ilk="function" line="97" lineend="99" name="current" returns="The" signature="current()"/>
        <scope attributes="protected" doc="hidden __clone" ilk="function" line="104" lineend="106" name="__clone" signature="__clone()"/>
        <scope doc="@return The inner iterator" ilk="function" line="111" lineend="114" name="getInnerIterator" returns="The" signature="getInnerIterator()"/>
        <scope doc="Aggregate the inner iterator&#13;&#10;&#13;&#10;@param func    Name of method to invoke&#13;&#10;@param params  Array of parameters to pass to method" ilk="function" line="121" lineend="124" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)"/>
        <variable attributes="private" citdl="it" line="28" name="it"/>
      </scope>
      <scope attributes="abstract" classrefs="FilterIterator" doc="@file recursivefilteriterator.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class RecursiveFilterIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/** @ingroup SPL&#13;&#10;@brief   Iterator to filter recursive iterators&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.0&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;Passes the RecursiveIterator interface to the inner Iterator and provides&#13;&#10;the same functionality as FilterIterator. This allows you to skip parents&#13;&#10;and all their childs before loading them all. You need to care about&#13;&#10;function getChildren() because it may not always suit your needs. The &#13;&#10;builtin behavior uses reflection to return a new instance of the exact same&#13;&#10;class it is called from. That is you extend RecursiveFilterIterator and&#13;&#10;getChildren() will create instance of that class. The problem is that doing&#13;&#10;this does not transport any state or control information of your accept()&#13;&#10;implementation to the new instance. To overcome this problem you might &#13;&#10;need to overwrite getChildren(), call this implementation and pass the&#13;&#10;control vaules manually." ilk="class" interfacerefs="RecursiveIterator" line="30" lineend="60" name="RecursiveFilterIterator">
        <scope attributes="__ctor__" doc="@param $it the RecursiveIterator to filter" ilk="function" line="34" lineend="37" name="__construct" signature="__construct()"/>
        <scope doc="@return whether the current element has children" ilk="function" line="41" lineend="44" name="hasChildren" returns="whether" signature="hasChildren()"/>
        <scope doc="@return an iterator for the current elements children&#13;&#10;&#13;&#10;@note the returned iterator will be of the same class as $this" ilk="function" line="50" lineend="57" name="getChildren" returns="an" signature="getChildren()"/>
        <variable attributes="private" line="59" name="ref"/>
      </scope>
      <scope classrefs="RecursiveFilterIterator" doc="@file parentiterator.inc&#10;@ingroup SPL&#10;@brief class FilterIterator&#10;@author  Marcus Boerger&#10;@date    2003 - 2006&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/**&#13;&#10;@brief   Iterator to filter parents&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.2&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;This extended FilterIterator allows a recursive iteration using &#13;&#10;RecursiveIteratorIterator that only shows those elements which have &#13;&#10;children." ilk="class" line="22" lineend="30" name="ParentIterator">
        <scope doc="@return whetehr the current element has children" ilk="function" line="26" lineend="29" name="accept" returns="whetehr" signature="accept()"/>
      </scope>
      <scope doc="@file limititerator.inc&#10;@ingroup SPL&#10;@brief class LimitIterator&#10;@author  Marcus Boerger&#10;@date    2003 - 2005&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/**&#13;&#10;@brief   Limited Iteration over another Iterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.1&#13;&#10;@since PHP 5.0&#13;&#10;&#13;&#10;A class that starts iteration at a certain offset and only iterates over&#13;&#10;a specified amount of elements.&#13;&#10;&#13;&#10;This class uses SeekableIterator::seek() if available and rewind() plus&#13;&#10;a skip loop otehrwise." ilk="class" interfacerefs="OuterIterator" line="24" lineend="132" name="LimitIterator">
        <scope attributes="__ctor__" doc="Construct&#13;&#10;&#13;&#10;@param it     Iterator to limit&#13;&#10;@param offset Offset to first element&#13;&#10;@param count  Maximum number of elements to show or -1 for all" ilk="function" line="37" lineend="49" name="__construct" signature="__construct(Iterator, Offset, Maximum)"/>
        <scope doc="Seek to specified position&#13;&#10;@param position offset to seek to (relative to beginning not offset&#13;&#10;                specified in constructor).&#13;&#10;@throw exception when position is invalid" ilk="function" line="56" lineend="71" name="seek" signature="seek(position, offset)"/>
        <scope doc="Rewind to offset specified in constructor" ilk="function" line="75" lineend="80" name="rewind" signature="rewind()"/>
        <scope doc="@return whether iterator is valid" ilk="function" line="84" lineend="87" name="valid" returns="whether" signature="valid()"/>
        <scope doc="@return current key" ilk="function" line="91" lineend="93" name="key" returns="current" signature="key()"/>
        <scope doc="@return current element" ilk="function" line="97" lineend="99" name="current" returns="current" signature="current()"/>
        <scope doc="Forward to nect element" ilk="function" line="103" lineend="106" name="next" signature="next()"/>
        <scope doc="@return current position relative to zero (not to offset specified in &#13;&#10;         constructor)." ilk="function" line="111" lineend="113" name="getPosition" returns="current" signature="getPosition()"/>
        <scope doc="@return The inner iterator" ilk="function" line="118" lineend="121" name="getInnerIterator" returns="The" signature="getInnerIterator()"/>
        <scope doc="Aggregate the inner iterator&#13;&#10;&#13;&#10;@param func    Name of method to invoke&#13;&#10;@param params  Array of parameters to pass to method" ilk="function" line="128" lineend="131" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)"/>
        <variable attributes="private" citdl="it" line="26" name="it"/>
        <variable attributes="private" line="27" name="offset"/>
        <variable attributes="private" line="28" name="count"/>
        <variable attributes="private" citdl="int" line="29" name="pos"/>
      </scope>
      <scope doc="@file cachingiterator.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class CachingIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/**&#13;&#10;@brief   Cached iteration over another Iterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.2&#13;&#10;@since PHP 5.0&#13;&#10;&#13;&#10;This iterator wrapper does a one ahead iteration. This way it knows whether&#13;&#10;the inner iterator has one more element.&#13;&#10;&#13;&#10;@note If you want to convert the elements into strings and the inner &#13;&#10;      Iterator is an internal Iterator then you need to provide the &#13;&#10;      flag CALL_TOSTRING to do the conversion when the actual element&#13;&#10;      is being fetched. Otherwise the conversion would happen with the&#13;&#10;      already changed iterator. If you do not need this then it you should&#13;&#10;      omit this flag because it costs unneccessary work and time." ilk="class" interfacerefs="OuterIterator" line="28" lineend="155" name="CachingIterator">
        <scope attributes="__ctor__" doc="Construct from another iterator&#13;&#10;&#13;&#10;@param it    Iterator to cache&#13;&#10;@param flags Bitmask: &#13;&#10;             - CALL_TOSTRING  (whether to call __toString() for every element)" ilk="function" line="47" lineend="57" name="__construct" signature="__construct(Iterator, Bitmask)"/>
        <scope doc="Rewind the Iterator" ilk="function" line="61" lineend="65" name="rewind" signature="rewind()"/>
        <scope doc="Forward to the next element" ilk="function" line="69" lineend="87" name="next" signature="next()"/>
        <scope doc="@return whether teh iterator is valid" ilk="function" line="91" lineend="94" name="valid" returns="whether" signature="valid()"/>
        <scope doc="@return whether there is one more element" ilk="function" line="98" lineend="101" name="hasNext" returns="whether" signature="hasNext()"/>
        <scope doc="@return the current element" ilk="function" line="105" lineend="108" name="current" returns="the" signature="current()"/>
        <scope doc="@return the current key" ilk="function" line="112" lineend="115" name="key" returns="the" signature="key()"/>
        <scope doc="Aggregate the inner iterator&#13;&#10;&#13;&#10;@param func    Name of method to invoke&#13;&#10;@param params  Array of parameters to pass to method" ilk="function" line="122" lineend="125" name="__call" returns="call_user_func_array()" signature="__call(func, params, Name, Array)"/>
        <scope doc="@return the string represenatation that was generated for the current &#13;&#10;         element&#13;&#10;@throw exception when CALL_TOSTRING was not specified in constructor" ilk="function" line="131" lineend="146" name="__toString" returns="the" signature="__toString()"/>
        <scope doc="@return The inner iterator" ilk="function" line="151" lineend="154" name="getInnerIterator" returns="The" signature="getInnerIterator()"/>
        <variable citdl="int" ilk="constant" line="30" name="CALL_TOSTRING"/>
        <variable citdl="int" ilk="constant" line="31" name="CATCH_GET_CHILD"/>
        <variable citdl="int" ilk="constant" line="32" name="TOSTRING_USE_KEY"/>
        <variable citdl="int" ilk="constant" line="33" name="TOSTRING_USE_CURRENT"/>
        <variable attributes="private" citdl="it" line="35" name="it"/>
        <variable attributes="private" citdl="this.it.current()" line="36" name="current"/>
        <variable attributes="private" citdl="this.it.key()" line="37" name="key"/>
        <variable attributes="private" line="38" name="valid"/>
        <variable attributes="private" citdl="this.current.__toString()" line="39" name="strValue"/>
      </scope>
      <scope classrefs="CachingIterator" doc="@file recursivecachingiterator.inc&#10;@ingroup SPL&#10;@brief class RecursiveCachingIterator&#10;@author  Marcus Boerger&#10;@date    2003 - 2005&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/**&#13;&#10;@brief   Cached recursive iteration over another Iterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.2&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;@see CachingIterator" ilk="class" interfacerefs="RecursiveIterator" line="20" lineend="97" name="RecursiveCachingIterator">
        <scope attributes="__ctor__" doc="Construct from another iterator&#13;&#10;&#13;&#10;@param it    Iterator to cache&#13;&#10;@param flags Bitmask: &#13;&#10;             - CALL_TOSTRING   (whether to call __toString() for every element)&#13;&#10;             - CATCH_GET_CHILD (whether to catch exceptions when trying to get childs)" ilk="function" line="32" lineend="35" name="__construct" signature="__construct(Iterator, Bitmask)"/>
        <scope doc="Rewind Iterator" ilk="function" line="39" lineend="44" name="rewind" signature="rewind()"/>
        <scope doc="Forward to next element if necessary then an Iterator for the Children&#13;&#10;will be created." ilk="function" line="49" lineend="76" name="next" signature="next()"/>
        <scope doc="@return whether the current element has children&#13;&#10;@note The check whether the Iterator for the children can be created was&#13;&#10;      already executed. Hence when flag CATCH_GET_CHILD was given in&#13;&#10;      constructor this fucntion returns false so that getChildren does &#13;&#10;      not try to access those children." ilk="function" line="86" lineend="89" name="hasChildren" returns="whether" signature="hasChildren()"/>
        <scope doc="@return An Iterator for the children" ilk="function" line="93" lineend="96" name="getChildren" returns="An" signature="getChildren()"/>
        <variable attributes="private" citdl="boolean" line="22" name="hasChildren"/>
        <variable attributes="private" citdl="ref.newInstance()" line="23" name="getChildren"/>
        <variable attributes="private" line="78" name="ref"/>
      </scope>
      <scope classrefs="IteratorIterator" doc="@file norewinditerator.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class NoRewindIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/** @ingroup SPL&#13;&#10;@brief   An Iterator wrapper that doesn't call rewind&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.1&#13;&#10;@since PHP 5.1" ilk="class" line="18" lineend="26" name="NoRewindIterator">
        <scope doc="Simply prevent execution of inner iterators rewind()." ilk="function" line="22" lineend="25" name="rewind" signature="rewind()"/>
      </scope>
      <scope doc="@file appenditerator.inc&#10;@ingroup SPL&#10;@brief class AppendIterator&#10;@author  Marcus Boerger&#10;@date    2003 - 2005&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/** @ingroup SPL&#10;@brief   Iterator that iterates over several iterators one after the other&#10;@author  Marcus Boerger&#10;@version 1.0&#10;@since PHP 5.1" ilk="class" interfacerefs="OuterIterator" line="18" lineend="120" name="AppendIterator">
        <scope attributes="__ctor__" doc="Construct an empty AppendIterator" ilk="function" line="25" lineend="28" name="__construct" signature="__construct()"/>
        <scope doc="Append an Iterator&#10;@param $it Iterator to append&#10;&#10;If the current state is invalid but the appended iterator is valid&#10;the the AppendIterator itself becomes valid. However there will be no&#10;call to $it-&gt;rewind(). Also if the current state is invalid the inner&#10;ArrayIterator will be rewound und forwarded to the appended element." ilk="function" line="38" lineend="41" name="append" signature="append()"/>
        <scope doc="@return the current inner Iterator" ilk="function" line="45" lineend="48" name="getInnerIterator" returns="the" signature="getInnerIterator()"/>
        <scope doc="Rewind to the first element of the first inner Iterator.&#10;@return void" ilk="function" line="53" lineend="60" name="rewind" signature="rewind()"/>
        <scope doc="@return whether the current element is valid" ilk="function" line="64" lineend="67" name="valid" returns="whether" signature="valid()"/>
        <scope doc="@return the current value if it is valid or \c NULL" ilk="function" line="71" lineend="78" name="current" returns="the" signature="current()"/>
        <scope doc="@return the current key if it is valid or \c NULL" ilk="function" line="82" lineend="85" name="key" returns="the" signature="key()"/>
        <scope doc="Move to the next element. If this means to another Iterator that &#10;rewind that Iterator.&#10;@return void" ilk="function" line="91" lineend="112" name="next" signature="next()"/>
        <scope doc="Aggregates the inner iterator" ilk="function" line="116" lineend="119" name="__call" returns="call_user_func_array()" signature="__call(func, params)"/>
        <variable attributes="private" citdl="ArrayIterator" line="21" name="iterators"/>
      </scope>
      <scope classrefs="IteratorIterator" doc="@file infiniteiterator.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class InfiniteIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/** @ingroup SPL&#13;&#10;@brief   An infinite Iterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.1&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;This Iterator takes another Iterator and infinitvely iterates it by&#13;&#10;rewinding it when its end is reached.&#13;&#10;&#13;&#10;\note Even an InfiniteIterator stops if its inner Iterator is empty.&#13;&#10;&#13;&#10;\verbatim&#13;&#10;$it       = new ArrayIterator(array(1,2,3));&#13;&#10;$infinite = new InfiniteIterator($it);&#13;&#10;$limit    = new LimitIterator($infinite, 0, 5);&#13;&#10;foreach($limit as $val=&gt;$key)&#13;&#10;{&#13;&#10; echo &quot;$val=&gt;$key\n&quot;;&#13;&#10;}&#13;&#10;\endverbatim" ilk="class" line="33" lineend="46" name="InfiniteIterator">
        <scope doc="Move the inner Iterator forward to its next element or rewind it.&#13;&#10;@return void" ilk="function" line="38" lineend="45" name="next" signature="next()"/>
      </scope>
      <scope doc="@file regexiterator.inc&#10;@ingroup SPL&#10;@brief class RegexIterator&#10;@author  Marcus Boerger&#10;@date    2003 - 2006&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/**&#13;&#10;@brief   Regular expression filter for iterators&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.0&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;This filter iterator assumes that the inner iterator" ilk="class" interfacerefs="FilterIterator" line="20" lineend="161" name="RegexIterator">
        <scope attributes="__ctor__" doc="&lt; the value used for current() &#10;/**&#13;&#10;Constructs a regular expression filter around an iterator whose &#13;&#10;elemnts or keys are strings.&#13;&#10;&#13;&#10;@param it          inner iterator&#13;&#10;@param regex       the regular expression to match&#13;&#10;@param mode        operation mode (one of self::MATCH, self::GET_MATCH, &#13;&#10;                   self::ALL_MATCHES, self::SPLIT)&#13;&#10;@param flags       special flags (self::USE_KEY)&#13;&#10;@param preg_flags  global PREG_* flags, see preg_match(), &#13;&#10;                   preg_match_all(), preg_split()" ilk="function" line="52" lineend="58" name="__construct" signature="__construct(inner, the, operation, special, global)"/>
        <scope doc="Match current or key against regular expression using mode, flags and&#13;&#10;preg_flags.&#13;&#10;&#13;&#10;@return whether this is a match&#13;&#10;&#13;&#10;@warning never call this twice for the same state" ilk="function" line="68" lineend="104" name="accept" returns="whether" signature="accept()"/>
        <scope doc="@return the key after accept has been called" ilk="function" line="108" lineend="111" name="key" returns="the" signature="key()"/>
        <scope doc="@return the current value after accept has been called" ilk="function" line="115" lineend="118" name="current" returns="the" signature="current()"/>
        <scope doc="@return current operation mode" ilk="function" line="122" lineend="125" name="getMode" returns="current" signature="getMode()"/>
        <scope doc="@param mode new operaion mode" ilk="function" line="129" lineend="132" name="setMode" signature="setMode(mode, new)"/>
        <scope doc="@return current operation flags" ilk="function" line="136" lineend="139" name="getFlags" returns="current" signature="getFlags()"/>
        <scope doc="@param flags new operaion flags" ilk="function" line="143" lineend="146" name="setFlags" signature="setFlags(flags, new)"/>
        <scope doc="@return current PREG flags" ilk="function" line="150" lineend="153" name="getPregFlags" returns="current" signature="getPregFlags()"/>
        <scope doc="@param preg_flags new PREG flags" ilk="function" line="157" lineend="160" name="setPregFlags" signature="setPregFlags(preg_flags, new)"/>
        <variable citdl="int" ilk="constant" line="22" name="USE_KEY"/>
        <variable citdl="int" ilk="constant" line="25" name="MATCH"/>
        <variable citdl="int" ilk="constant" line="26" name="GET_MATCH"/>
        <variable citdl="int" ilk="constant" line="27" name="ALL_MATCHES"/>
        <variable citdl="int" ilk="constant" line="28" name="SPLIT"/>
        <variable citdl="int" ilk="constant" line="29" name="REPLACE"/>
        <variable attributes="private" citdl="regex" line="31" name="regex"/>
        <variable attributes="private" citdl="mode" line="32" name="mode"/>
        <variable attributes="private" citdl="flags" line="34" name="flags"/>
        <variable attributes="private" citdl="preg_flags" line="35" name="preg_flags"/>
        <variable attributes="private" citdl="result" line="37" name="key"/>
        <variable attributes="private" citdl="result" line="38" name="current"/>
      </scope>
      <scope classrefs="RegexIterator" doc="@file recursiveregexiterator.inc&#10;@ingroup SPL&#10;@brief class RegexIterator&#10;@author  Marcus Boerger&#10;@date    2003 - 2006&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/**&#13;&#10;@brief   Recursive regular expression filter for iterators&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.0&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;This filter iterator assumes that the inner iterator" ilk="class" interfacerefs="RecursiveIterator" line="20" lineend="59" name="RecursiveRegexIterator">
        <scope attributes="__ctor__" doc="Constructs a regular expression filter around an iterator whose &#13;&#10;elemnts or keys are strings.&#13;&#10;&#13;&#10;@param it          inner iterator&#13;&#10;@param regex       the regular expression to match&#13;&#10;@param mode        operation mode (one of self::MATCH, self::GET_MATCH, &#13;&#10;                   self::ALL_MATCHES, self::SPLIT)&#13;&#10;@param flags       special flags (self::USE_KEY)&#13;&#10;@param preg_flags  global PREG_* flags, see preg_match(), &#13;&#10;                   preg_match_all(), preg_split()" ilk="function" line="34" lineend="36" name="__construct" signature="__construct(inner, the, operation, special, global)"/>
        <scope doc="@return whether the current element has children" ilk="function" line="40" lineend="43" name="hasChildren" returns="whether" signature="hasChildren()"/>
        <scope doc="@return an iterator for the current elements children&#13;&#10;&#13;&#10;@note the returned iterator will be of the same class as $this" ilk="function" line="49" lineend="56" name="getChildren" returns="an" signature="getChildren()"/>
        <variable attributes="private" line="58" name="ref"/>
      </scope>
      <scope doc="@file emptyiterator.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class EmptyIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/** @ingroup SPL&#13;&#10;@brief   An empty Iterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.0&#13;&#10;@since PHP 5.1" ilk="class" interfacerefs="Iterator" line="18" lineend="60" name="EmptyIterator">
        <scope doc="No operation.&#13;&#10;@return void" ilk="function" line="23" lineend="26" name="rewind" signature="rewind()"/>
        <scope doc="@return \c false" ilk="function" line="30" lineend="33" name="valid" returns="boolean" signature="valid()"/>
        <scope doc="This function must not be called. It throws an exception upon access.&#13;&#10;@throw Exception&#13;&#10;@return void" ilk="function" line="39" lineend="42" name="current" signature="current()"/>
        <scope doc="This function must not be called. It throws an exception upon access.&#13;&#10;@throw Exception&#13;&#10;@return void" ilk="function" line="48" lineend="51" name="key" signature="key()"/>
        <scope doc="No operation.&#13;&#10;@return void" ilk="function" line="56" lineend="59" name="next" signature="next()"/>
      </scope>
      <scope name="RecursiveTreeIterator" ilk="class" classrefs="RecursiveIteratorIterator">
        <scope name="__construct" signature="__construct(RecursiveIterator" doc="throws InvalidArgumentException&#10;RecursiveIteratorIterator to generate ASCII graphic&#10;trees for the entries in a RecursiveIterator" ilk="function" src="spl_iterators.c" returns="void"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope name="key" signature="key()" doc="Returns the current key prefixed and postfixed" ilk="function" src="spl_iterators.c" returns="mixed"/>
        <scope name="current" signature="current()" doc="Returns the current element prefixed and postfixed" ilk="function" src="spl_iterators.c" returns="mixed"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="beginIteration" signature="beginIteration()"/>
        <scope ilk="function" name="endIteration" signature="endIteration()"/>
        <scope ilk="function" name="callHasChildren" signature="callHasChildren()"/>
        <scope ilk="function" name="callGetChildren" signature="callGetChildren()"/>
        <scope ilk="function" name="beginChildren" signature="beginChildren()"/>
        <scope ilk="function" name="endChildren" signature="endChildren()"/>
        <scope ilk="function" name="nextElement" signature="nextElement()"/>
        <scope name="getPrefix" signature="getPrefix()" doc="Returns the string to place in front of current element" ilk="function" src="spl_iterators.c" returns="string"/>
        <scope name="setPrefixPart" signature="setPrefixPart()" doc="throws OutOfRangeException Sets prefix parts as used in&#10;getPrefix" ilk="function" src="spl_iterators.c" returns="void"/>
        <scope name="getEntry" signature="getEntry()" doc="Returns the string presentation built for current&#10;element" ilk="function" src="spl_iterators.c" returns="string"/>
        <scope name="getPostfix" signature="getPostfix()" doc="Returns the string to place after the current element" ilk="function" src="spl_iterators.c" returns="string"/>
        <scope ilk="function" name="getDepth" signature="getDepth()"/>
        <scope ilk="function" name="getSubIterator" signature="getSubIterator()"/>
        <scope ilk="function" name="getInnerIterator" signature="getInnerIterator()"/>
        <scope ilk="function" name="setMaxDepth" signature="setMaxDepth()"/>
        <scope ilk="function" name="getMaxDepth" signature="getMaxDepth()"/>
        <variable name="LEAVES_ONLY" citdl="integer" ilk="constant"/>
        <variable name="SELF_FIRST" citdl="integer" ilk="constant"/>
        <variable name="CHILD_FIRST" citdl="integer" ilk="constant"/>
        <variable name="CATCH_GET_CHILD" citdl="integer" ilk="constant"/>
        <variable name="BYPASS_CURRENT" citdl="integer" ilk="constant"/>
        <variable name="BYPASS_KEY" citdl="integer" ilk="constant"/>
        <variable name="PREFIX_LEFT" citdl="integer" ilk="constant"/>
        <variable name="PREFIX_MID_HAS_NEXT" citdl="integer" ilk="constant"/>
        <variable name="PREFIX_MID_LAST" citdl="integer" ilk="constant"/>
        <variable name="PREFIX_END_HAS_NEXT" citdl="integer" ilk="constant"/>
        <variable name="PREFIX_END_LAST" citdl="integer" ilk="constant"/>
        <variable name="PREFIX_RIGHT" citdl="integer" ilk="constant"/>
      </scope>
      <scope doc="@ingroup SPL&#10;@brief An Array wrapper&#10;@since PHP 5.0&#10;@version 1.2&#10;&#10;This array wrapper allows to recursively iterate over Arrays and public &#10;Object properties.&#10;&#10;@see ArrayIterator" ilk="class" interfacerefs="IteratorAggregate ArrayAccess Countable" line="606" lineend="712" name="ArrayObject">
        <scope attributes="__ctor__" doc="Construct a new array iterator from anything that has a hash table.&#10;That is any Array or Object.&#10;&#10;@param $array the array to use.&#10;@param $flags see setFlags().&#10;@param $iterator_class class used in getIterator()" ilk="function" line="621" lineend="621" name="__construct" signature="__construct(array, flags=0, iterator_class=&quot;ArrayIterator&quot;)"/>
        <scope doc="Set behavior flags.&#10;&#10;@param $flags bitmask as follows:&#10;       0 set: properties of the object have their normal functionality&#10;              when accessed as list (var_dump, foreach, etc.)&#10;       1 set: array indices can be accessed as properties in read/write" ilk="function" line="630" lineend="630" name="setFlags" signature="setFlags(flags)"/>
        <scope doc="@return current flags" ilk="function" line="634" lineend="634" name="getFlags" returns="current" signature="getFlags()"/>
        <scope doc="Sort the entries by values." ilk="function" line="638" lineend="638" name="asort" signature="asort()"/>
        <scope doc="Sort the entries by key." ilk="function" line="642" lineend="642" name="ksort" signature="ksort()"/>
        <scope doc="Sort the entries by values using user defined function." ilk="function" line="646" lineend="646" name="uasort" signature="uasort()"/>
        <scope doc="Sort the entries by key using user defined function." ilk="function" line="650" lineend="650" name="uksort" signature="uksort()"/>
        <scope doc="Sort the entries by values using &quot;natural order&quot; algorithm." ilk="function" line="654" lineend="654" name="natsort" signature="natsort()"/>
        <scope doc="Sort the entries by values using case insensitive &quot;natural order&quot; algorithm." ilk="function" line="658" lineend="658" name="natcasesort" signature="natcasesort()"/>
        <scope doc="@param $array new array or object" ilk="function" line="662" lineend="662" name="exchangeArray" signature="exchangeArray(array)"/>
        <scope doc="@return the iterator which is an ArrayIterator object connected to&#10;this object." ilk="function" line="667" lineend="667" name="getIterator" returns="the" signature="getIterator()"/>
        <scope doc="@param $index offset to inspect&#10;@return whetehr offset $index esists" ilk="function" line="672" lineend="672" name="offsetExists" returns="whetehr" signature="offsetExists(index)"/>
        <scope doc="@param $index offset to return value for&#10;@return value at offset $index" ilk="function" line="677" lineend="677" name="offsetGet" returns="value" signature="offsetGet(index)"/>
        <scope doc="@param $index index to set&#10;@param $newval new value to store at offset $index" ilk="function" line="682" lineend="682" name="offsetSet" signature="offsetSet(index, newval)"/>
        <scope doc="@param $index offset to unset" ilk="function" line="686" lineend="686" name="offsetUnset" signature="offsetUnset(index)"/>
        <scope doc="@param $value is appended as last element&#10;@warning this method cannot be called when the ArrayObject refers to &#10;         an object." ilk="function" line="692" lineend="692" name="append" signature="append(value)"/>
        <scope doc="@return a \b copy of the array&#10;@note when the ArrayObject refers to an object then this method &#10;      returns an array of the public properties." ilk="function" line="698" lineend="698" name="getArrayCopy" returns="a" signature="getArrayCopy()"/>
        <scope doc="@return the number of elements in the array or the number of public&#10;properties in the object." ilk="function" line="703" lineend="703" name="count" returns="the" signature="count()"/>
        <scope doc="@param $iterator_class new class used in getIterator()" ilk="function" line="707" lineend="707" name="setIteratorClass" signature="setIteratorClass(itertor_class)"/>
        <scope doc="@return class used in getIterator()" ilk="function" line="711" lineend="711" name="getIteratorClass" returns="class" signature="getIteratorClass()"/>
        <variable citdl="int" ilk="constant" line="610" name="STD_PROP_LIST"/>
        <variable citdl="int" ilk="constant" line="612" name="ARRAY_AS_PROPS"/>
      </scope>
      <scope doc="@ingroup SPL&#10;@brief An Array iterator&#10;@since PHP 5.0&#10;@version 1.2&#10;&#10;This iterator allows to unset and modify values and keys while iterating&#10;over Arrays and Objects.&#10;&#10;When you want to iterate over the same array multiple times you need to &#10;instanciate ArrayObject and let it create ArrayIterator instances that &#10;refer to it either by using foreach or by calling its getIterator() &#10;method manually." ilk="class" interfacerefs="SeekableIterator ArrayAccess Countable" line="727" lineend="836" name="ArrayIterator">
        <scope attributes="__ctor__" doc="Construct a new array iterator from anything that has a hash table.&#10;That is any Array or Object.&#10;&#10;@param $array the array to use.&#10;@param $flags see setFlags()." ilk="function" line="741" lineend="741" name="__construct" signature="__construct(array, flags=0)"/>
        <scope doc="Set behavior flags.&#10;&#10;@param $flags bitmask as follows:&#10;       0 set: properties of the object have their normal functionality&#10;              when accessed as list (var_dump, foreach, etc.)&#10;       1 set: array indices can be accessed as properties in read/write" ilk="function" line="750" lineend="750" name="setFlags" signature="setFlags(flags)"/>
        <scope doc="@return current flags" ilk="function" line="755" lineend="755" name="getFlags" returns="current" signature="getFlags()"/>
        <scope doc="Sort the entries by values." ilk="function" line="759" lineend="759" name="asort" signature="asort()"/>
        <scope doc="Sort the entries by key." ilk="function" line="763" lineend="763" name="ksort" signature="ksort()"/>
        <scope doc="Sort the entries by values using user defined function." ilk="function" line="767" lineend="767" name="uasort" signature="uasort()"/>
        <scope doc="Sort the entries by key using user defined function." ilk="function" line="771" lineend="771" name="uksort" signature="uksort()"/>
        <scope doc="Sort the entries by values using &quot;natural order&quot; algorithm." ilk="function" line="775" lineend="775" name="natsort" signature="natsort()"/>
        <scope doc="Sort the entries by values using case insensitive &quot;natural order&quot; algorithm." ilk="function" line="779" lineend="779" name="natcasesort" signature="natcasesort()"/>
        <scope doc="@param $index offset to inspect&#10;@return whetehr offset $index esists" ilk="function" line="784" lineend="784" name="offsetExists" returns="whetehr" signature="offsetExists(index)"/>
        <scope doc="@param $index offset to return value for&#10;@return value at offset $index" ilk="function" line="789" lineend="789" name="offsetGet" returns="value" signature="offsetGet(index)"/>
        <scope doc="@param $index index to set&#10;@param $newval new value to store at offset $index" ilk="function" line="794" lineend="794" name="offsetSet" signature="offsetSet(index, newval)"/>
        <scope doc="@param $index offset to unset" ilk="function" line="798" lineend="798" name="offsetUnset" signature="offsetUnset(index)"/>
        <scope doc="@param $value is appended as last element&#10;@warning this method cannot be called when the ArrayIterator refers to &#10;         an object." ilk="function" line="804" lineend="804" name="append" signature="append(value)"/>
        <scope doc="@return a \b copy of the array&#10;@note when the ArrayIterator refers to an object then this method &#10;      returns an array of the public properties." ilk="function" line="810" lineend="810" name="getArrayCopy" returns="a" signature="getArrayCopy()"/>
        <scope doc="@param $position offset to seek to&#10;@throw OutOfBoundsException if $position is invalid" ilk="function" line="815" lineend="815" name="seek" signature="seek(position)"/>
        <scope doc="@return the number of elements in the array or the number of public&#10;properties in the object." ilk="function" line="820" lineend="820" name="count" returns="the" signature="count()"/>
        <scope doc="@copydoc Iterator::rewind" ilk="function" line="823" lineend="823" name="rewind" signature="rewind()"/>
        <scope doc="@copydoc Iterator::valid" ilk="function" line="826" lineend="826" name="valid" signature="valid()"/>
        <scope doc="@copydoc Iterator::current" ilk="function" line="829" lineend="829" name="current" signature="current()"/>
        <scope doc="@copydoc Iterator::key" ilk="function" line="832" lineend="832" name="key" signature="key()"/>
        <scope doc="@copydoc Iterator::next" ilk="function" line="835" lineend="835" name="next" signature="next()"/>
        <variable citdl="int" ilk="constant" line="731" name="STD_PROP_LIST"/>
        <variable citdl="int" ilk="constant" line="733" name="ARRAY_AS_PROPS"/>
      </scope>
      <scope classrefs="ArrayIterator" doc="@file recursivearrayiterator.inc&#13;&#10;@ingroup Examples&#13;&#10;@brief class RecursiveArrayIterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2005&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/** @ingroup SPL&#13;&#10;@brief   A recursive array iterator&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.0&#13;&#10;@since PHP 5.1&#13;&#10;&#13;&#10;Passes the RecursiveIterator interface to the inner Iterator and provides&#13;&#10;the same functionality as FilterIterator. This allows you to skip parents&#13;&#10;and all their childs before loading them all. You need to care about&#13;&#10;function getChildren() because it may not always suit your needs. The &#13;&#10;builtin behavior uses reflection to return a new instance of the exact same&#13;&#10;class it is called from. That is you extend RecursiveFilterIterator and&#13;&#10;getChildren() will create instance of that class. The problem is that doing&#13;&#10;this does not transport any state or control information of your accept()&#13;&#10;implementation to the new instance. To overcome this problem you might &#13;&#10;need to overwrite getChildren(), call this implementation and pass the&#13;&#10;control vaules manually." ilk="class" interfacerefs="RecursiveIterator" line="30" lineend="57" name="RecursiveArrayIterator">
        <scope doc="@return whether the current element has children" ilk="function" line="34" lineend="37" name="hasChildren" returns="whether" signature="hasChildren()"/>
        <scope doc="@return an iterator for the current elements children&#13;&#10;&#13;&#10;@note the returned iterator will be of the same class as $this" ilk="function" line="43" lineend="54" name="getChildren" returns="an" signature="getChildren()"/>
        <variable attributes="private" line="56" name="ref"/>
      </scope>
      <scope doc="@ingroup SPL&#10;@brief File info class&#10;@since PHP 5.1.3" ilk="class" line="842" lineend="970" name="SplFileInfo">
        <scope attributes="__ctor__" doc="Construct a file info object&#10;&#10;@param $file_name path or file name" ilk="function" line="848" lineend="848" name="__construct" signature="__construct(file_name)"/>
        <scope doc="@return the path part only." ilk="function" line="852" lineend="852" name="getPath" returns="the" signature="getPath()"/>
        <scope doc="@return the filename only." ilk="function" line="856" lineend="856" name="getFilename" returns="the" signature="getFilename()"/>
        <scope doc="@return SplFileInfo created for the file&#10;@param class_name name of class to instantiate&#10;@see SplFileInfo::setInfoClass()" ilk="function" line="862" lineend="862" name="getFileInfo" returns="SplFileInfo" signature="getFileInfo(name)"/>
        <scope doc="@return The current entries path and file name." ilk="function" line="866" lineend="866" name="getPathname" returns="The" signature="getPathname()"/>
        <scope doc="@return SplFileInfo created for the path&#10;@param class_name name of class to instantiate&#10;@see SplFileInfo::setInfoClass()" ilk="function" line="872" lineend="872" name="getPathInfo" returns="SplFileInfo" signature="getPathInfo(name)"/>
        <scope doc="@return The current entry's permissions." ilk="function" line="876" lineend="876" name="getPerms" returns="The" signature="getPerms()"/>
        <scope doc="@return The current entry's inode." ilk="function" line="880" lineend="880" name="getInode" returns="The" signature="getInode()"/>
        <scope doc="@return The current entry's size in bytes ." ilk="function" line="884" lineend="884" name="getSize" returns="The" signature="getSize()"/>
        <scope doc="@return The current entry's owner name." ilk="function" line="888" lineend="888" name="getOwner" returns="The" signature="getOwner()"/>
        <scope doc="@return The current entry's group name." ilk="function" line="892" lineend="892" name="getGroup" returns="The" signature="getGroup()"/>
        <scope doc="@return The current entry's last access time." ilk="function" line="896" lineend="896" name="getATime" returns="The" signature="getATime()"/>
        <scope doc="@return The current entry's last modification time." ilk="function" line="900" lineend="900" name="getMTime" returns="The" signature="getMTime()"/>
        <scope doc="@return The current entry's last change time." ilk="function" line="904" lineend="904" name="getCTime" returns="The" signature="getCTime()"/>
        <scope doc="@return The current entry's file type." ilk="function" line="908" lineend="908" name="getType" returns="The" signature="getType()"/>
        <scope doc="@return Whether the current entry is writeable." ilk="function" line="912" lineend="912" name="isWritable" returns="Whether" signature="isWritable()"/>
        <scope doc="@return Whether the current entry is readable." ilk="function" line="916" lineend="916" name="isReadable" returns="Whether" signature="isReadable()"/>
        <scope doc="@return Whether the current entry is executable." ilk="function" line="920" lineend="920" name="isExecutable" returns="Whether" signature="isExecutable()"/>
        <scope doc="@return Whether the current entry is ." ilk="function" line="924" lineend="924" name="isFile" returns="Whether" signature="isFile()"/>
        <scope doc="@return Whether the current entry is a directory." ilk="function" line="928" lineend="928" name="isDir" returns="Whether" signature="isDir()"/>
        <scope doc="@return whether the current entry is a link." ilk="function" line="932" lineend="932" name="isLink" returns="whether" signature="isLink()"/>
        <scope doc="@return target of link." ilk="function" line="936" lineend="936" name="getLinkTarget" returns="target" signature="getLinkTarget()"/>
        <scope doc="@return The resolved path" ilk="function" line="940" lineend="940" name="getRealPath" returns="The" signature="getRealPath()"/>
        <scope doc="@return getPathname()" ilk="function" line="944" lineend="944" name="__toString" returns="getPathname" signature="__toString()"/>
        <scope doc="Open the current file as a SplFileObject instance&#10;&#10;@param mode              open mode&#10;@param use_include_path  whether to search include paths (don't use)&#10;@param context           resource context to pased to open function&#10;@throw RuntimeException  if file cannot be opened (e.g. insufficient &#10;                         access rights).&#10;@return The opened file as a SplFileObject instance&#10;&#10;@see SplFileObject&#10;@see SplFileInfo::setFileClass()&#10;@see file()" ilk="function" line="959" lineend="959" name="openFile" returns="The" signature="openFile(open, whether, resource, mode='r', use_include_path=false, context=NULL)"/>
        <scope doc="@param class_name name of class used with openFile(). Must be derived &#10;from SPLFileObject." ilk="function" line="964" lineend="964" name="setFileClass" signature="setFileClass(name)"/>
        <scope doc="@param class_name name of class used with getFileInfo(), getPathInfo().&#10;                    Must be derived from SplFileInfo." ilk="function" line="969" lineend="969" name="setInfoClass" signature="setInfoClass(name)"/>
      </scope>
      <scope classrefs="SplFileInfo" doc="@ingroup SPL&#10;@brief Directory iterator&#10;@version 1.1&#10;@since PHP 5.0" ilk="class" interfacerefs="Iterator" line="977" lineend="1013" name="DirectoryIterator">
        <scope attributes="__ctor__" doc="Construct a directory iterator from a path-string.&#10;&#10;@param $path directory to iterate." ilk="function" line="983" lineend="983" name="__construct" signature="__construct(path)"/>
        <scope doc="@copydoc Iterator::rewind" ilk="function" line="986" lineend="986" name="rewind" signature="rewind()"/>
        <scope doc="@copydoc Iterator::valid" ilk="function" line="989" lineend="989" name="valid" signature="valid()"/>
        <scope doc="@return index of entry" ilk="function" line="993" lineend="993" name="key" returns="index" signature="key()"/>
        <scope doc="@return $this" ilk="function" line="997" lineend="997" name="current" signature="current()"/>
        <scope doc="@copydoc Iterator::next" ilk="function" line="1000" lineend="1000" name="next" signature="next()"/>
        <scope doc="@return Whether the current entry is either '.' or '..'." ilk="function" line="1004" lineend="1004" name="isDot" returns="Whether" signature="isDot()"/>
        <scope doc="@return whether the current entry is a link." ilk="function" line="1008" lineend="1008" name="isLink" returns="whether" signature="isLink()"/>
        <scope doc="@return getFilename()" ilk="function" line="1012" lineend="1012" name="__toString" returns="getFilename" signature="__toString()"/>
      </scope>
      <scope name="FilesystemIterator" ilk="class" classrefs="DirectoryIterator">
        <scope name="__construct" signature="__construct(string path [, int flags])" doc="Cronstructs a new dir iterator from a path" ilk="function" src="spl_directory.c" returns="void"/>
        <scope name="rewind" signature="rewind()" doc="Rewind dir back to the start" ilk="function" src="spl_directory.c" returns="void"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope name="key" signature="key()" doc="Return getPathname or getFilename depending on flags" ilk="function" src="spl_directory.c" returns="string"/>
        <scope name="current" signature="current()" doc="Return getFilename getFileInfo or this depending on&#10;flags" ilk="function" src="spl_directory.c" returns="string"/>
        <scope name="getFlags" signature="getFlags()" doc="Get handling flags" ilk="function" src="spl_directory.c" returns="int"/>
        <scope name="setFlags" signature="setFlags(long $flags)" doc="Set handling flags" ilk="function" src="spl_directory.c" returns="void"/>
        <scope ilk="function" name="getFilename" signature="getFilename()"/>
        <scope ilk="function" name="getBasename" signature="getBasename()"/>
        <scope ilk="function" name="isDot" signature="isDot()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="seek" signature="seek()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <scope ilk="function" name="getPath" signature="getPath()"/>
        <scope ilk="function" name="getPathname" signature="getPathname()"/>
        <scope ilk="function" name="getPerms" signature="getPerms()"/>
        <scope ilk="function" name="getInode" signature="getInode()"/>
        <scope ilk="function" name="getSize" signature="getSize()"/>
        <scope ilk="function" name="getOwner" signature="getOwner()"/>
        <scope ilk="function" name="getGroup" signature="getGroup()"/>
        <scope ilk="function" name="getATime" signature="getATime()"/>
        <scope ilk="function" name="getMTime" signature="getMTime()"/>
        <scope ilk="function" name="getCTime" signature="getCTime()"/>
        <scope ilk="function" name="getType" signature="getType()"/>
        <scope ilk="function" name="isWritable" signature="isWritable()"/>
        <scope ilk="function" name="isReadable" signature="isReadable()"/>
        <scope ilk="function" name="isExecutable" signature="isExecutable()"/>
        <scope ilk="function" name="isFile" signature="isFile()"/>
        <scope ilk="function" name="isDir" signature="isDir()"/>
        <scope ilk="function" name="isLink" signature="isLink()"/>
        <scope ilk="function" name="getLinkTarget" signature="getLinkTarget()"/>
        <scope ilk="function" name="getRealPath" signature="getRealPath()"/>
        <scope ilk="function" name="getFileInfo" signature="getFileInfo()"/>
        <scope ilk="function" name="getPathInfo" signature="getPathInfo()"/>
        <scope ilk="function" name="openFile" signature="openFile()"/>
        <scope ilk="function" name="setFileClass" signature="setFileClass()"/>
        <scope ilk="function" name="setInfoClass" signature="setInfoClass()"/>
        <variable name="CURRENT_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_FILEINFO" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_SELF" citdl="integer" ilk="constant"/>
        <variable name="KEY_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_FILENAME" citdl="integer" ilk="constant"/>
        <variable name="NEW_CURRENT_AND_KEY" citdl="integer" ilk="constant"/>
        <variable name="SKIP_DOTS" citdl="integer" ilk="constant"/>
        <variable name="UNIX_PATHS" citdl="integer" ilk="constant"/>
      </scope>
      <scope classrefs="DirectoryIterator" doc="@ingroup SPL&#10;@brief recursive directory iterator&#10;@version 1.1&#10;@since PHP 5.0" ilk="class" interfacerefs="RecursiveIterator" line="1020" lineend="1059" name="RecursiveDirectoryIterator">
        <scope attributes="__ctor__" doc="CURRENT_AS_FILEINFO + KEY_AS_FILENAME &#10;/** Construct a directory iterator from a path-string.&#10;&#10;@param $path   directory to iterate.&#10;@param $flags  open flags&#10;- CURRENT_AS_FILEINFO&#10;- KEY_AS_FILENAME&#10;- NEW_CURRENT_AND_KEY" ilk="function" line="1034" lineend="1034" name="__construct" signature="__construct(path, flags=0)"/>
        <scope doc="@return getPathname() or getFilename() depending on flags" ilk="function" line="1038" lineend="1038" name="key" returns="getPathname" signature="key()"/>
        <scope doc="@return getFilename() or getFileInfo() depending on flags" ilk="function" line="1042" lineend="1042" name="current" returns="getFilename" signature="current()"/>
        <scope doc="@return whether the current is a directory (not '.' or '..')." ilk="function" line="1046" lineend="1046" name="hasChildren" returns="whether" signature="hasChildren()"/>
        <scope doc="@return a RecursiveDirectoryIterator for the current entry." ilk="function" line="1050" lineend="1050" name="getChildren" returns="a" signature="getChildren()"/>
        <scope doc="@return sub path only (without main path)" ilk="function" line="1054" lineend="1054" name="getSubPath" returns="sub" signature="getSubPath()"/>
        <scope doc="@return the current sub path" ilk="function" line="1058" lineend="1058" name="getSubPathname" returns="the" signature="getSubPathname()"/>
      </scope>
      <scope name="GlobIterator" ilk="class" classrefs="FilesystemIterator">
        <scope name="__construct" signature="__construct(string path [, int flags])" doc="Cronstructs a new dir iterator from a glob expression&#10;no glob needed" ilk="function" src="spl_directory.c" returns="int"/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="getFlags" signature="getFlags()"/>
        <scope ilk="function" name="setFlags" signature="setFlags()"/>
        <scope ilk="function" name="getFilename" signature="getFilename()"/>
        <scope ilk="function" name="getBasename" signature="getBasename()"/>
        <scope ilk="function" name="isDot" signature="isDot()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="seek" signature="seek()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <scope ilk="function" name="getPath" signature="getPath()"/>
        <scope ilk="function" name="getPathname" signature="getPathname()"/>
        <scope ilk="function" name="getPerms" signature="getPerms()"/>
        <scope ilk="function" name="getInode" signature="getInode()"/>
        <scope ilk="function" name="getSize" signature="getSize()"/>
        <scope ilk="function" name="getOwner" signature="getOwner()"/>
        <scope ilk="function" name="getGroup" signature="getGroup()"/>
        <scope ilk="function" name="getATime" signature="getATime()"/>
        <scope ilk="function" name="getMTime" signature="getMTime()"/>
        <scope ilk="function" name="getCTime" signature="getCTime()"/>
        <scope ilk="function" name="getType" signature="getType()"/>
        <scope ilk="function" name="isWritable" signature="isWritable()"/>
        <scope ilk="function" name="isReadable" signature="isReadable()"/>
        <scope ilk="function" name="isExecutable" signature="isExecutable()"/>
        <scope ilk="function" name="isFile" signature="isFile()"/>
        <scope ilk="function" name="isDir" signature="isDir()"/>
        <scope ilk="function" name="isLink" signature="isLink()"/>
        <scope ilk="function" name="getLinkTarget" signature="getLinkTarget()"/>
        <scope ilk="function" name="getRealPath" signature="getRealPath()"/>
        <scope ilk="function" name="getFileInfo" signature="getFileInfo()"/>
        <scope ilk="function" name="getPathInfo" signature="getPathInfo()"/>
        <scope ilk="function" name="openFile" signature="openFile()"/>
        <scope ilk="function" name="setFileClass" signature="setFileClass()"/>
        <scope ilk="function" name="setInfoClass" signature="setInfoClass()"/>
        <variable name="CURRENT_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_FILEINFO" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_SELF" citdl="integer" ilk="constant"/>
        <variable name="KEY_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_FILENAME" citdl="integer" ilk="constant"/>
        <variable name="NEW_CURRENT_AND_KEY" citdl="integer" ilk="constant"/>
        <variable name="SKIP_DOTS" citdl="integer" ilk="constant"/>
        <variable name="UNIX_PATHS" citdl="integer" ilk="constant"/>
      </scope>
      <scope classrefs="SplFileInfo" doc="@file splfileobject.inc&#13;&#10;@ingroup SPL&#13;&#10;@brief class FileObject&#13;&#10;@author  Marcus Boerger&#13;&#10;@date    2003 - 2006&#13;&#10;&#13;&#10;SPL - Standard PHP Library&#13;&#10;/&#10;/** @ingroup SPL&#13;&#10;@brief   Object representation for any stream&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.1&#13;&#10;@since PHP 5.1" ilk="class" interfacerefs="RecursiveIterator SeekableIterator" line="18" lineend="375" name="SplFileObject">
        <scope attributes="__ctor__" doc="Constructs a new file object&#13;&#10;&#13;&#10;@param $file_name         The name of the stream to open&#13;&#10;@param $open_mode         The file open mode&#13;&#10;@param $use_include_path  Whether to search in include paths&#13;&#10;@param $context           A stream context&#13;&#10;@throw RuntimeException   If file cannot be opened (e.g. insufficient &#13;&#10;                          access rights)." ilk="function" line="42" lineend="50" name="__construct" signature="__construct(file_name, open_mode='r', use_include_path=false, context=NULL)"/>
        <scope doc="@return whether the end of the stream is reached" ilk="function" line="55" lineend="58" name="eof" returns="whether" signature="eof()"/>
        <scope doc="increase current line number&#13;&#10;@return next line from stream" ilk="function" line="63" lineend="70" name="fgets" returns="next" signature="fgets()"/>
        <scope doc="@param delimiter  character used as field separator&#13;&#10;@param enclosure  end of &#13;&#10;@return array containing read data" ilk="function" line="77" lineend="92" name="fgetcsv" returns="array" signature="fgetcsv(character, end, delimiter=NULL, enclosure=NULL)"/>
        <scope doc="Set the delimiter and enclosure character used in fgetcsv&#13;&#10;&#13;&#10;@param delimiter new delimiter, defaults to ','&#13;&#10;@param enclosure new enclosure, defaults to '&quot;'" ilk="function" line="100" lineend="104" name="setCsvControl" signature="setCsvControl(new, delimiter=';', enclosure='&quot;')"/>
        <scope doc="@return array(delimiter, enclosure) as used in fgetcsv" ilk="function" line="109" lineend="112" name="getCsvControl" returns="array" signature="getCsvControl(delimiter=',', enclosure='&quot;')"/>
        <scope doc="@param operation lock operation (LOCK_SH, LOCK_EX, LOCK_UN, LOCK_NB)&#13;&#10;@retval $wouldblock  whether the operation would block" ilk="function" line="118" lineend="121" name="flock" returns="flock()" signature="flock(operation, wouldblock, lock)"/>
        <scope doc="Flush current data&#13;&#10;@return success or failure" ilk="function" line="127" lineend="130" name="fflush" returns="success" signature="fflush()"/>
        <scope doc="@return current file position" ilk="function" line="135" lineend="138" name="ftell" returns="current" signature="ftell()"/>
        <scope doc="@param pos new file position&#13;&#10;@param whence seek method (SEEK_SET, SEEK_CUR, SEEK_END)&#13;&#10;@return Upon success, returns 0; otherwise, returns -1. Note that &#13;&#10;        seeking past EOF is not considered an error." ilk="function" line="146" lineend="149" name="fseek" returns="Upon" signature="fseek(pos, new, seek, whence=SEEK_SET)"/>
        <scope doc="@return next char from file&#13;&#10;@note a new line character does not increase $this-&gt;lnum" ilk="function" line="155" lineend="162" name="fgetc" returns="next" signature="fgetc()"/>
        <scope doc="Read and return remaining part of stream&#13;&#10;@return size of remaining part passed through" ilk="function" line="167" lineend="170" name="fpassthru" returns="size" signature="fpassthru()"/>
        <scope doc="Get a line from the file and strip HTML tags&#13;&#10;@param $allowable_tags tags to keep in the string" ilk="function" line="175" lineend="178" name="fgetss" returns="fgetss()" signature="fgetss(allowable_tags=NULL)"/>
        <scope doc="Scan the next line&#13;&#10;@param $format string specifying format to parse&#13;&#10;//* , ..." ilk="function" line="183" lineend="188" name="fscanf" returns="fscanf()" signature="fscanf(format)"/>
        <scope doc="@param $str to write&#13;&#10;@param $length maximum line length to write" ilk="function" line="194" lineend="197" name="fwrite" returns="fwrite()" signature="fwrite(str, length=NULL)"/>
        <scope doc="@return array of file stat information" ilk="function" line="202" lineend="205" name="fstat" returns="array" signature="fstat()"/>
        <scope doc="@param $size new size to truncate file to" ilk="function" line="210" lineend="213" name="ftruncate" returns="ftruncate()" signature="ftruncate(size)"/>
        <scope doc="@param $flags new flag set" ilk="function" line="218" lineend="221" name="setFlags" signature="setFlags(flags)"/>
        <scope doc="@return current set of flags" ilk="function" line="226" lineend="229" name="getFlags" returns="current" signature="getFlags()"/>
        <scope doc="@param $max_len set the maximum line length read" ilk="function" line="234" lineend="237" name="setMaxLineLen" signature="setMaxLineLen(max_len)"/>
        <scope doc="@return current setting for max line" ilk="function" line="242" lineend="245" name="getMaxLineLen" returns="current" signature="getMaxLineLen()"/>
        <scope doc="@return false" ilk="function" line="250" lineend="253" name="hasChildren" returns="false" signature="hasChildren()"/>
        <scope doc="@return false" ilk="function" line="258" lineend="261" name="getChildren" returns="false" signature="getChildren()"/>
        <scope doc="Invalidate current line buffer and set line number to 0." ilk="function" line="266" lineend="270" name="rewind" signature="rewind()"/>
        <scope doc="@return whether more data can be read" ilk="function" line="275" lineend="278" name="valid" returns="whether" signature="valid()"/>
        <scope doc="@note Fill current line buffer if not done yet.&#13;&#10;@return line buffer" ilk="function" line="284" lineend="291" name="current" returns="line" signature="current()"/>
        <scope doc="@return line number &#13;&#10;@note fgetc() will increase the line number when reaing a new line char.&#13;&#10;      This has the effect key() called on a read a new line will already&#13;&#10;      return the increased line number.&#13;&#10;@note Line counting works as long as you only read the file and do not&#13;&#10;      use fseek()." ilk="function" line="301" lineend="304" name="key" returns="line" signature="key()"/>
        <scope doc="Invalidate current line buffer." ilk="function" line="308" lineend="311" name="next" signature="next()"/>
        <scope attributes="private" doc="@return next line read from file and increase the line counter" ilk="function" line="316" lineend="329" name="readLine" returns="next" signature="readLine()"/>
        <scope attributes="private" doc="Free the current line buffer and increment the line counter" ilk="function" line="334" lineend="339" name="freeLine" signature="freeLine()"/>
        <scope doc="@note If you DO overload this function key() and current() will increment&#13;&#10;      $this-&gt;lnum automatically. If not then function reaLine() will do&#13;&#10;      that for you." ilk="function" line="346" lineend="354" name="getCurrentLine" signature="getCurrentLine()"/>
        <scope doc="@return current line" ilk="function" line="359" lineend="362" name="__toString" returns="current" signature="__toString()"/>
        <scope doc="@param $line_pos Seek to this line" ilk="function" line="367" lineend="374" name="seek" signature="seek(line_pos)"/>
        <variable citdl="int" ilk="constant" line="21" name="DROP_NEW_LINE"/>
        <variable attributes="private" citdl="fopen()" line="23" name="fp"/>
        <variable attributes="private" citdl="file_name" line="24" name="fname"/>
        <variable attributes="private" citdl="getCurrentLine()" line="25" name="line"/>
        <variable attributes="private" citdl="int" line="26" name="lnum"/>
        <variable attributes="private" citdl="int" line="27" name="max_len"/>
        <variable attributes="private" citdl="int" line="28" name="flags"/>
        <variable attributes="private" citdl="string" line="29" name="delimiter"/>
        <variable attributes="private" citdl="string" line="30" name="enclosure"/>
      </scope>
      <scope name="SplTempFileObject" ilk="class" classrefs="SplFileObject">
        <scope name="__construct" signature="__construct([int max_memory])" doc="Construct a new temp file object" ilk="function" src="spl_directory.c" returns="void"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="eof" signature="eof()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="fgets" signature="fgets()"/>
        <scope ilk="function" name="fgetcsv" signature="fgetcsv()"/>
        <scope ilk="function" name="setCsvControl" signature="setCsvControl()"/>
        <scope ilk="function" name="getCsvControl" signature="getCsvControl()"/>
        <scope ilk="function" name="flock" signature="flock()"/>
        <scope ilk="function" name="fflush" signature="fflush()"/>
        <scope ilk="function" name="ftell" signature="ftell()"/>
        <scope ilk="function" name="fseek" signature="fseek()"/>
        <scope ilk="function" name="fgetc" signature="fgetc()"/>
        <scope ilk="function" name="fpassthru" signature="fpassthru()"/>
        <scope ilk="function" name="fgetss" signature="fgetss()"/>
        <scope ilk="function" name="fscanf" signature="fscanf()"/>
        <scope ilk="function" name="fwrite" signature="fwrite()"/>
        <scope ilk="function" name="fstat" signature="fstat()"/>
        <scope ilk="function" name="ftruncate" signature="ftruncate()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="setFlags" signature="setFlags()"/>
        <scope ilk="function" name="getFlags" signature="getFlags()"/>
        <scope ilk="function" name="setMaxLineLen" signature="setMaxLineLen()"/>
        <scope ilk="function" name="getMaxLineLen" signature="getMaxLineLen()"/>
        <scope ilk="function" name="hasChildren" signature="hasChildren()"/>
        <scope ilk="function" name="getChildren" signature="getChildren()"/>
        <scope ilk="function" name="seek" signature="seek()"/>
        <scope ilk="function" name="getCurrentLine" signature="getCurrentLine()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <scope ilk="function" name="getPath" signature="getPath()"/>
        <scope ilk="function" name="getFilename" signature="getFilename()"/>
        <scope ilk="function" name="getBasename" signature="getBasename()"/>
        <scope ilk="function" name="getPathname" signature="getPathname()"/>
        <scope ilk="function" name="getPerms" signature="getPerms()"/>
        <scope ilk="function" name="getInode" signature="getInode()"/>
        <scope ilk="function" name="getSize" signature="getSize()"/>
        <scope ilk="function" name="getOwner" signature="getOwner()"/>
        <scope ilk="function" name="getGroup" signature="getGroup()"/>
        <scope ilk="function" name="getATime" signature="getATime()"/>
        <scope ilk="function" name="getMTime" signature="getMTime()"/>
        <scope ilk="function" name="getCTime" signature="getCTime()"/>
        <scope ilk="function" name="getType" signature="getType()"/>
        <scope ilk="function" name="isWritable" signature="isWritable()"/>
        <scope ilk="function" name="isReadable" signature="isReadable()"/>
        <scope ilk="function" name="isExecutable" signature="isExecutable()"/>
        <scope ilk="function" name="isFile" signature="isFile()"/>
        <scope ilk="function" name="isDir" signature="isDir()"/>
        <scope ilk="function" name="isLink" signature="isLink()"/>
        <scope ilk="function" name="getLinkTarget" signature="getLinkTarget()"/>
        <scope ilk="function" name="getRealPath" signature="getRealPath()"/>
        <scope ilk="function" name="getFileInfo" signature="getFileInfo()"/>
        <scope ilk="function" name="getPathInfo" signature="getPathInfo()"/>
        <scope ilk="function" name="openFile" signature="openFile()"/>
        <scope ilk="function" name="setFileClass" signature="setFileClass()"/>
        <scope ilk="function" name="setInfoClass" signature="setInfoClass()"/>
        <variable name="DROP_NEW_LINE" citdl="integer" ilk="constant"/>
        <variable name="READ_AHEAD" citdl="integer" ilk="constant"/>
        <variable name="SKIP_EMPTY" citdl="integer" ilk="constant"/>
        <variable name="READ_CSV" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="SplDoublyLinkedList" ilk="class">
        <scope name="pop" signature="pop()" doc="U Pop an element out of the SplDoublyLinkedList" ilk="function" src="spl_dllist.c" returns="mixed"/>
        <scope name="shift" signature="shift()" doc="U Shift an element out of the SplDoublyLinkedList" ilk="function" src="spl_dllist.c" returns="mixed"/>
        <scope name="push" signature="push(mixed $value)" doc="U Push value on the SplDoublyLinkedList" ilk="function" src="spl_dllist.c" returns="bool"/>
        <scope name="unshift" signature="unshift(mixed $value)" doc="U Unshift value on the SplDoublyLinkedList" ilk="function" src="spl_dllist.c" returns="bool"/>
        <scope name="top" signature="top()" doc="U Peek at the top element of the SplDoublyLinkedList" ilk="function" src="spl_dllist.c" returns="mixed"/>
        <scope name="bottom" signature="bottom()" doc="U Peek at the bottom element of the SplDoublyLinkedList" ilk="function" src="spl_dllist.c" returns="mixed"/>
        <scope name="count" signature="count()" doc="U Return the number of elements in the datastructure" ilk="function" src="spl_dllist.c" returns="int"/>
        <scope name="isEmpty" signature="isEmpty()" doc="U Return true if the SplDoublyLinkedList is empty" ilk="function" src="spl_dllist.c" returns="int"/>
        <scope name="setIteratorMode" signature="setIteratorMode($flags)" doc="U Set the mode of iteration" ilk="function" src="spl_dllist.c" returns="int"/>
        <scope name="getIteratorMode" signature="getIteratorMode()" doc="U Return the mode of iteration" ilk="function" src="spl_dllist.c" returns="int"/>
        <scope name="offsetExists" signature="offsetExists(mixed $index)" doc="U Returns whether the requested index exists" ilk="function" src="spl_dllist.c" returns="bool"/>
        <scope name="offsetGet" signature="offsetGet(mixed $index)" doc="U Returns the value at the specified index" ilk="function" src="spl_dllist.c" returns="mixed"/>
        <scope name="offsetSet" signature="offsetSet(mixed $index, mixed $newval)" doc="U Sets the value at the specified index to newval" ilk="function" src="spl_dllist.c" returns="void"/>
        <scope name="offsetUnset" signature="offsetUnset(mixed $index)" doc="U Unsets the value at the specified index" ilk="function" src="spl_dllist.c" returns="void"/>
        <scope name="rewind" signature="rewind()" doc="U Rewind the datastructure back to the start" ilk="function" src="spl_dllist.c" returns="void"/>
        <scope name="current" signature="current()" doc="U Return current datastructure entry" ilk="function" src="spl_dllist.c" returns="mixed"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope name="next" signature="next()" doc="U Move to next entry" ilk="function" src="spl_dllist.c" returns="void"/>
        <scope name="prev" signature="prev()" doc="U Move to next entry" ilk="function" src="spl_dllist.c" returns="void"/>
        <scope name="valid" signature="valid()" doc="U Check whether the datastructure contains more entries" ilk="function" src="spl_dllist.c" returns="bool"/>
        <variable name="IT_MODE_LIFO" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_FIFO" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_DELETE" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_KEEP" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="SplQueue" ilk="class" classrefs="SplDoublyLinkedList">
        <scope ilk="function" name="enqueue" signature="enqueue()"/>
        <scope ilk="function" name="dequeue" signature="dequeue()"/>
        <scope ilk="function" name="pop" signature="pop()"/>
        <scope ilk="function" name="shift" signature="shift()"/>
        <scope ilk="function" name="push" signature="push()"/>
        <scope ilk="function" name="unshift" signature="unshift()"/>
        <scope ilk="function" name="top" signature="top()"/>
        <scope ilk="function" name="bottom" signature="bottom()"/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope ilk="function" name="isEmpty" signature="isEmpty()"/>
        <scope ilk="function" name="setIteratorMode" signature="setIteratorMode()"/>
        <scope ilk="function" name="getIteratorMode" signature="getIteratorMode()"/>
        <scope ilk="function" name="offsetExists" signature="offsetExists()"/>
        <scope ilk="function" name="offsetGet" signature="offsetGet()"/>
        <scope ilk="function" name="offsetSet" signature="offsetSet()"/>
        <scope ilk="function" name="offsetUnset" signature="offsetUnset()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="prev" signature="prev()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <variable name="IT_MODE_LIFO" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_FIFO" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_DELETE" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_KEEP" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="SplStack" ilk="class" classrefs="SplDoublyLinkedList">
        <scope ilk="function" name="pop" signature="pop()"/>
        <scope ilk="function" name="shift" signature="shift()"/>
        <scope ilk="function" name="push" signature="push()"/>
        <scope ilk="function" name="unshift" signature="unshift()"/>
        <scope ilk="function" name="top" signature="top()"/>
        <scope ilk="function" name="bottom" signature="bottom()"/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope ilk="function" name="isEmpty" signature="isEmpty()"/>
        <scope ilk="function" name="setIteratorMode" signature="setIteratorMode()"/>
        <scope ilk="function" name="getIteratorMode" signature="getIteratorMode()"/>
        <scope ilk="function" name="offsetExists" signature="offsetExists()"/>
        <scope ilk="function" name="offsetGet" signature="offsetGet()"/>
        <scope ilk="function" name="offsetSet" signature="offsetSet()"/>
        <scope ilk="function" name="offsetUnset" signature="offsetUnset()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="prev" signature="prev()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <variable name="IT_MODE_LIFO" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_FIFO" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_DELETE" citdl="integer" ilk="constant"/>
        <variable name="IT_MODE_KEEP" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="SplHeap" ilk="class">
        <scope name="extract" signature="extract()" doc="U extract the element out of the top of the heap" ilk="function" src="spl_heap.c" returns="mixed"/>
        <scope name="insert" signature="insert(mixed $value)" doc="U Push value on the heap" ilk="function" src="spl_heap.c" returns="bool"/>
        <scope name="top" signature="top()" doc="U Peek at the top element of the heap" ilk="function" src="spl_heap.c" returns="mixed"/>
        <scope name="count" signature="count()" doc="U Return the number of elements in the heap" ilk="function" src="spl_heap.c" returns="int"/>
        <scope name="isEmpty" signature="isEmpty()" doc="U Return true if the heap is empty" ilk="function" src="spl_heap.c" returns="int"/>
        <scope name="rewind" signature="rewind()" doc="U Rewind the datastructure back to the start" ilk="function" src="spl_heap.c" returns="void"/>
        <scope name="current" signature="current()" doc="U Return current datastructure entry" ilk="function" src="spl_heap.c" returns="mixed"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope name="next" signature="next()" doc="U Move to next entry" ilk="function" src="spl_heap.c" returns="void"/>
        <scope name="valid" signature="valid()" doc="U Check whether the datastructure contains more entries" ilk="function" src="spl_heap.c" returns="bool"/>
        <scope name="recoverFromCorruption" signature="recoverFromCorruption()" doc="U Recover from a corrupted state" ilk="function" src="spl_heap.c" returns="int"/>
        <scope ilk="function" name="compare" signature="compare()"/>
      </scope>
      <scope name="SplMinHeap" ilk="class" classrefs="SplHeap">
        <scope name="compare" signature="compare(mixed $a, mixed $b)" doc="U compare the values" ilk="function" src="spl_heap.c" returns="bool"/>
        <scope ilk="function" name="extract" signature="extract()"/>
        <scope ilk="function" name="insert" signature="insert()"/>
        <scope ilk="function" name="top" signature="top()"/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope ilk="function" name="isEmpty" signature="isEmpty()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="recoverFromCorruption" signature="recoverFromCorruption()"/>
      </scope>
      <scope name="SplMaxHeap" ilk="class" classrefs="SplHeap">
        <scope name="compare" signature="compare(mixed $a, mixed $b)" doc="U compare the values" ilk="function" src="spl_heap.c" returns="bool"/>
        <scope ilk="function" name="extract" signature="extract()"/>
        <scope ilk="function" name="insert" signature="insert()"/>
        <scope ilk="function" name="top" signature="top()"/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope ilk="function" name="isEmpty" signature="isEmpty()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="recoverFromCorruption" signature="recoverFromCorruption()"/>
      </scope>
      <scope name="SplPriorityQueue" ilk="class">
        <scope name="compare" signature="compare(mixed $a, mixed $b)" doc="U compare the priorities" ilk="function" src="spl_heap.c" returns="bool"/>
        <scope name="insert" signature="insert(mixed $value, mixed $priority)" doc="U Push value with the priority priodiry on the&#10;priorityqueue" ilk="function" src="spl_heap.c" returns="bool"/>
        <scope ilk="function" name="setExtractFlags" signature="setExtractFlags()"/>
        <scope name="top" signature="top()" doc="U Peek at the top element of the priority queue" ilk="function" src="spl_heap.c" returns="mixed"/>
        <scope name="extract" signature="extract()" doc="U extract the element out of the top of the priority&#10;queue" ilk="function" src="spl_heap.c" returns="mixed"/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope ilk="function" name="isEmpty" signature="isEmpty()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope name="current" signature="current()" doc="U Return current datastructure entry" ilk="function" src="spl_heap.c" returns="mixed"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="recoverFromCorruption" signature="recoverFromCorruption()"/>
        <variable name="EXTR_BOTH" citdl="integer" ilk="constant"/>
        <variable name="EXTR_PRIORITY" citdl="integer" ilk="constant"/>
        <variable name="EXTR_DATA" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="SplFixedArray" ilk="class">
        <scope name="__construct" signature="__construct([int size])" doc="" ilk="function" src="spl_fixedarray.c" returns="void"/>
        <scope name="count" signature="count(void)" doc="" ilk="function" src="spl_fixedarray.c" returns="int"/>
        <scope name="toArray" signature="toArray()" doc="" ilk="function" src="spl_fixedarray.c" returns="object"/>
        <scope name="fromArray" signature="fromArray(array data[, bool save_indexes])" doc="" ilk="function" src="spl_fixedarray.c" returns="object"/>
        <scope name="getSize" signature="getSize(void)" doc="" ilk="function" src="spl_fixedarray.c" returns="int"/>
        <scope name="setSize" signature="setSize(int size)" doc="" ilk="function" src="spl_fixedarray.c" returns="bool"/>
        <scope name="offsetExists" signature="offsetExists(mixed $index)" doc="U Returns whether the requested index exists" ilk="function" src="spl_fixedarray.c" returns="bool"/>
        <scope name="offsetGet" signature="offsetGet(mixed $index)" doc="U Returns the value at the specified index" ilk="function" src="spl_fixedarray.c" returns="mixed"/>
        <scope name="offsetSet" signature="offsetSet(mixed $index, mixed $newval)" doc="U Sets the value at the specified index to newval" ilk="function" src="spl_fixedarray.c" returns="void"/>
        <scope name="offsetUnset" signature="offsetUnset(mixed $index)" doc="U Unsets the value at the specified index" ilk="function" src="spl_fixedarray.c" returns="void"/>
        <scope name="rewind" signature="rewind()" doc="U Rewind the datastructure back to the start" ilk="function" src="spl_fixedarray.c" returns="void"/>
        <scope name="current" signature="current()" doc="U Return current datastructure entry" ilk="function" src="spl_fixedarray.c" returns="mixed"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope name="next" signature="next()" doc="U Move to next entry" ilk="function" src="spl_fixedarray.c" returns="void"/>
        <scope name="valid" signature="valid()" doc="U Check whether the datastructure contains more entries" ilk="function" src="spl_fixedarray.c" returns="bool"/>
      </scope>
      <scope doc="@file splobjectstorage.inc&#10;@ingroup SPL&#10;@brief class SplObjectStorage&#10;@author  Marcus Boerger&#10;@date    2003 - 2005&#10;&#10;SPL - Standard PHP Library&#10;/&#10;/**&#13;&#10;@brief   Object storage&#13;&#10;@author  Marcus Boerger&#13;&#10;@version 1.0&#13;&#10;@since PHP 6.0&#13;&#10;&#13;&#10;This container allows to store objects uniquly without the need to compare&#13;&#10;them one by one. This is only possible internally. The code represenation&#13;&#10;here therefore has a complexity of O(n) while the actual implementation has&#13;&#10;complexity O(1)." ilk="class" interfacerefs="Iterator Countable" line="23" lineend="116" name="SplObjectStorage">
        <scope doc="Rewind to top iterator as set in constructor" ilk="function" line="30" lineend="33" name="rewind" signature="rewind()"/>
        <scope doc="@return whether iterator is valid" ilk="function" line="37" lineend="40" name="valid" returns="whether" signature="valid()"/>
        <scope doc="@return current key" ilk="function" line="44" lineend="47" name="key" returns="current" signature="key()"/>
        <scope doc="@return current object" ilk="function" line="51" lineend="54" name="current" returns="current" signature="current()"/>
        <scope doc="Forward to next element" ilk="function" line="58" lineend="62" name="next" signature="next()"/>
        <scope doc="@return number of objects in storage" ilk="function" line="66" lineend="69" name="count" returns="number" signature="count()"/>
        <scope doc="@param obj object to look for&#13;&#10;@return whether $obj is contained in storage" ilk="function" line="74" lineend="87" name="contains" returns="whether" signature="contains(obj, object)"/>
        <scope doc="@param $obj new object to attach to storage if not yet contained" ilk="function" line="91" lineend="97" name="attach" signature="attach(obj)"/>
        <scope doc="@param $obj object to remove from storage" ilk="function" line="101" lineend="115" name="detach" signature="detach(obj)"/>
        <variable attributes="private" citdl="array()" line="25" name="storage"/>
        <variable attributes="private" citdl="int" line="26" name="index"/>
      </scope>
      <scope name="MultipleIterator" ilk="class">
        <scope name="__construct" signature="__construct([int flags = MIT_NEED_ALL" doc="Iterator that iterates over several iterators one after&#10;the other" ilk="function" src="spl_observer.c" returns="void"/>
        <scope name="getFlags" signature="getFlags()" doc="Return current flags" ilk="function" src="spl_observer.c" returns="int"/>
        <scope name="setFlags" signature="setFlags(int flags)" doc="Set flags" ilk="function" src="spl_observer.c" returns="int"/>
        <scope ilk="function" name="attachIterator" signature="attachIterator()"/>
        <scope ilk="function" name="detachIterator" signature="detachIterator()"/>
        <scope ilk="function" name="containsIterator" signature="containsIterator()"/>
        <scope ilk="function" name="countIterators" signature="countIterators()"/>
        <scope name="rewind" signature="rewind()" doc="Rewind all attached iterator instances" ilk="function" src="spl_observer.c" returns="void"/>
        <scope name="valid" signature="valid()" doc="Return whether all or one sub iterator is valid&#10;depending on flags" ilk="function" src="spl_observer.c" returns="bool"/>
        <scope name="key" signature="key()" doc="Return an array of all registered Iterator instances&#10;key result" ilk="function" src="spl_observer.c" returns="array"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope name="next" signature="next()" doc="Move all attached iterator instances forward" ilk="function" src="spl_observer.c" returns="void"/>
        <variable name="MIT_NEED_ANY" citdl="integer" ilk="constant"/>
        <variable name="MIT_NEED_ALL" citdl="integer" ilk="constant"/>
        <variable name="MIT_KEYS_NUMERIC" citdl="integer" ilk="constant"/>
        <variable name="MIT_KEYS_ASSOC" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="PDOException" ilk="class" classrefs="RuntimeException">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="getMessage" signature="getMessage()"/>
        <scope ilk="function" name="getCode" signature="getCode()"/>
        <scope ilk="function" name="getFile" signature="getFile()"/>
        <scope ilk="function" name="getLine" signature="getLine()"/>
        <scope ilk="function" name="getTrace" signature="getTrace()"/>
        <scope ilk="function" name="getPrevious" signature="getPrevious()"/>
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <variable name="message"/>
        <variable name="code"/>
        <variable name="file"/>
        <variable name="line"/>
        <variable name="errorInfo"/>
      </scope>
      <scope name="PDO" ilk="class">
        <scope name="__construct" signature="__construct(string dsn, string username, string passwd [, array options])" doc="" ilk="function" src="pdo_dbh.c" returns="void"/>
        <scope name="prepare" signature="prepare(string statment [, array options])" doc="Prepares a statement for execution and returns a&#10;statement object" ilk="function" src="pdo_dbh.c" returns="object"/>
        <scope name="beginTransaction" signature="beginTransaction()" doc="Initiates a transaction" ilk="function" src="pdo_dbh.c" returns="bool"/>
        <scope name="commit" signature="commit()" doc="Commit a transaction" ilk="function" src="pdo_dbh.c" returns="bool"/>
        <scope name="rollBack" signature="rollBack()" doc="roll back a transaction" ilk="function" src="pdo_dbh.c" returns="bool"/>
        <scope name="setAttribute" signature="setAttribute(long attribute, mixed value)" doc="Set an attribute" ilk="function" src="pdo_dbh.c" returns="bool"/>
        <scope name="exec" signature="exec(string query)" doc="Execute a query that does not return a row set&#10;returning the number of affected rows" ilk="function" src="pdo_dbh.c" returns="long"/>
        <scope name="query" signature="query(string sql [, PDOStatement::setFetchMode()" doc="args Prepare and execute sql returns the statement&#10;object for iteration" ilk="function" src="pdo_dbh.c" returns="object"/>
        <scope name="lastInsertId" signature="lastInsertId([string seqname])" doc="Returns the id of the last row that we affected on this&#10;connection Some databases require a sequence or table" ilk="function" src="pdo_dbh.c" returns="string"/>
        <scope name="errorCode" signature="errorCode()" doc="Fetch the error code associated with the last operation&#10;on the database handle" ilk="function" src="pdo_dbh.c" returns="string"/>
        <scope name="errorInfo" signature="errorInfo()" doc="Fetch extended error information associated with the&#10;last operation on the database handle" ilk="function" src="pdo_dbh.c" returns="int"/>
        <scope name="getAttribute" signature="getAttribute(long attribute)" doc="Get an attribute" ilk="function" src="pdo_dbh.c" returns="mixed"/>
        <scope name="quote" signature="quote(string string [, int paramtype])" doc="quotes string for use in a query The optional paramtype&#10;acts as a hint for drivers that have alternate quoting" ilk="function" src="pdo_dbh.c" returns="string"/>
        <scope name="__wakeup" signature="__wakeup()" doc="Prevents use of a PDO instance that has been&#10;unserialized" ilk="function" src="pdo_dbh.c" returns="int"/>
        <scope name="__sleep" signature="__sleep()" doc="Prevents serialization of a PDO instance" ilk="function" src="pdo_dbh.c" returns="int"/>
        <scope name="getAvailableDrivers" signature="getAvailableDrivers()" doc="Return array of available PDO drivers" ilk="function" src="pdo_dbh.c" returns="array"/>
        <variable name="PARAM_BOOL" citdl="integer" ilk="constant"/>
        <variable name="PARAM_NULL" citdl="integer" ilk="constant"/>
        <variable name="PARAM_INT" citdl="integer" ilk="constant"/>
        <variable name="PARAM_STR" citdl="integer" ilk="constant"/>
        <variable name="PARAM_LOB" citdl="integer" ilk="constant"/>
        <variable name="PARAM_STMT" citdl="integer" ilk="constant"/>
        <variable name="PARAM_INPUT_OUTPUT" citdl="integer" ilk="constant"/>
        <variable name="PARAM_EVT_ALLOC" citdl="integer" ilk="constant"/>
        <variable name="PARAM_EVT_FREE" citdl="integer" ilk="constant"/>
        <variable name="PARAM_EVT_EXEC_PRE" citdl="integer" ilk="constant"/>
        <variable name="PARAM_EVT_EXEC_POST" citdl="integer" ilk="constant"/>
        <variable name="PARAM_EVT_FETCH_PRE" citdl="integer" ilk="constant"/>
        <variable name="PARAM_EVT_FETCH_POST" citdl="integer" ilk="constant"/>
        <variable name="PARAM_EVT_NORMALIZE" citdl="integer" ilk="constant"/>
        <variable name="FETCH_LAZY" citdl="integer" ilk="constant"/>
        <variable name="FETCH_ASSOC" citdl="integer" ilk="constant"/>
        <variable name="FETCH_NUM" citdl="integer" ilk="constant"/>
        <variable name="FETCH_BOTH" citdl="integer" ilk="constant"/>
        <variable name="FETCH_OBJ" citdl="integer" ilk="constant"/>
        <variable name="FETCH_BOUND" citdl="integer" ilk="constant"/>
        <variable name="FETCH_COLUMN" citdl="integer" ilk="constant"/>
        <variable name="FETCH_CLASS" citdl="integer" ilk="constant"/>
        <variable name="FETCH_INTO" citdl="integer" ilk="constant"/>
        <variable name="FETCH_FUNC" citdl="integer" ilk="constant"/>
        <variable name="FETCH_GROUP" citdl="integer" ilk="constant"/>
        <variable name="FETCH_UNIQUE" citdl="integer" ilk="constant"/>
        <variable name="FETCH_KEY_PAIR" citdl="integer" ilk="constant"/>
        <variable name="FETCH_CLASSTYPE" citdl="integer" ilk="constant"/>
        <variable name="FETCH_SERIALIZE" citdl="integer" ilk="constant"/>
        <variable name="FETCH_PROPS_LATE" citdl="integer" ilk="constant"/>
        <variable name="FETCH_NAMED" citdl="integer" ilk="constant"/>
        <variable name="ATTR_AUTOCOMMIT" citdl="integer" ilk="constant"/>
        <variable name="ATTR_PREFETCH" citdl="integer" ilk="constant"/>
        <variable name="ATTR_TIMEOUT" citdl="integer" ilk="constant"/>
        <variable name="ATTR_ERRMODE" citdl="integer" ilk="constant"/>
        <variable name="ATTR_SERVER_VERSION" citdl="integer" ilk="constant"/>
        <variable name="ATTR_CLIENT_VERSION" citdl="integer" ilk="constant"/>
        <variable name="ATTR_SERVER_INFO" citdl="integer" ilk="constant"/>
        <variable name="ATTR_CONNECTION_STATUS" citdl="integer" ilk="constant"/>
        <variable name="ATTR_CASE" citdl="integer" ilk="constant"/>
        <variable name="ATTR_CURSOR_NAME" citdl="integer" ilk="constant"/>
        <variable name="ATTR_CURSOR" citdl="integer" ilk="constant"/>
        <variable name="ATTR_ORACLE_NULLS" citdl="integer" ilk="constant"/>
        <variable name="ATTR_PERSISTENT" citdl="integer" ilk="constant"/>
        <variable name="ATTR_STATEMENT_CLASS" citdl="integer" ilk="constant"/>
        <variable name="ATTR_FETCH_TABLE_NAMES" citdl="integer" ilk="constant"/>
        <variable name="ATTR_FETCH_CATALOG_NAMES" citdl="integer" ilk="constant"/>
        <variable name="ATTR_DRIVER_NAME" citdl="integer" ilk="constant"/>
        <variable name="ATTR_STRINGIFY_FETCHES" citdl="integer" ilk="constant"/>
        <variable name="ATTR_MAX_COLUMN_LEN" citdl="integer" ilk="constant"/>
        <variable name="ATTR_EMULATE_PREPARES" citdl="integer" ilk="constant"/>
        <variable name="ATTR_DEFAULT_FETCH_MODE" citdl="integer" ilk="constant"/>
        <variable name="ERRMODE_SILENT" citdl="integer" ilk="constant"/>
        <variable name="ERRMODE_WARNING" citdl="integer" ilk="constant"/>
        <variable name="ERRMODE_EXCEPTION" citdl="integer" ilk="constant"/>
        <variable name="CASE_NATURAL" citdl="integer" ilk="constant"/>
        <variable name="CASE_LOWER" citdl="integer" ilk="constant"/>
        <variable name="CASE_UPPER" citdl="integer" ilk="constant"/>
        <variable name="NULL_NATURAL" citdl="integer" ilk="constant"/>
        <variable name="NULL_EMPTY_STRING" citdl="integer" ilk="constant"/>
        <variable name="NULL_TO_STRING" citdl="integer" ilk="constant"/>
        <variable name="ERR_NONE" citdl="string" ilk="constant"/>
        <variable name="FETCH_ORI_NEXT" citdl="integer" ilk="constant"/>
        <variable name="FETCH_ORI_PRIOR" citdl="integer" ilk="constant"/>
        <variable name="FETCH_ORI_FIRST" citdl="integer" ilk="constant"/>
        <variable name="FETCH_ORI_LAST" citdl="integer" ilk="constant"/>
        <variable name="FETCH_ORI_ABS" citdl="integer" ilk="constant"/>
        <variable name="FETCH_ORI_REL" citdl="integer" ilk="constant"/>
        <variable name="CURSOR_FWDONLY" citdl="integer" ilk="constant"/>
        <variable name="CURSOR_SCROLL" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_USE_BUFFERED_QUERY" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_LOCAL_INFILE" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_MAX_BUFFER_SIZE" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_INIT_COMMAND" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_READ_DEFAULT_FILE" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_READ_DEFAULT_GROUP" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_COMPRESS" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_DIRECT_QUERY" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_FOUND_ROWS" citdl="integer" ilk="constant"/>
        <variable name="MYSQL_ATTR_IGNORE_SPACE" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="PDOStatement" ilk="class">
        <scope name="execute" signature="execute([array $bound_input_params])" doc="Execute a prepared statement optionally binding&#10;parameters" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="fetch" signature="fetch([int $how = PDO_FETCH_BOTH [, int $orientation [, int $offset]]])" doc="Fetches the next row and returns it or false if there&#10;are no more rows" ilk="function" src="pdo_stmt.c" returns="mixed"/>
        <scope name="bindParam" signature="bindParam(mixed $paramno, mixed &amp;$param [, int $type [, int $maxlen [, mixed $driverdata]]])" doc="bind a parameter to a PHP variable paramno is the&#10;-based position of the placeholder in the SQL statement&#10;but" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="bindColumn" signature="bindColumn(mixed $column, mixed &amp;$param [, int $type [, int $maxlen [, mixed $driverdata]]])" doc="bind a column to a PHP variable On each row fetch param&#10;will contain the value of the corresponding column" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="bindValue" signature="bindValue(mixed $paramno, mixed $param [, int $type ])" doc="bind an input parameter to the value of a PHP variable&#10;paramno is the -based position of the placeholder in" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="rowCount" signature="rowCount()" doc="Returns the number of rows in a result set or the&#10;number of rows affected by the last execute It" ilk="function" src="pdo_stmt.c" returns="int"/>
        <scope name="fetchColumn" signature="fetchColumn([int column_number])" doc="Returns a data of the specified column in the result&#10;set" ilk="function" src="pdo_stmt.c" returns="string"/>
        <scope name="fetchAll" signature="fetchAll([int $how = PDO_FETCH_BOTH [, string class_name [, NULL" doc="Returns an array of all of the results" ilk="function" src="pdo_stmt.c" returns="array"/>
        <scope name="fetchObject" signature="fetchObject([string class_name [, NULL" doc="Fetches the next row and returns it as an object" ilk="function" src="pdo_stmt.c" returns="mixed"/>
        <scope name="errorCode" signature="errorCode()" doc="Fetch the error code associated with the last operation&#10;on the statement handle" ilk="function" src="pdo_stmt.c" returns="string"/>
        <scope name="errorInfo" signature="errorInfo()" doc="Fetch extended error information associated with the&#10;last operation on the statement handle" ilk="function" src="pdo_stmt.c" returns="array"/>
        <scope name="setAttribute" signature="setAttribute(long attribute, mixed value)" doc="Set an attribute" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="getAttribute" signature="getAttribute(long attribute)" doc="Get an attribute" ilk="function" src="pdo_stmt.c" returns="mixed"/>
        <scope name="columnCount" signature="columnCount()" doc="Returns the number of columns in the result set" ilk="function" src="pdo_stmt.c" returns="int"/>
        <scope name="getColumnMeta" signature="getColumnMeta(int $column)" doc="Returns meta data for a numbered column" ilk="function" src="pdo_stmt.c" returns="array"/>
        <scope name="setFetchMode" signature="setFetchMode(int mode [mixed* params])" doc="Changes the default fetch mode for subsequent fetches&#10;params have different meaning for different fetch modes" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="nextRowset" signature="nextRowset()" doc="Advances to the next rowset in a multi-rowset statement&#10;handle Returns true if it succeded false otherwise" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="closeCursor" signature="closeCursor()" doc="Closes the cursor leaving the statement ready for&#10;re-execution" ilk="function" src="pdo_stmt.c" returns="bool"/>
        <scope name="debugDumpParams" signature="debugDumpParams()" doc="A utility for internals hackers to debug parameter&#10;internals" ilk="function" src="pdo_stmt.c" returns="void"/>
        <scope name="__wakeup" signature="__wakeup()" doc="Prevents use of a PDOStatement instance that has been&#10;unserialized" ilk="function" src="pdo_stmt.c" returns="int"/>
        <scope name="__sleep" signature="__sleep()" doc="Prevents serialization of a PDOStatement instance" ilk="function" src="pdo_stmt.c" returns="int"/>
        <variable name="queryString"/>
      </scope>
      <scope name="PDORow" ilk="class"/>
      <scope name="ReflectionException" ilk="class" classrefs="Exception">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="getMessage" signature="getMessage()"/>
        <scope ilk="function" name="getCode" signature="getCode()"/>
        <scope ilk="function" name="getFile" signature="getFile()"/>
        <scope ilk="function" name="getLine" signature="getLine()"/>
        <scope ilk="function" name="getTrace" signature="getTrace()"/>
        <scope ilk="function" name="getPrevious" signature="getPrevious()"/>
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <variable name="message"/>
        <variable name="code"/>
        <variable name="file"/>
        <variable name="line"/>
      </scope>
      <scope name="Reflection" ilk="class">
        <scope name="getModifierNames" signature="getModifierNames(int modifiers)" doc="Returns an array of modifier names" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="export" signature="export(Reflector r [, bool return])" doc="Exports a reflection object Returns the output if TRUE&#10;is specified for return printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
      </scope>
      <scope name="ReflectionFunctionAbstract" ilk="class">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <scope ilk="function" name="inNamespace" signature="inNamespace()"/>
        <scope ilk="function" name="isClosure" signature="isClosure()"/>
        <scope ilk="function" name="isDeprecated" signature="isDeprecated()"/>
        <scope ilk="function" name="isInternal" signature="isInternal()"/>
        <scope ilk="function" name="isUserDefined" signature="isUserDefined()"/>
        <scope ilk="function" name="getDocComment" signature="getDocComment()"/>
        <scope ilk="function" name="getEndLine" signature="getEndLine()"/>
        <scope ilk="function" name="getExtension" signature="getExtension()"/>
        <scope ilk="function" name="getExtensionName" signature="getExtensionName()"/>
        <scope ilk="function" name="getFileName" signature="getFileName()"/>
        <scope ilk="function" name="getName" signature="getName()"/>
        <scope ilk="function" name="getNamespaceName" signature="getNamespaceName()"/>
        <scope ilk="function" name="getNumberOfParameters" signature="getNumberOfParameters()"/>
        <scope ilk="function" name="getNumberOfRequiredParameters" signature="getNumberOfRequiredParameters()"/>
        <scope ilk="function" name="getParameters" signature="getParameters()"/>
        <scope ilk="function" name="getShortName" signature="getShortName()"/>
        <scope ilk="function" name="getStartLine" signature="getStartLine()"/>
        <scope ilk="function" name="getStaticVariables" signature="getStaticVariables()"/>
        <scope ilk="function" name="returnsReference" signature="returnsReference()"/>
        <variable name="name"/>
      </scope>
      <scope name="ReflectionFunction" ilk="class" classrefs="ReflectionFunctionAbstract">
        <scope name="__construct" signature="__construct(string name)" doc="Constructor Throws an Exception in case the given&#10;function does not exist" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="__toString" signature="__toString()" doc="Returns a string representation" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="export" signature="export(string name [, bool return])" doc="Exports a reflection object Returns the output if TRUE&#10;is specified for return printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="isDisabled" signature="isDisabled()" doc="Returns whether this function has been disabled or not" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="invoke" signature="invoke(mixed* args)" doc="Invokes the function" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="invokeArgs" signature="invokeArgs(array args)" doc="Invokes the function and pass its arguments as array" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope name="inNamespace" signature="inNamespace()" doc="Returns whether this function is defined in namespace" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isClosure" signature="isClosure()" doc="Returns whether this is a closure" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isDeprecated" signature="isDeprecated()" doc="Returns whether this function is deprecated" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isInternal" signature="isInternal()" doc="Returns whether this is an internal function" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isUserDefined" signature="isUserDefined()" doc="Returns whether this is an user-defined function" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getDocComment" signature="getDocComment()" doc="Returns the doc comment for this function" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getEndLine" signature="getEndLine()" doc="Returns the line this function's declaration ends at" ilk="function" src="php_reflection.c" returns="int"/>
        <scope name="getExtension" signature="getExtension()" doc="Returns NULL or the extension the function belongs to" ilk="function" src="php_reflection.c" returns="ReflectionExtension"/>
        <scope name="getExtensionName" signature="getExtensionName()" doc="Returns false or the name of the extension the function&#10;belongs to" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getFileName" signature="getFileName()" doc="Returns the filename of the file this function was&#10;declared in" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getName" signature="getName()" doc="Returns this function's name" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getNamespaceName" signature="getNamespaceName()" doc="Returns the name of namespace where this function is&#10;defined" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getNumberOfParameters" signature="getNumberOfParameters()" doc="Gets the number of required parameters" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getNumberOfRequiredParameters" signature="getNumberOfRequiredParameters()" doc="Gets the number of required parameters" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getParameters" signature="getParameters()" doc="Returns an array of parameter objects for this function" ilk="function" src="php_reflection.c" returns="ReflectionParameter[]"/>
        <scope name="getShortName" signature="getShortName()" doc="Returns the short name of the function without&#10;namespace part" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getStartLine" signature="getStartLine()" doc="Returns the line this function's declaration starts at" ilk="function" src="php_reflection.c" returns="int"/>
        <scope name="getStaticVariables" signature="getStaticVariables()" doc="Returns an associative array containing this function's&#10;static variables and their values" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="returnsReference" signature="returnsReference()" doc="Gets whether this function returns a reference" ilk="function" src="php_reflection.c" returns="bool"/>
        <variable name="IS_DEPRECATED" citdl="integer" ilk="constant"/>
        <variable name="name"/>
      </scope>
      <scope name="ReflectionParameter" ilk="class">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope name="export" signature="export(mixed function, mixed parameter [, bool return])" doc="throws ReflectionException Exports a reflection object&#10;Returns the output if TRUE is specified for return&#10;printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="__construct" signature="__construct(mixed function, mixed parameter)" doc="Constructor Throws an Exception in case the given&#10;method does not exist" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="__toString" signature="__toString()" doc="Returns a string representation" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getName" signature="getName()" doc="Returns this parameters's name" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="isPassedByReference" signature="isPassedByReference()" doc="Returns whether this parameters is passed to by&#10;reference" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getDeclaringFunction" signature="getDeclaringFunction()" doc="Returns the ReflectionFunction for the function of this&#10;parameter" ilk="function" src="php_reflection.c" returns="ReflectionFunction"/>
        <scope name="getDeclaringClass" signature="getDeclaringClass()" doc="Returns in which class this parameter is defined not&#10;the typehint of the parameter" ilk="function" src="php_reflection.c" returns="ReflectionClass"/>
        <scope name="getClass" signature="getClass()" doc="Returns this parameters's class hint or NULL if there&#10;is none" ilk="function" src="php_reflection.c" returns="ReflectionClass"/>
        <scope name="isArray" signature="isArray()" doc="Returns whether parameter MUST be an array" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="allowsNull" signature="allowsNull()" doc="Returns whether NULL is allowed as this parameters's&#10;value" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getPosition" signature="getPosition()" doc="Returns whether this parameter is an optional parameter" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isOptional" signature="isOptional()" doc="Returns whether this parameter is an optional parameter" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isDefaultValueAvailable" signature="isDefaultValueAvailable()" doc="Returns whether the default value of this parameter is&#10;available" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getDefaultValue" signature="getDefaultValue()" doc="Returns the default value of this parameter or throws&#10;an exception" ilk="function" src="php_reflection.c" returns="bool"/>
        <variable name="name"/>
      </scope>
      <scope name="ReflectionMethod" ilk="class" classrefs="ReflectionFunctionAbstract">
        <scope name="export" signature="export(mixed class, string name [, bool return])" doc="throws ReflectionException Exports a reflection object&#10;Returns the output if TRUE is specified for return&#10;printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="__construct" signature="__construct(mixed class_or_method [, string name])" doc="Constructor Throws an Exception in case the given&#10;method does not exist" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="__toString" signature="__toString()" doc="Returns a string representation" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="isPublic" signature="isPublic()" doc="Returns whether this method is public" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isPrivate" signature="isPrivate()" doc="Returns whether this method is private" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isProtected" signature="isProtected()" doc="Returns whether this method is protected" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isAbstract" signature="isAbstract()" doc="Returns whether this method is abstract" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isFinal" signature="isFinal()" doc="Returns whether this method is final" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isStatic" signature="isStatic()" doc="Returns whether this method is static" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isConstructor" signature="isConstructor()" doc="Returns whether this method is the constructor" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isDestructor" signature="isDestructor()" doc="Returns whether this method is static" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getModifiers" signature="getModifiers()" doc="Returns a bitfield of the access modifiers for this&#10;method" ilk="function" src="php_reflection.c" returns="int"/>
        <scope name="invoke" signature="invoke(mixed object, mixed* args)" doc="Invokes the method" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="invokeArgs" signature="invokeArgs(mixed object, array args)" doc="Invokes the function and pass its arguments as array" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="getDeclaringClass" signature="getDeclaringClass()" doc="Get the declaring class" ilk="function" src="php_reflection.c" returns="ReflectionClass"/>
        <scope name="getPrototype" signature="getPrototype()" doc="Get the prototype" ilk="function" src="php_reflection.c" returns="ReflectionClass"/>
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="inNamespace" signature="inNamespace()"/>
        <scope ilk="function" name="isClosure" signature="isClosure()"/>
        <scope ilk="function" name="isDeprecated" signature="isDeprecated()"/>
        <scope ilk="function" name="isInternal" signature="isInternal()"/>
        <scope ilk="function" name="isUserDefined" signature="isUserDefined()"/>
        <scope ilk="function" name="getDocComment" signature="getDocComment()"/>
        <scope ilk="function" name="getEndLine" signature="getEndLine()"/>
        <scope ilk="function" name="getExtension" signature="getExtension()"/>
        <scope ilk="function" name="getExtensionName" signature="getExtensionName()"/>
        <scope ilk="function" name="getFileName" signature="getFileName()"/>
        <scope ilk="function" name="getName" signature="getName()"/>
        <scope ilk="function" name="getNamespaceName" signature="getNamespaceName()"/>
        <scope ilk="function" name="getNumberOfParameters" signature="getNumberOfParameters()"/>
        <scope ilk="function" name="getNumberOfRequiredParameters" signature="getNumberOfRequiredParameters()"/>
        <scope ilk="function" name="getParameters" signature="getParameters()"/>
        <scope ilk="function" name="getShortName" signature="getShortName()"/>
        <scope ilk="function" name="getStartLine" signature="getStartLine()"/>
        <scope ilk="function" name="getStaticVariables" signature="getStaticVariables()"/>
        <scope ilk="function" name="returnsReference" signature="returnsReference()"/>
        <variable name="IS_STATIC" citdl="integer" ilk="constant"/>
        <variable name="IS_PUBLIC" citdl="integer" ilk="constant"/>
        <variable name="IS_PROTECTED" citdl="integer" ilk="constant"/>
        <variable name="IS_PRIVATE" citdl="integer" ilk="constant"/>
        <variable name="IS_ABSTRACT" citdl="integer" ilk="constant"/>
        <variable name="IS_FINAL" citdl="integer" ilk="constant"/>
        <variable name="name"/>
        <variable name="class"/>
      </scope>
      <scope name="ReflectionClass" ilk="class">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope name="export" signature="export(mixed argument [, bool return])" doc="throws ReflectionException Exports a reflection object&#10;Returns the output if TRUE is specified for return&#10;printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="__construct" signature="__construct(mixed argument)" doc="throws ReflectionException Constructor Takes a string&#10;or an instance as an argument" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="__toString" signature="__toString()" doc="Returns a string representation" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getName" signature="getName()" doc="Returns the class' name" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="isInternal" signature="isInternal()" doc="Returns whether this class is an internal class" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isUserDefined" signature="isUserDefined()" doc="Returns whether this class is user-defined" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isInstantiable" signature="isInstantiable()" doc="Returns whether this class is instantiable" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getFileName" signature="getFileName()" doc="Returns the filename of the file this class was&#10;declared in" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getStartLine" signature="getStartLine()" doc="Returns the line this class' declaration starts at" ilk="function" src="php_reflection.c" returns="int"/>
        <scope name="getEndLine" signature="getEndLine()" doc="Returns the line this class' declaration ends at" ilk="function" src="php_reflection.c" returns="int"/>
        <scope name="getDocComment" signature="getDocComment()" doc="Returns the doc comment for this class" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getConstructor" signature="getConstructor()" doc="Returns the class' constructor if there is one NULL&#10;otherwise" ilk="function" src="php_reflection.c" returns="ReflectionMethod"/>
        <scope name="hasMethod" signature="hasMethod(string name)" doc="Returns whether a method exists or not" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getMethod" signature="getMethod(string name)" doc="throws ReflectionException Returns the class' method&#10;specified by its name" ilk="function" src="php_reflection.c" returns="ReflectionMethod"/>
        <scope name="getMethods" signature="getMethods([long $filter])" doc="Returns an array of this class' methods" ilk="function" src="php_reflection.c" returns="ReflectionMethod[]"/>
        <scope name="hasProperty" signature="hasProperty(string name)" doc="Returns whether a property exists or not" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getProperty" signature="getProperty(string name)" doc="throws ReflectionException Returns the class' property&#10;specified by its name" ilk="function" src="php_reflection.c" returns="ReflectionProperty"/>
        <scope name="getProperties" signature="getProperties([long $filter])" doc="Returns an array of this class' properties" ilk="function" src="php_reflection.c" returns="ReflectionProperty[]"/>
        <scope name="hasConstant" signature="hasConstant(string name)" doc="Returns whether a constant exists or not" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getConstants" signature="getConstants()" doc="Returns an associative array containing this class'&#10;constants and their values" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="getConstant" signature="getConstant(string name)" doc="Returns the class' constant specified by its name" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="getInterfaces" signature="getInterfaces()" doc="Returns an array of interfaces this class implements" ilk="function" src="php_reflection.c" returns="ReflectionClass[]"/>
        <scope name="getInterfaceNames" signature="getInterfaceNames()" doc="Returns an array of names of interfaces this class&#10;implements" ilk="function" src="php_reflection.c" returns="String[]"/>
        <scope name="isInterface" signature="isInterface()" doc="Returns whether this is an interface or a class" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isAbstract" signature="isAbstract()" doc="Returns whether this class is abstract" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isFinal" signature="isFinal()" doc="Returns whether this class is final" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getModifiers" signature="getModifiers()" doc="Returns a bitfield of the access modifiers for this&#10;class" ilk="function" src="php_reflection.c" returns="int"/>
        <scope name="isInstance" signature="isInstance(stdclass object)" doc="Returns whether the given object is an instance of this&#10;class" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="newInstance" signature="newInstance(mixed* args, ...)" doc="Returns an instance of this class" ilk="function" src="php_reflection.c" returns="stdclass"/>
        <scope name="newInstanceArgs" signature="newInstanceArgs([array args])" doc="Returns an instance of this class" ilk="function" src="php_reflection.c" returns="stdclass"/>
        <scope name="getParentClass" signature="getParentClass()" doc="Returns the class' parent class or if none exists FALSE" ilk="function" src="php_reflection.c" returns="ReflectionClass"/>
        <scope name="isSubclassOf" signature="isSubclassOf(string" doc="Returns whether this class is a subclass of another&#10;class" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getStaticProperties" signature="getStaticProperties()" doc="Returns an associative array containing all static&#10;property values of the class" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="getStaticPropertyValue" signature="getStaticPropertyValue(string name [, mixed default])" doc="Returns the value of a static property" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="setStaticPropertyValue" signature="setStaticPropertyValue($name, $value)" doc="Sets the value of a static property" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="getDefaultProperties" signature="getDefaultProperties()" doc="Returns an associative array containing copies of all&#10;default property values of the class" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="isIterateable" signature="isIterateable()" doc="Returns whether this class is iterateable can be used&#10;inside foreach" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="implementsInterface" signature="implementsInterface(string" doc="Returns whether this class is a subclass of another&#10;class" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getExtension" signature="getExtension()" doc="Returns NULL or the extension the class belongs to" ilk="function" src="php_reflection.c" returns="ReflectionExtension"/>
        <scope name="getExtensionName" signature="getExtensionName()" doc="Returns false or the name of the extension the class&#10;belongs to" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="inNamespace" signature="inNamespace()" doc="Returns whether this class is defined in namespace" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getNamespaceName" signature="getNamespaceName()" doc="Returns the name of namespace where this class is&#10;defined" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getShortName" signature="getShortName()" doc="Returns the short name of the class without namespace&#10;part" ilk="function" src="php_reflection.c" returns="string"/>
        <variable name="IS_IMPLICIT_ABSTRACT" citdl="integer" ilk="constant"/>
        <variable name="IS_EXPLICIT_ABSTRACT" citdl="integer" ilk="constant"/>
        <variable name="IS_FINAL" citdl="integer" ilk="constant"/>
        <variable name="name"/>
      </scope>
      <scope name="ReflectionObject" ilk="class" classrefs="ReflectionClass">
        <scope name="export" signature="export(mixed argument [, bool return])" doc="throws ReflectionException Exports a reflection object&#10;Returns the output if TRUE is specified for return&#10;printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="__construct" signature="__construct(mixed argument)" doc="throws ReflectionException Constructor Takes an&#10;instance as an argument" ilk="function" src="php_reflection.c" returns="void"/>
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <scope ilk="function" name="getName" signature="getName()"/>
        <scope ilk="function" name="isInternal" signature="isInternal()"/>
        <scope ilk="function" name="isUserDefined" signature="isUserDefined()"/>
        <scope ilk="function" name="isInstantiable" signature="isInstantiable()"/>
        <scope ilk="function" name="getFileName" signature="getFileName()"/>
        <scope ilk="function" name="getStartLine" signature="getStartLine()"/>
        <scope ilk="function" name="getEndLine" signature="getEndLine()"/>
        <scope ilk="function" name="getDocComment" signature="getDocComment()"/>
        <scope ilk="function" name="getConstructor" signature="getConstructor()"/>
        <scope ilk="function" name="hasMethod" signature="hasMethod()"/>
        <scope ilk="function" name="getMethod" signature="getMethod()"/>
        <scope ilk="function" name="getMethods" signature="getMethods()"/>
        <scope ilk="function" name="hasProperty" signature="hasProperty()"/>
        <scope ilk="function" name="getProperty" signature="getProperty()"/>
        <scope ilk="function" name="getProperties" signature="getProperties()"/>
        <scope ilk="function" name="hasConstant" signature="hasConstant()"/>
        <scope ilk="function" name="getConstants" signature="getConstants()"/>
        <scope ilk="function" name="getConstant" signature="getConstant()"/>
        <scope ilk="function" name="getInterfaces" signature="getInterfaces()"/>
        <scope ilk="function" name="getInterfaceNames" signature="getInterfaceNames()"/>
        <scope ilk="function" name="isInterface" signature="isInterface()"/>
        <scope ilk="function" name="isAbstract" signature="isAbstract()"/>
        <scope ilk="function" name="isFinal" signature="isFinal()"/>
        <scope ilk="function" name="getModifiers" signature="getModifiers()"/>
        <scope ilk="function" name="isInstance" signature="isInstance()"/>
        <scope ilk="function" name="newInstance" signature="newInstance()"/>
        <scope ilk="function" name="newInstanceArgs" signature="newInstanceArgs()"/>
        <scope ilk="function" name="getParentClass" signature="getParentClass()"/>
        <scope ilk="function" name="isSubclassOf" signature="isSubclassOf()"/>
        <scope ilk="function" name="getStaticProperties" signature="getStaticProperties()"/>
        <scope ilk="function" name="getStaticPropertyValue" signature="getStaticPropertyValue()"/>
        <scope ilk="function" name="setStaticPropertyValue" signature="setStaticPropertyValue()"/>
        <scope ilk="function" name="getDefaultProperties" signature="getDefaultProperties()"/>
        <scope ilk="function" name="isIterateable" signature="isIterateable()"/>
        <scope ilk="function" name="implementsInterface" signature="implementsInterface()"/>
        <scope ilk="function" name="getExtension" signature="getExtension()"/>
        <scope ilk="function" name="getExtensionName" signature="getExtensionName()"/>
        <scope ilk="function" name="inNamespace" signature="inNamespace()"/>
        <scope ilk="function" name="getNamespaceName" signature="getNamespaceName()"/>
        <scope ilk="function" name="getShortName" signature="getShortName()"/>
        <variable name="IS_IMPLICIT_ABSTRACT" citdl="integer" ilk="constant"/>
        <variable name="IS_EXPLICIT_ABSTRACT" citdl="integer" ilk="constant"/>
        <variable name="IS_FINAL" citdl="integer" ilk="constant"/>
        <variable name="name"/>
      </scope>
      <scope name="ReflectionProperty" ilk="class">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope name="export" signature="export(mixed class, string name [, bool return])" doc="throws ReflectionException Exports a reflection object&#10;Returns the output if TRUE is specified for return&#10;printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="__construct" signature="__construct(mixed class, string name)" doc="Constructor Throws an Exception in case the given&#10;property does not exist" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="__toString" signature="__toString()" doc="Returns a string representation" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getName" signature="getName()" doc="Returns the class' name" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getValue" signature="getValue([stdclass object])" doc="Returns this property's value" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="setValue" signature="setValue([stdclass object,] mixed value)" doc="Sets this property's value" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="isPublic" signature="isPublic()" doc="Returns whether this property is public" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isPrivate" signature="isPrivate()" doc="Returns whether this property is private" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isProtected" signature="isProtected()" doc="Returns whether this property is protected" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isStatic" signature="isStatic()" doc="Returns whether this property is static" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="isDefault" signature="isDefault()" doc="Returns whether this property is default declared at&#10;compilation time" ilk="function" src="php_reflection.c" returns="bool"/>
        <scope name="getModifiers" signature="getModifiers()" doc="Returns a bitfield of the access modifiers for this&#10;property" ilk="function" src="php_reflection.c" returns="int"/>
        <scope name="getDeclaringClass" signature="getDeclaringClass()" doc="Get the declaring class" ilk="function" src="php_reflection.c" returns="ReflectionClass"/>
        <scope name="getDocComment" signature="getDocComment()" doc="Returns the doc comment for this property" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="setAccessible" signature="setAccessible()" doc="Sets whether non-public properties can be requested" ilk="function" src="php_reflection.c" returns="int"/>
        <variable name="IS_STATIC" citdl="integer" ilk="constant"/>
        <variable name="IS_PUBLIC" citdl="integer" ilk="constant"/>
        <variable name="IS_PROTECTED" citdl="integer" ilk="constant"/>
        <variable name="IS_PRIVATE" citdl="integer" ilk="constant"/>
        <variable name="name"/>
        <variable name="class"/>
      </scope>
      <scope name="ReflectionExtension" ilk="class">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope name="export" signature="export(string name [, bool return])" doc="throws ReflectionException Exports a reflection object&#10;Returns the output if TRUE is specified for return&#10;printing it otherwise" ilk="function" src="php_reflection.c" returns="mixed"/>
        <scope name="__construct" signature="__construct(string name)" doc="Constructor Throws an Exception in case the given&#10;extension does not exist" ilk="function" src="php_reflection.c" returns="void"/>
        <scope name="__toString" signature="__toString()" doc="Returns a string representation" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getName" signature="getName()" doc="Returns this extension's name" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getVersion" signature="getVersion()" doc="Returns this extension's version" ilk="function" src="php_reflection.c" returns="string"/>
        <scope name="getFunctions" signature="getFunctions()" doc="Returns an array of this extension's fuctions" ilk="function" src="php_reflection.c" returns="ReflectionFunction[]"/>
        <scope name="getConstants" signature="getConstants()" doc="Returns an associative array containing this&#10;extension's constants and their values" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="getINIEntries" signature="getINIEntries()" doc="Returns an associative array containing this&#10;extension's INI entries and their values" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="getClasses" signature="getClasses()" doc="Returns an array containing ReflectionClass objects for&#10;all classes of this extension" ilk="function" src="php_reflection.c" returns="ReflectionClass[]"/>
        <scope name="getClassNames" signature="getClassNames()" doc="Returns an array containing all names of all classes of&#10;this extension" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="getDependencies" signature="getDependencies()" doc="Returns an array containing all names of all extensions&#10;this extension depends on" ilk="function" src="php_reflection.c" returns="array"/>
        <scope name="info" signature="info()" doc="U Prints phpinfo block for the extension" ilk="function" src="php_reflection.c" returns="void"/>
        <variable name="name"/>
      </scope>
      <scope name="__PHP_Incomplete_Class" ilk="class"/>
      <scope name="php_user_filter" ilk="class">
        <scope ilk="function" name="filter" signature="filter()"/>
        <scope ilk="function" name="onCreate" signature="onCreate()"/>
        <scope ilk="function" name="onClose" signature="onClose()"/>
        <variable name="filtername"/>
        <variable name="params"/>
      </scope>
      <scope name="Directory" ilk="class">
        <scope ilk="function" name="close" signature="close()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="read" signature="read()"/>
      </scope>
      <scope name="SimpleXMLElement" ilk="class">
        <scope name="__construct" signature="__construct(string data [, int options [, bool data_is_url [, string ns [, bool is_prefix]]]])" doc="SimpleXMLElement constructor" ilk="function" src="simplexml.c"/>
        <scope name="asXML" signature="asXML([string filename])" doc="Return a well-formed XML string based on SimpleXML&#10;element" ilk="function" src="simplexml.c" returns="string"/>
        <scope ilk="function" name="saveXML" signature="saveXML()"/>
        <scope name="xpath" signature="xpath(string path)" doc="Runs XPath query on the XML data" ilk="function" src="simplexml.c" returns="array"/>
        <scope name="registerXPathNamespace" signature="registerXPathNamespace(string prefix, string ns)" doc="Creates a prefix ns context for the next XPath query" ilk="function" src="simplexml.c" returns="bool"/>
        <scope name="attributes" signature="attributes([string ns [, bool is_prefix]])" doc="Identifies an element's attributes" ilk="function" src="simplexml.c" returns="array"/>
        <scope name="children" signature="children([string ns [, bool is_prefix]])" doc="Finds children of given node" ilk="function" src="simplexml.c" returns="object"/>
        <scope name="getNamespaces" signature="getNamespaces([bool recursve])" doc="Return all namespaces in use" ilk="function" src="simplexml.c" returns="string"/>
        <scope name="getDocNamespaces" signature="getDocNamespaces([bool recursive])" doc="Return all namespaces registered with document" ilk="function" src="simplexml.c" returns="string"/>
        <scope name="getName" signature="getName()" doc="Finds children of given node" ilk="function" src="simplexml.c" returns="object"/>
        <scope name="addChild" signature="addChild(string qName [, string value [, string ns]])" doc="Add Element with optional namespace information" ilk="function" src="simplexml.c" returns="void"/>
        <scope name="addAttribute" signature="addAttribute(string qName, string value [,string ns])" doc="Add Attribute with optional namespace information" ilk="function" src="simplexml.c" returns="void"/>
        <scope name="__toString" signature="__toString()" doc="U Returns the string content" ilk="function" src="simplexml.c" returns="object"/>
        <scope ilk="function" name="count" signature="count()"/>
      </scope>
      <scope classrefs="SimpleXMLElement" doc="@ingroup SPL&#10;@brief recursive SimpleXML_Element iterator&#10;@since PHP 5.0&#10;&#10;The SimpleXMLIterator implements the RecursiveIterator interface. This &#10;allows iteration over all elements using foreach or an appropriate while&#10;construct, just like SimpleXMLElement does. When using the foreach construct,&#10;you will also iterate over the subelements. For every element which&#10;has subelements, hasChildren() returns true.  This will trigger a call to&#10;getChildren() which returns the iterator for that sub element." ilk="class" interfacerefs="RecursiveIterator Countable" line="1072" lineend="1100" name="SimpleXMLIterator">
        <scope doc="@return whether the current node has sub nodes." ilk="function" line="1076" lineend="1076" name="hasChildren" returns="whether" signature="hasChildren()"/>
        <scope doc="@return a SimpleXMLIterator for the current node." ilk="function" line="1080" lineend="1080" name="getChildren" returns="a" signature="getChildren()"/>
        <scope doc="@return number of elements/attributes seen with foreach()" ilk="function" line="1084" lineend="1084" name="count" returns="number" signature="count()"/>
        <scope doc="@copydoc Iterator::rewind" ilk="function" line="1087" lineend="1087" name="rewind" signature="rewind()"/>
        <scope doc="@copydoc Iterator::valid" ilk="function" line="1090" lineend="1090" name="valid" signature="valid()"/>
        <scope doc="@copydoc Iterator::current" ilk="function" line="1093" lineend="1093" name="current" signature="current()"/>
        <scope doc="@copydoc Iterator::key" ilk="function" line="1096" lineend="1096" name="key" signature="key()"/>
        <scope doc="@copydoc Iterator::next" ilk="function" line="1099" lineend="1099" name="next" signature="next()"/>
      </scope>
      <scope name="mysqli_sql_exception" ilk="class" classrefs="RuntimeException">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="getMessage" signature="getMessage()"/>
        <scope ilk="function" name="getCode" signature="getCode()"/>
        <scope ilk="function" name="getFile" signature="getFile()"/>
        <scope ilk="function" name="getLine" signature="getLine()"/>
        <scope ilk="function" name="getTrace" signature="getTrace()"/>
        <scope ilk="function" name="getPrevious" signature="getPrevious()"/>
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <variable name="message"/>
        <variable name="code"/>
        <variable name="file"/>
        <variable name="line"/>
        <variable name="sqlstate"/>
      </scope>
      <scope name="mysqli_driver" ilk="class">
        <variable name="client_info"/>
        <variable name="client_version"/>
        <variable name="driver_version"/>
        <variable name="embedded"/>
        <variable name="reconnect"/>
        <variable name="report_mode"/>
      </scope>
      <scope name="mysqli" ilk="class">
        <scope name="autocommit" ilk="function" signature="autocommit ( bool $mode  )" doc="Turns on or off auto-commit mode on queries for the database connection."/>
        <scope ilk="function" name="change_user" signature="change_user()"/>
        <scope ilk="function" name="character_set_name" signature="character_set_name()"/>
        <scope ilk="function" name="client_encoding" signature="client_encoding()"/>
        <scope name="close" ilk="function" signature="close ( void  )" doc="Closes a previously opened database connection."/>
        <scope name="commit" ilk="function" signature="commit ( void  )" doc="Commits the current transaction for the database connection."/>
        <scope ilk="function" name="connect" signature="connect()"/>
        <scope ilk="function" name="dump_debug_info" signature="dump_debug_info()"/>
        <scope name="debug" ilk="function" signature="debug ( string $message  )" doc="Performs debugging operations using the Fred Fish debugging library."/>
        <scope ilk="function" name="get_charset" signature="get_charset()"/>
        <scope ilk="function" name="get_client_info" signature="get_client_info()"/>
        <scope ilk="function" name="get_server_info" signature="get_server_info()"/>
        <scope ilk="function" name="get_warnings" signature="get_warnings()"/>
        <scope ilk="function" name="init" signature="init()"/>
        <scope name="kill" ilk="function" signature="kill ( int $processid  )" doc="This function is used to ask the server to kill a MySQL thread specified by the processid parameter. This value must be retrieved by calling the mysqli_thread_id() function."/>
        <scope ilk="function" name="set_local_infile_default" signature="set_local_infile_default()"/>
        <scope ilk="function" name="set_local_infile_handler" signature="set_local_infile_handler()"/>
        <scope ilk="function" name="multi_query" signature="multi_query()"/>
        <scope ilk="function" name="mysqli" signature="mysqli()"/>
        <scope ilk="function" name="more_results" signature="more_results()"/>
        <scope ilk="function" name="next_result" signature="next_result()"/>
        <scope name="options" ilk="function" signature="options ( int $option  , mixed $value  )" doc="Used to set extra connect options and affect behavior for a connection."/>
        <scope name="ping" ilk="function" signature="ping ( void  )" doc="Checks whether the connection to the server is working. If it has gone down, and global option mysqli.reconnect is enabled an automatic reconnection is attempted."/>
        <scope name="prepare" ilk="function" signature="prepare ( string $query  )" doc="Prepares the SQL query pointed to by the null-terminated string query, and returns a statement handle to be used for further operations on the statement. The query must consist of a single SQL statement."/>
        <scope name="query" ilk="function" signature="query ( string $query  [, int $resultmode ] )" doc="Performs a query against the database."/>
        <scope ilk="function" name="real_connect" signature="real_connect()"/>
        <scope ilk="function" name="real_escape_string" signature="real_escape_string()"/>
        <scope ilk="function" name="escape_string" signature="escape_string()"/>
        <scope ilk="function" name="real_query" signature="real_query()"/>
        <scope name="rollback" ilk="function" signature="rollback ( void  )" doc="Rollbacks the current transaction for the database."/>
        <scope ilk="function" name="select_db" signature="select_db()"/>
        <scope ilk="function" name="set_charset" signature="set_charset()"/>
        <scope ilk="function" name="set_opt" signature="set_opt()"/>
        <scope ilk="function" name="ssl_set" signature="ssl_set()"/>
        <scope name="stat" ilk="function" signature="stat ( void  )" doc="mysqli_stat() returns a string containing information similar to that provided by the &amp;#039;mysqladmin status&amp;#039; command. This includes uptime in seconds and the number of running threads, questions, reloads, and open tables."/>
        <scope ilk="function" name="stmt_init" signature="stmt_init()"/>
        <scope ilk="function" name="store_result" signature="store_result()"/>
        <scope ilk="function" name="thread_safe" signature="thread_safe()"/>
        <scope ilk="function" name="use_result" signature="use_result()"/>
        <scope ilk="function" name="refresh" signature="refresh()"/>
        <variable name="affected_rows"/>
        <variable name="client_info"/>
        <variable name="client_version"/>
        <variable name="connect_errno"/>
        <variable name="connect_error"/>
        <variable name="errno"/>
        <variable name="error"/>
        <variable name="field_count"/>
        <variable name="host_info"/>
        <variable name="info"/>
        <variable name="insert_id"/>
        <variable name="server_info"/>
        <variable name="server_version"/>
        <variable name="sqlstate"/>
        <variable name="protocol_version"/>
        <variable name="thread_id"/>
        <variable name="warning_count"/>
      </scope>
      <scope name="mysqli_warning" ilk="class">
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <variable name="message"/>
        <variable name="sqlstate"/>
        <variable name="errno"/>
      </scope>
      <scope name="mysqli_result" ilk="class">
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope name="close" ilk="function" signature="close ( void  )" doc="Frees the memory associated with the result."/>
        <scope name="free" ilk="function" signature="free ( void  )" doc="Frees the memory associated with the result."/>
        <scope ilk="function" name="data_seek" signature="data_seek()"/>
        <scope ilk="function" name="fetch_field" signature="fetch_field()"/>
        <scope ilk="function" name="fetch_fields" signature="fetch_fields()"/>
        <scope ilk="function" name="fetch_field_direct" signature="fetch_field_direct()"/>
        <scope ilk="function" name="fetch_array" signature="fetch_array()"/>
        <scope ilk="function" name="fetch_assoc" signature="fetch_assoc()"/>
        <scope ilk="function" name="fetch_object" signature="fetch_object()"/>
        <scope ilk="function" name="fetch_row" signature="fetch_row()"/>
        <scope ilk="function" name="field_seek" signature="field_seek()"/>
        <scope ilk="function" name="free_result" signature="free_result()"/>
        <variable name="current_field"/>
        <variable name="field_count"/>
        <variable name="lengths"/>
        <variable name="num_rows"/>
        <variable name="type"/>
      </scope>
      <scope name="mysqli_stmt" ilk="class">
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="attr_get" signature="attr_get()"/>
        <scope ilk="function" name="attr_set" signature="attr_set()"/>
        <scope ilk="function" name="bind_param" signature="bind_param()"/>
        <scope ilk="function" name="bind_result" signature="bind_result()"/>
        <scope name="close" ilk="function" signature="close ( void  )" doc="Closes a prepared statement. mysqli_stmt_close() also deallocates the statement handle. If the current statement has pending or unread results, this function cancels them so that the next query can be executed."/>
        <scope ilk="function" name="data_seek" signature="data_seek()"/>
        <scope name="execute" ilk="function" signature="execute ( void  )" doc="Executes a query that has been previously prepared using the mysqli_prepare() function. When executed any parameter markers which exist will automatically be replaced with the appropiate data."/>
        <scope name="fetch" ilk="function" signature="fetch ( void  )" doc="Fetch the result from a prepared statement into the variables bound by mysqli_stmt_bind_result()."/>
        <scope ilk="function" name="get_warnings" signature="get_warnings()"/>
        <scope ilk="function" name="result_metadata" signature="result_metadata()"/>
        <scope ilk="function" name="num_rows" signature="num_rows()"/>
        <scope ilk="function" name="send_long_data" signature="send_long_data()"/>
        <scope ilk="function" name="stmt" signature="stmt()"/>
        <scope ilk="function" name="free_result" signature="free_result()"/>
        <scope name="reset" ilk="function" signature="reset ( void  )" doc="Resets a prepared statement on client and server to state after prepare."/>
        <scope name="prepare" ilk="function" signature="prepare ( string $query  )" doc="Prepares the SQL query pointed to by the null-terminated string query."/>
        <scope ilk="function" name="store_result" signature="store_result()"/>
        <variable name="affected_rows"/>
        <variable name="insert_id"/>
        <variable name="num_rows"/>
        <variable name="param_count"/>
        <variable name="field_count"/>
        <variable name="errno"/>
        <variable name="error"/>
        <variable name="sqlstate"/>
        <variable name="id"/>
      </scope>
      <scope name="SQLiteDatabase" ilk="class">
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope name="query" ilk="function" signature="query ( string $query  [, int $result_type  [, string &amp;$error_msg ]] )" doc="Executes an SQL statement given by the query against a given database handle."/>
        <scope name="queryExec" ilk="function" signature="queryExec ( string $query  [, string &amp;$error_msg ] )" doc="Executes an SQL statement given by the query against a given database handle (specified by the dbhandle  parameter)."/>
        <scope name="arrayQuery" ilk="function" signature="arrayQuery ( string $query  [, int $result_type  [, bool $decode_binary ]] )" doc="sqlite_array_query() executes the given query and returns an array of the entire result set. It is similar to calling  sqlite_query() and then sqlite_fetch_array() for each row in the result set. sqlite_array_query() is significantly faster than the aforementioned."/>
        <scope name="singleQuery" ilk="function" signature="singleQuery ( string $query  [, bool $first_row_only  [, bool $decode_binary ]] )" doc="undocumented"/>
        <scope name="unbufferedQuery" ilk="function" signature="unbufferedQuery ( string $query  [, int $result_type  [, string &amp;$error_msg ]] )" doc="sqlite_unbuffered_query() is identical to sqlite_query() except that the result that is returned is a sequential forward-only result set that can only be used to read each row, one after the other."/>
        <scope name="lastInsertRowid" ilk="function" signature="lastInsertRowid ( void  )" doc="Returns the rowid of the row that was most recently inserted into the database dbhandle, if it was created as an auto-increment field."/>
        <scope name="changes" ilk="function" signature="changes ( void  )" doc="Returns the numbers of rows that were changed by the most recent SQL statement executed against the dbhandle database handle."/>
        <scope name="createAggregate" ilk="function" signature="createAggregate ( string $function_name  , callback $step_func  , callback $finalize_func  [, int $num_args ] )" doc="sqlite_create_aggregate() is similar to sqlite_create_function() except that it registers functions that can be used to calculate a result aggregated across all the rows of a query."/>
        <scope name="createFunction" ilk="function" signature="createFunction ( string $function_name  , callback $callback  [, int $num_args ] )" doc="sqlite_create_function() allows you to register a PHP function with SQLite as an UDF (User Defined Function), so that it can be called from within your SQL statements."/>
        <scope name="busyTimeout" ilk="function" signature="busyTimeout ( int $milliseconds  )" doc="Set the maximum time, in milliseconds, that SQLite will wait for a dbhandle to become ready for use."/>
        <scope name="lastError" ilk="function" signature="lastError ( void  )" doc="Returns the error code from the last operation performed on dbhandle (the database handle), or 0 when no error occurred. A human readable description of the error code can be retrieved using sqlite_error_string()."/>
        <scope name="fetchColumnTypes" ilk="function" signature="fetchColumnTypes ( string $table_name  [, int $result_type ] )" doc="sqlite_fetch_column_types() returns an array of column data types from the specified table_name table."/>
      </scope>
      <scope name="SQLiteResult" ilk="class">
        <scope name="fetch" ilk="function" signature="fetch ([ int $result_type  [, bool $decode_binary ]] )" doc="Fetches the next row from the given result handle. If there are no more rows, returns FALSE, otherwise returns an associative array representing the row data."/>
        <scope name="fetchObject" ilk="function" signature="fetchObject ([ string $class_name  [, array $ctor_params  [, bool $decode_binary ]]] )" doc="undocumented"/>
        <scope name="fetchSingle" ilk="function" signature="fetchSingle ([ bool $decode_binary ] )" doc="sqlite_fetch_single() is identical to sqlite_fetch_array() except that it returns the value of the first column of the rowset."/>
        <scope name="fetchAll" ilk="function" signature="fetchAll ([ int $result_type  [, bool $decode_binary ]] )" doc="sqlite_fetch_all() returns an array of the entire result set from the result resource. It is similar to calling sqlite_query() (or sqlite_unbuffered_query()) and then sqlite_fetch_array() for each row in the result set."/>
        <scope name="column" ilk="function" signature="column ( mixed $index_or_name  [, bool $decode_binary ] )" doc="Fetches the value of a column named index_or_name (if it is a string), or of the ordinal column numbered index_or_name (if it is an integer) from the current row of the query result handle result."/>
        <scope name="numFields" ilk="function" signature="numFields ( void  )" doc="Returns the number of fields in the result set."/>
        <scope name="fieldName" ilk="function" signature="fieldName ( int $field_index  )" doc="Given the ordinal column number, field_index, sqlite_field_name() returns the name of that field in the result set result."/>
        <scope name="current" ilk="function" signature="current ([ int $result_type  [, bool $decode_binary ]] )" doc="sqlite_current() is identical to sqlite_fetch_array() except that it does not advance to the next row prior to returning the data; it returns the data from the current position only."/>
        <scope name="key" ilk="function" signature="key ( void  )" doc="sqlite_key() returns the current row index of the buffered result set result."/>
        <scope name="next" ilk="function" signature="next ( void  )" doc="sqlite_next() advances the result handle result to the next row."/>
        <scope name="valid" ilk="function" signature="valid ( void  )" doc="Finds whether more rows are available from the given result handle."/>
        <scope name="rewind" ilk="function" signature="rewind ( void  )" doc="sqlite_rewind() seeks back to the first row in the given result set."/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope name="prev" ilk="function" signature="prev ( void  )" doc="sqlite_prev() seeks back the  result handle to the previous row."/>
        <scope name="hasPrev" ilk="function" signature="hasPrev ( void  )" doc="Find whether there are more previous rows from the given result handle."/>
        <scope name="numRows" ilk="function" signature="numRows ( void  )" doc="Returns the number of rows in the buffered result set."/>
        <scope name="seek" ilk="function" signature="seek ( int $rownum  )" doc="sqlite_seek() seeks to the row given by the parameter rownum."/>
      </scope>
      <scope name="SQLiteUnbuffered" ilk="class">
        <scope ilk="function" name="fetch" signature="fetch()"/>
        <scope ilk="function" name="fetchObject" signature="fetchObject()"/>
        <scope ilk="function" name="fetchSingle" signature="fetchSingle()"/>
        <scope ilk="function" name="fetchAll" signature="fetchAll()"/>
        <scope ilk="function" name="column" signature="column()"/>
        <scope ilk="function" name="numFields" signature="numFields()"/>
        <scope ilk="function" name="fieldName" signature="fieldName()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
      </scope>
      <scope name="SQLiteException" ilk="class" classrefs="RuntimeException">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="getMessage" signature="getMessage()"/>
        <scope ilk="function" name="getCode" signature="getCode()"/>
        <scope ilk="function" name="getFile" signature="getFile()"/>
        <scope ilk="function" name="getLine" signature="getLine()"/>
        <scope ilk="function" name="getTrace" signature="getTrace()"/>
        <scope ilk="function" name="getPrevious" signature="getPrevious()"/>
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <variable name="message"/>
        <variable name="code"/>
        <variable name="file"/>
        <variable name="line"/>
      </scope>
      <scope name="PharException" ilk="class" classrefs="Exception">
        <scope ilk="function" name="__clone" signature="__clone()"/>
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="getMessage" signature="getMessage()"/>
        <scope ilk="function" name="getCode" signature="getCode()"/>
        <scope ilk="function" name="getFile" signature="getFile()"/>
        <scope ilk="function" name="getLine" signature="getLine()"/>
        <scope ilk="function" name="getTrace" signature="getTrace()"/>
        <scope ilk="function" name="getPrevious" signature="getPrevious()"/>
        <scope ilk="function" name="getTraceAsString" signature="getTraceAsString()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <variable name="message"/>
        <variable name="code"/>
        <variable name="file"/>
        <variable name="line"/>
      </scope>
      <scope name="Phar" ilk="class" classrefs="RecursiveDirectoryIterator">
        <scope name="__construct" signature="__construct(string fname [, int flags [, string alias]])" doc="Construct a Phar archive object proto void PharData&#10;construct string fname int flags string alias int file&#10;format Phar TAR" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="__destruct" signature="__destruct()" doc="if persistent remove from the cache" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="addEmptyDir" signature="addEmptyDir(string dirname)" doc="Adds an empty directory to the phar archive" ilk="function" src="phar_object.c" returns="string"/>
        <scope name="addFile" signature="addFile(string filename[, string localname])" doc="Adds a file to the archive using the filename or the&#10;second parameter as the name within the archive" ilk="function" src="phar_object.c" returns="string"/>
        <scope name="addFromString" signature="addFromString(string localname, string contents)" doc="Adds a file to the archive using its contents as a&#10;string" ilk="function" src="phar_object.c" returns="string"/>
        <scope name="buildFromDirectory" signature="buildFromDirectory(string base_dir[, string regex])" doc="Construct a phar archive from an existing directory&#10;recursively Optional second parameter is a regular&#10;expression for filtering directory contents" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="buildFromIterator" signature="buildFromIterator(Iterator iter[, string base_directory])" doc="Construct a phar archive from an iterator The iterator&#10;must return a series of strings that are full paths to" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="compressFiles" signature="compressFiles(int method)" doc="Compress all files within a phar or zip archive using&#10;the specified compression The parameter can be one of&#10;Phar" ilk="function" src="phar_object.c" returns="object"/>
        <scope name="decompressFiles" signature="decompressFiles()" doc="decompress every file" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="compress" signature="compress(int method[, string extension])" doc="Compress a tar or phar tar with whole-file compression&#10;The parameter can be one of Phar GZ or Phar BZ" ilk="function" src="phar_object.c" returns="object"/>
        <scope name="decompress" signature="decompress([string extension])" doc="Decompress a tar or phar tar with whole-file&#10;compression" ilk="function" src="phar_object.c" returns="object"/>
        <scope name="convertToExecutable" signature="convertToExecutable([int format[, int compression [, string file_ext]]])" doc="Convert a phar tar or phar zip archive to the phar file&#10;format The optional parameter allows the user to" ilk="function" src="phar_object.c" returns="object"/>
        <scope name="convertToData" signature="convertToData([int format[, int compression [, string file_ext]]])" doc="Convert an archive to a non-executable tar or zip The&#10;optional parameter allows the user to determine the new&#10;filename" ilk="function" src="phar_object.c" returns="object"/>
        <scope name="copy" signature="copy(string oldfile, string newfile)" doc="copy a file internal to the phar archive to another new&#10;file within the phar" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="count" signature="count()" doc="Returns the number of entries in the Phar archive" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="delete" signature="delete(string entry)" doc="Deletes a named file within the archive" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="delMetadata" signature="delMetadata()" doc="Deletes the global metadata of the phar" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="extractTo" signature="extractTo(string pathto[[, mixed files], bool overwrite])" doc="Extract one or more file from a phar archive optionally&#10;overwriting existing files" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="getAlias" signature="getAlias()" doc="Returns the alias for the Phar or NULL" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="getPath" signature="getPath()" doc="Returns the real path to the phar archive on disk" ilk="function" src="phar_object.c" returns="int"/>
        <scope ilk="function" name="getMetadata" signature="getMetadata()"/>
        <scope name="getModified" signature="getModified()" doc="Return whether phar was modified" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="getSignature" signature="getSignature()" doc="Returns a hash signature or FALSE if the archive is&#10;unsigned" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="getStub" signature="getStub()" doc="Returns the stub at the head of a phar archive as a&#10;string" ilk="function" src="phar_object.c" returns="string"/>
        <scope name="getVersion" signature="getVersion()" doc="Return version info of Phar archive" ilk="function" src="phar_object.c" returns="string"/>
        <scope ilk="function" name="hasMetadata" signature="hasMetadata()"/>
        <scope name="isBuffering" signature="isBuffering()" doc="Returns whether write operations are flushing to disk&#10;immediately" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="isCompressed" signature="isCompressed()" doc="Returns Phar GZ or PHAR BZ if the entire archive is&#10;compressed tar gz tar bz and so on or" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="isFileFormat" signature="isFileFormat(int format)" doc="Returns true if the phar archive is based on the tar&#10;zip phar file format depending on whether Phar TAR" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="isWritable" signature="isWritable()" doc="Returns true if phar readonly or phar is a PharData AND&#10;the actual file is writable" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="offsetExists" signature="offsetExists(string entry)" doc="determines whether a file exists in the phar" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="offsetGet" signature="offsetGet(string entry)" doc="get a PharFileInfo object for a specific file" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="offsetSet" signature="offsetSet(string entry, string value)" doc="set the contents of an internal file to those of an&#10;external file" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="offsetUnset" signature="offsetUnset(string entry)" doc="remove a file from a phar" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="setAlias" signature="setAlias(string alias)" doc="Sets the alias for a Phar archive The default value is&#10;the full path to the archive" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="setDefaultStub" signature="setDefaultStub([string index[, string webindex]])" doc="In a pure phar archive sets a stub that can be used to&#10;run the archive regardless of whether the" ilk="function" src="phar_object.c" returns="bool"/>
        <scope ilk="function" name="setMetadata" signature="setMetadata()"/>
        <scope name="setSignatureAlgorithm" signature="setSignatureAlgorithm(int sigtype[, string privatekey])" doc="Sets the signature algorithm for a phar and applies it&#10;The signature algorithm must be one of Phar MD Phar" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="setStub" signature="setStub(string" doc="Change the stub in a phar phar tar or phar zip archive&#10;to something other than the default The stub" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="startBuffering" signature="startBuffering()" doc="Do not flush a writeable phar save its contents until&#10;explicitly requested" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="stopBuffering" signature="stopBuffering()" doc="Saves the contents of a modified archive to disk" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="apiVersion" signature="apiVersion()" doc="Returns the api version" ilk="function" src="phar_object.c" returns="string"/>
        <scope name="canCompress" signature="canCompress([int method])" doc="Returns whether phar extension supports compression&#10;using zlib bzip" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="canWrite" signature="canWrite()" doc="Returns whether phar extension supports writing and&#10;creating phars" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="createDefaultStub" signature="createDefaultStub([string indexfile[, string webindexfile]])" doc="Return a stub that can be used to run a phar-based&#10;archive without the phar extension indexfile is the CLI" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="getSupportedCompression" signature="getSupportedCompression()" doc="Return array of supported comparession algorithms" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="getSupportedSignatures" signature="getSupportedSignatures()" doc="Return array of supported signature types" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="interceptFileFuncs" signature="interceptFileFuncs()" doc="instructs phar to intercept fopen file get contents&#10;opendir and all of the stat-related functions and&#10;return stat on files" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="isValidPharFilename" signature="isValidPharFilename(string filename[, bool executable = true])" doc="Returns whether the given filename is a valid phar&#10;filename" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="loadPhar" signature="loadPhar(string filename [, string alias])" doc="Loads any phar archive with an alias" ilk="function" src="phar_object.c" returns="mixed"/>
        <scope name="mapPhar" signature="mapPhar([string alias, [int dataoffset]])" doc="Reads the currently executed file a phar and registers&#10;its manifest" ilk="function" src="phar_object.c" returns="mixed"/>
        <scope name="running" signature="running([bool retphar = true])" doc="return the name of the currently running phar archive&#10;If the optional parameter is set to true return the&#10;phar" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="mount" signature="mount(string pharpath, string externalfile)" doc="mount an external file or path to a location within the&#10;phar This maps an external file or directory to" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="mungServer" signature="mungServer(array munglist)" doc="Defines a list of up to SERVER variables that should be&#10;modified for execution to mask the presence of the" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="unlinkArchive" signature="unlinkArchive(string archive)" doc="Completely remove a phar archive from memory and disk" ilk="function" src="phar_object.c" returns="array"/>
        <scope name="webPhar" signature="webPhar([string alias, [string index, [string f404, [array mimetypes, [callback rewrites]]]]])" doc="mapPhar for web-based phars Reads the currently&#10;executed file a phar and registers its manifest When&#10;executed in the CLI" ilk="function" src="phar_object.c" returns="void"/>
        <scope ilk="function" name="hasChildren" signature="hasChildren()"/>
        <scope ilk="function" name="getChildren" signature="getChildren()"/>
        <scope ilk="function" name="getSubPath" signature="getSubPath()"/>
        <scope ilk="function" name="getSubPathname" signature="getSubPathname()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="getFlags" signature="getFlags()"/>
        <scope ilk="function" name="setFlags" signature="setFlags()"/>
        <scope ilk="function" name="getFilename" signature="getFilename()"/>
        <scope ilk="function" name="getBasename" signature="getBasename()"/>
        <scope ilk="function" name="isDot" signature="isDot()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="seek" signature="seek()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <scope ilk="function" name="getPathname" signature="getPathname()"/>
        <scope ilk="function" name="getPerms" signature="getPerms()"/>
        <scope ilk="function" name="getInode" signature="getInode()"/>
        <scope ilk="function" name="getSize" signature="getSize()"/>
        <scope ilk="function" name="getOwner" signature="getOwner()"/>
        <scope ilk="function" name="getGroup" signature="getGroup()"/>
        <scope ilk="function" name="getATime" signature="getATime()"/>
        <scope ilk="function" name="getMTime" signature="getMTime()"/>
        <scope ilk="function" name="getCTime" signature="getCTime()"/>
        <scope ilk="function" name="getType" signature="getType()"/>
        <scope ilk="function" name="isReadable" signature="isReadable()"/>
        <scope ilk="function" name="isExecutable" signature="isExecutable()"/>
        <scope ilk="function" name="isFile" signature="isFile()"/>
        <scope ilk="function" name="isDir" signature="isDir()"/>
        <scope ilk="function" name="isLink" signature="isLink()"/>
        <scope ilk="function" name="getLinkTarget" signature="getLinkTarget()"/>
        <scope ilk="function" name="getRealPath" signature="getRealPath()"/>
        <scope ilk="function" name="getFileInfo" signature="getFileInfo()"/>
        <scope ilk="function" name="getPathInfo" signature="getPathInfo()"/>
        <scope ilk="function" name="openFile" signature="openFile()"/>
        <scope ilk="function" name="setFileClass" signature="setFileClass()"/>
        <scope ilk="function" name="setInfoClass" signature="setInfoClass()"/>
        <variable name="CURRENT_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_FILEINFO" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_SELF" citdl="integer" ilk="constant"/>
        <variable name="KEY_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_FILENAME" citdl="integer" ilk="constant"/>
        <variable name="NEW_CURRENT_AND_KEY" citdl="integer" ilk="constant"/>
        <variable name="SKIP_DOTS" citdl="integer" ilk="constant"/>
        <variable name="UNIX_PATHS" citdl="integer" ilk="constant"/>
        <variable name="BZ2" citdl="integer" ilk="constant"/>
        <variable name="GZ" citdl="integer" ilk="constant"/>
        <variable name="NONE" citdl="integer" ilk="constant"/>
        <variable name="PHAR" citdl="integer" ilk="constant"/>
        <variable name="TAR" citdl="integer" ilk="constant"/>
        <variable name="ZIP" citdl="integer" ilk="constant"/>
        <variable name="COMPRESSED" citdl="integer" ilk="constant"/>
        <variable name="PHP" citdl="integer" ilk="constant"/>
        <variable name="PHPS" citdl="integer" ilk="constant"/>
        <variable name="MD5" citdl="integer" ilk="constant"/>
        <variable name="OPENSSL" citdl="integer" ilk="constant"/>
        <variable name="SHA1" citdl="integer" ilk="constant"/>
        <variable name="SHA256" citdl="integer" ilk="constant"/>
        <variable name="SHA512" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="PharData" ilk="class" classrefs="RecursiveDirectoryIterator">
        <scope ilk="function" name="__construct" signature="__construct()"/>
        <scope ilk="function" name="__destruct" signature="__destruct()"/>
        <scope ilk="function" name="addEmptyDir" signature="addEmptyDir()"/>
        <scope ilk="function" name="addFile" signature="addFile()"/>
        <scope ilk="function" name="addFromString" signature="addFromString()"/>
        <scope ilk="function" name="buildFromDirectory" signature="buildFromDirectory()"/>
        <scope ilk="function" name="buildFromIterator" signature="buildFromIterator()"/>
        <scope ilk="function" name="compressFiles" signature="compressFiles()"/>
        <scope ilk="function" name="decompressFiles" signature="decompressFiles()"/>
        <scope ilk="function" name="compress" signature="compress()"/>
        <scope ilk="function" name="decompress" signature="decompress()"/>
        <scope ilk="function" name="convertToExecutable" signature="convertToExecutable()"/>
        <scope ilk="function" name="convertToData" signature="convertToData()"/>
        <scope ilk="function" name="copy" signature="copy()"/>
        <scope ilk="function" name="count" signature="count()"/>
        <scope ilk="function" name="delete" signature="delete()"/>
        <scope ilk="function" name="delMetadata" signature="delMetadata()"/>
        <scope ilk="function" name="extractTo" signature="extractTo()"/>
        <scope ilk="function" name="getAlias" signature="getAlias()"/>
        <scope ilk="function" name="getPath" signature="getPath()"/>
        <scope ilk="function" name="getMetadata" signature="getMetadata()"/>
        <scope ilk="function" name="getModified" signature="getModified()"/>
        <scope ilk="function" name="getSignature" signature="getSignature()"/>
        <scope ilk="function" name="getStub" signature="getStub()"/>
        <scope ilk="function" name="getVersion" signature="getVersion()"/>
        <scope ilk="function" name="hasMetadata" signature="hasMetadata()"/>
        <scope ilk="function" name="isBuffering" signature="isBuffering()"/>
        <scope ilk="function" name="isCompressed" signature="isCompressed()"/>
        <scope ilk="function" name="isFileFormat" signature="isFileFormat()"/>
        <scope ilk="function" name="isWritable" signature="isWritable()"/>
        <scope ilk="function" name="offsetExists" signature="offsetExists()"/>
        <scope ilk="function" name="offsetGet" signature="offsetGet()"/>
        <scope ilk="function" name="offsetSet" signature="offsetSet()"/>
        <scope ilk="function" name="offsetUnset" signature="offsetUnset()"/>
        <scope ilk="function" name="setAlias" signature="setAlias()"/>
        <scope ilk="function" name="setDefaultStub" signature="setDefaultStub()"/>
        <scope ilk="function" name="setMetadata" signature="setMetadata()"/>
        <scope ilk="function" name="setSignatureAlgorithm" signature="setSignatureAlgorithm()"/>
        <scope ilk="function" name="setStub" signature="setStub()"/>
        <scope ilk="function" name="startBuffering" signature="startBuffering()"/>
        <scope ilk="function" name="stopBuffering" signature="stopBuffering()"/>
        <scope ilk="function" name="apiVersion" signature="apiVersion()"/>
        <scope ilk="function" name="canCompress" signature="canCompress()"/>
        <scope ilk="function" name="canWrite" signature="canWrite()"/>
        <scope ilk="function" name="createDefaultStub" signature="createDefaultStub()"/>
        <scope ilk="function" name="getSupportedCompression" signature="getSupportedCompression()"/>
        <scope ilk="function" name="getSupportedSignatures" signature="getSupportedSignatures()"/>
        <scope ilk="function" name="interceptFileFuncs" signature="interceptFileFuncs()"/>
        <scope ilk="function" name="isValidPharFilename" signature="isValidPharFilename()"/>
        <scope ilk="function" name="loadPhar" signature="loadPhar()"/>
        <scope ilk="function" name="mapPhar" signature="mapPhar()"/>
        <scope ilk="function" name="running" signature="running()"/>
        <scope ilk="function" name="mount" signature="mount()"/>
        <scope ilk="function" name="mungServer" signature="mungServer()"/>
        <scope ilk="function" name="unlinkArchive" signature="unlinkArchive()"/>
        <scope ilk="function" name="webPhar" signature="webPhar()"/>
        <scope ilk="function" name="hasChildren" signature="hasChildren()"/>
        <scope ilk="function" name="getChildren" signature="getChildren()"/>
        <scope ilk="function" name="getSubPath" signature="getSubPath()"/>
        <scope ilk="function" name="getSubPathname" signature="getSubPathname()"/>
        <scope ilk="function" name="rewind" signature="rewind()"/>
        <scope ilk="function" name="next" signature="next()"/>
        <scope ilk="function" name="key" signature="key()"/>
        <scope ilk="function" name="current" signature="current()"/>
        <scope ilk="function" name="getFlags" signature="getFlags()"/>
        <scope ilk="function" name="setFlags" signature="setFlags()"/>
        <scope ilk="function" name="getFilename" signature="getFilename()"/>
        <scope ilk="function" name="getBasename" signature="getBasename()"/>
        <scope ilk="function" name="isDot" signature="isDot()"/>
        <scope ilk="function" name="valid" signature="valid()"/>
        <scope ilk="function" name="seek" signature="seek()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
        <scope ilk="function" name="getPathname" signature="getPathname()"/>
        <scope ilk="function" name="getPerms" signature="getPerms()"/>
        <scope ilk="function" name="getInode" signature="getInode()"/>
        <scope ilk="function" name="getSize" signature="getSize()"/>
        <scope ilk="function" name="getOwner" signature="getOwner()"/>
        <scope ilk="function" name="getGroup" signature="getGroup()"/>
        <scope ilk="function" name="getATime" signature="getATime()"/>
        <scope ilk="function" name="getMTime" signature="getMTime()"/>
        <scope ilk="function" name="getCTime" signature="getCTime()"/>
        <scope ilk="function" name="getType" signature="getType()"/>
        <scope ilk="function" name="isReadable" signature="isReadable()"/>
        <scope ilk="function" name="isExecutable" signature="isExecutable()"/>
        <scope ilk="function" name="isFile" signature="isFile()"/>
        <scope ilk="function" name="isDir" signature="isDir()"/>
        <scope ilk="function" name="isLink" signature="isLink()"/>
        <scope ilk="function" name="getLinkTarget" signature="getLinkTarget()"/>
        <scope ilk="function" name="getRealPath" signature="getRealPath()"/>
        <scope ilk="function" name="getFileInfo" signature="getFileInfo()"/>
        <scope ilk="function" name="getPathInfo" signature="getPathInfo()"/>
        <scope ilk="function" name="openFile" signature="openFile()"/>
        <scope ilk="function" name="setFileClass" signature="setFileClass()"/>
        <scope ilk="function" name="setInfoClass" signature="setInfoClass()"/>
        <variable name="CURRENT_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_FILEINFO" citdl="integer" ilk="constant"/>
        <variable name="CURRENT_AS_SELF" citdl="integer" ilk="constant"/>
        <variable name="KEY_MODE_MASK" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_PATHNAME" citdl="integer" ilk="constant"/>
        <variable name="KEY_AS_FILENAME" citdl="integer" ilk="constant"/>
        <variable name="NEW_CURRENT_AND_KEY" citdl="integer" ilk="constant"/>
        <variable name="SKIP_DOTS" citdl="integer" ilk="constant"/>
        <variable name="UNIX_PATHS" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="PharFileInfo" ilk="class" classrefs="SplFileInfo">
        <scope name="__construct" signature="__construct(string entry)" doc="Construct a Phar entry object" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="__destruct" signature="__destruct()" doc="clean up directory-based entry objects" ilk="function" src="phar_object.c" returns="void"/>
        <scope name="chmod" signature="chmod()" doc="set the file permissions for the Phar This only allows&#10;setting execution bit read write" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="compress" signature="compress(int compression_type)" doc="Instructs the Phar class to compress the current file&#10;using zlib or bzip compression" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="decompress" signature="decompress()" doc="Instructs the Phar class to decompress the current file" ilk="function" src="phar_object.c" returns="int"/>
        <scope ilk="function" name="delMetadata" signature="delMetadata()"/>
        <scope name="getCompressedSize" signature="getCompressedSize()" doc="Returns the compressed size" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="getCRC32" signature="getCRC32()" doc="Returns CRC code or throws an exception if not CRC&#10;checked" ilk="function" src="phar_object.c" returns="int"/>
        <scope name="getContent" signature="getContent()" doc="return the complete file contents of the entry like&#10;file get contents" ilk="function" src="phar_object.c" returns="string"/>
        <scope ilk="function" name="getMetadata" signature="getMetadata()"/>
        <scope name="getPharFlags" signature="getPharFlags()" doc="Returns the Phar file entry flags" ilk="function" src="phar_object.c" returns="int"/>
        <scope ilk="function" name="hasMetadata" signature="hasMetadata()"/>
        <scope name="isCompressed" signature="isCompressed([int compression_type])" doc="Returns whether the entry is compressed and whether it&#10;is compressed with Phar GZ or Phar BZ if specified" ilk="function" src="phar_object.c" returns="bool"/>
        <scope name="isCRCChecked" signature="isCRCChecked()" doc="Returns whether file entry is CRC checked" ilk="function" src="phar_object.c" returns="int"/>
        <scope ilk="function" name="setMetadata" signature="setMetadata()"/>
        <scope ilk="function" name="getPath" signature="getPath()"/>
        <scope ilk="function" name="getFilename" signature="getFilename()"/>
        <scope ilk="function" name="getBasename" signature="getBasename()"/>
        <scope ilk="function" name="getPathname" signature="getPathname()"/>
        <scope ilk="function" name="getPerms" signature="getPerms()"/>
        <scope ilk="function" name="getInode" signature="getInode()"/>
        <scope ilk="function" name="getSize" signature="getSize()"/>
        <scope ilk="function" name="getOwner" signature="getOwner()"/>
        <scope ilk="function" name="getGroup" signature="getGroup()"/>
        <scope ilk="function" name="getATime" signature="getATime()"/>
        <scope ilk="function" name="getMTime" signature="getMTime()"/>
        <scope ilk="function" name="getCTime" signature="getCTime()"/>
        <scope ilk="function" name="getType" signature="getType()"/>
        <scope ilk="function" name="isWritable" signature="isWritable()"/>
        <scope ilk="function" name="isReadable" signature="isReadable()"/>
        <scope ilk="function" name="isExecutable" signature="isExecutable()"/>
        <scope ilk="function" name="isFile" signature="isFile()"/>
        <scope ilk="function" name="isDir" signature="isDir()"/>
        <scope ilk="function" name="isLink" signature="isLink()"/>
        <scope ilk="function" name="getLinkTarget" signature="getLinkTarget()"/>
        <scope ilk="function" name="getRealPath" signature="getRealPath()"/>
        <scope ilk="function" name="getFileInfo" signature="getFileInfo()"/>
        <scope ilk="function" name="getPathInfo" signature="getPathInfo()"/>
        <scope ilk="function" name="openFile" signature="openFile()"/>
        <scope ilk="function" name="setFileClass" signature="setFileClass()"/>
        <scope ilk="function" name="setInfoClass" signature="setInfoClass()"/>
        <scope ilk="function" name="__toString" signature="__toString()"/>
      </scope>
      <scope name="XMLReader" ilk="class">
        <scope name="close" signature="close()" doc="Closes xmlreader - current frees resources until&#10;xmlTextReaderClose is fixed in libxml" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="getAttribute" signature="getAttribute(string name)" doc="Get value of an attribute from current element" ilk="function" src="php_xmlreader.c" returns="string"/>
        <scope name="getAttributeNo" signature="getAttributeNo(int index)" doc="Get value of an attribute at index from current element" ilk="function" src="php_xmlreader.c" returns="string"/>
        <scope name="getAttributeNs" signature="getAttributeNs(string name, string namespaceURI)" doc="Get value of a attribute via name and namespace from&#10;current element" ilk="function" src="php_xmlreader.c" returns="string"/>
        <scope name="getParserProperty" signature="getParserProperty(int property)" doc="Indicates whether given property one of the parser&#10;option constants is set or not on parser" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="isValid" signature="isValid()" doc="Returns boolean indicating if parsed document is valid&#10;or not Must set XMLREADER LOADDTD or XMLREADER VALIDATE&#10;parser option prior" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="lookupNamespace" signature="lookupNamespace(string prefix)" doc="Return namespaceURI for associated prefix on current&#10;node" ilk="function" src="php_xmlreader.c" returns="string"/>
        <scope name="moveToAttributeNo" signature="moveToAttributeNo(int index)" doc="Positions reader at attribute at spcecified index&#10;Returns TRUE on success and FALSE on failure" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="moveToAttribute" signature="moveToAttribute(string name)" doc="Positions reader at specified attribute - Returns TRUE&#10;on success and FALSE on failure" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="moveToAttributeNs" signature="moveToAttributeNs(string name, string namespaceURI)" doc="Positions reader at attribute spcified by name and&#10;namespaceURI Returns TRUE on success and FALSE on&#10;failure" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="moveToElement" signature="moveToElement()" doc="Moves the position of the current instance to the node&#10;that contains the current Attribute node" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="moveToFirstAttribute" signature="moveToFirstAttribute()" doc="Moves the position of the current instance to the first&#10;attribute associated with the current node" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="moveToNextAttribute" signature="moveToNextAttribute()" doc="Moves the position of the current instance to the next&#10;attribute associated with the current node" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="open" signature="open(string URI [, string encoding [, int options]])" doc="Sets the URI that the the XMLReader will parse" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="read" signature="read()" doc="Moves the position of the current instance to the next&#10;node in the stream" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="next" signature="next([string localname])" doc="Moves the position of the current instance to the next&#10;node in the stream" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="readInnerXml" signature="readInnerXml()" doc="Reads the contents of the current node including child&#10;nodes and markup" ilk="function" src="php_xmlreader.c" returns="string"/>
        <scope name="readOuterXml" signature="readOuterXml()" doc="Reads the contents of the current node including child&#10;nodes and markup" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="readString" signature="readString()" doc="Reads the contents of an element or a text node as a&#10;string" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="setSchema" signature="setSchema(string filename)" doc="Use W C XSD schema to validate the document as it is&#10;processed Activation is only possible before the first" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="setParserProperty" signature="setParserProperty(int property, boolean value)" doc="Sets parser property one of the parser option constants&#10;Properties must be set after open or XML and before the" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="setRelaxNGSchema" signature="setRelaxNGSchema(string filename)" doc="Sets the string that the the XMLReader will parse" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="setRelaxNGSchemaSource" signature="setRelaxNGSchemaSource(string source)" doc="Sets the string that the the XMLReader will parse" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="XML" signature="XML(string source [, string encoding [, int options]])" doc="Sets the string that the the XMLReader will parse" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <scope name="expand" signature="expand()" doc="Moves the position of the current instance to the next&#10;node in the stream" ilk="function" src="php_xmlreader.c" returns="boolean"/>
        <variable name="NONE" citdl="integer" ilk="constant"/>
        <variable name="ELEMENT" citdl="integer" ilk="constant"/>
        <variable name="ATTRIBUTE" citdl="integer" ilk="constant"/>
        <variable name="TEXT" citdl="integer" ilk="constant"/>
        <variable name="CDATA" citdl="integer" ilk="constant"/>
        <variable name="ENTITY_REF" citdl="integer" ilk="constant"/>
        <variable name="ENTITY" citdl="integer" ilk="constant"/>
        <variable name="PI" citdl="integer" ilk="constant"/>
        <variable name="COMMENT" citdl="integer" ilk="constant"/>
        <variable name="DOC" citdl="integer" ilk="constant"/>
        <variable name="DOC_TYPE" citdl="integer" ilk="constant"/>
        <variable name="DOC_FRAGMENT" citdl="integer" ilk="constant"/>
        <variable name="NOTATION" citdl="integer" ilk="constant"/>
        <variable name="WHITESPACE" citdl="integer" ilk="constant"/>
        <variable name="SIGNIFICANT_WHITESPACE" citdl="integer" ilk="constant"/>
        <variable name="END_ELEMENT" citdl="integer" ilk="constant"/>
        <variable name="END_ENTITY" citdl="integer" ilk="constant"/>
        <variable name="XML_DECLARATION" citdl="integer" ilk="constant"/>
        <variable name="LOADDTD" citdl="integer" ilk="constant"/>
        <variable name="DEFAULTATTRS" citdl="integer" ilk="constant"/>
        <variable name="VALIDATE" citdl="integer" ilk="constant"/>
        <variable name="SUBST_ENTITIES" citdl="integer" ilk="constant"/>
      </scope>
      <scope name="XMLWriter" ilk="class">
        <scope ilk="function" name="openUri" signature="openUri()"/>
        <scope name="openMemory" ilk="function" signature="openMemory ( void  )" doc="Creates a new XMLWriter using memory for string output."/>
        <scope name="setIndent" ilk="function" signature="setIndent ( bool $indent  )" doc="Toggles indentation on or off."/>
        <scope name="setIndentString" ilk="function" signature="setIndentString ( string $indentString  )" doc="Sets the string which will be used to indent each element/attribute of the resulting xml."/>
        <scope name="startComment" ilk="function" signature="startComment ( void  )" doc="Starts a comment."/>
        <scope name="endComment" ilk="function" signature="endComment ( void  )" doc="Ends the current comment."/>
        <scope name="startAttribute" ilk="function" signature="startAttribute ( string $name  )" doc="Starts an attribute."/>
        <scope name="endAttribute" ilk="function" signature="endAttribute ( void  )" doc="Ends the current attribute."/>
        <scope name="writeAttribute" ilk="function" signature="writeAttribute ( string $name  , string $value  )" doc="Writes a full attribute."/>
        <scope ilk="function" name="startAttributeNs" signature="startAttributeNs()"/>
        <scope ilk="function" name="writeAttributeNs" signature="writeAttributeNs()"/>
        <scope name="startElement" ilk="function" signature="startElement ( string $name  )" doc="Starts an element."/>
        <scope name="endElement" ilk="function" signature="endElement ( void  )" doc="Ends the current element."/>
        <scope name="fullEndElement" ilk="function" signature="fullEndElement ( void  )" doc="End the current xml element. Writes an end tag even if the element is empty."/>
        <scope ilk="function" name="startElementNs" signature="startElementNs()"/>
        <scope name="writeElement" ilk="function" signature="writeElement ( string $name  [, string $content ] )" doc="Writes a full element tag."/>
        <scope ilk="function" name="writeElementNs" signature="writeElementNs()"/>
        <scope ilk="function" name="startPi" signature="startPi()"/>
        <scope ilk="function" name="endPi" signature="endPi()"/>
        <scope ilk="function" name="writePi" signature="writePi()"/>
        <scope ilk="function" name="startCdata" signature="startCdata()"/>
        <scope ilk="function" name="endCdata" signature="endCdata()"/>
        <scope ilk="function" name="writeCdata" signature="writeCdata()"/>
        <scope name="text" ilk="function" signature="text ( string $content  )" doc="Writes a text."/>
        <scope name="writeRaw" ilk="function" signature="writeRaw ( string $content  )" doc="Writes a raw xml text."/>
        <scope name="startDocument" ilk="function" signature="startDocument ([ string $version  [, string $encoding  [, string $standalone ]]] )" doc="Starts a document."/>
        <scope name="endDocument" ilk="function" signature="endDocument ( void  )" doc="Ends the current document."/>
        <scope name="writeComment" ilk="function" signature="writeComment ( string $content  )" doc="Writes a full comment."/>
        <scope ilk="function" name="startDtd" signature="startDtd()"/>
        <scope ilk="function" name="endDtd" signature="endDtd()"/>
        <scope ilk="function" name="writeDtd" signature="writeDtd()"/>
        <scope ilk="function" name="startDtdElement" signature="startDtdElement()"/>
        <scope ilk="function" name="endDtdElement" signature="endDtdElement()"/>
        <scope ilk="function" name="writeDtdElement" signature="writeDtdElement()"/>
        <scope ilk="function" name="startDtdAttlist" signature="startDtdAttlist()"/>
        <scope ilk="function" name="endDtdAttlist" signature="endDtdAttlist()"/>
        <scope ilk="function" name="writeDtdAttlist" signature="writeDtdAttlist()"/>
        <scope ilk="function" name="startDtdEntity" signature="startDtdEntity()"/>
        <scope ilk="function" name="endDtdEntity" signature="endDtdEntity()"/>
        <scope ilk="function" name="writeDtdEntity" signature="writeDtdEntity()"/>
        <scope name="outputMemory" ilk="function" signature="outputMemory ([ bool $flush ] )" doc="Returns the current buffer."/>
        <scope name="flush" ilk="function" signature="flush ([ bool $empty ] )" doc="Flushes the current buffer."/>
      </scope>
      <scope classrefs="CachingIterator" ilk="class" interfacerefs="RecursiveIterator" line="3" lineend="51" name="CachingRecursiveIterator">
        <scope attributes="__ctor__" ilk="function" line="8" lineend="11" name="__construct" signature="__construct()"/>
        <scope ilk="function" line="13" lineend="18" name="rewind" signature="rewind()"/>
        <scope ilk="function" line="20" lineend="40" name="next" signature="next()"/>
        <scope ilk="function" line="42" lineend="45" name="hasChildren" returns="this.hasChildren" signature="hasChildren()"/>
        <scope ilk="function" line="47" lineend="50" name="getChildren" returns="this.getChildren" signature="getChildren()"/>
        <variable attributes="protected" citdl="boolean" line="5" name="hasChildren"/>
        <variable attributes="protected" citdl="CachingRecursiveIterator" line="6" name="getChildren"/>
      </scope>
      <scope name="chown" signature="chown( filename, user )" ilk="function"/>
      <scope name="isset" signature="bool isset ( mixed var [, mixed var [, ...]] )" doc="Determine whether a variable is set" ilk="function"/>
      <scope name="empty" signature="bool empty ( mixed $var )" doc="Determine whether a variable is considered to be empty." ilk="function"/>
      <scope name="unset" signature="void unset ( mixed $var [, mixed $var [, mixed $...]] )" doc="unset() destroys the specified variables." ilk="function"/>
      <scope name="lchown" signature="lchown( filename, user )" ilk="function"/>
      <scope name="dir" signature="dir(string directory[, resource context])" returns="object" doc="Directory class with properties handle and class and&#10;methods read rewind and close" ilk="function" src="dir.c"/>
      <scope name="include" signature="include(file_path)" doc="includes and evaluates the specified file, produces a warning on error." ilk="function"/>
      <scope name="require" signature="require(file_path)" doc="includes and evaluates the specified file, produces a Fatal Error on error." ilk="function"/>
      <scope name="include_once" signature="include_once(file_path)" doc="includes and evaluates the specified file if it hasn't been included before, produces a warning on error." ilk="function"/>
      <scope name="require_once" signature="require_once(file_path)" doc="includes and evaluates the specified file if it hasn't been included before, produces a Fatal Error on error." ilk="function"/>
      <scope name="declare" signature="declare(directive)" doc="set execution directives for a block of code." ilk="function"/>
      <scope name="switch" signature="switch(var)" doc="evaluate a series of conditions on the same expression." ilk="function"/>
      <scope name="array" signature="array(&lt;list&gt;)" doc="create a PHP array." ilk="function"/>
      <scope name="xdebug_break" signature="xdebug_break()" doc="force an xdebug breakpoint here." ilk="function"/>
      <scope name="zend_version" signature="zend_version(void)" returns="string" doc="Get the version of the Zend Engine" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="gc_collect_cycles" signature="gc_collect_cycles(void)" returns="int" doc="Forces collection of any existing garbage cycles&#10;Returns number of freed zvals" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="gc_enabled" signature="gc_enabled(void)" returns="void" doc="Returns status of the circular reference collector" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="gc_enable" signature="gc_enable(void)" returns="void" doc="Activates the circular reference collector" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="gc_disable" signature="gc_disable(void)" returns="void" doc="Deactivates the circular reference collector" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="func_num_args" signature="func_num_args(void)" returns="int" doc="Get the number of arguments that were passed to the&#10;function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="func_get_arg" signature="func_get_arg(int arg_num)" returns="mixed" doc="Get the arg num'th argument that was passed to the&#10;function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="func_get_args" signature="func_get_args()" returns="array" doc="Get an array of the arguments that were passed to the&#10;function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strlen" signature="strlen(string str)" returns="int" doc="Get string length" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strcmp" signature="strcmp(string str1, string str2)" returns="int" doc="Binary safe string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strncmp" signature="strncmp(string str1, string str2, int len)" returns="int" doc="Binary safe string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strcasecmp" signature="strcasecmp(string str1, string str2)" returns="int" doc="Binary safe case-insensitive string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strncasecmp" signature="strncasecmp(string str1, string str2, int len)" returns="int" doc="Binary safe string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="each" signature="each(array arr)" returns="array" doc="Return the currently pointed key value pair in the&#10;passed array and advance the pointer to the next&#10;element" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="error_reporting" signature="error_reporting([int new_error_level])" returns="int" doc="Return the current error reporting level and if an&#10;argument was passed - change to the new level" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="define" signature="define(string constant_name, mixed value, boolean case_insensitive=false)" returns="bool" doc="Define a new constant" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="defined" signature="defined(string constant_name)" returns="bool" doc="Check whether a constant exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_class" signature="get_class([object object])" returns="string" doc="Retrieves the class name" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_called_class" signature="get_called_class()" returns="string" doc="Retrieves the Late Static Binding class name" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_parent_class" signature="get_parent_class([mixed object])" returns="string" doc="Retrieves the parent class name for object or class or&#10;current scope" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="is_subclass_of" signature="is_subclass_of(object object, string class_name)" returns="bool" doc="Returns true if the object has this class as one of its&#10;parents" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="is_a" signature="is_a(object object, string class_name)" returns="bool" doc="Returns true if the object is of this class or has this&#10;class as one of its parents" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_class_vars" signature="get_class_vars(string class_name)" returns="array" doc="Returns an array of default properties of the class" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_object_vars" signature="get_object_vars(object obj)" returns="array" doc="Returns an array of object properties" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_class_methods" signature="get_class_methods(mixed class)" returns="array" doc="Returns an array of method names for class or class&#10;instance" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="method_exists" signature="method_exists(object object, string method)" returns="bool" doc="Checks if the class method exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="property_exists" signature="property_exists(mixed object_or_class, string property_name)" returns="bool" doc="Checks if the object or class has a property" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="class_exists" signature="class_exists(string classname [, bool autoload])" returns="bool" doc="Checks if the class exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="interface_exists" signature="interface_exists(string classname [, bool autoload])" returns="bool" doc="Checks if the class exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="function_exists" signature="function_exists(string function_name)" returns="bool" doc="Checks if the function exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="class_alias" signature="class_alias(string user_class_name , string alias_name [, bool autoload])" returns="bool" doc="Creates an alias for user defined class" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="leak" signature="leak(int num_bytes=3)" returns="void" doc="Cause an intentional memory leak for testing debugging&#10;purposes" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_included_files" signature="get_included_files(void)" returns="array" doc="Returns an array with the file names that were include&#10;once 'd" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="trigger_error" signature="trigger_error(string messsage [, int error_type])" returns="void" doc="Generates a user-level error warning notice message" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="set_error_handler" signature="set_error_handler(string error_handler [, int error_types])" returns="string" doc="Sets a user-defined error handler function Returns the&#10;previously defined error handler or false on error" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="restore_error_handler" signature="restore_error_handler(void)" returns="void" doc="Restores the previously defined error handler function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="set_exception_handler" signature="set_exception_handler(callable exception_handler)" returns="string" doc="Sets a user-defined exception handler function Returns&#10;the previously defined exception handler or false on&#10;error" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="restore_exception_handler" signature="restore_exception_handler(void)" returns="void" doc="Restores the previously defined exception handler&#10;function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_declared_classes" signature="get_declared_classes()" returns="array" doc="Returns an array of all declared classes" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_declared_interfaces" signature="get_declared_interfaces()" returns="array" doc="Returns an array of all declared interfaces" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_defined_functions" signature="get_defined_functions(void)" returns="array" doc="Returns an array of all defined functions" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_defined_vars" signature="get_defined_vars(void)" returns="array" doc="Returns an associative array of names and values of all&#10;currently defined variable names variables in the&#10;current scope" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="create_function" signature="create_function(string args, string code)" returns="string" doc="Creates an anonymous function and returns its name&#10;funny eh" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_resource_type" signature="get_resource_type(resource res)" returns="string" doc="Get the resource type name for a given resource" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_loaded_extensions" signature="get_loaded_extensions([bool zend_extensions])" returns="array" doc="U Return an array containing names of loaded extensions" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_defined_constants" signature="get_defined_constants([bool categorize])" returns="array" doc="Return an array containing the names and values of all&#10;defined constants" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="debug_print_backtrace" signature="debug_print_backtrace(void)" returns="void" doc="" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="debug_backtrace" signature="debug_backtrace([bool provide_object])" returns="array" doc="Return backtrace as array" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="extension_loaded" signature="extension_loaded(string extension_name)" returns="bool" doc="Returns true if the named extension is loaded" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_extension_funcs" signature="get_extension_funcs(string extension_name)" returns="array" doc="Returns an array with the names of functions belonging&#10;to the named extension" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="display_disabled_function" signature="display_disabled_function(void)" returns="void" doc="Dummy function which displays an error when a disabled&#10;function is called" ilk="function" src="zend_API.c"/>
      <scope name="msgfmt_format" signature="msgfmt_format( MessageFormatter $nf, array $args )" returns="mixed" doc="Format a message" ilk="function" src="msgformat_format.c"/>
      <scope name="msgfmt_format_message" signature="msgfmt_format_message( string $locale, string $pattern, array $args )" returns="mixed" doc="Format a message" ilk="function" src="msgformat_format.c"/>
      <scope name="msgfmt_create" signature="msgfmt_create( string $locale, string $pattern )" returns="MessageFormatter" doc="Create formatter" ilk="function" src="msgformat.c"/>
      <scope name="msgfmt_get_error_code" signature="msgfmt_get_error_code( MessageFormatter $nf )" returns="int" doc="Get formatter's last error code" ilk="function" src="msgformat.c"/>
      <scope name="msgfmt_get_error_message" signature="msgfmt_get_error_message( MessageFormatter $coll )" returns="string" doc="Get text description for formatter's last error code" ilk="function" src="msgformat.c"/>
      <scope name="msgfmt_parse" signature="msgfmt_parse( MessageFormatter $nf, string $source )" returns="array" doc="Parse a message" ilk="function" src="msgformat_parse.c"/>
      <scope name="numfmt_parse_message" signature="numfmt_parse_message( string $locale, string $pattern, string $source )" returns="array" doc="Parse a message" ilk="function" src="msgformat_parse.c"/>
      <scope name="msgfmt_get_pattern" signature="msgfmt_get_pattern( MessageFormatter $mf )" returns="string" doc="Get formatter pattern" ilk="function" src="msgformat_attr.c"/>
      <scope name="msgfmt_set_pattern" signature="msgfmt_set_pattern( MessageFormatter $mf, string $pattern )" returns="bool" doc="Set formatter pattern" ilk="function" src="msgformat_attr.c"/>
      <scope name="msgfmt_get_locale" signature="msgfmt_get_locale(MessageFormatter $mf)" returns="string" doc="Get formatter locale" ilk="function" src="msgformat_attr.c"/>
      <scope name="datefmt_parse" signature="datefmt_parse( IntlDateFormatter $fmt, string $text_to_parse [, int $parse_pos] )" returns="integer" doc="Parse the string value starting at parse pos to a Unix&#10;timestamp -int" ilk="function" src="dateformat_parse.c"/>
      <scope name="datefmt_localtime" signature="datefmt_localtime( IntlDateFormatter $fmt, string $text_to_parse[, int $parse_pos ])" returns="integer" doc="Parse the string value to a localtime array" ilk="function" src="dateformat_parse.c"/>
      <scope name="datefmt_format" signature="datefmt_format( [mixed]int $args or array $args )" returns="string" doc="Format the time value as a string" ilk="function" src="dateformat_format.c"/>
      <scope name="datefmt_create" signature="datefmt_create(string $locale, long date_type, long time_type[, string $timezone_str, long $calendar, string $pattern] )" returns="IntlDateFormatter" doc="Create formatter" ilk="function" src="dateformat.c"/>
      <scope name="datefmt_get_error_code" signature="datefmt_get_error_code( IntlDateFormatter $nf )" returns="int" doc="Get formatter's last error code" ilk="function" src="dateformat.c"/>
      <scope name="datefmt_get_error_message" signature="datefmt_get_error_message( IntlDateFormatter $coll )" returns="string" doc="Get text description for formatter's last error code" ilk="function" src="dateformat.c"/>
      <scope name="datefmt_get_datetype" signature="datefmt_get_datetype( IntlDateFormatter $mf )" returns="string" doc="Get formatter datetype" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_get_timetype" signature="datefmt_get_timetype( IntlDateFormatter $mf )" returns="string" doc="Get formatter timetype" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_get_calendar" signature="datefmt_get_calendar( IntlDateFormatter $mf )" returns="string" doc="Get formatter calendar" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_get_timezone_id" signature="datefmt_get_timezone_id( IntlDateFormatter $mf )" returns="string" doc="Get formatter timezone id" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_set_timezone_id" signature="datefmt_set_timezone_id( IntlDateFormatter $mf,$timezone_id)" returns="boolean" doc="Set formatter timezone id" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_get_pattern" signature="datefmt_get_pattern( IntlDateFormatter $mf )" returns="string" doc="Get formatter pattern" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_set_pattern" signature="datefmt_set_pattern( IntlDateFormatter $mf, string $pattern )" returns="bool" doc="Set formatter pattern" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_get_locale" signature="datefmt_get_locale(IntlDateFormatter $mf)" returns="string" doc="Get formatter locale" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_isLenient" signature="datefmt_isLenient(IntlDateFormatter $mf)" returns="string" doc="Get formatter locale" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_setLenient" signature="datefmt_setLenient(IntlDateFormatter $mf)" returns="string" doc="Set formatter lenient" ilk="function" src="dateformat_attr.c"/>
      <scope name="datefmt_set_calendar" signature="datefmt_set_calendar( IntlDateFormatter $mf, int $calendar )" returns="bool" doc="Set formatter calendar" ilk="function" src="dateformat_attr.c"/>
      <scope name="intl_get_error_code" signature="intl_get_error_code()" returns="int" doc="Get code of the last occured error" ilk="function" src="common_error.c"/>
      <scope name="intl_get_error_message" signature="intl_get_error_message()" returns="string" doc="Get text description of the last occured error" ilk="function" src="common_error.c"/>
      <scope name="intl_is_failure" signature="intl_is_failure()" returns="bool" doc="Check whether the given error code indicates a failure&#10;Returns true if it does and false if the code indicates" ilk="function" src="common_error.c"/>
      <scope name="intl_error_name" signature="intl_error_name()" returns="string" doc="Return a string for a given error code The string will&#10;be the same as the name of the error" ilk="function" src="common_error.c"/>
      <scope name="numfmt_parse" signature="numfmt_parse( NumberFormatter $nf, string $str[, int $type, int &amp;$position ])" returns="mixed" doc="Parse a number" ilk="function" src="formatter_parse.c"/>
      <scope name="numfmt_parse_currency" signature="numfmt_parse_currency( NumberFormatter $nf, string $str, string $&amp;currency[, int $&amp;position] )" returns="double" doc="Parse a number as currency" ilk="function" src="formatter_parse.c"/>
      <scope name="numfmt_get_attribute" signature="numfmt_get_attribute( NumberFormatter $nf, int $attr )" returns="mixed" doc="Get formatter attribute value" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_get_text_attribute" signature="numfmt_get_text_attribute( NumberFormatter $nf, int $attr )" returns="string" doc="Get formatter attribute value" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_set_attribute" signature="numfmt_set_attribute( NumberFormatter $nf, int $attr, mixed $value )" returns="bool" doc="Get formatter attribute value" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_set_text_attribute" signature="numfmt_set_text_attribute( NumberFormatter $nf, int $attr, string $value )" returns="bool" doc="Get formatter attribute value" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_get_symbol" signature="numfmt_get_symbol( NumberFormatter $nf, int $attr )" returns="string" doc="Get formatter symbol value" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_set_symbol" signature="numfmt_set_symbol( NumberFormatter $nf, int $attr, string $symbol )" returns="bool" doc="Set formatter symbol value" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_get_pattern" signature="numfmt_get_pattern( NumberFormatter $nf )" returns="string" doc="Get formatter pattern" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_set_pattern" signature="numfmt_set_pattern( NumberFormatter $nf, string $pattern )" returns="bool" doc="Set formatter pattern" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_get_locale" signature="numfmt_get_locale( NumberFormatter $nf[, int type] )" returns="string" doc="Get formatter locale" ilk="function" src="formatter_attr.c"/>
      <scope name="numfmt_format" signature="numfmt_format( NumberFormatter $nf, mixed $num[, int type] )" returns="mixed" doc="Format a number" ilk="function" src="formatter_format.c"/>
      <scope name="numfmt_format_currency" signature="numfmt_format_currency( NumberFormatter $nf, double $num, string $currency )" returns="mixed" doc="Format a number as currency" ilk="function" src="formatter_format.c"/>
      <scope name="numfmt_create" signature="numfmt_create( string $locale, int style[, string $pattern ] )" returns="NumberFormatter" doc="Create number formatter" ilk="function" src="formatter_main.c"/>
      <scope name="numfmt_get_error_code" signature="numfmt_get_error_code( NumberFormatter $nf )" returns="int" doc="Get formatter's last error code" ilk="function" src="formatter_main.c"/>
      <scope name="numfmt_get_error_message" signature="numfmt_get_error_message( NumberFormatter $nf )" returns="string" doc="Get text description for formatter's last error code" ilk="function" src="formatter_main.c"/>
      <scope name="grapheme_strlen" signature="grapheme_strlen(string str)" returns="int" doc="Get number of graphemes in a string" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_strpos" signature="grapheme_strpos(string haystack, string needle [, int offset ])" returns="int" doc="Find position of first occurrence of a string within&#10;another" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_stripos" signature="grapheme_stripos(string haystack, string needle [, int offset ])" returns="int" doc="Find position of first occurrence of a string within&#10;another ignoring case differences" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_strrpos" signature="grapheme_strrpos(string haystack, string needle [, int offset])" returns="int" doc="Find position of last occurrence of a string within&#10;another" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_strripos" signature="grapheme_strripos(string haystack, string needle [, int offset])" returns="int" doc="Find position of last occurrence of a string within&#10;another ignoring case" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_substr" signature="grapheme_substr(string str, int start [, int length])" returns="string" doc="Returns part of a string" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_strstr" signature="grapheme_strstr(string haystack, string needle[, bool part])" returns="string" doc="Finds first occurrence of a string within another" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_stristr" signature="grapheme_stristr(string haystack, string needle[, bool part])" returns="string" doc="Finds first occurrence of a string within another" ilk="function" src="grapheme_string.c"/>
      <scope name="grapheme_extract" signature="grapheme_extract(string str, int size[, int extract_type[, int start[, int next]]])" returns="string" doc="Function to extract a sequence of default grapheme&#10;clusters" ilk="function" src="grapheme_string.c"/>
      <scope name="locale_get_default" signature="locale_get_default( )" returns="string" doc="Get default locale" ilk="function" src="locale_methods.c"/>
      <scope name="locale_set_default" signature="locale_set_default( string $locale )" returns="string" doc="Set default locale" ilk="function" src="locale_methods.c"/>
      <scope name="locale_get_script" signature="locale_get_script($locale)" returns="string" doc="gets the script for the locale" ilk="function" src="locale_methods.c"/>
      <scope name="locale_get_region" signature="locale_get_region($locale)" returns="string" doc="gets the region for the locale" ilk="function" src="locale_methods.c"/>
      <scope name="locale_get_primary_language" signature="locale_get_primary_language($locale)" returns="string" doc="gets the primary language for the locale" ilk="function" src="locale_methods.c"/>
      <scope name="get_display_name" signature="get_display_name($locale[, $in_locale = null])" returns="string" doc="gets the name for the locale in in locale or default&#10;locale" ilk="function" src="locale_methods.c"/>
      <scope name="get_display_language" signature="get_display_language($locale[, $in_locale = null])" returns="string" doc="gets the language for the locale in in locale or&#10;default locale" ilk="function" src="locale_methods.c"/>
      <scope name="get_display_script" signature="get_display_script($locale, $in_locale = null)" returns="string" doc="gets the script for the locale in in locale or default&#10;locale" ilk="function" src="locale_methods.c"/>
      <scope name="get_display_region" signature="get_display_region($locale, $in_locale = null)" returns="string" doc="gets the region for the locale in in locale or default&#10;locale" ilk="function" src="locale_methods.c"/>
      <scope name="getKeywords" signature="getKeywords(string $locale)" returns="array" doc="return an associative array containing keyword-value&#10;pairs for this locale The keys are keys to the array&#10;doh" ilk="function" src="locale_methods.c"/>
      <scope name="locale_get_keywords" signature="locale_get_keywords(string $locale)" returns="array" doc="return an associative array containing keyword-value&#10;pairs for this locale The keys are keys to the array&#10;doh" ilk="function" src="locale_methods.c"/>
      <scope name="locale_canonicalize" signature="locale_canonicalize(Locale $loc, string $locale)" returns="string" doc="param string locale The locale string to canonicalize" ilk="function" src="locale_methods.c"/>
      <scope name="compose_locale" signature="compose_locale($array)" returns="string" doc="Creates a locale by combining the parts of locale-ID&#10;passed" ilk="function" src="locale_methods.c"/>
      <scope name="parse_locale" signature="parse_locale($locale)" returns="array" doc="parses a locale-id into an array the different parts of&#10;it" ilk="function" src="locale_methods.c"/>
      <scope name="locale_get_all_variants" signature="locale_get_all_variants($locale)" returns="array" doc="gets an array containing the list of variants or null" ilk="function" src="locale_methods.c"/>
      <scope name="locale_filter_matches" signature="locale_filter_matches(string $langtag, string $locale)" returns="boolean" doc="Checks if a langtag filter matches with locale&#10;according to RFC 's basic filtering algorithm" ilk="function" src="locale_methods.c"/>
      <scope name="locale_lookup" signature="locale_lookup(array $langtag, $locale[, $default = null])" returns="string" doc="Searchs the items in langtag for the best match to the&#10;language range" ilk="function" src="locale_methods.c"/>
      <scope name="locale_accept_from_http" signature="locale_accept_from_http(string $http_accept)" returns="string" doc="Tries to find out best available locale based on HTTP&#10;Accept-Language header" ilk="function" src="locale_methods.c"/>
      <scope name="normalizer_normalize" signature="normalizer_normalize( string $input [, string $form = FORM_C] )" returns="string" doc="Normalize a string" ilk="function" src="normalizer_normalize.c"/>
      <scope name="normalizer_is_normalize" signature="normalizer_is_normalize( string $input [, string $form = FORM_C] )" returns="bool" doc="Test if a string is in a given normalization form" ilk="function" src="normalizer_normalize.c"/>
      <scope name="idn_to_ascii" signature="idn_to_ascii(string domain[, int options [, int status]])" returns="int" doc="Converts a UTF- domain to ASCII as defined in the IDNA&#10;RFC" ilk="function" src="idn.c"/>
      <scope name="idn_to_utf8" signature="idn_to_utf8(string domain[, int options[, int status]])" returns="int" doc="Converts a UTF- domain to ASCII as defined in the IDNA&#10;RFC" ilk="function" src="idn.c"/>
      <scope name="collator_sort" signature="collator_sort(  Collator $coll, array(string) $arr [, int $sort_flags] )" returns="bool" doc="Sort array using specified collator" ilk="function" src="collator_sort.c"/>
      <scope name="collator_sort_with_sort_keys" signature="collator_sort_with_sort_keys( Collator $coll, array(string) $arr )" returns="bool" doc="Equivalent to standard PHP sort using Collator Uses ICU&#10;ucol getSortKey for performance" ilk="function" src="collator_sort.c"/>
      <scope name="collator_asort" signature="collator_asort( Collator $coll, array(string) $arr )" returns="bool" doc="Sort array using specified collator maintaining index&#10;association" ilk="function" src="collator_sort.c"/>
      <scope name="collator_compare" signature="collator_compare( Collator $coll, string $str1, string $str2 )" returns="int" doc="Compare two strings" ilk="function" src="collator_compare.c"/>
      <scope name="collator_get_locale" signature="collator_get_locale( Collator $coll, int $type )" returns="string" doc="Gets the locale name of the collator" ilk="function" src="collator_locale.c"/>
      <scope name="collator_create" signature="collator_create( string $locale )" returns="Collator" doc="Create collator" ilk="function" src="collator_create.c"/>
      <scope name="collator_get_attribute" signature="collator_get_attribute( Collator $coll, int $attr )" returns="int" doc="Get collation attribute value" ilk="function" src="collator_attr.c"/>
      <scope name="collator_set_attribute" signature="collator_set_attribute( Collator $coll, int $attr, int $val )" returns="bool" doc="Set collation attribute" ilk="function" src="collator_attr.c"/>
      <scope name="collator_get_strength" signature="collator_get_strength(Collator coll)" returns="int" doc="Returns the current collation strength" ilk="function" src="collator_attr.c"/>
      <scope name="collator_set_strength" signature="collator_set_strength(Collator coll, int strength)" returns="bool" doc="Set the collation strength" ilk="function" src="collator_attr.c"/>
      <scope name="collator_get_error_code" signature="collator_get_error_code( Collator $coll )" returns="int" doc="Get collator's last error code" ilk="function" src="collator_error.c"/>
      <scope name="collator_get_error_message" signature="collator_get_error_message( Collator $coll )" returns="string" doc="Get text description for collator's last error code" ilk="function" src="collator_error.c"/>
      <scope name="pspell_new" signature="pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" returns="int" doc="Load a dictionary" ilk="function" src="pspell.c"/>
      <scope name="pspell_new_personal" signature="pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" returns="int" doc="Load a dictionary with a personal wordlist" ilk="function" src="pspell.c"/>
      <scope name="pspell_new_config" signature="pspell_new_config(int config)" returns="int" doc="Load a dictionary based on the given config" ilk="function" src="pspell.c"/>
      <scope name="pspell_check" signature="pspell_check(int pspell, string word)" returns="bool" doc="Returns true if word is valid" ilk="function" src="pspell.c"/>
      <scope name="pspell_suggest" signature="pspell_suggest(int pspell, string word)" returns="array" doc="Returns array of suggestions" ilk="function" src="pspell.c"/>
      <scope name="pspell_store_replacement" signature="pspell_store_replacement(int pspell, string misspell, string correct)" returns="bool" doc="Notify the dictionary of a user-selected replacement" ilk="function" src="pspell.c"/>
      <scope name="pspell_add_to_personal" signature="pspell_add_to_personal(int pspell, string word)" returns="bool" doc="Adds a word to a personal list" ilk="function" src="pspell.c"/>
      <scope name="pspell_add_to_session" signature="pspell_add_to_session(int pspell, string word)" returns="bool" doc="Adds a word to the current session" ilk="function" src="pspell.c"/>
      <scope name="pspell_clear_session" signature="pspell_clear_session(int pspell)" returns="bool" doc="Clears the current session" ilk="function" src="pspell.c"/>
      <scope name="pspell_save_wordlist" signature="pspell_save_wordlist(int pspell)" returns="bool" doc="Saves the current personal wordlist" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_create" signature="pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])" returns="int" doc="Create a new config to be used later to create a&#10;manager" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_runtogether" signature="pspell_config_runtogether(int conf, bool runtogether)" returns="bool" doc="Consider run-together words as valid components" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_mode" signature="pspell_config_mode(int conf, long mode)" returns="bool" doc="Select mode for config PSPELL FAST PSPELL NORMAL or&#10;PSPELL BAD SPELLERS" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_ignore" signature="pspell_config_ignore(int conf, int ignore)" returns="bool" doc="Ignore words n chars" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_personal" signature="pspell_config_personal(int conf, string personal)" returns="bool" doc="Use a personal dictionary for this config" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_dict_dir" signature="pspell_config_dict_dir(int conf, string directory)" returns="bool" doc="location of the main word list" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_data_dir" signature="pspell_config_data_dir(int conf, string directory)" returns="bool" doc="location of language data files" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_repl" signature="pspell_config_repl(int conf, string repl)" returns="bool" doc="Use a personal dictionary with replacement pairs for&#10;this config" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_save_repl" signature="pspell_config_save_repl(int conf, bool save)" returns="bool" doc="Save replacement pairs when personal list is saved for&#10;this config" ilk="function" src="pspell.c"/>
      <scope name="msg_set_queue" signature="msg_set_queue(resource queue, array data)" returns="bool" doc="Set information for a message queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_stat_queue" signature="msg_stat_queue(resource queue)" returns="array" doc="Returns information about a message queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_queue_exists" signature="msg_queue_exists(int key)" returns="bool" doc="Check wether a message queue exists" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_get_queue" signature="msg_get_queue(int key [, int perms])" returns="resource" doc="Attach to a message queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_remove_queue" signature="msg_remove_queue(resource queue)" returns="bool" doc="Destroy the queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_receive" signature="msg_receive(resource queue, int desiredmsgtype, int &amp;msgtype, int maxsize, mixed message [, bool unserialize=true [, int flags=0 [, int errorcode]]])" returns="mixed" doc="Send a message of type msgtype must be to a message&#10;queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_send" signature="msg_send(resource queue, int msgtype, mixed message [, bool serialize=true [, bool blocking=true [, int errorcode]]])" returns="bool" doc="Send a message of type msgtype must be to a message&#10;queue" ilk="function" src="sysvmsg.c"/>
      <scope name="libxml_set_streams_context" signature="libxml_set_streams_context(resource streams_context)" returns="void" doc="Set the streams context for the next libxml document&#10;load or write" ilk="function" src="libxml.c"/>
      <scope name="libxml_use_internal_errors" signature="libxml_use_internal_errors([boolean use_errors])" returns="bool" doc="Disable libxml errors and allow user to fetch error&#10;information as needed" ilk="function" src="libxml.c"/>
      <scope name="libxml_get_last_error" signature="libxml_get_last_error()" returns="object" doc="Retrieve last error from libxml" ilk="function" src="libxml.c"/>
      <scope name="libxml_get_errors" signature="libxml_get_errors()" returns="object" doc="Retrieve array of errors" ilk="function" src="libxml.c"/>
      <scope name="libxml_clear_errors" signature="libxml_clear_errors()" returns="void" doc="Clear last error from libxml" ilk="function" src="libxml.c"/>
      <scope name="libxml_disable_entity_loader" signature="libxml_disable_entity_loader([boolean disable])" returns="bool" doc="Disable Enable ability to load external entities" ilk="function" src="libxml.c"/>
      <scope name="gmp_init" signature="gmp_init(mixed number [, int base])" returns="resource" doc="Initializes GMP number" ilk="function" src="gmp.c"/>
      <scope name="gmp_intval" signature="gmp_intval(resource gmpnumber)" returns="int" doc="Gets signed long value of GMP number" ilk="function" src="gmp.c"/>
      <scope name="gmp_strval" signature="gmp_strval(resource gmpnumber [, int base])" returns="string" doc="Gets string representation of GMP number" ilk="function" src="gmp.c"/>
      <scope name="gmp_add" signature="gmp_add(resource a, resource b)" returns="resource" doc="Add a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_sub" signature="gmp_sub(resource a, resource b)" returns="resource" doc="Subtract b from a" ilk="function" src="gmp.c"/>
      <scope name="gmp_mul" signature="gmp_mul(resource a, resource b)" returns="resource" doc="Multiply a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_div_qr" signature="gmp_div_qr(resource a, resource b [, int round])" returns="array" doc="Divide a by b returns quotient and reminder" ilk="function" src="gmp.c"/>
      <scope name="gmp_div_r" signature="gmp_div_r(resource a, resource b [, int round])" returns="resource" doc="Divide a by b returns reminder only" ilk="function" src="gmp.c"/>
      <scope name="gmp_div_q" signature="gmp_div_q(resource a, resource b [, int round])" returns="resource" doc="Divide a by b returns quotient only" ilk="function" src="gmp.c"/>
      <scope name="gmp_mod" signature="gmp_mod(resource a, resource b)" returns="resource" doc="Computes a modulo b" ilk="function" src="gmp.c"/>
      <scope name="gmp_divexact" signature="gmp_divexact(resource a, resource b)" returns="resource" doc="Divide a by b using exact division algorithm" ilk="function" src="gmp.c"/>
      <scope name="gmp_neg" signature="gmp_neg(resource a)" returns="resource" doc="Negates a number" ilk="function" src="gmp.c"/>
      <scope name="gmp_abs" signature="gmp_abs(resource a)" returns="resource" doc="Calculates absolute value" ilk="function" src="gmp.c"/>
      <scope name="gmp_fact" signature="gmp_fact(int a)" returns="resource" doc="Calculates factorial function" ilk="function" src="gmp.c"/>
      <scope name="gmp_pow" signature="gmp_pow(resource base, int exp)" returns="resource" doc="Raise base to power exp" ilk="function" src="gmp.c"/>
      <scope name="gmp_powm" signature="gmp_powm(resource base, resource exp, resource mod)" returns="resource" doc="Raise base to power exp and take result modulo mod" ilk="function" src="gmp.c"/>
      <scope name="gmp_sqrt" signature="gmp_sqrt(resource a)" returns="resource" doc="Takes integer part of square root of a" ilk="function" src="gmp.c"/>
      <scope name="gmp_sqrtrem" signature="gmp_sqrtrem(resource a)" returns="array" doc="Square root with remainder" ilk="function" src="gmp.c"/>
      <scope name="gmp_perfect_square" signature="gmp_perfect_square(resource a)" returns="bool" doc="Checks if a is an exact square" ilk="function" src="gmp.c"/>
      <scope name="gmp_prob_prime" signature="gmp_prob_prime(resource a[, int reps])" returns="int" doc="Checks if a is probably prime" ilk="function" src="gmp.c"/>
      <scope name="gmp_gcd" signature="gmp_gcd(resource a, resource b)" returns="resource" doc="Computes greatest common denominator gcd of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_gcdext" signature="gmp_gcdext(resource a, resource b)" returns="array" doc="Computes G S and T such that AS BT G gcd' A B" ilk="function" src="gmp.c"/>
      <scope name="gmp_invert" signature="gmp_invert(resource a, resource b)" returns="resource" doc="Computes the inverse of a modulo b" ilk="function" src="gmp.c"/>
      <scope name="gmp_jacobi" signature="gmp_jacobi(resource a, resource b)" returns="int" doc="Computes Jacobi symbol" ilk="function" src="gmp.c"/>
      <scope name="gmp_legendre" signature="gmp_legendre(resource a, resource b)" returns="int" doc="Computes Legendre symbol" ilk="function" src="gmp.c"/>
      <scope name="gmp_cmp" signature="gmp_cmp(resource a, resource b)" returns="int" doc="Compares two numbers" ilk="function" src="gmp.c"/>
      <scope name="gmp_sign" signature="gmp_sign(resource a)" returns="int" doc="Gets the sign of the number" ilk="function" src="gmp.c"/>
      <scope name="gmp_random" signature="gmp_random([int limiter])" returns="resource" doc="Gets random number" ilk="function" src="gmp.c"/>
      <scope name="gmp_and" signature="gmp_and(resource a, resource b)" returns="resource" doc="Calculates logical AND of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_or" signature="gmp_or(resource a, resource b)" returns="resource" doc="Calculates logical OR of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_com" signature="gmp_com(resource a)" returns="resource" doc="Calculates one's complement of a" ilk="function" src="gmp.c"/>
      <scope name="gmp_nextprime" signature="gmp_nextprime(resource a)" returns="resource" doc="Finds next prime of a" ilk="function" src="gmp.c"/>
      <scope name="gmp_xor" signature="gmp_xor(resource a, resource b)" returns="resource" doc="Calculates logical exclusive OR of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_setbit" signature="gmp_setbit(resource &amp;a, int index[, bool set_clear])" returns="void" doc="Sets or clear bit in a" ilk="function" src="gmp.c"/>
      <scope name="gmp_clrbit" signature="gmp_clrbit(resource &amp;a, int index)" returns="void" doc="Clears bit in a" ilk="function" src="gmp.c"/>
      <scope name="gmp_testbit" signature="gmp_testbit(resource a, int index)" returns="bool" doc="Tests if bit is set in a" ilk="function" src="gmp.c"/>
      <scope name="gmp_popcount" signature="gmp_popcount(resource a)" returns="int" doc="Calculates the population count of a" ilk="function" src="gmp.c"/>
      <scope name="gmp_hamdist" signature="gmp_hamdist(resource a, resource b)" returns="int" doc="Calculates hamming distance between a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_scan0" signature="gmp_scan0(resource a, int start)" returns="int" doc="Finds first zero bit" ilk="function" src="gmp.c"/>
      <scope name="gmp_scan1" signature="gmp_scan1(resource a, int start)" returns="int" doc="Finds first non-zero bit" ilk="function" src="gmp.c"/>
      <scope name="preg_match" signature="preg_match(string pattern, string subject [, array &amp;subpatterns [, int flags [, int offset]]])" returns="int" doc="Perform a Perl-style regular expression match" ilk="function" src="php_pcre.c"/>
      <scope name="preg_match_all" signature="preg_match_all(string pattern, string subject, array &amp;subpatterns [, int flags [, int offset]])" returns="int" doc="Perform a Perl-style global regular expression match" ilk="function" src="php_pcre.c"/>
      <scope name="preg_replace" signature="preg_replace(mixed regex, mixed replace, mixed subject [, int limit [, int &amp;count]])" returns="mixed" doc="Perform Perl-style regular expression replacement" ilk="function" src="php_pcre.c"/>
      <scope name="preg_replace_callback" signature="preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit [, int &amp;count]])" returns="mixed" doc="Perform Perl-style regular expression replacement using&#10;replacement callback" ilk="function" src="php_pcre.c"/>
      <scope name="preg_filter" signature="preg_filter(mixed regex, mixed replace, mixed subject [, int limit [, int &amp;count]])" returns="mixed" doc="Perform Perl-style regular expression replacement and&#10;only return matches" ilk="function" src="php_pcre.c"/>
      <scope name="preg_split" signature="preg_split(string pattern, string subject [, int limit [, int flags]])" returns="array" doc="Split string into an array using a perl-style regular&#10;expression as a delimiter" ilk="function" src="php_pcre.c"/>
      <scope name="preg_quote" signature="preg_quote(string str [, string delim_char])" returns="string" doc="Quote regular expression characters plus an optional&#10;character" ilk="function" src="php_pcre.c"/>
      <scope name="preg_grep" signature="preg_grep(string regex, array input [, int flags])" returns="array" doc="Searches array and returns entries which match regex" ilk="function" src="php_pcre.c"/>
      <scope name="preg_last_error" signature="preg_last_error()" returns="int" doc="Returns the error code of the last regexp execution" ilk="function" src="php_pcre.c"/>
      <scope name="snmpget" signature="snmpget(string host, string community, string object_id [, int timeout [, int retries]])" returns="string" doc="Fetch a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmpgetnext" signature="snmpgetnext(string host, string community, string object_id [, int timeout [, int retries]])" returns="string" doc="Fetch a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmpwalk" signature="snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects under the specified object id" ilk="function" src="snmp.c"/>
      <scope name="snmprealwalk" signature="snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects including their respective object id&#10;withing the specified one" ilk="function" src="snmp.c"/>
      <scope name="snmp_get_quick_print" signature="snmp_get_quick_print(void)" returns="bool" doc="Return the current status of quick print" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_quick_print" signature="snmp_set_quick_print(int quick_print)" returns="void" doc="Return all objects including their respective object id&#10;withing the specified one" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_enum_print" signature="snmp_set_enum_print(int enum_print)" returns="void" doc="Return all values that are enums with their enum value&#10;instead of the raw integer" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_oid_output_format" signature="snmp_set_oid_output_format(int oid_format)" returns="void" doc="Set the OID output format" ilk="function" src="snmp.c"/>
      <scope name="snmpset" signature="snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])" returns="int" doc="Set the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp2_get" signature="snmp2_get(string host, string community, string object_id [, int timeout [, int retries]])" returns="string" doc="Fetch a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp2_getnext" signature="snmp2_getnext(string host, string community, string object_id [, int timeout [, int retries]])" returns="string" doc="Fetch a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp2_walk" signature="snmp2_walk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects under the specified object id" ilk="function" src="snmp.c"/>
      <scope name="snmp2_real_walk" signature="snmp2_real_walk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects including their respective object id&#10;withing the specified one" ilk="function" src="snmp.c"/>
      <scope name="snmp2_set" signature="snmp2_set(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])" returns="int" doc="Set the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="php_snmpv3" signature="php_snmpv3(INTERNAL_FUNCTION_PARAMETERS, int st)" returns="void" doc="Generic SNMPv object fetcher From here is passed on the&#10;the common internal object fetcher st SNMP CMD GET snmp" ilk="function" src="snmp.c"/>
      <scope name="snmp3_get" signature="snmp3_get(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp3_getnext" signature="snmp3_getnext(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp3_walk" signature="snmp3_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp3_real_walk" signature="snmp3_real_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp3_set" signature="snmp3_set(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id, string type, mixed value [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_valueretrieval" signature="snmp_set_valueretrieval(int method)" returns="void" doc="Specify the method how the SNMP values will be returned" ilk="function" src="snmp.c"/>
      <scope name="snmp_get_valueretrieval" signature="snmp_get_valueretrieval()" returns="int" doc="Return the method how the SNMP values will be returned" ilk="function" src="snmp.c"/>
      <scope name="snmp_read_mib" signature="snmp_read_mib(string filename)" returns="int" doc="Reads and parses a MIB file into the active MIB tree" ilk="function" src="snmp.c"/>
      <scope name="xsl_xsltprocessor_import_stylesheet" signature="xsl_xsltprocessor_import_stylesheet(domdocument doc)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Since" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_transform_to_doc" signature="xsl_xsltprocessor_transform_to_doc(domnode doc)" returns="domdocument" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Since" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_transform_to_uri" signature="xsl_xsltprocessor_transform_to_uri(domdocument doc, string uri)" returns="int" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_transform_to_xml" signature="xsl_xsltprocessor_transform_to_xml(domdocument doc)" returns="string" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_set_parameter" signature="xsl_xsltprocessor_set_parameter(string namespace, mixed name [, string value])" returns="bool" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_get_parameter" signature="xsl_xsltprocessor_get_parameter(string namespace, string name)" returns="string" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_remove_parameter" signature="xsl_xsltprocessor_remove_parameter(string namespace, string name)" returns="bool" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_register_php_functions" signature="xsl_xsltprocessor_register_php_functions([mixed $restrict])" returns="void" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_set_profiling" signature="xsl_xsltprocessor_set_profiling(string filename)" returns="bool" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="xsl_xsltprocessor_has_exslt_support" signature="xsl_xsltprocessor_has_exslt_support()" returns="bool" doc="" ilk="function" src="xsltprocessor.c"/>
      <scope name="mssql_connect" signature="mssql_connect([string servername [, string username [, string password [, bool new_link]]]])" returns="int" doc="Establishes a connection to a MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_pconnect" signature="mssql_pconnect([string servername [, string username [, string password [, bool new_link]]]])" returns="int" doc="Establishes a persistent connection to a MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_close" signature="mssql_close([resource conn_id])" returns="bool" doc="Closes a connection to a MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_select_db" signature="mssql_select_db(string database_name [, resource conn_id])" returns="bool" doc="Select a MS-SQL database" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_batch" signature="mssql_fetch_batch(resource result_index)" returns="int" doc="Returns the next batch of records" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_query" signature="mssql_query(string query [, resource conn_id [, int batch_size]])" returns="resource" doc="Perform an SQL query on a MS-SQL server database" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_rows_affected" signature="mssql_rows_affected(resource conn_id)" returns="int" doc="Returns the number of records affected by the query" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_free_result" signature="mssql_free_result(resource result_index)" returns="bool" doc="Free a MS-SQL result index" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_get_last_message" signature="mssql_get_last_message(void)" returns="string" doc="Gets the last message from the MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_num_rows" signature="mssql_num_rows(resource mssql_result_index)" returns="int" doc="Returns the number of rows fetched in from the result&#10;id specified" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_num_fields" signature="mssql_num_fields(resource mssql_result_index)" returns="int" doc="Returns the number of fields fetched in from the result&#10;id specified" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_row" signature="mssql_fetch_row(resource result_id)" returns="array" doc="Returns an array of the current row in the result set&#10;specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_object" signature="mssql_fetch_object(resource result_id)" returns="object" doc="Returns a pseudo-object of the current row in the&#10;result set specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_array" signature="mssql_fetch_array(resource result_id [, int result_type])" returns="array" doc="Returns an associative array of the current row in the&#10;result set specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_assoc" signature="mssql_fetch_assoc(resource result_id)" returns="array" doc="Returns an associative array of the current row in the&#10;result set specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_data_seek" signature="mssql_data_seek(resource result_id, int offset)" returns="bool" doc="Moves the internal row pointer of the MS-SQL result&#10;associated with the specified result identifier to&#10;pointer to the specified" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_field" signature="mssql_fetch_field(resource result_id [, int offset])" returns="object" doc="Gets information about certain fields in a query result" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_length" signature="mssql_field_length(resource result_id [, int offset])" returns="int" doc="Get the length of a MS-SQL field" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_name" signature="mssql_field_name(resource result_id [, int offset])" returns="string" doc="Returns the name of the field given by offset in the&#10;result set given by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_type" signature="mssql_field_type(resource result_id [, int offset])" returns="string" doc="Returns the type of a field" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_seek" signature="mssql_field_seek(resource result_id, int offset)" returns="bool" doc="Seeks to the specified field offset" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_result" signature="mssql_result(resource result_id, int row, mixed field)" returns="string" doc="Returns the contents of one cell from a MS-SQL result&#10;set" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_next_result" signature="mssql_next_result(resource result_id)" returns="bool" doc="Move the internal result pointer to the next result" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_min_error_severity" signature="mssql_min_error_severity(int severity)" returns="void" doc="Sets the lower error severity" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_min_message_severity" signature="mssql_min_message_severity(int severity)" returns="void" doc="Sets the lower message severity" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_init" signature="mssql_init(string sp_name [, resource conn_id])" returns="int" doc="Initializes a stored procedure or a remote stored&#10;procedure" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_bind" signature="mssql_bind(resource stmt, string param_name, mixed var, int type [, bool is_output [, bool is_null [, int maxlen]]])" returns="bool" doc="Adds a parameter to a stored procedure or a remote&#10;stored procedure" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_execute" signature="mssql_execute(resource stmt [, bool skip_results = false])" returns="mixed" doc="Executes a stored procedure on a MS-SQL server database" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_free_statement" signature="mssql_free_statement(resource result_index)" returns="bool" doc="Free a MS-SQL statement index" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_guid_string" signature="mssql_guid_string(string binary [,bool short_format])" returns="string" doc="Converts a byte binary GUID to a string" ilk="function" src="php_mssql.c"/>
      <scope name="pcntl_fork" signature="pcntl_fork(void)" returns="int" doc="Forks the currently running process following the same&#10;behavior as the UNIX fork system call" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_alarm" signature="pcntl_alarm(int seconds)" returns="int" doc="Set an alarm clock for delivery of a signal" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_waitpid" signature="pcntl_waitpid(int pid, int &amp;status, int options)" returns="int" doc="Waits on or returns the status of a forked child as&#10;defined by the waitpid system call" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wait" signature="pcntl_wait(int &amp;status)" returns="int" doc="Waits on or returns the status of a forked child as&#10;defined by the waitpid system call" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wifexited" signature="pcntl_wifexited(int status)" returns="bool" doc="Returns true if the child status code represents a&#10;successful exit" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wifstopped" signature="pcntl_wifstopped(int status)" returns="bool" doc="Returns true if the child status code represents a&#10;stopped process WUNTRACED must have been used with&#10;waitpid" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wifsignaled" signature="pcntl_wifsignaled(int status)" returns="bool" doc="Returns true if the child status code represents a&#10;process that was terminated due to a signal" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wexitstatus" signature="pcntl_wexitstatus(int status)" returns="int" doc="Returns the status code of a child's exit" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wtermsig" signature="pcntl_wtermsig(int status)" returns="int" doc="Returns the number of the signal that terminated the&#10;process who's status code is passed" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wstopsig" signature="pcntl_wstopsig(int status)" returns="int" doc="Returns the number of the signal that caused the&#10;process to stop who's status code is passed" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_exec" signature="pcntl_exec(string path [, array args [, array envs]])" returns="bool" doc="Executes specified program in current process space as&#10;defined by exec" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_signal" signature="pcntl_signal(int signo, callback handle [, bool restart_syscalls])" returns="bool" doc="Assigns a system signal handler to a PHP function" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_signal_dispatch" signature="pcntl_signal_dispatch()" returns="bool" doc="Dispatch signals to signal handlers" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_sigprocmask" signature="pcntl_sigprocmask(int how, array set[, array &amp;oldset])" returns="bool" doc="Examine and change blocked signals" ilk="function" src="pcntl.c"/>
      <scope name="pcnlt_sigwaitinfo" signature="pcnlt_sigwaitinfo(array set[, array &amp;siginfo])" returns="int" doc="Synchronously wait for queued signals" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_sigtimedwait" signature="pcntl_sigtimedwait(array set[, array &amp;siginfo[, int seconds[, int nanoseconds]]])" returns="int" doc="Wait for queued signals" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_getpriority" signature="pcntl_getpriority([int pid [, int process_identifier]])" returns="int" doc="Get the priority of any process" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_setpriority" signature="pcntl_setpriority(int priority [, int pid [, int process_identifier]])" returns="bool" doc="Change the priority of any process" ilk="function" src="pcntl.c"/>
      <scope name="socket_select" signature="socket_select(array &amp;read_fds, array &amp;write_fds, array &amp;except_fds, int tv_sec[, int tv_usec])" returns="int" doc="U Runs the select system call on the sets mentioned&#10;with a timeout specified by tv sec and tv usec" ilk="function" src="sockets.c"/>
      <scope name="socket_create_listen" signature="socket_create_listen(int port[, int backlog])" returns="resource" doc="U Opens a socket on port to accept connections" ilk="function" src="sockets.c"/>
      <scope name="socket_accept" signature="socket_accept(resource socket)" returns="resource" doc="U Accepts a connection on the listening socket fd" ilk="function" src="sockets.c"/>
      <scope name="socket_set_nonblock" signature="socket_set_nonblock(resource socket)" returns="bool" doc="U Sets nonblocking mode on a socket resource" ilk="function" src="sockets.c"/>
      <scope name="socket_set_block" signature="socket_set_block(resource socket)" returns="bool" doc="U Sets blocking mode on a socket resource" ilk="function" src="sockets.c"/>
      <scope name="socket_listen" signature="socket_listen(resource socket[, int backlog])" returns="bool" doc="U Sets the maximum number of connections allowed to be&#10;waited for on the socket specified by fd" ilk="function" src="sockets.c"/>
      <scope name="socket_close" signature="socket_close(resource socket)" returns="void" doc="U Closes a file descriptor" ilk="function" src="sockets.c"/>
      <scope name="socket_write" signature="socket_write(resource socket, string buf[, int length])" returns="int" doc="Writes the buffer to the socket resource length is&#10;optional" ilk="function" src="sockets.c"/>
      <scope name="socket_read" signature="socket_read(resource socket, int length [, int type])" returns="string" doc="U Reads a maximum of length bytes from socket" ilk="function" src="sockets.c"/>
      <scope name="socket_getsockname" signature="socket_getsockname(resource socket, string &amp;addr[, int &amp;port])" returns="bool" doc="Queries the remote side of the given socket which may&#10;either result in host port or in a UNIX filesystem" ilk="function" src="sockets.c"/>
      <scope name="socket_getpeername" signature="socket_getpeername(resource socket, string &amp;addr[, int &amp;port])" returns="bool" doc="Queries the remote side of the given socket which may&#10;either result in host port or in a UNIX filesystem" ilk="function" src="sockets.c"/>
      <scope name="socket_create" signature="socket_create(int domain, int type, int protocol)" returns="resource" doc="U Creates an endpoint for communication in the domain&#10;specified by domain of type specified by type" ilk="function" src="sockets.c"/>
      <scope name="socket_connect" signature="socket_connect(resource socket, string addr [, int port])" returns="bool" doc="Opens a connection to addr port on the socket specified&#10;by socket" ilk="function" src="sockets.c"/>
      <scope name="socket_strerror" signature="socket_strerror(int errno)" returns="string" doc="Returns a string describing an error" ilk="function" src="sockets.c"/>
      <scope name="socket_bind" signature="socket_bind(resource socket, string addr [, int port])" returns="bool" doc="Binds an open socket to a listening port port is only&#10;specified in AF INET family" ilk="function" src="sockets.c"/>
      <scope name="socket_recv" signature="socket_recv(resource socket, string &amp;buf, int len, int flags)" returns="int" doc="Receives data from a connected socket" ilk="function" src="sockets.c"/>
      <scope name="socket_send" signature="socket_send(resource socket, string buf, int len, int flags)" returns="int" doc="Sends data to a connected socket" ilk="function" src="sockets.c"/>
      <scope name="socket_recvfrom" signature="socket_recvfrom(resource socket, string &amp;buf, int len, int flags, string &amp;name [, int &amp;port])" returns="int" doc="Receives data from a socket connected or not" ilk="function" src="sockets.c"/>
      <scope name="socket_sendto" signature="socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])" returns="int" doc="Sends a message to a socket whether it is connected or&#10;not" ilk="function" src="sockets.c"/>
      <scope name="socket_get_option" signature="socket_get_option(resource socket, int level, int optname)" returns="mixed" doc="U Gets socket options for the socket" ilk="function" src="sockets.c"/>
      <scope name="socket_set_option" signature="socket_set_option(resource socket, int level, int optname, int" returns="bool" doc="Sets socket options for the socket" ilk="function" src="sockets.c"/>
      <scope name="socket_create_pair" signature="socket_create_pair(int domain, int type, int protocol, array &amp;fd)" returns="bool" doc="U Creates a pair of indistinguishable sockets and&#10;stores them in fds" ilk="function" src="sockets.c"/>
      <scope name="socket_shutdown" signature="socket_shutdown(resource socket[, int how])" returns="bool" doc="U Shuts down a socket for receiving sending or both" ilk="function" src="sockets.c"/>
      <scope name="socket_last_error" signature="socket_last_error([resource socket])" returns="int" doc="U Returns the last socket error either the last used or&#10;the provided socket resource" ilk="function" src="sockets.c"/>
      <scope name="socket_clear_error" signature="socket_clear_error([resource socket])" returns="void" doc="U Clears the error on the socket or the last error code" ilk="function" src="sockets.c"/>
      <scope name="token_get_all" signature="token_get_all(string source)" returns="array" doc="" ilk="function" src="tokenizer.c"/>
      <scope name="token_name" signature="token_name(int type)" returns="string" doc="" ilk="function" src="tokenizer.c"/>
      <scope name="xmlrpc_encode_request" signature="xmlrpc_encode_request(string method, mixed params [, array output_options])" returns="string" doc="Generates XML for a method request" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_encode" signature="xmlrpc_encode(mixed value)" returns="string" doc="Generates XML for a PHP value" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_decode_request" signature="xmlrpc_decode_request(string xml, string&amp; method [, string encoding])" returns="array" doc="Decodes XML into native PHP types" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_decode" signature="xmlrpc_decode(string xml [, string encoding])" returns="array" doc="Decodes XML into native PHP types" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_create" signature="xmlrpc_server_create(void)" returns="resource" doc="Creates an xmlrpc server" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_destroy" signature="xmlrpc_server_destroy(resource server)" returns="int" doc="Destroys server resources" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_register_method" signature="xmlrpc_server_register_method(resource server, string method_name, string function)" returns="bool" doc="Register a PHP function to handle method matching&#10;method name" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_register_introspection_callback" signature="xmlrpc_server_register_introspection_callback(resource server, string function)" returns="bool" doc="Register a PHP function to generate documentation" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_call_method" signature="xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options])" returns="mixed" doc="Parses XML requests and call methods" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_add_introspection_data" signature="xmlrpc_server_add_introspection_data(resource server, array desc)" returns="int" doc="Adds introspection documentation" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_parse_method_descriptions" signature="xmlrpc_parse_method_descriptions(string xml)" returns="array" doc="Decodes XML into a list of method descriptions" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_set_type" signature="xmlrpc_set_type(string value, string type)" returns="bool" doc="Sets xmlrpc type base or datetime for a PHP string&#10;value" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_get_type" signature="xmlrpc_get_type(mixed value)" returns="string" doc="Gets xmlrpc type for a PHP value Especially useful for&#10;base and datetime strings" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_is_fault" signature="xmlrpc_is_fault(array)" returns="bool" doc="Determines if an array value represents an XMLRPC fault" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="ftp_connect" signature="ftp_connect(string host [, int port [, int timeout]])" returns="resource" doc="Opens a FTP stream" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_ssl_connect" signature="ftp_ssl_connect(string host [, int port [, int timeout]])" returns="resource" doc="Opens a FTP-SSL stream" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_login" signature="ftp_login(resource stream, string username, string password)" returns="bool" doc="Logs into the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_pwd" signature="ftp_pwd(resource stream)" returns="string" doc="Returns the present working directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_cdup" signature="ftp_cdup(resource stream)" returns="bool" doc="Changes to the parent directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_chdir" signature="ftp_chdir(resource stream, string directory)" returns="bool" doc="Changes directories" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_exec" signature="ftp_exec(resource stream, string command)" returns="bool" doc="Requests execution of a program on the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_raw" signature="ftp_raw(resource stream, string command)" returns="array" doc="Sends a literal command to the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_mkdir" signature="ftp_mkdir(resource stream, string directory)" returns="string" doc="Creates a directory and returns the absolute path for&#10;the new directory or false on error" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_rmdir" signature="ftp_rmdir(resource stream, string directory)" returns="bool" doc="Removes a directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_chmod" signature="ftp_chmod(resource stream, int mode, string filename)" returns="int" doc="Sets permissions on a file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_alloc" signature="ftp_alloc(resource stream, int size[, &amp;response])" returns="bool" doc="Attempt to allocate space on the remote FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nlist" signature="ftp_nlist(resource stream, string directory)" returns="array" doc="Returns an array of filenames in the given directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_rawlist" signature="ftp_rawlist(resource stream, string directory [, bool recursive])" returns="array" doc="Returns a detailed listing of a directory as an array&#10;of output lines" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_systype" signature="ftp_systype(resource stream)" returns="string" doc="Returns the system type identifier" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_fget" signature="ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" returns="bool" doc="Retrieves a file from the FTP server and writes it to&#10;an open file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_fget" signature="ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" returns="int" doc="Retrieves a file from the FTP server asynchronly and&#10;writes it to an open file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_pasv" signature="ftp_pasv(resource stream, bool pasv)" returns="bool" doc="Turns passive mode on or off" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_get" signature="ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" returns="bool" doc="Retrieves a file from the FTP server and writes it to a&#10;local file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_get" signature="ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" returns="int" doc="Retrieves a file from the FTP server nbhronly and&#10;writes it to a local file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_continue" signature="ftp_nb_continue(resource stream)" returns="int" doc="Continues retrieving sending a file nbronously" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_fput" signature="ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" returns="bool" doc="Stores a file from an open file to the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_fput" signature="ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" returns="int" doc="Stores a file from an open file to the FTP server&#10;nbronly" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_put" signature="ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" returns="bool" doc="Stores a file on the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_put" signature="ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" returns="int" doc="Stores a file on the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_size" signature="ftp_size(resource stream, string filename)" returns="int" doc="Returns the size of the file or - on error" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_mdtm" signature="ftp_mdtm(resource stream, string filename)" returns="int" doc="Returns the last modification time of the file or - on&#10;error" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_rename" signature="ftp_rename(resource stream, string src, string dest)" returns="bool" doc="Renames the given file to a new path" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_delete" signature="ftp_delete(resource stream, string file)" returns="bool" doc="Deletes a file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_site" signature="ftp_site(resource stream, string cmd)" returns="bool" doc="Sends a SITE command to the server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_close" signature="ftp_close(resource stream)" returns="bool" doc="Closes the FTP stream" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_set_option" signature="ftp_set_option(resource stream, int option, mixed value)" returns="bool" doc="Sets an FTP option" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_get_option" signature="ftp_get_option(resource stream, int option)" returns="mixed" doc="Gets an FTP option" ilk="function" src="php_ftp.c"/>
      <scope name="ereg" signature="ereg(string pattern, string string [, array registers])" returns="int" doc="Regular expression match" ilk="function" src="ereg.c"/>
      <scope name="eregi" signature="eregi(string pattern, string string [, array registers])" returns="int" doc="Case-insensitive regular expression match" ilk="function" src="ereg.c"/>
      <scope name="ereg_replace" signature="ereg_replace(string pattern, string replacement, string string)" returns="string" doc="Replace regular expression" ilk="function" src="ereg.c"/>
      <scope name="eregi_replace" signature="eregi_replace(string pattern, string replacement, string string)" returns="string" doc="Case insensitive replace regular expression" ilk="function" src="ereg.c"/>
      <scope name="split" signature="split(string pattern, string string [, int limit])" returns="array" doc="Split string into array by regular expression" ilk="function" src="ereg.c"/>
      <scope name="spliti" signature="spliti(string pattern, string string [, int limit])" returns="array" doc="Split string into array by regular expression&#10;case-insensitive" ilk="function" src="ereg.c"/>
      <scope name="sql_regcase" signature="sql_regcase(string string)" returns="string" doc="Make regular expression for case insensitive match" ilk="function" src="ereg.c"/>
      <scope name="ldap_connect" signature="ldap_connect([string host [, int port [, string wallet [, string wallet_passwd [, int authmode]]]]])" returns="resource" doc="Connect to an LDAP server" ilk="function" src="ldap.c"/>
      <scope name="ldap_bind" signature="ldap_bind(resource link [, string dn [, string password]])" returns="bool" doc="Bind to LDAP directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_sasl_bind" signature="ldap_sasl_bind(resource link [, string binddn [, string password [, string sasl_mech [, string sasl_realm [, string sasl_authc_id [, string sasl_authz_id [, string props]]]]]]])" returns="bool" doc="Bind to LDAP directory using SASL" ilk="function" src="ldap.c"/>
      <scope name="ldap_unbind" signature="ldap_unbind(resource link)" returns="bool" doc="Unbind from LDAP directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_read" signature="ldap_read(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" returns="resource" doc="Read an entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_list" signature="ldap_list(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" returns="resource" doc="Single-level search" ilk="function" src="ldap.c"/>
      <scope name="ldap_search" signature="ldap_search(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" returns="resource" doc="Search LDAP tree under base dn" ilk="function" src="ldap.c"/>
      <scope name="ldap_free_result" signature="ldap_free_result(resource result)" returns="bool" doc="Free result memory" ilk="function" src="ldap.c"/>
      <scope name="ldap_count_entries" signature="ldap_count_entries(resource link, resource result)" returns="int" doc="Count the number of entries in a search result" ilk="function" src="ldap.c"/>
      <scope name="ldap_first_entry" signature="ldap_first_entry(resource link, resource result)" returns="resource" doc="Return first result id" ilk="function" src="ldap.c"/>
      <scope name="ldap_next_entry" signature="ldap_next_entry(resource link, resource result_entry)" returns="resource" doc="Get next result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_entries" signature="ldap_get_entries(resource link, resource result)" returns="array" doc="Get all result entries" ilk="function" src="ldap.c"/>
      <scope name="ldap_first_attribute" signature="ldap_first_attribute(resource link, resource result_entry)" returns="string" doc="Return first attribute" ilk="function" src="ldap.c"/>
      <scope name="ldap_next_attribute" signature="ldap_next_attribute(resource link, resource result_entry)" returns="string" doc="Get the next attribute in result" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_attributes" signature="ldap_get_attributes(resource link, resource result_entry)" returns="array" doc="Get attributes from a search result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_values_len" signature="ldap_get_values_len(resource link, resource result_entry, string attribute)" returns="array" doc="Get all values with lengths from a result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_dn" signature="ldap_get_dn(resource link, resource result_entry)" returns="string" doc="Get the DN of a result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_explode_dn" signature="ldap_explode_dn(string dn, int with_attrib)" returns="array" doc="Splits DN into its component parts" ilk="function" src="ldap.c"/>
      <scope name="ldap_dn2ufn" signature="ldap_dn2ufn(string dn)" returns="string" doc="Convert DN to User Friendly Naming format" ilk="function" src="ldap.c"/>
      <scope name="ldap_add" signature="ldap_add(resource link, string dn, array entry)" returns="bool" doc="Add entries to LDAP directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_mod_replace" signature="ldap_mod_replace(resource link, string dn, array entry)" returns="bool" doc="Replace attribute values with new ones" ilk="function" src="ldap.c"/>
      <scope name="ldap_mod_add" signature="ldap_mod_add(resource link, string dn, array entry)" returns="bool" doc="Add attribute values to current" ilk="function" src="ldap.c"/>
      <scope name="ldap_mod_del" signature="ldap_mod_del(resource link, string dn, array entry)" returns="bool" doc="Delete attribute values" ilk="function" src="ldap.c"/>
      <scope name="ldap_delete" signature="ldap_delete(resource link, string dn)" returns="bool" doc="Delete an entry from a directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_errno" signature="ldap_errno(resource link)" returns="int" doc="Get the current ldap error number" ilk="function" src="ldap.c"/>
      <scope name="ldap_err2str" signature="ldap_err2str(int errno)" returns="string" doc="Convert error number to error string" ilk="function" src="ldap.c"/>
      <scope name="ldap_error" signature="ldap_error(resource link)" returns="string" doc="Get the current ldap error string" ilk="function" src="ldap.c"/>
      <scope name="ldap_compare" signature="ldap_compare(resource link, string dn, string attr, string value)" returns="bool" doc="Determine if an entry has a specific value for one of&#10;its attributes" ilk="function" src="ldap.c"/>
      <scope name="ldap_sort" signature="ldap_sort(resource link, resource result, string sortfilter)" returns="bool" doc="Sort LDAP result entries" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_option" signature="ldap_get_option(resource link, int option, mixed retval)" returns="bool" doc="Get the current value of various session-wide&#10;parameters" ilk="function" src="ldap.c"/>
      <scope name="ldap_set_option" signature="ldap_set_option(resource link, int option, mixed newval)" returns="bool" doc="Set the value of various session-wide parameters" ilk="function" src="ldap.c"/>
      <scope name="ldap_parse_result" signature="ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)" returns="bool" doc="Extract information from result" ilk="function" src="ldap.c"/>
      <scope name="ldap_first_reference" signature="ldap_first_reference(resource link, resource result)" returns="resource" doc="Return first reference" ilk="function" src="ldap.c"/>
      <scope name="ldap_next_reference" signature="ldap_next_reference(resource link, resource reference_entry)" returns="resource" doc="Get next reference" ilk="function" src="ldap.c"/>
      <scope name="ldap_parse_reference" signature="ldap_parse_reference(resource link, resource reference_entry, array referrals)" returns="bool" doc="Extract information from reference entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_rename" signature="ldap_rename(resource link, string dn, string newrdn, string newparent, bool deleteoldrdn)" returns="bool" doc="Modify the name of an entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_start_tls" signature="ldap_start_tls(resource link)" returns="bool" doc="Start TLS" ilk="function" src="ldap.c"/>
      <scope name="ldap_set_rebind_proc" signature="ldap_set_rebind_proc(resource link, string callback)" returns="bool" doc="Set a callback function to do re-binds on referral&#10;chasing" ilk="function" src="ldap.c"/>
      <scope name="ldap_t61_to_8859" signature="ldap_t61_to_8859(string value)" returns="string" doc="Translate t characters to characters" ilk="function" src="ldap.c"/>
      <scope name="ldap_8859_to_t61" signature="ldap_8859_to_t61(string value)" returns="string" doc="Translate characters to t characters" ilk="function" src="ldap.c"/>
      <scope name="mb_language" signature="mb_language([string language])" returns="string" doc="Sets the current language or Returns the current&#10;language as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_internal_encoding" signature="mb_internal_encoding([string encoding])" returns="string" doc="Sets the current internal encoding or Returns the&#10;current internal encoding as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_http_input" signature="mb_http_input([string type])" returns="mixed" doc="Returns the input encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_http_output" signature="mb_http_output([string encoding])" returns="string" doc="Sets the current output encoding or returns the current&#10;output encoding as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_detect_order" signature="mb_detect_order([mixed encoding-list])" returns="array" doc="Sets the current detect order or Return the current&#10;detect order as a array" ilk="function" src="mbstring.c"/>
      <scope name="mb_substitute_character" signature="mb_substitute_character([mixed substchar])" returns="mixed" doc="Sets the current substitute character or returns the&#10;current substitute character" ilk="function" src="mbstring.c"/>
      <scope name="mb_preferred_mime_name" signature="mb_preferred_mime_name(string encoding)" returns="string" doc="Return the preferred MIME name charset as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_parse_str" signature="mb_parse_str(string encoded_string [, array result])" returns="bool" doc="Parses GET POST COOKIE data and sets global variables" ilk="function" src="mbstring.c"/>
      <scope name="mb_output_handler" signature="mb_output_handler(string contents, int status)" returns="string" doc="Returns string in output buffer converted to the http&#10;output encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_strlen" signature="mb_strlen(string str [, string encoding])" returns="int" doc="Get character numbers of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strpos" signature="mb_strpos(string haystack, string needle [, int offset [, string encoding]])" returns="int" doc="Find position of first occurrence of a string within&#10;another" ilk="function" src="mbstring.c"/>
      <scope name="mb_strrpos" signature="mb_strrpos(string haystack, string needle [, int offset [, string encoding]])" returns="int" doc="Find position of last occurrence of a string within&#10;another" ilk="function" src="mbstring.c"/>
      <scope name="mb_stripos" signature="mb_stripos(string haystack, string needle [, int offset [, string encoding]])" returns="int" doc="Finds position of first occurrence of a string within&#10;another case insensitive" ilk="function" src="mbstring.c"/>
      <scope name="mb_strripos" signature="mb_strripos(string haystack, string needle [, int offset [, string encoding]])" returns="int" doc="Finds position of last occurrence of a string within&#10;another case insensitive" ilk="function" src="mbstring.c"/>
      <scope name="mb_strstr" signature="mb_strstr(string haystack, string needle[, bool part[, string encoding]])" returns="string" doc="Finds first occurrence of a string within another" ilk="function" src="mbstring.c"/>
      <scope name="mb_strrchr" signature="mb_strrchr(string haystack, string needle[, bool part[, string encoding]])" returns="string" doc="Finds the last occurrence of a character in a string&#10;within another" ilk="function" src="mbstring.c"/>
      <scope name="mb_stristr" signature="mb_stristr(string haystack, string needle[, bool part[, string encoding]])" returns="string" doc="Finds first occurrence of a string within another case&#10;insensitive" ilk="function" src="mbstring.c"/>
      <scope name="mb_strrichr" signature="mb_strrichr(string haystack, string needle[, bool part[, string encoding]])" returns="string" doc="Finds the last occurrence of a character in a string&#10;within another case insensitive" ilk="function" src="mbstring.c"/>
      <scope name="mb_substr_count" signature="mb_substr_count(string haystack, string needle [, string encoding])" returns="int" doc="Count the number of substring occurrences" ilk="function" src="mbstring.c"/>
      <scope name="mb_substr" signature="mb_substr(string str, int start [, int length [, string encoding]])" returns="string" doc="Returns part of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strcut" signature="mb_strcut(string str, int start [, int length [, string encoding]])" returns="string" doc="Returns part of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strwidth" signature="mb_strwidth(string str [, string encoding])" returns="int" doc="Gets terminal width of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strimwidth" signature="mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])" returns="string" doc="Trim the string in terminal width" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_encoding" signature="mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])" returns="string" doc="Returns converted string in desired encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_case" signature="mb_convert_case(string sourcestring, int mode [, string encoding])" returns="string" doc="Returns a case-folded version of sourcestring" ilk="function" src="mbstring.c"/>
      <scope name="mb_strtoupper" signature="mb_strtoupper(string sourcestring [, string encoding])" returns="string" doc="Returns a uppercased version of sourcestring" ilk="function" src="mbstring.c"/>
      <scope name="mb_strtolower" signature="mb_strtolower(string sourcestring [, string encoding])" returns="string" doc="Returns a lowercased version of sourcestring" ilk="function" src="mbstring.c"/>
      <scope name="mb_detect_encoding" signature="mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])" returns="string" doc="Encodings of the given string is returned as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_list_encodings" signature="mb_list_encodings()" returns="mixed" doc="Returns an array of all supported entity encodings" ilk="function" src="mbstring.c"/>
      <scope name="mb_encoding_aliases" signature="mb_encoding_aliases(string encoding)" returns="array" doc="Returns an array of the aliases of a given encoding&#10;name" ilk="function" src="mbstring.c"/>
      <scope name="mb_encode_mimeheader" signature="mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed [, int indent]]]])" returns="string" doc="Converts the string to MIME encoded-word in the format&#10;of charset B" ilk="function" src="mbstring.c"/>
      <scope name="mb_decode_mimeheader" signature="mb_decode_mimeheader(string string)" returns="string" doc="Decodes the MIME encoded-word in the string" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_kana" signature="mb_convert_kana(string str [, string option] [, string encoding])" returns="string" doc="Conversion between full-width character and half-width&#10;character Japanese" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_variables" signature="mb_convert_variables(string to-encoding, mixed from-encoding, mixed vars [, ...])" returns="string" doc="Converts the string resource in variables to desired&#10;encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_encode_numericentity" signature="mb_encode_numericentity(string string, array convmap [, string encoding])" returns="string" doc="Converts specified characters to HTML numeric entities" ilk="function" src="mbstring.c"/>
      <scope name="mb_decode_numericentity" signature="mb_decode_numericentity(string string, array convmap [, string encoding])" returns="string" doc="Converts HTML numeric entities to character code" ilk="function" src="mbstring.c"/>
      <scope name="mb_send_mail" signature="mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" returns="int" doc="Sends an email message with MIME scheme" ilk="function" src="mbstring.c"/>
      <scope name="mb_get_info" signature="mb_get_info([string type])" returns="mixed" doc="Returns the current settings of mbstring" ilk="function" src="mbstring.c"/>
      <scope name="mb_check_encoding" signature="mb_check_encoding([string var[, string encoding]])" returns="bool" doc="Check if the string is valid for the specified encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_regex_encoding" signature="mb_regex_encoding([string encoding])" returns="string" doc="Returns the current encoding for regex as a string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg" signature="mb_ereg(string pattern, string string [, array registers])" returns="int" doc="Regular expression match for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_eregi" signature="mb_eregi(string pattern, string string [, array registers])" returns="int" doc="Case-insensitive regular expression match for multibyte&#10;string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_replace" signature="mb_ereg_replace(string pattern, string replacement, string string [, string option])" returns="string" doc="Replace regular expression for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_eregi_replace" signature="mb_eregi_replace(string pattern, string replacement, string string)" returns="string" doc="Case insensitive replace regular expression for&#10;multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_split" signature="mb_split(string pattern, string string [, int limit])" returns="array" doc="split multibyte string into array by regular expression" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_match" signature="mb_ereg_match(string pattern, string string [,string option])" returns="bool" doc="Regular expression match for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search" signature="mb_ereg_search([string pattern[, string option]])" returns="bool" doc="Regular expression search for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_pos" signature="mb_ereg_search_pos([string pattern[, string option]])" returns="array" doc="Regular expression search for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_regs" signature="mb_ereg_search_regs([string pattern[, string option]])" returns="array" doc="Regular expression search for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_init" signature="mb_ereg_search_init(string string [, string pattern[, string option]])" returns="bool" doc="Initialize string and regular expression for search" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_getregs" signature="mb_ereg_search_getregs(void)" returns="array" doc="Get matched substring of the last time" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_getpos" signature="mb_ereg_search_getpos(void)" returns="int" doc="Get search start position" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_setpos" signature="mb_ereg_search_setpos(int position)" returns="bool" doc="Set search start position" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_regex_set_options" signature="mb_regex_set_options([string options])" returns="string" doc="Set or get the default options for mbregex functions" ilk="function" src="php_mbregex.c"/>
      <scope name="bcadd" signature="bcadd(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the sum of two arbitrary precision numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcsub" signature="bcsub(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the difference between two arbitrary precision&#10;numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcmul" signature="bcmul(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the multiplication of two arbitrary precision&#10;numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcdiv" signature="bcdiv(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the quotient of two arbitrary precision numbers&#10;division" ilk="function" src="bcmath.c"/>
      <scope name="bcmod" signature="bcmod(string left_operand, string right_operand)" returns="string" doc="Returns the modulus of the two arbitrary precision&#10;operands" ilk="function" src="bcmath.c"/>
      <scope name="bcpowmod" signature="bcpowmod(string x, string y, string mod [, int scale])" returns="string" doc="Returns the value of an arbitrary precision number&#10;raised to the power of another reduced by a modulous" ilk="function" src="bcmath.c"/>
      <scope name="bcpow" signature="bcpow(string x, string y [, int scale])" returns="string" doc="Returns the value of an arbitrary precision number&#10;raised to the power of another" ilk="function" src="bcmath.c"/>
      <scope name="bcsqrt" signature="bcsqrt(string operand [, int scale])" returns="string" doc="Returns the square root of an arbitray precision number" ilk="function" src="bcmath.c"/>
      <scope name="bccomp" signature="bccomp(string left_operand, string right_operand [, int scale])" returns="int" doc="Compares two arbitrary precision numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcscale" signature="bcscale(int scale)" returns="bool" doc="Sets default scale parameter for all bc math functions" ilk="function" src="bcmath.c"/>
      <scope name="sybase_connect" signature="sybase_connect([string host [, string user [, string password [, string charset [, string appname [, bool new]]]]]])" returns="int" doc="Open Sybase server connection" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_pconnect" signature="sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])" returns="int" doc="Open persistent Sybase connection" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_close" signature="sybase_close([resource link_id])" returns="bool" doc="Close Sybase connection" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_select_db" signature="sybase_select_db(string database [, resource link_id])" returns="bool" doc="Select Sybase database" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_query" signature="sybase_query(string query [, resource link_id])" returns="int" doc="Send Sybase query" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_unbuffered_query" signature="sybase_unbuffered_query(string query [, resource link_id])" returns="int" doc="Send Sybase query" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_free_result" signature="sybase_free_result(resource result)" returns="bool" doc="Free result memory" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_get_last_message" signature="sybase_get_last_message(void)" returns="string" doc="Returns the last message from server over min message&#10;severity" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_num_rows" signature="sybase_num_rows(resource result)" returns="int" doc="Get number of rows in result" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_num_fields" signature="sybase_num_fields(resource result)" returns="int" doc="Get number of fields in result" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_row" signature="sybase_fetch_row(resource result)" returns="array" doc="Get row as enumerated array" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_object" signature="sybase_fetch_object(resource result [, mixed object])" returns="object" doc="Fetch row as object" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_array" signature="sybase_fetch_array(resource result)" returns="array" doc="Fetch row as array" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_assoc" signature="sybase_fetch_assoc(resource result)" returns="array" doc="Fetch row as array without numberic indices" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_data_seek" signature="sybase_data_seek(resource result, int offset)" returns="bool" doc="Move internal row pointer" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_field" signature="sybase_fetch_field(resource result [, int offset])" returns="object" doc="Get field information" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_field_seek" signature="sybase_field_seek(resource result, int offset)" returns="bool" doc="Set field offset" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_result" signature="sybase_result(resource result, int row, mixed field)" returns="string" doc="Get result data" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_affected_rows" signature="sybase_affected_rows([resource link_id])" returns="int" doc="Get number of affected rows in last query" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_min_client_severity" signature="sybase_min_client_severity(int severity)" returns="void" doc="Sets minimum client severity" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_min_server_severity" signature="sybase_min_server_severity(int severity)" returns="void" doc="Sets minimum server severity" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_deadlock_retry_count" signature="sybase_deadlock_retry_count(int retry_count)" returns="void" doc="Sets deadlock retry count" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_set_message_handler" signature="sybase_set_message_handler(mixed error_func [, resource connection])" returns="bool" doc="Set the error handler to be called when a server&#10;message is raised If error func is NULL the handler" ilk="function" src="php_sybase_ct.c"/>
      <scope name="json_encode" signature="json_encode(mixed data [, int options])" returns="string" doc="Returns the JSON representation of a value" ilk="function" src="json.c"/>
      <scope name="json_decode" signature="json_decode(string json [, bool assoc [, long depth]])" returns="mixed" doc="Decodes the JSON representation into a PHP value" ilk="function" src="json.c"/>
      <scope name="json_last_error" signature="json_last_error()" returns="int" doc="Returns the error code of the last json decode" ilk="function" src="json.c"/>
      <scope name="mcrypt_module_open" signature="mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)" returns="resource" doc="Opens the module of the algorithm and the mode to be&#10;used" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_generic_init" signature="mcrypt_generic_init(resource td, string key, string iv)" returns="int" doc="This function initializes all buffers for the specific&#10;module" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_generic" signature="mcrypt_generic(resource td, string data)" returns="string" doc="This function encrypts the plaintext" ilk="function" src="mcrypt.c"/>
      <scope name="mdecrypt_generic" signature="mdecrypt_generic(resource td, string data)" returns="string" doc="This function decrypts the plaintext" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_supported_key_sizes" signature="mcrypt_enc_get_supported_key_sizes(resource td)" returns="array" doc="This function decrypts the crypttext" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_self_test" signature="mcrypt_enc_self_test(resource td)" returns="int" doc="This function runs the self test on the algorithm&#10;specified by the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_close" signature="mcrypt_module_close(resource td)" returns="bool" doc="Free the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_generic_deinit" signature="mcrypt_generic_deinit(resource td)" returns="bool" doc="This function terminates encrypt specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_is_block_algorithm_mode" signature="mcrypt_enc_is_block_algorithm_mode(resource td)" returns="bool" doc="Returns TRUE if the mode is for use with block&#10;algorithms" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_is_block_algorithm" signature="mcrypt_enc_is_block_algorithm(resource td)" returns="bool" doc="Returns TRUE if the alrogithm is a block algorithms" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_is_block_mode" signature="mcrypt_enc_is_block_mode(resource td)" returns="bool" doc="Returns TRUE if the mode outputs blocks" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_block_size" signature="mcrypt_enc_get_block_size(resource td)" returns="int" doc="Returns the block size of the cipher specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_key_size" signature="mcrypt_enc_get_key_size(resource td)" returns="int" doc="Returns the maximum supported key size in bytes of the&#10;algorithm specified by the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_iv_size" signature="mcrypt_enc_get_iv_size(resource td)" returns="int" doc="Returns the size of the IV in bytes of the algorithm&#10;specified by the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_algorithms_name" signature="mcrypt_enc_get_algorithms_name(resource td)" returns="string" doc="Returns the name of the algorithm specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_modes_name" signature="mcrypt_enc_get_modes_name(resource td)" returns="string" doc="Returns the name of the mode specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_self_test" signature="mcrypt_module_self_test(string algorithm [, string lib_dir])" returns="bool" doc="Does a self test of the module module" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_is_block_algorithm_mode" signature="mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])" returns="bool" doc="Returns TRUE if the mode is for use with block&#10;algorithms" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_is_block_algorithm" signature="mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])" returns="bool" doc="Returns TRUE if the algorithm is a block algorithm" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_is_block_mode" signature="mcrypt_module_is_block_mode(string mode [, string lib_dir])" returns="bool" doc="Returns TRUE if the mode outputs blocks of bytes" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_get_algo_block_size" signature="mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])" returns="int" doc="Returns the block size of the algorithm" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_get_algo_key_size" signature="mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])" returns="int" doc="Returns the maximum supported key size of the algorithm" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_get_supported_key_sizes" signature="mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])" returns="array" doc="This function decrypts the crypttext" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_list_algorithms" signature="mcrypt_list_algorithms([string lib_dir])" returns="array" doc="List all algorithms in module dir" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_list_modes" signature="mcrypt_list_modes([string lib_dir])" returns="array" doc="List all modes module dir" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_key_size" signature="mcrypt_get_key_size(string cipher, string module)" returns="int" doc="Get the key size of cipher" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_block_size" signature="mcrypt_get_block_size(string cipher, string module)" returns="int" doc="Get the key size of cipher" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_iv_size" signature="mcrypt_get_iv_size(string cipher, string module)" returns="int" doc="Get the IV size of cipher Usually the same as the&#10;blocksize" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_cipher_name" signature="mcrypt_get_cipher_name(string cipher)" returns="string" doc="Get the key size of cipher" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_encrypt" signature="mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)" returns="string" doc="OFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_decrypt" signature="mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)" returns="string" doc="OFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_ecb" signature="mcrypt_ecb(int cipher, string key, string data, int mode, string iv)" returns="string" doc="ECB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_cbc" signature="mcrypt_cbc(int cipher, string key, string data, int mode, string iv)" returns="string" doc="CBC crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_cfb" signature="mcrypt_cfb(int cipher, string key, string data, int mode, string iv)" returns="string" doc="CFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_ofb" signature="mcrypt_ofb(int cipher, string key, string data, int mode, string iv)" returns="string" doc="OFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_create_iv" signature="mcrypt_create_iv(int size, int source)" returns="string" doc="Create an initialization vector IV" ilk="function" src="mcrypt.c"/>
      <scope name="posix_kill" signature="posix_kill(int pid, int sig)" returns="bool" doc="Send a signal to a process POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpid" signature="posix_getpid(void)" returns="int" doc="Get the current process id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getppid" signature="posix_getppid(void)" returns="int" doc="Get the parent process id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getuid" signature="posix_getuid(void)" returns="int" doc="Get the current user id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getgid" signature="posix_getgid(void)" returns="int" doc="Get the current group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_geteuid" signature="posix_geteuid(void)" returns="int" doc="Get the current effective user id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getegid" signature="posix_getegid(void)" returns="int" doc="Get the current effective group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setuid" signature="posix_setuid(long uid)" returns="bool" doc="Set user id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setgid" signature="posix_setgid(int uid)" returns="bool" doc="Set group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_seteuid" signature="posix_seteuid(long uid)" returns="bool" doc="Set effective user id" ilk="function" src="posix.c"/>
      <scope name="posix_setegid" signature="posix_setegid(long uid)" returns="bool" doc="Set effective group id" ilk="function" src="posix.c"/>
      <scope name="posix_getgroups" signature="posix_getgroups(void)" returns="array" doc="Get supplementary group id's POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getlogin" signature="posix_getlogin(void)" returns="string" doc="Get user name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpgrp" signature="posix_getpgrp(void)" returns="int" doc="Get current process group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setsid" signature="posix_setsid(void)" returns="int" doc="Create session and set process group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setpgid" signature="posix_setpgid(int pid, int pgid)" returns="bool" doc="Set process group id for job control POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpgid" signature="posix_getpgid(void)" returns="int" doc="Get the process group id of the specified process This&#10;is not a POSIX function but a SVR ism so" ilk="function" src="posix.c"/>
      <scope name="posix_getsid" signature="posix_getsid(void)" returns="int" doc="Get process group id of session leader This is not a&#10;POSIX function but a SVR ism so be compile" ilk="function" src="posix.c"/>
      <scope name="posix_uname" signature="posix_uname(void)" returns="array" doc="Get system name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_times" signature="posix_times(void)" returns="array" doc="Get process times POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_ctermid" signature="posix_ctermid(void)" returns="string" doc="Generate terminal path name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_ttyname" signature="posix_ttyname(int fd)" returns="string" doc="Determine terminal device name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_isatty" signature="posix_isatty(int fd)" returns="bool" doc="Determine if filedesc is a tty POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getcwd" signature="posix_getcwd(void)" returns="string" doc="Get working directory pathname POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_mkfifo" signature="posix_mkfifo(string pathname, int mode)" returns="bool" doc="Make a FIFO special file POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_mknod" signature="posix_mknod(string pathname, int mode [, int major [, int minor]])" returns="bool" doc="Make a special or ordinary file POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_access" signature="posix_access(string file [, int mode])" returns="bool" doc="Determine accessibility of a file POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getgrnam" signature="posix_getgrnam(string groupname)" returns="array" doc="Group database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getgrgid" signature="posix_getgrgid(long gid)" returns="array" doc="Group database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpwnam" signature="posix_getpwnam(string groupname)" returns="array" doc="User database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpwuid" signature="posix_getpwuid(long uid)" returns="array" doc="User database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getrlimit" signature="posix_getrlimit(void)" returns="array" doc="Get system resource consumption limits This is not a&#10;POSIX function but a BSDism and a SVR ism We compile" ilk="function" src="posix.c"/>
      <scope name="posix_get_last_error" signature="posix_get_last_error(void)" returns="int" doc="Retrieve the error number set by the last posix&#10;function which failed" ilk="function" src="posix.c"/>
      <scope name="posix_strerror" signature="posix_strerror(int errno)" returns="string" doc="Retrieve the system error message associated with the&#10;given errno" ilk="function" src="posix.c"/>
      <scope name="posix_initgroups" signature="posix_initgroups(string name, int base_group_id)" returns="bool" doc="Calculate the group access list for the user specified&#10;in name" ilk="function" src="posix.c"/>
      <scope name="ctype_alnum" signature="ctype_alnum(mixed c)" returns="bool" doc="Checks for alphanumeric character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_alpha" signature="ctype_alpha(mixed c)" returns="bool" doc="Checks for alphabetic character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_cntrl" signature="ctype_cntrl(mixed c)" returns="bool" doc="Checks for control character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_digit" signature="ctype_digit(mixed c)" returns="bool" doc="Checks for numeric character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_lower" signature="ctype_lower(mixed c)" returns="bool" doc="Checks for lowercase character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_graph" signature="ctype_graph(mixed c)" returns="bool" doc="Checks for any printable character s except space" ilk="function" src="ctype.c"/>
      <scope name="ctype_print" signature="ctype_print(mixed c)" returns="bool" doc="Checks for printable character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_punct" signature="ctype_punct(mixed c)" returns="bool" doc="Checks for any printable character which is not&#10;whitespace or an alphanumeric character" ilk="function" src="ctype.c"/>
      <scope name="ctype_space" signature="ctype_space(mixed c)" returns="bool" doc="Checks for whitespace character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_upper" signature="ctype_upper(mixed c)" returns="bool" doc="Checks for uppercase character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_xdigit" signature="ctype_xdigit(mixed c)" returns="bool" doc="Checks for character s representing a hexadecimal digit" ilk="function" src="ctype.c"/>
      <scope name="session_set_cookie_params" signature="session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure[, bool httponly]]]])" returns="void" doc="Set session cookie parameters" ilk="function" src="session.c"/>
      <scope name="session_get_cookie_params" signature="session_get_cookie_params(void)" returns="array" doc="Return the session cookie parameters" ilk="function" src="session.c"/>
      <scope name="session_name" signature="session_name([string newname])" returns="string" doc="Return the current session name If newname is given the&#10;session name is replaced with newname" ilk="function" src="session.c"/>
      <scope name="session_module_name" signature="session_module_name([string newname])" returns="string" doc="Return the current module name used for accessing&#10;session data If newname is given the module name is&#10;replaced with" ilk="function" src="session.c"/>
      <scope name="session_set_save_handler" signature="session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)" returns="void" doc="Sets user-level functions" ilk="function" src="session.c"/>
      <scope name="session_save_path" signature="session_save_path([string newname])" returns="string" doc="Return the current save path passed to module name If&#10;newname is given the save path is replaced with newname" ilk="function" src="session.c"/>
      <scope name="session_id" signature="session_id([string newid])" returns="string" doc="Return the current session id If newid is given the&#10;session id is replaced with newid" ilk="function" src="session.c"/>
      <scope name="session_regenerate_id" signature="session_regenerate_id([bool delete_old_session])" returns="bool" doc="Update the current session id with a newly generated&#10;one If delete old session is set to true remove the" ilk="function" src="session.c"/>
      <scope name="session_cache_limiter" signature="session_cache_limiter([string new_cache_limiter])" returns="string" doc="Return the current cache limiter If new cache limited&#10;is given the current cache limiter is replaced with new&#10;cache" ilk="function" src="session.c"/>
      <scope name="session_cache_expire" signature="session_cache_expire([int new_cache_expire])" returns="int" doc="Return the current cache expire If new cache expire is&#10;given the current cache expire is replaced with new&#10;cache" ilk="function" src="session.c"/>
      <scope name="session_encode" signature="session_encode(void)" returns="string" doc="Serializes the current setup and returns the serialized&#10;representation" ilk="function" src="session.c"/>
      <scope name="session_decode" signature="session_decode(string data)" returns="bool" doc="Deserializes data and reinitializes the variables" ilk="function" src="session.c"/>
      <scope name="session_start" signature="session_start(void)" returns="bool" doc="Begin session - reinitializes freezed variables&#10;registers browsers etc" ilk="function" src="session.c"/>
      <scope name="session_destroy" signature="session_destroy(void)" returns="bool" doc="Destroy the current session and all data associated&#10;with it" ilk="function" src="session.c"/>
      <scope name="session_unset" signature="session_unset(void)" returns="void" doc="Unset all registered variables" ilk="function" src="session.c"/>
      <scope name="session_write_close" signature="session_write_close(void)" returns="void" doc="Write session data and end session" ilk="function" src="session.c"/>
      <scope name="session_register" signature="session_register(mixed var_names [, mixed ...])" returns="bool" doc="Adds varname s to the list of variables which are&#10;freezed at the session end" ilk="function" src="session.c"/>
      <scope name="session_unregister" signature="session_unregister(string varname)" returns="bool" doc="Removes varname from the list of variables which are&#10;freezed at the session end" ilk="function" src="session.c"/>
      <scope name="session_is_registered" signature="session_is_registered(string varname)" returns="bool" doc="Checks if a variable is registered in session" ilk="function" src="session.c"/>
      <scope name="xml_parser_create" signature="xml_parser_create([string encoding])" returns="resource" doc="Create an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_create_ns" signature="xml_parser_create_ns([string encoding [, string sep]])" returns="resource" doc="Create an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_set_object" signature="xml_set_object(resource parser, object &amp;obj)" returns="int" doc="Set up object which should be used for callbacks" ilk="function" src="xml.c"/>
      <scope name="xml_set_element_handler" signature="xml_set_element_handler(resource parser, string shdl, string ehdl)" returns="int" doc="Set up start and end element handlers" ilk="function" src="xml.c"/>
      <scope name="xml_set_character_data_handler" signature="xml_set_character_data_handler(resource parser, string hdl)" returns="int" doc="Set up character data handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_processing_instruction_handler" signature="xml_set_processing_instruction_handler(resource parser, string hdl)" returns="int" doc="Set up processing instruction PI handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_default_handler" signature="xml_set_default_handler(resource parser, string hdl)" returns="int" doc="Set up default handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_unparsed_entity_decl_handler" signature="xml_set_unparsed_entity_decl_handler(resource parser, string hdl)" returns="int" doc="Set up unparsed entity declaration handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_notation_decl_handler" signature="xml_set_notation_decl_handler(resource parser, string hdl)" returns="int" doc="Set up notation declaration handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_external_entity_ref_handler" signature="xml_set_external_entity_ref_handler(resource parser, string hdl)" returns="int" doc="Set up external entity reference handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_start_namespace_decl_handler" signature="xml_set_start_namespace_decl_handler(resource parser, string hdl)" returns="int" doc="Set up character data handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_end_namespace_decl_handler" signature="xml_set_end_namespace_decl_handler(resource parser, string hdl)" returns="int" doc="Set up character data handler" ilk="function" src="xml.c"/>
      <scope name="xml_parse" signature="xml_parse(resource parser, string data [, int isFinal])" returns="int" doc="Start parsing an XML document" ilk="function" src="xml.c"/>
      <scope name="xml_parse_into_struct" signature="xml_parse_into_struct(resource parser, string data, array &amp;values [, array &amp;index ])" returns="int" doc="Parsing a XML document" ilk="function" src="xml.c"/>
      <scope name="xml_get_error_code" signature="xml_get_error_code(resource parser)" returns="int" doc="Get XML parser error code" ilk="function" src="xml.c"/>
      <scope name="xml_error_string" signature="xml_error_string(int code)" returns="string" doc="Get XML parser error string" ilk="function" src="xml.c"/>
      <scope name="xml_get_current_line_number" signature="xml_get_current_line_number(resource parser)" returns="int" doc="Get current line number for an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_get_current_column_number" signature="xml_get_current_column_number(resource parser)" returns="int" doc="Get current column number for an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_get_current_byte_index" signature="xml_get_current_byte_index(resource parser)" returns="int" doc="Get current byte index for an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_free" signature="xml_parser_free(resource parser)" returns="int" doc="Free an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_set_option" signature="xml_parser_set_option(resource parser, int option, mixed value)" returns="int" doc="Set options in an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_get_option" signature="xml_parser_get_option(resource parser, int option)" returns="int" doc="Get options from an XML parser" ilk="function" src="xml.c"/>
      <scope name="utf8_encode" signature="utf8_encode(string data)" returns="string" doc="Encodes an ISO- - string to UTF-" ilk="function" src="xml.c"/>
      <scope name="utf8_decode" signature="utf8_decode(string data)" returns="string" doc="Converts a UTF- encoded string to ISO- -" ilk="function" src="xml.c"/>
      <scope name="filter_has_var" signature="filter_has_var(constant type, string variable_name)" returns="mixed" doc="Returns true if the variable with the name 'name'&#10;exists in source" ilk="function" src="filter.c"/>
      <scope name="filter_input" signature="filter_input(constant type, string variable_name [, long filter [, mixed options]])" returns="mixed" doc="Returns the filtered variable 'name' from source type" ilk="function" src="filter.c"/>
      <scope name="filter_var" signature="filter_var(mixed variable [, long filter [, mixed options]])" returns="mixed" doc="Returns the filtered version of the vriable" ilk="function" src="filter.c"/>
      <scope name="filter_input_array" signature="filter_input_array(constant type, [, mixed options]])" returns="mixed" doc="Returns an array with all arguments defined in&#10;'definition'" ilk="function" src="filter.c"/>
      <scope name="filter_var_array" signature="filter_var_array(array data, [, mixed options]])" returns="mixed" doc="Returns an array with all arguments defined in&#10;'definition'" ilk="function" src="filter.c"/>
      <scope name="d" signature="d(string filtername)" returns="filter_i" doc="Returns the filter ID belonging to a named filter" ilk="function" src="filter.c"/>
      <scope name="simplexml_load_file" signature="simplexml_load_file(string filename [, string class_name [, int options [, string ns [, bool is_prefix]]]])" returns="simplemxml_element" doc="Load a filename and return a simplexml element object&#10;to allow for processing" ilk="function" src="simplexml.c"/>
      <scope name="simplexml_load_string" signature="simplexml_load_string(string data [, string class_name [, int options [, string ns [, bool is_prefix]]]])" returns="simplemxml_element" doc="Load a string and return a simplexml element object to&#10;allow for processing" ilk="function" src="simplexml.c"/>
      <scope name="simplexml_import_dom" signature="simplexml_import_dom(domNode node [, string class_name])" returns="simplemxml_element" doc="Get a simplexml element object from dom to allow for&#10;processing" ilk="function" src="simplexml.c"/>
      <scope name="imap_open" signature="imap_open(string mailbox, string user, string password [, int options [, int n_retries]])" returns="resource" doc="Open an IMAP stream to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_reopen" signature="imap_reopen(resource stream_id, string mailbox [, int options [, int n_retries]])" returns="bool" doc="Reopen an IMAP stream to a new mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_append" signature="imap_append(resource stream_id, string folder, string message [, string options])" returns="bool" doc="Append a new message to a specified mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_num_msg" signature="imap_num_msg(resource stream_id)" returns="int" doc="Gives the number of messages in the current mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_ping" signature="imap_ping(resource stream_id)" returns="bool" doc="Check if the IMAP stream is still active" ilk="function" src="php_imap.c"/>
      <scope name="imap_num_recent" signature="imap_num_recent(resource stream_id)" returns="int" doc="Gives the number of recent messages in current mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_get_quota" signature="imap_get_quota(resource stream_id, string qroot)" returns="array" doc="Returns the quota set to the mailbox account qroot" ilk="function" src="php_imap.c"/>
      <scope name="imap_get_quotaroot" signature="imap_get_quotaroot(resource stream_id, string mbox)" returns="array" doc="Returns the quota set to the mailbox account mbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_set_quota" signature="imap_set_quota(resource stream_id, string qroot, int mailbox_size)" returns="bool" doc="Will set the quota for qroot mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_setacl" signature="imap_setacl(resource stream_id, string mailbox, string id, string rights)" returns="bool" doc="Sets the ACL for a given mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_getacl" signature="imap_getacl(resource stream_id, string mailbox)" returns="array" doc="Gets the ACL for a given mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_expunge" signature="imap_expunge(resource stream_id)" returns="bool" doc="Permanently delete all messages marked for deletion" ilk="function" src="php_imap.c"/>
      <scope name="imap_gc" signature="imap_gc(resource stream_id, int flags)" returns="bool" doc="This function garbage collects purges the cache of&#10;entries of a specific type" ilk="function" src="php_imap.c"/>
      <scope name="imap_close" signature="imap_close(resource stream_id [, int options])" returns="bool" doc="Close an IMAP stream" ilk="function" src="php_imap.c"/>
      <scope name="imap_headers" signature="imap_headers(resource stream_id)" returns="array" doc="Returns headers for all messages in a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_body" signature="imap_body(resource stream_id, int msg_no [, int options])" returns="string" doc="Read the message body" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail_copy" signature="imap_mail_copy(resource stream_id, string msglist, string mailbox [, int options])" returns="bool" doc="Copy specified message to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail_move" signature="imap_mail_move(resource stream_id, string sequence, string mailbox [, int options])" returns="bool" doc="Move specified message to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_createmailbox" signature="imap_createmailbox(resource stream_id, string mailbox)" returns="bool" doc="Create a new mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_renamemailbox" signature="imap_renamemailbox(resource stream_id, string old_name, string new_name)" returns="bool" doc="Rename a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_deletemailbox" signature="imap_deletemailbox(resource stream_id, string mailbox)" returns="bool" doc="Delete a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_list" signature="imap_list(resource stream_id, string ref, string pattern)" returns="array" doc="Read the list of mailboxes" ilk="function" src="php_imap.c"/>
      <scope name="imap_getmailboxes" signature="imap_getmailboxes(resource stream_id, string ref, string pattern)" returns="array" doc="Reads the list of mailboxes and returns a full array of&#10;objects containing name attributes and delimiter" ilk="function" src="php_imap.c"/>
      <scope name="imap_listscan" signature="imap_listscan(resource stream_id, string ref, string pattern, string content)" returns="array" doc="Read list of mailboxes containing a certain string" ilk="function" src="php_imap.c"/>
      <scope name="imap_check" signature="imap_check(resource stream_id)" returns="object" doc="Get mailbox properties" ilk="function" src="php_imap.c"/>
      <scope name="imap_delete" signature="imap_delete(resource stream_id, int msg_no [, int options])" returns="bool" doc="Mark a message for deletion" ilk="function" src="php_imap.c"/>
      <scope name="imap_undelete" signature="imap_undelete(resource stream_id, int msg_no [, int flags])" returns="bool" doc="Remove the delete flag from a message" ilk="function" src="php_imap.c"/>
      <scope name="imap_headerinfo" signature="imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])" returns="object" doc="Read the headers of the message" ilk="function" src="php_imap.c"/>
      <scope name="imap_rfc822_parse_headers" signature="imap_rfc822_parse_headers(string headers [, string default_host])" returns="object" doc="Parse a set of mail headers contained in a string and&#10;return an object similar to imap headerinfo" ilk="function" src="php_imap.c"/>
      <scope name="imap_lsub" signature="imap_lsub(resource stream_id, string ref, string pattern)" returns="array" doc="Return a list of subscribed mailboxes" ilk="function" src="php_imap.c"/>
      <scope name="imap_getsubscribed" signature="imap_getsubscribed(resource stream_id, string ref, string pattern)" returns="array" doc="Return a list of subscribed mailboxes in the same&#10;format as imap getmailboxes" ilk="function" src="php_imap.c"/>
      <scope name="imap_subscribe" signature="imap_subscribe(resource stream_id, string mailbox)" returns="bool" doc="Subscribe to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_unsubscribe" signature="imap_unsubscribe(resource stream_id, string mailbox)" returns="bool" doc="Unsubscribe from a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetchstructure" signature="imap_fetchstructure(resource stream_id, int msg_no [, int options])" returns="object" doc="Read the full structure of a message" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetchbody" signature="imap_fetchbody(resource stream_id, int msg_no, string section [, int options])" returns="string" doc="Get a specific body section" ilk="function" src="php_imap.c"/>
      <scope name="imap_savebody" signature="imap_savebody(resource stream_id, string" returns="bool" doc="Save a specific body section to a file" ilk="function" src="php_imap.c"/>
      <scope name="imap_base64" signature="imap_base64(string text)" returns="string" doc="Decode BASE encoded text" ilk="function" src="php_imap.c"/>
      <scope name="imap_qprint" signature="imap_qprint(string text)" returns="string" doc="Convert a quoted-printable string to an -bit string" ilk="function" src="php_imap.c"/>
      <scope name="imap_8bit" signature="imap_8bit(string text)" returns="string" doc="Convert an -bit string to a quoted-printable string" ilk="function" src="php_imap.c"/>
      <scope name="imap_binary" signature="imap_binary(string text)" returns="string" doc="Convert an bit string to a base string" ilk="function" src="php_imap.c"/>
      <scope name="imap_mailboxmsginfo" signature="imap_mailboxmsginfo(resource stream_id)" returns="object" doc="Returns info about the current mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_rfc822_write_address" signature="imap_rfc822_write_address(string mailbox, string host, string personal)" returns="string" doc="Returns a properly formatted email address given the&#10;mailbox host and personal info" ilk="function" src="php_imap.c"/>
      <scope name="imap_rfc822_parse_adrlist" signature="imap_rfc822_parse_adrlist(string address_string, string default_host)" returns="array" doc="Parses an address string" ilk="function" src="php_imap.c"/>
      <scope name="imap_utf8" signature="imap_utf8(string mime_encoded_text)" returns="string" doc="Convert a mime-encoded text to UTF-" ilk="function" src="php_imap.c"/>
      <scope name="imap_utf7_decode" signature="imap_utf7_decode(string buf)" returns="string" doc="Decode a modified UTF- string" ilk="function" src="php_imap.c"/>
      <scope name="imap_utf7_encode" signature="imap_utf7_encode(string buf)" returns="string" doc="Encode a string in modified UTF-" ilk="function" src="php_imap.c"/>
      <scope name="imap_utf8_to_mutf7" signature="imap_utf8_to_mutf7(string in)" returns="string" doc="Encode a UTF- string to modified UTF-" ilk="function" src="php_imap.c"/>
      <scope name="imap_mutf7_to_utf8" signature="imap_mutf7_to_utf8(string in)" returns="string" doc="Decode a modified UTF- string to UTF-" ilk="function" src="php_imap.c"/>
      <scope name="imap_setflag_full" signature="imap_setflag_full(resource stream_id, string sequence, string flag [, int options])" returns="bool" doc="Sets flags on messages" ilk="function" src="php_imap.c"/>
      <scope name="imap_clearflag_full" signature="imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])" returns="bool" doc="Clears flags on messages" ilk="function" src="php_imap.c"/>
      <scope name="imap_sort" signature="imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])" returns="array" doc="Sort an array of message headers optionally including&#10;only messages that meet specified criteria" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetchheader" signature="imap_fetchheader(resource stream_id, int msg_no [, int options])" returns="string" doc="Get the full unfiltered header for a message" ilk="function" src="php_imap.c"/>
      <scope name="imap_uid" signature="imap_uid(resource stream_id, int msg_no)" returns="int" doc="Get the unique message id associated with a standard&#10;sequential message number" ilk="function" src="php_imap.c"/>
      <scope name="imap_msgno" signature="imap_msgno(resource stream_id, int unique_msg_id)" returns="int" doc="Get the sequence number associated with a UID" ilk="function" src="php_imap.c"/>
      <scope name="imap_status" signature="imap_status(resource stream_id, string mailbox, int options)" returns="object" doc="Get status info from a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_bodystruct" signature="imap_bodystruct(resource stream_id, int msg_no, string section)" returns="object" doc="Read the structure of a specified body section of a&#10;specific message" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetch_overview" signature="imap_fetch_overview(resource stream_id, string sequence [, int options])" returns="array" doc="Read an overview of the information in the headers of&#10;the given message sequence" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail_compose" signature="imap_mail_compose(array envelope, array body)" returns="string" doc="Create a MIME message based on given envelope and body&#10;sections" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail" signature="imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])" returns="bool" doc="Send an email message" ilk="function" src="php_imap.c"/>
      <scope name="imap_search" signature="imap_search(resource stream_id, string criteria [, int options [, string charset]])" returns="array" doc="Return a list of messages matching the given criteria" ilk="function" src="php_imap.c"/>
      <scope name="imap_alerts" signature="imap_alerts(void)" returns="array" doc="Returns an array of all IMAP alerts that have been&#10;generated since the last page load or since the last" ilk="function" src="php_imap.c"/>
      <scope name="imap_errors" signature="imap_errors(void)" returns="array" doc="Returns an array of all IMAP errors generated since the&#10;last page load or since the last imap errors call" ilk="function" src="php_imap.c"/>
      <scope name="imap_last_error" signature="imap_last_error(void)" returns="string" doc="Returns the last error that was generated by an IMAP&#10;function The error stack is NOT cleared after this call" ilk="function" src="php_imap.c"/>
      <scope name="imap_mime_header_decode" signature="imap_mime_header_decode(string str)" returns="array" doc="Decode mime header element in accordance with RFC and&#10;return array of objects containing 'charset' encoding&#10;and decoded 'text'" ilk="function" src="php_imap.c"/>
      <scope name="imap_thread" signature="imap_thread(resource stream_id [, int options])" returns="array" doc="Return threaded by REFERENCES tree" ilk="function" src="php_imap.c"/>
      <scope name="imap_timeout" signature="imap_timeout(int timeout_type [, int timeout])" returns="mixed" doc="Set or fetch imap timeout" ilk="function" src="php_imap.c"/>
      <scope name="sha1" signature="sha1(string str [, bool raw_output])" returns="string" doc="Calculate the sha hash of a string" ilk="function" src="sha1.c"/>
      <scope name="sha1_file" signature="sha1_file(string filename [, bool raw_output])" returns="string" doc="Calculate the sha hash of given filename" ilk="function" src="sha1.c"/>
      <scope name="hash" signature="hash(string algo, string data[, bool raw_output = false])" returns="string" doc="Generate a hash of a given input string Returns&#10;lowercase hexits by default" ilk="function" src="hash.c"/>
      <scope name="hash_file" signature="hash_file(string algo, string filename[, bool raw_output = false])" returns="string" doc="Generate a hash of a given file Returns lowercase&#10;hexits by default" ilk="function" src="hash.c"/>
      <scope name="hash_hmac" signature="hash_hmac(string algo, string data, string key[, bool raw_output = false])" returns="string" doc="Generate a hash of a given input string with a key&#10;using HMAC Returns lowercase hexits by default" ilk="function" src="hash.c"/>
      <scope name="hash_hmac_file" signature="hash_hmac_file(string algo, string filename, string key[, bool raw_output = false])" returns="string" doc="Generate a hash of a given file with a key using HMAC&#10;Returns lowercase hexits by default" ilk="function" src="hash.c"/>
      <scope name="hash_init" signature="hash_init(string algo[, int options, string key])" returns="resource" doc="Initialize a hashing context" ilk="function" src="hash.c"/>
      <scope name="hash_update" signature="hash_update(resource context, string data)" returns="bool" doc="Pump data into the hashing algorithm" ilk="function" src="hash.c"/>
      <scope name="hash_update_stream" signature="hash_update_stream(resource context, resource handle[, integer length])" returns="int" doc="Pump data into the hashing algorithm from an open&#10;stream" ilk="function" src="hash.c"/>
      <scope name="hash_update_file" signature="hash_update_file(resource context, string filename[, resource context])" returns="bool" doc="Pump data into the hashing algorithm from a file" ilk="function" src="hash.c"/>
      <scope name="hash_final" signature="hash_final(resource context[, bool raw_output=false])" returns="string" doc="Output resulting digest" ilk="function" src="hash.c"/>
      <scope name="hash_copy" signature="hash_copy(resource context)" returns="resource" doc="Copy hash resource" ilk="function" src="hash.c"/>
      <scope name="hash_algos" signature="hash_algos(void)" returns="array" doc="Return a list of registered hashing algorithms" ilk="function" src="hash.c"/>
      <scope name="mhash" signature="mhash(int hash, string data [, string key])" returns="string" doc="Hash data with hash" ilk="function" src="hash.c"/>
      <scope name="mhash_get_hash_name" signature="mhash_get_hash_name(int hash)" returns="string" doc="Gets the name of hash" ilk="function" src="hash.c"/>
      <scope name="mhash_count" signature="mhash_count(void)" returns="int" doc="Gets the number of available hashes" ilk="function" src="hash.c"/>
      <scope name="mhash_get_block_size" signature="mhash_get_block_size(int hash)" returns="int" doc="Gets the block size of hash" ilk="function" src="hash.c"/>
      <scope name="mhash_keygen_s2k" signature="mhash_keygen_s2k(int hash, string input_password, string salt, int bytes)" returns="string" doc="Generates a key using hash functions" ilk="function" src="hash.c"/>
      <scope name="md5" signature="md5(string str, [ bool raw_output])" returns="string" doc="Calculate the md hash of a string" ilk="function" src="md5.c"/>
      <scope name="md5_file" signature="md5_file(string filename [, bool raw_output])" returns="string" doc="Calculate the md hash of given filename" ilk="function" src="md5.c"/>
      <scope name="gd_info" signature="gd_info()" returns="array" doc="" ilk="function" src="gd.c"/>
      <scope name="imageloadfont" signature="imageloadfont(string filename)" returns="int" doc="Load a new font" ilk="function" src="gd.c"/>
      <scope name="imagesetstyle" signature="imagesetstyle(resource im, array styles)" returns="bool" doc="Set the line drawing styles for use with imageline and&#10;IMG COLOR STYLED" ilk="function" src="gd.c"/>
      <scope name="imagecreatetruecolor" signature="imagecreatetruecolor(int x_size, int y_size)" returns="resource" doc="Create a new true color image" ilk="function" src="gd.c"/>
      <scope name="imageistruecolor" signature="imageistruecolor(resource im)" returns="bool" doc="return true if the image uses truecolor" ilk="function" src="gd.c"/>
      <scope name="imagetruecolortopalette" signature="imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)" returns="void" doc="Convert a true colour image to a palette based image&#10;with a number of colours optionally using dithering" ilk="function" src="gd.c"/>
      <scope name="imagecolormatch" signature="imagecolormatch(resource im1, resource im2)" returns="bool" doc="Makes the colors of the palette version of an image&#10;more closely match the true color version" ilk="function" src="gd.c"/>
      <scope name="imagesetthickness" signature="imagesetthickness(resource im, int thickness)" returns="bool" doc="Set line thickness for drawing lines ellipses&#10;rectangles polygons etc" ilk="function" src="gd.c"/>
      <scope name="imagefilledellipse" signature="imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)" returns="bool" doc="Draw an ellipse" ilk="function" src="gd.c"/>
      <scope name="imagefilledarc" signature="imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)" returns="bool" doc="Draw a filled partial ellipse" ilk="function" src="gd.c"/>
      <scope name="imagealphablending" signature="imagealphablending(resource im, bool on)" returns="bool" doc="Turn alpha blending mode on or off for the given image" ilk="function" src="gd.c"/>
      <scope name="imagesavealpha" signature="imagesavealpha(resource im, bool on)" returns="bool" doc="Include alpha channel to a saved image" ilk="function" src="gd.c"/>
      <scope name="imagelayereffect" signature="imagelayereffect(resource im, int effect)" returns="bool" doc="Set the alpha blending flag to use the bundled libgd&#10;layering effects" ilk="function" src="gd.c"/>
      <scope name="imagecolorallocatealpha" signature="imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Allocate a color with an alpha level Works for true&#10;color and palette based images" ilk="function" src="gd.c"/>
      <scope name="imagecolorresolvealpha" signature="imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Resolve Allocate a colour with an alpha level Works for&#10;true colour and palette based images" ilk="function" src="gd.c"/>
      <scope name="imagecolorclosestalpha" signature="imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Find the closest matching colour with alpha&#10;transparency" ilk="function" src="gd.c"/>
      <scope name="imagecolorexactalpha" signature="imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Find exact match for colour with transparency" ilk="function" src="gd.c"/>
      <scope name="imagecopyresampled" signature="imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" returns="bool" doc="Copy and resize part of an image using resampling to&#10;help ensure clarity" ilk="function" src="gd.c"/>
      <scope name="imagegrabwindow" signature="imagegrabwindow(int window_handle [, int client_area])" returns="resource" doc="Grab a window or its client area using a windows handle&#10;HWND property in COM instance" ilk="function" src="gd.c"/>
      <scope name="imagegrabscreen" signature="imagegrabscreen()" returns="resource" doc="Grab a screenshot" ilk="function" src="gd.c"/>
      <scope name="imagerotate" signature="imagerotate(resource src_im, float angle, int bgdcolor [, int ignoretransparent])" returns="resource" doc="Rotate an image using a custom angle" ilk="function" src="gd.c"/>
      <scope name="imagesettile" signature="imagesettile(resource image, resource tile)" returns="bool" doc="Set the tile image to tile when filling image with the&#10;IMG COLOR TILED color" ilk="function" src="gd.c"/>
      <scope name="imagesetbrush" signature="imagesetbrush(resource image, resource brush)" returns="bool" doc="Set the brush image to brush when filling image with&#10;the IMG COLOR BRUSHED color" ilk="function" src="gd.c"/>
      <scope name="imagecreate" signature="imagecreate(int x_size, int y_size)" returns="resource" doc="Create a new image" ilk="function" src="gd.c"/>
      <scope name="imagetypes" signature="imagetypes(void)" returns="int" doc="Return the types of images supported in a bitfield -&#10;GIF JPEG PNG WBMP XPM" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromstring" signature="imagecreatefromstring(string image)" returns="resource" doc="Create a new image from the image stream in the string" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgif" signature="imagecreatefromgif(string filename)" returns="resource" doc="Create a new image from GIF file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromjpeg" signature="imagecreatefromjpeg(string filename)" returns="resource" doc="Create a new image from JPEG file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefrompng" signature="imagecreatefrompng(string filename)" returns="resource" doc="Create a new image from PNG file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromxbm" signature="imagecreatefromxbm(string filename)" returns="resource" doc="Create a new image from XBM file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromxpm" signature="imagecreatefromxpm(string filename)" returns="resource" doc="Create a new image from XPM file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromwbmp" signature="imagecreatefromwbmp(string filename)" returns="resource" doc="Create a new image from WBMP file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgd" signature="imagecreatefromgd(string filename)" returns="resource" doc="Create a new image from GD file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgd2" signature="imagecreatefromgd2(string filename)" returns="resource" doc="Create a new image from GD file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgd2part" signature="imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)" returns="resource" doc="Create a new image from a given part of GD file or URL" ilk="function" src="gd.c"/>
      <scope name="imagexbm" signature="imagexbm(int im, string filename [, int foreground])" returns="int" doc="Output XBM image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagegif" signature="imagegif(resource im [, string filename])" returns="bool" doc="Output GIF image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagepng" signature="imagepng(resource im [, string filename])" returns="bool" doc="Output PNG image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagejpeg" signature="imagejpeg(resource im [, string filename [, int quality]])" returns="bool" doc="Output JPEG image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagewbmp" signature="imagewbmp(resource im [, string filename, [, int foreground]])" returns="bool" doc="Output WBMP image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagegd" signature="imagegd(resource im [, string filename])" returns="bool" doc="Output GD image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagegd2" signature="imagegd2(resource im [, string filename, [, int chunk_size, [, int type]]])" returns="bool" doc="Output GD image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagedestroy" signature="imagedestroy(resource im)" returns="bool" doc="Destroy an image" ilk="function" src="gd.c"/>
      <scope name="imagecolorallocate" signature="imagecolorallocate(resource im, int red, int green, int blue)" returns="int" doc="Allocate a color for an image" ilk="function" src="gd.c"/>
      <scope name="imagepalettecopy" signature="imagepalettecopy(resource dst, resource src)" returns="void" doc="Copy the palette from the src image onto the dst image" ilk="function" src="gd.c"/>
      <scope name="imagecolorat" signature="imagecolorat(resource im, int x, int y)" returns="int" doc="Get the index of the color of a pixel" ilk="function" src="gd.c"/>
      <scope name="imagecolorclosest" signature="imagecolorclosest(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the closest color to the specified&#10;color" ilk="function" src="gd.c"/>
      <scope name="imagecolorclosesthwb" signature="imagecolorclosesthwb(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the color which has the hue white and&#10;blackness nearest to the given color" ilk="function" src="gd.c"/>
      <scope name="imagecolordeallocate" signature="imagecolordeallocate(resource im, int index)" returns="bool" doc="De-allocate a color for an image" ilk="function" src="gd.c"/>
      <scope name="imagecolorresolve" signature="imagecolorresolve(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the specified color or its closest&#10;possible alternative" ilk="function" src="gd.c"/>
      <scope name="imagecolorexact" signature="imagecolorexact(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the specified color" ilk="function" src="gd.c"/>
      <scope name="imagecolorset" signature="imagecolorset(resource im, int col, int red, int green, int blue)" returns="void" doc="Set the color for the specified palette index" ilk="function" src="gd.c"/>
      <scope name="imagecolorsforindex" signature="imagecolorsforindex(resource im, int col)" returns="array" doc="Get the colors for an index" ilk="function" src="gd.c"/>
      <scope name="imagegammacorrect" signature="imagegammacorrect(resource im, float inputgamma, float outputgamma)" returns="bool" doc="Apply a gamma correction to a GD image" ilk="function" src="gd.c"/>
      <scope name="imagesetpixel" signature="imagesetpixel(resource im, int x, int y, int col)" returns="bool" doc="Set a single pixel" ilk="function" src="gd.c"/>
      <scope name="imageline" signature="imageline(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a line" ilk="function" src="gd.c"/>
      <scope name="imagedashedline" signature="imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a dashed line" ilk="function" src="gd.c"/>
      <scope name="imagerectangle" signature="imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a rectangle" ilk="function" src="gd.c"/>
      <scope name="imagefilledrectangle" signature="imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a filled rectangle" ilk="function" src="gd.c"/>
      <scope name="imagearc" signature="imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)" returns="bool" doc="Draw a partial ellipse" ilk="function" src="gd.c"/>
      <scope name="imageellipse" signature="imageellipse(resource im, int cx, int cy, int w, int h, int color)" returns="bool" doc="Draw an ellipse" ilk="function" src="gd.c"/>
      <scope name="imagefilltoborder" signature="imagefilltoborder(resource im, int x, int y, int border, int col)" returns="bool" doc="Flood fill to specific color" ilk="function" src="gd.c"/>
      <scope name="imagefill" signature="imagefill(resource im, int x, int y, int col)" returns="bool" doc="Flood fill" ilk="function" src="gd.c"/>
      <scope name="imagecolorstotal" signature="imagecolorstotal(resource im)" returns="int" doc="Find out the number of colors in an image's palette" ilk="function" src="gd.c"/>
      <scope name="imagecolortransparent" signature="imagecolortransparent(resource im [, int col])" returns="int" doc="Define a color as transparent" ilk="function" src="gd.c"/>
      <scope name="imageinterlace" signature="imageinterlace(resource im [, int interlace])" returns="int" doc="Enable or disable interlace" ilk="function" src="gd.c"/>
      <scope name="imagepolygon" signature="imagepolygon(resource im, array point, int num_points, int col)" returns="bool" doc="Draw a polygon" ilk="function" src="gd.c"/>
      <scope name="imagefilledpolygon" signature="imagefilledpolygon(resource im, array point, int num_points, int col)" returns="bool" doc="Draw a filled polygon" ilk="function" src="gd.c"/>
      <scope name="imagefontwidth" signature="imagefontwidth(int font)" returns="int" doc="Get font width" ilk="function" src="gd.c"/>
      <scope name="imagefontheight" signature="imagefontheight(int font)" returns="int" doc="Get font height" ilk="function" src="gd.c"/>
      <scope name="imagechar" signature="imagechar(resource im, int font, int x, int y, string c, int col)" returns="bool" doc="Draw a character" ilk="function" src="gd.c"/>
      <scope name="imagecharup" signature="imagecharup(resource im, int font, int x, int y, string c, int col)" returns="bool" doc="Draw a character rotated degrees counter-clockwise" ilk="function" src="gd.c"/>
      <scope name="imagestring" signature="imagestring(resource im, int font, int x, int y, string str, int col)" returns="bool" doc="Draw a string horizontally" ilk="function" src="gd.c"/>
      <scope name="imagestringup" signature="imagestringup(resource im, int font, int x, int y, string str, int col)" returns="bool" doc="Draw a string vertically - rotated degrees&#10;counter-clockwise" ilk="function" src="gd.c"/>
      <scope name="imagecopy" signature="imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)" returns="bool" doc="Copy part of an image" ilk="function" src="gd.c"/>
      <scope name="imagecopymerge" signature="imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" returns="bool" doc="Merge one part of an image with another" ilk="function" src="gd.c"/>
      <scope name="imagecopymergegray" signature="imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" returns="bool" doc="Merge one part of an image with another" ilk="function" src="gd.c"/>
      <scope name="imagecopyresized" signature="imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" returns="bool" doc="Copy and resize part of an image" ilk="function" src="gd.c"/>
      <scope name="imagesx" signature="imagesx(resource im)" returns="int" doc="Get image width" ilk="function" src="gd.c"/>
      <scope name="imagesy" signature="imagesy(resource im)" returns="int" doc="Get image height" ilk="function" src="gd.c"/>
      <scope name="imageftbbox" signature="imageftbbox(float size, float angle, string font_file, string text [, array extrainfo])" returns="array" doc="Give the bounding box of a text using fonts via&#10;freetype" ilk="function" src="gd.c"/>
      <scope name="imagefttext" signature="imagefttext(resource im, float size, float angle, int x, int y, int col, string font_file, string text [, array extrainfo])" returns="array" doc="Write text to the image using fonts via freetype" ilk="function" src="gd.c"/>
      <scope name="imagettfbbox" signature="imagettfbbox(float size, float angle, string font_file, string text)" returns="array" doc="Give the bounding box of a text using TrueType fonts" ilk="function" src="gd.c"/>
      <scope name="imagettftext" signature="imagettftext(resource im, float size, float angle, int x, int y, int col, string font_file, string text)" returns="array" doc="Write text to the image using a TrueType font" ilk="function" src="gd.c"/>
      <scope name="imagepsloadfont" signature="imagepsloadfont(string pathname)" returns="resource" doc="Load a new font from specified file" ilk="function" src="gd.c"/>
      <scope name="imagepscopyfont" signature="imagepscopyfont(int font_index)" returns="int" doc="Make a copy of a font for purposes like extending or&#10;reenconding" ilk="function" src="gd.c"/>
      <scope name="imagepsfreefont" signature="imagepsfreefont(resource font_index)" returns="bool" doc="Free memory used by a font" ilk="function" src="gd.c"/>
      <scope name="imagepsencodefont" signature="imagepsencodefont(resource font_index, string filename)" returns="bool" doc="To change a fonts character encoding vector" ilk="function" src="gd.c"/>
      <scope name="imagepsextendfont" signature="imagepsextendfont(resource font_index, float extend)" returns="bool" doc="Extend or or condense if extend a font" ilk="function" src="gd.c"/>
      <scope name="imagepsslantfont" signature="imagepsslantfont(resource font_index, float slant)" returns="bool" doc="Slant a font" ilk="function" src="gd.c"/>
      <scope name="imagepstext" signature="imagepstext(resource image, string text, resource font, int size, int foreground, int background, int xcoord, int ycoord [, int space [, int tightness [, float angle [, int antialias])" returns="array" doc="Rasterize a string over an image" ilk="function" src="gd.c"/>
      <scope name="imagepsbbox" signature="imagepsbbox(string text, resource font, int size [, int space, int tightness, float angle])" returns="array" doc="Return the bounding box needed by a string if&#10;rasterized" ilk="function" src="gd.c"/>
      <scope name="image2wbmp" signature="image2wbmp(resource im [, string filename [, int threshold]])" returns="bool" doc="Output WBMP image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagefilter" signature="imagefilter(resource src_im, int filtertype, [args] )" returns="bool" doc="Applies Filter an image using a custom angle" ilk="function" src="gd.c"/>
      <scope name="imageconvolution" signature="imageconvolution(resource src_im, array matrix3x3, double div, double offset)" returns="resource" doc="Apply a x convolution matrix using coefficient div and&#10;offset" ilk="function" src="gd.c"/>
      <scope name="imageantialias" signature="imageantialias(resource im, bool on)" returns="bool" doc="Should antialiased functions used or not" ilk="function" src="gd.c"/>
      <scope name="sqlite_popen" signature="sqlite_popen(string filename [, int mode [, string &amp;error_message]])" returns="resource" doc="Opens a persistent handle to a SQLite database Will&#10;create the database if it does not exist" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_open" signature="sqlite_open(string filename [, int mode [, string &amp;error_message]])" returns="resource" doc="Opens a SQLite database Will create the database if it&#10;does not exist" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_factory" signature="sqlite_factory(string filename [, int mode [, string &amp;error_message]])" returns="object" doc="Opens a SQLite database and creates an object for it&#10;Will create the database if it does not exist" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_busy_timeout" signature="sqlite_busy_timeout(resource db, int ms)" returns="void" doc="Set busy timeout duration If ms all busy handlers are&#10;disabled" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_close" signature="sqlite_close(resource db)" returns="void" doc="Closes an open sqlite database" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_unbuffered_query" signature="sqlite_unbuffered_query(string query, resource db [ , int result_type [, string &amp;error_message]])" returns="resource" doc="Executes a query that does not prefetch and buffer all&#10;data" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_fetch_column_types" signature="sqlite_fetch_column_types(string table_name, resource db [, int result_type])" returns="resource" doc="Return an array of column types from a particular table" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_query" ilk="function" signature="sqlite_query ( resource $dbhandle , string $query [, int $result_type [, string &amp;$error_msg ]] )&#10;sqlite_query ( string $query , resource $dbhandle [, int $result_type [, string &amp;$error_msg ]] )" doc="Executes an SQL statement given by the query against a given database handle."/>
      <scope name="sqlite_exec" ilk="function" signature="sqlite_exec ( resource $dbhandle , string $query [, string &amp;$error_msg ] )&#10;sqlite_exec ( string $query , resource $dbhandle )" doc="Executes an SQL statement given by the query against a given database handle (specified by the dbhandle  parameter)."/>
      <scope name="sqlite_fetch_all" signature="sqlite_fetch_all(resource result [, int result_type [, bool decode_binary]])" returns="array" doc="Fetches all rows from a result set as an array of&#10;arrays" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_fetch_array" signature="sqlite_fetch_array(resource result [, int result_type [, bool decode_binary]])" returns="array" doc="Fetches the next row from a result set as an array" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_fetch_object" signature="sqlite_fetch_object(resource result [, string class_name [, NULL" returns="object" doc="Fetches the next row from a result set as an object" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_array_query" ilk="function" signature="sqlite_array_query ( resource $dbhandle , string $query [, int $result_type [, bool $decode_binary ]] )&#10;sqlite_array_query ( string $query , resource $dbhandle [, int $result_type [, bool $decode_binary ]] )" doc="sqlite_array_query() executes the given query and returns an array of the entire result set. It is similar to calling  sqlite_query() and then sqlite_fetch_array() for each row in the result set. sqlite_array_query() is significantly faster than the aforementioned."/>
      <scope name="sqlite_single_query" signature="sqlite_single_query(resource db, string query [, bool first_row_only [, bool decode_binary]])" returns="array" doc="Executes a query and returns either an array for one&#10;single column or the value of the first row" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_fetch_single" signature="sqlite_fetch_single(resource result [, bool decode_binary])" returns="string" doc="Fetches the first column of a result set as a string" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_current" signature="sqlite_current(resource result [, int result_type [, bool decode_binary]])" returns="array" doc="Fetches the current row from a result set as an array" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_column" signature="sqlite_column(resource result, mixed index_or_name [, bool decode_binary])" returns="mixed" doc="Fetches a column from the current row of a result set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_libversion" signature="sqlite_libversion()" returns="string" doc="Returns the version of the linked SQLite library" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_libencoding" signature="sqlite_libencoding()" returns="string" doc="Returns the encoding iso or UTF- of the linked SQLite&#10;library" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_changes" signature="sqlite_changes(resource db)" returns="int" doc="Returns the number of rows that were changed by the&#10;most recent SQL statement" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_last_insert_rowid" signature="sqlite_last_insert_rowid(resource db)" returns="int" doc="Returns the rowid of the most recently inserted row" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_num_rows" signature="sqlite_num_rows(resource result)" returns="int" doc="Returns the number of rows in a buffered result set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_valid" signature="sqlite_valid(resource result)" returns="bool" doc="Returns whether more rows are available" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_has_prev" signature="sqlite_has_prev(resource result)" returns="bool" doc="Returns whether a previous row is available" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_num_fields" signature="sqlite_num_fields(resource result)" returns="int" doc="Returns the number of fields in a result set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_field_name" signature="sqlite_field_name(resource result, int field_index)" returns="string" doc="Returns the name of a particular field of a result set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_seek" signature="sqlite_seek(resource result, int row)" returns="bool" doc="Seek to a particular row number of a buffered result&#10;set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_rewind" signature="sqlite_rewind(resource result)" returns="bool" doc="Seek to the first row number of a buffered result set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_next" signature="sqlite_next(resource result)" returns="bool" doc="Seek to the next row number of a result set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_key" signature="sqlite_key(resource result)" returns="int" doc="Return the current row index of a buffered result" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_prev" signature="sqlite_prev(resource result)" returns="bool" doc="Seek to the previous row number of a result set" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_escape_string" signature="sqlite_escape_string(string item)" returns="string" doc="Escapes a string for use as a query parameter" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_last_error" signature="sqlite_last_error(resource db)" returns="int" doc="Returns the error code of the last error for a database" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_error_string" signature="sqlite_error_string(int error_code)" returns="string" doc="Returns the textual description of an error code" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_create_aggregate" signature="sqlite_create_aggregate(resource db, string funcname, mixed step_func, mixed finalize_func[, long num_args])" returns="bool" doc="Registers an aggregate function for queries" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_create_function" signature="sqlite_create_function(resource db, string funcname, mixed callback[, long num_args])" returns="bool" doc="Registers a regular function for queries" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_udf_encode_binary" signature="sqlite_udf_encode_binary(string data)" returns="string" doc="Apply binary encoding if required to a string to return&#10;from an UDF" ilk="function" src="sqlite.c"/>
      <scope name="sqlite_udf_decode_binary" signature="sqlite_udf_decode_binary(string data)" returns="string" doc="Decode binary encoding on a string parameter passed to&#10;an UDF" ilk="function" src="sqlite.c"/>
      <scope name="readline" signature="readline([string prompt])" returns="string" doc="Reads a line" ilk="function" src="readline.c"/>
      <scope name="readline_info" signature="readline_info([string varname [, string newvalue]])" returns="mixed" doc="Gets sets various internal readline variables" ilk="function" src="readline.c"/>
      <scope name="readline_add_history" signature="readline_add_history(string prompt)" returns="bool" doc="Adds a line to the history" ilk="function" src="readline.c"/>
      <scope name="readline_clear_history" signature="readline_clear_history(void)" returns="bool" doc="Clears the history" ilk="function" src="readline.c"/>
      <scope name="readline_list_history" signature="readline_list_history(void)" returns="array" doc="Lists the history" ilk="function" src="readline.c"/>
      <scope name="readline_read_history" signature="readline_read_history([string filename])" returns="bool" doc="Reads the history" ilk="function" src="readline.c"/>
      <scope name="readline_write_history" signature="readline_write_history([string filename])" returns="bool" doc="Writes the history" ilk="function" src="readline.c"/>
      <scope name="readline_completion_function" signature="readline_completion_function(string funcname)" returns="bool" doc="Readline completion function" ilk="function" src="readline.c"/>
      <scope name="readline_callback_handler_install" signature="readline_callback_handler_install(string prompt, mixed callback)" returns="void" doc="Initializes the readline callback interface and&#10;terminal prints the prompt and returns immediately" ilk="function" src="readline.c"/>
      <scope name="readline_callback_read_char" signature="readline_callback_read_char()" returns="void" doc="Informs the readline callback interface that a&#10;character is ready for input" ilk="function" src="readline.c"/>
      <scope name="readline_callback_handler_remove" signature="readline_callback_handler_remove()" returns="bool" doc="Removes a previously installed callback handler and&#10;restores terminal settings" ilk="function" src="readline.c"/>
      <scope name="readline_redisplay" signature="readline_redisplay(void)" returns="void" doc="Ask readline to redraw the display" ilk="function" src="readline.c"/>
      <scope name="readline_on_new_line" signature="readline_on_new_line(void)" returns="void" doc="Inform readline that the cursor has moved to a new line" ilk="function" src="readline.c"/>
      <scope name="exec" signature="exec(string command [, array &amp;output [, int &amp;return_value]])" returns="string" doc="Execute an external program" ilk="function" src="exec.c"/>
      <scope name="system" signature="system(string command [, int &amp;return_value])" returns="int" doc="Execute an external program and display output" ilk="function" src="exec.c"/>
      <scope name="passthru" signature="passthru(string command [, int &amp;return_value])" returns="void" doc="Execute an external program and display raw output" ilk="function" src="exec.c"/>
      <scope name="escapeshellcmd" signature="escapeshellcmd(string command)" returns="string" doc="Escape shell metacharacters" ilk="function" src="exec.c"/>
      <scope name="escapeshellarg" signature="escapeshellarg(string arg)" returns="string" doc="Quote and escape an argument for use in a shell command" ilk="function" src="exec.c"/>
      <scope name="shell_exec" signature="shell_exec(string cmd)" returns="string" doc="Execute command via shell and return complete output as&#10;string" ilk="function" src="exec.c"/>
      <scope name="proc_nice" signature="proc_nice(int priority)" returns="bool" doc="Change the priority of the current process" ilk="function" src="exec.c"/>
      <scope name="ezmlm_hash" signature="ezmlm_hash(string addr)" returns="int" doc="Calculate EZMLM list hash value" ilk="function" src="mail.c"/>
      <scope name="mail" signature="mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" returns="int" doc="Send an email message" ilk="function" src="mail.c"/>
      <scope name="crypt" signature="crypt(string str [, string salt])" returns="string" doc="Hash a string" ilk="function" src="crypt.c"/>
      <scope name="levenshtein" signature="levenshtein(string str1, string str2[, int cost_ins, int cost_rep, int cost_del])" returns="int" doc="Calculate Levenshtein distance between two strings" ilk="function" src="levenshtein.c"/>
      <scope name="abs" signature="abs(int number)" returns="int" doc="Return the absolute value of the number" ilk="function" src="math.c"/>
      <scope name="ceil" signature="ceil(float number)" returns="float" doc="Returns the next highest integer value of the number" ilk="function" src="math.c"/>
      <scope name="floor" signature="floor(float number)" returns="float" doc="Returns the next lowest integer value from the number" ilk="function" src="math.c"/>
      <scope name="round" signature="round(float number [, int precision [, int mode]])" returns="float" doc="Returns the number rounded to specified precision" ilk="function" src="math.c"/>
      <scope name="sin" signature="sin(float number)" returns="float" doc="Returns the sine of the number in radians" ilk="function" src="math.c"/>
      <scope name="cos" signature="cos(float number)" returns="float" doc="Returns the cosine of the number in radians" ilk="function" src="math.c"/>
      <scope name="tan" signature="tan(float number)" returns="float" doc="Returns the tangent of the number in radians" ilk="function" src="math.c"/>
      <scope name="asin" signature="asin(float number)" returns="float" doc="Returns the arc sine of the number in radians" ilk="function" src="math.c"/>
      <scope name="acos" signature="acos(float number)" returns="float" doc="Return the arc cosine of the number in radians" ilk="function" src="math.c"/>
      <scope name="atan" signature="atan(float number)" returns="float" doc="Returns the arc tangent of the number in radians" ilk="function" src="math.c"/>
      <scope name="atan2" signature="atan2(float y, float x)" returns="float" doc="Returns the arc tangent of y x with the resulting&#10;quadrant determined by the signs of y and x" ilk="function" src="math.c"/>
      <scope name="sinh" signature="sinh(float number)" returns="float" doc="Returns the hyperbolic sine of the number defined as&#10;exp number - exp -number" ilk="function" src="math.c"/>
      <scope name="cosh" signature="cosh(float number)" returns="float" doc="Returns the hyperbolic cosine of the number defined as&#10;exp number exp -number" ilk="function" src="math.c"/>
      <scope name="tanh" signature="tanh(float number)" returns="float" doc="Returns the hyperbolic tangent of the number defined as&#10;sinh number cosh number" ilk="function" src="math.c"/>
      <scope name="asinh" signature="asinh(float number)" returns="float" doc="Returns the inverse hyperbolic sine of the number i e&#10;the value whose hyperbolic sine is number" ilk="function" src="math.c"/>
      <scope name="acosh" signature="acosh(float number)" returns="float" doc="Returns the inverse hyperbolic cosine of the number i e&#10;the value whose hyperbolic cosine is number" ilk="function" src="math.c"/>
      <scope name="atanh" signature="atanh(float number)" returns="float" doc="Returns the inverse hyperbolic tangent of the number i&#10;e the value whose hyperbolic tangent is number" ilk="function" src="math.c"/>
      <scope name="pi" signature="pi(void)" returns="float" doc="Returns an approximation of pi" ilk="function" src="math.c"/>
      <scope name="is_finite" signature="is_finite(float val)" returns="bool" doc="Returns whether argument is finite" ilk="function" src="math.c"/>
      <scope name="is_infinite" signature="is_infinite(float val)" returns="bool" doc="Returns whether argument is infinite" ilk="function" src="math.c"/>
      <scope name="is_nan" signature="is_nan(float val)" returns="bool" doc="Returns whether argument is not a number" ilk="function" src="math.c"/>
      <scope name="pow" signature="pow(number base, number exponent)" returns="number" doc="Returns base raised to the power of exponent Returns&#10;integer result when possible" ilk="function" src="math.c"/>
      <scope name="exp" signature="exp(float number)" returns="float" doc="Returns e raised to the power of the number" ilk="function" src="math.c"/>
      <scope name="expm1" signature="expm1(float number)" returns="float" doc="Returns exp number - computed in a way that accurate&#10;even when the value of number is close to zero" ilk="function" src="math.c"/>
      <scope name="log1p" signature="log1p(float number)" returns="float" doc="Returns log number computed in a way that accurate even&#10;when the value of number is close to zero" ilk="function" src="math.c"/>
      <scope name="log" signature="log(float number, [float base])" returns="float" doc="Returns the natural logarithm of the number or the base&#10;log if base is specified" ilk="function" src="math.c"/>
      <scope name="log10" signature="log10(float number)" returns="float" doc="Returns the base- logarithm of the number" ilk="function" src="math.c"/>
      <scope name="sqrt" signature="sqrt(float number)" returns="float" doc="Returns the square root of the number" ilk="function" src="math.c"/>
      <scope name="hypot" signature="hypot(float num1, float num2)" returns="float" doc="Returns sqrt num num num num" ilk="function" src="math.c"/>
      <scope name="deg2rad" signature="deg2rad(float number)" returns="float" doc="Converts the number in degrees to the radian equivalent" ilk="function" src="math.c"/>
      <scope name="rad2deg" signature="rad2deg(float number)" returns="float" doc="Converts the radian number to the equivalent number in&#10;degrees" ilk="function" src="math.c"/>
      <scope name="bindec" signature="bindec(string binary_number)" returns="int" doc="Returns the decimal equivalent of the binary number" ilk="function" src="math.c"/>
      <scope name="hexdec" signature="hexdec(string hexadecimal_number)" returns="int" doc="Returns the decimal equivalent of the hexadecimal&#10;number" ilk="function" src="math.c"/>
      <scope name="octdec" signature="octdec(string octal_number)" returns="int" doc="Returns the decimal equivalent of an octal string" ilk="function" src="math.c"/>
      <scope name="decbin" signature="decbin(int decimal_number)" returns="string" doc="Returns a string containing a binary representation of&#10;the number" ilk="function" src="math.c"/>
      <scope name="decoct" signature="decoct(int decimal_number)" returns="string" doc="Returns a string containing an octal representation of&#10;the given number" ilk="function" src="math.c"/>
      <scope name="dechex" signature="dechex(int decimal_number)" returns="string" doc="Returns a string containing a hexadecimal&#10;representation of the given number" ilk="function" src="math.c"/>
      <scope name="base_convert" signature="base_convert(string number, int frombase, int tobase)" returns="string" doc="Converts a number in a string from any base to any base" ilk="function" src="math.c"/>
      <scope name="number_format" signature="number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])" returns="string" doc="Formats a number with grouped thousands" ilk="function" src="math.c"/>
      <scope name="fmod" signature="fmod(float x, float y)" returns="float" doc="Returns the remainder of dividing x by y as a float" ilk="function" src="math.c"/>
      <scope name="var_dump" signature="var_dump(mixed var)" returns="void" doc="Dumps a string representation of variable to output" ilk="function" src="var.c"/>
      <scope name="debug_zval_dump" signature="debug_zval_dump(mixed var)" returns="void" doc="Dumps a string representation of an internal zend value&#10;to output" ilk="function" src="var.c"/>
      <scope name="var_export" signature="var_export(mixed var [, bool return])" returns="mixed" doc="Outputs or returns a string representation of a&#10;variable" ilk="function" src="var.c"/>
      <scope name="serialize" signature="serialize(mixed variable)" returns="string" doc="Returns a string representation of variable which can&#10;later be unserialized" ilk="function" src="var.c"/>
      <scope name="unserialize" signature="unserialize(string variable_representation)" returns="mixed" doc="Takes a string representation of variable and recreates&#10;it" ilk="function" src="var.c"/>
      <scope name="memory_get_usage" signature="memory_get_usage([real_usage])" returns="int" doc="Returns the allocated by PHP memory" ilk="function" src="var.c"/>
      <scope name="memory_get_peak_usage" signature="memory_get_peak_usage([real_usage])" returns="int" doc="Returns the peak allocated by PHP memory" ilk="function" src="var.c"/>
      <scope name="getmyuid" signature="getmyuid(void)" returns="int" doc="Get PHP script owner's UID" ilk="function" src="pageinfo.c"/>
      <scope name="getmygid" signature="getmygid(void)" returns="int" doc="Get PHP script owner's GID" ilk="function" src="pageinfo.c"/>
      <scope name="getmypid" signature="getmypid(void)" returns="int" doc="Get current process ID" ilk="function" src="pageinfo.c"/>
      <scope name="getmyinode" signature="getmyinode(void)" returns="int" doc="Get the inode of the current script being parsed" ilk="function" src="pageinfo.c"/>
      <scope name="getlastmod" signature="getlastmod(void)" returns="int" doc="Get time of last page modification" ilk="function" src="pageinfo.c"/>
      <scope name="microtime" signature="microtime([bool get_as_float])" returns="mixed" doc="Returns either a string or a float containing the&#10;current time in seconds and microseconds" ilk="function" src="microtime.c"/>
      <scope name="gettimeofday" signature="gettimeofday([bool get_as_float])" returns="array" doc="Returns the current time as array" ilk="function" src="microtime.c"/>
      <scope name="getrusage" signature="getrusage([int who])" returns="array" doc="Returns an array of usage statistics" ilk="function" src="microtime.c"/>
      <scope name="proc_terminate" signature="proc_terminate(resource process [, long signal])" returns="bool" doc="kill a process opened by proc open" ilk="function" src="proc_open.c"/>
      <scope name="proc_close" signature="proc_close(resource process)" returns="int" doc="close a process opened by proc open" ilk="function" src="proc_open.c"/>
      <scope name="proc_get_status" signature="proc_get_status(resource process)" returns="array" doc="get information about a process opened by proc open" ilk="function" src="proc_open.c"/>
      <scope name="proc_open" signature="proc_open(string command, array descriptorspec, array &amp;pipes [, string cwd [, array env [, array other_options]]])" returns="resource" doc="Run a process with more control over it's file&#10;descriptors" ilk="function" src="proc_open.c"/>
      <scope name="define_syslog_variables" signature="define_syslog_variables(void)" returns="void" doc="Initializes all syslog-related variables" ilk="function" src="syslog.c"/>
      <scope name="openlog" signature="openlog(string ident, int option, int facility)" returns="bool" doc="Open connection to system logger" ilk="function" src="syslog.c"/>
      <scope name="closelog" signature="closelog(void)" returns="bool" doc="Close connection to system logger" ilk="function" src="syslog.c"/>
      <scope name="syslog" signature="syslog(int priority, string message)" returns="bool" doc="Generate a system log message" ilk="function" src="syslog.c"/>
      <scope name="lcg_value" signature="lcg_value()" returns="float" doc="Returns a value from the combined linear congruential&#10;generator" ilk="function" src="lcg.c"/>
      <scope name="metaphone" signature="metaphone(string text[, int phones])" returns="string" doc="Break english phrases down into their phonemes" ilk="function" src="metaphone.c"/>
      <scope name="version_compare" signature="version_compare(string ver1, string ver2 [, string oper])" returns="int" doc="Compares two PHP-standardized version number strings" ilk="function" src="versioning.c"/>
      <scope name="base64_encode" signature="base64_encode(string str)" returns="string" doc="Encodes string using MIME base algorithm" ilk="function" src="base64.c"/>
      <scope name="base64_decode" signature="base64_decode(string str[, bool strict])" returns="string" doc="Decodes string using MIME base algorithm" ilk="function" src="base64.c"/>
      <scope name="stream_socket_pair" signature="stream_socket_pair(int domain, int type, int protocol)" returns="array" doc="Creates a pair of connected indistinguishable socket&#10;streams" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_client" signature="stream_socket_client(string remoteaddress [, long &amp;errcode [, string &amp;errstring [, double timeout [, long flags [, resource context]]]]])" returns="resource" doc="Open a client connection to a remote address" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_server" signature="stream_socket_server(string localaddress [, long &amp;errcode [, string &amp;errstring [, long flags [, resource context]]]])" returns="resource" doc="Create a server socket bound to localaddress" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_accept" signature="stream_socket_accept(resource serverstream, [ double timeout [, string &amp;peername ]])" returns="resource" doc="Accept a client connection from a server socket" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_get_name" signature="stream_socket_get_name(resource stream, bool want_peer)" returns="string" doc="Returns either the locally bound or remote name for a&#10;socket stream" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_sendto" signature="stream_socket_sendto(resouce stream, string data [, long flags [, string target_addr]])" returns="long" doc="Send data to a socket stream If target addr is&#10;specified it must be in dotted quad or ipv format" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_recvfrom" signature="stream_socket_recvfrom(resource stream, long amount [, long flags [, string &amp;remote_addr]])" returns="string" doc="Receives data from a socket stream" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_get_contents" signature="stream_get_contents(resource source [, long maxlen [, long offset]])" returns="string" doc="Reads all remaining bytes or up to maxlen bytes from a&#10;stream and returns them as a string" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_copy_to_stream" signature="stream_copy_to_stream(resource source, resource dest [, long maxlen [, long pos]])" returns="long" doc="Reads up to maxlen bytes from source stream and writes&#10;them to dest stream" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_get_meta_data" signature="stream_get_meta_data(resource fp)" returns="array" doc="Retrieves header meta data from streams file pointers" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_get_transports" signature="stream_get_transports()" returns="array" doc="Retrieves list of registered socket transports" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_get_wrappers" signature="stream_get_wrappers()" returns="array" doc="Retrieves list of registered stream wrappers" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_select" signature="stream_select(array &amp;read_streams, array &amp;write_streams, array &amp;except_streams, int tv_sec[, int tv_usec])" returns="int" doc="Runs the select system call on the sets of streams with&#10;a timeout specified by tv sec and tv usec" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_context_get_options" signature="stream_context_get_options(resource context" returns="array" doc="Retrieve options for a stream wrapper context" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_context_set_option" signature="stream_context_set_option(resource context" returns="bool" doc="Set an option for a wrapper" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_context_set_params" signature="stream_context_set_params(resource context" returns="bool" doc="Set parameters for a file context" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_context_get_params" signature="stream_context_get_params(resource context" returns="array" doc="Get parameters of a file context" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_context_get_default" signature="stream_context_get_default([array options])" returns="resource" doc="Get a handle on the default file stream context and&#10;optionally set parameters" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_context_set_default" signature="stream_context_set_default(array options)" returns="resource" doc="Set default file stream context returns the context as&#10;a resource" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_context_create" signature="stream_context_create([array options[, array params]])" returns="resource" doc="Create a file context and optionally set parameters" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_filter_prepend" signature="stream_filter_prepend(resource stream, string filtername[, int read_write[, string filterparams]])" returns="resource" doc="Prepend a filter to a stream" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_filter_append" signature="stream_filter_append(resource stream, string filtername[, int read_write[, string filterparams]])" returns="resource" doc="Append a filter to a stream" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_filter_remove" signature="stream_filter_remove(resource stream_filter)" returns="bool" doc="Flushes any data in the filter's internal buffer&#10;removes it from the chain and frees the resource" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_get_line" signature="stream_get_line(resource stream, int maxlen [, string ending])" returns="string" doc="Read up to maxlen bytes from a stream or until the&#10;ending string is found" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_set_blocking" signature="stream_set_blocking(resource socket, int mode)" returns="bool" doc="Set blocking non-blocking mode on a socket or stream" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_set_timeout" signature="stream_set_timeout(resource stream, int seconds [, int microseconds])" returns="bool" doc="Set timeout on stream read to seconds microseonds" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_set_write_buffer" signature="stream_set_write_buffer(resource fp, int buffer)" returns="int" doc="Set file write buffer" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_enable_crypto" signature="stream_socket_enable_crypto(resource stream, bool enable [, int cryptokind [, resource sessionstream]])" returns="int" doc="Enable or disable a specific kind of crypto on the&#10;stream" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_is_local" signature="stream_is_local(resource stream" returns="bool" doc="U" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_supports_lock" signature="stream_supports_lock(resource stream)" returns="bool" doc="Tells wether the stream supports locking through flock" ilk="function" src="streamsfuncs.c"/>
      <scope name="stream_socket_shutdown" signature="stream_socket_shutdown(resource stream, int how)" returns="int" doc="causes all or part of a full-duplex connection on the&#10;socket associated with stream to be shut down If how" ilk="function" src="streamsfuncs.c"/>
      <scope name="bin2hex" signature="bin2hex(string data)" returns="string" doc="Converts the binary representation of data to hex" ilk="function" src="string.c"/>
      <scope name="strspn" signature="strspn(string str, string mask [, start [, len]])" returns="int" doc="Finds length of initial segment consisting entirely of&#10;characters found in mask If start or and length is&#10;provided works" ilk="function" src="string.c"/>
      <scope name="strcspn" signature="strcspn(string str, string mask [, start [, len]])" returns="int" doc="Finds length of initial segment consisting entirely of&#10;characters not found in mask If start or and length is&#10;provide" ilk="function" src="string.c"/>
      <scope name="nl_langinfo" signature="nl_langinfo(int item)" returns="string" doc="Query language and locale information" ilk="function" src="string.c"/>
      <scope name="strcoll" signature="strcoll(string str1, string str2)" returns="int" doc="Compares two strings using the current locale" ilk="function" src="string.c"/>
      <scope name="trim" signature="trim(string str [, string character_mask])" returns="string" doc="Strips whitespace from the beginning and end of a&#10;string" ilk="function" src="string.c"/>
      <scope name="rtrim" signature="rtrim(string str [, string character_mask])" returns="string" doc="Removes trailing whitespace" ilk="function" src="string.c"/>
      <scope name="ltrim" signature="ltrim(string str [, string character_mask])" returns="string" doc="Strips whitespace from the beginning of a string" ilk="function" src="string.c"/>
      <scope name="wordwrap" signature="wordwrap(string str [, int width [, string break [, boolean cut]]])" returns="string" doc="Wraps buffer to selected number of characters using&#10;string break char" ilk="function" src="string.c"/>
      <scope name="explode" signature="explode(string separator, string str [, int limit])" returns="array" doc="Splits a string on string separator and return array of&#10;components If limit is positive only limit number of&#10;components" ilk="function" src="string.c"/>
      <scope name="join" signature="join([string glue,] array pieces)" doc="Joins array elements placing glue string between items&#10;and return one string&amp;#xa;join is an alias to implode" ilk="function" returns="string"/>
      <scope name="implode" signature="implode([string glue,] array pieces)" returns="string" doc="Joins array elements placing glue string between items&#10;and return one string" ilk="function" src="string.c"/>
      <scope name="strtok" signature="strtok([string str,] string token)" returns="string" doc="Tokenize a string" ilk="function" src="string.c"/>
      <scope name="strtoupper" signature="strtoupper(string str)" returns="string" doc="Makes a string uppercase" ilk="function" src="string.c"/>
      <scope name="strtolower" signature="strtolower(string str)" returns="string" doc="Makes a string lowercase" ilk="function" src="string.c"/>
      <scope name="basename" signature="basename(string path [, string suffix])" returns="string" doc="Returns the filename component of the path" ilk="function" src="string.c"/>
      <scope name="dirname" signature="dirname(string path)" returns="string" doc="Returns the directory name component of the path" ilk="function" src="string.c"/>
      <scope name="pathinfo" signature="pathinfo(string path[, int options])" returns="array" doc="Returns information about a certain string" ilk="function" src="string.c"/>
      <scope name="stristr" signature="stristr(string haystack, string needle[, bool part])" returns="string" doc="Finds first occurrence of a string within another case&#10;insensitive" ilk="function" src="string.c"/>
      <scope name="strstr" signature="strstr(string haystack, string needle[, bool part])" returns="string" doc="Finds first occurrence of a string within another" ilk="function" src="string.c"/>
      <scope name="strchr" signature="strchr(string haystack, string needle[, bool part])" doc="Finds first occurrence of a string within another&amp;#xa;strchr is an alias to strstr" ilk="function" returns="string"/>
      <scope name="strpos" signature="strpos(string haystack, string needle [, int offset])" returns="int" doc="Finds position of first occurrence of a string within&#10;another" ilk="function" src="string.c"/>
      <scope name="stripos" signature="stripos(string haystack, string needle [, int offset])" returns="int" doc="Finds position of first occurrence of a string within&#10;another case insensitive" ilk="function" src="string.c"/>
      <scope name="strrpos" signature="strrpos(string haystack, string needle [, int offset])" returns="int" doc="Finds position of last occurrence of a string within&#10;another string" ilk="function" src="string.c"/>
      <scope name="strripos" signature="strripos(string haystack, string needle [, int offset])" returns="int" doc="Finds position of last occurrence of a string within&#10;another string" ilk="function" src="string.c"/>
      <scope name="strrchr" signature="strrchr(string haystack, string needle)" returns="string" doc="Finds the last occurrence of a character in a string&#10;within another" ilk="function" src="string.c"/>
      <scope name="chunk_split" signature="chunk_split(string str [, int chunklen [, string ending]])" returns="string" doc="Returns split line" ilk="function" src="string.c"/>
      <scope name="substr" signature="substr(string str, int start [, int length])" returns="string" doc="Returns part of a string" ilk="function" src="string.c"/>
      <scope name="substr_replace" signature="substr_replace(mixed str, mixed repl, mixed start [, mixed length])" returns="mixed" doc="Replaces part of a string with another string" ilk="function" src="string.c"/>
      <scope name="quotemeta" signature="quotemeta(string str)" returns="string" doc="Quotes meta characters" ilk="function" src="string.c"/>
      <scope name="ord" signature="ord(string character)" returns="int" doc="Returns ASCII value of character" ilk="function" src="string.c"/>
      <scope name="chr" signature="chr(int ascii)" returns="string" doc="Converts ASCII code to a character" ilk="function" src="string.c"/>
      <scope name="lcfirst" signature="lcfirst(string str)" returns="string" doc="Make a string's first character lowercase" ilk="function" src="string.c"/>
      <scope name="ucfirst" signature="ucfirst(string str)" returns="string" doc="Make a string's first character uppercase" ilk="function" src="string.c"/>
      <scope name="ucwords" signature="ucwords(string str)" returns="string" doc="Uppercase the first character of every word in a string" ilk="function" src="string.c"/>
      <scope name="strtr" signature="strtr(string str, string from[, string to])" returns="string" doc="Translates characters in str using given translation&#10;tables" ilk="function" src="string.c"/>
      <scope name="strrev" signature="strrev(string str)" returns="string" doc="Reverse a string" ilk="function" src="string.c"/>
      <scope name="similar_text" signature="similar_text(string str1, string str2 [, float percent])" returns="int" doc="Calculates the similarity between two strings" ilk="function" src="string.c"/>
      <scope name="addcslashes" signature="addcslashes(string str, string charlist)" returns="string" doc="Escapes all chars mentioned in charlist with backslash&#10;It creates octal representations if asked to backslash&#10;characters with th bit" ilk="function" src="string.c"/>
      <scope name="addslashes" signature="addslashes(string str)" returns="string" doc="Escapes single quote double quotes and backslash&#10;characters in a string with backslashes" ilk="function" src="string.c"/>
      <scope name="stripcslashes" signature="stripcslashes(string str)" returns="string" doc="Strips backslashes from a string Uses C-style&#10;conventions" ilk="function" src="string.c"/>
      <scope name="stripslashes" signature="stripslashes(string str)" returns="string" doc="Strips backslashes from a string" ilk="function" src="string.c"/>
      <scope name="str_replace" signature="str_replace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])" returns="mixed" doc="Replaces all occurrences of search in haystack with&#10;replace" ilk="function" src="string.c"/>
      <scope name="str_ireplace" signature="str_ireplace(mixed search, mixed replace, mixed subject [, int &amp;replace_count])" returns="mixed" doc="Replaces all occurrences of search in haystack with&#10;replace case-insensitive" ilk="function" src="string.c"/>
      <scope name="hebrev" signature="hebrev(string str [, int max_chars_per_line])" returns="string" doc="Converts logical Hebrew text to visual text" ilk="function" src="string.c"/>
      <scope name="hebrevc" signature="hebrevc(string str [, int max_chars_per_line])" returns="string" doc="Converts logical Hebrew text to visual text with&#10;newline conversion" ilk="function" src="string.c"/>
      <scope name="nl2br" signature="nl2br(string str [, bool is_xhtml])" returns="string" doc="Converts newlines to HTML line breaks" ilk="function" src="string.c"/>
      <scope name="strip_tags" signature="strip_tags(string str [, string allowable_tags])" returns="string" doc="Strips HTML and PHP tags from a string" ilk="function" src="string.c"/>
      <scope name="setlocale" signature="setlocale(mixed category, string locale [, string ...])" returns="string" doc="Set locale information" ilk="function" src="string.c"/>
      <scope name="parse_str" signature="parse_str(string encoded_string [, array result])" returns="void" doc="Parses GET POST COOKIE data and sets global variables" ilk="function" src="string.c"/>
      <scope name="str_getcsv" signature="str_getcsv(string input[, string delimiter[, string enclosure[, string escape]]])" returns="array" doc="Parse a CSV string into an array" ilk="function" src="string.c"/>
      <scope name="str_repeat" signature="str_repeat(string input, int mult)" returns="string" doc="Returns the input string repeat mult times" ilk="function" src="string.c"/>
      <scope name="count_chars" signature="count_chars(string input [, int mode])" returns="mixed" doc="Returns info about what characters are used in input" ilk="function" src="string.c"/>
      <scope name="strnatcmp" signature="strnatcmp(string s1, string s2)" returns="int" doc="Returns the result of string comparison using 'natural'&#10;algorithm" ilk="function" src="string.c"/>
      <scope name="localeconv" signature="localeconv(void)" returns="array" doc="Returns numeric formatting information based on the&#10;current locale" ilk="function" src="string.c"/>
      <scope name="strnatcasecmp" signature="strnatcasecmp(string s1, string s2)" returns="int" doc="Returns the result of case-insensitive string&#10;comparison using 'natural' algorithm" ilk="function" src="string.c"/>
      <scope name="substr_count" signature="substr_count(string haystack, string needle [, int offset [, int length]])" returns="int" doc="Returns the number of times a substring occurs in the&#10;string" ilk="function" src="string.c"/>
      <scope name="str_pad" signature="str_pad(string input, int pad_length [, string pad_string [, int pad_type]])" returns="string" doc="Returns input string padded on the left or right to&#10;specified length with pad string" ilk="function" src="string.c"/>
      <scope name="sscanf" signature="sscanf(string str, string format [, string ...])" returns="mixed" doc="Implements an ANSI C compatible sscanf" ilk="function" src="string.c"/>
      <scope name="str_rot13" signature="str_rot13(string str)" returns="string" doc="Perform the rot transform on a string" ilk="function" src="string.c"/>
      <scope name="str_shuffle" signature="str_shuffle(string str)" returns="void" doc="Shuffles string One permutation of all possible is&#10;created" ilk="function" src="string.c"/>
      <scope name="str_word_count" signature="str_word_count(string str, [int format [, string charlist]])" returns="mixed" doc="Counts the number of words inside a string If format of&#10;is specified then the function will return an array" ilk="function" src="string.c"/>
      <scope name="money_format" signature="money_format(string format , float value)" returns="string" doc="Convert monetary value s to string" ilk="function" src="string.c"/>
      <scope name="str_split" signature="str_split(string str [, int split_length])" returns="array" doc="Convert a string to an array If split length is&#10;specified break the string down into chunks each split&#10;length" ilk="function" src="string.c"/>
      <scope name="strpbrk" signature="strpbrk(string haystack, string char_list)" returns="array" doc="Search a string for any of a set of characters" ilk="function" src="string.c"/>
      <scope name="substr_compare" signature="substr_compare(string main_str, string str, int offset [, int length [, bool case_sensitivity]])" returns="int" doc="Binary safe optionally case insensitive comparison of&#10;strings from an offset up to length characters" ilk="function" src="string.c"/>
      <scope name="get_browser" signature="get_browser([string browser_name [, bool return_array]])" returns="mixed" doc="Get information about the capabilities of a browser If&#10;browser name is omitted or null HTTP USER AGENT is used" ilk="function" src="browscap.c"/>
      <scope name="parse_url" signature="parse_url(string url, [int url_component])" returns="mixed" doc="Parse a URL and return its components" ilk="function" src="url.c"/>
      <scope name="urlencode" signature="urlencode(string str)" returns="string" doc="URL-encodes string" ilk="function" src="url.c"/>
      <scope name="urldecode" signature="urldecode(string str)" returns="string" doc="Decodes URL-encoded string" ilk="function" src="url.c"/>
      <scope name="rawurlencode" signature="rawurlencode(string str)" returns="string" doc="URL-encodes string" ilk="function" src="url.c"/>
      <scope name="rawurldecode" signature="rawurldecode(string str)" returns="string" doc="Decodes URL-encodes string" ilk="function" src="url.c"/>
      <scope name="get_headers" signature="get_headers(string url[, int format])" returns="array" doc="fetches all the headers sent by the server in response&#10;to a HTTP request" ilk="function" src="url.c"/>
      <scope name="flock" signature="flock(resource fp, int operation [, int &amp;wouldblock])" returns="bool" doc="Portable file locking" ilk="function" src="file.c"/>
      <scope name="get_meta_tags" signature="get_meta_tags(string filename [, bool use_include_path])" returns="array" doc="Extracts all meta tag content attributes from a file&#10;and returns an array" ilk="function" src="file.c"/>
      <scope name="file_get_contents" signature="file_get_contents(string filename [, bool use_include_path [, resource context [, long offset [, long maxlen]]]])" returns="string" doc="Read the entire file into a string" ilk="function" src="file.c"/>
      <scope name="file_put_contents" signature="file_put_contents(string file, mixed data [, int flags [, resource context]])" returns="int" doc="Write Create a file with contents data and return the&#10;number of bytes written" ilk="function" src="file.c"/>
      <scope name="file" signature="file(string filename [, int flags[, resource context]])" returns="array" doc="Read entire file into an array" ilk="function" src="file.c"/>
      <scope name="tempnam" signature="tempnam(string dir, string prefix)" returns="string" doc="Create a unique filename in a directory" ilk="function" src="file.c"/>
      <scope name="tmpfile" signature="tmpfile(void)" returns="resource" doc="Create a temporary file that will be deleted&#10;automatically after use" ilk="function" src="file.c"/>
      <scope name="fopen" signature="fopen(string filename, string mode [, bool use_include_path [, resource context]])" returns="resource" doc="Open a file or a URL and return a file pointer" ilk="function" src="file.c"/>
      <scope name="fclose" signature="fclose(resource fp)" returns="bool" doc="Close an open file pointer" ilk="function" src="file.c"/>
      <scope name="popen" signature="popen(string command, string mode)" returns="resource" doc="Execute a command and open either a read or a write&#10;pipe to it" ilk="function" src="file.c"/>
      <scope name="pclose" signature="pclose(resource fp)" returns="int" doc="Close a file pointer opened by popen" ilk="function" src="file.c"/>
      <scope name="feof" signature="feof(resource fp)" returns="bool" doc="Test for end-of-file on a file pointer" ilk="function" src="file.c"/>
      <scope name="fgets" signature="fgets(resource fp[, int length])" returns="string" doc="Get a line from file pointer" ilk="function" src="file.c"/>
      <scope name="fgetc" signature="fgetc(resource fp)" returns="string" doc="Get a character from file pointer" ilk="function" src="file.c"/>
      <scope name="fgetss" signature="fgetss(resource fp [, int length [, string allowable_tags]])" returns="string" doc="Get a line from file pointer and strip HTML tags" ilk="function" src="file.c"/>
      <scope name="fscanf" signature="fscanf(resource stream, string format [, string ...])" returns="mixed" doc="Implements a mostly ANSI compatible fscanf" ilk="function" src="file.c"/>
      <scope name="fwrite" signature="fwrite(resource fp, string str [, int length])" returns="int" doc="Binary-safe file write" ilk="function" src="file.c"/>
      <scope name="fflush" signature="fflush(resource fp)" returns="bool" doc="Flushes output" ilk="function" src="file.c"/>
      <scope name="rewind" signature="rewind(resource fp)" returns="bool" doc="Rewind the position of a file pointer" ilk="function" src="file.c"/>
      <scope name="ftell" signature="ftell(resource fp)" returns="int" doc="Get file pointer's read write position" ilk="function" src="file.c"/>
      <scope name="fseek" signature="fseek(resource fp, int offset [, int whence])" returns="int" doc="Seek on a file pointer" ilk="function" src="file.c"/>
      <scope name="mkdir" signature="mkdir(string pathname [, int mode [, bool recursive [, resource context]]])" returns="bool" doc="Create a directory" ilk="function" src="file.c"/>
      <scope name="rmdir" signature="rmdir(string dirname[, resource context])" returns="bool" doc="Remove a directory" ilk="function" src="file.c"/>
      <scope name="readfile" signature="readfile(string filename [, bool use_include_path[, resource context]])" returns="int" doc="Output a file or a URL" ilk="function" src="file.c"/>
      <scope name="umask" signature="umask([int mask])" returns="int" doc="Return or change the umask" ilk="function" src="file.c"/>
      <scope name="fpassthru" signature="fpassthru(resource fp)" returns="int" doc="Output all remaining data from a file pointer" ilk="function" src="file.c"/>
      <scope name="rename" signature="rename(string old_name, string new_name[, resource context])" returns="bool" doc="Rename a file" ilk="function" src="file.c"/>
      <scope name="unlink" signature="unlink(string filename[, context context])" returns="bool" doc="Delete a file" ilk="function" src="file.c"/>
      <scope name="ftruncate" signature="ftruncate(resource fp, int size)" returns="bool" doc="Truncate file to 'size' length" ilk="function" src="file.c"/>
      <scope name="fstat" signature="fstat(resource fp)" returns="array" doc="Stat on a filehandle" ilk="function" src="file.c"/>
      <scope name="copy" signature="copy(string source_file, string destination_file [, resource context])" returns="bool" doc="Copy a file" ilk="function" src="file.c"/>
      <scope name="fread" signature="fread(resource fp, int length)" returns="string" doc="Binary-safe file read" ilk="function" src="file.c"/>
      <scope name="fputcsv" signature="fputcsv(resource fp, array fields [, string delimiter [, string enclosure]])" returns="int" doc="Format line as CSV and write to file pointer" ilk="function" src="file.c"/>
      <scope name="fgetcsv" signature="fgetcsv(resource fp [,int length [, string delimiter [, string enclosure [, string escape]]]])" returns="array" doc="Get line from file pointer and parse for CSV fields" ilk="function" src="file.c"/>
      <scope name="realpath" signature="realpath(string path)" returns="string" doc="Return the resolved path" ilk="function" src="file.c"/>
      <scope name="fnmatch" signature="fnmatch(string pattern, string filename [, int flags])" returns="bool" doc="Match filename against pattern" ilk="function" src="file.c"/>
      <scope name="sys_get_temp_dir" signature="sys_get_temp_dir()" returns="string" doc="Returns directory path used for temporary files" ilk="function" src="file.c"/>
      <scope name="gethostname" signature="gethostname()" returns="string" doc="Get the host name of the current machine" ilk="function" src="dns.c"/>
      <scope name="gethostbyaddr" signature="gethostbyaddr(string ip_address)" returns="string" doc="Get the Internet host name corresponding to a given IP&#10;address" ilk="function" src="dns.c"/>
      <scope name="gethostbyname" signature="gethostbyname(string hostname)" returns="string" doc="Get the IP address corresponding to a given Internet&#10;host name" ilk="function" src="dns.c"/>
      <scope name="gethostbynamel" signature="gethostbynamel(string hostname)" returns="array" doc="Return a list of IP addresses that a given hostname&#10;resolves to" ilk="function" src="dns.c"/>
      <scope name="dns_check_record" signature="dns_check_record(string host [, string type])" returns="bool" doc="Check DNS records corresponding to a given Internet&#10;host name or IP address" ilk="function" src="dns_win32.c"/>
      <scope name="dns_get_record" signature="dns_get_record(string hostname [, int type[, array authns, array addtl]])" returns="false" doc="Get any Resource Record corresponding to a given&#10;Internet host name" ilk="function" src="dns_win32.c"/>
      <scope name="dns_get_mx" signature="dns_get_mx(string hostname, array mxhosts [, array weight])" returns="bool" doc="Get MX records corresponding to a given Internet host&#10;name" ilk="function" src="dns.c"/>
      <scope name="sprintf" signature="sprintf(string format [, mixed arg1 [, mixed ...]])" returns="string" doc="Return a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="vsprintf" signature="vsprintf(string format, array args)" returns="string" doc="Return a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="printf" signature="printf(string format [, mixed arg1 [, mixed ...]])" returns="int" doc="Output a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="vprintf" signature="vprintf(string format, array args)" returns="int" doc="Output a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="fprintf" signature="fprintf(resource stream, string format [, mixed arg1 [, mixed ...]])" returns="int" doc="Output a formatted string into a stream" ilk="function" src="formatted_print.c"/>
      <scope name="vfprintf" signature="vfprintf(resource stream, string format, array args)" returns="int" doc="Output a formatted string into a stream" ilk="function" src="formatted_print.c"/>
      <scope name="pack" signature="pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])" returns="string" doc="Takes one or more arguments and packs them into a&#10;binary string according to the format argument" ilk="function" src="pack.c"/>
      <scope name="unpack" signature="unpack(string format, string input)" returns="array" doc="Unpack binary string into named array elements&#10;according to format argument" ilk="function" src="pack.c"/>
      <scope name="disk_total_space" signature="disk_total_space(string path)" returns="float" doc="Get total disk space for filesystem that path is on" ilk="function" src="filestat.c"/>
      <scope name="disk_free_space" signature="disk_free_space(string path)" returns="float" doc="Get free disk space for filesystem that path is on" ilk="function" src="filestat.c"/>
      <scope name="chgrp" signature="chgrp(string filename, mixed group)" returns="bool" doc="Change file group" ilk="function" src="filestat.c"/>
      <scope name="lchgrp" signature="lchgrp(string filename, mixed group)" returns="bool" doc="Change symlink group" ilk="function" src="filestat.c"/>
      <scope name="chmod" signature="chmod(string filename, int mode)" returns="bool" doc="Change file mode" ilk="function" src="filestat.c"/>
      <scope name="touch" signature="touch(string filename [, int time [, int atime]])" returns="bool" doc="Set modification time of file" ilk="function" src="filestat.c"/>
      <scope name="clearstatcache" signature="clearstatcache([bool clear_realpath_cache[, string filename]])" returns="void" doc="Clear file stat cache" ilk="function" src="filestat.c"/>
      <scope name="fileperms" signature="fileperms(string filename)" returns="int" doc="Get file permissions" ilk="function" src="func_interceptors.c"/>
      <scope name="fileinode" signature="fileinode(string filename)" returns="int" doc="Get file inode" ilk="function" src="func_interceptors.c"/>
      <scope name="filesize" signature="filesize(string filename)" returns="int" doc="Get file size" ilk="function" src="func_interceptors.c"/>
      <scope name="fileowner" signature="fileowner(string filename)" returns="int" doc="Get file owner" ilk="function" src="func_interceptors.c"/>
      <scope name="filegroup" signature="filegroup(string filename)" returns="int" doc="Get file group" ilk="function" src="func_interceptors.c"/>
      <scope name="fileatime" signature="fileatime(string filename)" returns="int" doc="Get last access time of file" ilk="function" src="func_interceptors.c"/>
      <scope name="filemtime" signature="filemtime(string filename)" returns="int" doc="Get last modification time of file" ilk="function" src="func_interceptors.c"/>
      <scope name="filectime" signature="filectime(string filename)" returns="int" doc="Get inode modification time of file" ilk="function" src="func_interceptors.c"/>
      <scope name="filetype" signature="filetype(string filename)" returns="string" doc="Get file type" ilk="function" src="func_interceptors.c"/>
      <scope name="is_writable" signature="is_writable(string filename)" returns="bool" doc="Returns true if file can be written" ilk="function" src="func_interceptors.c"/>
      <scope name="is_readable" signature="is_readable(string filename)" returns="bool" doc="Returns true if file can be read" ilk="function" src="func_interceptors.c"/>
      <scope name="is_executable" signature="is_executable(string filename)" returns="bool" doc="Returns true if file is executable" ilk="function" src="func_interceptors.c"/>
      <scope name="is_file" signature="is_file(string filename)" returns="bool" doc="Returns true if file is a regular file" ilk="function" src="filestat.c"/>
      <scope name="is_dir" signature="is_dir(string filename)" returns="bool" doc="Returns true if file is directory" ilk="function" src="func_interceptors.c"/>
      <scope name="is_link" signature="is_link(string filename)" returns="bool" doc="Returns true if file is symbolic link" ilk="function" src="filestat.c"/>
      <scope name="file_exists" signature="file_exists(string filename)" returns="bool" doc="Returns true if filename exists" ilk="function" src="func_interceptors.c"/>
      <scope name="lstat" signature="lstat(string filename)" returns="array" doc="Give information about a file or symbolic link" ilk="function" src="func_interceptors.c"/>
      <scope name="stat" signature="stat(string filename)" returns="array" doc="Give information about a file" ilk="function" src="func_interceptors.c"/>
      <scope name="stream_bucket_make_writeable" signature="stream_bucket_make_writeable(resource brigade)" returns="object" doc="Return a bucket object from the brigade for operating&#10;on" ilk="function" src="user_filters.c"/>
      <scope name="stream_bucket_prepend" signature="stream_bucket_prepend(resource brigade, resource bucket)" returns="void" doc="Prepend bucket to brigade" ilk="function" src="user_filters.c"/>
      <scope name="stream_bucket_append" signature="stream_bucket_append(resource brigade, resource bucket)" returns="void" doc="Append bucket to brigade" ilk="function" src="user_filters.c"/>
      <scope name="stream_bucket_new" signature="stream_bucket_new(resource stream, string buffer)" returns="resource" doc="Create a new bucket for use on the current stream" ilk="function" src="user_filters.c"/>
      <scope name="stream_get_filters" signature="stream_get_filters(void)" returns="array" doc="Returns a list of registered filters" ilk="function" src="user_filters.c"/>
      <scope name="stream_filter_register" signature="stream_filter_register(string filtername, string classname)" returns="bool" doc="Registers a custom filter handler class" ilk="function" src="user_filters.c"/>
      <scope name="readlink" signature="readlink(string filename)" returns="string" doc="Return the target of a symbolic link" ilk="function" src="link_win32.c"/>
      <scope name="linkinfo" signature="linkinfo(string filename)" returns="int" doc="Returns the st dev field of the UNIX C stat structure&#10;describing the link" ilk="function" src="link_win32.c"/>
      <scope name="symlink" signature="symlink(string target, string link)" returns="int" doc="Create a symbolic link" ilk="function" src="link_win32.c"/>
      <scope name="link" signature="link(string target, string link)" returns="int" doc="Create a hard link" ilk="function" src="link_win32.c"/>
      <scope name="srand" signature="srand([int seed])" returns="void" doc="Seeds random number generator" ilk="function" src="rand.c"/>
      <scope name="mt_srand" signature="mt_srand([int seed])" returns="void" doc="Seeds Mersenne Twister random number generator" ilk="function" src="rand.c"/>
      <scope name="rand" signature="rand([int min, int max])" returns="int" doc="Returns a random number" ilk="function" src="rand.c"/>
      <scope name="mt_rand" signature="mt_rand([int min, int max])" returns="int" doc="Returns a random number from Mersenne Twister" ilk="function" src="rand.c"/>
      <scope name="getrandmax" signature="getrandmax(void)" returns="int" doc="Returns the maximum value a random number can have" ilk="function" src="rand.c"/>
      <scope name="mt_getrandmax" signature="mt_getrandmax(void)" returns="int" doc="Returns the maximum value a random number from Mersenne&#10;Twister can have" ilk="function" src="rand.c"/>
      <scope name="convert_uuencode" signature="convert_uuencode(string data)" returns="string" doc="uuencode a string" ilk="function" src="uuencode.c"/>
      <scope name="convert_uudecode" signature="convert_uudecode(string data)" returns="string" doc="decode a uuencoded string" ilk="function" src="uuencode.c"/>
      <scope name="gettype" signature="gettype(mixed var)" returns="string" doc="Returns the type of the variable" ilk="function" src="type.c"/>
      <scope name="settype" signature="settype(mixed var, string type)" returns="bool" doc="Set the type of the variable" ilk="function" src="type.c"/>
      <scope name="intval" signature="intval(mixed var [, int base])" returns="int" doc="Get the integer value of a variable using the optional&#10;base for the conversion" ilk="function" src="type.c"/>
      <scope name="floatval" signature="floatval(mixed var)" returns="float" doc="Get the float value of a variable" ilk="function" src="type.c"/>
      <scope name="strval" signature="strval(mixed var)" returns="string" doc="Get the string value of a variable" ilk="function" src="type.c"/>
      <scope name="is_null" signature="is_null(mixed var)" returns="bool" doc="Returns true if variable is null" ilk="function" src="type.c"/>
      <scope name="is_resource" signature="is_resource(mixed var)" returns="bool" doc="Returns true if variable is a resource" ilk="function" src="type.c"/>
      <scope name="is_bool" signature="is_bool(mixed var)" returns="bool" doc="Returns true if variable is a boolean" ilk="function" src="type.c"/>
      <scope name="is_long" signature="is_long(mixed var)" returns="bool" doc="Returns true if variable is a long integer" ilk="function" src="type.c"/>
      <scope name="is_float" signature="is_float(mixed var)" returns="bool" doc="Returns true if variable is float point" ilk="function" src="type.c"/>
      <scope name="is_string" signature="is_string(mixed var)" returns="bool" doc="Returns true if variable is a string" ilk="function" src="type.c"/>
      <scope name="is_array" signature="is_array(mixed var)" returns="bool" doc="Returns true if variable is an array" ilk="function" src="type.c"/>
      <scope name="is_object" signature="is_object(mixed var)" returns="bool" doc="Returns true if variable is an object" ilk="function" src="type.c"/>
      <scope name="is_numeric" signature="is_numeric(mixed value)" returns="bool" doc="Returns true if value is a number or a numeric string" ilk="function" src="type.c"/>
      <scope name="is_scalar" signature="is_scalar(mixed value)" returns="bool" doc="Returns true if value is a scalar" ilk="function" src="type.c"/>
      <scope name="is_callable" signature="is_callable(mixed var [, bool syntax_only [, string callable_name]])" returns="bool" doc="Returns true if var is callable" ilk="function" src="type.c"/>
      <scope name="krsort" signature="krsort(array &amp;array_arg [, int sort_flags])" returns="bool" doc="Sort an array by key value in reverse order" ilk="function" src="array.c"/>
      <scope name="ksort" signature="ksort(array &amp;array_arg [, int sort_flags])" returns="bool" doc="Sort an array by key" ilk="function" src="array.c"/>
      <scope name="count" signature="count(mixed var [, int mode])" returns="int" doc="Count the number of elements in a variable usually an&#10;array" ilk="function" src="array.c"/>
      <scope name="natsort" signature="natsort(array &amp;array_arg)" returns="void" doc="Sort an array using natural sort" ilk="function" src="array.c"/>
      <scope name="natcasesort" signature="natcasesort(array &amp;array_arg)" returns="void" doc="Sort an array using case-insensitive natural sort" ilk="function" src="array.c"/>
      <scope name="asort" signature="asort(array &amp;array_arg [, int sort_flags])" returns="bool" doc="Sort an array and maintain index association" ilk="function" src="array.c"/>
      <scope name="arsort" signature="arsort(array &amp;array_arg [, int sort_flags])" returns="bool" doc="Sort an array in reverse order and maintain index&#10;association" ilk="function" src="array.c"/>
      <scope name="sort" signature="sort(array &amp;array_arg [, int sort_flags])" returns="bool" doc="Sort an array" ilk="function" src="array.c"/>
      <scope name="rsort" signature="rsort(array &amp;array_arg [, int sort_flags])" returns="bool" doc="Sort an array in reverse order" ilk="function" src="array.c"/>
      <scope name="usort" signature="usort(array array_arg, string cmp_function)" returns="bool" doc="Sort an array by values using a user-defined comparison&#10;function" ilk="function" src="array.c"/>
      <scope name="uasort" signature="uasort(array array_arg, string cmp_function)" returns="bool" doc="Sort an array with a user-defined comparison function&#10;and maintain index association" ilk="function" src="array.c"/>
      <scope name="uksort" signature="uksort(array array_arg, string cmp_function)" returns="bool" doc="Sort an array by keys using a user-defined comparison&#10;function" ilk="function" src="array.c"/>
      <scope name="end" signature="end(array array_arg)" returns="mixed" doc="Advances array argument's internal pointer to the last&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="prev" signature="prev(array array_arg)" returns="mixed" doc="Move array argument's internal pointer to the previous&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="next" signature="next(array array_arg)" returns="mixed" doc="Move array argument's internal pointer to the next&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="reset" signature="reset(array array_arg)" returns="mixed" doc="Set array argument's internal pointer to the first&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="current" signature="current()" returns="array" doc="throws RuntimeException throws InvalidArgumentException&#10;Return an array of all registered Iterator instances&#10;current result" ilk="function" src="spl_observer.c"/>
      <scope name="key" signature="key(array array_arg)" returns="mixed" doc="Return the key of the element currently pointed to by&#10;the internal array pointer" ilk="function" src="array.c"/>
      <scope name="min" signature="min(mixed arg1 [, mixed arg2 [, mixed ...]])" returns="mixed" doc="Return the lowest value in an array or a series of&#10;arguments" ilk="function" src="array.c"/>
      <scope name="max" signature="max(mixed arg1 [, mixed arg2 [, mixed ...]])" returns="mixed" doc="Return the highest value in an array or a series of&#10;arguments" ilk="function" src="array.c"/>
      <scope name="array_walk" signature="array_walk(array input, string funcname [, mixed userdata])" returns="bool" doc="Apply a user function to every member of an array" ilk="function" src="array.c"/>
      <scope name="array_walk_recursive" signature="array_walk_recursive(array input, string funcname [, mixed userdata])" returns="bool" doc="Apply a user function recursively to every member of an&#10;array" ilk="function" src="array.c"/>
      <scope name="in_array" signature="in_array(mixed needle, array haystack [, bool strict])" returns="bool" doc="Checks if the given value exists in the array" ilk="function" src="array.c"/>
      <scope name="array_search" signature="array_search(mixed needle, array haystack [, bool strict])" returns="mixed" doc="Searches the array for a given value and returns the&#10;corresponding key if successful" ilk="function" src="array.c"/>
      <scope name="extract" signature="extract(array var_array [, int extract_type [, string prefix]])" returns="int" doc="Imports variables into symbol table from an array" ilk="function" src="array.c"/>
      <scope name="compact" signature="compact(mixed var_names [, mixed ...])" returns="array" doc="Creates a hash containing variables and their values" ilk="function" src="array.c"/>
      <scope name="array_fill" signature="array_fill(int start_key, int num, mixed val)" returns="array" doc="Create an array containing num elements starting with&#10;index start key each initialized to val" ilk="function" src="array.c"/>
      <scope name="array_fill_keys" signature="array_fill_keys(array keys, mixed val)" returns="array" doc="Create an array using the elements of the first&#10;parameter as keys each initialized to val" ilk="function" src="array.c"/>
      <scope name="range" signature="range(mixed low, mixed high[, int step])" returns="array" doc="Create an array containing the range of integers or&#10;characters from low to high inclusive" ilk="function" src="array.c"/>
      <scope name="shuffle" signature="shuffle(array array_arg)" returns="bool" doc="Randomly shuffle the contents of an array" ilk="function" src="array.c"/>
      <scope name="array_push" signature="array_push(array stack, mixed var [, mixed ...])" returns="int" doc="Pushes elements onto the end of the array" ilk="function" src="array.c"/>
      <scope name="array_pop" signature="array_pop(array stack)" returns="mixed" doc="Pops an element off the end of the array" ilk="function" src="array.c"/>
      <scope name="array_shift" signature="array_shift(array stack)" returns="mixed" doc="Pops an element off the beginning of the array" ilk="function" src="array.c"/>
      <scope name="array_unshift" signature="array_unshift(array stack, mixed var [, mixed ...])" returns="int" doc="Pushes elements onto the beginning of the array" ilk="function" src="array.c"/>
      <scope name="array_splice" signature="array_splice(array input, int offset [, int length [, array replacement]])" returns="array" doc="Removes the elements designated by offset and length&#10;and replace them with supplied array" ilk="function" src="array.c"/>
      <scope name="array_slice" signature="array_slice(array input, int offset [, int length [, bool preserve_keys]])" returns="array" doc="Returns elements specified by offset and length" ilk="function" src="array.c"/>
      <scope name="array_merge" signature="array_merge(array arr1, array arr2 [, array ...])" returns="array" doc="Merges elements from passed arrays into one array" ilk="function" src="array.c"/>
      <scope name="array_merge_recursive" signature="array_merge_recursive(array arr1, array arr2 [, array ...])" returns="array" doc="Recursively merges elements from passed arrays into one&#10;array" ilk="function" src="array.c"/>
      <scope name="array_replace" signature="array_replace(array arr1, array arr2 [, array ...])" returns="array" doc="Replaces elements from passed arrays into one array" ilk="function" src="array.c"/>
      <scope name="array_replace_recursive" signature="array_replace_recursive(array arr1, array arr2 [, array ...])" returns="array" doc="Recursively replaces elements from passed arrays into&#10;one array" ilk="function" src="array.c"/>
      <scope name="array_keys" signature="array_keys(array input [, mixed search_value[, bool strict]])" returns="array" doc="Return just the keys from the input array optionally&#10;only for the specified search value" ilk="function" src="array.c"/>
      <scope name="array_values" signature="array_values(array input)" returns="array" doc="Return just the values from the input array" ilk="function" src="array.c"/>
      <scope name="array_count_values" signature="array_count_values(array input)" returns="array" doc="Return the value as key and the frequency of that value&#10;in input as value" ilk="function" src="array.c"/>
      <scope name="array_reverse" signature="array_reverse(array input [, bool preserve keys])" returns="array" doc="Return input as a new array with the order of the&#10;entries reversed" ilk="function" src="array.c"/>
      <scope name="array_pad" signature="array_pad(array input, int pad_size, mixed pad_value)" returns="array" doc="Returns a copy of input array padded with pad value to&#10;size pad size" ilk="function" src="array.c"/>
      <scope name="array_flip" signature="array_flip(array input)" returns="array" doc="Return array with key - value flipped" ilk="function" src="array.c"/>
      <scope name="array_change_key_case" signature="array_change_key_case(array input [, int case=CASE_LOWER])" returns="array" doc="Retuns an array with all string keys lowercased or&#10;uppercased" ilk="function" src="array.c"/>
      <scope name="array_unique" signature="array_unique(array input [, int sort_flags])" returns="array" doc="Removes duplicate values from array" ilk="function" src="array.c"/>
      <scope name="array_intersect_key" signature="array_intersect_key(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have keys which are&#10;present in all the other arguments Kind of equivalent&#10;to" ilk="function" src="array.c"/>
      <scope name="array_intersect_ukey" signature="array_intersect_ukey(array arr1, array arr2 [, array ...], callback key_compare_func)" returns="array" doc="Returns the entries of arr that have keys which are&#10;present in all the other arguments Kind of equivalent&#10;to" ilk="function" src="array.c"/>
      <scope name="array_intersect" signature="array_intersect(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;present in all the other arguments" ilk="function" src="array.c"/>
      <scope name="array_uintersect" signature="array_uintersect(array arr1, array arr2 [, array ...], callback data_compare_func)" returns="array" doc="Returns the entries of arr that have values which are&#10;present in all the other arguments Data is compared by" ilk="function" src="array.c"/>
      <scope name="array_intersect_assoc" signature="array_intersect_assoc(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;present in all the other arguments Keys are used to" ilk="function" src="array.c"/>
      <scope name="array_intersect_uassoc" signature="array_intersect_uassoc(array arr1, array arr2 [, array ...], callback key_compare_func)" returns="array" doc="U Returns the entries of arr that have values which are&#10;present in all the other arguments Keys are used" ilk="function" src="array.c"/>
      <scope name="array_uintersect_assoc" signature="array_uintersect_assoc(array arr1, array arr2 [, array ...], callback data_compare_func)" returns="array" doc="U Returns the entries of arr that have values which are&#10;present in all the other arguments Keys are used" ilk="function" src="array.c"/>
      <scope name="array_uintersect_uassoc" signature="array_uintersect_uassoc(array arr1, array arr2 [, array ...], callback data_compare_func, callback key_compare_func)" returns="array" doc="Returns the entries of arr that have values which are&#10;present in all the other arguments Keys are used to" ilk="function" src="array.c"/>
      <scope name="array_diff_key" signature="array_diff_key(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have keys which are not&#10;present in any of the others arguments This function" ilk="function" src="array.c"/>
      <scope name="array_diff_ukey" signature="array_diff_ukey(array arr1, array arr2 [, array ...], callback key_comp_func)" returns="array" doc="Returns the entries of arr that have keys which are not&#10;present in any of the others arguments User supplied" ilk="function" src="array.c"/>
      <scope name="array_diff" signature="array_diff(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments" ilk="function" src="array.c"/>
      <scope name="array_udiff" signature="array_udiff(array arr1, array arr2 [, array ...], callback data_comp_func)" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments Elements are" ilk="function" src="array.c"/>
      <scope name="array_diff_assoc" signature="array_diff_assoc(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments but do" ilk="function" src="array.c"/>
      <scope name="array_diff_uassoc" signature="array_diff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func)" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments but do" ilk="function" src="array.c"/>
      <scope name="array_udiff_assoc" signature="array_udiff_assoc(array arr1, array arr2 [, array ...], callback key_comp_func)" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments but do" ilk="function" src="array.c"/>
      <scope name="array_udiff_uassoc" signature="array_udiff_uassoc(array arr1, array arr2 [, array ...], callback data_comp_func, callback key_comp_func)" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments but do" ilk="function" src="array.c"/>
      <scope name="array_multisort" signature="array_multisort(array ar1 [, SORT_ASC" returns="bool" doc="Sort multiple arrays at once similar to how ORDER BY&#10;clause works in SQL" ilk="function" src="array.c"/>
      <scope name="array_rand" signature="array_rand(array input [, int num_req])" returns="mixed" doc="Return key keys for random entry entries in the array" ilk="function" src="array.c"/>
      <scope name="array_sum" signature="array_sum(array input)" returns="mixed" doc="Returns the sum of the array entries" ilk="function" src="array.c"/>
      <scope name="array_product" signature="array_product(array input)" returns="mixed" doc="Returns the product of the array entries" ilk="function" src="array.c"/>
      <scope name="array_reduce" signature="array_reduce(array input, mixed callback [, mixed initial])" returns="mixed" doc="Iteratively reduce the array to a single value via the&#10;callback" ilk="function" src="array.c"/>
      <scope name="array_filter" signature="array_filter(array input [, mixed callback])" returns="array" doc="Filters elements from the array via the callback" ilk="function" src="array.c"/>
      <scope name="array_map" signature="array_map(mixed callback, array input1 [, array input2 ,...])" returns="array" doc="Applies the callback to the elements in given arrays" ilk="function" src="array.c"/>
      <scope name="array_key_exists" signature="array_key_exists(mixed key, array search)" returns="bool" doc="Checks if the given key or index exists in the array" ilk="function" src="array.c"/>
      <scope name="array_chunk" signature="array_chunk(array input, int size [, bool preserve_keys])" returns="array" doc="Split array into chunks" ilk="function" src="array.c"/>
      <scope name="array_combine" signature="array_combine(array keys, array values)" returns="array" doc="Creates an array by using the elements of the first&#10;parameter as keys and the elements of the second as" ilk="function" src="array.c"/>
      <scope name="soundex" signature="soundex(string str)" returns="string" doc="Calculate the soundex key of a string" ilk="function" src="soundex.c"/>
      <scope name="assert" signature="assert(string" returns="int" doc="Checks if assertion is false" ilk="function" src="assert.c"/>
      <scope name="assert_options" signature="assert_options(int what [, mixed value])" returns="mixed" doc="Set get the various assert flags" ilk="function" src="assert.c"/>
      <scope name="dl" signature="dl(string extension_filename)" returns="int" doc="Load a PHP extension at runtime" ilk="function" src="dl.c"/>
      <scope name="iptcembed" signature="iptcembed(string iptcdata, string jpeg_file_name [, int spool])" returns="array" doc="Embed binary IPTC data into a JPEG image" ilk="function" src="iptc.c"/>
      <scope name="iptcparse" signature="iptcparse(string iptcdata)" returns="array" doc="Parse binary IPTC-data into associative array" ilk="function" src="iptc.c"/>
      <scope name="http_build_query" signature="http_build_query(mixed formdata [, string prefix [, string arg_separator]])" returns="string" doc="Generates a form-encoded query string from an&#10;associative array or object" ilk="function" src="http.c"/>
      <scope name="constant" signature="constant(string const_name)" returns="mixed" doc="Given the name of a constant this function will return&#10;the constant's associated value" ilk="function" src="basic_functions.c"/>
      <scope name="inet_ntop" signature="inet_ntop(string in_addr)" returns="string" doc="Converts a packed inet address to a human readable IP&#10;address string" ilk="function" src="basic_functions.c"/>
      <scope name="inet_pton" signature="inet_pton(string ip_address)" returns="string" doc="Converts a human readable IP address to a packed binary&#10;string" ilk="function" src="basic_functions.c"/>
      <scope name="ip2long" signature="ip2long(string ip_address)" returns="int" doc="Converts a string containing an IPv Internet Protocol&#10;dotted address into a proper address" ilk="function" src="basic_functions.c"/>
      <scope name="long2ip" signature="long2ip(int proper_address)" returns="string" doc="Converts an IPv Internet network address into a string&#10;in Internet standard dotted format" ilk="function" src="basic_functions.c"/>
      <scope name="getenv" signature="getenv(string varname)" returns="string" doc="Get the value of an environment variable" ilk="function" src="basic_functions.c"/>
      <scope name="putenv" signature="putenv(string setting)" returns="bool" doc="Set the value of an environment variable" ilk="function" src="basic_functions.c"/>
      <scope name="getopt" signature="getopt(string options [, array longopts])" returns="array" doc="Get options from the command line argument list" ilk="function" src="basic_functions.c"/>
      <scope name="flush" signature="flush(void)" returns="void" doc="Flush the output buffer" ilk="function" src="basic_functions.c"/>
      <scope name="sleep" signature="sleep(int seconds)" returns="void" doc="Delay for a given number of seconds" ilk="function" src="basic_functions.c"/>
      <scope name="usleep" signature="usleep(int micro_seconds)" returns="void" doc="Delay for a given number of micro seconds" ilk="function" src="basic_functions.c"/>
      <scope name="time_nanosleep" signature="time_nanosleep(long seconds, long nanoseconds)" returns="mixed" doc="Delay for a number of seconds and nano seconds" ilk="function" src="basic_functions.c"/>
      <scope name="time_sleep_until" signature="time_sleep_until(float timestamp)" returns="mixed" doc="Make the script sleep until the specified time" ilk="function" src="basic_functions.c"/>
      <scope name="get_current_user" signature="get_current_user(void)" returns="string" doc="Get the name of the owner of the current PHP script" ilk="function" src="basic_functions.c"/>
      <scope name="get_cfg_var" signature="get_cfg_var(string option_name)" returns="mixed" doc="Get the value of a PHP configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="set_magic_quotes_runtime" signature="set_magic_quotes_runtime(int new_setting)" returns="bool" doc="Set the current active configuration setting of magic&#10;quotes runtime and return previous" ilk="function" src="basic_functions.c"/>
      <scope name="get_magic_quotes_runtime" signature="get_magic_quotes_runtime(void)" returns="int" doc="Get the current active configuration setting of magic&#10;quotes runtime" ilk="function" src="basic_functions.c"/>
      <scope name="get_magic_quotes_gpc" signature="get_magic_quotes_gpc(void)" returns="int" doc="Get the current active configuration setting of magic&#10;quotes gpc" ilk="function" src="basic_functions.c"/>
      <scope name="error_log" signature="error_log(string message [, int message_type [, string destination [, string extra_headers]]])" returns="bool" doc="Send an error message somewhere" ilk="function" src="basic_functions.c"/>
      <scope name="error_get_last" signature="error_get_last()" returns="array" doc="Get the last occurred error as associative array&#10;Returns NULL if there hasn't been an error yet" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_func" signature="call_user_func(mixed function_name [, mixed parmeter] [, mixed ...])" returns="mixed" doc="Call a user function which is the first parameter" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_func_array" signature="call_user_func_array(string function_name, array parameters)" returns="mixed" doc="U Call a user function which is the first parameter&#10;with the arguments contained in array" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_method" signature="call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])" returns="mixed" doc="Call a user method on a specific object or class" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_method_array" signature="call_user_method_array(string method_name, mixed object, array params)" returns="mixed" doc="Call a user method on a specific object or class using&#10;a parameter array" ilk="function" src="basic_functions.c"/>
      <scope name="forward_static_call" signature="forward_static_call(mixed function_name [, mixed parmeter] [, mixed ...])" returns="mixed" doc="U Call a user function which is the first parameter" ilk="function" src="basic_functions.c"/>
      <scope name="register_shutdown_function" signature="register_shutdown_function(string function_name)" returns="void" doc="U Register a user-level function to be called on&#10;request termination" ilk="function" src="basic_functions.c"/>
      <scope name="highlight_file" signature="highlight_file(string file_name [, bool return] )" returns="bool" doc="Syntax highlight a source file" ilk="function" src="basic_functions.c"/>
      <scope name="php_strip_whitespace" signature="php_strip_whitespace(string file_name)" returns="string" doc="Return source with stripped comments and whitespace" ilk="function" src="basic_functions.c"/>
      <scope name="highlight_string" signature="highlight_string(string string [, bool return] )" returns="bool" doc="Syntax highlight a string or optionally return it" ilk="function" src="basic_functions.c"/>
      <scope name="ini_get" signature="ini_get(string varname)" returns="string" doc="Get a configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="ini_get_all" signature="ini_get_all([string extension[, bool details = true]])" returns="array" doc="Get all configuration options" ilk="function" src="basic_functions.c"/>
      <scope name="ini_set" signature="ini_set(string varname, string newvalue)" returns="string" doc="Set a configuration option returns false on error and&#10;the old value of the configuration option on success" ilk="function" src="basic_functions.c"/>
      <scope name="ini_restore" signature="ini_restore(string varname)" returns="void" doc="Restore the value of a configuration option specified&#10;by varname" ilk="function" src="basic_functions.c"/>
      <scope name="set_include_path" signature="set_include_path(string new_include_path)" returns="string" doc="Sets the include path configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="get_include_path" signature="get_include_path()" returns="string" doc="Get the current include path configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="restore_include_path" signature="restore_include_path()" returns="void" doc="Restore the value of the include path configuration&#10;option" ilk="function" src="basic_functions.c"/>
      <scope name="print_r" signature="print_r(mixed var [, bool return])" returns="mixed" doc="Prints out or returns information about the specified&#10;variable" ilk="function" src="basic_functions.c"/>
      <scope name="connection_aborted" signature="connection_aborted(void)" returns="int" doc="Returns true if client disconnected" ilk="function" src="basic_functions.c"/>
      <scope name="connection_status" signature="connection_status(void)" returns="int" doc="Returns the connection status bitfield" ilk="function" src="basic_functions.c"/>
      <scope name="ignore_user_abort" signature="ignore_user_abort([string value])" returns="int" doc="Set whether we want to ignore a user abort event or not" ilk="function" src="basic_functions.c"/>
      <scope name="getservbyname" signature="getservbyname(string service, string protocol)" returns="int" doc="Returns port associated with service Protocol must be&#10;tcp or udp" ilk="function" src="basic_functions.c"/>
      <scope name="getservbyport" signature="getservbyport(int port, string protocol)" returns="string" doc="Returns service name associated with port Protocol must&#10;be tcp or udp" ilk="function" src="basic_functions.c"/>
      <scope name="getprotobyname" signature="getprotobyname(string name)" returns="int" doc="Returns protocol number associated with name as per etc&#10;protocols" ilk="function" src="basic_functions.c"/>
      <scope name="getprotobynumber" signature="getprotobynumber(int proto)" returns="string" doc="Returns protocol name associated with protocol number&#10;proto" ilk="function" src="basic_functions.c"/>
      <scope name="register_tick_function" signature="register_tick_function(string function_name [, mixed arg [, mixed ... ]])" returns="bool" doc="Registers a tick callback function" ilk="function" src="basic_functions.c"/>
      <scope name="unregister_tick_function" signature="unregister_tick_function(string function_name)" returns="void" doc="Unregisters a tick callback function" ilk="function" src="basic_functions.c"/>
      <scope name="is_uploaded_file" signature="is_uploaded_file(string path)" returns="bool" doc="Check if file was created by rfc upload" ilk="function" src="basic_functions.c"/>
      <scope name="move_uploaded_file" signature="move_uploaded_file(string path, string new_path)" returns="bool" doc="Move a file if and only if it was created by an upload" ilk="function" src="basic_functions.c"/>
      <scope name="parse_ini_file" signature="parse_ini_file(string filename [, bool process_sections [, int scanner_mode]])" returns="array" doc="Parse configuration file" ilk="function" src="basic_functions.c"/>
      <scope name="parse_ini_string" signature="parse_ini_string(string ini_string [, bool process_sections [, int scanner_mode]])" returns="array" doc="Parse configuration string" ilk="function" src="basic_functions.c"/>
      <scope name="import_request_variables" signature="import_request_variables(string types [, string prefix])" returns="bool" doc="Import GET POST Cookie variables into the global scope" ilk="function" src="basic_functions.c"/>
      <scope name="sys_getloadavg" signature="sys_getloadavg()" returns="array" doc="" ilk="function" src="basic_functions.c"/>
      <scope name="opendir" signature="opendir(string path[, resource context])" returns="mixed" doc="Open a directory and return a dir handle" ilk="function" src="dir.c"/>
      <scope name="closedir" signature="closedir([resource dir_handle])" returns="void" doc="Close directory connection identified by the dir handle" ilk="function" src="dir.c"/>
      <scope name="chroot" signature="chroot(string directory)" returns="bool" doc="Change root directory" ilk="function" src="dir.c"/>
      <scope name="chdir" signature="chdir(string directory)" returns="bool" doc="Change the current directory" ilk="function" src="dir.c"/>
      <scope name="getcwd" signature="getcwd(void)" returns="mixed" doc="Gets the current directory" ilk="function" src="dir.c"/>
      <scope name="rewinddir" signature="rewinddir([resource dir_handle])" returns="void" doc="Rewind dir handle back to the start" ilk="function" src="dir.c"/>
      <scope name="readdir" signature="readdir([resource dir_handle])" returns="string" doc="Read directory entry from dir handle" ilk="function" src="dir.c"/>
      <scope name="glob" signature="glob(string pattern [, int flags])" returns="array" doc="Find pathnames matching a pattern" ilk="function" src="dir.c"/>
      <scope name="scandir" signature="scandir(string dir [, int sorting_order [, resource context]])" returns="array" doc="List files directories inside the specified path" ilk="function" src="dir.c"/>
      <scope name="uniqid" signature="uniqid([string prefix [, bool more_entropy]])" returns="string" doc="Generates a unique ID" ilk="function" src="uniqid.c"/>
      <scope name="strptime" signature="strptime(string timestamp, string format)" returns="string" doc="Parse a time date generated with strftime" ilk="function" src="datetime.c"/>
      <scope name="fsockopen" signature="fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])" returns="resource" doc="Open Internet or Unix domain socket connection" ilk="function" src="fsock.c"/>
      <scope name="pfsockopen" signature="pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]])" returns="resource" doc="Open persistent Internet or Unix domain socket&#10;connection" ilk="function" src="fsock.c"/>
      <scope name="quoted_printable_decode" signature="quoted_printable_decode(string str)" returns="string" doc="Convert a quoted-printable string to an bit string" ilk="function" src="quot_print.c"/>
      <scope name="quoted_printable_encode" signature="quoted_printable_encode(string str)" returns="string" doc="" ilk="function" src="quot_print.c"/>
      <scope name="crc32" signature="crc32(string str)" returns="string" doc="Calculate the crc polynomial of a string" ilk="function" src="crc32.c"/>
      <scope name="image_type_to_mime_type" signature="image_type_to_mime_type(int imagetype)" returns="string" doc="Get Mime-Type for image-type returned by getimagesize&#10;exif read data exif thumbnail exif imagetype" ilk="function" src="image.c"/>
      <scope name="image_type_to_extension" signature="image_type_to_extension(int imagetype [, bool include_dot])" returns="string" doc="Get file extension for image-type returned by&#10;getimagesize exif read data exif thumbnail exif&#10;imagetype" ilk="function" src="image.c"/>
      <scope name="getimagesize" signature="getimagesize(string imagefile [, array info])" returns="array" doc="Get the size of an image as -element array" ilk="function" src="image.c"/>
      <scope name="header" signature="header(string header [, bool replace, [int http_response_code]])" returns="void" doc="Sends a raw HTTP header" ilk="function" src="head.c"/>
      <scope name="header_remove" signature="header_remove([string name])" returns="void" doc="Removes an HTTP header previously set using header" ilk="function" src="head.c"/>
      <scope name="setcookie" signature="setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])" returns="bool" doc="Send a cookie" ilk="function" src="head.c"/>
      <scope name="setrawcookie" signature="setrawcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure[, bool httponly]]]]]])" returns="bool" doc="Send a cookie with no url encoding of the value" ilk="function" src="head.c"/>
      <scope name="headers_sent" signature="headers_sent([string &amp;$file [, int &amp;$line]])" returns="bool" doc="Returns true if headers have already been sent false&#10;otherwise" ilk="function" src="head.c"/>
      <scope name="headers_list" signature="headers_list(void)" returns="array" doc="Return list of headers to be sent already sent" ilk="function" src="head.c"/>
      <scope name="htmlspecialchars" signature="htmlspecialchars(string string [, int quote_style[, string charset[, bool double_encode]]])" returns="string" doc="Convert special characters to HTML entities" ilk="function" src="html.c"/>
      <scope name="htmlspecialchars_decode" signature="htmlspecialchars_decode(string string [, int quote_style])" returns="string" doc="Convert special HTML entities back to characters" ilk="function" src="html.c"/>
      <scope name="html_entity_decode" signature="html_entity_decode(string string [, int quote_style][, string charset])" returns="string" doc="Convert all HTML entities to their applicable&#10;characters" ilk="function" src="html.c"/>
      <scope name="htmlentities" signature="htmlentities(string string [, int quote_style[, string charset[, bool double_encode]]])" returns="string" doc="Convert all applicable characters to HTML entities" ilk="function" src="html.c"/>
      <scope name="get_html_translation_table" signature="get_html_translation_table([int table [, int quote_style]])" returns="array" doc="Returns the internal translation table used by&#10;htmlspecialchars and htmlentities" ilk="function" src="html.c"/>
      <scope name="convert_cyr_string" signature="convert_cyr_string(string str, string from, string to)" returns="string" doc="Convert from one Cyrillic character set to another" ilk="function" src="cyr_convert.c"/>
      <scope name="ftok" signature="ftok(string pathname, string proj)" returns="int" doc="Convert a pathname and a project identifier to a System&#10;V IPC key" ilk="function" src="ftok.c"/>
      <scope name="phpinfo" signature="phpinfo([int what])" returns="void" doc="Output a page of useful information about PHP and the&#10;current request" ilk="function" src="info.c"/>
      <scope name="phpversion" signature="phpversion([string extension])" returns="string" doc="Return the current PHP version" ilk="function" src="info.c"/>
      <scope name="phpcredits" signature="phpcredits([int flag])" returns="void" doc="Prints the list of people who've contributed to the PHP&#10;project" ilk="function" src="info.c"/>
      <scope name="php_logo_guid" signature="php_logo_guid(void)" returns="string" doc="Return the special ID used to request the PHP logo in&#10;phpinfo screens" ilk="function" src="info.c"/>
      <scope name="php_real_logo_guid" signature="php_real_logo_guid(void)" returns="string" doc="Return the special ID used to request the PHP logo in&#10;phpinfo screens" ilk="function" src="info.c"/>
      <scope name="php_egg_logo_guid" signature="php_egg_logo_guid(void)" returns="string" doc="Return the special ID used to request the PHP logo in&#10;phpinfo screens" ilk="function" src="info.c"/>
      <scope name="zend_logo_guid" signature="zend_logo_guid(void)" returns="string" doc="Return the special ID used to request the Zend logo in&#10;phpinfo screens" ilk="function" src="info.c"/>
      <scope name="php_sapi_name" signature="php_sapi_name(void)" returns="string" doc="Return the current SAPI module name" ilk="function" src="info.c"/>
      <scope name="php_uname" signature="php_uname(void)" returns="string" doc="Return information about the system PHP was built on" ilk="function" src="info.c"/>
      <scope name="php_ini_scanned_files" signature="php_ini_scanned_files(void)" returns="string" doc="Return comma-separated string of ini files parsed from&#10;the additional ini dir" ilk="function" src="info.c"/>
      <scope name="php_ini_loaded_file" signature="php_ini_loaded_file(void)" returns="string" doc="Return the actual loaded ini filename" ilk="function" src="info.c"/>
      <scope name="wddx_serialize_value" signature="wddx_serialize_value(mixed var [, string comment])" returns="string" doc="Creates a new packet and serializes the given value" ilk="function" src="wddx.c"/>
      <scope name="wddx_serialize_vars" signature="wddx_serialize_vars(mixed var_name [, mixed ...])" returns="string" doc="Creates a new packet and serializes given variables&#10;into a struct" ilk="function" src="wddx.c"/>
      <scope name="wddx_packet_start" signature="wddx_packet_start([string comment])" returns="resource" doc="Starts a WDDX packet with optional comment and returns&#10;the packet id" ilk="function" src="wddx.c"/>
      <scope name="wddx_packet_end" signature="wddx_packet_end(resource packet_id)" returns="string" doc="Ends specified WDDX packet and returns the string&#10;containing the packet" ilk="function" src="wddx.c"/>
      <scope name="wddx_add_vars" signature="wddx_add_vars(resource packet_id,  mixed var_names [, mixed ...])" returns="int" doc="Serializes given variables and adds them to packet&#10;given by packet id" ilk="function" src="wddx.c"/>
      <scope name="wddx_deserialize" signature="wddx_deserialize(mixed packet)" returns="mixed" doc="Deserializes given packet and returns a PHP value" ilk="function" src="wddx.c"/>
      <scope name="ibase_add_user" signature="ibase_add_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" returns="bool" doc="Add a user to security database" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_modify_user" signature="ibase_modify_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" returns="bool" doc="Modify a user in security database" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_delete_user" signature="ibase_delete_user(resource service_handle, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" returns="bool" doc="Delete a user from security database" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_service_attach" signature="ibase_service_attach(string host, string dba_username, string dba_password)" returns="resource" doc="Connect to the service manager" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_service_detach" signature="ibase_service_detach(resource service_handle)" returns="bool" doc="Disconnect from the service manager" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_backup" signature="ibase_backup(resource service_handle, string source_db, string dest_file [, int options [, bool verbose]])" returns="mixed" doc="Initiates a backup task in the service manager and&#10;returns immediately" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_restore" signature="ibase_restore(resource service_handle, string source_file, string dest_db [, int options [, bool verbose]])" returns="mixed" doc="Initiates a restore task in the service manager and&#10;returns immediately" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_maintain_db" signature="ibase_maintain_db(resource service_handle, string db, int action [, int argument])" returns="bool" doc="Execute a maintenance command on the database server" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_db_info" signature="ibase_db_info(resource service_handle, string db, int action [, int argument])" returns="string" doc="Request statistics about a database" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_server_info" signature="ibase_server_info(resource service_handle, int action)" returns="string" doc="Request information about a database server" ilk="function" src="ibase_service.c"/>
      <scope name="ibase_errmsg" signature="ibase_errmsg(void)" returns="string" doc="Return error message" ilk="function" src="interbase.c"/>
      <scope name="ibase_errcode" signature="ibase_errcode(void)" returns="int" doc="Return error code" ilk="function" src="interbase.c"/>
      <scope name="ibase_connect" signature="ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" returns="resource" doc="Open a connection to an InterBase database" ilk="function" src="interbase.c"/>
      <scope name="ibase_pconnect" signature="ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" returns="resource" doc="Open a persistent connection to an InterBase database" ilk="function" src="interbase.c"/>
      <scope name="ibase_close" signature="ibase_close([resource link_identifier])" returns="bool" doc="Close an InterBase connection" ilk="function" src="interbase.c"/>
      <scope name="ibase_drop_db" signature="ibase_drop_db([resource link_identifier])" returns="bool" doc="Drop an InterBase database" ilk="function" src="interbase.c"/>
      <scope name="ibase_trans" signature="ibase_trans([int trans_args [, resource link_identifier [, ... ], int trans_args [, resource link_identifier [, ... ]] [, ...]]])" returns="resource" doc="Start a transaction over one or several databases" ilk="function" src="interbase.c"/>
      <scope name="ibase_commit" signature="ibase_commit( resource link_identifier )" returns="bool" doc="Commit transaction" ilk="function" src="interbase.c"/>
      <scope name="ibase_rollback" signature="ibase_rollback( resource link_identifier )" returns="bool" doc="Rollback transaction" ilk="function" src="interbase.c"/>
      <scope name="ibase_commit_ret" signature="ibase_commit_ret( resource link_identifier )" returns="bool" doc="Commit transaction and retain the transaction context" ilk="function" src="interbase.c"/>
      <scope name="ibase_rollback_ret" signature="ibase_rollback_ret( resource link_identifier )" returns="bool" doc="Rollback transaction and retain the transaction context" ilk="function" src="interbase.c"/>
      <scope name="ibase_gen_id" signature="ibase_gen_id(string generator [, int increment [, resource link_identifier ]])" returns="int" doc="Increments the named generator and returns its new&#10;value" ilk="function" src="interbase.c"/>
      <scope name="ibase_wait_event" signature="ibase_wait_event([resource link_identifier,] string event [, string event [, ...]])" returns="string" doc="Waits for any one of the passed Interbase events to be&#10;posted by the database and returns its name" ilk="function" src="ibase_events.c"/>
      <scope name="ibase_set_event_handler" signature="ibase_set_event_handler([resource link_identifier,] callback handler, string event [, string event [, ...]])" returns="resource" doc="Register the callback for handling each of the named&#10;events" ilk="function" src="ibase_events.c"/>
      <scope name="ibase_free_event_handler" signature="ibase_free_event_handler(resource event)" returns="bool" doc="Frees the event handler set by ibase set event handler" ilk="function" src="ibase_events.c"/>
      <scope name="ibase_blob_create" signature="ibase_blob_create([resource link_identifier])" returns="resource" doc="Create blob for adding data" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_open" signature="ibase_blob_open([ resource link_identifier, ] string blob_id)" returns="resource" doc="Open blob for retrieving data parts" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_add" signature="ibase_blob_add(resource blob_handle, string data)" returns="bool" doc="Add data into created blob" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_get" signature="ibase_blob_get(resource blob_handle, int len)" returns="string" doc="Get len bytes data from open blob" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_close" signature="ibase_blob_close(resource blob_handle)" returns="string" doc="Close blob" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_cancel" signature="ibase_blob_cancel(resource blob_handle)" returns="bool" doc="Cancel creating blob" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_info" signature="ibase_blob_info([ resource link_identifier, ] string blob_id)" returns="array" doc="Return blob length and other useful info" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_echo" signature="ibase_blob_echo([ resource link_identifier, ] string blob_id)" returns="bool" doc="Output blob contents to browser" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_blob_import" signature="ibase_blob_import([ resource link_identifier, ] resource file)" returns="string" doc="Create blob copy file in it and close it" ilk="function" src="ibase_blobs.c"/>
      <scope name="ibase_query" signature="ibase_query([resource link_identifier, [ resource link_identifier, ]] string query [, mixed bind_arg [, mixed bind_arg [, ...]]])" returns="mixed" doc="Execute a query" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_affected_rows" signature="ibase_affected_rows( [ resource link_identifier ] )" returns="int" doc="Returns the number of rows affected by the previous&#10;INSERT UPDATE or DELETE statement" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_num_rows" signature="ibase_num_rows( resource result_identifier )" returns="int" doc="Return the number of rows that are available in a&#10;result" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_fetch_row" signature="ibase_fetch_row(resource result [, int fetch_flags])" returns="array" doc="Fetch a row from the results of a query" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_fetch_assoc" signature="ibase_fetch_assoc(resource result [, int fetch_flags])" returns="array" doc="Fetch a row from the results of a query" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_fetch_object" signature="ibase_fetch_object(resource result [, int fetch_flags])" returns="object" doc="Fetch a object from the results of a query" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_name_result" signature="ibase_name_result(resource result, string name)" returns="bool" doc="Assign a name to a result for use with WHERE CURRENT OF&#10;name statements" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_free_result" signature="ibase_free_result(resource result)" returns="bool" doc="Free the memory used by a result" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_prepare" signature="ibase_prepare(resource link_identifier[, string query [, resource trans_identifier ]])" returns="resource" doc="Prepare a query for later execution" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_execute" signature="ibase_execute(resource query [, mixed bind_arg [, mixed bind_arg [, ...]]])" returns="mixed" doc="Execute a previously prepared query" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_free_query" signature="ibase_free_query(resource query)" returns="bool" doc="Free memory used by a query" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_num_fields" signature="ibase_num_fields(resource query_result)" returns="int" doc="Get the number of fields in result" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_field_info" signature="ibase_field_info(resource query_result, int field_number)" returns="array" doc="Get information about a field" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_num_params" signature="ibase_num_params(resource query)" returns="int" doc="Get the number of params in a prepared query" ilk="function" src="ibase_query.c"/>
      <scope name="ibase_param_info" signature="ibase_param_info(resource query, int field_number)" returns="array" doc="Get information about a parameter" ilk="function" src="ibase_query.c"/>
      <scope name="iconv_strlen" signature="iconv_strlen(string str [, string charset])" returns="int" doc="Returns the character count of str" ilk="function" src="iconv.c"/>
      <scope name="iconv_substr" signature="iconv_substr(string str, int offset, [int length, string charset])" returns="string" doc="Returns specified part of a string" ilk="function" src="iconv.c"/>
      <scope name="iconv_strpos" signature="iconv_strpos(string haystack, string needle [, int offset [, string charset]])" returns="int" doc="Finds position of first occurrence of needle within&#10;part of haystack beginning with offset" ilk="function" src="iconv.c"/>
      <scope name="iconv_strrpos" signature="iconv_strrpos(string haystack, string needle [, string charset])" returns="int" doc="Finds position of last occurrence of needle within part&#10;of haystack beginning with offset" ilk="function" src="iconv.c"/>
      <scope name="iconv_mime_encode" signature="iconv_mime_encode(string field_name, string field_value [, array preference])" returns="string" doc="Composes a mime header field with field name and field&#10;value in a specified scheme" ilk="function" src="iconv.c"/>
      <scope name="iconv_mime_decode" signature="iconv_mime_decode(string encoded_string [, int mode, string charset])" returns="string" doc="Decodes a mime header field" ilk="function" src="iconv.c"/>
      <scope name="iconv_mime_decode_headers" signature="iconv_mime_decode_headers(string headers [, int mode, string charset])" returns="array" doc="Decodes multiple mime header fields" ilk="function" src="iconv.c"/>
      <scope name="iconv" signature="iconv(string in_charset, string out_charset, string str)" returns="string" doc="Returns str converted to the out charset character set" ilk="function" src="iconv.c"/>
      <scope name="ob_iconv_handler" signature="ob_iconv_handler(string contents, int status)" returns="string" doc="Returns str in output buffer converted to the iconv&#10;output encoding character set" ilk="function" src="iconv.c"/>
      <scope name="iconv_set_encoding" signature="iconv_set_encoding(string type, string charset)" returns="bool" doc="Sets internal encoding and output encoding for ob iconv&#10;handler" ilk="function" src="iconv.c"/>
      <scope name="iconv_get_encoding" signature="iconv_get_encoding([string type])" returns="mixed" doc="Get internal encoding and output encoding for ob iconv&#10;handler" ilk="function" src="iconv.c"/>
      <scope name="bzread" signature="bzread(resource bz[, int length])" returns="string" doc="Reads up to length bytes from a BZip stream or bytes if&#10;length is not specified" ilk="function" src="bz2.c"/>
      <scope name="bzopen" signature="bzopen(string" returns="resource" doc="Opens a new BZip stream" ilk="function" src="bz2.c"/>
      <scope name="bzerrno" signature="bzerrno(resource bz)" returns="int" doc="Returns the error number" ilk="function" src="bz2.c"/>
      <scope name="bzerrstr" signature="bzerrstr(resource bz)" returns="string" doc="Returns the error string" ilk="function" src="bz2.c"/>
      <scope name="bzerror" signature="bzerror(resource bz)" returns="array" doc="Returns the error number and error string in an&#10;associative array" ilk="function" src="bz2.c"/>
      <scope name="bzcompress" signature="bzcompress(string source [, int blocksize100k [, int workfactor]])" returns="string" doc="Compresses a string into BZip encoded data" ilk="function" src="bz2.c"/>
      <scope name="bzdecompress" signature="bzdecompress(string source [, int small])" returns="string" doc="Decompresses BZip compressed data" ilk="function" src="bz2.c"/>
      <scope name="dom_domimplementationlist_item" signature="dom_domimplementationlist_item(int index)" returns="domdomimplementation" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html DOMImplementationList-item Since" ilk="function" src="domimplementationlist.c"/>
      <scope name="dom_domstringlist_item" signature="dom_domstringlist_item(int index)" returns="domstring" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html DOMStringList-item Since" ilk="function" src="domstringlist.c"/>
      <scope name="dom_characterdata_substring_data" signature="dom_characterdata_substring_data(int offset, int count)" returns="string" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- BCCF Since" ilk="function" src="characterdata.c"/>
      <scope name="dom_characterdata_append_data" signature="dom_characterdata_append_data(string arg)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- A F Since" ilk="function" src="characterdata.c"/>
      <scope name="dom_characterdata_insert_data" signature="dom_characterdata_insert_data(int offset, string arg)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- EDB F Since" ilk="function" src="characterdata.c"/>
      <scope name="dom_characterdata_delete_data" signature="dom_characterdata_delete_data(int offset, int count)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- C Since" ilk="function" src="characterdata.c"/>
      <scope name="dom_characterdata_replace_data" signature="dom_characterdata_replace_data(int offset, int count, string arg)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-E CBA FB Since" ilk="function" src="characterdata.c"/>
      <scope name="dom_document_create_element" signature="dom_document_create_element(string tagName [, string value])" returns="DOMElement" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="document.c"/>
      <scope name="dom_document_create_document_fragment" signature="dom_document_create_document_fragment()" returns="DOMDocumentFragment" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- CB B Since" ilk="function" src="document.c"/>
      <scope name="dom_document_create_text_node" signature="dom_document_create_text_node(string data)" returns="DOMText" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="document.c"/>
      <scope name="dom_document_create_comment" signature="dom_document_create_comment(string data)" returns="DOMComment" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="document.c"/>
      <scope name="dom_document_create_cdatasection" signature="dom_document_create_cdatasection(string data)" returns="DOMCdataSection" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-D C AF Since" ilk="function" src="document.c"/>
      <scope name="dom_document_create_processing_instruction" signature="dom_document_create_processing_instruction(string target, string data)" returns="DOMProcessingInstruction" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="document.c"/>
      <scope name="dom_document_create_attribute" signature="dom_document_create_attribute(string name)" returns="DOMAttr" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="document.c"/>
      <scope name="dom_document_create_entity_reference" signature="dom_document_create_entity_reference(string name)" returns="DOMEntityReference" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- B AE Since" ilk="function" src="document.c"/>
      <scope name="dom_document_get_elements_by_tag_name" signature="dom_document_get_elements_by_tag_name(string tagname)" returns="DOMNodeList" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-A C Since" ilk="function" src="document.c"/>
      <scope name="dom_document_import_node" signature="dom_document_import_node(DOMNode importedNode, boolean deep)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Core-Document-importNode Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_create_element_ns" signature="dom_document_create_element_ns(string namespaceURI, string qualifiedName [,string value])" returns="DOMElement" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-DocCrElNS Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_create_attribute_ns" signature="dom_document_create_attribute_ns(string namespaceURI, string qualifiedName)" returns="DOMAttr" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-DocCrAttrNS Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_get_elements_by_tag_name_ns" signature="dom_document_get_elements_by_tag_name_ns(string namespaceURI, string localName)" returns="DOMNodeList" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-getElBTNNS Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_get_element_by_id" signature="dom_document_get_element_by_id(string elementId)" returns="DOMElement" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-getElBId Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_adopt_node" signature="dom_document_adopt_node(DOMNode source)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-Document -adoptNode Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_normalize_document" signature="dom_document_normalize_document()" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-Document -normalizeDocument Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_rename_node" signature="dom_document_rename_node(node n, string namespaceURI, string qualifiedName)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-Document -renameNode Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_load" signature="dom_document_load(string source [, int options])" returns="DOMNode" doc="URL http www w org TR DOM-Level- -LS load-save html&#10;LS-DocumentLS-load Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_loadxml" signature="dom_document_loadxml(string source [, int options])" returns="DOMNode" doc="URL http www w org TR DOM-Level- -LS load-save html&#10;LS-DocumentLS-loadXML Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_save" signature="dom_document_save(string file)" returns="int" doc="Convenience method to save to file" ilk="function" src="document.c"/>
      <scope name="dom_document_savexml" signature="dom_document_savexml([node n])" returns="string" doc="URL http www w org TR DOM-Level- -LS load-save html&#10;LS-DocumentLS-saveXML Since DOM Level" ilk="function" src="document.c"/>
      <scope name="dom_document_xinclude" signature="dom_document_xinclude([int options])" returns="int" doc="Substitutues xincludes in a DomDocument" ilk="function" src="document.c"/>
      <scope name="dom_document_validate" signature="dom_document_validate()" returns="boolean" doc="Since DOM extended" ilk="function" src="document.c"/>
      <scope name="dom_document_schema_validate_file" signature="dom_document_schema_validate_file(string filename)" returns="boolean" doc="" ilk="function" src="document.c"/>
      <scope name="dom_document_schema_validate" signature="dom_document_schema_validate(string source)" returns="boolean" doc="" ilk="function" src="document.c"/>
      <scope name="dom_document_relaxNG_validate_file" signature="dom_document_relaxNG_validate_file(string filename)" returns="boolean" doc="" ilk="function" src="document.c"/>
      <scope name="dom_document_relaxNG_validate_xml" signature="dom_document_relaxNG_validate_xml(string source)" returns="boolean" doc="" ilk="function" src="document.c"/>
      <scope name="dom_document_load_html_file" signature="dom_document_load_html_file(string source)" returns="DOMNode" doc="Since DOM extended" ilk="function" src="document.c"/>
      <scope name="dom_document_load_html" signature="dom_document_load_html(string source)" returns="DOMNode" doc="Since DOM extended" ilk="function" src="document.c"/>
      <scope name="dom_document_save_html_file" signature="dom_document_save_html_file(string file)" returns="int" doc="Convenience method to save to file as html" ilk="function" src="document.c"/>
      <scope name="dom_document_save_html" signature="dom_document_save_html()" returns="string" doc="Convenience method to output as html" ilk="function" src="document.c"/>
      <scope name="dom_nodelist_item" signature="dom_nodelist_item(int index)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html ID- Since" ilk="function" src="nodelist.c"/>
      <scope name="dom_xpath_register_ns" signature="dom_xpath_register_ns(string prefix, string uri)" returns="boolean" doc="" ilk="function" src="xpath.c"/>
      <scope name="dom_xpath_query" signature="dom_xpath_query(string expr [,DOMNode context])" returns="DOMNodeList" doc="" ilk="function" src="xpath.c"/>
      <scope name="dom_xpath_evaluate" signature="dom_xpath_evaluate(string expr [,DOMNode context])" returns="mixed" doc="" ilk="function" src="xpath.c"/>
      <scope name="dom_xpath_register_php_functions" signature="dom_xpath_register_php_functions()" returns="void" doc="" ilk="function" src="xpath.c"/>
      <scope name="dom_domconfiguration_set_parameter" signature="dom_domconfiguration_set_parameter(string name, domuserdata value)" returns="dom_void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html DOMConfiguration-property Since" ilk="function" src="domconfiguration.c"/>
      <scope name="dom_domconfiguration_get_parameter" signature="dom_domconfiguration_get_parameter(string name)" returns="domdomuserdata" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html DOMConfiguration-getParameter Since" ilk="function" src="domconfiguration.c"/>
      <scope name="dom_domconfiguration_can_set_parameter" signature="dom_domconfiguration_can_set_parameter(string name, domuserdata value)" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html DOMConfiguration-canSetParameter Since" ilk="function" src="domconfiguration.c"/>
      <scope name="dom_import_simplexml" signature="dom_import_simplexml(sxeobject node)" returns="somNode" doc="Get a simplexml element object from dom to allow for&#10;processing" ilk="function" src="php_dom.c"/>
      <scope name="dom_namednodemap_get_named_item" signature="dom_namednodemap_get_named_item(string name)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="namednodemap.c"/>
      <scope name="dom_namednodemap_set_named_item" signature="dom_namednodemap_set_named_item(DOMNode arg)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="namednodemap.c"/>
      <scope name="dom_namednodemap_remove_named_item" signature="dom_namednodemap_remove_named_item(string name)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-D B Since" ilk="function" src="namednodemap.c"/>
      <scope name="dom_namednodemap_item" signature="dom_namednodemap_item(int index)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- F Since" ilk="function" src="namednodemap.c"/>
      <scope name="dom_namednodemap_get_named_item_ns" signature="dom_namednodemap_get_named_item_ns(string namespaceURI, string localName)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-getNamedItemNS Since DOM Level" ilk="function" src="namednodemap.c"/>
      <scope name="dom_namednodemap_set_named_item_ns" signature="dom_namednodemap_set_named_item_ns(DOMNode arg)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-setNamedItemNS Since DOM Level" ilk="function" src="namednodemap.c"/>
      <scope name="dom_namednodemap_remove_named_item_ns" signature="dom_namednodemap_remove_named_item_ns(string namespaceURI, string localName)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-removeNamedItemNS Since DOM Level" ilk="function" src="namednodemap.c"/>
      <scope name="dom_attr_is_id" signature="dom_attr_is_id()" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Attr-isId Since DOM Level" ilk="function" src="attr.c"/>
      <scope name="dom_domimplementationsource_get_domimplementation" signature="dom_domimplementationsource_get_domimplementation(string features)" returns="domdomimplementation" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html ID-getDOMImpl Since" ilk="function" src="domimplementationsource.c"/>
      <scope name="dom_domimplementationsource_get_domimplementations" signature="dom_domimplementationsource_get_domimplementations(string features)" returns="domimplementationlist" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html ID-getDOMImpls Since" ilk="function" src="domimplementationsource.c"/>
      <scope name="dom_node_insert_before" signature="dom_node_insert_before(DomNode newChild, DomNode refChild)" returns="domnode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="node.c"/>
      <scope name="dom_node_replace_child" signature="dom_node_replace_child(DomNode newChild, DomNode oldChild)" returns="DomNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="node.c"/>
      <scope name="dom_node_remove_child" signature="dom_node_remove_child(DomNode oldChild)" returns="DomNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="node.c"/>
      <scope name="dom_node_append_child" signature="dom_node_append_child(DomNode newChild)" returns="DomNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- E Since" ilk="function" src="node.c"/>
      <scope name="dom_node_has_child_nodes" signature="dom_node_has_child_nodes()" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="node.c"/>
      <scope name="dom_node_clone_node" signature="dom_node_clone_node(boolean deep)" returns="DomNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- A ED A Since" ilk="function" src="node.c"/>
      <scope name="dom_node_normalize" signature="dom_node_normalize()" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-normalize Since" ilk="function" src="node.c"/>
      <scope name="dom_node_is_supported" signature="dom_node_is_supported(string feature, string version)" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-Level- -Core-Node-supports Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_has_attributes" signature="dom_node_has_attributes()" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-NodeHasAttrs Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_compare_document_position" signature="dom_node_compare_document_position(DomNode other)" returns="short" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Node -compareDocumentPosition Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_is_same_node" signature="dom_node_is_same_node(DomNode other)" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Node -isSameNode Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_lookup_prefix" signature="dom_node_lookup_prefix(string namespaceURI)" returns="string" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Node -lookupNamespacePrefix Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_is_default_namespace" signature="dom_node_is_default_namespace(string namespaceURI)" returns="boolean" doc="URL http www w org TR DOM-Level- -Core core html Node&#10;-isDefaultNamespace Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_lookup_namespace_uri" signature="dom_node_lookup_namespace_uri(string prefix)" returns="string" doc="URL http www w org TR DOM-Level- -Core core html Node&#10;-lookupNamespaceURI Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_is_equal_node" signature="dom_node_is_equal_node(DomNode arg)" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Node -isEqualNode Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_get_feature" signature="dom_node_get_feature(string feature, string version)" returns="DomNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Node -getFeature Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_set_user_data" signature="dom_node_set_user_data(string key, DomUserData data, userdatahandler handler)" returns="DomUserData" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Node -setUserData Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_node_get_user_data" signature="dom_node_get_user_data(string key)" returns="DomUserData" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Node -getUserData Since DOM Level" ilk="function" src="node.c"/>
      <scope name="dom_domerrorhandler_handle_error" signature="dom_domerrorhandler_handle_error(domerror error)" returns="dom_boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html ID-ERRORS-DOMErrorHandler-handleError Since" ilk="function" src="domerrorhandler.c"/>
      <scope name="dom_string_extend_find_offset16" signature="dom_string_extend_find_offset16(int offset32)" returns="int" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html i n-methods-StringExtend-findOffset Since" ilk="function" src="string_extend.c"/>
      <scope name="dom_string_extend_find_offset32" signature="dom_string_extend_find_offset32(int offset16)" returns="int" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html i n-methods-StringExtend-findOffset Since" ilk="function" src="string_extend.c"/>
      <scope name="dom_userdatahandler_handle" signature="dom_userdatahandler_handle(short operation, string key, domobject data, node src, node dst)" returns="dom_void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html ID-handleUserDataEvent Since" ilk="function" src="userdatahandler.c"/>
      <scope name="dom_element_get_attribute" signature="dom_element_get_attribute(string name)" returns="string" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- EE F Since" ilk="function" src="element.c"/>
      <scope name="dom_element_set_attribute" signature="dom_element_set_attribute(string name, string value)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-F F Since" ilk="function" src="element.c"/>
      <scope name="dom_element_remove_attribute" signature="dom_element_remove_attribute(string name)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- D AC F Since" ilk="function" src="element.c"/>
      <scope name="dom_element_get_attribute_node" signature="dom_element_get_attribute_node(string name)" returns="DOMAttr" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- A B Since" ilk="function" src="element.c"/>
      <scope name="dom_element_set_attribute_node" signature="dom_element_set_attribute_node(DOMAttr newAttr)" returns="DOMAttr" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- Since" ilk="function" src="element.c"/>
      <scope name="dom_element_remove_attribute_node" signature="dom_element_remove_attribute_node(DOMAttr oldAttr)" returns="DOMAttr" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-D Since" ilk="function" src="element.c"/>
      <scope name="dom_element_get_elements_by_tag_name" signature="dom_element_get_elements_by_tag_name(string name)" returns="DOMNodeList" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- D Since" ilk="function" src="element.c"/>
      <scope name="dom_element_get_attribute_ns" signature="dom_element_get_attribute_ns(string namespaceURI, string localName)" returns="string" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElGetAttrNS Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_set_attribute_ns" signature="dom_element_set_attribute_ns(string namespaceURI, string qualifiedName, string value)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElSetAttrNS Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_remove_attribute_ns" signature="dom_element_remove_attribute_ns(string namespaceURI, string localName)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElRemAtNS Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_get_attribute_node_ns" signature="dom_element_get_attribute_node_ns(string namespaceURI, string localName)" returns="DOMAttr" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElGetAtNodeNS Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_set_attribute_node_ns" signature="dom_element_set_attribute_node_ns(DOMAttr newAttr)" returns="DOMAttr" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElSetAtNodeNS Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_get_elements_by_tag_name_ns" signature="dom_element_get_elements_by_tag_name_ns(string namespaceURI, string localName)" returns="DOMNodeList" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-A C Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_has_attribute" signature="dom_element_has_attribute(string name)" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElHasAttr Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_has_attribute_ns" signature="dom_element_has_attribute_ns(string namespaceURI, string localName)" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElHasAttrNS Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_set_id_attribute" signature="dom_element_set_id_attribute(string name, boolean isId)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElSetIdAttr Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_set_id_attribute_ns" signature="dom_element_set_id_attribute_ns(string namespaceURI, string localName, boolean isId)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElSetIdAttrNS Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_element_set_id_attribute_node" signature="dom_element_set_id_attribute_node(attr idAttr, boolean isId)" returns="void" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID-ElSetIdAttrNode Since DOM Level" ilk="function" src="element.c"/>
      <scope name="dom_domimplementation_has_feature" signature="dom_domimplementation_has_feature(string feature, string version)" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html ID- CED D Since" ilk="function" src="domimplementation.c"/>
      <scope name="dom_domimplementation_create_document_type" signature="dom_domimplementation_create_document_type(string qualifiedName, string publicId, string systemId)" returns="DOMDocumentType" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Level- -Core-DOM-createDocType Since DOM Level" ilk="function" src="domimplementation.c"/>
      <scope name="dom_domimplementation_create_document" signature="dom_domimplementation_create_document(string namespaceURI, string qualifiedName, DOMDocumentType doctype)" returns="DOMDocument" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html Level- -Core-DOM-createDocument Since DOM Level" ilk="function" src="domimplementation.c"/>
      <scope name="dom_domimplementation_get_feature" signature="dom_domimplementation_get_feature(string feature, string version)" returns="DOMNode" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html DOMImplementation -getFeature Since DOM Level" ilk="function" src="domimplementation.c"/>
      <scope name="dom_namelist_get_name" signature="dom_namelist_get_name(int index)" returns="string" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html NameList-getName Since" ilk="function" src="namelist.c"/>
      <scope name="dom_namelist_get_namespace_uri" signature="dom_namelist_get_namespace_uri(int index)" returns="string" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html NameList-getNamespaceURI Since" ilk="function" src="namelist.c"/>
      <scope name="dom_text_split_text" signature="dom_text_split_text(int offset)" returns="DOMText" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-ID- C D Since" ilk="function" src="text.c"/>
      <scope name="dom_text_is_whitespace_in_element_content" signature="dom_text_is_whitespace_in_element_content()" returns="boolean" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-Text -isWhitespaceInElementContent Since DOM&#10;Level" ilk="function" src="text.c"/>
      <scope name="dom_text_replace_whole_text" signature="dom_text_replace_whole_text(string content)" returns="DOMText" doc="URL http www w org TR WD-DOM-Level- -Core- DOM -Core&#10;html core-Text -replaceWholeText Since DOM Level" ilk="function" src="text.c"/>
      <scope name="enchant_broker_init" signature="enchant_broker_init()" returns="resource" doc="create a new broker object capable of requesting" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_free" signature="enchant_broker_free(resource broker)" returns="boolean" doc="Destroys the broker object and its dictionnaries" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_get_error" signature="enchant_broker_get_error(resource broker)" returns="string" doc="Returns the last error of the broker" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_list_dicts" signature="enchant_broker_list_dicts(resource broker)" returns="string" doc="Lists the dictionaries available for the given broker" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_request_dict" signature="enchant_broker_request_dict(resource broker, string tag)" returns="resource" doc="create a new dictionary using tag the non-empty&#10;language tag you wish to request a dictionary for en US&#10;de" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_request_pwl_dict" signature="enchant_broker_request_pwl_dict(resource broker, string filename)" returns="resource" doc="creates a dictionary using a PWL file A PWL file is&#10;personal word file one word per line It must" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_free_dict" signature="enchant_broker_free_dict(resource dict)" returns="resource" doc="Free the dictionary resource" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_dict_exists" signature="enchant_broker_dict_exists(resource broker, string tag)" returns="bool" doc="Wether a dictionary exists or not Using non-empty tag" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_set_ordering" signature="enchant_broker_set_ordering(resource broker, string tag, string ordering)" returns="bool" doc="Declares a preference of dictionaries to use for the&#10;language described referred to by 'tag' The ordering is&#10;a comma" ilk="function" src="enchant.c"/>
      <scope name="enchant_broker_describe" signature="enchant_broker_describe(resource broker)" returns="array" doc="Enumerates the Enchant providers and tells you some&#10;rudimentary information about them The same info is&#10;provided through phpinfo" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_quick_check" signature="enchant_dict_quick_check(resource dict, string word [, array &amp;suggestions])" returns="bool" doc="If the word is correctly spelled return true otherwise&#10;return false if suggestions variable is provided fill&#10;it with spelling" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_check" signature="enchant_dict_check(resource dict, string word)" returns="bool" doc="If the word is correctly spelled return true otherwise&#10;return false" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_suggest" signature="enchant_dict_suggest(resource dict, string word)" returns="array" doc="Will return a list of values if any of those&#10;pre-conditions are not met" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_add_to_personal" signature="enchant_dict_add_to_personal(resource dict, string word)" returns="void" doc="add 'word' to personal word list" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_add_to_session" signature="enchant_dict_add_to_session(resource dict, string word)" returns="void" doc="add 'word' to this spell-checking session" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_is_in_session" signature="enchant_dict_is_in_session(resource dict, string word)" returns="bool" doc="whether or not 'word' exists in this spelling-session" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_store_replacement" signature="enchant_dict_store_replacement(resource dict, string mis, string cor)" returns="void" doc="add a correction for 'mis' using 'cor' Notes that you&#10;replaced mis with cor so it's possibly more likely that" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_get_error" signature="enchant_dict_get_error(resource dict)" returns="string" doc="Returns the last error of the current spelling-session" ilk="function" src="enchant.c"/>
      <scope name="enchant_dict_describe" signature="enchant_dict_describe(resource dict)" returns="array" doc="Describes an individual dictionary 'dict'" ilk="function" src="enchant.c"/>
      <scope name="mysql_connect" signature="mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])" returns="resource" doc="Opens a connection to a MySQL Server" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_pconnect" signature="mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])" returns="resource" doc="Opens a persistent connection to a MySQL Server" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_close" signature="mysql_close([int link_identifier])" returns="bool" doc="Close a MySQL connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_select_db" signature="mysql_select_db(string database_name [, int link_identifier])" returns="bool" doc="Selects a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_client_info" signature="mysql_get_client_info(void)" returns="string" doc="Returns a string that represents the client library&#10;version" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_host_info" signature="mysql_get_host_info([int link_identifier])" returns="string" doc="Returns a string describing the type of connection in&#10;use including the server host name" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_proto_info" signature="mysql_get_proto_info([int link_identifier])" returns="int" doc="Returns the protocol version used by current connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_server_info" signature="mysql_get_server_info([int link_identifier])" returns="string" doc="Returns a string that represents the server version&#10;number" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_info" signature="mysql_info([int link_identifier])" returns="string" doc="Returns a string containing information about the most&#10;recent query" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_thread_id" signature="mysql_thread_id([int link_identifier])" returns="int" doc="Returns the thread id of current connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_stat" signature="mysql_stat([int link_identifier])" returns="string" doc="Returns a string containing status information" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_client_encoding" signature="mysql_client_encoding([int link_identifier])" returns="string" doc="Returns the default character set for the current&#10;connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_set_charset" signature="mysql_set_charset(string csname [, int link_identifier])" returns="bool" doc="sets client character set" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_create_db" signature="mysql_create_db(string database_name [, int link_identifier])" returns="bool" doc="Create a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_drop_db" signature="mysql_drop_db(string database_name [, int link_identifier])" returns="bool" doc="Drops delete a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_query" signature="mysql_query(string query [, int link_identifier])" returns="resource" doc="Sends an SQL query to MySQL" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_unbuffered_query" signature="mysql_unbuffered_query(string query [, int link_identifier])" returns="resource" doc="Sends an SQL query to MySQL without fetching and&#10;buffering the result rows" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_db_query" signature="mysql_db_query(string database_name, string query [, int link_identifier])" returns="resource" doc="Sends an SQL query to MySQL" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_dbs" signature="mysql_list_dbs([int link_identifier])" returns="resource" doc="List databases available on a MySQL server" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_tables" signature="mysql_list_tables(string database_name [, int link_identifier])" returns="resource" doc="List tables in a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_fields" signature="mysql_list_fields(string database_name, string table_name [, int link_identifier])" returns="resource" doc="List MySQL result fields" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_processes" signature="mysql_list_processes([int link_identifier])" returns="resource" doc="Returns a result set describing the current server&#10;threads" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_error" signature="mysql_error([int link_identifier])" returns="string" doc="Returns the text of the error message from previous&#10;MySQL operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_errno" signature="mysql_errno([int link_identifier])" returns="int" doc="Returns the number of the error message from previous&#10;MySQL operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_affected_rows" signature="mysql_affected_rows([int link_identifier])" returns="int" doc="Gets number of affected rows in previous MySQL&#10;operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_escape_string" signature="mysql_escape_string(string to_be_escaped)" returns="string" doc="Escape string for mysql query" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_real_escape_string" signature="mysql_real_escape_string(string to_be_escaped [, int link_identifier])" returns="string" doc="Escape special characters in a string for use in a SQL&#10;statement taking into account the current charset of&#10;the" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_insert_id" signature="mysql_insert_id([int link_identifier])" returns="int" doc="Gets the ID generated from the previous INSERT&#10;operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_result" signature="mysql_result(resource result, int row [, mixed field])" returns="mixed" doc="Gets result data" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_num_rows" signature="mysql_num_rows(resource result)" returns="int" doc="Gets number of rows in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_num_fields" signature="mysql_num_fields(resource result)" returns="int" doc="Gets number of fields in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_row" signature="mysql_fetch_row(resource result)" returns="array" doc="Gets a result row as an enumerated array" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_object" signature="mysql_fetch_object(resource result [, string class_name [, NULL" returns="object" doc="Fetch a result row as an object" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_array" signature="mysql_fetch_array(resource result [, int result_type])" returns="array" doc="Fetch a result row as an array associative numeric or&#10;both" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_assoc" signature="mysql_fetch_assoc(resource result)" returns="array" doc="Fetch a result row as an associative array" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_data_seek" signature="mysql_data_seek(resource result, int row_number)" returns="bool" doc="Move internal result pointer" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_lengths" signature="mysql_fetch_lengths(resource result)" returns="array" doc="Gets max data size of each column in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_field" signature="mysql_fetch_field(resource result [, int field_offset])" returns="object" doc="Gets column information from a result and return as an&#10;object" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_seek" signature="mysql_field_seek(resource result, int field_offset)" returns="bool" doc="Sets result pointer to a specific field offset" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_name" signature="mysql_field_name(resource result, int field_index)" returns="string" doc="Gets the name of the specified field in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_table" signature="mysql_field_table(resource result, int field_offset)" returns="string" doc="Gets name of the table the specified field is in" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_len" signature="mysql_field_len(resource result, int field_offset)" returns="int" doc="Returns the length of the specified field" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_type" signature="mysql_field_type(resource result, int field_offset)" returns="string" doc="Gets the type of the specified field in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_flags" signature="mysql_field_flags(resource result, int field_offset)" returns="string" doc="Gets the flags associated with the specified field in a&#10;result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_free_result" signature="mysql_free_result(resource result)" returns="bool" doc="Free result memory" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_ping" signature="mysql_ping([int link_identifier])" returns="bool" doc="Ping a server connection If no connection then&#10;reconnect" ilk="function" src="php_mysql.c"/>
      <scope name="zip_open" signature="zip_open(string filename)" returns="resource" doc="Create new zip using source uri for output" ilk="function" src="php_zip.c"/>
      <scope name="zip_close" signature="zip_close(resource zip)" returns="void" doc="Close a Zip archive" ilk="function" src="php_zip.c"/>
      <scope name="zip_read" signature="zip_read(resource zip)" returns="resource" doc="Returns the next file in the archive" ilk="function" src="php_zip.c"/>
      <scope name="zip_entry_open" signature="zip_entry_open(resource zip_dp, resource zip_entry [, string mode])" returns="bool" doc="Open a Zip File pointed by the resource entry" ilk="function" src="php_zip.c"/>
      <scope name="zip_entry_close" signature="zip_entry_close(resource zip_ent)" returns="void" doc="Close a zip entry" ilk="function" src="php_zip.c"/>
      <scope name="zip_entry_read" signature="zip_entry_read(resource zip_entry [, int len])" returns="mixed" doc="Read from an open directory entry" ilk="function" src="php_zip.c"/>
      <scope name="zip_entry_name" signature="zip_entry_name(resource zip_entry)" returns="string" doc="Return the name given a ZZip entry" ilk="function" src="php_zip.c"/>
      <scope name="zip_entry_compressedsize" signature="zip_entry_compressedsize(resource zip_entry)" returns="int" doc="Return the compressed size of a ZZip entry" ilk="function" src="php_zip.c"/>
      <scope name="zip_entry_filesize" signature="zip_entry_filesize(resource zip_entry)" returns="int" doc="Return the actual filesize of a ZZip entry" ilk="function" src="php_zip.c"/>
      <scope name="zip_entry_compressionmethod" signature="zip_entry_compressionmethod(resource zip_entry)" returns="string" doc="Return a string containing the compression method used&#10;on a particular entry" ilk="function" src="php_zip.c"/>
      <scope name="addGlob" signature="addGlob(string pattern[,int flags [, array options]])" returns="bool" doc="Add files matching the glob pattern See php's glob for&#10;the pattern syntax" ilk="function" src="php_zip.c"/>
      <scope name="addPattern" signature="addPattern(string pattern[, string path [, array options]])" returns="bool" doc="Add files matching the pcre pattern See php's pcre for&#10;the pattern syntax" ilk="function" src="php_zip.c"/>
      <scope name="pdo_drivers" signature="pdo_drivers()" returns="array" doc="Return array of available PDO drivers" ilk="function" src="pdo.c"/>
      <scope name="tidy_parse_string" signature="tidy_parse_string(string input [, mixed config_options [, string encoding]])" returns="bool" doc="Parse a document stored in a string" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_error_buffer" signature="tidy_get_error_buffer([boolean detailed])" returns="string" doc="Return warnings and errors which occured parsing the&#10;specified document" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_output" signature="tidy_get_output()" returns="string" doc="Return a string representing the parsed tidy markup" ilk="function" src="tidy.c"/>
      <scope name="tidy_parse_file" signature="tidy_parse_file(string file [, mixed config_options [, string encoding [, bool use_include_path]]])" returns="boolean" doc="Parse markup in file or URI" ilk="function" src="tidy.c"/>
      <scope name="tidy_clean_repair" signature="tidy_clean_repair()" returns="boolean" doc="Execute configured cleanup and repair operations on&#10;parsed markup" ilk="function" src="tidy.c"/>
      <scope name="tidy_repair_string" signature="tidy_repair_string(string data [, mixed config_file [, string encoding]])" returns="boolean" doc="Repair a string using an optionally provided&#10;configuration file" ilk="function" src="tidy.c"/>
      <scope name="tidy_repair_file" signature="tidy_repair_file(string filename [, mixed config_file [, string encoding [, bool use_include_path]]])" returns="boolean" doc="Repair a file using an optionally provided&#10;configuration file" ilk="function" src="tidy.c"/>
      <scope name="tidy_diagnose" signature="tidy_diagnose()" returns="boolean" doc="Run configured diagnostics on parsed and repaired&#10;markup" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_release" signature="tidy_get_release()" returns="string" doc="Get release date version for Tidy library" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_opt_doc" signature="tidy_get_opt_doc(tidy resource, string optname)" returns="string" doc="Returns the documentation for the given option name" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_config" signature="tidy_get_config()" returns="array" doc="Get current Tidy configuarion" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_status" signature="tidy_get_status()" returns="int" doc="Get status of specfied document" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_html_ver" signature="tidy_get_html_ver()" returns="int" doc="Get the Detected HTML version for the specified&#10;document" ilk="function" src="tidy.c"/>
      <scope name="tidy_is_xhtml" signature="tidy_is_xhtml()" returns="boolean" doc="Indicates if the document is a XHTML document" ilk="function" src="tidy.c"/>
      <scope name="tidy_is_xml" signature="tidy_is_xml()" returns="boolean" doc="Indicates if the document is a generic non HTML XHTML&#10;XML document" ilk="function" src="tidy.c"/>
      <scope name="tidy_error_count" signature="tidy_error_count()" returns="int" doc="Returns the Number of Tidy errors encountered for&#10;specified document" ilk="function" src="tidy.c"/>
      <scope name="tidy_warning_count" signature="tidy_warning_count()" returns="int" doc="Returns the Number of Tidy warnings encountered for&#10;specified document" ilk="function" src="tidy.c"/>
      <scope name="tidy_access_count" signature="tidy_access_count()" returns="int" doc="Returns the Number of Tidy accessibility warnings&#10;encountered for specified document" ilk="function" src="tidy.c"/>
      <scope name="tidy_config_count" signature="tidy_config_count()" returns="int" doc="Returns the Number of Tidy configuration errors&#10;encountered for specified document" ilk="function" src="tidy.c"/>
      <scope name="tidy_getopt" signature="tidy_getopt(string option)" returns="mixed" doc="Returns the value of the specified configuration option&#10;for the tidy document" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_root" signature="tidy_get_root()" returns="TidyNode" doc="Returns a TidyNode Object representing the root of the&#10;tidy parse tree" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_html" signature="tidy_get_html()" returns="TidyNode" doc="Returns a TidyNode Object starting from the HTML tag of&#10;the tidy parse tree" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_head" signature="tidy_get_head()" returns="TidyNode" doc="Returns a TidyNode Object starting from the HEAD tag of&#10;the tidy parse tree" ilk="function" src="tidy.c"/>
      <scope name="tidy_get_body" signature="tidy_get_body(resource tidy)" returns="TidyNode" doc="Returns a TidyNode Object starting from the BODY tag of&#10;the tidy parse tree" ilk="function" src="tidy.c"/>
      <scope name="curl_version" signature="curl_version([int version])" returns="array" doc="Return cURL version information" ilk="function" src="interface.c"/>
      <scope name="curl_init" signature="curl_init([string url])" returns="resource" doc="Initialize a cURL session" ilk="function" src="interface.c"/>
      <scope name="curl_copy_handle" signature="curl_copy_handle(resource ch)" returns="resource" doc="Copy a cURL handle along with all of it's preferences" ilk="function" src="interface.c"/>
      <scope name="curl_setopt" signature="curl_setopt(resource ch, int option, mixed value)" returns="bool" doc="Set an option for a cURL transfer" ilk="function" src="interface.c"/>
      <scope name="curl_setopt_array" signature="curl_setopt_array(resource ch, array options)" returns="bool" doc="Set an array of option for a cURL transfer" ilk="function" src="interface.c"/>
      <scope name="curl_exec" signature="curl_exec(resource ch)" returns="bool" doc="Perform a cURL session" ilk="function" src="interface.c"/>
      <scope name="curl_getinfo" signature="curl_getinfo(resource ch [, int option])" returns="mixed" doc="Get information regarding a specific transfer" ilk="function" src="interface.c"/>
      <scope name="curl_error" signature="curl_error(resource ch)" returns="string" doc="Return a string contain the last error for the current&#10;session" ilk="function" src="interface.c"/>
      <scope name="curl_errno" signature="curl_errno(resource ch)" returns="int" doc="Return an integer containing the last error number" ilk="function" src="interface.c"/>
      <scope name="curl_close" signature="curl_close(resource ch)" returns="void" doc="Close a cURL session" ilk="function" src="interface.c"/>
      <scope name="curl_multi_init" signature="curl_multi_init(void)" returns="resource" doc="Returns a new cURL multi handle" ilk="function" src="multi.c"/>
      <scope name="curl_multi_add_handle" signature="curl_multi_add_handle(resource mh, resource ch)" returns="int" doc="Add a normal cURL handle to a cURL multi handle" ilk="function" src="multi.c"/>
      <scope name="curl_multi_remove_handle" signature="curl_multi_remove_handle(resource mh, resource ch)" returns="int" doc="Remove a multi handle from a set of cURL handles" ilk="function" src="multi.c"/>
      <scope name="curl_multi_select" signature="curl_multi_select(resource mh[, double timeout])" returns="int" doc="Get all the sockets associated with the cURL extension&#10;which can then be selected" ilk="function" src="multi.c"/>
      <scope name="curl_multi_exec" signature="curl_multi_exec(resource mh, int &amp;still_running)" returns="int" doc="Run the sub-connections of the current cURL handle" ilk="function" src="multi.c"/>
      <scope name="curl_multi_getcontent" signature="curl_multi_getcontent(resource ch)" returns="string" doc="Return the content of a cURL handle if CURLOPT&#10;RETURNTRANSFER is set" ilk="function" src="multi.c"/>
      <scope name="curl_multi_info_read" signature="curl_multi_info_read(resource mh [, long msgs_in_queue])" returns="array" doc="Get information about the current transfers" ilk="function" src="multi.c"/>
      <scope name="curl_multi_close" signature="curl_multi_close(resource mh)" returns="void" doc="Close a set of cURL handles" ilk="function" src="multi.c"/>
      <scope name="oci_define_by_name" signature="oci_define_by_name(resource stmt, string name, mixed &amp;var [, int type])" returns="bool" doc="Define a PHP variable to an Oracle column by name" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_bind_by_name" signature="oci_bind_by_name(resource stmt, string name, mixed &amp;var, [, int maxlength [, int type]])" returns="bool" doc="Bind a PHP variable to an Oracle placeholder by name" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_bind_array_by_name" signature="oci_bind_array_by_name(resource stmt, string name, array &amp;var, int max_table_length [, int max_item_length [, int type ]])" returns="bool" doc="Bind a PHP array to an Oracle PL SQL type by name" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_free_descriptor" signature="oci_free_descriptor()" returns="bool" doc="Deletes large object description" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_save" signature="oci_lob_save( string data [, int offset ])" returns="bool" doc="Saves a large object" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_import" signature="oci_lob_import( string filename )" returns="bool" doc="Loads file into a LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_load" signature="oci_lob_load()" returns="string" doc="Loads a large object" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_read" signature="oci_lob_read( int length )" returns="string" doc="Reads particular part of a large object" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_eof" signature="oci_lob_eof()" returns="bool" doc="Checks if EOF is reached" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_tell" signature="oci_lob_tell()" returns="int" doc="Tells LOB pointer position" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_rewind" signature="oci_lob_rewind()" returns="bool" doc="Rewind pointer of a LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_seek" signature="oci_lob_seek( int offset [, int whence ])" returns="bool" doc="Moves the pointer of a LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_size" signature="oci_lob_size()" returns="int" doc="Returns size of a large object" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_write" signature="oci_lob_write( string string [, int length ])" returns="int" doc="Writes data to current position of a LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_append" signature="oci_lob_append( object lob )" returns="bool" doc="Appends data from a LOB to another LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_truncate" signature="oci_lob_truncate( [ int length ])" returns="bool" doc="Truncates a LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_erase" signature="oci_lob_erase( [ int offset [, int length ] ] )" returns="int" doc="Erases a specified portion of the internal LOB starting&#10;at a specified offset" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_flush" signature="oci_lob_flush( [ int flag ] )" returns="bool" doc="Flushes the LOB buffer" ilk="function" src="oci8_interface.c"/>
      <scope name="ocisetbufferinglob" signature="ocisetbufferinglob( boolean flag )" returns="bool" doc="Enables disables buffering for a LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="ocigetbufferinglob" signature="ocigetbufferinglob()" returns="bool" doc="Returns current state of buffering for a LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_copy" signature="oci_lob_copy( object lob_to, object lob_from [, int length ] )" returns="bool" doc="Copies data from a LOB to another LOB" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_is_equal" signature="oci_lob_is_equal( object lob1, object lob2 )" returns="bool" doc="Tests to see if two LOB FILE locators are equal" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_export" signature="oci_lob_export([string filename [, int start [, int length]]])" returns="bool" doc="Writes a large object into a file" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_write_temporary" signature="oci_lob_write_temporary(string var [, int lob_type])" returns="bool" doc="Writes temporary blob" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_lob_close" signature="oci_lob_close()" returns="bool" doc="Closes lob descriptor" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_new_descriptor" signature="oci_new_descriptor(resource connection [, int type])" returns="object" doc="Initialize a new empty descriptor LOB FILE LOB is&#10;default" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_rollback" signature="oci_rollback(resource connection)" returns="bool" doc="Rollback the current context" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_commit" signature="oci_commit(resource connection)" returns="bool" doc="Commit the current context" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_field_name" signature="oci_field_name(resource stmt, int col)" returns="string" doc="Tell the name of a column" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_field_size" signature="oci_field_size(resource stmt, int col)" returns="int" doc="Tell the maximum data size of a column" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_field_scale" signature="oci_field_scale(resource stmt, int col)" returns="int" doc="Tell the scale of a column" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_field_precision" signature="oci_field_precision(resource stmt, int col)" returns="int" doc="Tell the precision of a column" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_field_type" signature="oci_field_type(resource stmt, int col)" returns="mixed" doc="Tell the data type of a column" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_field_type_raw" signature="oci_field_type_raw(resource stmt, int col)" returns="int" doc="Tell the raw oracle data type of a column" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_field_is_null" signature="oci_field_is_null(resource stmt, int col)" returns="bool" doc="Tell whether a column is NULL" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_internal_debug" signature="oci_internal_debug(int onoff)" returns="void" doc="Toggle internal debugging output for the OCI extension" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_execute" signature="oci_execute(resource stmt [, int mode])" returns="bool" doc="Execute a parsed statement" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_cancel" signature="oci_cancel(resource stmt)" returns="bool" doc="Cancel reading from a cursor" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_fetch" signature="oci_fetch(resource stmt)" returns="bool" doc="Prepare a new row of data for reading" ilk="function" src="oci8_interface.c"/>
      <scope name="ocifetchinto" signature="ocifetchinto(resource stmt, array &amp;output [, int mode])" returns="int" doc="Fetch a row of result data into an array" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_fetch_all" signature="oci_fetch_all(resource stmt, array &amp;output[, int skip[, int maxrows[, int flags]]])" returns="int" doc="Fetch all rows of result data into an array" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_fetch_object" signature="oci_fetch_object( resource stmt )" returns="object" doc="Fetch a result row as an object" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_fetch_row" signature="oci_fetch_row( resource stmt )" returns="array" doc="Fetch a result row as an enumerated array" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_fetch_assoc" signature="oci_fetch_assoc( resource stmt )" returns="array" doc="Fetch a result row as an associative array" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_fetch_array" signature="oci_fetch_array( resource stmt [, int mode ])" returns="array" doc="Fetch a result row as an array" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_free_statement" signature="oci_free_statement(resource stmt)" returns="bool" doc="Free all resources associated with a statement" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_close" signature="oci_close(resource connection)" returns="bool" doc="Disconnect from database" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_new_connect" signature="oci_new_connect(string user, string pass [, string db])" returns="resource" doc="Connect to an Oracle database and log on Returns a new&#10;session" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_connect" signature="oci_connect(string user, string pass [, string db [, string charset [, int session_mode ]])" returns="resource" doc="Connect to an Oracle database and log on Returns a new&#10;session" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_pconnect" signature="oci_pconnect(string user, string pass [, string db [, string charset ]])" returns="resource" doc="Connect to an Oracle database using a persistent&#10;connection and log on Returns a new session" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_error" signature="oci_error([resource stmt" returns="array" doc="Return the last error of stmt" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_num_fields" signature="oci_num_fields(resource stmt)" returns="int" doc="Return the number of result columns in a statement" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_parse" signature="oci_parse(resource connection, string query)" returns="resource" doc="Parse a query and return a statement" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_set_prefetch" signature="oci_set_prefetch(resource stmt, int prefetch_rows)" returns="bool" doc="Sets the number of rows to be prefetched on execute to&#10;prefetch rows for stmt" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_password_change" signature="oci_password_change(resource connection, string username, string old_password, string new_password)" returns="bool" doc="Changes the password of an account" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_new_cursor" signature="oci_new_cursor(resource connection)" returns="resource" doc="Return a new cursor Statement-Handle - use this to bind&#10;ref-cursors" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_result" signature="oci_result(resource stmt, mixed column)" returns="string" doc="Return a single column of result data" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_server_version" signature="oci_server_version(resource connection)" returns="string" doc="Return a string containing server version information" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_statement_type" signature="oci_statement_type(resource stmt)" returns="string" doc="Return the query type of an OCI statement" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_num_rows" signature="oci_num_rows(resource stmt)" returns="int" doc="Return the row count of an OCI statement" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_free_collection" signature="oci_free_collection()" returns="bool" doc="Deletes collection object" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_collection_append" signature="oci_collection_append(string value)" returns="bool" doc="Append an object to the collection" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_collection_element_get" signature="oci_collection_element_get(int ndx)" returns="string" doc="Retrieve the value at collection index ndx" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_collection_assign" signature="oci_collection_assign(object from)" returns="bool" doc="Assign a collection from another existing collection" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_collection_element_assign" signature="oci_collection_element_assign(int index, string val)" returns="bool" doc="Assign element val to collection at index ndx" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_collection_size" signature="oci_collection_size()" returns="int" doc="Return the size of a collection" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_collection_max" signature="oci_collection_max()" returns="int" doc="Return the max value of a collection For a varray this&#10;is the maximum length of the array" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_collection_trim" signature="oci_collection_trim(int num)" returns="bool" doc="Trim num elements from the end of a collection" ilk="function" src="oci8_interface.c"/>
      <scope name="oci_new_collection" signature="oci_new_collection(resource connection, string tdo [, string schema])" returns="object" doc="Initialize a new collection" ilk="function" src="oci8_interface.c"/>
      <scope name="xmlwriter_set_indent" signature="xmlwriter_set_indent(resource xmlwriter, bool indent)" returns="bool" doc="Toggle indentation on off - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_set_indent_string" signature="xmlwriter_set_indent_string(resource xmlwriter, string indentString)" returns="bool" doc="Set string used for indenting - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_attribute" signature="xmlwriter_start_attribute(resource xmlwriter, string name)" returns="bool" doc="Create start attribute - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_attribute" signature="xmlwriter_end_attribute(resource xmlwriter)" returns="bool" doc="End attribute - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_attribute_ns" signature="xmlwriter_start_attribute_ns(resource xmlwriter, string prefix, string name, string uri)" returns="bool" doc="Create start namespaced attribute - returns FALSE on&#10;error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_attribute" signature="xmlwriter_write_attribute(resource xmlwriter, string name, string content)" returns="bool" doc="Write full attribute - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_attribute_ns" signature="xmlwriter_write_attribute_ns(resource xmlwriter, string prefix, string name, string uri, string content)" returns="bool" doc="Write full namespaced attribute - returns FALSE on&#10;error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_element" signature="xmlwriter_start_element(resource xmlwriter, string name)" returns="bool" doc="Create start element tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_element_ns" signature="xmlwriter_start_element_ns(resource xmlwriter, string prefix, string name, string uri)" returns="bool" doc="Create start namespaced element tag - returns FALSE on&#10;error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_element" signature="xmlwriter_end_element(resource xmlwriter)" returns="bool" doc="End current element - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_full_end_element" signature="xmlwriter_full_end_element(resource xmlwriter)" returns="bool" doc="End current element - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_element" signature="xmlwriter_write_element(resource xmlwriter, string name[, string content])" returns="bool" doc="Write full element tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_element_ns" signature="xmlwriter_write_element_ns(resource xmlwriter, string prefix, string name, string uri[, string content])" returns="bool" doc="Write full namesapced element tag - returns FALSE on&#10;error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_pi" signature="xmlwriter_start_pi(resource xmlwriter, string target)" returns="bool" doc="Create start PI tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_pi" signature="xmlwriter_end_pi(resource xmlwriter)" returns="bool" doc="End current PI - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_pi" signature="xmlwriter_write_pi(resource xmlwriter, string target, string content)" returns="bool" doc="Write full PI tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_cdata" signature="xmlwriter_start_cdata(resource xmlwriter)" returns="bool" doc="Create start CDATA tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_cdata" signature="xmlwriter_end_cdata(resource xmlwriter)" returns="bool" doc="End current CDATA - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_cdata" signature="xmlwriter_write_cdata(resource xmlwriter, string content)" returns="bool" doc="Write full CDATA tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_raw" signature="xmlwriter_write_raw(resource xmlwriter, string content)" returns="bool" doc="Write text - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_text" signature="xmlwriter_text(resource xmlwriter, string content)" returns="bool" doc="Write text - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_comment" signature="xmlwriter_start_comment(resource xmlwriter)" returns="bool" doc="Create start comment - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_comment" signature="xmlwriter_end_comment(resource xmlwriter)" returns="bool" doc="Create end comment - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_comment" signature="xmlwriter_write_comment(resource xmlwriter, string content)" returns="bool" doc="Write full comment tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_document" signature="xmlwriter_start_document(resource xmlwriter, string version, string encoding, string standalone)" returns="bool" doc="Create document tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_document" signature="xmlwriter_end_document(resource xmlwriter)" returns="bool" doc="End current document - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_dtd" signature="xmlwriter_start_dtd(resource xmlwriter, string name, string pubid, string sysid)" returns="bool" doc="Create start DTD tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_dtd" signature="xmlwriter_end_dtd(resource xmlwriter)" returns="bool" doc="End current DTD - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_dtd" signature="xmlwriter_write_dtd(resource xmlwriter, string name, string pubid, string sysid, string subset)" returns="bool" doc="Write full DTD tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_dtd_element" signature="xmlwriter_start_dtd_element(resource xmlwriter, string name)" returns="bool" doc="Create start DTD element - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_dtd_element" signature="xmlwriter_end_dtd_element(resource xmlwriter)" returns="bool" doc="End current DTD element - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_dtd_element" signature="xmlwriter_write_dtd_element(resource xmlwriter, string name, string content)" returns="bool" doc="Write full DTD element tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_dtd_attlist" signature="xmlwriter_start_dtd_attlist(resource xmlwriter, string name)" returns="bool" doc="Create start DTD AttList - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_dtd_attlist" signature="xmlwriter_end_dtd_attlist(resource xmlwriter)" returns="bool" doc="End current DTD AttList - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_dtd_attlist" signature="xmlwriter_write_dtd_attlist(resource xmlwriter, string name, string content)" returns="bool" doc="Write full DTD AttList tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_start_dtd_entity" signature="xmlwriter_start_dtd_entity(resource xmlwriter, string name, bool isparam)" returns="bool" doc="Create start DTD Entity - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_end_dtd_entity" signature="xmlwriter_end_dtd_entity(resource xmlwriter)" returns="bool" doc="End current DTD Entity - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_write_dtd_entity" signature="xmlwriter_write_dtd_entity(resource xmlwriter, string name, string content [, int pe [, string pubid [, string sysid [, string ndataid]]]])" returns="bool" doc="Write full DTD Entity tag - returns FALSE on error" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_open_uri" signature="xmlwriter_open_uri(resource xmlwriter, string source)" returns="resource" doc="Create new xmlwriter using source uri for output" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_open_memory" signature="xmlwriter_open_memory()" returns="resource" doc="Create new xmlwriter using memory for string output" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_output_memory" signature="xmlwriter_output_memory(resource xmlwriter [,bool flush])" returns="string" doc="Output current buffer as string" ilk="function" src="php_xmlwriter.c"/>
      <scope name="xmlwriter_flush" signature="xmlwriter_flush(resource xmlwriter [,bool empty])" returns="mixed" doc="Output current buffer" ilk="function" src="php_xmlwriter.c"/>
      <scope name="odbc_close_all" signature="odbc_close_all(void)" returns="void" doc="Close all ODBC connections" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_binmode" signature="odbc_binmode(int result_id, int mode)" returns="bool" doc="Handle binary column data" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_longreadlen" signature="odbc_longreadlen(int result_id, int length)" returns="bool" doc="Handle LONG columns" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_prepare" signature="odbc_prepare(resource connection_id, string query)" returns="resource" doc="Prepares a statement for execution" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_execute" signature="odbc_execute(resource result_id [, array parameters_array])" returns="bool" doc="Execute a prepared statement" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_cursor" signature="odbc_cursor(resource result_id)" returns="string" doc="Get cursor name" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_data_source" signature="odbc_data_source(resource connection_id, int fetch_type)" returns="array" doc="Return information about the currently connected data&#10;source" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_exec" signature="odbc_exec(resource connection_id, string query [, int flags])" returns="resource" doc="Prepare and execute an SQL statement" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_object" signature="odbc_fetch_object(int result [, int rownumber])" returns="object" doc="Fetch a result row as an object" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_array" signature="odbc_fetch_array(int result [, int rownumber])" returns="array" doc="Fetch a result row as an associative array" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_into" signature="odbc_fetch_into(resource result_id, array &amp;result_array, [, int rownumber])" returns="int" doc="Fetch one result row into an array" ilk="function" src="php_odbc.c"/>
      <scope name="solid_fetch_prev" signature="solid_fetch_prev(resource result_id)" returns="bool" doc="" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_row" signature="odbc_fetch_row(resource result_id [, int row_number])" returns="bool" doc="Fetch a row" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_result" signature="odbc_result(resource result_id, mixed field)" returns="mixed" doc="Get result data" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_result_all" signature="odbc_result_all(resource result_id [, string format])" returns="int" doc="Print result as HTML table" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_free_result" signature="odbc_free_result(resource result_id)" returns="bool" doc="Free resources associated with a result" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_connect" signature="odbc_connect(string DSN, string user, string password [, int cursor_option])" returns="resource" doc="Connect to a datasource" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_pconnect" signature="odbc_pconnect(string DSN, string user, string password [, int cursor_option])" returns="resource" doc="Establish a persistent connection to a datasource" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_close" signature="odbc_close(resource connection_id)" returns="void" doc="Close an ODBC connection" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_num_rows" signature="odbc_num_rows(resource result_id)" returns="int" doc="Get number of rows in a result" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_next_result" signature="odbc_next_result(resource result_id)" returns="bool" doc="Checks if multiple results are avaiable" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_num_fields" signature="odbc_num_fields(resource result_id)" returns="int" doc="Get number of columns in a result" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_name" signature="odbc_field_name(resource result_id, int field_number)" returns="string" doc="Get a column name" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_type" signature="odbc_field_type(resource result_id, int field_number)" returns="string" doc="Get the datatype of a column" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_len" signature="odbc_field_len(resource result_id, int field_number)" returns="int" doc="Get the length precision of a column" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_scale" signature="odbc_field_scale(resource result_id, int field_number)" returns="int" doc="Get the scale of a column" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_num" signature="odbc_field_num(resource result_id, string field_name)" returns="int" doc="Return column number" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_autocommit" signature="odbc_autocommit(resource connection_id [, int OnOff])" returns="mixed" doc="Toggle autocommit mode or get status" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_commit" signature="odbc_commit(resource connection_id)" returns="bool" doc="Commit an ODBC transaction" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_rollback" signature="odbc_rollback(resource connection_id)" returns="bool" doc="Rollback a transaction" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_error" signature="odbc_error([resource connection_id])" returns="string" doc="Get the last error code" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_errormsg" signature="odbc_errormsg([resource connection_id])" returns="string" doc="Get the last error message" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_setoption" signature="odbc_setoption(resource conn_id" returns="bool" doc="Sets connection or statement options" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_tables" signature="odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string table_types]]]])" returns="resource" doc="Call the SQLTables function" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_columns" signature="odbc_columns(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]])" returns="resource" doc="Returns a result identifier that can be used to fetch a&#10;list of column names in specified tables" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_columnprivileges" signature="odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)" returns="resource" doc="Returns a result identifier that can be used to fetch a&#10;list of columns and associated privileges for the&#10;specified" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_foreignkeys" signature="odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)" returns="resource" doc="Returns a result identifier to either a list of foreign&#10;keys in the specified table or a list of foreign" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_gettypeinfo" signature="odbc_gettypeinfo(resource connection_id [, int data_type])" returns="resource" doc="Returns a result identifier containing information&#10;about data types supported by the data source" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_primarykeys" signature="odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)" returns="resource" doc="Returns a result identifier listing the column names&#10;that comprise the primary key for a table" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_procedurecolumns" signature="odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])" returns="resource" doc="Returns a result identifier containing the list of&#10;input and output parameters as well as the columns that&#10;make up" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_procedures" signature="odbc_procedures(resource connection_id [, string qualifier, string owner, string name])" returns="resource" doc="Returns a result identifier containg the list of&#10;procedure names in a datasource" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_specialcolumns" signature="odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)" returns="resource" doc="Returns a result identifier containing either the&#10;optimal set of columns that uniquely identifies a row&#10;in the table or" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_statistics" signature="odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)" returns="resource" doc="Returns a result identifier that contains statistics&#10;about a single table and the indexes associated with&#10;the table" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_tableprivileges" signature="odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)" returns="resource" doc="Returns a result identifier containing a list of tables&#10;and the privileges associated with each table" ilk="function" src="php_odbc.c"/>
      <scope name="birdstep_connect" signature="birdstep_connect(string server, string user, string pass)" returns="int" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_close" signature="birdstep_close(int id)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_exec" signature="birdstep_exec(int index, string exec_str)" returns="int" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_fetch" signature="birdstep_fetch(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_result" signature="birdstep_result(int index, mixed col)" returns="mixed" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_freeresult" signature="birdstep_freeresult(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_autocommit" signature="birdstep_autocommit(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_off_autocommit" signature="birdstep_off_autocommit(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_commit" signature="birdstep_commit(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_rollback" signature="birdstep_rollback(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_fieldname" signature="birdstep_fieldname(int index, int col)" returns="string" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_fieldnum" signature="birdstep_fieldnum(int index)" returns="int" doc="" ilk="function" src="birdstep.c"/>
      <scope name="sem_get" signature="sem_get(int key [, int max_acquire [, int perm [, int auto_release]])" returns="resource" doc="Return an id for the semaphore with the given key and&#10;allow max acquire default processes to acquire it&#10;simultaneously" ilk="function" src="sysvsem.c"/>
      <scope name="sem_acquire" signature="sem_acquire(resource id)" returns="bool" doc="Acquires the semaphore with the given id blocking if&#10;necessary" ilk="function" src="sysvsem.c"/>
      <scope name="sem_release" signature="sem_release(resource id)" returns="bool" doc="Releases the semaphore with the given id" ilk="function" src="sysvsem.c"/>
      <scope name="sem_remove" signature="sem_remove(resource id)" returns="bool" doc="Removes semaphore from Unix systems" ilk="function" src="sysvsem.c"/>
      <scope name="gzfile" signature="gzfile(string filename [, int use_include_path])" returns="array" doc="Read und uncompress entire gz-file into an array" ilk="function" src="zlib.c"/>
      <scope name="gzopen" signature="gzopen(string filename, string mode [, int use_include_path])" returns="resource" doc="Open a gz-file and return a gz-file pointer" ilk="function" src="zlib.c"/>
      <scope name="readgzfile" signature="readgzfile(string filename [, int use_include_path])" returns="int" doc="Output a gz-file" ilk="function" src="zlib.c"/>
      <scope name="gzcompress" signature="gzcompress(string data [, int level])" returns="string" doc="Gzip-compress a string" ilk="function" src="zlib.c"/>
      <scope name="gzuncompress" signature="gzuncompress(string data [, int length])" returns="string" doc="Unzip a gzip-compressed string" ilk="function" src="zlib.c"/>
      <scope name="gzdeflate" signature="gzdeflate(string data [, int level])" returns="string" doc="Gzip-compress a string" ilk="function" src="zlib.c"/>
      <scope name="gzinflate" signature="gzinflate(string data [, int length])" returns="string" doc="Unzip a gzip-compressed string" ilk="function" src="zlib.c"/>
      <scope name="zlib_get_coding_type" signature="zlib_get_coding_type(void)" returns="string" doc="Returns the coding type used for output compression" ilk="function" src="zlib.c"/>
      <scope name="gzencode" signature="gzencode(string data [, int level [, int encoding_mode]])" returns="string" doc="GZ encode a string" ilk="function" src="zlib.c"/>
      <scope name="ob_gzhandler" signature="ob_gzhandler(string str, int mode)" returns="string" doc="Encode str based on accept-encoding setting - designed&#10;to be called from ob start" ilk="function" src="zlib.c"/>
      <scope name="finfo_open" signature="finfo_open([int options [, string arg]])" returns="resource" doc="Create a new fileinfo resource" ilk="function" src="fileinfo.c"/>
      <scope name="finfo_close" signature="finfo_close(resource finfo)" returns="resource" doc="Close fileinfo resource" ilk="function" src="fileinfo.c"/>
      <scope name="finfo_set_flags" signature="finfo_set_flags(resource finfo, int options)" returns="bool" doc="Set libmagic configuration options" ilk="function" src="fileinfo.c"/>
      <scope name="finfo_file" signature="finfo_file(resource finfo, char *file_name [, int options [, resource context]])" returns="string" doc="Return information about a file" ilk="function" src="fileinfo.c"/>
      <scope name="finfo_buffer" signature="finfo_buffer(resource finfo, char *string [, int options [, resource context]])" returns="string" doc="Return infromation about a string buffer" ilk="function" src="fileinfo.c"/>
      <scope name="mime_content_type" signature="mime_content_type(string filename" returns="string" doc="Return content-type for file" ilk="function" src="fileinfo.c"/>
      <scope name="date" signature="date(string format [, long timestamp])" returns="string" doc="Format a local date time" ilk="function" src="php_date.c"/>
      <scope name="gmdate" signature="gmdate(string format [, long timestamp])" returns="string" doc="Format a GMT date time" ilk="function" src="php_date.c"/>
      <scope name="idate" signature="idate(string format [, int timestamp])" returns="int" doc="Format a local time date as integer" ilk="function" src="php_date.c"/>
      <scope name="strtotime" signature="strtotime(string time [, int now ])" returns="int" doc="Convert string representation of date and time to a&#10;timestamp" ilk="function" src="php_date.c"/>
      <scope name="mktime" signature="mktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])" returns="int" doc="Get UNIX timestamp for a date" ilk="function" src="php_date.c"/>
      <scope name="gmmktime" signature="gmmktime([int hour [, int min [, int sec [, int mon [, int day [, int year]]]]]])" returns="int" doc="Get UNIX timestamp for a GMT date" ilk="function" src="php_date.c"/>
      <scope name="checkdate" signature="checkdate(int month, int day, int year)" returns="bool" doc="Returns true if it is a valid date in gregorian&#10;calendar" ilk="function" src="php_date.c"/>
      <scope name="strftime" signature="strftime(string format [, int timestamp])" returns="string" doc="Format a local time date according to locale settings" ilk="function" src="php_date.c"/>
      <scope name="gmstrftime" signature="gmstrftime(string format [, int timestamp])" returns="string" doc="Format a GMT UCT time date according to locale settings" ilk="function" src="php_date.c"/>
      <scope name="time" signature="time(void)" returns="int" doc="Return current UNIX timestamp" ilk="function" src="php_date.c"/>
      <scope name="localtime" signature="localtime([int timestamp [, bool associative_array]])" returns="array" doc="Returns the results of the C system call localtime as&#10;an associative array if the associative array argument&#10;is set" ilk="function" src="php_date.c"/>
      <scope name="getdate" signature="getdate([int timestamp])" returns="array" doc="Get date time information" ilk="function" src="php_date.c"/>
      <scope name="date_create" signature="date_create([string time[, DateTimeZone object]])" returns="DateTime" doc="Returns new DateTime object" ilk="function" src="php_date.c"/>
      <scope name="date_create_from_format" signature="date_create_from_format(string format, string time[, DateTimeZone object])" returns="DateTime" doc="Returns new DateTime object formatted according to the&#10;specified format" ilk="function" src="php_date.c"/>
      <scope name="date_get_last_errors" signature="date_get_last_errors()" returns="array" doc="Returns the warnings and errors found while parsing a&#10;date time string" ilk="function" src="php_date.c"/>
      <scope name="date_parse" signature="date_parse(string date)" returns="array" doc="Returns associative array with detailed info about&#10;given date" ilk="function" src="php_date.c"/>
      <scope name="date_parse_from_format" signature="date_parse_from_format(string format, string date)" returns="array" doc="Returns associative array with detailed info about&#10;given date" ilk="function" src="php_date.c"/>
      <scope name="date_format" signature="date_format(DateTime object, string format)" returns="string" doc="Returns date formatted according to given format" ilk="function" src="php_date.c"/>
      <scope name="date_modify" signature="date_modify(DateTime object, string modify)" returns="DateTime" doc="Alters the timestamp" ilk="function" src="php_date.c"/>
      <scope name="date_add" signature="date_add(DateTime object, DateInterval interval)" returns="DateTime" doc="Adds an interval to the current date in object" ilk="function" src="php_date.c"/>
      <scope name="date_sub" signature="date_sub(DateTime object, DateInterval interval)" returns="DateTime" doc="Subtracts an interval to the current date in object" ilk="function" src="php_date.c"/>
      <scope name="date_timezone_get" signature="date_timezone_get(DateTime object)" returns="DateTimeZone" doc="Return new DateTimeZone object relative to give&#10;DateTime" ilk="function" src="php_date.c"/>
      <scope name="date_timezone_set" signature="date_timezone_set(DateTime object, DateTimeZone object)" returns="DateTime" doc="Sets the timezone for the DateTime object" ilk="function" src="php_date.c"/>
      <scope name="date_offset_get" signature="date_offset_get(DateTime object)" returns="long" doc="Returns the DST offset" ilk="function" src="php_date.c"/>
      <scope name="date_time_set" signature="date_time_set(DateTime object, long hour, long minute[, long second])" returns="DateTime" doc="Sets the time" ilk="function" src="php_date.c"/>
      <scope name="date_date_set" signature="date_date_set(DateTime object, long year, long month, long day)" returns="DateTime" doc="Sets the date" ilk="function" src="php_date.c"/>
      <scope name="date_isodate_set" signature="date_isodate_set(DateTime object, long year, long week[, long day])" returns="DateTime" doc="Sets the ISO date" ilk="function" src="php_date.c"/>
      <scope name="date_timestamp_set" signature="date_timestamp_set(DateTime object, long unixTimestamp)" returns="DateTime" doc="Sets the date and time based on an Unix timestamp" ilk="function" src="php_date.c"/>
      <scope name="date_timestamp_get" signature="date_timestamp_get(DateTime object)" returns="long" doc="Gets the Unix timestamp" ilk="function" src="php_date.c"/>
      <scope name="date_diff" signature="date_diff(DateTime object [, bool absolute])" returns="DateInterval" doc="Returns the difference between two DateTime objects" ilk="function" src="php_date.c"/>
      <scope name="timezone_open" signature="timezone_open(string timezone)" returns="DateTimeZone" doc="Returns new DateTimeZone object" ilk="function" src="php_date.c"/>
      <scope name="timezone_name_get" signature="timezone_name_get(DateTimeZone object)" returns="string" doc="Returns the name of the timezone" ilk="function" src="php_date.c"/>
      <scope name="timezone_name_from_abbr" signature="timezone_name_from_abbr(string abbr[, long gmtOffset[, long isdst]])" returns="string" doc="Returns the timezone name from abbrevation" ilk="function" src="php_date.c"/>
      <scope name="timezone_offset_get" signature="timezone_offset_get(DateTimeZone object, DateTime object)" returns="long" doc="Returns the timezone offset" ilk="function" src="php_date.c"/>
      <scope name="timezone_transitions_get" signature="timezone_transitions_get(DateTimeZone object [, long timestamp_begin [, long timestamp_end ]])" returns="array" doc="Returns numerically indexed array containing&#10;associative array for all transitions in the specified&#10;range for the timezone" ilk="function" src="php_date.c"/>
      <scope name="timezone_location_get" signature="timezone_location_get()" returns="array" doc="Returns location information for a timezone including&#10;country code latitude longitude and comments" ilk="function" src="php_date.c"/>
      <scope name="date_interval_create_from_date_string" signature="date_interval_create_from_date_string(string time)" returns="DateInterval" doc="Uses the normal date parsers and sets up a DateInterval&#10;from the relative parts of the parsed string" ilk="function" src="php_date.c"/>
      <scope name="date_interval_format" signature="date_interval_format(DateInterval object, string format)" returns="string" doc="Formats the interval" ilk="function" src="php_date.c"/>
      <scope name="timezone_identifiers_list" signature="timezone_identifiers_list([long what[, string country]])" returns="array" doc="Returns numerically index array with all timezone&#10;identifiers" ilk="function" src="php_date.c"/>
      <scope name="timezone_version_get" signature="timezone_version_get()" returns="array" doc="Returns the Olson database version number" ilk="function" src="php_date.c"/>
      <scope name="timezone_abbreviations_list" signature="timezone_abbreviations_list()" returns="array" doc="Returns associative array containing dst offset and the&#10;timezone name" ilk="function" src="php_date.c"/>
      <scope name="date_default_timezone_set" signature="date_default_timezone_set(string timezone_identifier)" returns="bool" doc="Sets the default timezone used by all date time&#10;functions in a script" ilk="function" src="php_date.c"/>
      <scope name="date_default_timezone_get" signature="date_default_timezone_get()" returns="string" doc="Gets the default timezone used by all date time&#10;functions in a script" ilk="function" src="php_date.c"/>
      <scope name="date_sunrise" signature="date_sunrise(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])" returns="mixed" doc="Returns time of sunrise for a given day and location" ilk="function" src="php_date.c"/>
      <scope name="date_sunset" signature="date_sunset(mixed time [, int format [, float latitude [, float longitude [, float zenith [, float gmt_offset]]]]])" returns="mixed" doc="Returns time of sunset for a given day and location" ilk="function" src="php_date.c"/>
      <scope name="date_sun_info" signature="date_sun_info(long time, float latitude, float longitude)" returns="array" doc="Returns an array with information about sun set rise&#10;and twilight begin end" ilk="function" src="php_date.c"/>
      <scope name="unixtojd" signature="unixtojd([int timestamp])" returns="int" doc="Convert UNIX timestamp to Julian Day" ilk="function" src="cal_unix.c"/>
      <scope name="jdtounix" signature="jdtounix(int jday)" returns="int" doc="Convert Julian Day to UNIX timestamp" ilk="function" src="cal_unix.c"/>
      <scope name="cal_info" signature="cal_info([int calendar])" returns="array" doc="Returns information about a particular calendar" ilk="function" src="calendar.c"/>
      <scope name="cal_days_in_month" signature="cal_days_in_month(int calendar, int month, int year)" returns="int" doc="Returns the number of days in a month for a given year&#10;and calendar" ilk="function" src="calendar.c"/>
      <scope name="cal_to_jd" signature="cal_to_jd(int calendar, int month, int day, int year)" returns="int" doc="Converts from a supported calendar to Julian Day Count" ilk="function" src="calendar.c"/>
      <scope name="cal_from_jd" signature="cal_from_jd(int jd, int calendar)" returns="array" doc="Converts from Julian Day Count to a supported calendar&#10;and return extended information" ilk="function" src="calendar.c"/>
      <scope name="jdtogregorian" signature="jdtogregorian(int juliandaycount)" returns="string" doc="Converts a julian day count to a gregorian calendar&#10;date" ilk="function" src="calendar.c"/>
      <scope name="gregoriantojd" signature="gregoriantojd(int month, int day, int year)" returns="int" doc="Converts a gregorian calendar date to julian day count" ilk="function" src="calendar.c"/>
      <scope name="jdtojulian" signature="jdtojulian(int juliandaycount)" returns="string" doc="Convert a julian day count to a julian calendar date" ilk="function" src="calendar.c"/>
      <scope name="juliantojd" signature="juliantojd(int month, int day, int year)" returns="int" doc="Converts a julian calendar date to julian day count" ilk="function" src="calendar.c"/>
      <scope name="jdtojewish" signature="jdtojewish(int juliandaycount [, bool hebrew [, int fl]])" returns="string" doc="Converts a julian day count to a jewish calendar date" ilk="function" src="calendar.c"/>
      <scope name="jewishtojd" signature="jewishtojd(int month, int day, int year)" returns="int" doc="Converts a jewish calendar date to a julian day count" ilk="function" src="calendar.c"/>
      <scope name="jdtofrench" signature="jdtofrench(int juliandaycount)" returns="string" doc="Converts a julian day count to a french republic&#10;calendar date" ilk="function" src="calendar.c"/>
      <scope name="frenchtojd" signature="frenchtojd(int month, int day, int year)" returns="int" doc="Converts a french republic calendar date to julian day&#10;count" ilk="function" src="calendar.c"/>
      <scope name="jddayofweek" signature="jddayofweek(int juliandaycount [, int mode])" returns="mixed" doc="Returns name or number of day of week from julian day&#10;count" ilk="function" src="calendar.c"/>
      <scope name="jdmonthname" signature="jdmonthname(int juliandaycount, int mode)" returns="string" doc="Returns name of month for julian day count" ilk="function" src="calendar.c"/>
      <scope name="easter_date" signature="easter_date([int year])" returns="int" doc="Return the timestamp of midnight on Easter of a given&#10;year defaults to current year" ilk="function" src="easter.c"/>
      <scope name="easter_days" signature="easter_days([int year, [int method]])" returns="int" doc="Return the number of days after March that Easter falls&#10;on for a given year defaults to current year" ilk="function" src="easter.c"/>
      <scope name="shm_attach" signature="shm_attach(int key [, int memsize [, int perm]])" returns="int" doc="Creates or open a shared memory segment" ilk="function" src="sysvshm.c"/>
      <scope name="shm_detach" signature="shm_detach(resource shm_identifier)" returns="bool" doc="Disconnects from shared memory segment" ilk="function" src="sysvshm.c"/>
      <scope name="shm_remove" signature="shm_remove(resource shm_identifier)" returns="bool" doc="Removes shared memory from Unix systems" ilk="function" src="sysvshm.c"/>
      <scope name="shm_put_var" signature="shm_put_var(resource shm_identifier, int variable_key, mixed variable)" returns="bool" doc="Inserts or updates a variable in shared memory" ilk="function" src="sysvshm.c"/>
      <scope name="shm_get_var" signature="shm_get_var(resource id, int variable_key)" returns="mixed" doc="Returns a variable from shared memory" ilk="function" src="sysvshm.c"/>
      <scope name="shm_has_var" signature="shm_has_var(resource id, int variable_key)" returns="bool" doc="Checks whether a specific entry exists" ilk="function" src="sysvshm.c"/>
      <scope name="shm_remove_var" signature="shm_remove_var(resource id, int variable_key)" returns="bool" doc="Removes variable from shared memory" ilk="function" src="sysvshm.c"/>
      <scope name="textdomain" signature="textdomain(string domain)" returns="string" doc="Set the textdomain to domain Returns the current domain" ilk="function" src="gettext.c"/>
      <scope name="gettext" signature="gettext(string msgid)" returns="string" doc="Return the translation of msgid for the current domain&#10;or msgid unaltered if a translation does not exist" ilk="function" src="gettext.c"/>
      <scope name="dgettext" signature="dgettext(string domain_name, string msgid)" returns="string" doc="Return the translation of msgid for domain name or&#10;msgid unaltered if a translation does not exist" ilk="function" src="gettext.c"/>
      <scope name="dcgettext" signature="dcgettext(string domain_name, string msgid, long category)" returns="string" doc="Return the translation of msgid for domain name and&#10;category or msgid unaltered if a translation does not&#10;exist" ilk="function" src="gettext.c"/>
      <scope name="bindtextdomain" signature="bindtextdomain(string domain_name, string dir)" returns="string" doc="Bind to the text domain domain name looking for&#10;translations in dir Returns the current domain" ilk="function" src="gettext.c"/>
      <scope name="ngettext" signature="ngettext(string MSGID1, string MSGID2, int N)" returns="string" doc="Plural version of gettext" ilk="function" src="gettext.c"/>
      <scope name="exif_tagname" signature="exif_tagname(index)" returns="string" doc="Get headername for index or false if not defined" ilk="function" src="exif.c"/>
      <scope name="exif_read_data" signature="exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])" returns="array" doc="Reads header data from the JPEG TIFF image filename and&#10;optionally reads the internal thumbnails" ilk="function" src="exif.c"/>
      <scope name="exif_thumbnail" signature="exif_thumbnail(string filename [, &amp;width, &amp;height [, &amp;imagetype]])" returns="string" doc="Reads the embedded thumbnail" ilk="function" src="exif.c"/>
      <scope name="exif_imagetype" signature="exif_imagetype(string imagefile)" returns="int" doc="Get the type of an image" ilk="function" src="exif.c"/>
      <scope name="dba_popen" signature="dba_popen(string path, string mode [, string handlername, string ...])" returns="resource" doc="Opens path using the specified handler in mode&#10;persistently" ilk="function" src="dba.c"/>
      <scope name="dba_open" signature="dba_open(string path, string mode [, string handlername, string ...])" returns="resource" doc="Opens path using the specified handler in mode" ilk="function" src="dba.c"/>
      <scope name="dba_close" signature="dba_close(resource handle)" returns="void" doc="Closes database" ilk="function" src="dba.c"/>
      <scope name="dba_exists" signature="dba_exists(string key, resource handle)" returns="bool" doc="Checks if the specified key exists" ilk="function" src="dba.c"/>
      <scope name="dba_fetch" signature="dba_fetch(string key, [int skip ,] resource handle)" returns="string" doc="Fetches the data associated with key" ilk="function" src="dba.c"/>
      <scope name="dba_key_split" signature="dba_key_split(string key)" returns="false" doc="Splits an inifile key into an array of the form array&#10;group value name but returns false if input is" ilk="function" src="dba.c"/>
      <scope name="dba_firstkey" signature="dba_firstkey(resource handle)" returns="string" doc="Resets the internal key pointer and returns the first&#10;key" ilk="function" src="dba.c"/>
      <scope name="dba_nextkey" signature="dba_nextkey(resource handle)" returns="string" doc="Returns the next key" ilk="function" src="dba.c"/>
      <scope name="dba_delete" signature="dba_delete(string key, resource handle)" returns="bool" doc="Deletes the entry associated with key If inifile remove&#10;all other key lines" ilk="function" src="dba.c"/>
      <scope name="dba_insert" signature="dba_insert(string key, string value, resource handle)" returns="bool" doc="If not inifile Insert value as key return false if key&#10;exists already If inifile Add vakue as key next" ilk="function" src="dba.c"/>
      <scope name="dba_replace" signature="dba_replace(string key, string value, resource handle)" returns="bool" doc="Inserts value as key replaces key if key exists already&#10;If inifile remove all other key lines" ilk="function" src="dba.c"/>
      <scope name="dba_optimize" signature="dba_optimize(resource handle)" returns="bool" doc="Optimizes e g clean up vacuum database" ilk="function" src="dba.c"/>
      <scope name="dba_sync" signature="dba_sync(resource handle)" returns="bool" doc="Synchronizes database" ilk="function" src="dba.c"/>
      <scope name="dba_handlers" signature="dba_handlers([bool full_info])" returns="array" doc="List configured database handlers" ilk="function" src="dba.c"/>
      <scope name="dba_list" signature="dba_list()" returns="array" doc="List opened databases" ilk="function" src="dba.c"/>
      <scope name="confirm_extname_compiled" signature="confirm_extname_compiled(string arg)" returns="string" doc="Return a string to confirm that the module is compiled&#10;in" ilk="function" src="skeleton.c"/>
      <scope name="openssl_x509_export_to_file" signature="openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext = true])" returns="bool" doc="Exports a CERT to file or a var" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_export" signature="openssl_x509_export(mixed x509, string &amp;out [, bool notext = true])" returns="bool" doc="Exports a CERT to file or a var" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_check_private_key" signature="openssl_x509_check_private_key(mixed cert, mixed key)" returns="bool" doc="Checks if a private key corresponds to a CERT" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_parse" signature="openssl_x509_parse(mixed x509 [, bool shortnames=true])" returns="array" doc="Returns an array of the fields values of the CERT" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_checkpurpose" signature="openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])" returns="int" doc="Checks the CERT to see if it can be used for the&#10;purpose in purpose cainfo holds information about&#10;trusted" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_read" signature="openssl_x509_read(mixed cert)" returns="resource" doc="Reads X certificates" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_free" signature="openssl_x509_free(resource x509)" returns="void" doc="Frees X certificates" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs12_export_to_file" signature="openssl_pkcs12_export_to_file(mixed x509, string filename, mixed priv_key, string pass[, array args])" returns="bool" doc="Creates and exports a PKCS to file" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs12_export" signature="openssl_pkcs12_export(mixed x509, string &amp;out, mixed priv_key, string pass[, array args])" returns="bool" doc="Creates and exports a PKCS to a var" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs12_read" signature="openssl_pkcs12_read(string PKCS12, array &amp;certs, string pass)" returns="bool" doc="Parses a PKCS to an array" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_export_to_file" signature="openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])" returns="bool" doc="Exports a CSR to file" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_export" signature="openssl_csr_export(resource csr, string &amp;out [, bool notext=true])" returns="bool" doc="Exports a CSR to file or a var" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_sign" signature="openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])" returns="resource" doc="Signs a cert with another CERT" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_new" signature="openssl_csr_new(array dn, resource &amp;privkey [, array configargs [, array extraattribs]])" returns="bool" doc="Generates a privkey and CSR" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_get_subject" signature="openssl_csr_get_subject(mixed csr)" returns="mixed" doc="Returns the subject of a CERT or FALSE on error" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_get_public_key" signature="openssl_csr_get_public_key(mixed csr)" returns="mixed" doc="Returns the subject of a CERT or FALSE on error" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_new" signature="openssl_pkey_new([array configargs])" returns="resource" doc="Generates a new private key" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_export_to_file" signature="openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)" returns="bool" doc="Gets an exportable representation of a key into a file" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_export" signature="openssl_pkey_export(mixed key, &amp;mixed out [, string passphrase [, array config_args]])" returns="bool" doc="Gets an exportable representation of a key into a&#10;string or file" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_get_public" signature="openssl_pkey_get_public(mixed cert)" returns="int" doc="Gets public key from X certificate" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_free" signature="openssl_pkey_free(int key)" returns="void" doc="Frees a key" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_get_private" signature="openssl_pkey_get_private(string key [, string passphrase])" returns="int" doc="Gets private keys" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_get_details" signature="openssl_pkey_get_details(resource key)" returns="resource" doc="returns an array with the key details bits pkey type" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_verify" signature="openssl_pkcs7_verify(string filename, long flags [, string signerscerts [, array cainfo [, string extracerts [, string content]]]])" returns="bool" doc="Verifys that the data block is intact the signer is who&#10;they say they are and returns the CERTs of" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_encrypt" signature="openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags [, long cipher]])" returns="bool" doc="Encrypts the message in the file named infile with the&#10;certificates in recipcerts and output the result to the&#10;file" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_sign" signature="openssl_pkcs7_sign(string infile, string outfile, mixed signcert, mixed signkey, array headers [, long flags [, string extracertsfilename]])" returns="bool" doc="Signs the MIME message in the file named infile with&#10;signcert signkey and output the result to file name&#10;outfile" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_decrypt" signature="openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])" returns="bool" doc="Decrypts the S MIME message in the file name infilename&#10;and output the results to the file name outfilename&#10;recipcert" ilk="function" src="openssl.c"/>
      <scope name="openssl_private_encrypt" signature="openssl_private_encrypt(string data, string &amp;crypted, mixed key [, int padding])" returns="bool" doc="Encrypts data with private key" ilk="function" src="openssl.c"/>
      <scope name="openssl_private_decrypt" signature="openssl_private_decrypt(string data, string &amp;decrypted, mixed key [, int padding])" returns="bool" doc="Decrypts data with private key" ilk="function" src="openssl.c"/>
      <scope name="openssl_public_encrypt" signature="openssl_public_encrypt(string data, string &amp;crypted, mixed key [, int padding])" returns="bool" doc="Encrypts data with public key" ilk="function" src="openssl.c"/>
      <scope name="openssl_public_decrypt" signature="openssl_public_decrypt(string data, string &amp;crypted, resource key [, int padding])" returns="bool" doc="Decrypts data with public key" ilk="function" src="openssl.c"/>
      <scope name="openssl_error_string" signature="openssl_error_string(void)" returns="mixed" doc="Returns a description of the last error and alters the&#10;index of the error messages Returns false when the are" ilk="function" src="openssl.c"/>
      <scope name="openssl_sign" signature="openssl_sign(string data, &amp;string signature, mixed key[, mixed method])" returns="bool" doc="Signs data" ilk="function" src="openssl.c"/>
      <scope name="openssl_verify" signature="openssl_verify(string data, string signature, mixed key[, mixed method])" returns="int" doc="Verifys data" ilk="function" src="openssl.c"/>
      <scope name="openssl_seal" signature="openssl_seal(string data, &amp;string sealdata, &amp;array ekeys, array pubkeys)" returns="int" doc="Seals data" ilk="function" src="openssl.c"/>
      <scope name="openssl_open" signature="openssl_open(string data, &amp;string opendata, string ekey, mixed privkey)" returns="bool" doc="Opens data" ilk="function" src="openssl.c"/>
      <scope name="openssl_get_md_methods" signature="openssl_get_md_methods([bool aliases = false])" returns="array" doc="Return array of available digest methods" ilk="function" src="openssl.c"/>
      <scope name="openssl_get_cipher_methods" signature="openssl_get_cipher_methods([bool aliases = false])" returns="array" doc="Return array of available cipher methods" ilk="function" src="openssl.c"/>
      <scope name="openssl_digest" signature="openssl_digest(string data, string method [, bool raw_output=false])" returns="string" doc="Computes digest hash value for given data using given&#10;method returns raw or binhex encoded string" ilk="function" src="openssl.c"/>
      <scope name="openssl_encrypt" signature="openssl_encrypt(string data, string method, string password [, bool raw_output=false])" returns="string" doc="Encrypts given data with given method and key returns&#10;raw or base encoded string" ilk="function" src="openssl.c"/>
      <scope name="openssl_decrypt" signature="openssl_decrypt(string data, string method, string password [, bool raw_input=false])" returns="string" doc="Takes raw or base encoded string and dectupt it using&#10;given method and key" ilk="function" src="openssl.c"/>
      <scope name="openssl_dh_compute_key" signature="openssl_dh_compute_key(string pub_key, resource dh_key)" returns="string" doc="Computes shared sicret for public value of remote DH&#10;key and local DH key" ilk="function" src="openssl.c"/>
      <scope name="openssl_random_pseudo_bytes" signature="openssl_random_pseudo_bytes(integer length [, &amp;bool returned_strong_result])" returns="string" doc="Returns a string of the length specified filled with&#10;random pseudo bytes" ilk="function" src="openssl.c"/>
      <scope name="variant_set" signature="variant_set(object variant, mixed value)" returns="void" doc="Assigns a new value for a variant object" ilk="function" src="com_variant.c"/>
      <scope name="variant_add" signature="variant_add(mixed left, mixed right)" returns="mixed" doc="Adds two variant values together and returns the result" ilk="function" src="com_variant.c"/>
      <scope name="variant_cat" signature="variant_cat(mixed left, mixed right)" returns="mixed" doc="concatenates two variant values together and returns&#10;the result" ilk="function" src="com_variant.c"/>
      <scope name="variant_sub" signature="variant_sub(mixed left, mixed right)" returns="mixed" doc="subtracts the value of the right variant from the left&#10;variant value and returns the result" ilk="function" src="com_variant.c"/>
      <scope name="variant_mul" signature="variant_mul(mixed left, mixed right)" returns="mixed" doc="multiplies the values of the two variants and returns&#10;the result" ilk="function" src="com_variant.c"/>
      <scope name="variant_and" signature="variant_and(mixed left, mixed right)" returns="mixed" doc="performs a bitwise AND operation between two variants&#10;and returns the result" ilk="function" src="com_variant.c"/>
      <scope name="variant_div" signature="variant_div(mixed left, mixed right)" returns="mixed" doc="Returns the result from dividing two variants" ilk="function" src="com_variant.c"/>
      <scope name="variant_eqv" signature="variant_eqv(mixed left, mixed right)" returns="mixed" doc="Performs a bitwise equivalence on two variants" ilk="function" src="com_variant.c"/>
      <scope name="variant_idiv" signature="variant_idiv(mixed left, mixed right)" returns="mixed" doc="Converts variants to integers and then returns the&#10;result from dividing them" ilk="function" src="com_variant.c"/>
      <scope name="variant_imp" signature="variant_imp(mixed left, mixed right)" returns="mixed" doc="Performs a bitwise implication on two variants" ilk="function" src="com_variant.c"/>
      <scope name="variant_mod" signature="variant_mod(mixed left, mixed right)" returns="mixed" doc="Divides two variants and returns only the remainder" ilk="function" src="com_variant.c"/>
      <scope name="variant_or" signature="variant_or(mixed left, mixed right)" returns="mixed" doc="Performs a logical disjunction on two variants" ilk="function" src="com_variant.c"/>
      <scope name="variant_pow" signature="variant_pow(mixed left, mixed right)" returns="mixed" doc="Returns the result of performing the power function&#10;with two variants" ilk="function" src="com_variant.c"/>
      <scope name="variant_xor" signature="variant_xor(mixed left, mixed right)" returns="mixed" doc="Performs a logical exclusion on two variants" ilk="function" src="com_variant.c"/>
      <scope name="variant_abs" signature="variant_abs(mixed left)" returns="mixed" doc="Returns the absolute value of a variant" ilk="function" src="com_variant.c"/>
      <scope name="variant_fix" signature="variant_fix(mixed left)" returns="mixed" doc="Returns the integer part of a variant" ilk="function" src="com_variant.c"/>
      <scope name="variant_int" signature="variant_int(mixed left)" returns="mixed" doc="Returns the integer portion of a variant" ilk="function" src="com_variant.c"/>
      <scope name="variant_neg" signature="variant_neg(mixed left)" returns="mixed" doc="Performs logical negation on a variant" ilk="function" src="com_variant.c"/>
      <scope name="variant_not" signature="variant_not(mixed left)" returns="mixed" doc="Performs bitwise not negation on a variant" ilk="function" src="com_variant.c"/>
      <scope name="variant_round" signature="variant_round(mixed left, int decimals)" returns="mixed" doc="Rounds a variant to the specified number of decimal&#10;places" ilk="function" src="com_variant.c"/>
      <scope name="variant_cmp" signature="variant_cmp(mixed left, mixed right [, int lcid [, int flags]])" returns="int" doc="Compares two variants" ilk="function" src="com_variant.c"/>
      <scope name="variant_date_to_timestamp" signature="variant_date_to_timestamp(object variant)" returns="int" doc="Converts a variant date time value to unix timestamp" ilk="function" src="com_variant.c"/>
      <scope name="variant_date_from_timestamp" signature="variant_date_from_timestamp(int timestamp)" returns="object" doc="Returns a variant date representation of a unix&#10;timestamp" ilk="function" src="com_variant.c"/>
      <scope name="variant_get_type" signature="variant_get_type(object variant)" returns="int" doc="Returns the VT XXX type code for a variant" ilk="function" src="com_variant.c"/>
      <scope name="variant_set_type" signature="variant_set_type(object variant, int type)" returns="void" doc="Convert a variant into another type Variant is modified&#10;in-place" ilk="function" src="com_variant.c"/>
      <scope name="variant_cast" signature="variant_cast(object variant, int type)" returns="object" doc="Convert a variant into a new variant object of another&#10;type" ilk="function" src="com_variant.c"/>
      <scope name="com_get_active_object" signature="com_get_active_object(string progid [, int code_page ])" returns="object" doc="Returns a handle to an already running instance of a&#10;COM object" ilk="function" src="com_com.c"/>
      <scope name="com_create_guid" signature="com_create_guid()" returns="string" doc="Generate a globally unique identifier GUID" ilk="function" src="com_com.c"/>
      <scope name="com_event_sink" signature="com_event_sink(object comobject, object sinkobject [, mixed sinkinterface])" returns="bool" doc="Connect events from a COM object to a PHP object" ilk="function" src="com_com.c"/>
      <scope name="com_print_typeinfo" signature="com_print_typeinfo(object comobject" returns="bool" doc="Print out a PHP class definition for a dispatchable&#10;interface" ilk="function" src="com_com.c"/>
      <scope name="com_message_pump" signature="com_message_pump([int timeoutms])" returns="bool" doc="Process COM messages sleeping for up to timeoutms&#10;milliseconds" ilk="function" src="com_com.c"/>
      <scope name="com_load_typelib" signature="com_load_typelib(string typelib_name [, int case_insensitive])" returns="bool" doc="Loads a Typelibrary and registers its constants" ilk="function" src="com_com.c"/>
      <scope name="mysqli_affected_rows" signature="mysqli_affected_rows(object link)" returns="mixed" doc="Get number of affected rows in previous MySQL operation" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_autocommit" signature="mysqli_autocommit(object link, bool mode)" returns="bool" doc="Turn auto commit on or of" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_bind_param" signature="mysqli_stmt_bind_param(object stmt, string types, mixed variable [,mixed,....])" returns="bool" doc="U Bind variables to a prepared statement as parameters" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_bind_result" signature="mysqli_stmt_bind_result(object stmt, mixed var, [,mixed, ...])" returns="bool" doc="U Bind variables to a prepared statement for result&#10;storage" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_change_user" signature="mysqli_change_user(object link, string user, string password, string database)" returns="bool" doc="Change logged-in user of the active connection" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_character_set_name" signature="mysqli_character_set_name(object link)" returns="string" doc="Returns the name of the character set used for this&#10;connection" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_close" signature="mysqli_close(object link)" returns="bool" doc="Close connection" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_commit" signature="mysqli_commit(object link)" returns="bool" doc="Commit outstanding actions and close transaction" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_data_seek" signature="mysqli_data_seek(object result, int offset)" returns="bool" doc="Move internal result pointer" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_debug" signature="mysqli_debug(string debug)" returns="void" doc="U" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_dump_debug_info" signature="mysqli_dump_debug_info(object link)" returns="bool" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_errno" signature="mysqli_errno(object link)" returns="int" doc="Returns the numerical value of the error message from&#10;previous MySQL operation" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_error" signature="mysqli_error(object link)" returns="string" doc="Returns the text of the error message from previous&#10;MySQL operation" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_execute" signature="mysqli_stmt_execute(object stmt)" returns="bool" doc="Execute a prepared statement" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_fetch" signature="mysqli_stmt_fetch(object stmt)" returns="mixed" doc="U Fetch results from a prepared statement into the&#10;bound variables" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_field_count" signature="mysqli_field_count(object link)" returns="int" doc="Fetch the number of fields returned by the last query&#10;for the given link" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_field_seek" signature="mysqli_field_seek(object result, int fieldnr)" returns="int" doc="Set result pointer to a specified field offset" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_field_tell" signature="mysqli_field_tell(object result)" returns="int" doc="Get current field offset of result pointer" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_free_result" signature="mysqli_free_result(object result)" returns="void" doc="Free query result memory for the given result handle" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_get_client_info" signature="mysqli_get_client_info(void)" returns="string" doc="Get MySQL client info" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_get_client_version" signature="mysqli_get_client_version(void)" returns="int" doc="Get MySQL client info" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_get_proto_info" signature="mysqli_get_proto_info(object link)" returns="int" doc="Get MySQL protocol information" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_get_server_info" signature="mysqli_get_server_info(object link)" returns="string" doc="Get MySQL server info" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_get_server_version" signature="mysqli_get_server_version(object link)" returns="int" doc="Return the MySQL version for the server referenced by&#10;the given link" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_info" signature="mysqli_info(object link)" returns="string" doc="Get information about the most recent query" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_init" signature="mysqli_init(void)" returns="resource" doc="Initialize mysqli and return a resource for use with&#10;mysql real connect" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_insert_id" signature="mysqli_insert_id(object link)" returns="mixed" doc="Get the ID generated from the previous INSERT operation" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_kill" signature="mysqli_kill(object link, int processid)" returns="bool" doc="Kill a mysql process on the server" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_set_local_infile_default" signature="mysqli_set_local_infile_default(object link)" returns="void" doc="unsets user defined handler for load local infile&#10;command" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_set_local_infile_handler" signature="mysqli_set_local_infile_handler(object link, callback read_func)" returns="bool" doc="Set callback functions for LOAD DATA LOCAL INFILE" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_more_results" signature="mysqli_more_results(object link)" returns="bool" doc="check if there any more query results from a multi&#10;query" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_next_result" signature="mysqli_next_result(object link)" returns="bool" doc="read next result from multi query" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_next_result" signature="mysqli_stmt_next_result(object link)" returns="bool" doc="read next result from multi query" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_num_fields" signature="mysqli_num_fields(object result)" returns="int" doc="Get number of fields in result" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_num_rows" signature="mysqli_num_rows(object result)" returns="mixed" doc="Get number of rows in result" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_options" signature="mysqli_options(object link, int flags, mixed values)" returns="bool" doc="Set options" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_ping" signature="mysqli_ping(object link)" returns="bool" doc="Ping a server connection or reconnect if there is no&#10;connection" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_prepare" signature="mysqli_prepare(object link, string query)" returns="mixed" doc="Prepare a SQL statement for execution" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_real_connect" signature="mysqli_real_connect(object link [,string hostname [,string username [,string passwd [,string dbname [,int port [,string socket [,int flags]]]]]]])" returns="bool" doc="Open a connection to a mysql server" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_real_query" signature="mysqli_real_query(object link, string query)" returns="bool" doc="Binary-safe version of mysql query" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_real_escape_string" signature="mysqli_real_escape_string(object link, string escapestr)" returns="string" doc="Escapes special characters in a string for use in a SQL&#10;statement taking into account the current charset of&#10;the" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_rollback" signature="mysqli_rollback(object link)" returns="bool" doc="Undo actions from current transaction" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_send_long_data" signature="mysqli_stmt_send_long_data(object stmt, int param_nr, string data)" returns="bool" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_affected_rows" signature="mysqli_stmt_affected_rows(object stmt)" returns="mixed" doc="Return the number of rows affected in the last query&#10;for the given link" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_close" signature="mysqli_stmt_close(object stmt)" returns="bool" doc="Close statement" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_data_seek" signature="mysqli_stmt_data_seek(object stmt, int offset)" returns="void" doc="Move internal result pointer" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_field_count" signature="mysqli_stmt_field_count(object stmt)" returns="int" doc="Return the number of result columns for the given&#10;statement" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_free_result" signature="mysqli_stmt_free_result(object stmt)" returns="void" doc="Free stored result memory for the given statement&#10;handle" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_insert_id" signature="mysqli_stmt_insert_id(object stmt)" returns="mixed" doc="Get the ID generated from the previous INSERT operation" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_param_count" signature="mysqli_stmt_param_count(object stmt)" returns="int" doc="Return the number of parameter for the given statement" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_reset" signature="mysqli_stmt_reset(object stmt)" returns="bool" doc="reset a prepared statement" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_num_rows" signature="mysqli_stmt_num_rows(object stmt)" returns="mixed" doc="Return the number of rows in statements result set" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_select_db" signature="mysqli_select_db(object link, string dbname)" returns="bool" doc="Select a MySQL database" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_sqlstate" signature="mysqli_sqlstate(object link)" returns="string" doc="Returns the SQLSTATE error from previous MySQL&#10;operation" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_ssl_set" signature="mysqli_ssl_set(object link ,string key ,string cert ,string ca ,string capath ,string cipher])" returns="bool" doc="U" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stat" signature="mysqli_stat(object link)" returns="mixed" doc="Get current system status" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_refresh" signature="mysqli_refresh(object link, long options)" returns="bool" doc="Flush tables or caches or reset replication server&#10;information" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_attr_set" signature="mysqli_stmt_attr_set(object stmt, long attr, long mode)" returns="int" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_attr_get" signature="mysqli_stmt_attr_get(object stmt, long attr)" returns="int" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_errno" signature="mysqli_stmt_errno(object stmt)" returns="int" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_error" signature="mysqli_stmt_error(object stmt)" returns="string" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_init" signature="mysqli_stmt_init(object link)" returns="mixed" doc="Initialize statement object" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_prepare" signature="mysqli_stmt_prepare(object stmt, string query)" returns="bool" doc="prepare server side statement with query" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_result_metadata" signature="mysqli_stmt_result_metadata(object stmt)" returns="mixed" doc="return result set from statement" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_store_result" signature="mysqli_stmt_store_result(stmt)" returns="bool" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_stmt_sqlstate" signature="mysqli_stmt_sqlstate(object stmt)" returns="string" doc="" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_store_result" signature="mysqli_store_result(object link)" returns="object" doc="Buffer result set on client" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_thread_id" signature="mysqli_thread_id(object link)" returns="int" doc="Return the current thread ID" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_thread_safe" signature="mysqli_thread_safe(void)" returns="bool" doc="Return whether thread safety is given or not" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_use_result" signature="mysqli_use_result(object link)" returns="mixed" doc="Directly retrieve query results - do not buffer results&#10;on client side" ilk="function" src="mysqli_api.c"/>
      <scope name="mysqli_connect" signature="mysqli_connect([string hostname [,string username [,string passwd [,string dbname [,int port [,string socket]]]]]])" returns="object" doc="Open a connection to a mysql server" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_link_construct" signature="mysqli_link_construct()" returns="object" doc="" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_connect_errno" signature="mysqli_connect_errno(void)" returns="int" doc="Returns the numerical value of the error message from&#10;last connect command" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_connect_error" signature="mysqli_connect_error(void)" returns="string" doc="Returns the text of the error message from previous&#10;MySQL operation" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_cache_stats" signature="mysqli_cache_stats(void)" returns="array" doc="U Returns statistics about the zval cache" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_get_client_stats" signature="mysqli_get_client_stats(void)" returns="array" doc="Returns statistics about the zval cache" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_get_connection_stats" signature="mysqli_get_connection_stats(void)" returns="array" doc="Returns statistics about the zval cache" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_multi_query" signature="mysqli_multi_query(object link, string query)" returns="bool" doc="allows to execute multiple queries" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_query" signature="mysqli_query(object link, string query [,int resultmode])" returns="mixed" doc="" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_poll" signature="mysqli_poll(array read, array write, array error, long sec [, long usec])" returns="int" doc="U Poll connections" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_reap_async_query" signature="mysqli_reap_async_query(object link)" returns="int" doc="U Poll connections" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_stmt_get_result" signature="mysqli_stmt_get_result(object link)" returns="object" doc="U Buffer result set on client" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_get_warnings" signature="mysqli_get_warnings(object link)" returns="object" doc="" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_stmt_get_warnings" signature="mysqli_stmt_get_warnings(object link)" returns="object" doc="" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_set_charset" signature="mysqli_set_charset(object link, string csname)" returns="bool" doc="sets client character set" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_get_charset" signature="mysqli_get_charset(object link)" returns="object" doc="U returns a character set object" ilk="function" src="mysqli_nonapi.c"/>
      <scope name="mysqli_embedded_server_start" signature="mysqli_embedded_server_start(bool start, array arguments, array groups)" returns="bool" doc="initialize and start embedded server" ilk="function" src="mysqli_embedded.c"/>
      <scope name="mysqli_embedded_server_end" signature="mysqli_embedded_server_end(void)" returns="void" doc="" ilk="function" src="mysqli_embedded.c"/>
      <scope name="mysqli_report" signature="mysqli_report(int flags)" returns="bool" doc="sets report level" ilk="function" src="mysqli_report.c"/>
      <scope name="pg_connect" signature="pg_connect(string connection_string[, int connect_type]" returns="resource" doc="Open a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_pconnect" signature="pg_pconnect(string connection_string" returns="resource" doc="Open a persistent PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_close" signature="pg_close([resource connection])" returns="bool" doc="Close a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_dbname" signature="pg_dbname([resource connection])" returns="string" doc="Get the database name" ilk="function" src="pgsql.c"/>
      <scope name="pg_last_error" signature="pg_last_error([resource connection])" returns="string" doc="Get the error message string" ilk="function" src="pgsql.c"/>
      <scope name="pg_options" signature="pg_options([resource connection])" returns="string" doc="Get the options associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_port" signature="pg_port([resource connection])" returns="int" doc="Return the port number associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_tty" signature="pg_tty([resource connection])" returns="string" doc="Return the tty name associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_host" signature="pg_host([resource connection])" returns="string" doc="Returns the host name associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_version" signature="pg_version([resource connection])" returns="array" doc="Returns an array with client protocol and server&#10;version when available" ilk="function" src="pgsql.c"/>
      <scope name="pg_parameter_status" signature="pg_parameter_status([resource connection,] string param_name)" returns="false" doc="Returns the value of a server parameter" ilk="function" src="pgsql.c"/>
      <scope name="pg_ping" signature="pg_ping([resource connection])" returns="bool" doc="Ping database If connection is bad try to reconnect" ilk="function" src="pgsql.c"/>
      <scope name="pg_query" signature="pg_query([resource connection,] string query)" returns="resource" doc="Execute a query" ilk="function" src="pgsql.c"/>
      <scope name="pg_query_params" signature="pg_query_params([resource connection,] string query, array params)" returns="resource" doc="Execute a query" ilk="function" src="pgsql.c"/>
      <scope name="pg_prepare" signature="pg_prepare([resource connection,] string stmtname, string query)" returns="resource" doc="Prepare a query for future execution" ilk="function" src="pgsql.c"/>
      <scope name="pg_execute" signature="pg_execute([resource connection,] string stmtname, array params)" returns="resource" doc="Execute a prepared query" ilk="function" src="pgsql.c"/>
      <scope name="pg_num_rows" signature="pg_num_rows(resource result)" returns="int" doc="Return the number of rows in the result" ilk="function" src="pgsql.c"/>
      <scope name="pg_num_fields" signature="pg_num_fields(resource result)" returns="int" doc="Return the number of fields in the result" ilk="function" src="pgsql.c"/>
      <scope name="pg_affected_rows" signature="pg_affected_rows(resource result)" returns="int" doc="Returns the number of affected tuples" ilk="function" src="pgsql.c"/>
      <scope name="pg_last_notice" signature="pg_last_notice(resource connection)" returns="string" doc="Returns the last notice set by the backend" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_table" signature="pg_field_table(resource result, int field_number[, bool oid_only])" returns="mixed" doc="Returns the name of the table field belongs to or&#10;table's oid if oid only is true" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_name" signature="pg_field_name(resource result, int field_number)" returns="string" doc="Returns the name of the field" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_size" signature="pg_field_size(resource result, int field_number)" returns="int" doc="Returns the internal size of the field" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_type" signature="pg_field_type(resource result, int field_number)" returns="string" doc="Returns the type name for the given field" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_type_oid" signature="pg_field_type_oid(resource result, int field_number)" returns="string" doc="Returns the type oid for the given field" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_num" signature="pg_field_num(resource result, string field_name)" returns="int" doc="Returns the field number of the named field" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_result" signature="pg_fetch_result(resource result, [int row_number,] mixed field_name)" returns="mixed" doc="Returns values from a result identifier" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_row" signature="pg_fetch_row(resource result [, int row [, int result_type]])" returns="array" doc="Get a row as an enumerated array" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_assoc" signature="pg_fetch_assoc(resource result [, int row])" returns="array" doc="Fetch a row as an assoc array" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_array" signature="pg_fetch_array(resource result [, int row [, int result_type]])" returns="array" doc="Fetch a row as an array" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_object" signature="pg_fetch_object(resource result [, int row [, string class_name [, NULL" returns="object" doc="Fetch a row as an object" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_all" signature="pg_fetch_all(resource result)" returns="array" doc="Fetch all rows into array" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_all_columns" signature="pg_fetch_all_columns(resource result [, int column_number])" returns="array" doc="Fetch all rows into array" ilk="function" src="pgsql.c"/>
      <scope name="pg_result_seek" signature="pg_result_seek(resource result, int offset)" returns="bool" doc="Set internal row offset" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_prtlen" signature="pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)" returns="int" doc="Returns the printed length" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_is_null" signature="pg_field_is_null(resource result, [int row,] mixed field_name_or_number)" returns="int" doc="Test if a field is NULL" ilk="function" src="pgsql.c"/>
      <scope name="pg_free_result" signature="pg_free_result(resource result)" returns="bool" doc="Free result memory" ilk="function" src="pgsql.c"/>
      <scope name="pg_last_oid" signature="pg_last_oid(resource result)" returns="string" doc="Returns the last object identifier" ilk="function" src="pgsql.c"/>
      <scope name="pg_trace" signature="pg_trace(string filename [, string mode [, resource connection]])" returns="bool" doc="Enable tracing a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_untrace" signature="pg_untrace([resource connection])" returns="bool" doc="Disable tracing of a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_create" signature="pg_lo_create([resource connection],[mixed large_object_oid])" returns="mixed" doc="Create a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_unlink" signature="pg_lo_unlink([resource connection,] string large_object_oid)" returns="bool" doc="Delete a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_open" signature="pg_lo_open([resource connection,] int large_object_oid, string mode)" returns="resource" doc="Open a large object and return fd" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_close" signature="pg_lo_close(resource large_object)" returns="bool" doc="Close a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_read" signature="pg_lo_read(resource large_object [, int len])" returns="string" doc="Read a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_write" signature="pg_lo_write(resource large_object, string buf [, int len])" returns="int" doc="Write a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_read_all" signature="pg_lo_read_all(resource large_object)" returns="int" doc="Read a large object and send straight to browser" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_import" signature="pg_lo_import([resource connection, ] string filename [, mixed oid])" returns="int" doc="Import large object direct from filesystem" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_export" signature="pg_lo_export([resource connection, ] int objoid, string filename)" returns="bool" doc="Export large object direct to filesystem" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_seek" signature="pg_lo_seek(resource large_object, int offset [, int whence])" returns="bool" doc="Seeks position of large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_tell" signature="pg_lo_tell(resource large_object)" returns="int" doc="Returns current position of large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_set_error_verbosity" signature="pg_set_error_verbosity([resource connection,] int verbosity)" returns="int" doc="Set error verbosity" ilk="function" src="pgsql.c"/>
      <scope name="pg_set_client_encoding" signature="pg_set_client_encoding([resource connection,] string encoding)" returns="int" doc="Set client encoding" ilk="function" src="pgsql.c"/>
      <scope name="pg_client_encoding" signature="pg_client_encoding([resource connection])" returns="string" doc="Get the current client encoding" ilk="function" src="pgsql.c"/>
      <scope name="pg_end_copy" signature="pg_end_copy([resource connection])" returns="bool" doc="Sync with backend Completes the Copy command" ilk="function" src="pgsql.c"/>
      <scope name="pg_put_line" signature="pg_put_line([resource connection,] string query)" returns="bool" doc="Send null-terminated string to backend server" ilk="function" src="pgsql.c"/>
      <scope name="pg_copy_to" signature="pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])" returns="array" doc="Copy table to array" ilk="function" src="pgsql.c"/>
      <scope name="pg_copy_from" signature="pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])" returns="bool" doc="Copy table from array" ilk="function" src="pgsql.c"/>
      <scope name="pg_escape_string" signature="pg_escape_string([resource connection,] string data)" returns="string" doc="Escape string for text char type" ilk="function" src="pgsql.c"/>
      <scope name="pg_escape_bytea" signature="pg_escape_bytea([resource connection,] string data)" returns="string" doc="Escape binary for bytea type" ilk="function" src="pgsql.c"/>
      <scope name="pg_unescape_bytea" signature="pg_unescape_bytea(string data)" returns="string" doc="Unescape binary for bytea type" ilk="function" src="pgsql.c"/>
      <scope name="pg_result_error" signature="pg_result_error(resource result)" returns="string" doc="Get error message associated with result" ilk="function" src="pgsql.c"/>
      <scope name="pg_result_error_field" signature="pg_result_error_field(resource result, int fieldcode)" returns="string" doc="Get error message field associated with result" ilk="function" src="pgsql.c"/>
      <scope name="pg_connection_status" signature="pg_connection_status(resource connnection)" returns="int" doc="Get connection status" ilk="function" src="pgsql.c"/>
      <scope name="pg_transaction_status" signature="pg_transaction_status(resource connnection)" returns="int" doc="Get transaction status" ilk="function" src="pgsql.c"/>
      <scope name="pg_connection_reset" signature="pg_connection_reset(resource connection)" returns="bool" doc="Reset connection reconnect" ilk="function" src="pgsql.c"/>
      <scope name="pg_cancel_query" signature="pg_cancel_query(resource connection)" returns="bool" doc="Cancel request" ilk="function" src="pgsql.c"/>
      <scope name="pg_connection_busy" signature="pg_connection_busy(resource connection)" returns="bool" doc="Get connection is busy or not" ilk="function" src="pgsql.c"/>
      <scope name="pg_send_query" signature="pg_send_query(resource connection, string query)" returns="bool" doc="Send asynchronous query" ilk="function" src="pgsql.c"/>
      <scope name="pg_send_query_params" signature="pg_send_query_params(resource connection, string query, array params)" returns="bool" doc="Send asynchronous parameterized query" ilk="function" src="pgsql.c"/>
      <scope name="pg_send_prepare" signature="pg_send_prepare(resource connection, string stmtname, string query)" returns="bool" doc="Asynchronously prepare a query for future execution" ilk="function" src="pgsql.c"/>
      <scope name="pg_send_execute" signature="pg_send_execute(resource connection, string stmtname, array params)" returns="bool" doc="Executes prevriously prepared stmtname asynchronously" ilk="function" src="pgsql.c"/>
      <scope name="pg_get_result" signature="pg_get_result(resource connection)" returns="resource" doc="Get asynchronous query result" ilk="function" src="pgsql.c"/>
      <scope name="pg_result_status" signature="pg_result_status(resource result[, long result_type])" returns="mixed" doc="Get status of query result" ilk="function" src="pgsql.c"/>
      <scope name="pg_get_notify" signature="pg_get_notify([resource connection[, result_type]])" returns="array" doc="Get asynchronous notification" ilk="function" src="pgsql.c"/>
      <scope name="pg_get_pid" signature="pg_get_pid([resource connection)" returns="int" doc="Get backend server pid" ilk="function" src="pgsql.c"/>
      <scope name="pg_meta_data" signature="pg_meta_data(resource db, string table)" returns="array" doc="Get meta data" ilk="function" src="pgsql.c"/>
      <scope name="pg_convert" signature="pg_convert(resource db, string table, array values[, int options])" returns="array" doc="Check and convert values for PostgreSQL SQL statement" ilk="function" src="pgsql.c"/>
      <scope name="pg_insert" signature="pg_insert(resource db, string table, array values[, int options])" returns="mixed" doc="Insert values filed value to table" ilk="function" src="pgsql.c"/>
      <scope name="pg_update" signature="pg_update(resource db, string table, array fields, array ids[, int options])" returns="mixed" doc="Update table using values field value and ids id value" ilk="function" src="pgsql.c"/>
      <scope name="pg_delete" signature="pg_delete(resource db, string table, array ids[, int options])" returns="mixed" doc="Delete records has ids id value" ilk="function" src="pgsql.c"/>
      <scope name="pg_select" signature="pg_select(resource db, string table, array ids[, int options])" returns="mixed" doc="Select records that has ids id value" ilk="function" src="pgsql.c"/>
      <scope name="iterator_to_array" signature="iterator_to_array(Traversable it [, bool use_keys = true])" returns="array" doc="Copy the iterator into an array" ilk="function" src="spl_iterators.c"/>
      <scope name="iterator_count" signature="iterator_count(Traversable it)" returns="int" doc="Count the elements in an iterator" ilk="function" src="spl_iterators.c"/>
      <scope name="iterator_apply" signature="iterator_apply(Traversable it, mixed function [, mixed params])" returns="int" doc="Calls a function for every element in an iterator" ilk="function" src="spl_iterators.c"/>
      <scope name="class_parents" signature="class_parents(object instance [, boolean autoload = true])" returns="array" doc="Return an array containing the names of all parent&#10;classes" ilk="function" src="php_spl.c"/>
      <scope name="class_implements" signature="class_implements(mixed what [, bool autoload ])" returns="array" doc="Return all classes and interfaces implemented by SPL" ilk="function" src="php_spl.c"/>
      <scope name="spl_classes" signature="spl_classes()" returns="array" doc="Return an array containing the names of all clsses and&#10;interfaces defined in SPL" ilk="function" src="php_spl.c"/>
      <scope name="spl_autoload" signature="spl_autoload(string class_name [, string file_extensions])" returns="void" doc="Default implementation for autoload" ilk="function" src="php_spl.c"/>
      <scope name="spl_autoload_extensions" signature="spl_autoload_extensions([string file_extensions])" returns="string" doc="Register and return default file extensions for spl&#10;autoload" ilk="function" src="php_spl.c"/>
      <scope name="spl_autoload_call" signature="spl_autoload_call(string class_name)" returns="void" doc="Try all registerd autoload function to load the&#10;requested class" ilk="function" src="php_spl.c"/>
      <scope name="spl_autoload_register" signature="spl_autoload_register([mixed autoload_function = &quot;spl_autoload&quot; [, throw = true [, prepend]]])" returns="bool" doc="Register given function as autoload implementation" ilk="function" src="php_spl.c"/>
      <scope name="spl_autoload_unregister" signature="spl_autoload_unregister(mixed autoload_function)" returns="bool" doc="Unregister given function as autoload implementation" ilk="function" src="php_spl.c"/>
      <scope name="spl_object_hash" signature="spl_object_hash(object obj)" returns="string" doc="Return hash id for given object" ilk="function" src="php_spl.c"/>
      <scope name="attachIterator" signature="attachIterator(Iterator iterator[, mixed info])" returns="void" doc="throws InvalidArgumentException Attach a new iterator" ilk="function" src="spl_observer.c"/>
      <scope name="recode_string" signature="recode_string(string request, string str)" returns="string" doc="Recode string str according to request string" ilk="function" src="recode.c"/>
      <scope name="recode_file" signature="recode_file(string request, resource input, resource output)" returns="bool" doc="Recode file input into file output according to request" ilk="function" src="recode.c"/>
      <scope name="ob_start" signature="ob_start([ string" returns="bool" doc="Turn on Output Buffering specifying an optional output&#10;handler" ilk="function" src="output.c"/>
      <scope name="ob_flush" signature="ob_flush(void)" returns="bool" doc="Flush send contents of the output buffer The last&#10;buffer content is sent to next buffer" ilk="function" src="output.c"/>
      <scope name="ob_clean" signature="ob_clean(void)" returns="bool" doc="Clean delete the current output buffer" ilk="function" src="output.c"/>
      <scope name="ob_end_flush" signature="ob_end_flush(void)" returns="bool" doc="Flush send the output buffer and delete current output&#10;buffer" ilk="function" src="output.c"/>
      <scope name="ob_end_clean" signature="ob_end_clean(void)" returns="bool" doc="Clean the output buffer and delete current output&#10;buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_flush" signature="ob_get_flush(void)" returns="bool" doc="Get current buffer contents flush send the output&#10;buffer and delete current output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_clean" signature="ob_get_clean(void)" returns="bool" doc="Get current buffer contents and delete current output&#10;buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_contents" signature="ob_get_contents(void)" returns="string" doc="Return the contents of the output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_level" signature="ob_get_level(void)" returns="int" doc="Return the nesting level of the output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_length" signature="ob_get_length(void)" returns="int" doc="Return the length of the output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_status" signature="ob_get_status([bool full_status])" returns="array" doc="Return the status of the active or all output buffers" ilk="function" src="output.c"/>
      <scope name="ob_implicit_flush" signature="ob_implicit_flush([int flag])" returns="void" doc="Turn implicit flush on off and is equivalent to calling&#10;flush after every output call" ilk="function" src="output.c"/>
      <scope name="output_reset_rewrite_vars" signature="output_reset_rewrite_vars(void)" returns="bool" doc="Reset clear URL rewriter values" ilk="function" src="output.c"/>
      <scope name="output_add_rewrite_var" signature="output_add_rewrite_var(string name, string value)" returns="bool" doc="Add URL rewriter values" ilk="function" src="output.c"/>
      <scope name="stream_wrapper_register" signature="stream_wrapper_register(string protocol, string classname[, integer flags])" returns="bool" doc="Registers a custom URL protocol handler class" ilk="function" src="userspace.c"/>
      <scope name="stream_wrapper_unregister" signature="stream_wrapper_unregister(string protocol)" returns="bool" doc="Unregister a wrapper for the life of the current&#10;request" ilk="function" src="userspace.c"/>
      <scope name="stream_wrapper_restore" signature="stream_wrapper_restore(string protocol)" returns="bool" doc="Restore the original protocol handler overriding if&#10;necessary" ilk="function" src="userspace.c"/>
      <scope name="set_time_limit" signature="set_time_limit(int seconds)" returns="bool" doc="Sets the maximum time a script can run" ilk="function" src="main.c"/>
      <scope name="virtual" signature="virtual(string uri)" returns="bool" doc="Perform an apache sub-request" ilk="function" src="php_functions.c"/>
      <scope name="getallheaders" signature="getallheaders(void)" returns="array" doc="Fetch all HTTP request headers" ilk="function" src="php_functions.c"/>
      <scope name="apache_response_headers" signature="apache_response_headers(void)" returns="array" doc="Fetch all HTTP response headers" ilk="function" src="php_functions.c"/>
      <scope name="apache_note" signature="apache_note(string note_name [, string note_value])" returns="string" doc="Get and set Apache request notes" ilk="function" src="php_functions.c"/>
      <scope name="apache_setenv" signature="apache_setenv(string variable, string value [, bool walk_to_top])" returns="bool" doc="Set an Apache subprocess env variable" ilk="function" src="php_functions.c"/>
      <scope name="apache_getenv" signature="apache_getenv(string variable [, bool walk_to_top])" returns="bool" doc="Get an Apache subprocess env variable" ilk="function" src="php_functions.c"/>
      <scope name="apache_get_version" signature="apache_get_version(void)" returns="string" doc="Fetch Apache version" ilk="function" src="php_functions.c"/>
      <scope name="apache_get_modules" signature="apache_get_modules(void)" returns="array" doc="Get a list of loaded Apache modules" ilk="function" src="php_functions.c"/>
      <scope name="apache_child_terminate" signature="apache_child_terminate(void)" returns="bool" doc="Terminate apache process after this request" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_headers" signature="apache_request_headers(void)" returns="array" doc="Fetch all HTTP request headers" ilk="function" src="php_apache.c"/>
      <scope name="apache_lookup_uri" signature="apache_lookup_uri(string URI)" returns="object" doc="Perform a partial request of the given URI to obtain&#10;information about it" ilk="function" src="php_apache.c"/>
      <scope name="apache_reset_timeout" signature="apache_reset_timeout(void)" returns="bool" doc="Reset the Apache write timer" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_headers_in" signature="apache_request_headers_in()" returns="array" doc="fetch all incoming request headers" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_headers_out" signature="apache_request_headers_out([{string name" returns="array" doc="fetch all outgoing request headers" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_err_headers_out" signature="apache_request_err_headers_out([{string name" returns="array" doc="fetch all headers that go out in case of an error or a&#10;subrequest" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_server_port" signature="apache_request_server_port()" returns="int" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_remote_host" signature="apache_request_remote_host([int type])" returns="int" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_update_mtime" signature="apache_request_update_mtime([int dependency_mtime])" returns="long" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_set_etag" signature="apache_request_set_etag()" returns="void" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_set_last_modified" signature="apache_request_set_last_modified()" returns="void" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_meets_conditions" signature="apache_request_meets_conditions()" returns="long" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_discard_request_body" signature="apache_request_discard_request_body()" returns="long" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_satisfies" signature="apache_request_satisfies()" returns="long" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_is_initial_req" signature="apache_request_is_initial_req()" returns="bool" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_some_auth_required" signature="apache_request_some_auth_required()" returns="bool" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_auth_type" signature="apache_request_auth_type()" returns="string" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_auth_name" signature="apache_request_auth_name()" returns="string" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_log_error" signature="apache_request_log_error(string message, [long facility])" returns="boolean" doc="" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_sub_req_lookup_uri" signature="apache_request_sub_req_lookup_uri(string uri)" returns="object" doc="Returns sub-request for the specified uri You would&#10;need to run it yourself with run" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_sub_req_lookup_file" signature="apache_request_sub_req_lookup_file(string file)" returns="object" doc="Returns sub-request for the specified file You would&#10;need to run it yourself with run" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_sub_req_method_uri" signature="apache_request_sub_req_method_uri(string method, string uri)" returns="object" doc="Returns sub-request for the specified file You would&#10;need to run it yourself with run" ilk="function" src="php_apache.c"/>
      <scope name="apache_request_run" signature="apache_request_run()" returns="long" doc="This is a wrapper for ap sub run req and ap destory sub&#10;req It takes sub request runs it" ilk="function" src="php_apache.c"/>
      <scope name="nsapi_virtual" signature="nsapi_virtual(string uri)" returns="bool" doc="Perform an NSAPI sub-request" ilk="function" src="nsapi.c"/>
      <scope name="nsapi_request_headers" signature="nsapi_request_headers(void)" returns="array" doc="Get all headers from the request" ilk="function" src="nsapi.c"/>
      <scope name="nsapi_response_headers" signature="nsapi_response_headers(void)" returns="array" doc="Get all headers from the response" ilk="function" src="nsapi.c"/>
      <scope name="litespeed_request_headers" signature="litespeed_request_headers(void)" returns="array" doc="Fetch all HTTP request headers" ilk="function" src="lsapi_main.c"/>
      <scope name="litespeed_response_headers" signature="litespeed_response_headers(void)" returns="array" doc="Fetch all HTTP response headers" ilk="function" src="lsapi_main.c"/>
      <scope name="smfi_setflags" signature="smfi_setflags(long flags)" returns="void" doc="Sets the flags describing the actions the filter may&#10;take" ilk="function" src="php_milter.c"/>
      <scope name="smfi_settimeout" signature="smfi_settimeout(long timeout)" returns="void" doc="Sets the number of seconds libmilter will wait for an&#10;MTA connection before timing out a socket" ilk="function" src="php_milter.c"/>
      <scope name="smfi_getsymval" signature="smfi_getsymval(string macro)" returns="string" doc="Returns the value of the given macro or NULL if the&#10;macro is not defined" ilk="function" src="php_milter.c"/>
      <scope name="smfi_setreply" signature="smfi_setreply(string rcode, string xcode, string message)" returns="bool" doc="Directly set the SMTP error reply code for this&#10;connection This code will be used on subsequent error&#10;replies resulting" ilk="function" src="php_milter.c"/>
      <scope name="smfi_addheader" signature="smfi_addheader(string headerf, string headerv)" returns="bool" doc="Adds a header to the current message" ilk="function" src="php_milter.c"/>
      <scope name="smfi_chgheader" signature="smfi_chgheader(string headerf, string headerv)" returns="bool" doc="Changes a header's value for the current message" ilk="function" src="php_milter.c"/>
      <scope name="smfi_addrcpt" signature="smfi_addrcpt(string rcpt)" returns="bool" doc="Add a recipient to the message envelope" ilk="function" src="php_milter.c"/>
      <scope name="smfi_delrcpt" signature="smfi_delrcpt(string rcpt)" returns="bool" doc="Removes the named recipient from the current message's&#10;envelope" ilk="function" src="php_milter.c"/>
      <scope name="smfi_replacebody" signature="smfi_replacebody(string body)" returns="bool" doc="Replaces the body of the current message If called more&#10;than once subsequent calls result in data being&#10;appended to" ilk="function" src="php_milter.c"/>
      <scope name="get_required_files" signature="get_required_files(void)" doc="Returns an array with the file names that were include&#10;once 'd&amp;#xa;get_required_files is an alias to get_included_files" ilk="function" returns="array"/>
      <scope name="user_error" signature="user_error(string messsage [, int error_type])" doc="Generates a user-level error warning notice message&amp;#xa;user_error is an alias to trigger_error" ilk="function" returns="void"/>
      <scope name="posix_errno" signature="posix_errno(void)" doc="Retrieve the error number set by the last posix&#10;function which failed&amp;#xa;posix_errno is an alias to posix_get_last_error" ilk="function" returns="int"/>
      <scope name="session_commit" signature="session_commit(void)" doc="Write session data and end session&amp;#xa;session_commit is an alias to session_write_close" ilk="function" returns="void"/>
      <scope name="sqlite_fetch_string" signature="sqlite_fetch_string(resource result [, bool decode_binary])" doc="Fetches the first column of a result set as a string&amp;#xa;sqlite_fetch_string is an alias to sqlite_fetch_single" ilk="function" returns="string"/>
      <scope name="sqlite_has_more" signature="sqlite_has_more(resource result)" doc="Returns whether more rows are available&amp;#xa;sqlite_has_more is an alias to sqlite_valid" ilk="function" returns="bool"/>
      <scope name="chop" signature="chop(string str [, string character_mask])" doc="Removes trailing whitespace&amp;#xa;chop is an alias to rtrim" ilk="function" returns="string"/>
      <scope name="magic_quotes_runtime" signature="magic_quotes_runtime(int new_setting)" doc="Set the current active configuration setting of magic&#10;quotes runtime and return previous&amp;#xa;magic_quotes_runtime is an alias to set_magic_quotes_runtime" ilk="function" returns="bool"/>
      <scope name="show_source" signature="show_source(string file_name [, bool return] )" doc="Syntax highlight a source file&amp;#xa;show_source is an alias to highlight_file" ilk="function" returns="bool"/>
      <scope name="ini_alter" signature="ini_alter(string varname, string newvalue)" doc="Set a configuration option returns false on error and&#10;the old value of the configuration option on success&amp;#xa;ini_alter is an alias to ini_set" ilk="function" returns="string"/>
      <scope name="checkdnsrr" signature="checkdnsrr(string host [, string type])" doc="Check DNS records corresponding to a given Internet&#10;host name or IP address&amp;#xa;checkdnsrr is an alias to dns_check_record" ilk="function" returns="bool"/>
      <scope name="getmxrr" signature="getmxrr(string hostname, array mxhosts [, array weight])" doc="Get MX records corresponding to a given Internet host&#10;name&amp;#xa;getmxrr is an alias to dns_get_mx" ilk="function" returns="bool"/>
      <scope name="doubleval" signature="doubleval(mixed var)" doc="Get the float value of a variable&amp;#xa;doubleval is an alias to floatval" ilk="function" returns="float"/>
      <scope name="is_int" signature="is_int(mixed var)" doc="Returns true if variable is a long integer&amp;#xa;is_int is an alias to is_long" ilk="function" returns="bool"/>
      <scope name="is_integer" signature="is_integer(mixed var)" doc="Returns true if variable is a long integer&amp;#xa;is_integer is an alias to is_long" ilk="function" returns="bool"/>
      <scope name="is_double" signature="is_double(mixed var)" doc="Returns true if variable is float point&amp;#xa;is_double is an alias to is_float" ilk="function" returns="bool"/>
      <scope name="is_real" signature="is_real(mixed var)" doc="Returns true if variable is float point&amp;#xa;is_real is an alias to is_float" ilk="function" returns="bool"/>
      <scope name="fputs" signature="fputs(resource fp, string str [, int length])" doc="Binary-safe file write&amp;#xa;fputs is an alias to fwrite" ilk="function" returns="int"/>
      <scope name="set_file_buffer" signature="set_file_buffer(resource fp, int buffer)" doc="Set file write buffer&amp;#xa;set_file_buffer is an alias to stream_set_write_buffer" ilk="function" returns="int"/>
      <scope name="set_socket_blocking" signature="set_socket_blocking(resource socket, int mode)" doc="Set blocking non-blocking mode on a socket or stream&amp;#xa;set_socket_blocking is an alias to stream_set_blocking" ilk="function" returns="bool"/>
      <scope name="socket_set_blocking" signature="socket_set_blocking(resource socket, int mode)" doc="Set blocking non-blocking mode on a socket or stream&amp;#xa;socket_set_blocking is an alias to stream_set_blocking" ilk="function" returns="bool"/>
      <scope name="stream_register_wrapper" signature="stream_register_wrapper(string protocol, string classname[, integer flags])" doc="Registers a custom URL protocol handler class&amp;#xa;stream_register_wrapper is an alias to stream_wrapper_register" ilk="function" returns="bool"/>
      <scope name="socket_set_timeout" signature="socket_set_timeout(resource stream, int seconds [, int microseconds])" doc="Set timeout on stream read to seconds microseonds&amp;#xa;socket_set_timeout is an alias to stream_set_timeout" ilk="function" returns="bool"/>
      <scope name="socket_get_status" signature="socket_get_status(resource fp)" doc="Retrieves header meta data from streams file pointers&amp;#xa;socket_get_status is an alias to stream_get_meta_data" ilk="function" returns="array"/>
      <scope name="is_writeable" signature="is_writeable(string filename)" doc="Returns true if file can be written&amp;#xa;is_writeable is an alias to is_writable" ilk="function" returns="bool"/>
      <scope name="diskfreespace" signature="diskfreespace(string path)" doc="Get free disk space for filesystem that path is on&amp;#xa;diskfreespace is an alias to disk_free_space" ilk="function" returns="float"/>
      <scope name="pos" signature="pos()" doc="throws RuntimeException throws InvalidArgumentException&#10;Return an array of all registered Iterator instances&#10;current result&amp;#xa;pos is an alias to current" ilk="function" returns="array"/>
      <scope name="sizeof" signature="sizeof(mixed var [, int mode])" doc="Count the number of elements in a variable usually an&#10;array&amp;#xa;sizeof is an alias to count" ilk="function" returns="int"/>
      <scope name="key_exists" signature="key_exists(mixed key, array search)" doc="Checks if the given key or index exists in the array&amp;#xa;key_exists is an alias to array_key_exists" ilk="function" returns="bool"/>
      <scope name="mysql" signature="mysql(string database_name, string query [, int link_identifier])" doc="Sends an SQL query to MySQL&amp;#xa;mysql is an alias to mysql_db_query" ilk="function" returns="resource"/>
      <scope name="mysql_fieldname" signature="mysql_fieldname(resource result, int field_index)" doc="Gets the name of the specified field in a result&amp;#xa;mysql_fieldname is an alias to mysql_field_name" ilk="function" returns="string"/>
      <scope name="mysql_fieldtable" signature="mysql_fieldtable(resource result, int field_offset)" doc="Gets name of the table the specified field is in&amp;#xa;mysql_fieldtable is an alias to mysql_field_table" ilk="function" returns="string"/>
      <scope name="mysql_fieldlen" signature="mysql_fieldlen(resource result, int field_offset)" doc="Returns the length of the specified field&amp;#xa;mysql_fieldlen is an alias to mysql_field_len" ilk="function" returns="int"/>
      <scope name="mysql_fieldtype" signature="mysql_fieldtype(resource result, int field_offset)" doc="Gets the type of the specified field in a result&amp;#xa;mysql_fieldtype is an alias to mysql_field_type" ilk="function" returns="string"/>
      <scope name="mysql_fieldflags" signature="mysql_fieldflags(resource result, int field_offset)" doc="Gets the flags associated with the specified field in a&#10;result&amp;#xa;mysql_fieldflags is an alias to mysql_field_flags" ilk="function" returns="string"/>
      <scope name="mysql_selectdb" signature="mysql_selectdb(string database_name [, int link_identifier])" doc="Selects a MySQL database&amp;#xa;mysql_selectdb is an alias to mysql_select_db" ilk="function" returns="bool"/>
      <scope name="mysql_createdb" signature="mysql_createdb(string database_name [, int link_identifier])" doc="Create a MySQL database&amp;#xa;mysql_createdb is an alias to mysql_create_db" ilk="function" returns="bool"/>
      <scope name="mysql_dropdb" signature="mysql_dropdb(string database_name [, int link_identifier])" doc="Drops delete a MySQL database&amp;#xa;mysql_dropdb is an alias to mysql_drop_db" ilk="function" returns="bool"/>
      <scope name="mysql_freeresult" signature="mysql_freeresult(resource result)" doc="Free result memory&amp;#xa;mysql_freeresult is an alias to mysql_free_result" ilk="function" returns="bool"/>
      <scope name="mysql_numfields" signature="mysql_numfields(resource result)" doc="Gets number of fields in a result&amp;#xa;mysql_numfields is an alias to mysql_num_fields" ilk="function" returns="int"/>
      <scope name="mysql_numrows" signature="mysql_numrows(resource result)" doc="Gets number of rows in a result&amp;#xa;mysql_numrows is an alias to mysql_num_rows" ilk="function" returns="int"/>
      <scope name="mysql_listdbs" signature="mysql_listdbs([int link_identifier])" doc="List databases available on a MySQL server&amp;#xa;mysql_listdbs is an alias to mysql_list_dbs" ilk="function" returns="resource"/>
      <scope name="mysql_listtables" signature="mysql_listtables(string database_name [, int link_identifier])" doc="List tables in a MySQL database&amp;#xa;mysql_listtables is an alias to mysql_list_tables" ilk="function" returns="resource"/>
      <scope name="mysql_listfields" signature="mysql_listfields(string database_name, string table_name [, int link_identifier])" doc="List MySQL result fields&amp;#xa;mysql_listfields is an alias to mysql_list_fields" ilk="function" returns="resource"/>
      <scope name="mysql_db_name" signature="mysql_db_name(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_db_name is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="mysql_dbname" signature="mysql_dbname(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_dbname is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="mysql_tablename" signature="mysql_tablename(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_tablename is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="mysql_table_name" signature="mysql_table_name(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_table_name is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="filter_list" signature="filter_list()" ilk="function"/>
      <scope name="filter_id" signature="filter_id( filtername )" ilk="function"/>
      <scope name="mysqli_execute" signature="mysqli_execute()" ilk="function"/>
      <scope name="mysqli_fetch_field" signature="mysqli_fetch_field()" ilk="function"/>
      <scope name="mysqli_fetch_fields" signature="mysqli_fetch_fields()" ilk="function"/>
      <scope name="mysqli_fetch_field_direct" signature="mysqli_fetch_field_direct()" ilk="function"/>
      <scope name="mysqli_fetch_lengths" signature="mysqli_fetch_lengths()" ilk="function"/>
      <scope name="mysqli_fetch_array" signature="mysqli_fetch_array()" ilk="function"/>
      <scope name="mysqli_fetch_assoc" signature="mysqli_fetch_assoc()" ilk="function"/>
      <scope name="mysqli_fetch_object" signature="mysqli_fetch_object()" ilk="function"/>
      <scope name="mysqli_fetch_row" signature="mysqli_fetch_row()" ilk="function"/>
      <scope name="mysqli_get_host_info" signature="mysqli_get_host_info()" ilk="function"/>
      <scope name="mysqli_warning_count" signature="mysqli_warning_count()" ilk="function"/>
      <scope name="mysqli_bind_param" signature="mysqli_bind_param()" ilk="function"/>
      <scope name="mysqli_bind_result" signature="mysqli_bind_result()" ilk="function"/>
      <scope name="mysqli_client_encoding" signature="mysqli_client_encoding()" ilk="function"/>
      <scope name="mysqli_escape_string" signature="mysqli_escape_string()" ilk="function"/>
      <scope name="mysqli_fetch" signature="mysqli_fetch()" ilk="function"/>
      <scope name="mysqli_param_count" signature="mysqli_param_count()" ilk="function"/>
      <scope name="mysqli_get_metadata" signature="mysqli_get_metadata()" ilk="function"/>
      <scope name="mysqli_send_long_data" signature="mysqli_send_long_data()" ilk="function"/>
      <scope name="mysqli_set_opt" signature="mysqli_set_opt()" ilk="function"/>
      <scope name="pg_exec" signature="pg_exec( [ connection ], [ query ] )" ilk="function"/>
      <scope name="pg_getlastoid" signature="pg_getlastoid( result )" ilk="function"/>
      <scope name="pg_cmdtuples" signature="pg_cmdtuples( result )" ilk="function"/>
      <scope name="pg_errormessage" signature="pg_errormessage( [ connection ] )" ilk="function"/>
      <scope name="pg_numrows" signature="pg_numrows( result )" ilk="function"/>
      <scope name="pg_numfields" signature="pg_numfields( result )" ilk="function"/>
      <scope name="pg_fieldname" signature="pg_fieldname( result, field_number )" ilk="function"/>
      <scope name="pg_fieldsize" signature="pg_fieldsize( result, field_number )" ilk="function"/>
      <scope name="pg_fieldtype" signature="pg_fieldtype( result, field_number )" ilk="function"/>
      <scope name="pg_fieldnum" signature="pg_fieldnum( result, field_name )" ilk="function"/>
      <scope name="pg_fieldprtlen" signature="pg_fieldprtlen( result, [ row ], [ field_name_or_number ] )" ilk="function"/>
      <scope name="pg_fieldisnull" signature="pg_fieldisnull( result, [ row ], [ field_name_or_number ] )" ilk="function"/>
      <scope name="pg_freeresult" signature="pg_freeresult( result )" ilk="function"/>
      <scope name="pg_result" signature="pg_result( connection )" ilk="function"/>
      <scope name="pg_loreadall" signature="pg_loreadall( large_object )" ilk="function"/>
      <scope name="pg_locreate" signature="pg_locreate( [ connection ], [ large_object_id ] )" ilk="function"/>
      <scope name="pg_lounlink" signature="pg_lounlink( [ connection ], [ large_object_oid ] )" ilk="function"/>
      <scope name="pg_loopen" signature="pg_loopen( [ connection ], [ large_object_oid ], [ mode ] )" ilk="function"/>
      <scope name="pg_loclose" signature="pg_loclose( large_object )" ilk="function"/>
      <scope name="pg_loread" signature="pg_loread( large_object, [ len ] )" ilk="function"/>
      <scope name="pg_lowrite" signature="pg_lowrite( large_object, buf, [ len ] )" ilk="function"/>
      <scope name="pg_loimport" signature="pg_loimport( [ connection ], [ filename ], [ large_object_oid ] )" ilk="function"/>
      <scope name="pg_loexport" signature="pg_loexport( [ connection ], [ objoid ], [ filename ] )" ilk="function"/>
      <scope name="pg_clientencoding" signature="pg_clientencoding( [ connection ] )" ilk="function"/>
      <scope name="pg_setclientencoding" signature="pg_setclientencoding( [ connection ], [ encoding ] )" ilk="function"/>
      <scope name="spl_autoload_functions" signature="spl_autoload_functions()" ilk="function"/>
      <scope name="forward_static_call_array" signature="forward_static_call_array( function_name, parameters )" ilk="function"/>
      <scope name="ob_list_handlers" signature="ob_list_handlers()" ilk="function"/>
      <variable name="_COOKIE" citdl="array"/>
      <variable name="_ENV" citdl="array"/>
      <variable name="_FILES" citdl="array"/>
      <variable name="_GET" citdl="array"/>
      <variable name="_POST" citdl="array"/>
      <variable name="_REQUEST" citdl="array"/>
      <variable name="_SESSION" citdl="array"/>
      <variable name="HTTP_COOKIE_VARS" citdl="array"/>
      <variable name="HTTP_ENV_VARS" citdl="array"/>
      <variable name="HTTP_GET_VARS" citdl="array"/>
      <variable name="HTTP_POST_FILES" citdl="array"/>
      <variable name="HTTP_POST_VARS" citdl="array"/>
      <variable name="HTTP_SERVER_VARS" citdl="array"/>
      <variable name="HTTP_SESSION_VARS" citdl="array"/>
      <variable name="GLOBALS" citdl="array"/>
      <variable name="__LINE__" citdl="string" ilk="constant"/>
      <variable name="__FILE__" citdl="string" ilk="constant"/>
      <variable name="__FUNCTION__" citdl="string" ilk="constant"/>
      <variable name="__CLASS__" citdl="string" ilk="constant"/>
      <variable name="__METHOD__" citdl="string" ilk="constant"/>
      <variable name="_SERVER" citdl="array">
        <variable name="HTTP_HOST" citdl="string"/>
        <variable name="HTTP_USER_AGENT" citdl="string"/>
        <variable name="HTTP_ACCEPT" citdl="string"/>
        <variable name="HTTP_ACCEPT_LANGUAGE" citdl="string"/>
        <variable name="HTTP_ACCEPT_ENCODING" citdl="string"/>
        <variable name="HTTP_ACCEPT_CHARSET" citdl="string"/>
        <variable name="HTTP_KEEP_ALIVE" citdl="string"/>
        <variable name="HTTP_CONNECTION" citdl="string"/>
        <variable name="HTTP_COOKIE" citdl="string"/>
        <variable name="HTTP_CACHE_CONTROL" citdl="string"/>
        <variable name="PATH" citdl="string"/>
        <variable name="SERVER_SIGNATURE" citdl="string"/>
        <variable name="SERVER_SOFTWARE" citdl="string"/>
        <variable name="SERVER_NAME" citdl="string"/>
        <variable name="SERVER_ADDR" citdl="string"/>
        <variable name="SERVER_PORT" citdl="string"/>
        <variable name="REMOTE_ADDR" citdl="string"/>
        <variable name="DOCUMENT_ROOT" citdl="string"/>
        <variable name="SERVER_ADMIN" citdl="string"/>
        <variable name="SCRIPT_FILENAME" citdl="string"/>
        <variable name="REMOTE_PORT" citdl="string"/>
        <variable name="GATEWAY_INTERFACE" citdl="string"/>
        <variable name="SERVER_PROTOCOL" citdl="string"/>
        <variable name="REQUEST_METHOD" citdl="string"/>
        <variable name="QUERY_STRING" citdl="string"/>
        <variable name="REQUEST_URI" citdl="string"/>
        <variable name="SCRIPT_NAME" citdl="string"/>
        <variable name="PHP_SELF" citdl="string"/>
        <variable name="REQUEST_TIME" citdl="string"/>
        <variable name="argv" citdl="string"/>
        <variable name="argc" citdl="string"/>
      </variable>
      <variable name="E_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_RECOVERABLE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_PARSE" citdl="integer" ilk="constant"/>
      <variable name="E_NOTICE" citdl="integer" ilk="constant"/>
      <variable name="E_STRICT" citdl="integer" ilk="constant"/>
      <variable name="E_DEPRECATED" citdl="integer" ilk="constant"/>
      <variable name="E_CORE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_CORE_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_COMPILE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_COMPILE_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_USER_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_USER_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_USER_NOTICE" citdl="integer" ilk="constant"/>
      <variable name="E_USER_DEPRECATED" citdl="integer" ilk="constant"/>
      <variable name="E_ALL" citdl="integer" ilk="constant"/>
      <variable name="TRUE" citdl="boolean" ilk="constant"/>
      <variable name="FALSE" citdl="boolean" ilk="constant"/>
      <variable name="NULL" citdl="NULL" ilk="constant"/>
      <variable name="ZEND_THREAD_SAFE" citdl="boolean" ilk="constant"/>
      <variable name="ZEND_DEBUG_BUILD" citdl="boolean" ilk="constant"/>
      <variable name="PHP_VERSION" citdl="string" ilk="constant"/>
      <variable name="PHP_MAJOR_VERSION" citdl="integer" ilk="constant"/>
      <variable name="PHP_MINOR_VERSION" citdl="integer" ilk="constant"/>
      <variable name="PHP_RELEASE_VERSION" citdl="integer" ilk="constant"/>
      <variable name="PHP_EXTRA_VERSION" citdl="string" ilk="constant"/>
      <variable name="PHP_VERSION_ID" citdl="integer" ilk="constant"/>
      <variable name="PHP_ZTS" citdl="integer" ilk="constant"/>
      <variable name="PHP_DEBUG" citdl="integer" ilk="constant"/>
      <variable name="PHP_OS" citdl="string" ilk="constant"/>
      <variable name="PHP_SAPI" citdl="string" ilk="constant"/>
      <variable name="DEFAULT_INCLUDE_PATH" citdl="string" ilk="constant"/>
      <variable name="PEAR_INSTALL_DIR" citdl="string" ilk="constant"/>
      <variable name="PEAR_EXTENSION_DIR" citdl="string" ilk="constant"/>
      <variable name="PHP_EXTENSION_DIR" citdl="string" ilk="constant"/>
      <variable name="PHP_PREFIX" citdl="string" ilk="constant"/>
      <variable name="PHP_BINDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_LIBDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_DATADIR" citdl="string" ilk="constant"/>
      <variable name="PHP_SYSCONFDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_LOCALSTATEDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_CONFIG_FILE_PATH" citdl="string" ilk="constant"/>
      <variable name="PHP_CONFIG_FILE_SCAN_DIR" citdl="string" ilk="constant"/>
      <variable name="PHP_SHLIB_SUFFIX" citdl="string" ilk="constant"/>
      <variable name="PHP_EOL" citdl="string" ilk="constant"/>
      <variable name="PHP_MAXPATHLEN" citdl="integer" ilk="constant"/>
      <variable name="PHP_INT_MAX" citdl="integer" ilk="constant"/>
      <variable name="PHP_INT_SIZE" citdl="integer" ilk="constant"/>
      <variable name="PHP_OUTPUT_HANDLER_START" citdl="integer" ilk="constant"/>
      <variable name="PHP_OUTPUT_HANDLER_CONT" citdl="integer" ilk="constant"/>
      <variable name="PHP_OUTPUT_HANDLER_END" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_OK" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_INI_SIZE" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_FORM_SIZE" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_PARTIAL" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_NO_FILE" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_NO_TMP_DIR" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_CANT_WRITE" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_EXTENSION" citdl="integer" ilk="constant"/>
      <variable name="DATE_ATOM" citdl="string" ilk="constant"/>
      <variable name="DATE_COOKIE" citdl="string" ilk="constant"/>
      <variable name="DATE_ISO8601" citdl="string" ilk="constant"/>
      <variable name="DATE_RFC822" citdl="string" ilk="constant"/>
      <variable name="DATE_RFC850" citdl="string" ilk="constant"/>
      <variable name="DATE_RFC1036" citdl="string" ilk="constant"/>
      <variable name="DATE_RFC1123" citdl="string" ilk="constant"/>
      <variable name="DATE_RFC2822" citdl="string" ilk="constant"/>
      <variable name="DATE_RFC3339" citdl="string" ilk="constant"/>
      <variable name="DATE_RSS" citdl="string" ilk="constant"/>
      <variable name="DATE_W3C" citdl="string" ilk="constant"/>
      <variable name="SUNFUNCS_RET_TIMESTAMP" citdl="integer" ilk="constant"/>
      <variable name="SUNFUNCS_RET_STRING" citdl="integer" ilk="constant"/>
      <variable name="SUNFUNCS_RET_DOUBLE" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_VERSION" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_DOTTED_VERSION" citdl="string" ilk="constant"/>
      <variable name="LIBXML_LOADED_VERSION" citdl="string" ilk="constant"/>
      <variable name="LIBXML_NOENT" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_DTDLOAD" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_DTDATTR" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_DTDVALID" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NOERROR" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NOWARNING" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NOBLANKS" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_XINCLUDE" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NSCLEAN" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NOCDATA" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NONET" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_COMPACT" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NOXMLDECL" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_NOEMPTYTAG" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_ERR_NONE" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_ERR_WARNING" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_ERR_ERROR" citdl="integer" ilk="constant"/>
      <variable name="LIBXML_ERR_FATAL" citdl="integer" ilk="constant"/>
      <variable name="PREG_PATTERN_ORDER" citdl="integer" ilk="constant"/>
      <variable name="PREG_SET_ORDER" citdl="integer" ilk="constant"/>
      <variable name="PREG_OFFSET_CAPTURE" citdl="integer" ilk="constant"/>
      <variable name="PREG_SPLIT_NO_EMPTY" citdl="integer" ilk="constant"/>
      <variable name="PREG_SPLIT_DELIM_CAPTURE" citdl="integer" ilk="constant"/>
      <variable name="PREG_SPLIT_OFFSET_CAPTURE" citdl="integer" ilk="constant"/>
      <variable name="PREG_GREP_INVERT" citdl="integer" ilk="constant"/>
      <variable name="PREG_NO_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PREG_INTERNAL_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PREG_BACKTRACK_LIMIT_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PREG_RECURSION_LIMIT_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PREG_BAD_UTF8_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PREG_BAD_UTF8_OFFSET_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PCRE_VERSION" citdl="string" ilk="constant"/>
      <variable name="SQLITE3_ASSOC" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_NUM" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_BOTH" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_INTEGER" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_FLOAT" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_TEXT" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_BLOB" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_NULL" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_OPEN_READONLY" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_OPEN_READWRITE" citdl="integer" ilk="constant"/>
      <variable name="SQLITE3_OPEN_CREATE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_IPRESOLVE" citdl="integer" ilk="constant"/>
      <variable name="CURL_IPRESOLVE_WHATEVER" citdl="integer" ilk="constant"/>
      <variable name="CURL_IPRESOLVE_V4" citdl="integer" ilk="constant"/>
      <variable name="CURL_IPRESOLVE_V6" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_DNS_USE_GLOBAL_CACHE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_DNS_CACHE_TIMEOUT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PORT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FILE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_READDATA" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_INFILE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_INFILESIZE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_URL" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PROXY" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_VERBOSE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HEADER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HTTPHEADER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_NOPROGRESS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PROGRESSFUNCTION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_NOBODY" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FAILONERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_UPLOAD" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_POST" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTPLISTONLY" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTPAPPEND" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_NETRC" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FOLLOWLOCATION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PUT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_USERPWD" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PROXYUSERPWD" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_RANGE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_TIMEOUT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_TIMEOUT_MS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_POSTFIELDS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_REFERER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_USERAGENT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTPPORT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTP_USE_EPSV" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_LOW_SPEED_LIMIT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_LOW_SPEED_TIME" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_RESUME_FROM" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_COOKIE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_COOKIESESSION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_AUTOREFERER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLCERT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLCERTPASSWD" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_WRITEHEADER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSL_VERIFYHOST" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_COOKIEFILE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLVERSION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_TIMECONDITION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_TIMEVALUE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_CUSTOMREQUEST" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_STDERR" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_TRANSFERTEXT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_RETURNTRANSFER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_QUOTE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_POSTQUOTE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_INTERFACE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_KRB4LEVEL" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HTTPPROXYTUNNEL" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FILETIME" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_WRITEFUNCTION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_READFUNCTION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HEADERFUNCTION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_MAXREDIRS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_MAXCONNECTS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_CLOSEPOLICY" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FRESH_CONNECT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FORBID_REUSE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_RANDOM_FILE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_EGDSOCKET" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_CONNECTTIMEOUT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_CONNECTTIMEOUT_MS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSL_VERIFYPEER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_CAINFO" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_CAPATH" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_COOKIEJAR" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSL_CIPHER_LIST" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_BINARYTRANSFER" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_NOSIGNAL" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PROXYTYPE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_BUFFERSIZE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HTTPGET" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HTTP_VERSION" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLKEY" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLKEYTYPE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLKEYPASSWD" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLENGINE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLENGINE_DEFAULT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_SSLCERTTYPE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_CRLF" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PROXYPORT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_UNRESTRICTED_AUTH" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTP_USE_EPRT" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_TCP_NODELAY" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HTTP200ALIASES" citdl="integer" ilk="constant"/>
      <variable name="CURL_TIMECOND_IFMODSINCE" citdl="integer" ilk="constant"/>
      <variable name="CURL_TIMECOND_IFUNMODSINCE" citdl="integer" ilk="constant"/>
      <variable name="CURL_TIMECOND_LASTMOD" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_HTTPAUTH" citdl="integer" ilk="constant"/>
      <variable name="CURLAUTH_BASIC" citdl="integer" ilk="constant"/>
      <variable name="CURLAUTH_DIGEST" citdl="integer" ilk="constant"/>
      <variable name="CURLAUTH_GSSNEGOTIATE" citdl="integer" ilk="constant"/>
      <variable name="CURLAUTH_NTLM" citdl="integer" ilk="constant"/>
      <variable name="CURLAUTH_ANY" citdl="integer" ilk="constant"/>
      <variable name="CURLAUTH_ANYSAFE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PROXYAUTH" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTP_CREATE_MISSING_DIRS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_PRIVATE" citdl="integer" ilk="constant"/>
      <variable name="CURLCLOSEPOLICY_LEAST_RECENTLY_USED" citdl="integer" ilk="constant"/>
      <variable name="CURLCLOSEPOLICY_LEAST_TRAFFIC" citdl="integer" ilk="constant"/>
      <variable name="CURLCLOSEPOLICY_SLOWEST" citdl="integer" ilk="constant"/>
      <variable name="CURLCLOSEPOLICY_CALLBACK" citdl="integer" ilk="constant"/>
      <variable name="CURLCLOSEPOLICY_OLDEST" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_EFFECTIVE_URL" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_HTTP_CODE" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_HEADER_SIZE" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_REQUEST_SIZE" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_TOTAL_TIME" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_NAMELOOKUP_TIME" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_CONNECT_TIME" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_PRETRANSFER_TIME" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_SIZE_UPLOAD" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_SIZE_DOWNLOAD" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_SPEED_DOWNLOAD" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_SPEED_UPLOAD" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_FILETIME" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_SSL_VERIFYRESULT" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_CONTENT_LENGTH_DOWNLOAD" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_CONTENT_LENGTH_UPLOAD" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_STARTTRANSFER_TIME" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_CONTENT_TYPE" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_REDIRECT_TIME" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_REDIRECT_COUNT" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_HEADER_OUT" citdl="integer" ilk="constant"/>
      <variable name="CURLINFO_PRIVATE" citdl="integer" ilk="constant"/>
      <variable name="CURL_VERSION_IPV6" citdl="integer" ilk="constant"/>
      <variable name="CURL_VERSION_KERBEROS4" citdl="integer" ilk="constant"/>
      <variable name="CURL_VERSION_SSL" citdl="integer" ilk="constant"/>
      <variable name="CURL_VERSION_LIBZ" citdl="integer" ilk="constant"/>
      <variable name="CURLVERSION_NOW" citdl="integer" ilk="constant"/>
      <variable name="CURLE_OK" citdl="integer" ilk="constant"/>
      <variable name="CURLE_UNSUPPORTED_PROTOCOL" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FAILED_INIT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_URL_MALFORMAT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_URL_MALFORMAT_USER" citdl="integer" ilk="constant"/>
      <variable name="CURLE_COULDNT_RESOLVE_PROXY" citdl="integer" ilk="constant"/>
      <variable name="CURLE_COULDNT_RESOLVE_HOST" citdl="integer" ilk="constant"/>
      <variable name="CURLE_COULDNT_CONNECT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_WEIRD_SERVER_REPLY" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_ACCESS_DENIED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_USER_PASSWORD_INCORRECT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_WEIRD_PASS_REPLY" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_WEIRD_USER_REPLY" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_WEIRD_PASV_REPLY" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_WEIRD_227_FORMAT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_CANT_GET_HOST" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_CANT_RECONNECT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_COULDNT_SET_BINARY" citdl="integer" ilk="constant"/>
      <variable name="CURLE_PARTIAL_FILE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_COULDNT_RETR_FILE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_WRITE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_QUOTE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_HTTP_NOT_FOUND" citdl="integer" ilk="constant"/>
      <variable name="CURLE_WRITE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_MALFORMAT_USER" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_COULDNT_STOR_FILE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_READ_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_OUT_OF_MEMORY" citdl="integer" ilk="constant"/>
      <variable name="CURLE_OPERATION_TIMEOUTED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_COULDNT_SET_ASCII" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_PORT_FAILED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_COULDNT_USE_REST" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_COULDNT_GET_SIZE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_HTTP_RANGE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_HTTP_POST_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SSL_CONNECT_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_BAD_DOWNLOAD_RESUME" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FILE_COULDNT_READ_FILE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_LDAP_CANNOT_BIND" citdl="integer" ilk="constant"/>
      <variable name="CURLE_LDAP_SEARCH_FAILED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_LIBRARY_NOT_FOUND" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FUNCTION_NOT_FOUND" citdl="integer" ilk="constant"/>
      <variable name="CURLE_ABORTED_BY_CALLBACK" citdl="integer" ilk="constant"/>
      <variable name="CURLE_BAD_FUNCTION_ARGUMENT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_BAD_CALLING_ORDER" citdl="integer" ilk="constant"/>
      <variable name="CURLE_HTTP_PORT_FAILED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_BAD_PASSWORD_ENTERED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_TOO_MANY_REDIRECTS" citdl="integer" ilk="constant"/>
      <variable name="CURLE_UNKNOWN_TELNET_OPTION" citdl="integer" ilk="constant"/>
      <variable name="CURLE_TELNET_OPTION_SYNTAX" citdl="integer" ilk="constant"/>
      <variable name="CURLE_OBSOLETE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SSL_PEER_CERTIFICATE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_GOT_NOTHING" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SSL_ENGINE_NOTFOUND" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SSL_ENGINE_SETFAILED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SEND_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_RECV_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SHARE_IN_USE" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SSL_CERTPROBLEM" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SSL_CIPHER" citdl="integer" ilk="constant"/>
      <variable name="CURLE_SSL_CACERT" citdl="integer" ilk="constant"/>
      <variable name="CURLE_BAD_CONTENT_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="CURLE_LDAP_INVALID_URL" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FILESIZE_EXCEEDED" citdl="integer" ilk="constant"/>
      <variable name="CURLE_FTP_SSL_FAILED" citdl="integer" ilk="constant"/>
      <variable name="CURLPROXY_HTTP" citdl="integer" ilk="constant"/>
      <variable name="CURLPROXY_SOCKS4" citdl="integer" ilk="constant"/>
      <variable name="CURLPROXY_SOCKS5" citdl="integer" ilk="constant"/>
      <variable name="CURL_NETRC_OPTIONAL" citdl="integer" ilk="constant"/>
      <variable name="CURL_NETRC_IGNORED" citdl="integer" ilk="constant"/>
      <variable name="CURL_NETRC_REQUIRED" citdl="integer" ilk="constant"/>
      <variable name="CURL_HTTP_VERSION_NONE" citdl="integer" ilk="constant"/>
      <variable name="CURL_HTTP_VERSION_1_0" citdl="integer" ilk="constant"/>
      <variable name="CURL_HTTP_VERSION_1_1" citdl="integer" ilk="constant"/>
      <variable name="CURLM_CALL_MULTI_PERFORM" citdl="integer" ilk="constant"/>
      <variable name="CURLM_OK" citdl="integer" ilk="constant"/>
      <variable name="CURLM_BAD_HANDLE" citdl="integer" ilk="constant"/>
      <variable name="CURLM_BAD_EASY_HANDLE" citdl="integer" ilk="constant"/>
      <variable name="CURLM_OUT_OF_MEMORY" citdl="integer" ilk="constant"/>
      <variable name="CURLM_INTERNAL_ERROR" citdl="integer" ilk="constant"/>
      <variable name="CURLMSG_DONE" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTPSSLAUTH" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPAUTH_DEFAULT" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPAUTH_SSL" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPAUTH_TLS" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTP_SSL" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPSSL_NONE" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPSSL_TRY" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPSSL_CONTROL" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPSSL_ALL" citdl="integer" ilk="constant"/>
      <variable name="CURLOPT_FTP_FILEMETHOD" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPMETHOD_MULTICWD" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPMETHOD_NOCWD" citdl="integer" ilk="constant"/>
      <variable name="CURLFTPMETHOD_SINGLECWD" citdl="integer" ilk="constant"/>
      <variable name="XML_ELEMENT_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_TEXT_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_CDATA_SECTION_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_ENTITY_REF_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_ENTITY_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_PI_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_COMMENT_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_DOCUMENT_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_DOCUMENT_TYPE_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_DOCUMENT_FRAG_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_NOTATION_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_HTML_DOCUMENT_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_DTD_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_ELEMENT_DECL_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_DECL_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_ENTITY_DECL_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_NAMESPACE_DECL_NODE" citdl="integer" ilk="constant"/>
      <variable name="XML_LOCAL_NAMESPACE" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_CDATA" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_ID" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_IDREF" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_IDREFS" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_ENTITY" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_NMTOKEN" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_NMTOKENS" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_ENUMERATION" citdl="integer" ilk="constant"/>
      <variable name="XML_ATTRIBUTE_NOTATION" citdl="integer" ilk="constant"/>
      <variable name="DOM_PHP_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_INDEX_SIZE_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOMSTRING_SIZE_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_HIERARCHY_REQUEST_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_WRONG_DOCUMENT_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_INVALID_CHARACTER_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_NO_DATA_ALLOWED_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_NO_MODIFICATION_ALLOWED_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_NOT_FOUND_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_NOT_SUPPORTED_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_INUSE_ATTRIBUTE_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_INVALID_STATE_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_SYNTAX_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_INVALID_MODIFICATION_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_NAMESPACE_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_INVALID_ACCESS_ERR" citdl="integer" ilk="constant"/>
      <variable name="DOM_VALIDATION_ERR" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_NONE" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_SYMLINK" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_MIME" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_MIME_TYPE" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_MIME_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_DEVICES" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_CONTINUE" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_PRESERVE_ATIME" citdl="integer" ilk="constant"/>
      <variable name="FILEINFO_RAW" citdl="integer" ilk="constant"/>
      <variable name="INPUT_POST" citdl="integer" ilk="constant"/>
      <variable name="INPUT_GET" citdl="integer" ilk="constant"/>
      <variable name="INPUT_COOKIE" citdl="integer" ilk="constant"/>
      <variable name="INPUT_ENV" citdl="integer" ilk="constant"/>
      <variable name="INPUT_SERVER" citdl="integer" ilk="constant"/>
      <variable name="INPUT_SESSION" citdl="integer" ilk="constant"/>
      <variable name="INPUT_REQUEST" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_NONE" citdl="integer" ilk="constant"/>
      <variable name="FILTER_REQUIRE_SCALAR" citdl="integer" ilk="constant"/>
      <variable name="FILTER_REQUIRE_ARRAY" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FORCE_ARRAY" citdl="integer" ilk="constant"/>
      <variable name="FILTER_NULL_ON_FAILURE" citdl="integer" ilk="constant"/>
      <variable name="FILTER_VALIDATE_INT" citdl="integer" ilk="constant"/>
      <variable name="FILTER_VALIDATE_BOOLEAN" citdl="integer" ilk="constant"/>
      <variable name="FILTER_VALIDATE_FLOAT" citdl="integer" ilk="constant"/>
      <variable name="FILTER_VALIDATE_REGEXP" citdl="integer" ilk="constant"/>
      <variable name="FILTER_VALIDATE_URL" citdl="integer" ilk="constant"/>
      <variable name="FILTER_VALIDATE_EMAIL" citdl="integer" ilk="constant"/>
      <variable name="FILTER_VALIDATE_IP" citdl="integer" ilk="constant"/>
      <variable name="FILTER_DEFAULT" citdl="integer" ilk="constant"/>
      <variable name="FILTER_UNSAFE_RAW" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_STRING" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_STRIPPED" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_ENCODED" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_SPECIAL_CHARS" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_EMAIL" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_URL" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_NUMBER_INT" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_NUMBER_FLOAT" citdl="integer" ilk="constant"/>
      <variable name="FILTER_SANITIZE_MAGIC_QUOTES" citdl="integer" ilk="constant"/>
      <variable name="FILTER_CALLBACK" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ALLOW_OCTAL" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ALLOW_HEX" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_STRIP_LOW" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_STRIP_HIGH" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ENCODE_LOW" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ENCODE_HIGH" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ENCODE_AMP" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_NO_ENCODE_QUOTES" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_EMPTY_STRING_NULL" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ALLOW_FRACTION" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ALLOW_THOUSAND" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_ALLOW_SCIENTIFIC" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_SCHEME_REQUIRED" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_HOST_REQUIRED" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_PATH_REQUIRED" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_QUERY_REQUIRED" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_IPV4" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_IPV6" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_NO_RES_RANGE" citdl="integer" ilk="constant"/>
      <variable name="FILTER_FLAG_NO_PRIV_RANGE" citdl="integer" ilk="constant"/>
      <variable name="HASH_HMAC" citdl="integer" ilk="constant"/>
      <variable name="ICONV_IMPL" citdl="string" ilk="constant"/>
      <variable name="ICONV_VERSION" citdl="string" ilk="constant"/>
      <variable name="ICONV_MIME_DECODE_STRICT" citdl="integer" ilk="constant"/>
      <variable name="ICONV_MIME_DECODE_CONTINUE_ON_ERROR" citdl="integer" ilk="constant"/>
      <variable name="JSON_HEX_TAG" citdl="integer" ilk="constant"/>
      <variable name="JSON_HEX_AMP" citdl="integer" ilk="constant"/>
      <variable name="JSON_HEX_APOS" citdl="integer" ilk="constant"/>
      <variable name="JSON_HEX_QUOT" citdl="integer" ilk="constant"/>
      <variable name="JSON_FORCE_OBJECT" citdl="integer" ilk="constant"/>
      <variable name="JSON_ERROR_NONE" citdl="integer" ilk="constant"/>
      <variable name="JSON_ERROR_DEPTH" citdl="integer" ilk="constant"/>
      <variable name="JSON_ERROR_STATE_MISMATCH" citdl="integer" ilk="constant"/>
      <variable name="JSON_ERROR_CTRL_CHAR" citdl="integer" ilk="constant"/>
      <variable name="JSON_ERROR_SYNTAX" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_ASSOC" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_NUM" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_BOTH" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_CLIENT_COMPRESS" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_CLIENT_SSL" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_CLIENT_INTERACTIVE" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_CLIENT_IGNORE_SPACE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_CONNECT_FORCE_NEW" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_ASSOC" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_NUM" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_BOTH" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_CONNECTION_BAD" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_CONNECTION_OK" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_TRANSACTION_IDLE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_TRANSACTION_ACTIVE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_TRANSACTION_INTRANS" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_TRANSACTION_INERROR" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_TRANSACTION_UNKNOWN" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_ERRORS_TERSE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_ERRORS_DEFAULT" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_ERRORS_VERBOSE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_SEEK_SET" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_SEEK_CUR" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_SEEK_END" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_STATUS_LONG" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_STATUS_STRING" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_EMPTY_QUERY" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_COMMAND_OK" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_TUPLES_OK" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_COPY_OUT" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_COPY_IN" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_BAD_RESPONSE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_NONFATAL_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_FATAL_ERROR" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_SEVERITY" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_SQLSTATE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_MESSAGE_PRIMARY" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_MESSAGE_DETAIL" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_MESSAGE_HINT" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_STATEMENT_POSITION" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_INTERNAL_POSITION" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_INTERNAL_QUERY" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_CONTEXT" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_SOURCE_FILE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_SOURCE_LINE" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DIAG_SOURCE_FUNCTION" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_CONV_IGNORE_DEFAULT" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_CONV_FORCE_NULL" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_CONV_IGNORE_NOT_NULL" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DML_NO_CONV" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DML_EXEC" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DML_ASYNC" citdl="integer" ilk="constant"/>
      <variable name="PGSQL_DML_STRING" citdl="integer" ilk="constant"/>
      <variable name="POSIX_F_OK" citdl="integer" ilk="constant"/>
      <variable name="POSIX_X_OK" citdl="integer" ilk="constant"/>
      <variable name="POSIX_W_OK" citdl="integer" ilk="constant"/>
      <variable name="POSIX_R_OK" citdl="integer" ilk="constant"/>
      <variable name="POSIX_S_IFREG" citdl="integer" ilk="constant"/>
      <variable name="POSIX_S_IFCHR" citdl="integer" ilk="constant"/>
      <variable name="POSIX_S_IFBLK" citdl="integer" ilk="constant"/>
      <variable name="POSIX_S_IFIFO" citdl="integer" ilk="constant"/>
      <variable name="POSIX_S_IFSOCK" citdl="integer" ilk="constant"/>
      <variable name="CONNECTION_ABORTED" citdl="integer" ilk="constant"/>
      <variable name="CONNECTION_NORMAL" citdl="integer" ilk="constant"/>
      <variable name="CONNECTION_TIMEOUT" citdl="integer" ilk="constant"/>
      <variable name="INI_USER" citdl="integer" ilk="constant"/>
      <variable name="INI_PERDIR" citdl="integer" ilk="constant"/>
      <variable name="INI_SYSTEM" citdl="integer" ilk="constant"/>
      <variable name="INI_ALL" citdl="integer" ilk="constant"/>
      <variable name="INI_SCANNER_NORMAL" citdl="integer" ilk="constant"/>
      <variable name="INI_SCANNER_RAW" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_SCHEME" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_HOST" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_PORT" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_USER" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_PASS" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_PATH" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_QUERY" citdl="integer" ilk="constant"/>
      <variable name="PHP_URL_FRAGMENT" citdl="integer" ilk="constant"/>
      <variable name="M_E" citdl="double" ilk="constant"/>
      <variable name="M_LOG2E" citdl="double" ilk="constant"/>
      <variable name="M_LOG10E" citdl="double" ilk="constant"/>
      <variable name="M_LN2" citdl="double" ilk="constant"/>
      <variable name="M_LN10" citdl="double" ilk="constant"/>
      <variable name="M_PI" citdl="double" ilk="constant"/>
      <variable name="M_PI_2" citdl="double" ilk="constant"/>
      <variable name="M_PI_4" citdl="double" ilk="constant"/>
      <variable name="M_1_PI" citdl="double" ilk="constant"/>
      <variable name="M_2_PI" citdl="double" ilk="constant"/>
      <variable name="M_SQRTPI" citdl="double" ilk="constant"/>
      <variable name="M_2_SQRTPI" citdl="double" ilk="constant"/>
      <variable name="M_LNPI" citdl="double" ilk="constant"/>
      <variable name="M_EULER" citdl="double" ilk="constant"/>
      <variable name="M_SQRT2" citdl="double" ilk="constant"/>
      <variable name="M_SQRT1_2" citdl="double" ilk="constant"/>
      <variable name="M_SQRT3" citdl="double" ilk="constant"/>
      <variable name="INF" citdl="double" ilk="constant"/>
      <variable name="NAN" citdl="double" ilk="constant"/>
      <variable name="PHP_ROUND_HALF_UP" citdl="integer" ilk="constant"/>
      <variable name="PHP_ROUND_HALF_DOWN" citdl="integer" ilk="constant"/>
      <variable name="PHP_ROUND_HALF_EVEN" citdl="integer" ilk="constant"/>
      <variable name="PHP_ROUND_HALF_ODD" citdl="integer" ilk="constant"/>
      <variable name="INFO_GENERAL" citdl="integer" ilk="constant"/>
      <variable name="INFO_CREDITS" citdl="integer" ilk="constant"/>
      <variable name="INFO_CONFIGURATION" citdl="integer" ilk="constant"/>
      <variable name="INFO_MODULES" citdl="integer" ilk="constant"/>
      <variable name="INFO_ENVIRONMENT" citdl="integer" ilk="constant"/>
      <variable name="INFO_VARIABLES" citdl="integer" ilk="constant"/>
      <variable name="INFO_LICENSE" citdl="integer" ilk="constant"/>
      <variable name="INFO_ALL" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_GROUP" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_GENERAL" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_SAPI" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_MODULES" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_DOCS" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_FULLPAGE" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_QA" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_ALL" citdl="integer" ilk="constant"/>
      <variable name="HTML_SPECIALCHARS" citdl="integer" ilk="constant"/>
      <variable name="HTML_ENTITIES" citdl="integer" ilk="constant"/>
      <variable name="ENT_COMPAT" citdl="integer" ilk="constant"/>
      <variable name="ENT_QUOTES" citdl="integer" ilk="constant"/>
      <variable name="ENT_NOQUOTES" citdl="integer" ilk="constant"/>
      <variable name="ENT_IGNORE" citdl="integer" ilk="constant"/>
      <variable name="STR_PAD_LEFT" citdl="integer" ilk="constant"/>
      <variable name="STR_PAD_RIGHT" citdl="integer" ilk="constant"/>
      <variable name="STR_PAD_BOTH" citdl="integer" ilk="constant"/>
      <variable name="PATHINFO_DIRNAME" citdl="integer" ilk="constant"/>
      <variable name="PATHINFO_BASENAME" citdl="integer" ilk="constant"/>
      <variable name="PATHINFO_EXTENSION" citdl="integer" ilk="constant"/>
      <variable name="PATHINFO_FILENAME" citdl="integer" ilk="constant"/>
      <variable name="CHAR_MAX" citdl="integer" ilk="constant"/>
      <variable name="LC_CTYPE" citdl="integer" ilk="constant"/>
      <variable name="LC_NUMERIC" citdl="integer" ilk="constant"/>
      <variable name="LC_TIME" citdl="integer" ilk="constant"/>
      <variable name="LC_COLLATE" citdl="integer" ilk="constant"/>
      <variable name="LC_MONETARY" citdl="integer" ilk="constant"/>
      <variable name="LC_ALL" citdl="integer" ilk="constant"/>
      <variable name="LC_MESSAGES" citdl="integer" ilk="constant"/>
      <variable name="SEEK_SET" citdl="integer" ilk="constant"/>
      <variable name="SEEK_CUR" citdl="integer" ilk="constant"/>
      <variable name="SEEK_END" citdl="integer" ilk="constant"/>
      <variable name="LOCK_SH" citdl="integer" ilk="constant"/>
      <variable name="LOCK_EX" citdl="integer" ilk="constant"/>
      <variable name="LOCK_UN" citdl="integer" ilk="constant"/>
      <variable name="LOCK_NB" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_CONNECT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_AUTH_REQUIRED" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_AUTH_RESULT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_MIME_TYPE_IS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_FILE_SIZE_IS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_REDIRECTED" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_PROGRESS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_FAILURE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_COMPLETED" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_RESOLVE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_SEVERITY_INFO" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_SEVERITY_WARN" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_SEVERITY_ERR" citdl="integer" ilk="constant"/>
      <variable name="STREAM_FILTER_READ" citdl="integer" ilk="constant"/>
      <variable name="STREAM_FILTER_WRITE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_FILTER_ALL" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CLIENT_PERSISTENT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CLIENT_ASYNC_CONNECT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CLIENT_CONNECT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_SSLv2_CLIENT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_SSLv3_CLIENT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_SSLv23_CLIENT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_TLS_CLIENT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_SSLv2_SERVER" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_SSLv3_SERVER" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_SSLv23_SERVER" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CRYPTO_METHOD_TLS_SERVER" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SHUT_RD" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SHUT_WR" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SHUT_RDWR" citdl="integer" ilk="constant"/>
      <variable name="STREAM_PF_INET" citdl="integer" ilk="constant"/>
      <variable name="STREAM_PF_INET6" citdl="integer" ilk="constant"/>
      <variable name="STREAM_PF_UNIX" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IPPROTO_IP" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IPPROTO_TCP" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IPPROTO_UDP" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IPPROTO_ICMP" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IPPROTO_RAW" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SOCK_STREAM" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SOCK_DGRAM" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SOCK_RAW" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SOCK_SEQPACKET" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SOCK_RDM" citdl="integer" ilk="constant"/>
      <variable name="STREAM_PEEK" citdl="integer" ilk="constant"/>
      <variable name="STREAM_OOB" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SERVER_BIND" citdl="integer" ilk="constant"/>
      <variable name="STREAM_SERVER_LISTEN" citdl="integer" ilk="constant"/>
      <variable name="FILE_USE_INCLUDE_PATH" citdl="integer" ilk="constant"/>
      <variable name="FILE_IGNORE_NEW_LINES" citdl="integer" ilk="constant"/>
      <variable name="FILE_SKIP_EMPTY_LINES" citdl="integer" ilk="constant"/>
      <variable name="FILE_APPEND" citdl="integer" ilk="constant"/>
      <variable name="FILE_NO_DEFAULT_CONTEXT" citdl="integer" ilk="constant"/>
      <variable name="FILE_TEXT" citdl="integer" ilk="constant"/>
      <variable name="FILE_BINARY" citdl="integer" ilk="constant"/>
      <variable name="FNM_NOESCAPE" citdl="integer" ilk="constant"/>
      <variable name="FNM_PATHNAME" citdl="integer" ilk="constant"/>
      <variable name="FNM_PERIOD" citdl="integer" ilk="constant"/>
      <variable name="FNM_CASEFOLD" citdl="integer" ilk="constant"/>
      <variable name="PSFS_PASS_ON" citdl="integer" ilk="constant"/>
      <variable name="PSFS_FEED_ME" citdl="integer" ilk="constant"/>
      <variable name="PSFS_ERR_FATAL" citdl="integer" ilk="constant"/>
      <variable name="PSFS_FLAG_NORMAL" citdl="integer" ilk="constant"/>
      <variable name="PSFS_FLAG_FLUSH_INC" citdl="integer" ilk="constant"/>
      <variable name="PSFS_FLAG_FLUSH_CLOSE" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_1" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_2" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_3" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_4" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_5" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_6" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_7" citdl="integer" ilk="constant"/>
      <variable name="DAY_1" citdl="integer" ilk="constant"/>
      <variable name="DAY_2" citdl="integer" ilk="constant"/>
      <variable name="DAY_3" citdl="integer" ilk="constant"/>
      <variable name="DAY_4" citdl="integer" ilk="constant"/>
      <variable name="DAY_5" citdl="integer" ilk="constant"/>
      <variable name="DAY_6" citdl="integer" ilk="constant"/>
      <variable name="DAY_7" citdl="integer" ilk="constant"/>
      <variable name="ABMON_1" citdl="integer" ilk="constant"/>
      <variable name="ABMON_2" citdl="integer" ilk="constant"/>
      <variable name="ABMON_3" citdl="integer" ilk="constant"/>
      <variable name="ABMON_4" citdl="integer" ilk="constant"/>
      <variable name="ABMON_5" citdl="integer" ilk="constant"/>
      <variable name="ABMON_6" citdl="integer" ilk="constant"/>
      <variable name="ABMON_7" citdl="integer" ilk="constant"/>
      <variable name="ABMON_8" citdl="integer" ilk="constant"/>
      <variable name="ABMON_9" citdl="integer" ilk="constant"/>
      <variable name="ABMON_10" citdl="integer" ilk="constant"/>
      <variable name="ABMON_11" citdl="integer" ilk="constant"/>
      <variable name="ABMON_12" citdl="integer" ilk="constant"/>
      <variable name="MON_1" citdl="integer" ilk="constant"/>
      <variable name="MON_2" citdl="integer" ilk="constant"/>
      <variable name="MON_3" citdl="integer" ilk="constant"/>
      <variable name="MON_4" citdl="integer" ilk="constant"/>
      <variable name="MON_5" citdl="integer" ilk="constant"/>
      <variable name="MON_6" citdl="integer" ilk="constant"/>
      <variable name="MON_7" citdl="integer" ilk="constant"/>
      <variable name="MON_8" citdl="integer" ilk="constant"/>
      <variable name="MON_9" citdl="integer" ilk="constant"/>
      <variable name="MON_10" citdl="integer" ilk="constant"/>
      <variable name="MON_11" citdl="integer" ilk="constant"/>
      <variable name="MON_12" citdl="integer" ilk="constant"/>
      <variable name="AM_STR" citdl="integer" ilk="constant"/>
      <variable name="PM_STR" citdl="integer" ilk="constant"/>
      <variable name="D_T_FMT" citdl="integer" ilk="constant"/>
      <variable name="D_FMT" citdl="integer" ilk="constant"/>
      <variable name="T_FMT" citdl="integer" ilk="constant"/>
      <variable name="T_FMT_AMPM" citdl="integer" ilk="constant"/>
      <variable name="ERA" citdl="integer" ilk="constant"/>
      <variable name="ERA_D_T_FMT" citdl="integer" ilk="constant"/>
      <variable name="ERA_D_FMT" citdl="integer" ilk="constant"/>
      <variable name="ERA_T_FMT" citdl="integer" ilk="constant"/>
      <variable name="ALT_DIGITS" citdl="integer" ilk="constant"/>
      <variable name="CRNCYSTR" citdl="integer" ilk="constant"/>
      <variable name="RADIXCHAR" citdl="integer" ilk="constant"/>
      <variable name="THOUSEP" citdl="integer" ilk="constant"/>
      <variable name="YESEXPR" citdl="integer" ilk="constant"/>
      <variable name="NOEXPR" citdl="integer" ilk="constant"/>
      <variable name="CODESET" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_SALT_LENGTH" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_STD_DES" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_EXT_DES" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_MD5" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_BLOWFISH" citdl="integer" ilk="constant"/>
      <variable name="DIRECTORY_SEPARATOR" citdl="string" ilk="constant"/>
      <variable name="PATH_SEPARATOR" citdl="string" ilk="constant"/>
      <variable name="GLOB_BRACE" citdl="integer" ilk="constant"/>
      <variable name="GLOB_MARK" citdl="integer" ilk="constant"/>
      <variable name="GLOB_NOSORT" citdl="integer" ilk="constant"/>
      <variable name="GLOB_NOCHECK" citdl="integer" ilk="constant"/>
      <variable name="GLOB_NOESCAPE" citdl="integer" ilk="constant"/>
      <variable name="GLOB_ERR" citdl="integer" ilk="constant"/>
      <variable name="GLOB_ONLYDIR" citdl="integer" ilk="constant"/>
      <variable name="GLOB_AVAILABLE_FLAGS" citdl="integer" ilk="constant"/>
      <variable name="LOG_EMERG" citdl="integer" ilk="constant"/>
      <variable name="LOG_ALERT" citdl="integer" ilk="constant"/>
      <variable name="LOG_CRIT" citdl="integer" ilk="constant"/>
      <variable name="LOG_ERR" citdl="integer" ilk="constant"/>
      <variable name="LOG_WARNING" citdl="integer" ilk="constant"/>
      <variable name="LOG_NOTICE" citdl="integer" ilk="constant"/>
      <variable name="LOG_INFO" citdl="integer" ilk="constant"/>
      <variable name="LOG_DEBUG" citdl="integer" ilk="constant"/>
      <variable name="LOG_KERN" citdl="integer" ilk="constant"/>
      <variable name="LOG_USER" citdl="integer" ilk="constant"/>
      <variable name="LOG_MAIL" citdl="integer" ilk="constant"/>
      <variable name="LOG_DAEMON" citdl="integer" ilk="constant"/>
      <variable name="LOG_AUTH" citdl="integer" ilk="constant"/>
      <variable name="LOG_SYSLOG" citdl="integer" ilk="constant"/>
      <variable name="LOG_LPR" citdl="integer" ilk="constant"/>
      <variable name="LOG_NEWS" citdl="integer" ilk="constant"/>
      <variable name="LOG_UUCP" citdl="integer" ilk="constant"/>
      <variable name="LOG_CRON" citdl="integer" ilk="constant"/>
      <variable name="LOG_AUTHPRIV" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL0" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL1" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL2" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL3" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL4" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL5" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL6" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL7" citdl="integer" ilk="constant"/>
      <variable name="LOG_PID" citdl="integer" ilk="constant"/>
      <variable name="LOG_CONS" citdl="integer" ilk="constant"/>
      <variable name="LOG_ODELAY" citdl="integer" ilk="constant"/>
      <variable name="LOG_NDELAY" citdl="integer" ilk="constant"/>
      <variable name="LOG_NOWAIT" citdl="integer" ilk="constant"/>
      <variable name="LOG_PERROR" citdl="integer" ilk="constant"/>
      <variable name="EXTR_OVERWRITE" citdl="integer" ilk="constant"/>
      <variable name="EXTR_SKIP" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_SAME" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_ALL" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_INVALID" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_IF_EXISTS" citdl="integer" ilk="constant"/>
      <variable name="EXTR_IF_EXISTS" citdl="integer" ilk="constant"/>
      <variable name="EXTR_REFS" citdl="integer" ilk="constant"/>
      <variable name="SORT_ASC" citdl="integer" ilk="constant"/>
      <variable name="SORT_DESC" citdl="integer" ilk="constant"/>
      <variable name="SORT_REGULAR" citdl="integer" ilk="constant"/>
      <variable name="SORT_NUMERIC" citdl="integer" ilk="constant"/>
      <variable name="SORT_STRING" citdl="integer" ilk="constant"/>
      <variable name="SORT_LOCALE_STRING" citdl="integer" ilk="constant"/>
      <variable name="CASE_LOWER" citdl="integer" ilk="constant"/>
      <variable name="CASE_UPPER" citdl="integer" ilk="constant"/>
      <variable name="COUNT_NORMAL" citdl="integer" ilk="constant"/>
      <variable name="COUNT_RECURSIVE" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_ACTIVE" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_CALLBACK" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_BAIL" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_WARNING" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_QUIET_EVAL" citdl="integer" ilk="constant"/>
      <variable name="STREAM_USE_PATH" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IGNORE_URL" citdl="integer" ilk="constant"/>
      <variable name="STREAM_ENFORCE_SAFE_MODE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_REPORT_ERRORS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_MUST_SEEK" citdl="integer" ilk="constant"/>
      <variable name="STREAM_URL_STAT_LINK" citdl="integer" ilk="constant"/>
      <variable name="STREAM_URL_STAT_QUIET" citdl="integer" ilk="constant"/>
      <variable name="STREAM_MKDIR_RECURSIVE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IS_URL" citdl="integer" ilk="constant"/>
      <variable name="STREAM_OPTION_BLOCKING" citdl="integer" ilk="constant"/>
      <variable name="STREAM_OPTION_READ_TIMEOUT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_OPTION_READ_BUFFER" citdl="integer" ilk="constant"/>
      <variable name="STREAM_OPTION_WRITE_BUFFER" citdl="integer" ilk="constant"/>
      <variable name="STREAM_BUFFER_NONE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_BUFFER_LINE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_BUFFER_FULL" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CAST_AS_STREAM" citdl="integer" ilk="constant"/>
      <variable name="STREAM_CAST_FOR_SELECT" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_GIF" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPEG" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_PNG" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_SWF" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_PSD" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_BMP" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_TIFF_II" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_TIFF_MM" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPC" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JP2" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPX" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JB2" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_IFF" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_WBMP" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPEG2000" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_XBM" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_ICO" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_UNKNOWN" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_COUNT" citdl="integer" ilk="constant"/>
      <variable name="DNS_A" citdl="integer" ilk="constant"/>
      <variable name="DNS_NS" citdl="integer" ilk="constant"/>
      <variable name="DNS_CNAME" citdl="integer" ilk="constant"/>
      <variable name="DNS_SOA" citdl="integer" ilk="constant"/>
      <variable name="DNS_PTR" citdl="integer" ilk="constant"/>
      <variable name="DNS_HINFO" citdl="integer" ilk="constant"/>
      <variable name="DNS_MX" citdl="integer" ilk="constant"/>
      <variable name="DNS_TXT" citdl="integer" ilk="constant"/>
      <variable name="DNS_SRV" citdl="integer" ilk="constant"/>
      <variable name="DNS_NAPTR" citdl="integer" ilk="constant"/>
      <variable name="DNS_AAAA" citdl="integer" ilk="constant"/>
      <variable name="DNS_A6" citdl="integer" ilk="constant"/>
      <variable name="DNS_ANY" citdl="integer" ilk="constant"/>
      <variable name="DNS_ALL" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_READ_DEFAULT_GROUP" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_READ_DEFAULT_FILE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_OPT_CONNECT_TIMEOUT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_OPT_LOCAL_INFILE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_INIT_COMMAND" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CLIENT_SSL" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CLIENT_COMPRESS" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CLIENT_INTERACTIVE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CLIENT_IGNORE_SPACE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CLIENT_NO_SCHEMA" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CLIENT_FOUND_ROWS" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_STORE_RESULT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_USE_RESULT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_ASSOC" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_NUM" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_BOTH" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_STMT_ATTR_CURSOR_TYPE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CURSOR_TYPE_NO_CURSOR" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CURSOR_TYPE_READ_ONLY" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CURSOR_TYPE_FOR_UPDATE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_CURSOR_TYPE_SCROLLABLE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_STMT_ATTR_PREFETCH_ROWS" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_NOT_NULL_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_PRI_KEY_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_UNIQUE_KEY_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_MULTIPLE_KEY_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_BLOB_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_UNSIGNED_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_ZEROFILL_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_AUTO_INCREMENT_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TIMESTAMP_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_SET_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_NUM_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_PART_KEY_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_GROUP_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_ENUM_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_BINARY_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_NO_DEFAULT_VALUE_FLAG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_DECIMAL" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_TINY" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_SHORT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_LONG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_FLOAT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_DOUBLE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_NULL" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_TIMESTAMP" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_LONGLONG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_INT24" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_DATE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_TIME" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_DATETIME" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_YEAR" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_NEWDATE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_ENUM" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_SET" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_TINY_BLOB" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_MEDIUM_BLOB" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_LONG_BLOB" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_BLOB" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_VAR_STRING" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_STRING" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_CHAR" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_INTERVAL" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_GEOMETRY" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_NEWDECIMAL" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_TYPE_BIT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_SET_CHARSET_NAME" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_NO_DATA" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_DATA_TRUNCATED" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REPORT_INDEX" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REPORT_ERROR" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REPORT_STRICT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REPORT_ALL" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REPORT_OFF" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_DEBUG_TRACE_ENABLED" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_SERVER_QUERY_NO_GOOD_INDEX_USED" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_SERVER_QUERY_NO_INDEX_USED" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_GRANT" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_LOG" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_TABLES" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_HOSTS" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_STATUS" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_THREADS" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_SLAVE" citdl="integer" ilk="constant"/>
      <variable name="MYSQLI_REFRESH_MASTER" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_BOTH" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_NUM" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_ASSOC" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_OK" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_INTERNAL" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_PERM" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_ABORT" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_BUSY" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_LOCKED" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_NOMEM" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_READONLY" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_INTERRUPT" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_IOERR" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_CORRUPT" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_NOTFOUND" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_FULL" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_CANTOPEN" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_PROTOCOL" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_EMPTY" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_SCHEMA" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_TOOBIG" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_CONSTRAINT" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_MISMATCH" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_MISUSE" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_NOLFS" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_AUTH" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_NOTADB" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_FORMAT" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_ROW" citdl="integer" ilk="constant"/>
      <variable name="SQLITE_DONE" citdl="integer" ilk="constant"/>
      <variable name="T_REQUIRE_ONCE" citdl="integer" ilk="constant"/>
      <variable name="T_REQUIRE" citdl="integer" ilk="constant"/>
      <variable name="T_EVAL" citdl="integer" ilk="constant"/>
      <variable name="T_INCLUDE_ONCE" citdl="integer" ilk="constant"/>
      <variable name="T_INCLUDE" citdl="integer" ilk="constant"/>
      <variable name="T_LOGICAL_OR" citdl="integer" ilk="constant"/>
      <variable name="T_LOGICAL_XOR" citdl="integer" ilk="constant"/>
      <variable name="T_LOGICAL_AND" citdl="integer" ilk="constant"/>
      <variable name="T_PRINT" citdl="integer" ilk="constant"/>
      <variable name="T_SR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_SL_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_XOR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_OR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_AND_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_MOD_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_CONCAT_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_DIV_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_MUL_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_MINUS_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_PLUS_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_BOOLEAN_OR" citdl="integer" ilk="constant"/>
      <variable name="T_BOOLEAN_AND" citdl="integer" ilk="constant"/>
      <variable name="T_IS_NOT_IDENTICAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_IDENTICAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_NOT_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_GREATER_OR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_SMALLER_OR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_SR" citdl="integer" ilk="constant"/>
      <variable name="T_SL" citdl="integer" ilk="constant"/>
      <variable name="T_INSTANCEOF" citdl="integer" ilk="constant"/>
      <variable name="T_UNSET_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_BOOL_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_OBJECT_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_ARRAY_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_STRING_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_DOUBLE_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_INT_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_DEC" citdl="integer" ilk="constant"/>
      <variable name="T_INC" citdl="integer" ilk="constant"/>
      <variable name="T_CLONE" citdl="integer" ilk="constant"/>
      <variable name="T_NEW" citdl="integer" ilk="constant"/>
      <variable name="T_EXIT" citdl="integer" ilk="constant"/>
      <variable name="T_IF" citdl="integer" ilk="constant"/>
      <variable name="T_ELSEIF" citdl="integer" ilk="constant"/>
      <variable name="T_ELSE" citdl="integer" ilk="constant"/>
      <variable name="T_ENDIF" citdl="integer" ilk="constant"/>
      <variable name="T_LNUMBER" citdl="integer" ilk="constant"/>
      <variable name="T_DNUMBER" citdl="integer" ilk="constant"/>
      <variable name="T_STRING" citdl="integer" ilk="constant"/>
      <variable name="T_STRING_VARNAME" citdl="integer" ilk="constant"/>
      <variable name="T_VARIABLE" citdl="integer" ilk="constant"/>
      <variable name="T_NUM_STRING" citdl="integer" ilk="constant"/>
      <variable name="T_INLINE_HTML" citdl="integer" ilk="constant"/>
      <variable name="T_CHARACTER" citdl="integer" ilk="constant"/>
      <variable name="T_BAD_CHARACTER" citdl="integer" ilk="constant"/>
      <variable name="T_ENCAPSED_AND_WHITESPACE" citdl="integer" ilk="constant"/>
      <variable name="T_CONSTANT_ENCAPSED_STRING" citdl="integer" ilk="constant"/>
      <variable name="T_ECHO" citdl="integer" ilk="constant"/>
      <variable name="T_DO" citdl="integer" ilk="constant"/>
      <variable name="T_WHILE" citdl="integer" ilk="constant"/>
      <variable name="T_ENDWHILE" citdl="integer" ilk="constant"/>
      <variable name="T_FOR" citdl="integer" ilk="constant"/>
      <variable name="T_ENDFOR" citdl="integer" ilk="constant"/>
      <variable name="T_FOREACH" citdl="integer" ilk="constant"/>
      <variable name="T_ENDFOREACH" citdl="integer" ilk="constant"/>
      <variable name="T_DECLARE" citdl="integer" ilk="constant"/>
      <variable name="T_ENDDECLARE" citdl="integer" ilk="constant"/>
      <variable name="T_AS" citdl="integer" ilk="constant"/>
      <variable name="T_SWITCH" citdl="integer" ilk="constant"/>
      <variable name="T_ENDSWITCH" citdl="integer" ilk="constant"/>
      <variable name="T_CASE" citdl="integer" ilk="constant"/>
      <variable name="T_DEFAULT" citdl="integer" ilk="constant"/>
      <variable name="T_BREAK" citdl="integer" ilk="constant"/>
      <variable name="T_CONTINUE" citdl="integer" ilk="constant"/>
      <variable name="T_GOTO" citdl="integer" ilk="constant"/>
      <variable name="T_FUNCTION" citdl="integer" ilk="constant"/>
      <variable name="T_CONST" citdl="integer" ilk="constant"/>
      <variable name="T_RETURN" citdl="integer" ilk="constant"/>
      <variable name="T_TRY" citdl="integer" ilk="constant"/>
      <variable name="T_CATCH" citdl="integer" ilk="constant"/>
      <variable name="T_THROW" citdl="integer" ilk="constant"/>
      <variable name="T_USE" citdl="integer" ilk="constant"/>
      <variable name="T_GLOBAL" citdl="integer" ilk="constant"/>
      <variable name="T_PUBLIC" citdl="integer" ilk="constant"/>
      <variable name="T_PROTECTED" citdl="integer" ilk="constant"/>
      <variable name="T_PRIVATE" citdl="integer" ilk="constant"/>
      <variable name="T_FINAL" citdl="integer" ilk="constant"/>
      <variable name="T_ABSTRACT" citdl="integer" ilk="constant"/>
      <variable name="T_STATIC" citdl="integer" ilk="constant"/>
      <variable name="T_VAR" citdl="integer" ilk="constant"/>
      <variable name="T_UNSET" citdl="integer" ilk="constant"/>
      <variable name="T_ISSET" citdl="integer" ilk="constant"/>
      <variable name="T_EMPTY" citdl="integer" ilk="constant"/>
      <variable name="T_HALT_COMPILER" citdl="integer" ilk="constant"/>
      <variable name="T_CLASS" citdl="integer" ilk="constant"/>
      <variable name="T_INTERFACE" citdl="integer" ilk="constant"/>
      <variable name="T_EXTENDS" citdl="integer" ilk="constant"/>
      <variable name="T_IMPLEMENTS" citdl="integer" ilk="constant"/>
      <variable name="T_OBJECT_OPERATOR" citdl="integer" ilk="constant"/>
      <variable name="T_DOUBLE_ARROW" citdl="integer" ilk="constant"/>
      <variable name="T_LIST" citdl="integer" ilk="constant"/>
      <variable name="T_ARRAY" citdl="integer" ilk="constant"/>
      <variable name="T_CLASS_C" citdl="integer" ilk="constant"/>
      <variable name="T_METHOD_C" citdl="integer" ilk="constant"/>
      <variable name="T_FUNC_C" citdl="integer" ilk="constant"/>
      <variable name="T_LINE" citdl="integer" ilk="constant"/>
      <variable name="T_FILE" citdl="integer" ilk="constant"/>
      <variable name="T_COMMENT" citdl="integer" ilk="constant"/>
      <variable name="T_DOC_COMMENT" citdl="integer" ilk="constant"/>
      <variable name="T_OPEN_TAG" citdl="integer" ilk="constant"/>
      <variable name="T_OPEN_TAG_WITH_ECHO" citdl="integer" ilk="constant"/>
      <variable name="T_CLOSE_TAG" citdl="integer" ilk="constant"/>
      <variable name="T_WHITESPACE" citdl="integer" ilk="constant"/>
      <variable name="T_START_HEREDOC" citdl="integer" ilk="constant"/>
      <variable name="T_END_HEREDOC" citdl="integer" ilk="constant"/>
      <variable name="T_DOLLAR_OPEN_CURLY_BRACES" citdl="integer" ilk="constant"/>
      <variable name="T_CURLY_OPEN" citdl="integer" ilk="constant"/>
      <variable name="T_PAAMAYIM_NEKUDOTAYIM" citdl="integer" ilk="constant"/>
      <variable name="T_NAMESPACE" citdl="integer" ilk="constant"/>
      <variable name="T_NS_C" citdl="integer" ilk="constant"/>
      <variable name="T_DIR" citdl="integer" ilk="constant"/>
      <variable name="T_NS_SEPARATOR" citdl="integer" ilk="constant"/>
      <variable name="T_DOUBLE_COLON" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_NONE" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_NO_MEMORY" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_SYNTAX" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_NO_ELEMENTS" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_INVALID_TOKEN" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNCLOSED_TOKEN" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_PARTIAL_CHAR" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_TAG_MISMATCH" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_DUPLICATE_ATTRIBUTE" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_PARAM_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNDEFINED_ENTITY" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_RECURSIVE_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_ASYNC_ENTITY" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_BAD_CHAR_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_BINARY_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_MISPLACED_XML_PI" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNKNOWN_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_INCORRECT_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNCLOSED_CDATA_SECTION" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_EXTERNAL_ENTITY_HANDLING" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_CASE_FOLDING" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_TARGET_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_SKIP_TAGSTART" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_SKIP_WHITE" citdl="integer" ilk="constant"/>
      <variable name="XML_SAX_IMPL" citdl="string" ilk="constant"/>
      <variable name="STDIN" citdl="resource" ilk="constant"/>
      <variable name="STDOUT" citdl="resource" ilk="constant"/>
      <variable name="STDERR" citdl="resource" ilk="constant"/>
    </scope>
  </file>
</codeintel>
