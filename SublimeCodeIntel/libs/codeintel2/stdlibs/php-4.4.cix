<?xml version="1.0" encoding="utf-8"?>
<codeintel version="2.0" name="PHP 4.4.8" description="Cix data for PHP 4.4.8" file="php-4.4.cix">
  <file lang="PHP" mtime="1235684954" path="php-4.4.cix">
    <scope ilk="blob" lang="PHP" name="*" id="global">
      <scope name="chown" signature="chown()" ilk="function"/>
      <scope name="isset" signature="bool isset ( mixed var [, mixed var [, ...]] )" doc="Determine whether a variable is set" ilk="function"/>
      <scope name="empty" signature="bool empty ( mixed $var )" doc="Determine whether a variable is considered to be empty." ilk="function"/>
      <scope name="unset" signature="void unset ( mixed $var [, mixed $var [, mixed $...]] )" doc="unset() destroys the specified variables." ilk="function"/>
      <scope name="dir" signature="dir(string directory)" returns="object" doc="Directory class with properties handle and class and&#10;methods read rewind and close" ilk="function" src="dir.c"/>
      <scope name="xdebug_break" signature="xdebug_break()" doc="force an xdebug breakpoint here." ilk="function"/>
      <scope name="bcadd" signature="bcadd(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the sum of two arbitrary precision numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcsub" signature="bcsub(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the difference between two arbitrary precision&#10;numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcmul" signature="bcmul(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the multiplication of two arbitrary precision&#10;numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcdiv" signature="bcdiv(string left_operand, string right_operand [, int scale])" returns="string" doc="Returns the quotient of two arbitrary precision numbers&#10;division" ilk="function" src="bcmath.c"/>
      <scope name="bcmod" signature="bcmod(string left_operand, string right_operand)" returns="string" doc="Returns the modulus of the two arbitrary precision&#10;operands" ilk="function" src="bcmath.c"/>
      <scope name="bcpow" signature="bcpow(string x, string y [, int scale])" returns="string" doc="Returns the value of an arbitrary precision number&#10;raised to the power of another" ilk="function" src="bcmath.c"/>
      <scope name="bcsqrt" signature="bcsqrt(string operand [, int scale])" returns="string" doc="Returns the square root of an arbitray precision number" ilk="function" src="bcmath.c"/>
      <scope name="bccomp" signature="bccomp(string left_operand, string right_operand [, int scale])" returns="int" doc="Compares two arbitrary precision numbers" ilk="function" src="bcmath.c"/>
      <scope name="bcscale" signature="bcscale(int scale)" returns="bool" doc="Sets default scale parameter for all bc math functions" ilk="function" src="bcmath.c"/>
      <scope name="bzread" signature="bzread(int bz[, int length])" returns="string" doc="Reads up to length bytes from a BZip stream or bytes if&#10;length is not specified" ilk="function" src="bz2.c"/>
      <scope name="bzopen" signature="bzopen(string" returns="resource" doc="Opens a new BZip stream" ilk="function" src="bz2.c"/>
      <scope name="bzerrno" signature="bzerrno(resource bz)" returns="int" doc="Returns the error number" ilk="function" src="bz2.c"/>
      <scope name="bzerrstr" signature="bzerrstr(resource bz)" returns="string" doc="Returns the error string" ilk="function" src="bz2.c"/>
      <scope name="bzerror" signature="bzerror(resource bz)" returns="array" doc="Returns the error number and error string in an&#10;associative array" ilk="function" src="bz2.c"/>
      <scope name="bzcompress" signature="bzcompress(string source [, int blocksize100k [, int workfactor]])" returns="string" doc="Compresses a string into BZip encoded data" ilk="function" src="bz2.c"/>
      <scope name="bzdecompress" signature="bzdecompress(string source [, int small])" returns="string" doc="Decompresses BZip compressed data" ilk="function" src="bz2.c"/>
      <scope name="unixtojd" signature="unixtojd([int timestamp])" returns="int" doc="Convert UNIX timestamp to Julian Day" ilk="function" src="cal_unix.c"/>
      <scope name="jdtounix" signature="jdtounix(int jday)" returns="int" doc="Convert Julian Day to UNIX timestamp" ilk="function" src="cal_unix.c"/>
      <scope name="cal_info" signature="cal_info(int calendar)" returns="array" doc="Returns information about a particular calendar" ilk="function" src="calendar.c"/>
      <scope name="cal_days_in_month" signature="cal_days_in_month(int calendar, int month, int year)" returns="int" doc="Returns the number of days in a month for a given year&#10;and calendar" ilk="function" src="calendar.c"/>
      <scope name="cal_to_jd" signature="cal_to_jd(int calendar, int month, int day, int year)" returns="int" doc="Converts from a supported calendar to Julian Day Count" ilk="function" src="calendar.c"/>
      <scope name="cal_from_jd" signature="cal_from_jd(int jd, int calendar)" returns="array" doc="Converts from Julian Day Count to a supported calendar&#10;and return extended information" ilk="function" src="calendar.c"/>
      <scope name="jdtogregorian" signature="jdtogregorian(int juliandaycount)" returns="string" doc="Converts a julian day count to a gregorian calendar&#10;date" ilk="function" src="calendar.c"/>
      <scope name="gregoriantojd" signature="gregoriantojd(int month, int day, int year)" returns="int" doc="Converts a gregorian calendar date to julian day count" ilk="function" src="calendar.c"/>
      <scope name="jdtojulian" signature="jdtojulian(int juliandaycount)" returns="string" doc="Convert a julian day count to a julian calendar date" ilk="function" src="calendar.c"/>
      <scope name="juliantojd" signature="juliantojd(int month, int day, int year)" returns="int" doc="Converts a julian calendar date to julian day count" ilk="function" src="calendar.c"/>
      <scope name="jdtojewish" signature="jdtojewish(int juliandaycount [, bool hebrew [, int fl]])" returns="string" doc="Converts a julian day count to a jewish calendar date" ilk="function" src="calendar.c"/>
      <scope name="jewishtojd" signature="jewishtojd(int month, int day, int year)" returns="int" doc="Converts a jewish calendar date to a julian day count" ilk="function" src="calendar.c"/>
      <scope name="jdtofrench" signature="jdtofrench(int juliandaycount)" returns="string" doc="Converts a julian day count to a french republic&#10;calendar date" ilk="function" src="calendar.c"/>
      <scope name="frenchtojd" signature="frenchtojd(int month, int day, int year)" returns="int" doc="Converts a french republic calendar date to julian day&#10;count" ilk="function" src="calendar.c"/>
      <scope name="jddayofweek" signature="jddayofweek(int juliandaycount [, int mode])" returns="mixed" doc="Returns name or number of day of week from julian day&#10;count" ilk="function" src="calendar.c"/>
      <scope name="jdmonthname" signature="jdmonthname(int juliandaycount, int mode)" returns="string" doc="Returns name of month for julian day count" ilk="function" src="calendar.c"/>
      <scope name="easter_date" signature="easter_date([int year])" returns="int" doc="Return the timestamp of midnight on Easter of a given&#10;year defaults to current year" ilk="function" src="easter.c"/>
      <scope name="easter_days" signature="easter_days([int year, [int method]])" returns="int" doc="Return the number of days after March that Easter falls&#10;on for a given year defaults to current year" ilk="function" src="easter.c"/>
      <scope name="com_load" signature="com_load(string module_name [, string remote_host [, int codepage [, string typelib]]])" returns="int" doc="Loads a COM module" ilk="function" src="COM.c"/>
      <scope name="com_invoke_ex" signature="com_invoke_ex(int module, int invokeflags, string handler_name [, mixed arg [, mixed ...]])" returns="mixed" doc="Invokes a COM module" ilk="function" src="COM.c"/>
      <scope name="com_invoke" signature="com_invoke(int module, string handler_name [, mixed arg [, mixed ...]])" returns="mixed" doc="Invokes a COM module" ilk="function" src="COM.c"/>
      <scope name="com_release" signature="com_release(int module)" returns="mixed" doc="Releases a COM object" ilk="function" src="COM.c"/>
      <scope name="com_addref" signature="com_addref(int module)" returns="mixed" doc="Increases the reference counter on a COM object" ilk="function" src="COM.c"/>
      <scope name="com_message_pump" signature="com_message_pump([int timeoutms])" returns="bool" doc="Process COM messages sleeping for up to timeoutms&#10;milliseconds" ilk="function" src="COM.c"/>
      <scope name="com_print_typeinfo" signature="com_print_typeinfo(mixed comobject" returns="bool" doc="Print out a PHP class definition for a dispatchable&#10;interface" ilk="function" src="COM.c"/>
      <scope name="com_event_sink" signature="com_event_sink(mixed comobject, object sinkobject [, mixed sinkinterface])" returns="bool" doc="Connect events from a COM object to a PHP object" ilk="function" src="COM.c"/>
      <scope name="com_propget" signature="com_propget(int module, string property_name [, mixed arg ... ])" returns="mixed" doc="Gets properties from a COM module" ilk="function" src="COM.c"/>
      <scope name="com_propput" signature="com_propput(int module, string property_name, mixed value, ...)" returns="bool" doc="Puts the properties for a module" ilk="function" src="COM.c"/>
      <scope name="com_load_typelib" signature="com_load_typelib(string typelib_name [, int case_insensitive])" returns="bool" doc="Loads a Typelib" ilk="function" src="COM.c"/>
      <scope name="com_isenum" signature="com_isenum(object com_module)" returns="bool" doc="Grabs an IEnumVariant" ilk="function" src="COM.c"/>
      <scope name="cpdf_global_set_document_limits" signature="cpdf_global_set_document_limits(int maxPages, int maxFonts, int maxImages, int maxAnnots, int maxObjects)" returns="bool" doc="Sets document settings for all documents" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_creator" signature="cpdf_set_creator(int pdfdoc, string creator)" returns="bool" doc="Sets the creator field" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_title" signature="cpdf_set_title(int pdfptr, string title)" returns="bool" doc="Fills the title field of the info structure" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_subject" signature="cpdf_set_subject(int pdfptr, string subject)" returns="bool" doc="Fills the subject field of the info structure" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_keywords" signature="cpdf_set_keywords(int pdfptr, string keywords)" returns="bool" doc="Fills the keywords field of the info structure" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_viewer_preferences" signature="cpdf_set_viewer_preferences(int pdfdoc, array preferences)" returns="bool" doc="How to show the document in the viewer" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_open" signature="cpdf_open(int compression [, string filename [, array doc_limits]])" returns="int" doc="Opens a new pdf document" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_close" signature="cpdf_close(int pdfdoc)" returns="void" doc="Closes the pdf document" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_page_init" signature="cpdf_page_init(int pdfdoc, int pagenr, int orientation, int height, int width [, float unit])" returns="bool" doc="Starts page" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_finalize_page" signature="cpdf_finalize_page(int pdfdoc, int pagenr)" returns="bool" doc="Ends the page to save memory" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_current_page" signature="cpdf_set_current_page(int pdfdoc, int pagenr)" returns="bool" doc="Sets page for output" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_begin_text" signature="cpdf_begin_text(int pdfdoc)" returns="bool" doc="Starts text section" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_end_text" signature="cpdf_end_text(int pdfdoc)" returns="bool" doc="Ends text section" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_show" signature="cpdf_show(int pdfdoc, string text)" returns="bool" doc="Output text at current position" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_show_xy" signature="cpdf_show_xy(int pdfdoc, string text, float x-koor, float y-koor [, int mode])" returns="bool" doc="Output text at position" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_continue_text" signature="cpdf_continue_text(int pdfdoc, string text)" returns="bool" doc="Outputs text in next line" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_text" signature="cpdf_text(int pdfdoc, string text [, float x-koor, float y-koor [, int mode [, float orientation [, int alignmode]]]])" returns="bool" doc="Outputs text" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_font" signature="cpdf_set_font(int pdfdoc, string font, float size, string encoding)" returns="bool" doc="Selects the current font face size and encoding" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_font_directories" signature="cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir)" returns="bool" doc="Sets directories to search when using external fonts" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_font_map_file" signature="cpdf_set_font_map_file(int pdfdoc, string filename)" returns="bool" doc="Sets fontname to filename translation map when using&#10;external fonts" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_leading" signature="cpdf_set_leading(int pdfdoc, float distance)" returns="bool" doc="Sets distance between text lines" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_text_rendering" signature="cpdf_set_text_rendering(int pdfdoc, int rendermode)" returns="bool" doc="Determines how text is rendered" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_horiz_scaling" signature="cpdf_set_horiz_scaling(int pdfdoc, float scale)" returns="bool" doc="Sets horizontal scaling of text" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_text_rise" signature="cpdf_set_text_rise(int pdfdoc, float value)" returns="bool" doc="Sets the text rise" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_text_matrix" signature="cpdf_set_text_matrix(int pdfdoc, arry matrix)" returns="bool" doc="Sets the text matrix" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_text_pos" signature="cpdf_set_text_pos(int pdfdoc, float x, float y [, int mode])" returns="bool" doc="Sets the position of text for the next cpdf show call" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_rotate_text" signature="cpdf_rotate_text(int pdfdoc, float angle)" returns="bool" doc="Sets text rotation angle" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_char_spacing" signature="cpdf_set_char_spacing(int pdfdoc, float space)" returns="bool" doc="Sets character spacing" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_word_spacing" signature="cpdf_set_word_spacing(int pdfdoc, float space)" returns="bool" doc="Sets spacing between words" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_stringwidth" signature="cpdf_stringwidth(int pdfdoc, string text)" returns="float" doc="Returns width of text in current font" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_save" signature="cpdf_save(int pdfdoc)" returns="bool" doc="Saves current enviroment" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_restore" signature="cpdf_restore(int pdfdoc)" returns="bool" doc="Restores formerly saved enviroment" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_translate" signature="cpdf_translate(int pdfdoc, float x, float y)" returns="bool" doc="Sets origin of coordinate system" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_scale" signature="cpdf_scale(int pdfdoc, float x_scale, float y_scale)" returns="bool" doc="Sets scaling" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_rotate" signature="cpdf_rotate(int pdfdoc, float angle)" returns="bool" doc="Sets rotation" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setflat" signature="cpdf_setflat(int pdfdoc, float value)" returns="bool" doc="Sets flatness" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setlinejoin" signature="cpdf_setlinejoin(int pdfdoc, int value)" returns="bool" doc="Sets linejoin parameter" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setlinecap" signature="cpdf_setlinecap(int pdfdoc, int value)" returns="bool" doc="Sets linecap parameter" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setmiterlimit" signature="cpdf_setmiterlimit(int pdfdoc, float value)" returns="bool" doc="Sets miter limit" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setlinewidth" signature="cpdf_setlinewidth(int pdfdoc, float width)" returns="bool" doc="Sets line width" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setdash" signature="cpdf_setdash(int pdfdoc, long white, long black)" returns="bool" doc="Sets dash pattern" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_moveto" signature="cpdf_moveto(int pdfdoc, float x, float y [, int mode])" returns="bool" doc="Sets current point" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_rmoveto" signature="cpdf_rmoveto(int pdfdoc, float x, float y [, int mode])" returns="bool" doc="Sets current point" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_curveto" signature="cpdf_curveto(int pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode])" returns="bool" doc="Draws a curve" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_lineto" signature="cpdf_lineto(int pdfdoc, float x, float y [, int mode])" returns="bool" doc="Draws a line" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_rlineto" signature="cpdf_rlineto(int pdfdoc, float x, float y [, int mode])" returns="bool" doc="Draws a line relative to current point" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_circle" signature="cpdf_circle(int pdfdoc, float x, float y, float radius [, int mode])" returns="bool" doc="Draws a circle" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_arc" signature="cpdf_arc(int pdfdoc, float x, float y, float radius, float start, float end [, int mode])" returns="bool" doc="Draws an arc" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_rect" signature="cpdf_rect(int pdfdoc, float x, float y, float width, float height [, int mode])" returns="bool" doc="Draws a rectangle" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_newpath" signature="cpdf_newpath(int pdfdoc)" returns="bool" doc="Starts new path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_closepath" signature="cpdf_closepath(int pdfdoc)" returns="bool" doc="Close path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_closepath_stroke" signature="cpdf_closepath_stroke(int pdfdoc)" returns="bool" doc="Close path and draw line along path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_stroke" signature="cpdf_stroke(int pdfdoc)" returns="bool" doc="Draws line along path path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_fill" signature="cpdf_fill(int pdfdoc)" returns="bool" doc="Fills current path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_fill_stroke" signature="cpdf_fill_stroke(int pdfdoc)" returns="bool" doc="Fills and stroke current path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_closepath_fill_stroke" signature="cpdf_closepath_fill_stroke(int pdfdoc)" returns="bool" doc="Close fill and stroke current path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_clip" signature="cpdf_clip(int pdfdoc)" returns="bool" doc="Clips to current path" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setgray_fill" signature="cpdf_setgray_fill(int pdfdoc, float value)" returns="bool" doc="Sets filling color to gray value" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setgray_stroke" signature="cpdf_setgray_stroke(int pdfdoc, float value)" returns="bool" doc="Sets drawing color to gray value" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setgray" signature="cpdf_setgray(int pdfdoc, float value)" returns="bool" doc="Sets drawing and filling color to gray value" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setrgbcolor_fill" signature="cpdf_setrgbcolor_fill(int pdfdoc, float red, float green, float blue)" returns="bool" doc="Sets filling color to rgb color value" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setrgbcolor_stroke" signature="cpdf_setrgbcolor_stroke(int pdfdoc, float red, float green, float blue)" returns="bool" doc="Sets drawing color to RGB color value" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_setrgbcolor" signature="cpdf_setrgbcolor(int pdfdoc, float red, float green, float blue)" returns="bool" doc="Sets drawing and filling color to RGB color value" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_page_animation" signature="cpdf_set_page_animation(int pdfdoc, int transition, float duration, float direction, int orientation, int inout)" returns="bool" doc="Sets transition between pages" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_finalize" signature="cpdf_finalize(int pdfdoc)" returns="bool" doc="Creates PDF doc in memory" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_output_buffer" signature="cpdf_output_buffer(int pdfdoc)" returns="bool" doc="Returns the internal memory stream as string" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_save_to_file" signature="cpdf_save_to_file(int pdfdoc, string filename)" returns="bool" doc="Saves the internal memory stream to a file" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_import_jpeg" signature="cpdf_import_jpeg(int pdfdoc, string filename, float x, float y, float angle, float width, float height, float x_scale, float y_scale, int gsave [, int mode])" returns="bool" doc="Includes JPEG image" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_place_inline_image" signature="cpdf_place_inline_image(int pdfdoc, int gdimage, float x, float y, float angle, fload width, float height, int gsave [, int mode])" returns="bool" doc="Includes image" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_add_annotation" signature="cpdf_add_annotation(int pdfdoc, float xll, float yll, float xur, float xur, string title, string text [, int mode])" returns="bool" doc="Sets annotation" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_set_action_url" signature="cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode])" returns="void" doc="Sets hyperlink" ilk="function" src="cpdf.c"/>
      <scope name="cpdf_add_outline" signature="cpdf_add_outline(int pdfdoc, int lastoutline, int sublevel, int open, int pagenr, string title)" returns="int" doc="Adds outline" ilk="function" src="cpdf.c"/>
      <scope name="crack_opendict" signature="crack_opendict(string dictionary)" returns="resource" doc="Opens a new cracklib dictionary" ilk="function" src="crack.c"/>
      <scope name="crack_closedict" signature="crack_closedict([resource dictionary])" returns="bool" doc="Closes an open cracklib dictionary" ilk="function" src="crack.c"/>
      <scope name="crack_check" signature="crack_check([resource dictionary,] string password)" returns="bool" doc="Performs an obscure check with the given password" ilk="function" src="crack.c"/>
      <scope name="crack_getlastmessage" signature="crack_getlastmessage(void)" returns="string" doc="Returns the message from the last obscure check" ilk="function" src="crack.c"/>
      <scope name="ctype_alnum" signature="ctype_alnum(mixed c)" returns="bool" doc="Checks for alphanumeric character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_alpha" signature="ctype_alpha(mixed c)" returns="bool" doc="Checks for alphabetic character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_cntrl" signature="ctype_cntrl(mixed c)" returns="bool" doc="Checks for control character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_digit" signature="ctype_digit(mixed c)" returns="bool" doc="Checks for numeric character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_lower" signature="ctype_lower(mixed c)" returns="bool" doc="Checks for lowercase character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_graph" signature="ctype_graph(mixed c)" returns="bool" doc="Checks for any printable character s except space" ilk="function" src="ctype.c"/>
      <scope name="ctype_print" signature="ctype_print(mixed c)" returns="bool" doc="Checks for printable character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_punct" signature="ctype_punct(mixed c)" returns="bool" doc="Checks for any printable character which is not&#10;whitespace or an alphanumeric character" ilk="function" src="ctype.c"/>
      <scope name="ctype_space" signature="ctype_space(mixed c)" returns="bool" doc="Checks for whitespace character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_upper" signature="ctype_upper(mixed c)" returns="bool" doc="Checks for uppercase character s" ilk="function" src="ctype.c"/>
      <scope name="ctype_xdigit" signature="ctype_xdigit(mixed c)" returns="bool" doc="Checks for character s representing a hexadecimal digit" ilk="function" src="ctype.c"/>
      <scope name="curl_version" signature="curl_version(void)" returns="string" doc="Return cURL version information" ilk="function" src="curl.c"/>
      <scope name="curl_init" signature="curl_init([string url])" returns="resource" doc="Initialize a CURL session" ilk="function" src="curl.c"/>
      <scope name="curl_setopt" signature="curl_setopt(resource ch, int option, mixed value)" returns="bool" doc="Set an option for a CURL transfer" ilk="function" src="curl.c"/>
      <scope name="curl_exec" signature="curl_exec(resource ch)" returns="bool" doc="Perform a CURL session" ilk="function" src="curl.c"/>
      <scope name="curl_getinfo" signature="curl_getinfo(resource ch, int opt)" returns="mixed" doc="Get information regarding a specific transfer" ilk="function" src="curl.c"/>
      <scope name="curl_error" signature="curl_error(resource ch)" returns="string" doc="Return a string contain the last error for the current&#10;session" ilk="function" src="curl.c"/>
      <scope name="curl_errno" signature="curl_errno(resource ch)" returns="int" doc="Return an integer containing the last error number" ilk="function" src="curl.c"/>
      <scope name="curl_close" signature="curl_close(resource ch)" returns="void" doc="Close a CURL session" ilk="function" src="curl.c"/>
      <scope name="cyrus_connect" signature="cyrus_connect([ string host [, string port [, int flags]]])" returns="resource" doc="Connect to a Cyrus IMAP server" ilk="function" src="cyrus.c"/>
      <scope name="cyrus_authenticate" signature="cyrus_authenticate( resource connection [, string mechlist [, string service [, string user [, int minssf [, int maxssf]]]]])" returns="void" doc="Authenticate agaings a Cyrus IMAP server" ilk="function" src="cyrus.c"/>
      <scope name="cyrus_bind" signature="cyrus_bind( resource connection, array callbacks)" returns="bool" doc="Bind callbacks to a Cyrus IMAP connection" ilk="function" src="cyrus.c"/>
      <scope name="cyrus_unbind" signature="cyrus_unbind( resource connection, string trigger_name)" returns="bool" doc="Unbind" ilk="function" src="cyrus.c"/>
      <scope name="cyrus_query" signature="cyrus_query( resource connection, string query)" returns="bool" doc="Send a query to a Cyrus IMAP server" ilk="function" src="cyrus.c"/>
      <scope name="cyrus_close" signature="cyrus_close( resource connection)" returns="bool" doc="Close connection to a cyrus server" ilk="function" src="cyrus.c"/>
      <scope name="dblist" signature="dblist(void)" returns="string" doc="Describes the dbm-compatible library being used" ilk="function" src="db.c"/>
      <scope name="dbmopen" signature="dbmopen(string filename, string mode)" returns="int" doc="Opens a dbm database" ilk="function" src="db.c"/>
      <scope name="dbmclose" signature="dbmclose(int dbm_identifier)" returns="bool" doc="Closes a dbm database" ilk="function" src="db.c"/>
      <scope name="dbminsert" signature="dbminsert(int dbm_identifier, string key, string value)" returns="int" doc="Inserts a value for a key in a dbm database" ilk="function" src="db.c"/>
      <scope name="dbmreplace" signature="dbmreplace(int dbm_identifier, string key, string value)" returns="int" doc="Replaces the value for a key in a dbm database" ilk="function" src="db.c"/>
      <scope name="dbmfetch" signature="dbmfetch(int dbm_identifier, string key)" returns="string" doc="Fetches a value for a key from a dbm database" ilk="function" src="db.c"/>
      <scope name="dbmexists" signature="dbmexists(int dbm_identifier, string key)" returns="int" doc="Tells if a value exists for a key in a dbm database" ilk="function" src="db.c"/>
      <scope name="dbmdelete" signature="dbmdelete(int dbm_identifier, string key)" returns="int" doc="Deletes the value for a key from a dbm database" ilk="function" src="db.c"/>
      <scope name="dbmfirstkey" signature="dbmfirstkey(int dbm_identifier)" returns="string" doc="Retrieves the first key from a dbm database" ilk="function" src="db.c"/>
      <scope name="dbmnextkey" signature="dbmnextkey(int dbm_identifier, string key)" returns="string" doc="Retrieves the next key from a dbm database" ilk="function" src="db.c"/>
      <scope name="dba_popen" signature="dba_popen(string path, string mode [, string handlername, string ...])" returns="resource" doc="Opens path using the specified handler in mode&#10;persistently" ilk="function" src="dba.c"/>
      <scope name="dba_open" signature="dba_open(string path, string mode [, string handlername, string ...])" returns="resource" doc="Opens path using the specified handler in mode" ilk="function" src="dba.c"/>
      <scope name="dba_close" signature="dba_close(resource handle)" returns="void" doc="Closes database" ilk="function" src="dba.c"/>
      <scope name="dba_exists" signature="dba_exists(string key, resource handle)" returns="bool" doc="Checks if the specified key exists" ilk="function" src="dba.c"/>
      <scope name="dba_fetch" signature="dba_fetch(string key, [int skip ,] resource handle)" returns="string" doc="Fetches the data associated with key" ilk="function" src="dba.c"/>
      <scope name="dba_firstkey" signature="dba_firstkey(resource handle)" returns="string" doc="Resets the internal key pointer and returns the first&#10;key" ilk="function" src="dba.c"/>
      <scope name="dba_nextkey" signature="dba_nextkey(resource handle)" returns="string" doc="Returns the next key" ilk="function" src="dba.c"/>
      <scope name="dba_delete" signature="dba_delete(string key, resource handle)" returns="bool" doc="Deletes the entry associated with key If inifile remove&#10;all other key lines" ilk="function" src="dba.c"/>
      <scope name="dba_insert" signature="dba_insert(string key, string value, resource handle)" returns="bool" doc="If not inifile Insert value as key return false if key&#10;exists already If inifile Add vakue as key next" ilk="function" src="dba.c"/>
      <scope name="dba_replace" signature="dba_replace(string key, string value, resource handle)" returns="bool" doc="Inserts value as key replaces key if key exists already&#10;If inifile remove all other key lines" ilk="function" src="dba.c"/>
      <scope name="dba_optimize" signature="dba_optimize(resource handle)" returns="bool" doc="Optimizes e g clean up vacuum database" ilk="function" src="dba.c"/>
      <scope name="dba_sync" signature="dba_sync(resource handle)" returns="bool" doc="Synchronizes database" ilk="function" src="dba.c"/>
      <scope name="dba_handlers" signature="dba_handlers([bool full_info])" returns="array" doc="List configured database handlers" ilk="function" src="dba.c"/>
      <scope name="dba_list" signature="dba_list()" returns="array" doc="List opened databases" ilk="function" src="dba.c"/>
      <scope name="dbase_open" signature="dbase_open(string name, int mode)" returns="int" doc="Opens a dBase-format database file" ilk="function" src="dbase.c"/>
      <scope name="dbase_close" signature="dbase_close(int identifier)" returns="bool" doc="Closes an open dBase-format database file" ilk="function" src="dbase.c"/>
      <scope name="dbase_numrecords" signature="dbase_numrecords(int identifier)" returns="int" doc="Returns the number of records in the database" ilk="function" src="dbase.c"/>
      <scope name="dbase_numfields" signature="dbase_numfields(int identifier)" returns="int" doc="Returns the number of fields columns in the database" ilk="function" src="dbase.c"/>
      <scope name="dbase_pack" signature="dbase_pack(int identifier)" returns="bool" doc="Packs the database deletes records marked for deletion" ilk="function" src="dbase.c"/>
      <scope name="dbase_add_record" signature="dbase_add_record(int identifier, array data)" returns="bool" doc="Adds a record to the database" ilk="function" src="dbase.c"/>
      <scope name="dbase_replace_record" signature="dbase_replace_record(int identifier, array data, int recnum)" returns="bool" doc="Replaces a record to the database" ilk="function" src="dbase.c"/>
      <scope name="dbase_delete_record" signature="dbase_delete_record(int identifier, int record)" returns="bool" doc="Marks a record to be deleted" ilk="function" src="dbase.c"/>
      <scope name="dbase_get_record" signature="dbase_get_record(int identifier, int record)" returns="array" doc="Returns an array representing a record from the&#10;database" ilk="function" src="dbase.c"/>
      <scope name="dbase_get_record_with_names" signature="dbase_get_record_with_names(int identifier, int record)" returns="array" doc="Returns an associative array representing a record from&#10;the database" ilk="function" src="dbase.c"/>
      <scope name="dbase_create" signature="dbase_create(string filename, array fields)" returns="bool" doc="Creates a new dBase-format database file" ilk="function" src="dbase.c"/>
      <scope name="dbx_connect" signature="dbx_connect(string module_name, string host, string db, string username, string password [, bool persistent])" returns="dbx_link_object" doc="Returns a dbx link object on success and returns on&#10;failure" ilk="function" src="dbx.c"/>
      <scope name="dbx_close" signature="dbx_close(dbx_link_object dbx_link)" returns="bool" doc="Returns success or failure" ilk="function" src="dbx.c"/>
      <scope name="dbx_query" signature="dbx_query(dbx_link_object dbx_link, string sql_statement [, long flags])" returns="dbx_result_object" doc="Returns a dbx link object on success and returns on&#10;failure" ilk="function" src="dbx.c"/>
      <scope name="dbx_error" signature="dbx_error(dbx_link_object dbx_link)" returns="void" doc="Returns success or failure" ilk="function" src="dbx.c"/>
      <scope name="dbx_esc" signature="dbx_esc(dbx_link_object dbx_link, string sz)" returns="string" doc="Returns escaped string or NULL on error" ilk="function" src="dbx.c"/>
      <scope name="dbx_compare" signature="dbx_compare(array row_x, array row_y, string columnname [, int flags])" returns="int" doc="Returns row y columnname - row x columnname converted&#10;to - or" ilk="function" src="dbx.c"/>
      <scope name="dbx_sort" signature="dbx_sort(object dbx_result, string compare_function_name)" returns="int" doc="Returns on failure on success" ilk="function" src="dbx.c"/>
      <scope name="dio_open" signature="dio_open(string filename, int flags[, int mode])" returns="resource" doc="Open a new filename with specified permissions of flags&#10;and creation permissions of mode" ilk="function" src="dio.c"/>
      <scope name="dio_read" signature="dio_read(resource fd[, int n])" returns="string" doc="Read n bytes from fd and return them if n is not&#10;specified read k" ilk="function" src="dio.c"/>
      <scope name="dio_write" signature="dio_write(resource fd, string data[, int len])" returns="int" doc="Write data to fd with optional truncation at length" ilk="function" src="dio.c"/>
      <scope name="dio_truncate" signature="dio_truncate(resource fd, int offset)" returns="bool" doc="Truncate file descriptor fd to offset bytes" ilk="function" src="dio.c"/>
      <scope name="dio_stat" signature="dio_stat(resource fd)" returns="array" doc="Get stat information about the file descriptor fd" ilk="function" src="dio.c"/>
      <scope name="dio_seek" signature="dio_seek(resource fd, int pos, int whence)" returns="int" doc="Seek to pos on fd from whence" ilk="function" src="dio.c"/>
      <scope name="dio_fcntl" signature="dio_fcntl(resource fd, int cmd[, mixed arg])" returns="mixed" doc="Perform a c library fcntl on fd" ilk="function" src="dio.c"/>
      <scope name="dio_tcsetattr" signature="dio_tcsetattr(resource fd,  array args )" returns="mixed" doc="Perform a c library tcsetattr on fd" ilk="function" src="dio.c"/>
      <scope name="dio_close" signature="dio_close(resource fd)" returns="void" doc="Close the file descriptor given by fd" ilk="function" src="dio.c"/>
      <scope name="domxml_test" signature="domxml_test(int id)" returns="int" doc="Unity function for testing" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_attr_name" signature="domxml_attr_name(void)" returns="array" doc="Returns list of attribute names Notice domxml node name&#10;does exactly the same for attribute-nodes is this&#10;function here still" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_attr_value" signature="domxml_attr_value(void)" returns="array" doc="Returns list of attribute names" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_attr_set_value" signature="domxml_attr_set_value(string content)" returns="bool" doc="Set value of attribute" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_attr_specified" signature="domxml_attr_specified(void)" returns="array" doc="Returns list of attribute names" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_pi_target" signature="domxml_pi_target(void)" returns="array" doc="Returns target of pi" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_pi_data" signature="domxml_pi_data(void)" returns="array" doc="Returns data of pi" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_cdata_length" signature="domxml_cdata_length(void)" returns="array" doc="Returns list of attribute names" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node" signature="domxml_node(string name)" returns="object" doc="Creates node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_name" signature="domxml_node_name(void)" returns="object" doc="Returns name of node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_value" signature="domxml_node_value(void)" returns="object" doc="Returns name of value" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_is_blank_node" signature="domxml_is_blank_node(void)" returns="bool" doc="Returns true if node is blank" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_type" signature="domxml_node_type(void)" returns="int" doc="Returns the type of the node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_clone_node" signature="domxml_clone_node([bool deep])" returns="object" doc="Clones a node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_first_child" signature="domxml_node_first_child(void)" returns="object" doc="Returns first child from list of children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_last_child" signature="domxml_node_last_child(void)" returns="object" doc="Returns last child from list of children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_next_sibling" signature="domxml_node_next_sibling(void)" returns="object" doc="Returns next child from list of children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_previous_sibling" signature="domxml_node_previous_sibling(void)" returns="object" doc="Returns previous child from list of children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_owner_document" signature="domxml_node_owner_document(void)" returns="object" doc="Returns document this node belongs to" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_has_child_nodes" signature="domxml_node_has_child_nodes(void)" returns="object" doc="Returns true if node has children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_has_attributes" signature="domxml_node_has_attributes(void)" returns="object" doc="Returns true if node has attributes" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_prefix" signature="domxml_node_prefix(void)" returns="string" doc="Returns namespace prefix of node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_namespace_uri" signature="domxml_node_namespace_uri(void)" returns="string" doc="Returns namespace uri of node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_parent" signature="domxml_node_parent(void)" returns="object" doc="Returns parent of node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_children" signature="domxml_node_children(void)" returns="array" doc="Returns list of children nodes" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_unlink_node" signature="domxml_node_unlink_node([object node])" returns="void" doc="Deletes the node from tree but not from memory" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_replace_node" signature="domxml_node_replace_node(object domnode)" returns="object" doc="Replaces one node with another node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_append_child" signature="domxml_node_append_child(object domnode)" returns="object" doc="Adds node to list of children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_append_sibling" signature="domxml_node_append_sibling(object domnode)" returns="object" doc="Adds node to list of siblings" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_insert_before" signature="domxml_node_insert_before(object newnode, object refnode)" returns="object" doc="Adds node in list of nodes before given node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_remove_child" signature="domxml_node_remove_child(object domnode)" returns="object" doc="Removes node from list of children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_replace_child" signature="domxml_node_replace_child(object newnode, object oldnode)" returns="object" doc="Replaces node in list of children" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_set_name" signature="domxml_node_set_name(string name)" returns="bool" doc="Sets name of a node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_attributes" signature="domxml_node_attributes(void)" returns="array" doc="Returns list of attributes of node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_new_child" signature="domxml_node_new_child(string name, string content)" returns="object" doc="Adds child node to parent node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_set_content" signature="domxml_node_set_content(string content)" returns="bool" doc="Sets content of a node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_get_content" signature="domxml_node_get_content()" returns="string" doc="Gets content of a node Read the value of a node this&#10;can be either the text carried directly by" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_notation_public_id" signature="domxml_notation_public_id(void)" returns="string" doc="Returns public id of notation node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_notation_system_id" signature="domxml_notation_system_id(void)" returns="string" doc="Returns system ID of notation node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_element" signature="domxml_element(string name)" returns="object" doc="Constructor of DomElement" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_tagname" signature="domxml_elem_tagname(void)" returns="string" doc="Returns tag name of element node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_get_attribute" signature="domxml_elem_get_attribute(string attrname)" returns="string" doc="Returns value of given attribute" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_set_attribute" signature="domxml_elem_set_attribute(string attrname, string value)" returns="bool" doc="Sets value of given attribute" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_remove_attribute" signature="domxml_elem_remove_attribute(string attrname)" returns="string" doc="Removes given attribute" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_get_attribute_node" signature="domxml_elem_get_attribute_node(string attrname)" returns="string" doc="Returns value of given attribute" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_set_attribute_node" signature="domxml_elem_set_attribute_node(object attr)" returns="bool" doc="Sets value of given attribute" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_has_attribute" signature="domxml_elem_has_attribute(string attrname)" returns="string" doc="Checks for existenz given attribute" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_get_elements_by_tagname" signature="domxml_doc_get_elements_by_tagname(string tagname [,object xpathctx_handle] )" returns="string" doc="Returns array with nodes with given tagname in document&#10;or empty array if not found" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_get_element_by_id" signature="domxml_doc_get_element_by_id(string id)" returns="string" doc="Returns element for given id or false if not found" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_elem_get_elements_by_tagname" signature="domxml_elem_get_elements_by_tagname(string tagname)" returns="string" doc="Returns array with nodes with given tagname in element&#10;or empty array if not found" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doctype_name" signature="domxml_doctype_name(void)" returns="array" doc="Returns name of DocumentType" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doctype_system_id" signature="domxml_doctype_system_id(void)" returns="array" doc="Returns system id of DocumentType" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doctype_public_id" signature="domxml_doctype_public_id(void)" returns="array" doc="Returns public id of DocumentType" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doctype_entities" signature="domxml_doctype_entities(void)" returns="array" doc="Returns list of entities" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doctype_notations" signature="domxml_doctype_notations(void)" returns="array" doc="Returns list of notations" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_doctype" signature="domxml_doc_doctype(void)" returns="object" doc="Returns DomDocumentType" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_implementation" signature="domxml_doc_implementation(void)" returns="object" doc="Returns DomeDOMImplementation" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_document_element" signature="domxml_doc_document_element(int domnode)" returns="object" doc="Returns root node of document" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_element" signature="domxml_doc_create_element(string name)" returns="object" doc="Creates new element node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_element_ns" signature="domxml_doc_create_element_ns(string uri, string name [, string prefix])" returns="object" doc="Creates new element node with a namespace" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_add_namespace" signature="domxml_node_add_namespace(string uri, string prefix)" returns="bool" doc="Adds a namespace declaration to a node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_set_namespace" signature="domxml_node_set_namespace(string uri [, string prefix])" returns="void" doc="Sets the namespace of a node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_text_node" signature="domxml_doc_create_text_node(string content)" returns="object" doc="Creates new text node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_comment" signature="domxml_doc_create_comment(string content)" returns="object" doc="Creates new comment node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_attribute" signature="domxml_doc_create_attribute(string name, string value)" returns="object" doc="Creates new attribute node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_cdata_section" signature="domxml_doc_create_cdata_section(string content)" returns="object" doc="Creates new cdata node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_entity_reference" signature="domxml_doc_create_entity_reference(string name)" returns="object" doc="Creates new cdata node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_create_processing_instruction" signature="domxml_doc_create_processing_instruction(string name)" returns="object" doc="Creates new processing instruction node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_imported_node" signature="domxml_doc_imported_node(object node, bool recursive)" returns="object" doc="Creates new element node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_dtd" signature="domxml_dtd(void)" returns="object" doc="Returns DTD of document" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_dump_mem" signature="domxml_dump_mem(object doc_handle [, int format][, encoding])" returns="string" doc="Dumps document into string and optionally formats it" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_dump_mem_file" signature="domxml_dump_mem_file(string filename [, int compressmode [, int format]])" returns="int" doc="Dumps document into file and uses compression if&#10;specified Returns false on error otherwise the length&#10;of the xml-document uncompressed" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_dump_node" signature="domxml_dump_node(object doc_handle, object node_handle [, int format [, int level]])" returns="string" doc="Dumps node into string" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_ids" signature="domxml_doc_ids(object doc_handle)" returns="string" doc="Returns array of ids" ilk="function" src="php_domxml.c"/>
      <scope name="xmldoc" signature="xmldoc(string xmldoc[, int mode[, array error]])" returns="object" doc="Creates DOM object of XML document" ilk="function" src="php_domxml.c"/>
      <scope name="xmldocfile" signature="xmldocfile(string filename[, int mode[, array error])" returns="object" doc="Creates DOM object of XML document in file" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_html_dump_mem" signature="domxml_html_dump_mem([int doc_handle])" returns="string" doc="Dumps document into string as HTML" ilk="function" src="php_domxml.c"/>
      <scope name="html_doc" signature="html_doc(string html_doc [, bool from_file])" returns="object" doc="Creates DOM object of HTML document" ilk="function" src="php_domxml.c"/>
      <scope name="html_doc_file" signature="html_doc_file(string filename)" returns="object" doc="Creates DOM object of HTML document in file" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_substitute_entities_default" signature="domxml_substitute_entities_default(bool enable)" returns="bool" doc="Set and return the previous value for default entity&#10;support" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_node_text_concat" signature="domxml_node_text_concat(string content)" returns="bool" doc="Add string tocontent of a node" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_add_root" signature="domxml_add_root(string name)" returns="object" doc="Adds root node to document" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_set_root" signature="domxml_set_root(int domnode)" returns="bool" doc="Sets root node of document" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_validate" signature="domxml_doc_validate(array &amp;error)" returns="bool" doc="Validates a DomDocument according to his DTD" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_new_xmldoc" signature="domxml_new_xmldoc(string version)" returns="object" doc="Creates new xmldoc" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_free_doc" signature="domxml_doc_free_doc()" returns="bool" doc="Frees xmldoc and removed objects from hash" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser" signature="domxml_parser([string buf[,string filename]])" returns="object" doc="Creates new xmlparser" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_start_document" signature="domxml_parser_start_document()" returns="bool" doc="starts a document" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_end_document" signature="domxml_parser_end_document()" returns="bool" doc="ends a document" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_start_element" signature="domxml_parser_start_element(string tagname, array attributes)" returns="bool" doc="Starts an element and adds attributes" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_end_element" signature="domxml_parser_end_element(string tagname)" returns="bool" doc="Ends an element" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_comment" signature="domxml_parser_comment(string comment)" returns="bool" doc="Adds a comment" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_cdata_section" signature="domxml_parser_cdata_section(string chunk)" returns="bool" doc="adds a cdata block" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_characters" signature="domxml_parser_characters(string characters)" returns="bool" doc="Adds characters" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_entity_reference" signature="domxml_parser_entity_reference(string reference)" returns="bool" doc="Adds entity reference" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_processing_instruction" signature="domxml_parser_processing_instruction(string target, string data)" returns="bool" doc="Adds processing instruction" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_namespace_decl" signature="domxml_parser_namespace_decl(string href, string prefix)" returns="bool" doc="Adds namespace declaration" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_add_chunk" signature="domxml_parser_add_chunk(string chunk)" returns="bool" doc="adds xml-chunk to parser" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_end" signature="domxml_parser_end([string chunk])" returns="object" doc="Ends parsing and returns DomDocument" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_get_document" signature="domxml_parser_get_document()" returns="object" doc="Returns DomDocument from parser" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_parser_set_keep_blanks" signature="domxml_parser_set_keep_blanks(bool mode)" returns="bool" doc="Determines how to handle blanks" ilk="function" src="php_domxml.c"/>
      <scope name="node_namespace" signature="node_namespace([int node])" returns="int" doc="Returns list of namespaces" ilk="function" src="php_domxml.c"/>
      <scope name="node_children" signature="node_children([int node])" returns="int" doc="Returns list of children nodes" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xmltree" signature="domxml_xmltree(string xmltree)" returns="object" doc="Creates a tree of PHP objects from an XML document" ilk="function" src="php_domxml.c"/>
      <scope name="xpath_init" signature="xpath_init(void)" returns="bool" doc="Initializing XPath environment" ilk="function" src="php_domxml.c"/>
      <scope name="xpath_new_context" signature="xpath_new_context([int doc_handle])" returns="object" doc="Creates new XPath context" ilk="function" src="php_domxml.c"/>
      <scope name="xptr_new_context" signature="xptr_new_context([int doc_handle])" returns="object" doc="Creates new XPath context" ilk="function" src="php_domxml.c"/>
      <scope name="xpath_eval" signature="xpath_eval([object xpathctx_handle,] string str)" returns="object" doc="Evaluates the XPath Location Path in the given string" ilk="function" src="php_domxml.c"/>
      <scope name="xpath_eval_expression" signature="xpath_eval_expression([object xpathctx_handle,] string str)" returns="object" doc="Evaluates the XPath expression in the given string" ilk="function" src="php_domxml.c"/>
      <scope name="xpath_register_ns" signature="xpath_register_ns([object xpathctx_handle,] string namespace_prefix, string namespace_uri)" returns="bool" doc="Registeres the given namespace in the passed XPath&#10;context" ilk="function" src="php_domxml.c"/>
      <scope name="xptr_eval" signature="xptr_eval([int xpathctx_handle,] string str)" returns="int" doc="Evaluates the XPtr Location Path in the given string" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_version" signature="domxml_version(void)" returns="string" doc="Get XML library version" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_doc_xinclude" signature="domxml_doc_xinclude()" returns="int" doc="Substitutues xincludes in a DomDocument" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xslt_stylesheet" signature="domxml_xslt_stylesheet(string xsltstylesheet)" returns="object" doc="Creates XSLT Stylesheet object from string" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xslt_stylesheet_doc" signature="domxml_xslt_stylesheet_doc(object xmldoc)" returns="object" doc="Creates XSLT Stylesheet object from DOM Document object" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xslt_stylesheet_file" signature="domxml_xslt_stylesheet_file(string filename)" returns="object" doc="Creates XSLT Stylesheet object from file" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xslt_process" signature="domxml_xslt_process(object xslstylesheet, object xmldoc [, array xslt_parameters [, bool xpath_parameters [, string profileFilename]]])" returns="object" doc="Perform an XSLT transformation" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xslt_result_dump_mem" signature="domxml_xslt_result_dump_mem(object xslstylesheet, object xmldoc)" returns="string" doc="output XSLT result to memory" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xslt_result_dump_file" signature="domxml_xslt_result_dump_file(object xslstylesheet, object xmldoc, string filename[, int compression])" returns="int" doc="output XSLT result to File" ilk="function" src="php_domxml.c"/>
      <scope name="domxml_xslt_version" signature="domxml_xslt_version(void)" returns="string" doc="Get XSLT library version" ilk="function" src="php_domxml.c"/>
      <scope name="dotnet_load" signature="dotnet_load(string assembly_name [, string datatype_name, int codepage])" returns="int" doc="Loads a DOTNET module" ilk="function" src="dotnet.cpp"/>
      <scope name="exif_tagname" signature="exif_tagname(index)" returns="string" doc="Get headername for index or false if not defined" ilk="function" src="exif.c"/>
      <scope name="exif_read_data" signature="exif_read_data(string filename [, sections_needed [, sub_arrays[, read_thumbnail]]])" returns="array" doc="Reads header data from the JPEG TIFF image filename and&#10;optionally reads the internal thumbnails" ilk="function" src="exif.c"/>
      <scope name="exif_thumbnail" signature="exif_thumbnail(string filename [, &amp;width, &amp;height [, &amp;imagetype]])" returns="string" doc="Reads the embedded thumbnail" ilk="function" src="exif.c"/>
      <scope name="exif_imagetype" signature="exif_imagetype(string imagefile)" returns="int" doc="Get the type of an image" ilk="function" src="exif.c"/>
      <scope name="fbsql_connect" signature="fbsql_connect([string hostname [, string username [, string password]]])" returns="resource" doc="Create a connection to a database server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_pconnect" signature="fbsql_pconnect([string hostname [, string username [, string password]]])" returns="resource" doc="Create a persistant connection to a database server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_close" signature="fbsql_close([resource link_identifier])" returns="int" doc="Close a connection to a database server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_set_transaction" signature="fbsql_set_transaction(resource link_identifier, int locking, int isolation)" returns="void" doc="Sets the transaction locking and isolation" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_autocommit" signature="fbsql_autocommit(resource link_identifier [, bool OnOff])" returns="bool" doc="Turns on auto-commit" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_commit" signature="fbsql_commit([resource link_identifier])" returns="bool" doc="Commit the transaction" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_rollback" signature="fbsql_rollback([resource link_identifier])" returns="int" doc="Rollback all statments since last commit" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_create_blob" signature="fbsql_create_blob(string blob_data [, resource link_identifier])" returns="string" doc="Create a BLOB in the database for use with an insert or&#10;update statement" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_create_clob" signature="fbsql_create_clob(string clob_data [, resource link_identifier])" returns="string" doc="Create a CLOB in the database for use with an insert or&#10;update statement" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_set_lob_mode" signature="fbsql_set_lob_mode(resource result, int lob_mode)" returns="bool" doc="Sets the mode for how LOB data re retreived actual data&#10;or a handle" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_read_blob" signature="fbsql_read_blob(string blob_handle [, resource link_identifier])" returns="string" doc="Read the BLOB data identified by blob handle" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_read_clob" signature="fbsql_read_clob(string clob_handle [, resource link_identifier])" returns="string" doc="Read the CLOB data identified by clob handle" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_blob_size" signature="fbsql_blob_size(string blob_handle [, resource link_identifier])" returns="string" doc="Get the size of a BLOB identified by blob handle" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_clob_size" signature="fbsql_clob_size(string clob_handle [, resource link_identifier])" returns="string" doc="Get the size of a CLOB identified by clob handle" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_hostname" signature="fbsql_hostname(resource link_identifier [, string host_name])" returns="string" doc="Get or set the host name used with a connection" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_database" signature="fbsql_database(resource link_identifier [, string database])" returns="string" doc="Get or set the database name used with a connection" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_database_password" signature="fbsql_database_password(resource link_identifier [, string database_password])" returns="string" doc="Get or set the databsae password used with a connection" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_username" signature="fbsql_username(resource link_identifier [, string username])" returns="string" doc="Get or set the host user used with a connection" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_password" signature="fbsql_password(resource link_identifier [, string password])" returns="string" doc="Get or set the user password used with a connection" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_select_db" signature="fbsql_select_db([string database_name [, resource link_identifier]])" returns="bool" doc="Select the database to open" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_change_user" signature="fbsql_change_user(string user, string password [, string database [, resource link_identifier]])" returns="int" doc="Change the user for a session" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_create_db" signature="fbsql_create_db(string database_name [, resource link_identifier])" returns="bool" doc="Create a new database on the server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_drop_db" signature="fbsql_drop_db(string database_name [, resource link_identifier])" returns="int" doc="Drop a database on the server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_start_db" signature="fbsql_start_db(string database_name [, resource link_identifier])" returns="bool" doc="Start a database on the server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_stop_db" signature="fbsql_stop_db(string database_name [, resource link_identifier])" returns="bool" doc="Stop a database on the server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_db_status" signature="fbsql_db_status(string database_name [, resource link_identifier])" returns="int" doc="Gets the status Stopped Starting Running Stopping for a&#10;given database" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_query" signature="fbsql_query(string query [, resource link_identifier])" returns="resource" doc="Send one or more SQL statements to the server and&#10;execute them" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_db_query" signature="fbsql_db_query(string database_name, string query [, resource link_identifier])" returns="resource" doc="Send one or more SQL statements to a specified database&#10;on the server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_list_dbs" signature="fbsql_list_dbs([resource link_identifier])" returns="resource" doc="Retreive a list of all databases on the server" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_list_tables" signature="fbsql_list_tables(string database [, int link_identifier])" returns="resource" doc="Retreive a list of all tables from the specifoied&#10;database" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_list_fields" signature="fbsql_list_fields(string database_name, string table_name [, resource link_identifier])" returns="resource" doc="Retrieve a list of all fields for the specified&#10;database table" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_error" signature="fbsql_error([resource link_identifier])" returns="string" doc="Returns the last error string" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_errno" signature="fbsql_errno([resource link_identifier])" returns="int" doc="Returns the last error code" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_warnings" signature="fbsql_warnings([int flag])" returns="bool" doc="Enable or disable FrontBase warnings" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_affected_rows" signature="fbsql_affected_rows([resource link_identifier])" returns="int" doc="Get the number of rows affected by the last statement" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_insert_id" signature="fbsql_insert_id([resource link_identifier])" returns="int" doc="Get the internal index for the last insert statement" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_result" signature="fbsql_result(int result [, int row [, mixed field]])" returns="mixed" doc="" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_next_result" signature="fbsql_next_result(int result)" returns="int" doc="Switch to the next result if multiple results are&#10;available" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_num_rows" signature="fbsql_num_rows(int result)" returns="int" doc="Get number of rows" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_num_fields" signature="fbsql_num_fields(int result)" returns="int" doc="Get number of fields in the result set" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_fetch_row" signature="fbsql_fetch_row(resource result)" returns="array" doc="Fetch a row of data Returns an indexed array" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_fetch_assoc" signature="fbsql_fetch_assoc(resource result)" returns="object" doc="Detch a row of data Returns an assoc array" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_fetch_object" signature="fbsql_fetch_object(resource result [, int result_type])" returns="object" doc="Fetch a row of data Returns an object" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_fetch_array" signature="fbsql_fetch_array(resource result [, int result_type])" returns="array" doc="Fetches a result row as an array associative numeric or&#10;both" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_data_seek" signature="fbsql_data_seek(int result, int row_number)" returns="int" doc="Move the internal row counter to the specified row&#10;number" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_fetch_lengths" signature="fbsql_fetch_lengths(int result)" returns="array" doc="Returns an array of the lengths of each column in the&#10;result set" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_fetch_field" signature="fbsql_fetch_field(int result [, int field_index])" returns="object" doc="Get the field properties for a specified field index" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_field_seek" signature="fbsql_field_seek(int result [, int field_index])" returns="bool" doc="" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_field_name" signature="fbsql_field_name(int result [, int field_index])" returns="string" doc="Get the column name for a specified field index" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_field_table" signature="fbsql_field_table(int result [, int field_index])" returns="string" doc="Get the table name for a specified field index" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_field_len" signature="fbsql_field_len(int result [, int field_index])" returns="string" doc="Get the column length for a specified field index" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_field_type" signature="fbsql_field_type(int result [, int field_index])" returns="string" doc="Get the field type for a specified field index" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_field_flags" signature="fbsql_field_flags(int result [, int field_index])" returns="string" doc="" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_table_name" signature="fbsql_table_name(resource result, int index)" returns="string" doc="Retreive the table name for index after a call to fbsql&#10;list tables" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_free_result" signature="fbsql_free_result(resource result)" returns="bool" doc="free the memory used to store a result" ilk="function" src="php_fbsql.c"/>
      <scope name="fbsql_get_autostart_info" signature="fbsql_get_autostart_info([resource link_identifier])" returns="array" doc="" ilk="function" src="php_fbsql.c"/>
      <scope name="fdf_open" signature="fdf_open(string filename)" returns="resource" doc="Opens a new FDF document" ilk="function" src="fdf.c"/>
      <scope name="fdf_open_string" signature="fdf_open_string(string fdf_data)" returns="resource" doc="Opens a new FDF document from string" ilk="function" src="fdf.c"/>
      <scope name="fdf_create" signature="fdf_create(void)" returns="resource" doc="Creates a new FDF document" ilk="function" src="fdf.c"/>
      <scope name="fdf_close" signature="fdf_close(resource fdfdoc)" returns="bool" doc="Closes the FDF document" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_value" signature="fdf_get_value(resource fdfdoc, string fieldname [, int which])" returns="string" doc="Gets the value of a field as string" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_value" signature="fdf_set_value(resource fdfdoc, string fieldname, mixed value [, int isname])" returns="bool" doc="Sets the value of a field" ilk="function" src="fdf.c"/>
      <scope name="fdf_next_field_name" signature="fdf_next_field_name(resource fdfdoc [, string fieldname])" returns="string" doc="Gets the name of the next field name or the first field&#10;name" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_ap" signature="fdf_set_ap(resource fdfdoc, string fieldname, int face, string filename, int pagenr)" returns="bool" doc="Sets the appearence of a field" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_ap" signature="fdf_get_ap(resource fdfdoc, string fieldname, int face, string filename)" returns="bool" doc="Gets the appearance of a field and creates a PDF&#10;document out of it" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_encoding" signature="fdf_get_encoding(resource fdf)" returns="string" doc="Gets FDF file encoding scheme" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_status" signature="fdf_set_status(resource fdfdoc, string status)" returns="bool" doc="Sets the value of Status key" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_status" signature="fdf_get_status(resource fdfdoc)" returns="string" doc="Gets the value of Status key" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_file" signature="fdf_set_file(resource fdfdoc, string filename [, string target_frame])" returns="bool" doc="Sets the value of F key" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_file" signature="fdf_get_file(resource fdfdoc)" returns="string" doc="Gets the value of F key" ilk="function" src="fdf.c"/>
      <scope name="fdf_save" signature="fdf_save(resource fdfdoc [, string filename])" returns="mixed" doc="Writes out the FDF file" ilk="function" src="fdf.c"/>
      <scope name="fdf_save_string" signature="fdf_save_string(resource fdfdoc)" returns="mixed" doc="Returns the FDF file as a string" ilk="function" src="fdf.c"/>
      <scope name="fdf_add_template" signature="fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)" returns="bool" doc="Adds a template into the FDF document" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_flags" signature="fdf_set_flags(resource fdfdoc, string fieldname, int whichflags, int newflags)" returns="bool" doc="Sets flags for a field in the FDF document" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_flags" signature="fdf_get_flags(resorce fdfdoc, string fieldname, int whichflags)" returns="int" doc="Gets the flags of a field" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_opt" signature="fdf_set_opt(resource fdfdoc, string fieldname, int element, string value, string name)" returns="bool" doc="Sets a value in the opt array for a field" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_opt" signature="fdf_get_opt(resource fdfdof, string fieldname [, int element])" returns="mixed" doc="Gets a value from the opt array of a field" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_submit_form_action" signature="fdf_set_submit_form_action(resource fdfdoc, string fieldname, int whichtrigger, string url, int flags)" returns="bool" doc="Sets the submit form action for a field" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_javascript_action" signature="fdf_set_javascript_action(resource fdfdoc, string fieldname, int whichtrigger, string script)" returns="bool" doc="Sets the javascript action for a field" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_encoding" signature="fdf_set_encoding(resource fdf_document, string encoding)" returns="bool" doc="Sets FDF encoding either Shift-JIS or Unicode" ilk="function" src="fdf.c"/>
      <scope name="fdf_errno" signature="fdf_errno(void)" returns="int" doc="Gets error code for last operation" ilk="function" src="fdf.c"/>
      <scope name="fdf_error" signature="fdf_error([int errno])" returns="string" doc="Gets error description for error code" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_version" signature="fdf_get_version([resource fdfdoc])" returns="string" doc="Gets version number for FDF api or file" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_version" signature="fdf_set_version(resourece fdfdoc, string version)" returns="bool" doc="Sets FDF version for a file" ilk="function" src="fdf.c"/>
      <scope name="fdf_add_doc_javascript" signature="fdf_add_doc_javascript(resource fdfdoc, string scriptname, string script)" returns="bool" doc="Add javascript code to the fdf file" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_on_import_javascript" signature="fdf_set_on_import_javascript(resource fdfdoc, string script [, bool before_data_import])" returns="bool" doc="Adds javascript code to be executed when Acrobat opens&#10;the FDF" ilk="function" src="fdf.c"/>
      <scope name="fdf_set_target_frame" signature="fdf_set_target_frame(resource fdfdoc, string target)" returns="bool" doc="Sets target frame for form" ilk="function" src="fdf.c"/>
      <scope name="fdf_remove_item" signature="fdf_remove_item(resource fdfdoc, string fieldname, int item)" returns="bool" doc="Sets target frame for form" ilk="function" src="fdf.c"/>
      <scope name="fdf_get_attachment" signature="fdf_get_attachment(resource fdfdoc, string fieldname, string savepath)" returns="array" doc="Get attached uploaded file" ilk="function" src="fdf.c"/>
      <scope name="fdf_enum_values" signature="fdf_enum_values(resource fdfdoc, callback function [, mixed userdata])" returns="bool" doc="Call a user defined function for each document value" ilk="function" src="fdf.c"/>
      <scope name="fdf_header" signature="fdf_header(void)" returns="void" doc="Set FDF specific HTTP headers" ilk="function" src="fdf.c"/>
      <scope name="filepro" signature="filepro(string directory)" returns="bool" doc="Read and verify the map file" ilk="function" src="filepro.c"/>
      <scope name="filepro_rowcount" signature="filepro_rowcount(void)" returns="int" doc="Find out how many rows are in a filePro database" ilk="function" src="filepro.c"/>
      <scope name="filepro_fieldname" signature="filepro_fieldname(int fieldnumber)" returns="string" doc="Gets the name of a field" ilk="function" src="filepro.c"/>
      <scope name="filepro_fieldtype" signature="filepro_fieldtype(int field_number)" returns="string" doc="Gets the type of a field" ilk="function" src="filepro.c"/>
      <scope name="filepro_fieldwidth" signature="filepro_fieldwidth(int field_number)" returns="int" doc="Gets the width of a field" ilk="function" src="filepro.c"/>
      <scope name="filepro_fieldcount" signature="filepro_fieldcount(void)" returns="int" doc="Find out how many fields are in a filePro database" ilk="function" src="filepro.c"/>
      <scope name="filepro_retrieve" signature="filepro_retrieve(int row_number, int field_number)" returns="string" doc="Retrieves data from a filePro database" ilk="function" src="filepro.c"/>
      <scope name="fribidi_log2vis" signature="fribidi_log2vis(string logical_str, long direction, long charset)" returns="string" doc="Convert a logical string to a visual one" ilk="function" src="fribidi.c"/>
      <scope name="fribidi_charset_info" signature="fribidi_charset_info(int charset)" returns="array" doc="Returns an array containing information about the&#10;specified charset" ilk="function" src="fribidi.c"/>
      <scope name="fribidi_get_charsets" signature="fribidi_get_charsets()" returns="array" doc="Returns an array containing available charsets" ilk="function" src="fribidi.c"/>
      <scope name="ftp_connect" signature="ftp_connect(string host [, int port [, int timeout]])" returns="resource" doc="Opens a FTP stream" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_ssl_connect" signature="ftp_ssl_connect(string host [, int port [, int timeout]])" returns="resource" doc="Opens a FTP-SSL stream" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_login" signature="ftp_login(resource stream, string username, string password)" returns="bool" doc="Logs into the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_pwd" signature="ftp_pwd(resource stream)" returns="string" doc="Returns the present working directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_cdup" signature="ftp_cdup(resource stream)" returns="bool" doc="Changes to the parent directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_chdir" signature="ftp_chdir(resource stream, string directory)" returns="bool" doc="Changes directories" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_exec" signature="ftp_exec(resource stream, string command)" returns="bool" doc="Requests execution of a program on the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_mkdir" signature="ftp_mkdir(resource stream, string directory)" returns="string" doc="Creates a directory and returns the absolute path for&#10;the new directory or false on error" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_rmdir" signature="ftp_rmdir(resource stream, string directory)" returns="bool" doc="Removes a directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nlist" signature="ftp_nlist(resource stream, string directory)" returns="array" doc="Returns an array of filenames in the given directory" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_rawlist" signature="ftp_rawlist(resource stream, string directory [, bool recursive])" returns="array" doc="Returns a detailed listing of a directory as an array&#10;of output lines" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_systype" signature="ftp_systype(resource stream)" returns="string" doc="Returns the system type identifier" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_fget" signature="ftp_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" returns="bool" doc="Retrieves a file from the FTP server and writes it to&#10;an open file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_fget" signature="ftp_nb_fget(resource stream, resource fp, string remote_file, int mode[, int resumepos])" returns="bool" doc="Retrieves a file from the FTP server asynchronly and&#10;writes it to an open file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_pasv" signature="ftp_pasv(resource stream, bool pasv)" returns="bool" doc="Turns passive mode on or off" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_get" signature="ftp_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" returns="bool" doc="Retrieves a file from the FTP server and writes it to a&#10;local file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_get" signature="ftp_nb_get(resource stream, string local_file, string remote_file, int mode[, int resume_pos])" returns="int" doc="Retrieves a file from the FTP server nbhronly and&#10;writes it to a local file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_continue" signature="ftp_nb_continue(resource stream)" returns="int" doc="Continues retrieving sending a file nbronously" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_fput" signature="ftp_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" returns="bool" doc="Stores a file from an open file to the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_fput" signature="ftp_nb_fput(resource stream, string remote_file, resource fp, int mode[, int startpos])" returns="bool" doc="Stores a file from an open file to the FTP server&#10;nbronly" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_put" signature="ftp_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" returns="bool" doc="Stores a file on the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_nb_put" signature="ftp_nb_put(resource stream, string remote_file, string local_file, int mode[, int startpos])" returns="bool" doc="Stores a file on the FTP server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_size" signature="ftp_size(resource stream, string filename)" returns="int" doc="Returns the size of the file or - on error" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_mdtm" signature="ftp_mdtm(resource stream, string filename)" returns="int" doc="Returns the last modification time of the file or - on&#10;error" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_rename" signature="ftp_rename(resource stream, string src, string dest)" returns="bool" doc="Renames the given file to a new path" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_delete" signature="ftp_delete(resource stream, string file)" returns="bool" doc="Deletes a file" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_site" signature="ftp_site(resource stream, string cmd)" returns="bool" doc="Sends a SITE command to the server" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_close" signature="ftp_close(resource stream)" returns="void" doc="Closes the FTP stream" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_set_option" signature="ftp_set_option(resource stream, int option, mixed value)" returns="bool" doc="Sets an FTP option" ilk="function" src="php_ftp.c"/>
      <scope name="ftp_get_option" signature="ftp_get_option(resource stream, int option)" returns="mixed" doc="Gets an FTP option" ilk="function" src="php_ftp.c"/>
      <scope name="gd_info" signature="gd_info()" returns="array" doc="" ilk="function" src="gd.c"/>
      <scope name="imageloadfont" signature="imageloadfont(string filename)" returns="int" doc="Load a new font" ilk="function" src="gd.c"/>
      <scope name="imagesetstyle" signature="imagesetstyle(resource im, array styles)" returns="bool" doc="Set the line drawing styles for use with imageline and&#10;IMG COLOR STYLED" ilk="function" src="gd.c"/>
      <scope name="imagecreatetruecolor" signature="imagecreatetruecolor(int x_size, int y_size)" returns="resource" doc="Create a new true color image" ilk="function" src="gd.c"/>
      <scope name="imageistruecolor" signature="imageistruecolor(resource im)" returns="bool" doc="return true if the image uses truecolor" ilk="function" src="gd.c"/>
      <scope name="imagetruecolortopalette" signature="imagetruecolortopalette(resource im, bool ditherFlag, int colorsWanted)" returns="void" doc="Convert a true colour image to a palette based image&#10;with a number of colours optionally using dithering" ilk="function" src="gd.c"/>
      <scope name="imagecolormatch" signature="imagecolormatch(resource im1, resource im2)" returns="bool" doc="Makes the colors of the palette version of an image&#10;more closely match the true color version" ilk="function" src="gd.c"/>
      <scope name="imagesetthickness" signature="imagesetthickness(resource im, int thickness)" returns="bool" doc="Set line thickness for drawing lines ellipses&#10;rectangles polygons etc" ilk="function" src="gd.c"/>
      <scope name="imagefilledellipse" signature="imagefilledellipse(resource im, int cx, int cy, int w, int h, int color)" returns="bool" doc="Draw an ellipse" ilk="function" src="gd.c"/>
      <scope name="imagefilledarc" signature="imagefilledarc(resource im, int cx, int cy, int w, int h, int s, int e, int col, int style)" returns="bool" doc="Draw a filled partial ellipse" ilk="function" src="gd.c"/>
      <scope name="imagealphablending" signature="imagealphablending(resource im, bool on)" returns="bool" doc="Turn alpha blending mode on or off for the given image" ilk="function" src="gd.c"/>
      <scope name="imagesavealpha" signature="imagesavealpha(resource im, bool on)" returns="bool" doc="Include alpha channel to a saved image" ilk="function" src="gd.c"/>
      <scope name="imagelayereffect" signature="imagelayereffect(resource im, int effect)" returns="bool" doc="Set the alpha blending flag to use the bundled libgd&#10;layering effects" ilk="function" src="gd.c"/>
      <scope name="imagecolorallocatealpha" signature="imagecolorallocatealpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Allocate a color with an alpha level Works for true&#10;color and palette based images" ilk="function" src="gd.c"/>
      <scope name="imagecolorresolvealpha" signature="imagecolorresolvealpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Resolve Allocate a colour with an alpha level Works for&#10;true colour and palette based images" ilk="function" src="gd.c"/>
      <scope name="imagecolorclosestalpha" signature="imagecolorclosestalpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Find the closest matching colour with alpha&#10;transparency" ilk="function" src="gd.c"/>
      <scope name="imagecolorexactalpha" signature="imagecolorexactalpha(resource im, int red, int green, int blue, int alpha)" returns="int" doc="Find exact match for colour with transparency" ilk="function" src="gd.c"/>
      <scope name="imagecopyresampled" signature="imagecopyresampled(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" returns="bool" doc="Copy and resize part of an image using resampling to&#10;help ensure clarity" ilk="function" src="gd.c"/>
      <scope name="imagerotate" signature="imagerotate(resource src_im, float angle, int bgdcolor)" returns="resource" doc="Rotate an image using a custom angle" ilk="function" src="gd.c"/>
      <scope name="imagesettile" signature="imagesettile(resource image, resource tile)" returns="bool" doc="Set the tile image to tile when filling image with the&#10;IMG COLOR TILED color" ilk="function" src="gd.c"/>
      <scope name="imagesetbrush" signature="imagesetbrush(resource image, resource brush)" returns="bool" doc="Set the brush image to brush when filling image with&#10;the IMG COLOR BRUSHED color" ilk="function" src="gd.c"/>
      <scope name="imagecreate" signature="imagecreate(int x_size, int y_size)" returns="resource" doc="Create a new image" ilk="function" src="gd.c"/>
      <scope name="imagetypes" signature="imagetypes(void)" returns="int" doc="Return the types of images supported in a bitfield -&#10;GIF JPEG PNG WBMP XPM" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromstring" signature="imagecreatefromstring(string image)" returns="resource" doc="Create a new image from the image stream in the string" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgif" signature="imagecreatefromgif(string filename)" returns="resource" doc="Create a new image from GIF file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromjpeg" signature="imagecreatefromjpeg(string filename)" returns="resource" doc="Create a new image from JPEG file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefrompng" signature="imagecreatefrompng(string filename)" returns="resource" doc="Create a new image from PNG file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromxbm" signature="imagecreatefromxbm(string filename)" returns="resource" doc="Create a new image from XBM file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromxpm" signature="imagecreatefromxpm(string filename)" returns="resource" doc="Create a new image from XPM file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromwbmp" signature="imagecreatefromwbmp(string filename)" returns="resource" doc="Create a new image from WBMP file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgd" signature="imagecreatefromgd(string filename)" returns="resource" doc="Create a new image from GD file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgd2" signature="imagecreatefromgd2(string filename)" returns="resource" doc="Create a new image from GD file or URL" ilk="function" src="gd.c"/>
      <scope name="imagecreatefromgd2part" signature="imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)" returns="resource" doc="Create a new image from a given part of GD file or URL" ilk="function" src="gd.c"/>
      <scope name="imagegif" signature="imagegif(resource im [, string filename])" returns="bool" doc="Output GIF image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagepng" signature="imagepng(resource im [, string filename])" returns="bool" doc="Output PNG image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagejpeg" signature="imagejpeg(resource im [, string filename [, int quality]])" returns="bool" doc="Output JPEG image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagewbmp" signature="imagewbmp(resource im [, string filename, [, int foreground]])" returns="bool" doc="Output WBMP image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagegd" signature="imagegd(resource im [, string filename])" returns="bool" doc="Output GD image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagegd2" signature="imagegd2(resource im [, string filename, [, int chunk_size, [, int type]]])" returns="bool" doc="Output GD image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imagedestroy" signature="imagedestroy(resource im)" returns="bool" doc="Destroy an image" ilk="function" src="gd.c"/>
      <scope name="imagecolorallocate" signature="imagecolorallocate(resource im, int red, int green, int blue)" returns="int" doc="Allocate a color for an image" ilk="function" src="gd.c"/>
      <scope name="imagepalettecopy" signature="imagepalettecopy(resource dst, resource src)" returns="void" doc="Copy the palette from the src image onto the dst image" ilk="function" src="gd.c"/>
      <scope name="imagecolorat" signature="imagecolorat(resource im, int x, int y)" returns="int" doc="Get the index of the color of a pixel" ilk="function" src="gd.c"/>
      <scope name="imagecolorclosest" signature="imagecolorclosest(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the closest color to the specified&#10;color" ilk="function" src="gd.c"/>
      <scope name="imagecolorclosesthwb" signature="imagecolorclosesthwb(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the color which has the hue white and&#10;blackness nearest to the given color" ilk="function" src="gd.c"/>
      <scope name="imagecolordeallocate" signature="imagecolordeallocate(resource im, int index)" returns="bool" doc="De-allocate a color for an image" ilk="function" src="gd.c"/>
      <scope name="imagecolorresolve" signature="imagecolorresolve(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the specified color or its closest&#10;possible alternative" ilk="function" src="gd.c"/>
      <scope name="imagecolorexact" signature="imagecolorexact(resource im, int red, int green, int blue)" returns="int" doc="Get the index of the specified color" ilk="function" src="gd.c"/>
      <scope name="imagecolorset" signature="imagecolorset(resource im, int col, int red, int green, int blue)" returns="void" doc="Set the color for the specified palette index" ilk="function" src="gd.c"/>
      <scope name="imagecolorsforindex" signature="imagecolorsforindex(resource im, int col)" returns="array" doc="Get the colors for an index" ilk="function" src="gd.c"/>
      <scope name="imagegammacorrect" signature="imagegammacorrect(resource im, float inputgamma, float outputgamma)" returns="bool" doc="Apply a gamma correction to a GD image" ilk="function" src="gd.c"/>
      <scope name="imagesetpixel" signature="imagesetpixel(resource im, int x, int y, int col)" returns="bool" doc="Set a single pixel" ilk="function" src="gd.c"/>
      <scope name="imageline" signature="imageline(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a line" ilk="function" src="gd.c"/>
      <scope name="imagedashedline" signature="imagedashedline(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a dashed line" ilk="function" src="gd.c"/>
      <scope name="imagerectangle" signature="imagerectangle(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a rectangle" ilk="function" src="gd.c"/>
      <scope name="imagefilledrectangle" signature="imagefilledrectangle(resource im, int x1, int y1, int x2, int y2, int col)" returns="bool" doc="Draw a filled rectangle" ilk="function" src="gd.c"/>
      <scope name="imagearc" signature="imagearc(resource im, int cx, int cy, int w, int h, int s, int e, int col)" returns="bool" doc="Draw a partial ellipse" ilk="function" src="gd.c"/>
      <scope name="imageellipse" signature="imageellipse(resource im, int cx, int cy, int w, int h, int color)" returns="bool" doc="Draw an ellipse" ilk="function" src="gd.c"/>
      <scope name="imagefilltoborder" signature="imagefilltoborder(resource im, int x, int y, int border, int col)" returns="bool" doc="Flood fill to specific color" ilk="function" src="gd.c"/>
      <scope name="imagefill" signature="imagefill(resource im, int x, int y, int col)" returns="bool" doc="Flood fill" ilk="function" src="gd.c"/>
      <scope name="imagecolorstotal" signature="imagecolorstotal(resource im)" returns="int" doc="Find out the number of colors in an image's palette" ilk="function" src="gd.c"/>
      <scope name="imagecolortransparent" signature="imagecolortransparent(resource im [, int col])" returns="int" doc="Define a color as transparent" ilk="function" src="gd.c"/>
      <scope name="imageinterlace" signature="imageinterlace(resource im [, int interlace])" returns="int" doc="Enable or disable interlace" ilk="function" src="gd.c"/>
      <scope name="imagepolygon" signature="imagepolygon(resource im, array point, int num_points, int col)" returns="bool" doc="Draw a polygon" ilk="function" src="gd.c"/>
      <scope name="imagefilledpolygon" signature="imagefilledpolygon(resource im, array point, int num_points, int col)" returns="bool" doc="Draw a filled polygon" ilk="function" src="gd.c"/>
      <scope name="imagefontwidth" signature="imagefontwidth(int font)" returns="int" doc="Get font width" ilk="function" src="gd.c"/>
      <scope name="imagefontheight" signature="imagefontheight(int font)" returns="int" doc="Get font height" ilk="function" src="gd.c"/>
      <scope name="imagechar" signature="imagechar(resource im, int font, int x, int y, string c, int col)" returns="bool" doc="Draw a character" ilk="function" src="gd.c"/>
      <scope name="imagecharup" signature="imagecharup(resource im, int font, int x, int y, string c, int col)" returns="bool" doc="Draw a character rotated degrees counter-clockwise" ilk="function" src="gd.c"/>
      <scope name="imagestring" signature="imagestring(resource im, int font, int x, int y, string str, int col)" returns="bool" doc="Draw a string horizontally" ilk="function" src="gd.c"/>
      <scope name="imagestringup" signature="imagestringup(resource im, int font, int x, int y, string str, int col)" returns="bool" doc="Draw a string vertically - rotated degrees&#10;counter-clockwise" ilk="function" src="gd.c"/>
      <scope name="imagecopy" signature="imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)" returns="bool" doc="Copy part of an image" ilk="function" src="gd.c"/>
      <scope name="imagecopymerge" signature="imagecopymerge(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" returns="bool" doc="Merge one part of an image with another" ilk="function" src="gd.c"/>
      <scope name="imagecopymergegray" signature="imagecopymergegray(resource src_im, resource dst_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)" returns="bool" doc="Merge one part of an image with another" ilk="function" src="gd.c"/>
      <scope name="imagecopyresized" signature="imagecopyresized(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int dst_w, int dst_h, int src_w, int src_h)" returns="bool" doc="Copy and resize part of an image" ilk="function" src="gd.c"/>
      <scope name="imagesx" signature="imagesx(resource im)" returns="int" doc="Get image width" ilk="function" src="gd.c"/>
      <scope name="imagesy" signature="imagesy(resource im)" returns="int" doc="Get image height" ilk="function" src="gd.c"/>
      <scope name="imageftbbox" signature="imageftbbox(float size, float angle, string font_file, string text [, array extrainfo])" returns="array" doc="Give the bounding box of a text using fonts via&#10;freetype" ilk="function" src="gd.c"/>
      <scope name="imagefttext" signature="imagefttext(resource im, float size, float angle, int x, int y, int col, string font_file, string text [, array extrainfo])" returns="array" doc="Write text to the image using fonts via freetype" ilk="function" src="gd.c"/>
      <scope name="imagettfbbox" signature="imagettfbbox(float size, float angle, string font_file, string text)" returns="array" doc="Give the bounding box of a text using TrueType fonts" ilk="function" src="gd.c"/>
      <scope name="imagettftext" signature="imagettftext(resource im, float size, float angle, int x, int y, int col, string font_file, string text)" returns="array" doc="Write text to the image using a TrueType font" ilk="function" src="gd.c"/>
      <scope name="imagepsloadfont" signature="imagepsloadfont(string pathname)" returns="resource" doc="Load a new font from specified file" ilk="function" src="gd.c"/>
      <scope name="imagepscopyfont" signature="imagepscopyfont(int font_index)" returns="int" doc="Make a copy of a font for purposes like extending or&#10;reenconding" ilk="function" src="gd.c"/>
      <scope name="imagepsfreefont" signature="imagepsfreefont(resource font_index)" returns="bool" doc="Free memory used by a font" ilk="function" src="gd.c"/>
      <scope name="imagepsencodefont" signature="imagepsencodefont(resource font_index, string filename)" returns="bool" doc="To change a fonts character encoding vector" ilk="function" src="gd.c"/>
      <scope name="imagepsextendfont" signature="imagepsextendfont(resource font_index, float extend)" returns="bool" doc="Extend or or condense if extend a font" ilk="function" src="gd.c"/>
      <scope name="imagepsslantfont" signature="imagepsslantfont(resource font_index, float slant)" returns="bool" doc="Slant a font" ilk="function" src="gd.c"/>
      <scope name="imagepstext" signature="imagepstext(resource image, string text, resource font, int size, int xcoord, int ycoord [, int space, int tightness, float angle, int antialias])" returns="array" doc="Rasterize a string over an image" ilk="function" src="gd.c"/>
      <scope name="imagepsbbox" signature="imagepsbbox(string text, resource font, int size [, int space, int tightness, int angle])" returns="array" doc="Return the bounding box needed by a string if&#10;rasterized" ilk="function" src="gd.c"/>
      <scope name="image2wbmp" signature="image2wbmp(resource im [, string filename [, int threshold]])" returns="bool" doc="Output WBMP image to browser or file" ilk="function" src="gd.c"/>
      <scope name="imageantialias" signature="imageantialias(resource im, bool on)" returns="bool" doc="Should antialiased functions used or not" ilk="function" src="gd.c"/>
      <scope name="textdomain" signature="textdomain(string domain)" returns="string" doc="Set the textdomain to domain Returns the current domain" ilk="function" src="gettext.c"/>
      <scope name="gettext" signature="gettext(string msgid)" returns="string" doc="Return the translation of msgid for the current domain&#10;or msgid unaltered if a translation does not exist" ilk="function" src="gettext.c"/>
      <scope name="dgettext" signature="dgettext(string domain_name, string msgid)" returns="string" doc="Return the translation of msgid for domain name or&#10;msgid unaltered if a translation does not exist" ilk="function" src="gettext.c"/>
      <scope name="dcgettext" signature="dcgettext(string domain_name, string msgid, long category)" returns="string" doc="Return the translation of msgid for domain name and&#10;category or msgid unaltered if a translation does not&#10;exist" ilk="function" src="gettext.c"/>
      <scope name="bindtextdomain" signature="bindtextdomain(string domain_name, string dir)" returns="string" doc="Bind to the text domain domain name looking for&#10;translations in dir Returns the current domain" ilk="function" src="gettext.c"/>
      <scope name="ngettext" signature="ngettext(string MSGID1, string MSGID2, int N)" returns="string" doc="Plural version of gettext" ilk="function" src="gettext.c"/>
      <scope name="gmp_init" signature="gmp_init(mixed number [, int base])" returns="resource" doc="Initializes GMP number" ilk="function" src="gmp.c"/>
      <scope name="gmp_intval" signature="gmp_intval(resource gmpnumber)" returns="int" doc="Gets signed long value of GMP number" ilk="function" src="gmp.c"/>
      <scope name="gmp_strval" signature="gmp_strval(resource gmpnumber [, int base])" returns="string" doc="Gets string representation of GMP number" ilk="function" src="gmp.c"/>
      <scope name="gmp_add" signature="gmp_add(resource a, resource b)" returns="resource" doc="Add a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_sub" signature="gmp_sub(resource a, resource b)" returns="resource" doc="Subtract b from a" ilk="function" src="gmp.c"/>
      <scope name="gmp_mul" signature="gmp_mul(resource a, resource b)" returns="resource" doc="Multiply a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_div_qr" signature="gmp_div_qr(resource a, resource b [, int round])" returns="array" doc="Divide a by b returns quotient and reminder" ilk="function" src="gmp.c"/>
      <scope name="gmp_div_r" signature="gmp_div_r(resource a, resource b [, int round])" returns="resource" doc="Divide a by b returns reminder only" ilk="function" src="gmp.c"/>
      <scope name="gmp_div_q" signature="gmp_div_q(resource a, resource b [, int round])" returns="resource" doc="Divide a by b returns quotient only" ilk="function" src="gmp.c"/>
      <scope name="gmp_mod" signature="gmp_mod(resource a, resource b)" returns="resource" doc="Computes a modulo b" ilk="function" src="gmp.c"/>
      <scope name="gmp_divexact" signature="gmp_divexact(resource a, resource b)" returns="resource" doc="Divide a by b using exact division algorithm" ilk="function" src="gmp.c"/>
      <scope name="gmp_neg" signature="gmp_neg(resource a)" returns="resource" doc="Negates a number" ilk="function" src="gmp.c"/>
      <scope name="gmp_abs" signature="gmp_abs(resource a)" returns="resource" doc="Calculates absolute value" ilk="function" src="gmp.c"/>
      <scope name="gmp_fact" signature="gmp_fact(int a)" returns="resource" doc="Calculates factorial function" ilk="function" src="gmp.c"/>
      <scope name="gmp_pow" signature="gmp_pow(resource base, int exp)" returns="resource" doc="Raise base to power exp" ilk="function" src="gmp.c"/>
      <scope name="gmp_powm" signature="gmp_powm(resource base, resource exp, resource mod)" returns="resource" doc="Raise base to power exp and take result modulo mod" ilk="function" src="gmp.c"/>
      <scope name="gmp_sqrt" signature="gmp_sqrt(resource a)" returns="resource" doc="Takes integer part of square root of a" ilk="function" src="gmp.c"/>
      <scope name="gmp_sqrtrem" signature="gmp_sqrtrem(resource a)" returns="array" doc="Square root with remainder" ilk="function" src="gmp.c"/>
      <scope name="gmp_perfect_square" signature="gmp_perfect_square(resource a)" returns="bool" doc="Checks if a is an exact square" ilk="function" src="gmp.c"/>
      <scope name="gmp_prob_prime" signature="gmp_prob_prime(resource a[, int reps])" returns="int" doc="Checks if a is probably prime" ilk="function" src="gmp.c"/>
      <scope name="gmp_gcd" signature="gmp_gcd(resource a, resource b)" returns="resource" doc="Computes greatest common denominator gcd of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_gcdext" signature="gmp_gcdext(resource a, resource b)" returns="array" doc="Computes G S and T such that AS BT G gcd' A B" ilk="function" src="gmp.c"/>
      <scope name="gmp_invert" signature="gmp_invert(resource a, resource b)" returns="resource" doc="Computes the inverse of a modulo b" ilk="function" src="gmp.c"/>
      <scope name="gmp_jacobi" signature="gmp_jacobi(resource a, resource b)" returns="int" doc="Computes Jacobi symbol" ilk="function" src="gmp.c"/>
      <scope name="gmp_legendre" signature="gmp_legendre(resource a, resource b)" returns="int" doc="Computes Legendre symbol" ilk="function" src="gmp.c"/>
      <scope name="gmp_cmp" signature="gmp_cmp(resource a, resource b)" returns="int" doc="Compares two numbers" ilk="function" src="gmp.c"/>
      <scope name="gmp_sign" signature="gmp_sign(resource a)" returns="int" doc="Gets the sign of the number" ilk="function" src="gmp.c"/>
      <scope name="gmp_random" signature="gmp_random([int limiter])" returns="resource" doc="Gets random number" ilk="function" src="gmp.c"/>
      <scope name="gmp_and" signature="gmp_and(resource a, resource b)" returns="resource" doc="Calculates logical AND of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_or" signature="gmp_or(resource a, resource b)" returns="resource" doc="Calculates logical OR of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_com" signature="gmp_com(resource a)" returns="resource" doc="Calculates one's complement of a" ilk="function" src="gmp.c"/>
      <scope name="gmp_xor" signature="gmp_xor(resource a, resource b)" returns="resource" doc="Calculates logical exclusive OR of a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_setbit" signature="gmp_setbit(resource &amp;a, int index[, bool set_clear])" returns="void" doc="Sets or clear bit in a" ilk="function" src="gmp.c"/>
      <scope name="gmp_clrbit" signature="gmp_clrbit(resource &amp;a, int index)" returns="void" doc="Clears bit in a" ilk="function" src="gmp.c"/>
      <scope name="gmp_popcount" signature="gmp_popcount(resource a)" returns="int" doc="Calculates the population count of a" ilk="function" src="gmp.c"/>
      <scope name="gmp_hamdist" signature="gmp_hamdist(resource a, resource b)" returns="int" doc="Calculates hamming distance between a and b" ilk="function" src="gmp.c"/>
      <scope name="gmp_scan0" signature="gmp_scan0(resource a, int start)" returns="int" doc="Finds first zero bit" ilk="function" src="gmp.c"/>
      <scope name="gmp_scan1" signature="gmp_scan1(resource a, int start)" returns="int" doc="Finds first non-zero bit" ilk="function" src="gmp.c"/>
      <scope name="hwapi_dummy" signature="hwapi_dummy(int link, int id, int msgid)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_init" signature="hwapi_init(string hostname, int port)" returns="void" doc="Hyperwave initialisation" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_hgcsp" signature="hwapi_hgcsp(string hostname, int port)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object" signature="hwapi_object(array object_in)" returns="object" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_mychildren" signature="hwapi_mychildren(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_children" signature="hwapi_children(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_parents" signature="hwapi_parents(string hostname, int port)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_find" signature="hwapi_find(array parameters)" returns="string" doc="Finds objects" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_identify" signature="hwapi_identify(string hostname, int port)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_remove" signature="hwapi_remove(array parameters)" returns="string" doc="Remove an object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_content" signature="hwapi_content(string hostname, int port)" returns="string" doc="Retrieve content of object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_copy" signature="hwapi_copy(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_link" signature="hwapi_link(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_move" signature="hwapi_move(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_lock" signature="hwapi_lock(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_unlock" signature="hwapi_unlock(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_replace" signature="hwapi_replace(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_insert" signature="hwapi_insert(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_insertdocument" signature="hwapi_insertdocument(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_insertcollection" signature="hwapi_insertcollection(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_insertanchor" signature="hwapi_insertanchor(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_srcanchors" signature="hwapi_srcanchors(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_dstanchors" signature="hwapi_dstanchors(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_objectbyanchor" signature="hwapi_objectbyanchor(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_dstofsrcanchor" signature="hwapi_dstofsrcanchor(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_srcsofdst" signature="hwapi_srcsofdst(array parameters)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_checkin" signature="hwapi_checkin(array parameters)" returns="string" doc="Checking in a document" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_checkout" signature="hwapi_checkout(array parameters)" returns="string" doc="Checking out a document" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_setcommittedversion" signature="hwapi_setcommittedversion(array parameters)" returns="string" doc="setcommittedversion" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_revert" signature="hwapi_revert(array parameters)" returns="string" doc="Reverting to a former document" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_history" signature="hwapi_history(array parameters)" returns="string" doc="history" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_removeversion" signature="hwapi_removeversion(array parameters)" returns="string" doc="Reverting to a former document" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_freeversion" signature="hwapi_freeversion(array parameters)" returns="object" doc="freeversion" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_configurationhistory" signature="hwapi_configurationhistory(array parameters)" returns="array" doc="Returns configuration history of object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_saveconfiguration" signature="hwapi_saveconfiguration(array parameters)" returns="object" doc="Save configuration for an object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_restoreconfiguration" signature="hwapi_restoreconfiguration(array parameters)" returns="object" doc="Restore configuration for an object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_mergeconfiguration" signature="hwapi_mergeconfiguration(array parameters)" returns="object" doc="Merge configuration for an object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_removeconfiguration" signature="hwapi_removeconfiguration(array parameters)" returns="object" doc="Removes configuration" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_user" signature="hwapi_user(array parameters)" returns="string" doc="Returns information about user" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_userlist" signature="hwapi_userlist(array parameters)" returns="string" doc="Returns list of login in users" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_hwstat" signature="hwapi_hwstat(array parameters)" returns="string" doc="Returns information about hgserver" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_dcstat" signature="hwapi_dcstat(array parameters)" returns="string" doc="Returns information about hgserver" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_dbstat" signature="hwapi_dbstat(array parameters)" returns="string" doc="Returns information about hgserver" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_ftstat" signature="hwapi_ftstat(array parameters)" returns="string" doc="Returns information about ftserver" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_info" signature="hwapi_info(array parameters)" returns="string" doc="Returns information about server" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_new" signature="hwapi_object_new()" returns="string" doc="Creates new HW API Object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_count" signature="hwapi_object_count()" returns="string" doc="Counts number of attributes of an HW API Object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_title" signature="hwapi_object_title(string language)" returns="string" doc="Returns title of HW API Object for given language" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_attreditable" signature="hwapi_object_attreditable(int attr, string username, bool is_system)" returns="string" doc="Hyperwave object attreditable function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_assign" signature="hwapi_object_assign(int object)" returns="object" doc="Hyperwave object assign function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_attribute" signature="hwapi_object_attribute(int index, object &amp;attribute)" returns="string" doc="Hyperwave object attribute function" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_insert" signature="hwapi_object_insert(object attr)" returns="string" doc="Inserts new HW API Attribute into HW API Object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_remove" signature="hwapi_object_remove(string name)" returns="string" doc="Removes HW API Attribute with given name from HW API&#10;Object" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_object_value" signature="hwapi_object_value(string name)" returns="string" doc="Returns attribute value of given attribute" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_attribute_new" signature="hwapi_attribute_new([string name][, string value])" returns="string" doc="Creates new HW API Attribute" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_attribute_key" signature="hwapi_attribute_key()" returns="string" doc="Returns key of an hwapi attribute" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_attribute_value" signature="hwapi_attribute_value()" returns="string" doc="Returns value of hw api attribute" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_attribute_values" signature="hwapi_attribute_values()" returns="string" doc="Returns all values of an attribute as an array" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_attribute_langdepvalue" signature="hwapi_attribute_langdepvalue(string language)" returns="string" doc="Returns value of attribute with givenn language" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_content_new" signature="hwapi_content_new([string name][, string value])" returns="string" doc="Creates new HW API Content" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_content_read" signature="hwapi_content_read(string buffer, int length)" returns="string" doc="Reads length bytes from content" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_content_mimetype" signature="hwapi_content_mimetype()" returns="string" doc="Returns MimeType of document" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_error_count" signature="hwapi_error_count()" returns="string" doc="Counts number of reasons of an HW API Error" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_error_reason" signature="hwapi_error_reason(int index)" returns="string" doc="Returns a reason of an HW API Error" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_reason_type" signature="hwapi_reason_type()" returns="string" doc="Returns the type of HW API Reason" ilk="function" src="hwapi.cpp"/>
      <scope name="hwapi_reason_description" signature="hwapi_reason_description(string language)" returns="string" doc="Returns description of HW API Reason" ilk="function" src="hwapi.cpp"/>
      <scope name="hw_connect" signature="hw_connect(string host, int port [string username [, string password]])" returns="int" doc="Connect to the Hyperwave server" ilk="function" src="hw.c"/>
      <scope name="hw_pconnect" signature="hw_pconnect(string host, int port [, string username [, string password]])" returns="int" doc="Connect to the Hyperwave server persistent" ilk="function" src="hw.c"/>
      <scope name="hw_close" signature="hw_close(int link)" returns="void" doc="Close connection to Hyperwave server" ilk="function" src="hw.c"/>
      <scope name="hw_info" signature="hw_info(int link)" returns="void" doc="Outputs info string" ilk="function" src="hw.c"/>
      <scope name="hw_error" signature="hw_error(int link)" returns="int" doc="Returns last error number" ilk="function" src="hw.c"/>
      <scope name="hw_errormsg" signature="hw_errormsg(int link)" returns="string" doc="Returns last error message" ilk="function" src="hw.c"/>
      <scope name="hw_root" signature="hw_root(void)" returns="int" doc="Returns object id of root collection" ilk="function" src="hw.c"/>
      <scope name="hw_stat" signature="hw_stat(int link)" returns="string" doc="Returns status string" ilk="function" src="hw.c"/>
      <scope name="hw_who" signature="hw_who(int link)" returns="array" doc="Returns names and info of users loged in" ilk="function" src="hw.c"/>
      <scope name="hw_dummy" signature="hw_dummy(int link, int id, int msgid)" returns="string" doc="Hyperwave dummy function" ilk="function" src="hw.c"/>
      <scope name="hw_getobject" signature="hw_getobject(int link, int objid [, string query])" returns="string" doc="Returns object record" ilk="function" src="hw.c"/>
      <scope name="hw_insertobject" signature="hw_insertobject(int link, string objrec, string parms)" returns="int" doc="Inserts an object" ilk="function" src="hw.c"/>
      <scope name="hw_getandlock" signature="hw_getandlock(int link, int objid)" returns="string" doc="Returns object record and locks object" ilk="function" src="hw.c"/>
      <scope name="hw_unlock" signature="hw_unlock(int link, int objid)" returns="void" doc="Unlocks object" ilk="function" src="hw.c"/>
      <scope name="hw_deleteobject" signature="hw_deleteobject(int link, int objid)" returns="void" doc="Deletes object" ilk="function" src="hw.c"/>
      <scope name="hw_changeobject" signature="hw_changeobject(int link, int objid, array attributes)" returns="void" doc="Changes attributes of an object obsolete" ilk="function" src="hw.c"/>
      <scope name="hw_modifyobject" signature="hw_modifyobject(int link, int objid, array remattributes, array addattributes [, int mode])" returns="void" doc="Modifies attributes of an object" ilk="function" src="hw.c"/>
      <scope name="hw_mv" signature="hw_mv(int link, array objrec, int from, int dest)" returns="void" doc="Moves object" ilk="function" src="hw.c"/>
      <scope name="hw_cp" signature="hw_cp(int link, array objrec, int dest)" returns="void" doc="Copies object" ilk="function" src="hw.c"/>
      <scope name="hw_gettext" signature="hw_gettext(int link, int objid [, int rootid])" returns="hwdoc" doc="Returns text document Links are relative to rootid if&#10;given" ilk="function" src="hw.c"/>
      <scope name="hw_edittext" signature="hw_edittext(int link, hwdoc doc)" returns="void" doc="Modifies text document" ilk="function" src="hw.c"/>
      <scope name="hw_getcgi" signature="hw_getcgi(int link, int objid)" returns="hwdoc" doc="Returns the output of a CGI script" ilk="function" src="hw.c"/>
      <scope name="hw_getremote" signature="hw_getremote(int link, int objid)" returns="int" doc="Returns the content of a remote document" ilk="function" src="hw.c"/>
      <scope name="n" signature="n(int link, string objrec)" returns="hw_getremotechildre" doc="Returns the remote document or an array of object&#10;records" ilk="function" src="hw.c"/>
      <scope name="hw_setlinkroot" signature="hw_setlinkroot(int link, int rootid)" returns="void" doc="Set the id to which links are calculated" ilk="function" src="hw.c"/>
      <scope name="hw_pipedocument" signature="hw_pipedocument(int link, int objid)" returns="hwdoc" doc="Returns document" ilk="function" src="hw.c"/>
      <scope name="hw_pipecgi" signature="hw_pipecgi(int link, int objid)" returns="hwdoc" doc="Returns output of CGI script" ilk="function" src="hw.c"/>
      <scope name="hw_insertdocument" signature="hw_insertdocument(int link, int parentid, hwdoc doc)" returns="void" doc="Insert new document" ilk="function" src="hw.c"/>
      <scope name="hw_new_document" signature="hw_new_document(string objrec, string data, int size)" returns="hwdoc" doc="Create a new document" ilk="function" src="hw.c"/>
      <scope name="hw_new_document_from_file" signature="hw_new_document_from_file(string objrec, string filename)" returns="hwdoc" doc="Create a new document from a file" ilk="function" src="hw.c"/>
      <scope name="hw_free_document" signature="hw_free_document(hwdoc doc)" returns="void" doc="Frees memory of document" ilk="function" src="hw.c"/>
      <scope name="hw_outputdocument" signature="hw_outputdocument(hwdoc doc)" returns="void" doc="An alias for hw output document" ilk="function" src="hw.c"/>
      <scope name="hw_output_document" signature="hw_output_document(hwdoc doc)" returns="void" doc="Prints document" ilk="function" src="hw.c"/>
      <scope name="hw_documentbodytag" signature="hw_documentbodytag(hwdoc doc [, string prefix])" returns="string" doc="An alias for hw document bodytag" ilk="function" src="hw.c"/>
      <scope name="hw_document_bodytag" signature="hw_document_bodytag(hwdoc doc [, string prefix])" returns="string" doc="Return bodytag prefixed by prefix" ilk="function" src="hw.c"/>
      <scope name="hw_document_content" signature="hw_document_content(hwdoc doc)" returns="string" doc="Returns content of document" ilk="function" src="hw.c"/>
      <scope name="hw_document_setcontent" signature="hw_document_setcontent(hwdoc doc, string content)" returns="int" doc="Sets replaces content of document" ilk="function" src="hw.c"/>
      <scope name="hw_documentsize" signature="hw_documentsize(hwdoc doc)" returns="int" doc="An alias for hw document size" ilk="function" src="hw.c"/>
      <scope name="hw_document_size" signature="hw_document_size(hwdoc doc)" returns="int" doc="Returns size of document" ilk="function" src="hw.c"/>
      <scope name="hw_documentattributes" signature="hw_documentattributes(hwdoc doc)" returns="string" doc="An alias for hw document attributes" ilk="function" src="hw.c"/>
      <scope name="hw_document_attributes" signature="hw_document_attributes(hwdoc doc)" returns="string" doc="Returns object record of document" ilk="function" src="hw.c"/>
      <scope name="hw_getparentsobj" signature="hw_getparentsobj(int link, int objid)" returns="array" doc="Returns array of parent object records" ilk="function" src="hw.c"/>
      <scope name="hw_getparents" signature="hw_getparents(int link, int objid)" returns="array" doc="Returns array of parent object ids" ilk="function" src="hw.c"/>
      <scope name="hw_children" signature="hw_children(int link, int objid)" returns="array" doc="Returns array of children object ids" ilk="function" src="hw.c"/>
      <scope name="hw_childrenobj" signature="hw_childrenobj(int link, int objid)" returns="array" doc="Returns array of children object records" ilk="function" src="hw.c"/>
      <scope name="hw_getchildcoll" signature="hw_getchildcoll(int link, int objid)" returns="array" doc="Returns array of child collection object ids" ilk="function" src="hw.c"/>
      <scope name="hw_getchildcollobj" signature="hw_getchildcollobj(int link, int objid)" returns="array" doc="Returns array of child collection object records" ilk="function" src="hw.c"/>
      <scope name="hw_docbyanchor" signature="hw_docbyanchor(int link, int anchorid)" returns="int" doc="Returns objid of document belonging to anchorid" ilk="function" src="hw.c"/>
      <scope name="hw_docbyanchorobj" signature="hw_docbyanchorobj(int link, int anchorid)" returns="array" doc="Returns object record of document belonging to anchorid" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyquery" signature="hw_getobjectbyquery(int link, string query, int maxhits)" returns="array" doc="Search for query and return maxhits objids" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyqueryobj" signature="hw_getobjectbyqueryobj(int link, string query, int maxhits)" returns="array" doc="Search for query and return maxhits object records" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyquerycoll" signature="hw_getobjectbyquerycoll(int link, int collid, string query, int maxhits)" returns="array" doc="Search for query in collection and return maxhits&#10;objids" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyquerycollobj" signature="hw_getobjectbyquerycollobj(int link, int collid, string query, int maxhits)" returns="array" doc="Search for query in collection and return maxhits&#10;object records" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyftquery" signature="hw_getobjectbyftquery(int link, string query, int maxhits)" returns="array" doc="Search for query as fulltext and return maxhits objids" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyftqueryobj" signature="hw_getobjectbyftqueryobj(int link, string query, int maxhits)" returns="array" doc="Search for query as fulltext and return maxhits object&#10;records" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyftquerycoll" signature="hw_getobjectbyftquerycoll(int link, int collid, string query, int maxhits)" returns="array" doc="Search for fulltext query in collection and return&#10;maxhits objids" ilk="function" src="hw.c"/>
      <scope name="hw_getobjectbyftquerycollobj" signature="hw_getobjectbyftquerycollobj(int link, int collid, string query, int maxhits)" returns="array" doc="Search for fulltext query in collection and return&#10;maxhits object records" ilk="function" src="hw.c"/>
      <scope name="hw_getchilddoccoll" signature="hw_getchilddoccoll(int link, int objid)" returns="array" doc="Returns all children ids which are documents" ilk="function" src="hw.c"/>
      <scope name="hw_getchilddoccollobj" signature="hw_getchilddoccollobj(int link, int objid)" returns="array" doc="Returns all children object records which are documents" ilk="function" src="hw.c"/>
      <scope name="hw_getanchors" signature="hw_getanchors(int link, int objid)" returns="array" doc="Return all anchors of object" ilk="function" src="hw.c"/>
      <scope name="hw_getanchorsobj" signature="hw_getanchorsobj(int link, int objid)" returns="array" doc="Return all object records of anchors of object" ilk="function" src="hw.c"/>
      <scope name="hw_getusername" signature="hw_getusername(int link)" returns="string" doc="Returns the current user name" ilk="function" src="hw.c"/>
      <scope name="hw_identify" signature="hw_identify(int link, string username, string password)" returns="void" doc="Identifies at Hyperwave server" ilk="function" src="hw.c"/>
      <scope name="hw_objrec2array" signature="hw_objrec2array(string objrec, [array format])" returns="array" doc="Returns object array of object record" ilk="function" src="hw.c"/>
      <scope name="hw_array2objrec" signature="hw_array2objrec(array objarr)" returns="string" doc="Returns object record of object array" ilk="function" src="hw.c"/>
      <scope name="hw_incollections" signature="hw_incollections(int link, array objids, array collids, int para)" returns="array" doc="Returns object ids which are in collections" ilk="function" src="hw.c"/>
      <scope name="hw_inscoll" signature="hw_inscoll(int link, int parentid, array objarr)" returns="void" doc="Inserts collection" ilk="function" src="hw.c"/>
      <scope name="hw_insdoc" signature="hw_insdoc(int link, int parentid, string objrec [, string text])" returns="void" doc="Inserts document" ilk="function" src="hw.c"/>
      <scope name="hw_getsrcbydestobj" signature="hw_getsrcbydestobj(int link, int destid)" returns="int" doc="Returns object id of source docuent by destination&#10;anchor" ilk="function" src="hw.c"/>
      <scope name="hw_mapid" signature="hw_mapid(int link, int serverid, int destid)" returns="int" doc="Returns virtual object id of document on remote&#10;Hyperwave server" ilk="function" src="hw.c"/>
      <scope name="hw_getrellink" signature="hw_getrellink(int link, int rootid, int sourceid, int destid)" returns="string" doc="Get link from source to dest relative to rootid" ilk="function" src="hw.c"/>
      <scope name="hw_insertanchors" signature="hw_insertanchors(int hwdoc, array anchorecs, array dest [, array urlprefixes])" returns="string" doc="Inserts only anchors into text" ilk="function" src="hw.c"/>
      <scope name="hw_connection_info" signature="hw_connection_info(int link)" returns="void" doc="Prints information about the connection to Hyperwave&#10;server" ilk="function" src="hw.c"/>
      <scope name="iconv" signature="iconv(string in_charset, string out_charset, string str)" returns="string" doc="Returns str converted to the out charset character set" ilk="function" src="iconv.c"/>
      <scope name="ob_iconv_handler" signature="ob_iconv_handler(string contents, int status)" returns="string" doc="Returns str in output buffer converted to the iconv&#10;output encoding character set" ilk="function" src="iconv.c"/>
      <scope name="iconv_set_encoding" signature="iconv_set_encoding(string type, string charset)" returns="bool" doc="Sets internal encoding and output encoding for ob iconv&#10;handler" ilk="function" src="iconv.c"/>
      <scope name="iconv_get_encoding" signature="iconv_get_encoding([string type])" returns="array" doc="Get internal encoding and output encoding for ob iconv&#10;handler" ilk="function" src="iconv.c"/>
      <scope name="imap_open" signature="imap_open(string mailbox, string user, string password [, int options])" returns="resource" doc="Open an IMAP stream to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_reopen" signature="imap_reopen(resource stream_id, string mailbox [, int options])" returns="bool" doc="Reopen an IMAP stream to a new mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_append" signature="imap_append(resource stream_id, string folder, string message [, string options])" returns="bool" doc="Append a new message to a specified mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_num_msg" signature="imap_num_msg(resource stream_id)" returns="int" doc="Gives the number of messages in the current mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_ping" signature="imap_ping(resource stream_id)" returns="bool" doc="Check if the IMAP stream is still active" ilk="function" src="php_imap.c"/>
      <scope name="imap_num_recent" signature="imap_num_recent(resource stream_id)" returns="int" doc="Gives the number of recent messages in current mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_get_quota" signature="imap_get_quota(resource stream_id, string qroot)" returns="array" doc="Returns the quota set to the mailbox account qroot" ilk="function" src="php_imap.c"/>
      <scope name="imap_get_quotaroot" signature="imap_get_quotaroot(resource stream_id, string mbox)" returns="array" doc="Returns the quota set to the mailbox account mbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_set_quota" signature="imap_set_quota(resource stream_id, string qroot, int mailbox_size)" returns="bool" doc="Will set the quota for qroot mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_setacl" signature="imap_setacl(resource stream_id, string mailbox, string id, string rights)" returns="bool" doc="Sets the ACL for a given mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_expunge" signature="imap_expunge(resource stream_id)" returns="bool" doc="Permanently delete all messages marked for deletion" ilk="function" src="php_imap.c"/>
      <scope name="imap_close" signature="imap_close(resource stream_id [, int options])" returns="bool" doc="Close an IMAP stream" ilk="function" src="php_imap.c"/>
      <scope name="imap_headers" signature="imap_headers(resource stream_id)" returns="array" doc="Returns headers for all messages in a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_body" signature="imap_body(resource stream_id, int msg_no [, int options])" returns="string" doc="Read the message body" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail_copy" signature="imap_mail_copy(resource stream_id, int msg_no, string mailbox [, int options])" returns="bool" doc="Copy specified message to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail_move" signature="imap_mail_move(resource stream_id, int msg_no, string mailbox [, int options])" returns="bool" doc="Move specified message to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_createmailbox" signature="imap_createmailbox(resource stream_id, string mailbox)" returns="bool" doc="Create a new mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_renamemailbox" signature="imap_renamemailbox(resource stream_id, string old_name, string new_name)" returns="bool" doc="Rename a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_deletemailbox" signature="imap_deletemailbox(resource stream_id, string mailbox)" returns="bool" doc="Delete a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_list" signature="imap_list(resource stream_id, string ref, string pattern)" returns="array" doc="Read the list of mailboxes" ilk="function" src="php_imap.c"/>
      <scope name="imap_getmailboxes" signature="imap_getmailboxes(resource stream_id, string ref, string pattern)" returns="array" doc="Reads the list of mailboxes and returns a full array of&#10;objects containing name attributes and delimiter" ilk="function" src="php_imap.c"/>
      <scope name="imap_scan" signature="imap_scan(resource stream_id, string ref, string pattern, string content)" returns="array" doc="Read list of mailboxes containing a certain string" ilk="function" src="php_imap.c"/>
      <scope name="imap_check" signature="imap_check(resource stream_id)" returns="object" doc="Get mailbox properties" ilk="function" src="php_imap.c"/>
      <scope name="imap_delete" signature="imap_delete(resource stream_id, int msg_no [, int options])" returns="bool" doc="Mark a message for deletion" ilk="function" src="php_imap.c"/>
      <scope name="imap_undelete" signature="imap_undelete(resource stream_id, int msg_no)" returns="bool" doc="Remove the delete flag from a message" ilk="function" src="php_imap.c"/>
      <scope name="imap_headerinfo" signature="imap_headerinfo(resource stream_id, int msg_no [, int from_length [, int subject_length [, string default_host]]])" returns="object" doc="Read the headers of the message" ilk="function" src="php_imap.c"/>
      <scope name="imap_rfc822_parse_headers" signature="imap_rfc822_parse_headers(string headers [, string default_host])" returns="object" doc="Parse a set of mail headers contained in a string and&#10;return an object similar to imap headerinfo" ilk="function" src="php_imap.c"/>
      <scope name="imap_lsub" signature="imap_lsub(resource stream_id, string ref, string pattern)" returns="array" doc="Return a list of subscribed mailboxes" ilk="function" src="php_imap.c"/>
      <scope name="imap_getsubscribed" signature="imap_getsubscribed(resource stream_id, string ref, string pattern)" returns="array" doc="Return a list of subscribed mailboxes in the same&#10;format as imap getmailboxes" ilk="function" src="php_imap.c"/>
      <scope name="imap_subscribe" signature="imap_subscribe(resource stream_id, string mailbox)" returns="bool" doc="Subscribe to a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_unsubscribe" signature="imap_unsubscribe(resource stream_id, string mailbox)" returns="bool" doc="Unsubscribe from a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetchstructure" signature="imap_fetchstructure(resource stream_id, int msg_no [, int options])" returns="object" doc="Read the full structure of a message" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetchbody" signature="imap_fetchbody(resource stream_id, int msg_no, string section [, int options])" returns="string" doc="Get a specific body section" ilk="function" src="php_imap.c"/>
      <scope name="imap_base64" signature="imap_base64(string text)" returns="string" doc="Decode BASE encoded text" ilk="function" src="php_imap.c"/>
      <scope name="imap_qprint" signature="imap_qprint(string text)" returns="string" doc="Convert a quoted-printable string to an -bit string" ilk="function" src="php_imap.c"/>
      <scope name="imap_8bit" signature="imap_8bit(string text)" returns="string" doc="Convert an -bit string to a quoted-printable string" ilk="function" src="php_imap.c"/>
      <scope name="imap_binary" signature="imap_binary(string text)" returns="string" doc="Convert an bit string to a base string" ilk="function" src="php_imap.c"/>
      <scope name="imap_mailboxmsginfo" signature="imap_mailboxmsginfo(resource stream_id)" returns="object" doc="Returns info about the current mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_rfc822_write_address" signature="imap_rfc822_write_address(string mailbox, string host, string personal)" returns="string" doc="Returns a properly formatted email address given the&#10;mailbox host and personal info" ilk="function" src="php_imap.c"/>
      <scope name="imap_rfc822_parse_adrlist" signature="imap_rfc822_parse_adrlist(string address_string, string default_host)" returns="array" doc="Parses an address string" ilk="function" src="php_imap.c"/>
      <scope name="imap_utf8" signature="imap_utf8(string mime_encoded_text)" returns="string" doc="Convert a mime-encoded text to UTF-" ilk="function" src="php_imap.c"/>
      <scope name="imap_utf7_decode" signature="imap_utf7_decode(string buf)" returns="string" doc="Decode a modified UTF- string" ilk="function" src="php_imap.c"/>
      <scope name="imap_utf7_encode" signature="imap_utf7_encode(string buf)" returns="string" doc="Encode a string in modified UTF-" ilk="function" src="php_imap.c"/>
      <scope name="imap_setflag_full" signature="imap_setflag_full(resource stream_id, string sequence, string flag [, int options])" returns="bool" doc="Sets flags on messages" ilk="function" src="php_imap.c"/>
      <scope name="imap_clearflag_full" signature="imap_clearflag_full(resource stream_id, string sequence, string flag [, int options])" returns="bool" doc="Clears flags on messages" ilk="function" src="php_imap.c"/>
      <scope name="imap_sort" signature="imap_sort(resource stream_id, int criteria, int reverse [, int options [, string search_criteria [, string charset]]])" returns="array" doc="Sort an array of message headers optionally including&#10;only messages that meet specified criteria" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetchheader" signature="imap_fetchheader(resource stream_id, int msg_no [, int options])" returns="string" doc="Get the full unfiltered header for a message" ilk="function" src="php_imap.c"/>
      <scope name="imap_uid" signature="imap_uid(resource stream_id, int msg_no)" returns="int" doc="Get the unique message id associated with a standard&#10;sequential message number" ilk="function" src="php_imap.c"/>
      <scope name="imap_msgno" signature="imap_msgno(resource stream_id, int unique_msg_id)" returns="int" doc="Get the sequence number associated with a UID" ilk="function" src="php_imap.c"/>
      <scope name="imap_status" signature="imap_status(resource stream_id, string mailbox, int options)" returns="object" doc="Get status info from a mailbox" ilk="function" src="php_imap.c"/>
      <scope name="imap_bodystruct" signature="imap_bodystruct(resource stream_id, int msg_no, string section)" returns="object" doc="Read the structure of a specified body section of a&#10;specific message" ilk="function" src="php_imap.c"/>
      <scope name="imap_fetch_overview" signature="imap_fetch_overview(resource stream_id, int msg_no [, int options])" returns="array" doc="Read an overview of the information in the headers of&#10;the given message sequence" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail_compose" signature="imap_mail_compose(array envelope, array body)" returns="string" doc="Create a MIME message based on given envelope and body&#10;sections" ilk="function" src="php_imap.c"/>
      <scope name="imap_mail" signature="imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]])" returns="bool" doc="Send an email message" ilk="function" src="php_imap.c"/>
      <scope name="imap_search" signature="imap_search(resource stream_id, string criteria [, int options [, string charset]])" returns="array" doc="Return a list of messages matching the given criteria" ilk="function" src="php_imap.c"/>
      <scope name="imap_alerts" signature="imap_alerts(void)" returns="array" doc="Returns an array of all IMAP alerts that have been&#10;generated since the last page load or since the last" ilk="function" src="php_imap.c"/>
      <scope name="imap_errors" signature="imap_errors(void)" returns="array" doc="Returns an array of all IMAP errors generated since the&#10;last page load or since the last imap errors call" ilk="function" src="php_imap.c"/>
      <scope name="imap_last_error" signature="imap_last_error(void)" returns="string" doc="Returns the last error that was generated by an IMAP&#10;function The error stack is NOT cleared after this call" ilk="function" src="php_imap.c"/>
      <scope name="imap_mime_header_decode" signature="imap_mime_header_decode(string str)" returns="array" doc="Decode mime header element in accordance with RFC and&#10;return array of objects containing 'charset' encoding&#10;and decoded 'text'" ilk="function" src="php_imap.c"/>
      <scope name="imap_thread" signature="imap_thread(resource stream_id [, int options])" returns="array" doc="Return threaded by REFERENCES tree" ilk="function" src="php_imap.c"/>
      <scope name="imap_timeout" signature="imap_timeout(int timeout_type [, int timeout])" returns="mixed" doc="Set or fetch imap timeout" ilk="function" src="php_imap.c"/>
      <scope name="ifx_connect" signature="ifx_connect([string database [, string userid [, string password]]])" returns="resource" doc="Connects to database using userid password returns&#10;connection id" ilk="function" src="ifx.ec"/>
      <scope name="ifx_pconnect" signature="ifx_pconnect([string database [, string userid [, string password]]])" returns="resource" doc="Connects to database using userid password returns&#10;connection id" ilk="function" src="ifx.ec"/>
      <scope name="ifx_close" signature="ifx_close([resource connid])" returns="bool" doc="Close informix connection" ilk="function" src="ifx.ec"/>
      <scope name="ifx_query" signature="ifx_query(string query, resource connid [, int cursortype] [, array idarray])" returns="resource" doc="Perform a query on a given connection" ilk="function" src="ifx.ec"/>
      <scope name="ifx_prepare" signature="ifx_prepare(string query, resource connid [, int cursortype] [, array idarray])" returns="resource" doc="Prepare a query on a given connection" ilk="function" src="ifx.ec"/>
      <scope name="ifx_do" signature="ifx_do(resource resultid)" returns="bool" doc="Executes a previously prepared query or opens a cursor&#10;for it" ilk="function" src="ifx.ec"/>
      <scope name="ifx_error" signature="ifx_error([resource connection_id])" returns="string" doc="Returns the Informix error codes SQLSTATE SQLCODE" ilk="function" src="ifx.ec"/>
      <scope name="ifx_errormsg" signature="ifx_errormsg([int errorcode])" returns="string" doc="Returns the Informix errormessage associated with" ilk="function" src="ifx.ec"/>
      <scope name="ifx_affected_rows" signature="ifx_affected_rows(resource resultid)" returns="int" doc="Returns the number of rows affected by query identified&#10;by resultid" ilk="function" src="ifx.ec"/>
      <scope name="ifx_fetch_row" signature="ifx_fetch_row(resource resultid [, mixed position])" returns="array" doc="Fetches the next row or position row if using a scroll&#10;cursor" ilk="function" src="ifx.ec"/>
      <scope name="ifx_htmltbl_result" signature="ifx_htmltbl_result(resource resultid [, string htmltableoptions])" returns="int" doc="Formats all rows of the resultid query into a html&#10;table" ilk="function" src="ifx.ec"/>
      <scope name="ifx_fieldtypes" signature="ifx_fieldtypes(resource resultid)" returns="array" doc="Returns an associative array with fieldnames as key for&#10;query resultid" ilk="function" src="ifx.ec"/>
      <scope name="ifx_fieldproperties" signature="ifx_fieldproperties(resource resultid)" returns="array" doc="Returns an associative for query resultid array with&#10;fieldnames as key" ilk="function" src="ifx.ec"/>
      <scope name="ifx_num_rows" signature="ifx_num_rows(resource resultid)" returns="int" doc="Returns the number of rows already fetched for query&#10;identified by resultid" ilk="function" src="ifx.ec"/>
      <scope name="ifx_getsqlca" signature="ifx_getsqlca(resource resultid)" returns="array" doc="Returns the sqlerrd fields of the sqlca struct for&#10;query resultid" ilk="function" src="ifx.ec"/>
      <scope name="ifx_num_fields" signature="ifx_num_fields(resource resultid)" returns="int" doc="Returns the number of columns in query resultid" ilk="function" src="ifx.ec"/>
      <scope name="ifx_free_result" signature="ifx_free_result(resource resultid)" returns="bool" doc="Releases resources for query associated with resultid" ilk="function" src="ifx.ec"/>
      <scope name="ifx_create_blob" signature="ifx_create_blob(int type, int mode, string param)" returns="int" doc="Creates a blob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_copy_blob" signature="ifx_copy_blob(int bid)" returns="int" doc="Duplicates the given blob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_free_blob" signature="ifx_free_blob(int bid)" returns="int" doc="Deletes the blob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_get_blob" signature="ifx_get_blob(int bid)" returns="string" doc="Returns the content of the blob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_update_blob" signature="ifx_update_blob(int bid, string content)" returns="int" doc="Updates the content of the blob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_blobinfile_mode" signature="ifx_blobinfile_mode(int mode)" returns="bool" doc="Sets the default blob-mode for all select-queries" ilk="function" src="ifx.ec"/>
      <scope name="ifx_textasvarchar" signature="ifx_textasvarchar(int mode)" returns="bool" doc="Sets the default text-mode for all select-queries" ilk="function" src="ifx.ec"/>
      <scope name="ifx_byteasvarchar" signature="ifx_byteasvarchar(int mode)" returns="bool" doc="Sets the default byte-mode for all select-queries" ilk="function" src="ifx.ec"/>
      <scope name="ifx_nullformat" signature="ifx_nullformat(int mode)" returns="bool" doc="Sets the default return value of a NULL-value on a&#10;fetch-row" ilk="function" src="ifx.ec"/>
      <scope name="ifx_create_char" signature="ifx_create_char(string param)" returns="int" doc="Creates a char-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_get_char" signature="ifx_get_char(int bid)" returns="string" doc="Returns the content of the char-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_free_char" signature="ifx_free_char(int bid)" returns="bool" doc="Deletes the char-object" ilk="function" src="ifx.ec"/>
      <scope name="ifx_update_char" signature="ifx_update_char(int bid, string content)" returns="bool" doc="Updates the content of the char-object" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_create_slob" signature="ifxus_create_slob(int mode)" returns="int" doc="Creates a slob-object and opens it" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_free_slob" signature="ifxus_free_slob(int bid)" returns="bool" doc="Deletes the slob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_close_slob" signature="ifxus_close_slob(int bid)" returns="bool" doc="Deletes the slob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_open_slob" signature="ifxus_open_slob(int bid, int mode)" returns="int" doc="Opens an slob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_tell_slob" signature="ifxus_tell_slob(int bid)" returns="int" doc="Returns the current file or seek position of an open&#10;slob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_seek_slob" signature="ifxus_seek_slob(int bid, int mode, long offset)" returns="int" doc="Sets the current file or seek position of an open&#10;slob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_read_slob" signature="ifxus_read_slob(int bid, int nbytes)" returns="string" doc="Reads nbytes of the slob-object" ilk="function" src="ifx.ec"/>
      <scope name="ifxus_write_slob" signature="ifxus_write_slob(int bid, string content)" returns="int" doc="Writes a string into the slob-object" ilk="function" src="ifx.ec"/>
      <scope name="ingres_close" signature="ingres_close([resource link])" returns="bool" doc="Close an Ingres II database connection" ilk="function" src="ii.c"/>
      <scope name="ingres_query" signature="ingres_query(string query [, resource link])" returns="bool" doc="Send a SQL query to Ingres II" ilk="function" src="ii.c"/>
      <scope name="ingres_num_rows" signature="ingres_num_rows([resource link])" returns="int" doc="Return the number of rows affected returned by the last&#10;query" ilk="function" src="ii.c"/>
      <scope name="ingres_num_fields" signature="ingres_num_fields([resource link])" returns="int" doc="Return the number of fields returned by the last query" ilk="function" src="ii.c"/>
      <scope name="ingres_field_name" signature="ingres_field_name(int index [, resource link])" returns="string" doc="Return the name of a field in a query result index must&#10;be and ingres num fields" ilk="function" src="ii.c"/>
      <scope name="ingres_field_type" signature="ingres_field_type(int index [, resource link])" returns="string" doc="Return the type of a field in a query result index must&#10;be and ingres num fields" ilk="function" src="ii.c"/>
      <scope name="ingres_field_nullable" signature="ingres_field_nullable(int index [, resource link])" returns="string" doc="Return true if the field is nullable and false&#10;otherwise index must be and ingres num fields" ilk="function" src="ii.c"/>
      <scope name="ingres_field_length" signature="ingres_field_length(int index [, resource link])" returns="string" doc="Return the length of a field in a query result index&#10;must be and ingres num fields" ilk="function" src="ii.c"/>
      <scope name="ingres_field_precision" signature="ingres_field_precision(int index [, resource link])" returns="string" doc="Return the precision of a field in a query result index&#10;must be and ingres num fields" ilk="function" src="ii.c"/>
      <scope name="ingres_field_scale" signature="ingres_field_scale(int index [, resource link])" returns="string" doc="Return the scale of a field in a query result index&#10;must be and ingres num fields" ilk="function" src="ii.c"/>
      <scope name="ingres_fetch_array" signature="ingres_fetch_array([int result_type [, resource link]])" returns="array" doc="Fetch a row of result into an array result type can be&#10;II NUM for enumerated array II ASSOC for" ilk="function" src="ii.c"/>
      <scope name="ingres_fetch_row" signature="ingres_fetch_row([resource link])" returns="array" doc="Fetch a row of result into an enumerated array" ilk="function" src="ii.c"/>
      <scope name="ingres_fetch_object" signature="ingres_fetch_object([int result_type [, resource link]])" returns="array" doc="Fetch a row of result into an object result type can be&#10;II NUM for enumerated object II ASSOC for" ilk="function" src="ii.c"/>
      <scope name="ingres_rollback" signature="ingres_rollback([resource link])" returns="bool" doc="Roll back a transaction" ilk="function" src="ii.c"/>
      <scope name="ingres_commit" signature="ingres_commit([resource link])" returns="bool" doc="Commit a transaction" ilk="function" src="ii.c"/>
      <scope name="ingres_autocommit" signature="ingres_autocommit([resource link])" returns="bool" doc="Switch autocommit on or off" ilk="function" src="ii.c"/>
      <scope name="ibase_errmsg" signature="ibase_errmsg(void)" returns="string" doc="Return error message" ilk="function" src="interbase.c"/>
      <scope name="ibase_connect" signature="ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" returns="resource" doc="Open a connection to an InterBase database" ilk="function" src="interbase.c"/>
      <scope name="ibase_pconnect" signature="ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]])" returns="resource" doc="Open a persistent connection to an InterBase database" ilk="function" src="interbase.c"/>
      <scope name="ibase_close" signature="ibase_close([resource link_identifier])" returns="bool" doc="Close an InterBase connection" ilk="function" src="interbase.c"/>
      <scope name="ibase_trans" signature="ibase_trans([int trans_args [, resource link_identifier]])" returns="resource" doc="Start transaction" ilk="function" src="interbase.c"/>
      <scope name="ibase_commit" signature="ibase_commit( resource link_identifier )" returns="bool" doc="Commit transaction" ilk="function" src="interbase.c"/>
      <scope name="ibase_rollback" signature="ibase_rollback( resource link_identifier )" returns="bool" doc="Rollback transaction" ilk="function" src="interbase.c"/>
      <scope name="ibase_query" signature="ibase_query([resource link_identifier [, string query [, int bind_args]]])" returns="resource" doc="Execute a query" ilk="function" src="interbase.c"/>
      <scope name="ibase_fetch_row" signature="ibase_fetch_row(resource result [, int blob_flag])" returns="array" doc="Fetch a row from the results of a query" ilk="function" src="interbase.c"/>
      <scope name="ibase_fetch_assoc" signature="ibase_fetch_assoc(resource result [, int blob_flag])" returns="array" doc="Fetch a row from the results of a query" ilk="function" src="interbase.c"/>
      <scope name="ibase_fetch_object" signature="ibase_fetch_object(resource result [, int blob_flag])" returns="object" doc="Fetch a object from the results of a query" ilk="function" src="interbase.c"/>
      <scope name="ibase_free_result" signature="ibase_free_result(resource result)" returns="bool" doc="Free the memory used by a result" ilk="function" src="interbase.c"/>
      <scope name="ibase_prepare" signature="ibase_prepare([resource link_identifier, ] string query)" returns="resource" doc="Prepare a query for later execution" ilk="function" src="interbase.c"/>
      <scope name="ibase_execute" signature="ibase_execute(resource query [, int bind_args [, int ...]])" returns="resource" doc="Execute a previously prepared query" ilk="function" src="interbase.c"/>
      <scope name="ibase_free_query" signature="ibase_free_query(resource query)" returns="bool" doc="Free memory used by a query" ilk="function" src="interbase.c"/>
      <scope name="ibase_timefmt" signature="ibase_timefmt(string format)" returns="int" doc="Sets the format of timestamp date and time columns&#10;returned from queries" ilk="function" src="interbase.c"/>
      <scope name="ibase_num_fields" signature="ibase_num_fields(resource result)" returns="int" doc="Get the number of fields in result" ilk="function" src="interbase.c"/>
      <scope name="ibase_field_info" signature="ibase_field_info(resource result, int field_number)" returns="array" doc="Get information about a field" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_create" signature="ibase_blob_create([resource link_identifier])" returns="int" doc="Create blob for adding data" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_open" signature="ibase_blob_open(string blob_id)" returns="int" doc="Open blob for retriving data parts" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_add" signature="ibase_blob_add(int blob_id, string data)" returns="bool" doc="Add data into created blob" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_get" signature="ibase_blob_get(int blob_id, int len)" returns="string" doc="Get len bytes data from open blob" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_close" signature="ibase_blob_close(int blob_id)" returns="bool" doc="Close blob" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_cancel" signature="ibase_blob_cancel(int blob_id)" returns="bool" doc="Cancel creating blob" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_info" signature="ibase_blob_info(string blob_id_str)" returns="object" doc="Return blob length and other useful info" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_echo" signature="ibase_blob_echo(string blob_id_str)" returns="bool" doc="Output blob contents to browser" ilk="function" src="interbase.c"/>
      <scope name="ibase_blob_import" signature="ibase_blob_import([resource link_identifier, ] int file_id)" returns="string" doc="Create blob copy file in it and close it" ilk="function" src="interbase.c"/>
      <scope name="ibase_add_user" signature="ibase_add_user(string server, string dba_user_name, string dba_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" returns="bool" doc="Add an user to security database only for IB or later" ilk="function" src="interbase.c"/>
      <scope name="ibase_modify_user" signature="ibase_modify_user(string server, string dba_user_name, string dba_password, string user_name, string password [, string first_name [, string middle_name [, string last_name]]])" returns="bool" doc="Modify an user in security database only for IB or&#10;later" ilk="function" src="interbase.c"/>
      <scope name="ibase_delete_user" signature="ibase_delete_user(string server, string dba_user_name, string dba_password, string username)" returns="bool" doc="Delete an user from security database only for IB or&#10;later" ilk="function" src="interbase.c"/>
      <scope name="java_last_exception_get" signature="java_last_exception_get(void)" returns="object" doc="Get last Java exception" ilk="function" src="java.c"/>
      <scope name="java_last_exception_clear" signature="java_last_exception_clear(void)" returns="void" doc="Clear last java extension" ilk="function" src="java.c"/>
      <scope name="ldap_connect" signature="ldap_connect([string host [, int port]])" returns="resource" doc="Connect to an LDAP server" ilk="function" src="ldap.c"/>
      <scope name="ldap_bind" signature="ldap_bind(resource link [, string dn, string password])" returns="bool" doc="Bind to LDAP directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_unbind" signature="ldap_unbind(resource link)" returns="bool" doc="Unbind from LDAP directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_read" signature="ldap_read(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" returns="resource" doc="Read an entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_list" signature="ldap_list(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" returns="resource" doc="Single-level search" ilk="function" src="ldap.c"/>
      <scope name="ldap_search" signature="ldap_search(resource link, string base_dn, string filter [, array attrs [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]])" returns="resource" doc="Search LDAP tree under base dn" ilk="function" src="ldap.c"/>
      <scope name="ldap_free_result" signature="ldap_free_result(resource result)" returns="bool" doc="Free result memory" ilk="function" src="ldap.c"/>
      <scope name="ldap_count_entries" signature="ldap_count_entries(resource link, resource result)" returns="int" doc="Count the number of entries in a search result" ilk="function" src="ldap.c"/>
      <scope name="ldap_first_entry" signature="ldap_first_entry(resource link, resource result)" returns="resource" doc="Return first result id" ilk="function" src="ldap.c"/>
      <scope name="ldap_next_entry" signature="ldap_next_entry(resource link, resource result_entry)" returns="resource" doc="Get next result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_entries" signature="ldap_get_entries(resource link, resource result)" returns="array" doc="Get all result entries" ilk="function" src="ldap.c"/>
      <scope name="ldap_first_attribute" signature="ldap_first_attribute(resource link, resource result_entry, int ber)" returns="string" doc="Return first attribute" ilk="function" src="ldap.c"/>
      <scope name="ldap_next_attribute" signature="ldap_next_attribute(resource link, resource result_entry, resource ber)" returns="string" doc="Get the next attribute in result" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_attributes" signature="ldap_get_attributes(resource link, resource result_entry)" returns="array" doc="Get attributes from a search result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_values" signature="ldap_get_values(resource link, resource result_entry, string attribute)" returns="array" doc="Get all values from a result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_values_len" signature="ldap_get_values_len(resource link, resource result_entry, string attribute)" returns="array" doc="Get all values with lengths from a result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_dn" signature="ldap_get_dn(resource link, resource result_entry)" returns="string" doc="Get the DN of a result entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_explode_dn" signature="ldap_explode_dn(string dn, int with_attrib)" returns="array" doc="Splits DN into its component parts" ilk="function" src="ldap.c"/>
      <scope name="ldap_dn2ufn" signature="ldap_dn2ufn(string dn)" returns="string" doc="Convert DN to User Friendly Naming format" ilk="function" src="ldap.c"/>
      <scope name="ldap_add" signature="ldap_add(resource link, string dn, array entry)" returns="bool" doc="Add entries to LDAP directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_mod_replace" signature="ldap_mod_replace(resource link, string dn, array entry)" returns="bool" doc="Replace attribute values with new ones" ilk="function" src="ldap.c"/>
      <scope name="ldap_mod_add" signature="ldap_mod_add(resource link, string dn, array entry)" returns="bool" doc="Add attribute values to current" ilk="function" src="ldap.c"/>
      <scope name="ldap_mod_del" signature="ldap_mod_del(resource link, string dn, array entry)" returns="bool" doc="Delete attribute values" ilk="function" src="ldap.c"/>
      <scope name="ldap_delete" signature="ldap_delete(resource link, string dn)" returns="bool" doc="Delete an entry from a directory" ilk="function" src="ldap.c"/>
      <scope name="ldap_errno" signature="ldap_errno(resource link)" returns="int" doc="Get the current ldap error number" ilk="function" src="ldap.c"/>
      <scope name="ldap_err2str" signature="ldap_err2str(int errno)" returns="string" doc="Convert error number to error string" ilk="function" src="ldap.c"/>
      <scope name="ldap_error" signature="ldap_error(resource link)" returns="string" doc="Get the current ldap error string" ilk="function" src="ldap.c"/>
      <scope name="ldap_compare" signature="ldap_compare(resource link, string dn, string attr, string value)" returns="bool" doc="Determine if an entry has a specific value for one of&#10;its attributes" ilk="function" src="ldap.c"/>
      <scope name="ldap_sort" signature="ldap_sort(resource link, resource result, string sortfilter)" returns="bool" doc="Sort LDAP result entries" ilk="function" src="ldap.c"/>
      <scope name="ldap_get_option" signature="ldap_get_option(resource link, int option, mixed retval)" returns="bool" doc="Get the current value of various session-wide&#10;parameters" ilk="function" src="ldap.c"/>
      <scope name="ldap_set_option" signature="ldap_set_option(resource link, int option, mixed newval)" returns="bool" doc="Set the value of various session-wide parameters" ilk="function" src="ldap.c"/>
      <scope name="ldap_parse_result" signature="ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)" returns="bool" doc="Extract information from result" ilk="function" src="ldap.c"/>
      <scope name="ldap_first_reference" signature="ldap_first_reference(resource link, resource result)" returns="resource" doc="Return first reference" ilk="function" src="ldap.c"/>
      <scope name="ldap_next_reference" signature="ldap_next_reference(resource link, resource reference_entry)" returns="resource" doc="Get next reference" ilk="function" src="ldap.c"/>
      <scope name="ldap_parse_reference" signature="ldap_parse_reference(resource link, resource reference_entry, array referrals)" returns="bool" doc="Extract information from reference entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_rename" signature="ldap_rename(resource link, string dn, string newrdn, string newparent, bool deleteoldrdn)" returns="bool" doc="Modify the name of an entry" ilk="function" src="ldap.c"/>
      <scope name="ldap_start_tls" signature="ldap_start_tls(resource link)" returns="bool" doc="Start TLS" ilk="function" src="ldap.c"/>
      <scope name="ldap_set_rebind_proc" signature="ldap_set_rebind_proc(resource link, string callback)" returns="bool" doc="Set a callback function to do re-binds on referral&#10;chasing" ilk="function" src="ldap.c"/>
      <scope name="ldap_t61_to_8859" signature="ldap_t61_to_8859(string value)" returns="string" doc="Translate t characters to characters" ilk="function" src="ldap.c"/>
      <scope name="ldap_8859_to_t61" signature="ldap_8859_to_t61(string value)" returns="string" doc="Translate characters to t characters" ilk="function" src="ldap.c"/>
      <scope name="mb_language" signature="mb_language([string language])" returns="string" doc="Sets the current language or Returns the current&#10;language as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_internal_encoding" signature="mb_internal_encoding([string encoding])" returns="string" doc="Sets the current internal encoding or Returns the&#10;current internal encoding as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_http_input" signature="mb_http_input([string type])" returns="mixed" doc="Returns the input encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_http_output" signature="mb_http_output([string encoding])" returns="string" doc="Sets the current output encoding or returns the current&#10;output encoding as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_detect_order" signature="mb_detect_order([mixed encoding-list])" returns="array" doc="Sets the current detect order or Return the current&#10;detect order as a array" ilk="function" src="mbstring.c"/>
      <scope name="mb_substitute_character" signature="mb_substitute_character([mixed substchar])" returns="mixed" doc="Sets the current substitute character or returns the&#10;current substitute character" ilk="function" src="mbstring.c"/>
      <scope name="mb_preferred_mime_name" signature="mb_preferred_mime_name(string encoding)" returns="string" doc="Return the preferred MIME name charset as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_parse_str" signature="mb_parse_str(string encoded_string [, array result])" returns="bool" doc="Parses GET POST COOKIE data and sets global variables" ilk="function" src="mbstring.c"/>
      <scope name="mb_output_handler" signature="mb_output_handler(string contents, int status)" returns="string" doc="Returns string in output buffer converted to the http&#10;output encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_strlen" signature="mb_strlen(string str [, string encoding])" returns="int" doc="Get character numbers of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strpos" signature="mb_strpos(string haystack, string needle [, int offset [, string encoding]])" returns="int" doc="Find position of first occurrence of a string within&#10;another" ilk="function" src="mbstring.c"/>
      <scope name="mb_strrpos" signature="mb_strrpos(string haystack, string needle [, string encoding])" returns="int" doc="Find the last occurrence of a character in a string&#10;within another" ilk="function" src="mbstring.c"/>
      <scope name="mb_substr_count" signature="mb_substr_count(string haystack, string needle [, string encoding])" returns="int" doc="Count the number of substring occurrences" ilk="function" src="mbstring.c"/>
      <scope name="mb_substr" signature="mb_substr(string str, int start [, int length [, string encoding]])" returns="string" doc="Returns part of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strcut" signature="mb_strcut(string str, int start [, int length [, string encoding]])" returns="string" doc="Returns part of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strwidth" signature="mb_strwidth(string str [, string encoding])" returns="int" doc="Gets terminal width of a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_strimwidth" signature="mb_strimwidth(string str, int start, int width [, string trimmarker [, string encoding]])" returns="string" doc="Trim the string in terminal width" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_encoding" signature="mb_convert_encoding(string str, string to-encoding [, mixed from-encoding])" returns="string" doc="Returns converted string in desired encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_case" signature="mb_convert_case(string sourcestring, int mode [, string encoding])" returns="string" doc="Returns a case-folded version of sourcestring" ilk="function" src="mbstring.c"/>
      <scope name="mb_strtoupper" signature="mb_strtoupper(string sourcestring [, string encoding])" returns="string" doc="Returns a uppercased version of sourcestring" ilk="function" src="mbstring.c"/>
      <scope name="mb_strtolower" signature="mb_strtolower(string sourcestring [, string encoding])" returns="string" doc="Returns a lowercased version of sourcestring" ilk="function" src="mbstring.c"/>
      <scope name="mb_detect_encoding" signature="mb_detect_encoding(string str [, mixed encoding_list [, bool strict]])" returns="string" doc="Encodings of the given string is returned as a string" ilk="function" src="mbstring.c"/>
      <scope name="mb_encode_mimeheader" signature="mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed [, int indent]]]])" returns="string" doc="Converts the string to MIME encoded-word in the format&#10;of charset B" ilk="function" src="mbstring.c"/>
      <scope name="mb_decode_mimeheader" signature="mb_decode_mimeheader(string string)" returns="string" doc="Decodes the MIME encoded-word in the string" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_kana" signature="mb_convert_kana(string str [, string option] [, string encoding])" returns="string" doc="Conversion between full-width character and half-width&#10;character Japanese" ilk="function" src="mbstring.c"/>
      <scope name="mb_convert_variables" signature="mb_convert_variables(string to-encoding, mixed from-encoding [, mixed ...])" returns="string" doc="Converts the string resource in variables to desired&#10;encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_encode_numericentity" signature="mb_encode_numericentity(string string, array convmap [, string encoding])" returns="string" doc="Converts specified characters to HTML numeric entities" ilk="function" src="mbstring.c"/>
      <scope name="mb_decode_numericentity" signature="mb_decode_numericentity(string string, array convmap [, string encoding])" returns="string" doc="Converts HTML numeric entities to character code" ilk="function" src="mbstring.c"/>
      <scope name="mb_send_mail" signature="mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" returns="int" doc="Sends an email message with MIME scheme" ilk="function" src="mbstring.c"/>
      <scope name="mb_get_info" signature="mb_get_info([string type])" returns="mixed" doc="Returns the current settings of mbstring" ilk="function" src="mbstring.c"/>
      <scope name="mb_check_encoding" signature="mb_check_encoding([string var[, string encoding]])" returns="bool" doc="Check if the string is valid for the specified encoding" ilk="function" src="mbstring.c"/>
      <scope name="mb_regex_encoding" signature="mb_regex_encoding([string encoding])" returns="string" doc="Returns the current encoding for regex as a string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg" signature="mb_ereg(string pattern, string string [, array registers])" returns="int" doc="Regular expression match for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_eregi" signature="mb_eregi(string pattern, string string [, array registers])" returns="int" doc="Case-insensitive regular expression match for multibyte&#10;string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_replace" signature="mb_ereg_replace(string pattern, string replacement, string string [, string option])" returns="string" doc="Replace regular expression for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_eregi_replace" signature="mb_eregi_replace(string pattern, string replacement, string string)" returns="string" doc="Case insensitive replace regular expression for&#10;multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_split" signature="mb_split(string pattern, string string [, int limit])" returns="array" doc="split multibyte string into array by regular expression" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_match" signature="mb_ereg_match(string pattern, string string [,string option])" returns="bool" doc="Regular expression match for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search" signature="mb_ereg_search([string pattern[, string option]])" returns="bool" doc="Regular expression search for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_pos" signature="mb_ereg_search_pos([string pattern[, string option]])" returns="array" doc="Regular expression search for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_regs" signature="mb_ereg_search_regs([string pattern[, string option]])" returns="array" doc="Regular expression search for multibyte string" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_init" signature="mb_ereg_search_init(string string [, string pattern[, string option]])" returns="bool" doc="Initialize string and regular expression for search" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_getregs" signature="mb_ereg_search_getregs(void)" returns="array" doc="Get matched substring of the last time" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_getpos" signature="mb_ereg_search_getpos(void)" returns="int" doc="Get search start position" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_ereg_search_setpos" signature="mb_ereg_search_setpos(int position)" returns="bool" doc="Set search start position" ilk="function" src="php_mbregex.c"/>
      <scope name="mb_regex_set_options" signature="mb_regex_set_options([string options])" returns="string" doc="Set or get the default options for mbregex functions" ilk="function" src="php_mbregex.c"/>
      <scope name="mcal_close" signature="mcal_close(int stream_id [, int options])" returns="int" doc="Close an MCAL stream" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_open" signature="mcal_open(string calendar, string user, string password [, int options])" returns="int" doc="Open an MCAL stream to a calendar" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_popen" signature="mcal_popen(string calendar, string user, string password [, int options])" returns="string" doc="Open a persistent MCAL stream to a calendar" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_reopen" signature="mcal_reopen(int stream_id, string calendar [, int options])" returns="int" doc="Reopen MCAL stream to a new calendar" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_expunge" signature="mcal_expunge(int stream_id)" returns="int" doc="Delete all events marked for deletion" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_fetch_event" signature="mcal_fetch_event(int stream_id, int eventid [, int options])" returns="int" doc="Fetch an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_fetch_current_stream_event" signature="mcal_fetch_current_stream_event(int stream_id)" returns="object" doc="Fetch the current event stored in the stream's event&#10;structure" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_list_events" signature="mcal_list_events(int stream_id, object begindate [, object enddate])" returns="array" doc="Returns list of UIDs for that day or range of days" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_create_calendar" signature="mcal_create_calendar(int stream_id, string calendar)" returns="string" doc="Create a new calendar" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_rename_calendar" signature="mcal_rename_calendar(int stream_id, string src_calendar, string dest_calendar)" returns="string" doc="Rename a calendar" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_list_alarms" signature="mcal_list_alarms(int stream_id, int year, int month, int day, int hour, int min, int sec)" returns="bool" doc="List alarms for a given time" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_delete_calendar" signature="mcal_delete_calendar(int stream_id, string calendar)" returns="string" doc="Delete calendar" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_delete_event" signature="mcal_delete_event(int stream_id, int event_id)" returns="string" doc="Delete an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_append_event" signature="mcal_append_event(int stream_id)" returns="string" doc="Append a new event to the calendar stream" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_store_event" signature="mcal_store_event(int stream_id)" returns="string" doc="Store changes to an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_snooze" signature="mcal_snooze(int stream_id, int uid)" returns="string" doc="Snooze an alarm" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_category" signature="mcal_event_set_category(int stream_id, string category)" returns="string" doc="Attach a category to an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_title" signature="mcal_event_set_title(int stream_id, string title)" returns="string" doc="Attach a title to an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_description" signature="mcal_event_set_description(int stream_id, string description)" returns="string" doc="Attach a description to an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_start" signature="mcal_event_set_start(int stream_id, int year,int month, int day [[[, int hour], int min], int sec])" returns="string" doc="Attach a start datetime to an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_end" signature="mcal_event_set_end(int stream_id, int year,int month, int day [[[, int hour], int min], int sec])" returns="string" doc="Attach an end datetime to an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_alarm" signature="mcal_event_set_alarm(int stream_id, int alarm)" returns="int" doc="Add an alarm to the streams global event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_init" signature="mcal_event_init(int stream_id)" returns="int" doc="Initialize a streams global event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_class" signature="mcal_event_set_class(int stream_id, int class)" returns="int" doc="Add an class to the streams global event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_add_attribute" signature="mcal_event_add_attribute(int stream_id, string attribute, string value)" returns="string" doc="Add an attribute and value to an event" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_is_leap_year" signature="mcal_is_leap_year(int year)" returns="bool" doc="Returns true if year is a leap year false if not" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_days_in_month" signature="mcal_days_in_month(int month, bool leap_year)" returns="int" doc="Returns the number of days in the given month needs to&#10;know if the year is a leap year or" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_date_valid" signature="mcal_date_valid(int year, int month, int day)" returns="bool" doc="Returns true if the date is a valid date" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_time_valid" signature="mcal_time_valid(int hour, int min, int sec)" returns="bool" doc="Returns true if the time is a valid time" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_day_of_week" signature="mcal_day_of_week(int year, int month, int day)" returns="int" doc="Returns the day of the week of the given date" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_day_of_year" signature="mcal_day_of_year(int year, int month, int day)" returns="int" doc="Returns the day of the year of the given date" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_week_of_year" signature="mcal_week_of_year(int day, int month, int year)" returns="int" doc="Returns the week number of the given date" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_date_compare" signature="mcal_date_compare(int ayear, int amonth, int aday, int byear, int bmonth, int bday)" returns="int" doc="Returns if a b a b a b respectively" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_next_recurrence" signature="mcal_next_recurrence(int stream_id, int weekstart, array next)" returns="object" doc="Returns an object filled with the next date the event&#10;occurs on or after the supplied date Returns empty date" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_recur_none" signature="mcal_event_set_recur_none(int stream_id)" returns="string" doc="Create a daily recurrence" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_recur_daily" signature="mcal_event_set_recur_daily(int stream_id, int year, int month, int day, int interval)" returns="string" doc="Create a daily recurrence" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_recur_weekly" signature="mcal_event_set_recur_weekly(int stream_id, int year, int month, int day, int interval, int weekdays)" returns="string" doc="Create a weekly recurrence" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_recur_monthly_mday" signature="mcal_event_set_recur_monthly_mday(int stream_id, int year, int month, int day, int interval)" returns="string" doc="Create a monthly by day recurrence" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_recur_monthly_wday" signature="mcal_event_set_recur_monthly_wday(int stream_id, int year, int month, int day, int interval)" returns="string" doc="Create a monthly by week recurrence" ilk="function" src="php_mcal.c"/>
      <scope name="mcal_event_set_recur_yearly" signature="mcal_event_set_recur_yearly(int stream_id, int year, int month, int day, int interval)" returns="string" doc="Create a yearly recurrence" ilk="function" src="php_mcal.c"/>
      <scope name="mcrypt_module_open" signature="mcrypt_module_open(string cipher, string cipher_directory, string mode, string mode_directory)" returns="resource" doc="Opens the module of the algorithm and the mode to be&#10;used" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_generic_init" signature="mcrypt_generic_init(resource td, string key, string iv)" returns="int" doc="This function initializes all buffers for the specific&#10;module" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_generic" signature="mcrypt_generic(resource td, string data)" returns="string" doc="This function encrypts the plaintext" ilk="function" src="mcrypt.c"/>
      <scope name="mdecrypt_generic" signature="mdecrypt_generic(resource td, string data)" returns="string" doc="This function decrypts the plaintext" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_supported_key_sizes" signature="mcrypt_enc_get_supported_key_sizes(resource td)" returns="array" doc="This function decrypts the crypttext" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_self_test" signature="mcrypt_enc_self_test(resource td)" returns="int" doc="This function runs the self test on the algorithm&#10;specified by the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_close" signature="mcrypt_module_close(resource td)" returns="bool" doc="Free the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_generic_end" signature="mcrypt_generic_end(resource td)" returns="bool" doc="This function terminates encrypt specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_generic_deinit" signature="mcrypt_generic_deinit(resource td)" returns="bool" doc="This function terminates encrypt specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_is_block_algorithm_mode" signature="mcrypt_enc_is_block_algorithm_mode(resource td)" returns="bool" doc="Returns TRUE if the mode is for use with block&#10;algorithms" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_is_block_algorithm" signature="mcrypt_enc_is_block_algorithm(resource td)" returns="bool" doc="Returns TRUE if the alrogithm is a block algorithms" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_is_block_mode" signature="mcrypt_enc_is_block_mode(resource td)" returns="bool" doc="Returns TRUE if the mode outputs blocks" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_block_size" signature="mcrypt_enc_get_block_size(resource td)" returns="int" doc="Returns the block size of the cipher specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_key_size" signature="mcrypt_enc_get_key_size(resource td)" returns="int" doc="Returns the maximum supported key size in bytes of the&#10;algorithm specified by the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_iv_size" signature="mcrypt_enc_get_iv_size(resource td)" returns="int" doc="Returns the size of the IV in bytes of the algorithm&#10;specified by the descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_algorithms_name" signature="mcrypt_enc_get_algorithms_name(resource td)" returns="string" doc="Returns the name of the algorithm specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_enc_get_modes_name" signature="mcrypt_enc_get_modes_name(resource td)" returns="string" doc="Returns the name of the mode specified by the&#10;descriptor td" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_self_test" signature="mcrypt_module_self_test(string algorithm [, string lib_dir])" returns="bool" doc="Does a self test of the module module" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_is_block_algorithm_mode" signature="mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir])" returns="bool" doc="Returns TRUE if the mode is for use with block&#10;algorithms" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_is_block_algorithm" signature="mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir])" returns="bool" doc="Returns TRUE if the algorithm is a block algorithm" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_is_block_mode" signature="mcrypt_module_is_block_mode(string mode [, string lib_dir])" returns="bool" doc="Returns TRUE if the mode outputs blocks of bytes" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_get_algo_block_size" signature="mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir])" returns="int" doc="Returns the block size of the algorithm" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_get_algo_key_size" signature="mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir])" returns="int" doc="Returns the maximum supported key size of the algorithm" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_module_get_supported_key_sizes" signature="mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir])" returns="array" doc="This function decrypts the crypttext" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_list_algorithms" signature="mcrypt_list_algorithms([string lib_dir])" returns="array" doc="List all algorithms in module dir" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_list_modes" signature="mcrypt_list_modes([string lib_dir])" returns="array" doc="List all modes module dir" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_key_size" signature="mcrypt_get_key_size(int cipher)" returns="int" doc="Get the key size of cipher" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_block_size" signature="mcrypt_get_block_size(int cipher)" returns="int" doc="Get the block size of cipher" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_iv_size" signature="mcrypt_get_iv_size(string cipher, string module)" returns="int" doc="Get the IV size of cipher Usually the same as the&#10;blocksize" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_get_cipher_name" signature="mcrypt_get_cipher_name(int cipher)" returns="string" doc="Get the name of cipher" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_encrypt" signature="mcrypt_encrypt(string cipher, string key, string data, string mode, string iv)" returns="string" doc="OFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_decrypt" signature="mcrypt_decrypt(string cipher, string key, string data, string mode, string iv)" returns="string" doc="OFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_ecb" signature="mcrypt_ecb(int cipher, string key, string data, int mode)" returns="string" doc="ECB crypt decrypt data using key key with cipher cipher" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_cbc" signature="mcrypt_cbc(int cipher, string key, string data, int mode [, string iv])" returns="string" doc="CBC crypt decrypt data using key key with cipher cipher&#10;using optional iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_cfb" signature="mcrypt_cfb(int cipher, string key, string data, int mode, string iv)" returns="string" doc="CFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_ofb" signature="mcrypt_ofb(int cipher, string key, string data, int mode, string iv)" returns="string" doc="OFB crypt decrypt data using key key with cipher cipher&#10;starting with iv" ilk="function" src="mcrypt.c"/>
      <scope name="mcrypt_create_iv" signature="mcrypt_create_iv(int size, int source)" returns="string" doc="Create an initialization vector IV" ilk="function" src="mcrypt.c"/>
      <scope name="m_initengine" signature="m_initengine(string location)" returns="int" doc="Ready the client for IP SSL Communication" ilk="function" src="mcve.c"/>
      <scope name="m_initconn" signature="m_initconn(void)" returns="resource" doc="Create and initialize an MCVE CONN structure" ilk="function" src="mcve.c"/>
      <scope name="m_deleteresponse" signature="m_deleteresponse(resource conn, int identifier)" returns="bool" doc="Delete specified transaction from MCVE CONN structure" ilk="function" src="mcve.c"/>
      <scope name="m_deletetrans" signature="m_deletetrans(resource conn, int identifier)" returns="bool" doc="Delete specified transaction from MCVE CONN structure" ilk="function" src="mcve.c"/>
      <scope name="m_destroyconn" signature="m_destroyconn(resource conn)" returns="void" doc="Destroy the connection and MCVE CONN structure" ilk="function" src="mcve.c"/>
      <scope name="m_setdropfile" signature="m_setdropfile(resource conn, string directory)" returns="int" doc="Set the connection method to Drop-File" ilk="function" src="mcve.c"/>
      <scope name="m_setip" signature="m_setip(resource conn, string host, int port)" returns="int" doc="Set the connection method to IP" ilk="function" src="mcve.c"/>
      <scope name="m_setssl" signature="m_setssl(resource conn, string host, int port)" returns="int" doc="Set the connection method to SSL" ilk="function" src="mcve.c"/>
      <scope name="m_setssl_files" signature="m_setssl_files(resource conn, string sslkeyfile, string sslcertfile)" returns="int" doc="Set certificate key files and certificates if server&#10;requires client certificate verification" ilk="function" src="mcve.c"/>
      <scope name="m_settimeout" signature="m_settimeout(resource conn, int seconds)" returns="int" doc="Set maximum transaction time per trans" ilk="function" src="mcve.c"/>
      <scope name="m_setblocking" signature="m_setblocking(resource conn, int tf)" returns="int" doc="Set blocking non-blocking mode for connection" ilk="function" src="mcve.c"/>
      <scope name="m_verifyconnection" signature="m_verifyconnection(resource conn, int tf)" returns="bool" doc="Set whether or not to PING upon connect to verify&#10;connection" ilk="function" src="mcve.c"/>
      <scope name="m_verifysslcert" signature="m_verifysslcert(resource conn, int tf)" returns="bool" doc="Set whether or not to verify the server ssl certificate" ilk="function" src="mcve.c"/>
      <scope name="m_maxconntimeout" signature="m_maxconntimeout(resource conn, int secs)" returns="bool" doc="The maximum amount of time the API will attempt a&#10;connection to MCVE" ilk="function" src="mcve.c"/>
      <scope name="m_connect" signature="m_connect(resource conn)" returns="int" doc="Establish the connection to MCVE" ilk="function" src="mcve.c"/>
      <scope name="m_connectionerror" signature="m_connectionerror(resource conn)" returns="string" doc="Get a textual representation of why a connection failed" ilk="function" src="mcve.c"/>
      <scope name="m_transactionssent" signature="m_transactionssent(resource conn)" returns="int" doc="Check to see if outgoing buffer is clear" ilk="function" src="mcve.c"/>
      <scope name="m_ping" signature="m_ping(resource conn)" returns="int" doc="Send a ping request to MCVE" ilk="function" src="mcve.c"/>
      <scope name="m_transnew" signature="m_transnew(resource conn)" returns="int" doc="Start a new transaction" ilk="function" src="mcve.c"/>
      <scope name="m_transparam" signature="m_transparam(resource conn, long identifier, int key, ...)" returns="int" doc="Add a parameter to a transaction" ilk="function" src="mcve.c"/>
      <scope name="m_transsend" signature="m_transsend(resource conn, long identifier)" returns="int" doc="Finalize and send the transaction" ilk="function" src="mcve.c"/>
      <scope name="m_responseparam" signature="m_responseparam(resource conn, long identifier, string key)" returns="string" doc="Get a custom response parameter" ilk="function" src="mcve.c"/>
      <scope name="m_getuserparam" signature="m_getuserparam(resource conn, long identifier, int key)" returns="string" doc="Get a user response parameter" ilk="function" src="mcve.c"/>
      <scope name="m_returnstatus" signature="m_returnstatus(resource conn, int identifier)" returns="int" doc="Check to see if the transaction was successful" ilk="function" src="mcve.c"/>
      <scope name="m_returncode" signature="m_returncode(resource conn, int identifier)" returns="int" doc="Grab the exact return code from the transaction" ilk="function" src="mcve.c"/>
      <scope name="m_transactionitem" signature="m_transactionitem(resource conn, int identifier)" returns="int" doc="Get the ITEM number in the associated batch for this&#10;transaction" ilk="function" src="mcve.c"/>
      <scope name="m_transactionavs" signature="m_transactionavs(resource conn, int identifier)" returns="int" doc="Get the Address Verification return status" ilk="function" src="mcve.c"/>
      <scope name="m_transactioncv" signature="m_transactioncv(resource conn, int identifier)" returns="int" doc="Get the CVC CVV CID return status" ilk="function" src="mcve.c"/>
      <scope name="m_transactionbatch" signature="m_transactionbatch(resource conn, int identifier)" returns="int" doc="Get the batch number associated with the transaction" ilk="function" src="mcve.c"/>
      <scope name="m_transactionid" signature="m_transactionid(resource conn, int identifier)" returns="int" doc="Get the unique system id for the transaction" ilk="function" src="mcve.c"/>
      <scope name="m_transactionauth" signature="m_transactionauth(resource conn, int identifier)" returns="string" doc="Get the authorization number returned for the&#10;transaction alpha-numeric" ilk="function" src="mcve.c"/>
      <scope name="m_transactiontext" signature="m_transactiontext(resource conn, int identifier)" returns="string" doc="Get verbiage text return from MCVE or processing&#10;institution" ilk="function" src="mcve.c"/>
      <scope name="m_monitor" signature="m_monitor(resource conn)" returns="int" doc="Perform communication with MCVE send receive data&#10;Non-blocking" ilk="function" src="mcve.c"/>
      <scope name="m_transinqueue" signature="m_transinqueue(resource conn)" returns="int" doc="Number of transactions in client-queue" ilk="function" src="mcve.c"/>
      <scope name="m_checkstatus" signature="m_checkstatus(resource conn, int identifier)" returns="int" doc="Check to see if a transaction has completed" ilk="function" src="mcve.c"/>
      <scope name="m_completeauthorizations" signature="m_completeauthorizations(resource conn, int &amp;array)" returns="int" doc="Number of complete authorizations in queue returning an&#10;array of their identifiers" ilk="function" src="mcve.c"/>
      <scope name="m_sale" signature="m_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)" returns="int" doc="Send a SALE to MCVE" ilk="function" src="mcve.c"/>
      <scope name="m_override" signature="m_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum)" returns="int" doc="Send an OVERRIDE to MCVE" ilk="function" src="mcve.c"/>
      <scope name="m_void" signature="m_void(resource conn, string username, string password, int sid, int ptrannum)" returns="int" doc="VOID a transaction in the settlement queue" ilk="function" src="mcve.c"/>
      <scope name="m_preauthcompletion" signature="m_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum)" returns="int" doc="Complete a PREAUTHORIZATION Ready it for settlement" ilk="function" src="mcve.c"/>
      <scope name="m_force" signature="m_force(resiurce conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ptrannum)" returns="int" doc="Send a FORCE to MCVE typically a phone-authorization" ilk="function" src="mcve.c"/>
      <scope name="m_return" signature="m_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)" returns="int" doc="Issue a RETURN or CREDIT to MCVE" ilk="function" src="mcve.c"/>
      <scope name="m_settle" signature="m_settle(resource conn, string username, string password, string batch)" returns="int" doc="Issue a settlement command to do a batch deposit" ilk="function" src="mcve.c"/>
      <scope name="m_ub" signature="m_ub(resource conn, string username, string password)" returns="int" doc="Get a list of all Unsettled batches" ilk="function" src="mcve.c"/>
      <scope name="m_qc" signature="m_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)" returns="int" doc="Audit MCVE for a list of transactions in the outgoing&#10;queue" ilk="function" src="mcve.c"/>
      <scope name="m_gut" signature="m_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)" returns="int" doc="Audit MCVE for Unsettled Transactions" ilk="function" src="mcve.c"/>
      <scope name="m_gl" signature="m_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)" returns="int" doc="Audit MCVE for settled transactions" ilk="function" src="mcve.c"/>
      <scope name="m_gft" signature="m_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)" returns="int" doc="Audit MCVE for Failed transactions" ilk="function" src="mcve.c"/>
      <scope name="m_chkpwd" signature="m_chkpwd(resource conn, string username, string password)" returns="int" doc="Verify Password" ilk="function" src="mcve.c"/>
      <scope name="m_bt" signature="m_bt(resource conn, string username, string password)" returns="int" doc="Get unsettled batch totals" ilk="function" src="mcve.c"/>
      <scope name="m_getcell" signature="m_getcell(resource conn, int identifier, string column, int row)" returns="string" doc="Get a specific cell from a comma delimited response by&#10;column name" ilk="function" src="mcve.c"/>
      <scope name="m_getcellbynum" signature="m_getcellbynum(resource conn, int identifier, int column, int row)" returns="string" doc="Get a specific cell from a comma delimited response by&#10;column number" ilk="function" src="mcve.c"/>
      <scope name="m_numcolumns" signature="m_numcolumns(resource conn, int identifier)" returns="int" doc="Number of columns returned in a comma delimited&#10;response" ilk="function" src="mcve.c"/>
      <scope name="m_numrows" signature="m_numrows(resource conn, int identifier)" returns="int" doc="Number of rows returned in a comma delimited response" ilk="function" src="mcve.c"/>
      <scope name="m_iscommadelimited" signature="m_iscommadelimited(resource conn, int identifier)" returns="int" doc="Checks to see if response is comma delimited" ilk="function" src="mcve.c"/>
      <scope name="m_parsecommadelimited" signature="m_parsecommadelimited(resource conn, int identifier)" returns="int" doc="Parse the comma delimited response so m getcell etc&#10;will work" ilk="function" src="mcve.c"/>
      <scope name="m_getcommadelimited" signature="m_getcommadelimited(resource conn, int identifier)" returns="string" doc="Get the RAW comma delimited data returned from MCVE" ilk="function" src="mcve.c"/>
      <scope name="m_getheader" signature="m_getheader(resource conn, int identifier, int column_num)" returns="string" doc="Get the name of the column in a comma-delimited&#10;response" ilk="function" src="mcve.c"/>
      <scope name="m_destroyengine" signature="m_destroyengine(void)" returns="void" doc="Free memory associated with IP SSL connectivity" ilk="function" src="mcve.c"/>
      <scope name="m_chngpwd" signature="m_chngpwd(resource conn, string admin_password, string new_password)" returns="int" doc="Change the system administrator's password" ilk="function" src="mcve.c"/>
      <scope name="m_listusers" signature="m_listusers(resource conn, string admin_password)" returns="int" doc="List all users on MCVE system" ilk="function" src="mcve.c"/>
      <scope name="m_enableuser" signature="m_enableuser(resource conn, string admin_password, string username)" returns="int" doc="Enable an inactive MCVE user account" ilk="function" src="mcve.c"/>
      <scope name="m_disableuser" signature="m_disableuser(resource conn, string admin_password, string username)" returns="int" doc="Disable an active MCVE user account" ilk="function" src="mcve.c"/>
      <scope name="m_deluser" signature="m_deluser(resource conn, string admin_password, string username)" returns="int" doc="Delete an MCVE user account" ilk="function" src="mcve.c"/>
      <scope name="m_liststats" signature="m_liststats(resource conn, string admin_password)" returns="int" doc="List statistics for all users on MCVE system" ilk="function" src="mcve.c"/>
      <scope name="m_initusersetup" signature="m_initusersetup(void)" returns="resource" doc="Initialize structure to store user data" ilk="function" src="mcve.c"/>
      <scope name="m_deleteusersetup" signature="m_deleteusersetup(resource usersetup)" returns="void" doc="Deallocate data associated with usersetup structure" ilk="function" src="mcve.c"/>
      <scope name="m_adduserarg" signature="m_adduserarg(resource usersetup, int argtype, string argval)" returns="int" doc="Add a value to user configuration structure" ilk="function" src="mcve.c"/>
      <scope name="m_getuserarg" signature="m_getuserarg(resource usersetup, int argtype)" returns="string" doc="Grab a value from usersetup structure" ilk="function" src="mcve.c"/>
      <scope name="m_adduser" signature="m_adduser(resource conn, string admin_password, int usersetup)" returns="int" doc="Add an MCVE user using usersetup structure" ilk="function" src="mcve.c"/>
      <scope name="m_edituser" signature="m_edituser(resource conn, string admin_password, int usersetup)" returns="int" doc="Edit MCVE user using usersetup structure" ilk="function" src="mcve.c"/>
      <scope name="m_uwait" signature="m_uwait(long microsecs)" returns="int" doc="Wait x microsecs" ilk="function" src="mcve.c"/>
      <scope name="m_text_code" signature="m_text_code(string code)" returns="string" doc="Get a textual representation of the return code" ilk="function" src="mcve.c"/>
      <scope name="m_text_avs" signature="m_text_avs(string code)" returns="string" doc="Get a textual representation of the return avs" ilk="function" src="mcve.c"/>
      <scope name="m_text_cv" signature="m_text_cv(int code)" returns="string" doc="Get a textual representation of the return cv" ilk="function" src="mcve.c"/>
      <scope name="mhash_count" signature="mhash_count(void)" returns="int" doc="Gets the number of available hashes" ilk="function" src="mhash.c"/>
      <scope name="mhash_get_block_size" signature="mhash_get_block_size(int hash)" returns="int" doc="Gets the block size of hash" ilk="function" src="mhash.c"/>
      <scope name="mhash_get_hash_name" signature="mhash_get_hash_name(int hash)" returns="string" doc="Gets the name of hash" ilk="function" src="mhash.c"/>
      <scope name="mhash" signature="mhash(int hash, string data [, string key])" returns="string" doc="Hash data with hash" ilk="function" src="mhash.c"/>
      <scope name="mhash_keygen_s2k" signature="mhash_keygen_s2k(int hash, string input_password, string salt, int bytes)" returns="string" doc="Generates a key using hash functions" ilk="function" src="mhash.c"/>
      <scope name="mime_content_type" signature="mime_content_type(string filename)" returns="string" doc="Return content-type for file" ilk="function" src="mime_magic.c"/>
      <scope name="ming_setscale" signature="ming_setscale(int scale)" returns="void" doc="Set scale" ilk="function" src="ming.c"/>
      <scope name="ming_useswfversion" signature="ming_useswfversion(int version)" returns="void" doc="Use SWF version" ilk="function" src="ming.c"/>
      <scope name="swfaction_init" signature="swfaction_init(string)" returns="object" doc="Returns a new SWFAction object compiling the given&#10;script" ilk="function" src="ming.c"/>
      <scope name="swfbitmap_init" signature="swfbitmap_init(mixed file [, mixed maskfile])" returns="class" doc="Returns a new SWFBitmap object from jpg with optional&#10;mask or dbl file" ilk="function" src="ming.c"/>
      <scope name="swfbitmap_getWidth" signature="swfbitmap_getWidth(void)" returns="float" doc="Returns the width of this bitmap" ilk="function" src="ming.c"/>
      <scope name="swfbitmap_getHeight" signature="swfbitmap_getHeight(void)" returns="float" doc="Returns the height of this bitmap" ilk="function" src="ming.c"/>
      <scope name="swfbutton_init" signature="swfbutton_init(void)" returns="object" doc="Returns a new SWFButton object" ilk="function" src="ming.c"/>
      <scope name="swfbutton_setHit" signature="swfbutton_setHit(object SWFCharacter)" returns="void" doc="Sets the character for this button's hit test state" ilk="function" src="ming.c"/>
      <scope name="swfbutton_setOver" signature="swfbutton_setOver(object SWFCharacter)" returns="void" doc="Sets the character for this button's over state" ilk="function" src="ming.c"/>
      <scope name="swfbutton_setUp" signature="swfbutton_setUp(object SWFCharacter)" returns="void" doc="Sets the character for this button's up state" ilk="function" src="ming.c"/>
      <scope name="swfbutton_setDown" signature="swfbutton_setDown(object SWFCharacter)" returns="void" doc="Sets the character for this button's down state" ilk="function" src="ming.c"/>
      <scope name="swfbutton_addShape" signature="swfbutton_addShape(object SWFCharacter, int flags)" returns="void" doc="Sets the character to display for the condition&#10;described in flags" ilk="function" src="ming.c"/>
      <scope name="swfbutton_setAction" signature="swfbutton_setAction(object SWFAction)" returns="void" doc="Sets the action to perform when button is pressed" ilk="function" src="ming.c"/>
      <scope name="swfbutton_addAction" signature="swfbutton_addAction(object SWFAction, int flags)" returns="void" doc="Sets the action to perform when conditions described in&#10;flags is met" ilk="function" src="ming.c"/>
      <scope name="swfbutton_keypress" signature="swfbutton_keypress(string str)" returns="int" doc="Returns the action flag for keyPress char" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_moveTo" signature="swfdisplayitem_moveTo(int x, int y)" returns="void" doc="Moves this SWFDisplayItem to movie coordinates x y" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_move" signature="swfdisplayitem_move(float dx, float dy)" returns="void" doc="Displaces this SWFDisplayItem by dx dy in movie&#10;coordinates" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_scaleTo" signature="swfdisplayitem_scaleTo(float xScale [, float yScale])" returns="void" doc="Scales this SWFDisplayItem by xScale in the x direction&#10;yScale in the y or both to xScale if only one" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_scale" signature="swfdisplayitem_scale(float xScale, float yScale)" returns="void" doc="Multiplies this SWFDisplayItem's current x scale by&#10;xScale its y scale by yScale" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_rotateTo" signature="swfdisplayitem_rotateTo(float degrees)" returns="void" doc="Rotates this SWFDisplayItem the given clockwise degrees&#10;from its original orientation" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_rotate" signature="swfdisplayitem_rotate(float degrees)" returns="void" doc="Rotates this SWFDisplayItem the given clockwise degrees&#10;from its current orientation" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_skewXTo" signature="swfdisplayitem_skewXTo(float xSkew)" returns="void" doc="Sets this SWFDisplayItem's x skew value to xSkew" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_skewX" signature="swfdisplayitem_skewX(float xSkew)" returns="void" doc="Adds xSkew to this SWFDisplayItem's x skew value" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_skewYTo" signature="swfdisplayitem_skewYTo(float ySkew)" returns="void" doc="Sets this SWFDisplayItem's y skew value to ySkew" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_skewY" signature="swfdisplayitem_skewY(float ySkew)" returns="void" doc="Adds ySkew to this SWFDisplayItem's y skew value" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_setMatrix" signature="swfdisplayitem_setMatrix(float a, float b, float c, float d, float x, float y)" returns="void" doc="Sets the item's transform matrix" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_setDepth" signature="swfdisplayitem_setDepth(int depth)" returns="void" doc="Sets this SWFDisplayItem's z-depth to depth Items with&#10;higher depth values are drawn on top of those with&#10;lower values" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_setRatio" signature="swfdisplayitem_setRatio(float ratio)" returns="void" doc="Sets this SWFDisplayItem's ratio to ratio Obviously&#10;only does anything if displayitem was created from an&#10;SWFMorph" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_addColor" signature="swfdisplayitem_addColor(int r, int g, int b [, int a])" returns="void" doc="Sets the add color part of this SWFDisplayItem's CXform&#10;to r g b a a defaults to" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_multColor" signature="swfdisplayitem_multColor(float r, float g, float b [, float a])" returns="void" doc="Sets the multiply color part of this SWFDisplayItem's&#10;CXform to r g b a a defaults to" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_setName" signature="swfdisplayitem_setName(string name)" returns="void" doc="Sets this SWFDisplayItem's name to name" ilk="function" src="ming.c"/>
      <scope name="swfdisplayitem_addAction" signature="swfdisplayitem_addAction(object SWFAction, int flags)" returns="void" doc="Adds this SWFAction to the given SWFSprite instance" ilk="function" src="ming.c"/>
      <scope name="swffill_init" signature="swffill_init(void)" returns="class" doc="Returns a new SWFFill object" ilk="function" src="ming.c"/>
      <scope name="swffill_moveTo" signature="swffill_moveTo(float x, float y)" returns="void" doc="Moves this SWFFill to shape coordinates x y" ilk="function" src="ming.c"/>
      <scope name="swffill_scaleTo" signature="swffill_scaleTo(float xScale [, float yScale])" returns="void" doc="Scales this SWFFill by xScale in the x direction yScale&#10;in the y or both to xScale if only one" ilk="function" src="ming.c"/>
      <scope name="swffill_rotateTo" signature="swffill_rotateTo(float degrees)" returns="void" doc="Rotates this SWFFill the given clockwise degrees from&#10;its original orientation" ilk="function" src="ming.c"/>
      <scope name="swffill_skewXTo" signature="swffill_skewXTo(float xSkew)" returns="void" doc="Sets this SWFFill's x skew value to xSkew" ilk="function" src="ming.c"/>
      <scope name="swffill_skewYTo" signature="swffill_skewYTo(float ySkew)" returns="void" doc="Sets this SWFFill's y skew value to ySkew" ilk="function" src="ming.c"/>
      <scope name="swffont_init" signature="swffont_init(string filename)" returns="object" doc="Returns a new SWFFont object from given file" ilk="function" src="ming.c"/>
      <scope name="swffont_getWidth" signature="swffont_getWidth(string str)" returns="float" doc="Calculates the width of the given string in this font&#10;at full height" ilk="function" src="ming.c"/>
      <scope name="swffont_getAscent" signature="swffont_getAscent(void)" returns="float" doc="Returns the ascent of the font or if not available" ilk="function" src="ming.c"/>
      <scope name="swffont_getDescent" signature="swffont_getDescent(void)" returns="float" doc="Returns the descent of the font or if not available" ilk="function" src="ming.c"/>
      <scope name="swffont_getLeading" signature="swffont_getLeading(void)" returns="float" doc="Returns the leading of the font or if not available" ilk="function" src="ming.c"/>
      <scope name="swfgradient_init" signature="swfgradient_init(void)" returns="class" doc="Returns a new SWFGradient object" ilk="function" src="ming.c"/>
      <scope name="swfgradient_addEntry" signature="swfgradient_addEntry(float ratio, int r, int g, int b [, int a])" returns="void" doc="Adds given entry to the gradient" ilk="function" src="ming.c"/>
      <scope name="swfmorph_init" signature="swfmorph_init(void)" returns="object" doc="Returns a new SWFMorph object" ilk="function" src="ming.c"/>
      <scope name="swfmorph_getShape1" signature="swfmorph_getShape1(void)" returns="object" doc="Return's this SWFMorph's start shape object" ilk="function" src="ming.c"/>
      <scope name="swfmorph_getShape2" signature="swfmorph_getShape2(void)" returns="object" doc="Return's this SWFMorph's start shape object" ilk="function" src="ming.c"/>
      <scope name="swfmovie_init" signature="swfmovie_init(int version)" returns="object" doc="Creates swfmovie object according to the passed version" ilk="function" src="ming.c"/>
      <scope name="swfmovie_nextframe" signature="swfmovie_nextframe(void)" returns="void" doc="" ilk="function" src="ming.c"/>
      <scope name="swfmovie_labelframe" signature="swfmovie_labelframe(object SWFBlock)" returns="void" doc="" ilk="function" src="ming.c"/>
      <scope name="swfmovie_add" signature="swfmovie_add(object SWFBlock)" returns="object" doc="" ilk="function" src="ming.c"/>
      <scope name="swfmovie_output" signature="swfmovie_output([int compression])" returns="int" doc="" ilk="function" src="ming.c"/>
      <scope name="swfmovie_saveToFile" signature="swfmovie_saveToFile(stream x [, int compression])" returns="int" doc="" ilk="function" src="ming.c"/>
      <scope name="swfmovie_save" signature="swfmovie_save(mixed where [, int compression])" returns="int" doc="Saves the movie 'where' can be stream and the movie&#10;will be saved there otherwise it is treated as string" ilk="function" src="ming.c"/>
      <scope name="swfmovie_setBackground" signature="swfmovie_setBackground(int r, int g, int b)" returns="void" doc="Sets background color r g b" ilk="function" src="ming.c"/>
      <scope name="swfmovie_setRate" signature="swfmovie_setRate(float rate)" returns="void" doc="Sets movie rate" ilk="function" src="ming.c"/>
      <scope name="swfmovie_setDimension" signature="swfmovie_setDimension(float x, float y)" returns="void" doc="Sets movie dimension" ilk="function" src="ming.c"/>
      <scope name="swfmovie_setFrames" signature="swfmovie_setFrames(int frames)" returns="void" doc="Sets number of frames" ilk="function" src="ming.c"/>
      <scope name="swfmovie_streamMp3" signature="swfmovie_streamMp3(mixed file)" returns="void" doc="Sets sound stream of the SWF movie The parameter can be&#10;stream or string" ilk="function" src="ming.c"/>
      <scope name="swfshape_init" signature="swfshape_init(void)" returns="object" doc="Returns a new SWFShape object" ilk="function" src="ming.c"/>
      <scope name="swfshape_setline" signature="swfshape_setline(int width, int r, int g, int b [, int a])" returns="void" doc="Sets the current line style for this SWFShape" ilk="function" src="ming.c"/>
      <scope name="swfshape_addfill" signature="swfshape_addfill(mixed arg1, int arg2, [int b [, int a]])" returns="object" doc="Returns a fill object for use with swfshape setleftfill&#10;and swfshape setrightfill If or parameter s is are&#10;passed first" ilk="function" src="ming.c"/>
      <scope name="swfshape_setleftfill" signature="swfshape_setleftfill(int arg1 [, int g ,int b [,int a]])" returns="void" doc="Sets the right side fill style to fill in case only one&#10;parameter is passed When or parameters are passed" ilk="function" src="ming.c"/>
      <scope name="swfshape_movepento" signature="swfshape_movepento(float x, float y)" returns="void" doc="Moves the pen to shape coordinates x y" ilk="function" src="ming.c"/>
      <scope name="swfshape_movepen" signature="swfshape_movepen(float x, float y)" returns="void" doc="Moves the pen from its current location by vector x y" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawlineto" signature="swfshape_drawlineto(float x, float y)" returns="void" doc="Draws a line from the current pen position to shape&#10;coordinates x y in the current line style" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawline" signature="swfshape_drawline(float dx, float dy)" returns="void" doc="Draws a line from the current pen position x y to the&#10;point x dx y dy in the current" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawcurveto" signature="swfshape_drawcurveto(float ax, float ay, float bx, float by [, float dx, float dy])" returns="void" doc="Draws a curve from the current pen position x y to the&#10;point bx by in the current line style" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawcurve" signature="swfshape_drawcurve(float adx, float ady, float bdx, float bdy [, float cdx, float cdy])" returns="void" doc="Draws a curve from the current pen position x y to the&#10;point x bdx y bdy in the current" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawglyph" signature="swfshape_drawglyph(SWFFont font, string character [, int size])" returns="void" doc="Draws the first character in the given string into the&#10;shape using the glyph definition from the given font" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawcircle" signature="swfshape_drawcircle(float r)" returns="void" doc="Draws a circle of radius r centered at the current&#10;location in a counter-clockwise fashion" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawarc" signature="swfshape_drawarc(float r, float startAngle, float endAngle)" returns="void" doc="Draws an arc of radius r centered at the current&#10;location from angle startAngle to angle endAngle&#10;measured counterclockwise from" ilk="function" src="ming.c"/>
      <scope name="swfshape_drawcubic" signature="swfshape_drawcubic(float bx, float by, float cx, float cy, float dx, float dy)" returns="void" doc="Draws a cubic bezier curve using the current position&#10;and the three given points as control points" ilk="function" src="ming.c"/>
      <scope name="swfsprite_init" signature="swfsprite_init(void)" returns="class" doc="Returns a new SWFSprite object" ilk="function" src="ming.c"/>
      <scope name="swfsprite_add" signature="swfsprite_add(object SWFCharacter)" returns="object" doc="Adds the character to the sprite returns a displayitem&#10;object" ilk="function" src="ming.c"/>
      <scope name="swfsprite_remove" signature="swfsprite_remove(object SWFDisplayItem)" returns="void" doc="Remove the named character from the sprite's display&#10;list" ilk="function" src="ming.c"/>
      <scope name="swfsprite_nextFrame" signature="swfsprite_nextFrame(void)" returns="void" doc="Moves the sprite to the next frame" ilk="function" src="ming.c"/>
      <scope name="swfsprite_labelFrame" signature="swfsprite_labelFrame(string label)" returns="void" doc="Labels frame" ilk="function" src="ming.c"/>
      <scope name="swfsprite_setFrames" signature="swfsprite_setFrames(int frames)" returns="void" doc="Sets the number of frames in this SWFSprite" ilk="function" src="ming.c"/>
      <scope name="swftext_init" signature="swftext_init(void)" returns="class" doc="Returns new SWFText object" ilk="function" src="ming.c"/>
      <scope name="swftext_setFont" signature="swftext_setFont(object font)" returns="void" doc="Sets this SWFText object's current font to given font" ilk="function" src="ming.c"/>
      <scope name="swftext_setHeight" signature="swftext_setHeight(float height)" returns="void" doc="Sets this SWFText object's current height to given&#10;height" ilk="function" src="ming.c"/>
      <scope name="swftext_setSpacing" signature="swftext_setSpacing(float spacing)" returns="void" doc="Sets this SWFText object's current letterspacing to&#10;given spacing" ilk="function" src="ming.c"/>
      <scope name="swftext_setColor" signature="swftext_setColor(int r, int g, int b [, int a])" returns="void" doc="Sets this SWFText object's current color to the given&#10;color" ilk="function" src="ming.c"/>
      <scope name="swftext_moveTo" signature="swftext_moveTo(float x, float y)" returns="void" doc="Moves this SWFText object's current pen position to x y&#10;in text coordinates" ilk="function" src="ming.c"/>
      <scope name="swftext_addString" signature="swftext_addString(string text)" returns="void" doc="Writes the given text into this SWFText object at the&#10;current pen position using the current font height&#10;spacing and" ilk="function" src="ming.c"/>
      <scope name="swftext_getWidth" signature="swftext_getWidth(string str)" returns="float" doc="Calculates the width of the given string in this text&#10;objects current font and size" ilk="function" src="ming.c"/>
      <scope name="swftext_getAscent" signature="swftext_getAscent(void)" returns="float" doc="Returns the ascent of the current font at its current&#10;size or if not available" ilk="function" src="ming.c"/>
      <scope name="swftext_getDescent" signature="swftext_getDescent(void)" returns="float" doc="Returns the descent of the current font at its current&#10;size or if not available" ilk="function" src="ming.c"/>
      <scope name="swftext_getLeading" signature="swftext_getLeading(void)" returns="float" doc="Returns the leading of the current font at its current&#10;size or if not available" ilk="function" src="ming.c"/>
      <scope name="swftextfield_init" signature="swftextfield_init([int flags])" returns="object" doc="Returns a new SWFTextField object" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setFont" signature="swftextfield_setFont(object font)" returns="void" doc="Sets the font for this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setBounds" signature="swftextfield_setBounds(float width, float height)" returns="void" doc="Sets the width and height of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_align" signature="swftextfield_align(int alignment)" returns="void" doc="Sets the alignment of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setHeight" signature="swftextfield_setHeight(float height)" returns="void" doc="Sets the font height of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setLeftMargin" signature="swftextfield_setLeftMargin(float margin)" returns="void" doc="Sets the left margin of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setRightMargin" signature="swftextfield_setRightMargin(float margin)" returns="void" doc="Sets the right margin of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setMargins" signature="swftextfield_setMargins(float left, float right)" returns="void" doc="Sets both margins of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setIndentation" signature="swftextfield_setIndentation(float indentation)" returns="void" doc="Sets the indentation of the first line of this&#10;textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setLineSpacing" signature="swftextfield_setLineSpacing(float space)" returns="void" doc="Sets the line spacing of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setColor" signature="swftextfield_setColor(int r, int g, int b [, int a])" returns="void" doc="Sets the color of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_setName" signature="swftextfield_setName(string var_name)" returns="void" doc="Sets the variable name of this textfield" ilk="function" src="ming.c"/>
      <scope name="swftextfield_addString" signature="swftextfield_addString(string str)" returns="void" doc="Adds the given string to this textfield" ilk="function" src="ming.c"/>
      <scope name="udm_alloc_agent" signature="udm_alloc_agent(string dbaddr [, string dbmode])" returns="int" doc="Allocate mnoGoSearch session" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_set_agent_param" signature="udm_set_agent_param(int agent, int var, string val)" returns="int" doc="Set mnoGoSearch agent session parameters" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_load_ispell_data" signature="udm_load_ispell_data(int agent, int var, string val1, [string charset], string val2, int flag)" returns="int" doc="Load ispell data" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_free_ispell_data" signature="udm_free_ispell_data(int agent)" returns="int" doc="Free memory allocated for ispell data" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_add_search_limit" signature="udm_add_search_limit(int agent, int var, string val)" returns="int" doc="Add mnoGoSearch search restrictions" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_clear_search_limits" signature="udm_clear_search_limits(int agent)" returns="int" doc="Clear all mnoGoSearch search restrictions" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_check_charset" signature="udm_check_charset(int agent, string charset)" returns="int" doc="Check if the given charset is known to mnogosearch" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_crc32" signature="udm_crc32(int agent, string str)" returns="int" doc="Return CRC checksum of gived string" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_open_stored" signature="udm_open_stored(int agent, string storedaddr)" returns="int" doc="Open connection to stored" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_close_stored" signature="udm_close_stored(int agent, int link)" returns="int" doc="Open connection to stored" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_check_stored" signature="udm_check_stored(int agent, int link, string doc_id)" returns="int" doc="Open connection to stored" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_parse_query_string" signature="udm_parse_query_string(int agent, string str)" returns="int" doc="Parses query string initialises variables and search&#10;limits taken from it" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_make_excerpt" signature="udm_make_excerpt(int agent, int res, int row)" returns="int" doc="Perform search" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_set_agent_param_ex" signature="udm_set_agent_param_ex(int agent, string var, string val)" returns="int" doc="Set mnoGoSearch agent session parameters extended" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_get_res_field_ex" signature="udm_get_res_field_ex(int res, int row, string field)" returns="string" doc="Fetch mnoGoSearch result field" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_alloc_agent_array" signature="udm_alloc_agent_array(array dbaddr)" returns="int" doc="Allocate mnoGoSearch session" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_hash32" signature="udm_hash32(int agent, string str)" returns="int" doc="Return Hash checksum of gived string" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_find" signature="udm_find(int agent, string query)" returns="int" doc="Perform search" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_get_res_field" signature="udm_get_res_field(int res, int row, int field)" returns="string" doc="Fetch mnoGoSearch result field" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_get_res_param" signature="udm_get_res_param(int res, int param)" returns="string" doc="Get mnoGoSearch result parameters" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_free_res" signature="udm_free_res(int res)" returns="int" doc="mnoGoSearch free result" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_free_agent" signature="udm_free_agent(int agent)" returns="int" doc="Free mnoGoSearch session" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_errno" signature="udm_errno(int agent)" returns="int" doc="Get mnoGoSearch error number" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_error" signature="udm_error(int agent)" returns="string" doc="Get mnoGoSearch error message" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_api_version" signature="udm_api_version()" returns="int" doc="Get mnoGoSearch API version" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_cat_list" signature="udm_cat_list(int agent, string category)" returns="array" doc="Get mnoGoSearch categories list with the same root" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_cat_path" signature="udm_cat_path(int agent, string category)" returns="array" doc="Get mnoGoSearch categories path from the root to the&#10;given catgory" ilk="function" src="php_mnogo.c"/>
      <scope name="udm_get_doc_count" signature="udm_get_doc_count(int agent)" returns="int" doc="Get total number of documents in database" ilk="function" src="php_mnogo.c"/>
      <scope name="msession_connect" signature="msession_connect(string host, string port)" returns="bool" doc="Connect to msession sever" ilk="function" src="msession.c"/>
      <scope name="msession_disconnect" signature="msession_disconnect(void)" returns="void" doc="Disconnect from msession server" ilk="function" src="msession.c"/>
      <scope name="msession_count" signature="msession_count(void)" returns="int" doc="Get session count" ilk="function" src="msession.c"/>
      <scope name="msession_create" signature="msession_create(string session)" returns="bool" doc="Create a session" ilk="function" src="msession.c"/>
      <scope name="msession_destroy" signature="msession_destroy(string name)" returns="bool" doc="Destroy a session" ilk="function" src="msession.c"/>
      <scope name="msession_lock" signature="msession_lock(string name)" returns="int" doc="Lock a session" ilk="function" src="msession.c"/>
      <scope name="msession_stat" signature="msession_stat(string name)" returns="int" doc="Lock a session" ilk="function" src="msession.c"/>
      <scope name="msession_unlock" signature="msession_unlock(string session, int key)" returns="int" doc="Unlock a session" ilk="function" src="msession.c"/>
      <scope name="msession_set" signature="msession_set(string session, string name, string value)" returns="bool" doc="Set value in session" ilk="function" src="msession.c"/>
      <scope name="msession_get" signature="msession_get(string session, string name, string default_value)" returns="string" doc="Get value from session" ilk="function" src="msession.c"/>
      <scope name="msession_uniq" signature="msession_uniq(int num_chars)" returns="string" doc="Get uniq id" ilk="function" src="msession.c"/>
      <scope name="msession_randstr" signature="msession_randstr(int num_chars)" returns="string" doc="Get random string" ilk="function" src="msession.c"/>
      <scope name="msession_find" signature="msession_find(string name, string value)" returns="array" doc="Find all sessions with name and value" ilk="function" src="msession.c"/>
      <scope name="msession_list" signature="msession_list(void)" returns="array" doc="List all sessions" ilk="function" src="msession.c"/>
      <scope name="msession_get_array" signature="msession_get_array(string session)" returns="array" doc="Get array of msession variables" ilk="function" src="msession.c"/>
      <scope name="msession_set_array" signature="msession_set_array(string session, array tuples)" returns="bool" doc="Set msession variables from an array" ilk="function" src="msession.c"/>
      <scope name="msession_listvar" signature="msession_listvar(string name)" returns="array" doc="return associative array of value session for all&#10;sessions with a variable named 'name'" ilk="function" src="msession.c"/>
      <scope name="msession_timeout" signature="msession_timeout(string session [, int param ])" returns="int" doc="Set get session timeout" ilk="function" src="msession.c"/>
      <scope name="msession_inc" signature="msession_inc(string session, string name)" returns="string" doc="Increment value in session" ilk="function" src="msession.c"/>
      <scope name="msession_get_data" signature="msession_get_data(string session)" returns="string" doc="Get data session unstructured data PHP sessions use&#10;this" ilk="function" src="msession.c"/>
      <scope name="msession_set_data" signature="msession_set_data(string session, string value)" returns="bool" doc="Set data session unstructured data PHP sessions use&#10;this" ilk="function" src="msession.c"/>
      <scope name="msession_plugin" signature="msession_plugin(string session, string val [, string param ])" returns="string" doc="Call the personality plugin escape function" ilk="function" src="msession.c"/>
      <scope name="msession_call" signature="msession_call(string fn_name, [, string param1 ], ... [,string param4])" returns="string" doc="Call the plugin function named fn name" ilk="function" src="msession.c"/>
      <scope name="msql_connect" signature="msql_connect([string hostname[:port]] [, string username] [, string password])" returns="int" doc="Open a connection to an mSQL Server" ilk="function" src="php_msql.c"/>
      <scope name="msql_pconnect" signature="msql_pconnect([string hostname[:port]] [, string username] [, string password])" returns="int" doc="Open a persistent connection to an mSQL Server" ilk="function" src="php_msql.c"/>
      <scope name="msql_close" signature="msql_close([int link_identifier])" returns="int" doc="Close an mSQL connection" ilk="function" src="php_msql.c"/>
      <scope name="msql_select_db" signature="msql_select_db(string database_name [, int link_identifier])" returns="int" doc="Select an mSQL database" ilk="function" src="php_msql.c"/>
      <scope name="msql_create_db" signature="msql_create_db(string database_name [, int link_identifier])" returns="int" doc="Create an mSQL database" ilk="function" src="php_msql.c"/>
      <scope name="msql_drop_db" signature="msql_drop_db(string database_name [, int link_identifier])" returns="int" doc="Drop delete an mSQL database" ilk="function" src="php_msql.c"/>
      <scope name="msql_query" signature="msql_query(string query [, int link_identifier])" returns="int" doc="Send an SQL query to mSQL" ilk="function" src="php_msql.c"/>
      <scope name="msql_db_query" signature="msql_db_query(string database_name, string query [, int link_identifier])" returns="int" doc="Send an SQL query to mSQL" ilk="function" src="php_msql.c"/>
      <scope name="msql_list_dbs" signature="msql_list_dbs([int link_identifier])" returns="int" doc="List databases available on an mSQL server" ilk="function" src="php_msql.c"/>
      <scope name="msql_list_tables" signature="msql_list_tables(string database_name [, int link_identifier])" returns="int" doc="List tables in an mSQL database" ilk="function" src="php_msql.c"/>
      <scope name="msql_list_fields" signature="msql_list_fields(string database_name, string table_name [, int link_identifier])" returns="int" doc="List mSQL result fields" ilk="function" src="php_msql.c"/>
      <scope name="msql_error" signature="msql_error([int link_identifier])" returns="string" doc="Returns the text of the error message from previous&#10;mSQL operation" ilk="function" src="php_msql.c"/>
      <scope name="msql_result" signature="msql_result(int query, int row [, mixed field])" returns="int" doc="Get result data" ilk="function" src="php_msql.c"/>
      <scope name="msql_num_rows" signature="msql_num_rows(int query)" returns="int" doc="Get number of rows in a result" ilk="function" src="php_msql.c"/>
      <scope name="msql_num_fields" signature="msql_num_fields(int query)" returns="int" doc="Get number of fields in a result" ilk="function" src="php_msql.c"/>
      <scope name="msql_fetch_row" signature="msql_fetch_row(int query)" returns="array" doc="Get a result row as an enumerated array" ilk="function" src="php_msql.c"/>
      <scope name="msql_fetch_object" signature="msql_fetch_object(int query [, int result_type])" returns="object" doc="Fetch a result row as an object" ilk="function" src="php_msql.c"/>
      <scope name="msql_fetch_array" signature="msql_fetch_array(int query [, int result_type])" returns="array" doc="Fetch a result row as an associative array" ilk="function" src="php_msql.c"/>
      <scope name="msql_data_seek" signature="msql_data_seek(int query, int row_number)" returns="int" doc="Move internal result pointer" ilk="function" src="php_msql.c"/>
      <scope name="msql_fetch_field" signature="msql_fetch_field(int query [, int field_offset])" returns="object" doc="Get column information from a result and return as an&#10;object" ilk="function" src="php_msql.c"/>
      <scope name="msql_field_seek" signature="msql_field_seek(int query, int field_offset)" returns="int" doc="Set result pointer to a specific field offset" ilk="function" src="php_msql.c"/>
      <scope name="msql_field_name" signature="msql_field_name(int query, int field_index)" returns="string" doc="Get the name of the specified field in a result" ilk="function" src="php_msql.c"/>
      <scope name="msql_field_table" signature="msql_field_table(int query, int field_offset)" returns="string" doc="Get name of the table the specified field is in" ilk="function" src="php_msql.c"/>
      <scope name="msql_field_len" signature="msql_field_len(int query, int field_offet)" returns="int" doc="Returns the length of the specified field" ilk="function" src="php_msql.c"/>
      <scope name="msql_field_type" signature="msql_field_type(int query, int field_offset)" returns="string" doc="Get the type of the specified field in a result" ilk="function" src="php_msql.c"/>
      <scope name="msql_field_flags" signature="msql_field_flags(int query, int field_offset)" returns="string" doc="Get the flags associated with the specified field in a&#10;result" ilk="function" src="php_msql.c"/>
      <scope name="msql_free_result" signature="msql_free_result(int query)" returns="int" doc="Free result memory" ilk="function" src="php_msql.c"/>
      <scope name="msql_affected_rows" signature="msql_affected_rows(int query)" returns="int" doc="Return number of affected rows" ilk="function" src="php_msql.c"/>
      <scope name="mssql_connect" signature="mssql_connect([string servername [, string username [, string password [, bool new_link]]]])" returns="int" doc="Establishes a connection to a MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_pconnect" signature="mssql_pconnect([string servername [, string username [, string password [, bool new_link]]]])" returns="int" doc="Establishes a persistent connection to a MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_close" signature="mssql_close([resource conn_id])" returns="bool" doc="Closes a connection to a MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_select_db" signature="mssql_select_db(string database_name [, resource conn_id])" returns="bool" doc="Select a MS-SQL database" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_batch" signature="mssql_fetch_batch(resource result_index)" returns="int" doc="Returns the next batch of records" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_query" signature="mssql_query(string query [, resource conn_id [, int batch_size]])" returns="resource" doc="Perform an SQL query on a MS-SQL server database" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_rows_affected" signature="mssql_rows_affected(resource conn_id)" returns="int" doc="Returns the number of records affected by the query" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_free_result" signature="mssql_free_result(resource result_index)" returns="bool" doc="Free a MS-SQL result index" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_get_last_message" signature="mssql_get_last_message(void)" returns="string" doc="Gets the last message from the MS-SQL server" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_num_rows" signature="mssql_num_rows(resource mssql_result_index)" returns="int" doc="Returns the number of rows fetched in from the result&#10;id specified" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_num_fields" signature="mssql_num_fields(resource mssql_result_index)" returns="int" doc="Returns the number of fields fetched in from the result&#10;id specified" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_row" signature="mssql_fetch_row(resource result_id)" returns="array" doc="Returns an array of the current row in the result set&#10;specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_object" signature="mssql_fetch_object(resource result_id [, int result_type])" returns="object" doc="Returns a psuedo-object of the current row in the&#10;result set specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_array" signature="mssql_fetch_array(resource result_id [, int result_type])" returns="array" doc="Returns an associative array of the current row in the&#10;result set specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_assoc" signature="mssql_fetch_assoc(resource result_id)" returns="array" doc="Returns an associative array of the current row in the&#10;result set specified by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_data_seek" signature="mssql_data_seek(resource result_id, int offset)" returns="bool" doc="Moves the internal row pointer of the MS-SQL result&#10;associated with the specified result identifier to&#10;pointer to the specified" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_fetch_field" signature="mssql_fetch_field(resource result_id [, int offset])" returns="object" doc="Gets information about certain fields in a query result" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_length" signature="mssql_field_length(resource result_id [, int offset])" returns="int" doc="Get the length of a MS-SQL field" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_name" signature="mssql_field_name(resource result_id [, int offset])" returns="string" doc="Returns the name of the field given by offset in the&#10;result set given by result id" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_type" signature="mssql_field_type(resource result_id [, int offset])" returns="string" doc="Returns the type of a field" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_field_seek" signature="mssql_field_seek(int result_id, int offset)" returns="bool" doc="Seeks to the specified field offset" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_result" signature="mssql_result(resource result_id, int row, mixed field)" returns="string" doc="Returns the contents of one cell from a MS-SQL result&#10;set" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_next_result" signature="mssql_next_result(resource result_id)" returns="bool" doc="Move the internal result pointer to the next result" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_min_error_severity" signature="mssql_min_error_severity(int severity)" returns="void" doc="Sets the lower error severity" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_min_message_severity" signature="mssql_min_message_severity(int severity)" returns="void" doc="Sets the lower message severity" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_init" signature="mssql_init(string sp_name [, resource conn_id])" returns="int" doc="Initializes a stored procedure or a remote stored&#10;procedure" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_execute" signature="mssql_execute(resource stmt [, bool skip_results = false])" returns="mixed" doc="Executes a stored procedure on a MS-SQL server database" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_free_statement" signature="mssql_free_statement(resource result_index)" returns="bool" doc="Free a MS-SQL statement index" ilk="function" src="php_mssql.c"/>
      <scope name="mssql_guid_string" signature="mssql_guid_string(string binary [,int short_format])" returns="string" doc="Converts a byte binary GUID to a string" ilk="function" src="php_mssql.c"/>
      <scope name="mysql_connect" signature="mysql_connect([string hostname[:port][:/path/to/socket] [, string username [, string password [, bool new [, int flags]]]]])" returns="resource" doc="Opens a connection to a MySQL Server" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_pconnect" signature="mysql_pconnect([string hostname[:port][:/path/to/socket] [, string username [, string password [, int flags]]]])" returns="resource" doc="Opens a persistent connection to a MySQL Server" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_close" signature="mysql_close([int link_identifier])" returns="bool" doc="Close a MySQL connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_select_db" signature="mysql_select_db(string database_name [, int link_identifier])" returns="bool" doc="Selects a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_client_info" signature="mysql_get_client_info(void)" returns="string" doc="Returns a string that represents the client library&#10;version" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_host_info" signature="mysql_get_host_info([int link_identifier])" returns="string" doc="Returns a string describing the type of connection in&#10;use including the server host name" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_proto_info" signature="mysql_get_proto_info([int link_identifier])" returns="int" doc="Returns the protocol version used by current connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_get_server_info" signature="mysql_get_server_info([int link_identifier])" returns="string" doc="Returns a string that represents the server version&#10;number" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_info" signature="mysql_info([int link_identifier])" returns="string" doc="Returns a string containing information about the most&#10;recent query" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_thread_id" signature="mysql_thread_id([int link_identifier])" returns="int" doc="Returns the thread id of current connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_stat" signature="mysql_stat([int link_identifier])" returns="string" doc="Returns a string containing status information" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_client_encoding" signature="mysql_client_encoding([int link_identifier])" returns="string" doc="Returns the default character set for the current&#10;connection" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_create_db" signature="mysql_create_db(string database_name [, int link_identifier])" returns="bool" doc="Create a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_drop_db" signature="mysql_drop_db(string database_name [, int link_identifier])" returns="bool" doc="Drops delete a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_query" signature="mysql_query(string query [, int link_identifier])" returns="resource" doc="Sends an SQL query to MySQL" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_unbuffered_query" signature="mysql_unbuffered_query(string query [, int link_identifier])" returns="resource" doc="Sends an SQL query to MySQL without fetching and&#10;buffering the result rows" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_db_query" signature="mysql_db_query(string database_name, string query [, int link_identifier])" returns="resource" doc="Sends an SQL query to MySQL" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_dbs" signature="mysql_list_dbs([int link_identifier])" returns="resource" doc="List databases available on a MySQL server" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_tables" signature="mysql_list_tables(string database_name [, int link_identifier])" returns="resource" doc="List tables in a MySQL database" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_fields" signature="mysql_list_fields(string database_name, string table_name [, int link_identifier])" returns="resource" doc="List MySQL result fields" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_list_processes" signature="mysql_list_processes([int link_identifier])" returns="resource" doc="Returns a result set describing the current server&#10;threads" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_error" signature="mysql_error([int link_identifier])" returns="string" doc="Returns the text of the error message from previous&#10;MySQL operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_errno" signature="mysql_errno([int link_identifier])" returns="int" doc="Returns the number of the error message from previous&#10;MySQL operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_affected_rows" signature="mysql_affected_rows([int link_identifier])" returns="int" doc="Gets number of affected rows in previous MySQL&#10;operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_escape_string" signature="mysql_escape_string(string to_be_escaped)" returns="string" doc="Escape string for mysql query" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_real_escape_string" signature="mysql_real_escape_string(string to_be_escaped [, int link_identifier])" returns="string" doc="Escape special characters in a string for use in a SQL&#10;statement taking into account the current charset of&#10;the" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_insert_id" signature="mysql_insert_id([int link_identifier])" returns="int" doc="Gets the ID generated from the previous INSERT&#10;operation" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_result" signature="mysql_result(resource result, int row [, mixed field])" returns="mixed" doc="Gets result data" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_num_rows" signature="mysql_num_rows(resource result)" returns="int" doc="Gets number of rows in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_num_fields" signature="mysql_num_fields(resource result)" returns="int" doc="Gets number of fields in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_row" signature="mysql_fetch_row(resource result)" returns="array" doc="Gets a result row as an enumerated array" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_object" signature="mysql_fetch_object(resource result [, int result_type])" returns="object" doc="Fetch a result row as an object" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_array" signature="mysql_fetch_array(resource result [, int result_type])" returns="array" doc="Fetch a result row as an array associative numeric or&#10;both" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_assoc" signature="mysql_fetch_assoc(resource result)" returns="array" doc="Fetch a result row as an associative array" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_data_seek" signature="mysql_data_seek(resource result, int row_number)" returns="bool" doc="Move internal result pointer" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_lengths" signature="mysql_fetch_lengths(resource result)" returns="array" doc="Gets max data size of each column in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_fetch_field" signature="mysql_fetch_field(resource result [, int field_offset])" returns="object" doc="Gets column information from a result and return as an&#10;object" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_seek" signature="mysql_field_seek(resource result, int field_offset)" returns="bool" doc="Sets result pointer to a specific field offset" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_name" signature="mysql_field_name(resource result, int field_index)" returns="string" doc="Gets the name of the specified field in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_table" signature="mysql_field_table(resource result, int field_offset)" returns="string" doc="Gets name of the table the specified field is in" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_len" signature="mysql_field_len(resource result, int field_offset)" returns="int" doc="Returns the length of the specified field" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_type" signature="mysql_field_type(resource result, int field_offset)" returns="string" doc="Gets the type of the specified field in a result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_field_flags" signature="mysql_field_flags(resource result, int field_offset)" returns="string" doc="Gets the flags associated with the specified field in a&#10;result" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_free_result" signature="mysql_free_result(resource result)" returns="bool" doc="Free result memory" ilk="function" src="php_mysql.c"/>
      <scope name="mysql_ping" signature="mysql_ping([int link_identifier])" returns="bool" doc="Ping a server connection If no connection then&#10;reconnect" ilk="function" src="php_mysql.c"/>
      <scope name="ncurses_addch" signature="ncurses_addch(int ch)" returns="int" doc="Adds character at current position and advance cursor" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_waddch" signature="ncurses_waddch(resource window, int ch)" returns="int" doc="Adds character at current position in a window and&#10;advance cursor" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_color_set" signature="ncurses_color_set(int pair)" returns="int" doc="Sets fore- and background color" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_delwin" signature="ncurses_delwin(resource window)" returns="int" doc="Deletes a ncurses window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_end" signature="ncurses_end(void)" returns="int" doc="Stops using ncurses clean up the screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_getch" signature="ncurses_getch(void)" returns="int" doc="Reads a character from keyboard" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_has_colors" signature="ncurses_has_colors(void)" returns="bool" doc="Checks if terminal has colors" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_init" signature="ncurses_init(void)" returns="int" doc="Initializes ncurses" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_init_pair" signature="ncurses_init_pair(int pair, int fg, int bg)" returns="int" doc="Allocates a color pair" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_move" signature="ncurses_move(int y, int x)" returns="int" doc="Moves output position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_newpad" signature="ncurses_newpad(int rows, int cols)" returns="resource" doc="Creates a new pad window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_prefresh" signature="ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)" returns="int" doc="Copys a region from a pad into the virtual screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_pnoutrefresh" signature="ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)" returns="int" doc="Copys a region from a pad into the virtual screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_newwin" signature="ncurses_newwin(int rows, int cols, int y, int x)" returns="int" doc="Creates a new window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_refresh" signature="ncurses_refresh(int ch)" returns="int" doc="Refresh screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_start_color" signature="ncurses_start_color(void)" returns="int" doc="Starts using colors" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_standout" signature="ncurses_standout(void)" returns="int" doc="Starts using 'standout' attribute" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_standend" signature="ncurses_standend(void)" returns="int" doc="Stops using 'standout' attribute" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_baudrate" signature="ncurses_baudrate(void)" returns="int" doc="Returns baudrate of terminal" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_beep" signature="ncurses_beep(void)" returns="int" doc="Let the terminal beep" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_can_change_color" signature="ncurses_can_change_color(void)" returns="bool" doc="Checks if we can change terminals colors" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_cbreak" signature="ncurses_cbreak(void)" returns="bool" doc="Switches of input buffering" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_clear" signature="ncurses_clear(void)" returns="bool" doc="Clears screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_clrtobot" signature="ncurses_clrtobot(void)" returns="bool" doc="Clears screen from current position to bottom" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_clrtoeol" signature="ncurses_clrtoeol(void)" returns="bool" doc="Clears screen from current position to end of line" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_reset_prog_mode" signature="ncurses_reset_prog_mode(void)" returns="int" doc="Resets the prog mode saved by def prog mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_reset_shell_mode" signature="ncurses_reset_shell_mode(void)" returns="int" doc="Resets the shell mode saved by def shell mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_def_prog_mode" signature="ncurses_def_prog_mode(void)" returns="bool" doc="Saves terminals program mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_def_shell_mode" signature="ncurses_def_shell_mode(void)" returns="bool" doc="Saves terminal shell mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_delch" signature="ncurses_delch(void)" returns="bool" doc="Deletes character at current position move rest of line&#10;left" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_deleteln" signature="ncurses_deleteln(void)" returns="bool" doc="Deletes line at current position move rest of screen up" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_doupdate" signature="ncurses_doupdate(void)" returns="bool" doc="Writes all prepared refreshes to terminal" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_echo" signature="ncurses_echo(void)" returns="bool" doc="Activates keyboard input echo" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_erase" signature="ncurses_erase(void)" returns="bool" doc="Erases terminal screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_erasechar" signature="ncurses_erasechar(void)" returns="string" doc="Returns current erase character" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_flash" signature="ncurses_flash(void)" returns="bool" doc="Flashes terminal screen visual bell" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_flushinp" signature="ncurses_flushinp(void)" returns="bool" doc="Flushes keyboard input buffer" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_has_ic" signature="ncurses_has_ic(void)" returns="bool" doc="Checks for insert- and delete-capabilities" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_has_il" signature="ncurses_has_il(void)" returns="bool" doc="Checks for line insert- and delete-capabilities" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_inch" signature="ncurses_inch(void)" returns="string" doc="Gets character and attribute at current position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_insertln" signature="ncurses_insertln(void)" returns="bool" doc="Inserts a line move rest of screen down" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_isendwin" signature="ncurses_isendwin(void)" returns="bool" doc="Ncurses is in endwin mode normal screen output may be&#10;performed" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_killchar" signature="ncurses_killchar(void)" returns="string" doc="Returns current line kill character" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_nl" signature="ncurses_nl(void)" returns="bool" doc="Translates newline and carriage return line feed" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_nocbreak" signature="ncurses_nocbreak(void)" returns="bool" doc="Switches terminal to cooked mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_noecho" signature="ncurses_noecho(void)" returns="bool" doc="Switches off keyboard input echo" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_nonl" signature="ncurses_nonl(void)" returns="bool" doc="Do not ranslate newline and carriage return line feed" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_noraw" signature="ncurses_noraw(void)" returns="bool" doc="Switches terminal out of raw mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_raw" signature="ncurses_raw(void)" returns="bool" doc="Switches terminal into raw mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_meta" signature="ncurses_meta(resource window, bool 8bit)" returns="long" doc="Enables Disable -bit meta key information" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_werase" signature="ncurses_werase(resource window)" returns="long" doc="Erase window contents" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_resetty" signature="ncurses_resetty(void)" returns="bool" doc="Restores saved terminal state" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_savetty" signature="ncurses_savetty(void)" returns="bool" doc="Saves terminal state" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_termattrs" signature="ncurses_termattrs(void)" returns="bool" doc="Returns a logical OR of all attribute flags supported&#10;by terminal" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_use_default_colors" signature="ncurses_use_default_colors(void)" returns="bool" doc="Assigns terminal default colors to color id -" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_attr" signature="ncurses_slk_attr(void)" returns="bool" doc="Returns current soft label keys attribute" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_clear" signature="ncurses_slk_clear(void)" returns="bool" doc="Clears soft label keys from screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_noutrefresh" signature="ncurses_slk_noutrefresh(void)" returns="bool" doc="Copies soft label keys to virtual screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_refresh" signature="ncurses_slk_refresh(void)" returns="bool" doc="Copies soft label keys to screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_restore" signature="ncurses_slk_restore(void)" returns="bool" doc="Restores soft label keys" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_touch" signature="ncurses_slk_touch(void)" returns="bool" doc="Forces output when ncurses slk noutrefresh is performed" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_set" signature="ncurses_slk_set(int labelnr, string label, int format)" returns="bool" doc="Sets function key labels" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_attroff" signature="ncurses_attroff(int attributes)" returns="int" doc="Turns off the given attributes" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_attron" signature="ncurses_attron(int attributes)" returns="int" doc="Turns on the given attributes" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_attrset" signature="ncurses_attrset(int attributes)" returns="int" doc="Sets given attributes" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_bkgd" signature="ncurses_bkgd(int attrchar)" returns="int" doc="Sets background property for terminal screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_curs_set" signature="ncurses_curs_set(int visibility)" returns="int" doc="Sets cursor state" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_delay_output" signature="ncurses_delay_output(int milliseconds)" returns="int" doc="Delays output on terminal using padding characters" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_echochar" signature="ncurses_echochar(int character)" returns="int" doc="Single character output including refresh" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_halfdelay" signature="ncurses_halfdelay(int tenth)" returns="int" doc="Puts terminal into halfdelay mode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_has_key" signature="ncurses_has_key(int keycode)" returns="int" doc="Checks for presence of a function key on terminal&#10;keyboard" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_insch" signature="ncurses_insch(int character)" returns="int" doc="Inserts character moving rest of line including&#10;character at current position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_insdelln" signature="ncurses_insdelln(int count)" returns="int" doc="Inserts lines before current line scrolling down&#10;negative numbers delete and scroll up" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mouseinterval" signature="ncurses_mouseinterval(int milliseconds)" returns="int" doc="Sets timeout for mouse button clicks" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_napms" signature="ncurses_napms(int milliseconds)" returns="int" doc="Sleep" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_scrl" signature="ncurses_scrl(int count)" returns="int" doc="Scrolls window content up or down without changing&#10;current position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_attroff" signature="ncurses_slk_attroff(int intarg)" returns="int" doc="" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_attron" signature="ncurses_slk_attron(int intarg)" returns="int" doc="" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_attrset" signature="ncurses_slk_attrset(int intarg)" returns="int" doc="" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_color" signature="ncurses_slk_color(int intarg)" returns="int" doc="Sets color for soft label keys" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_slk_init" signature="ncurses_slk_init(int intarg)" returns="int" doc="Inits soft label keys" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_typeahead" signature="ncurses_typeahead(int fd)" returns="int" doc="Specifys different filedescriptor for typeahead&#10;checking" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_ungetch" signature="ncurses_ungetch(int keycode)" returns="int" doc="Puts a character back into the input stream" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_vidattr" signature="ncurses_vidattr(int intarg)" returns="int" doc="" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_use_extended_names" signature="ncurses_use_extended_names(bool flag)" returns="int" doc="Controls use of extended names in terminfo descriptions" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_bkgdset" signature="ncurses_bkgdset(int attrchar)" returns="void" doc="Controls screen background" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_filter" signature="ncurses_filter(void)" returns="int" doc="" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_noqiflush" signature="ncurses_noqiflush(void)" returns="int" doc="Do not flush on signal characters" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_qiflush" signature="ncurses_qiflush(void)" returns="int" doc="Flushes on signal characters" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_timeout" signature="ncurses_timeout(int millisec)" returns="void" doc="Sets timeout for special key sequences" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_use_env" signature="ncurses_use_env(bool flag)" returns="void" doc="Controls use of environment information about terminal&#10;size" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_addstr" signature="ncurses_addstr(string text)" returns="int" doc="Outputs text at current position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_putp" signature="ncurses_putp(string text)" returns="int" doc="" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_scr_dump" signature="ncurses_scr_dump(string filename)" returns="int" doc="Dumps screen content to file" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_scr_init" signature="ncurses_scr_init(string filename)" returns="int" doc="Initializes screen from file dump" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_scr_restore" signature="ncurses_scr_restore(string filename)" returns="int" doc="Restores screen from file dump" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_scr_set" signature="ncurses_scr_set(string filename)" returns="int" doc="Inherits screen from file dump" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvaddch" signature="ncurses_mvaddch(int y, int x, int c)" returns="int" doc="Moves current position and add character" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvaddchnstr" signature="ncurses_mvaddchnstr(int y, int x, string s, int n)" returns="int" doc="Moves position and add attrributed string with&#10;specified length" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_addchnstr" signature="ncurses_addchnstr(string s, int n)" returns="int" doc="Adds attributed string with specified length at current&#10;position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvaddchstr" signature="ncurses_mvaddchstr(int y, int x, string s)" returns="int" doc="Moves position and add attributed string" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_addchstr" signature="ncurses_addchstr(string s)" returns="int" doc="Adds attributed string at current position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvaddnstr" signature="ncurses_mvaddnstr(int y, int x, string s, int n)" returns="int" doc="Moves position and add string with specified length" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_addnstr" signature="ncurses_addnstr(string s, int n)" returns="int" doc="Adds string with specified length at current position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvaddstr" signature="ncurses_mvaddstr(int y, int x, string s)" returns="int" doc="Moves position and add string" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvdelch" signature="ncurses_mvdelch(int y, int x)" returns="int" doc="Moves position and delete character shift rest of line&#10;left" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvgetch" signature="ncurses_mvgetch(int y, int x)" returns="int" doc="Moves position and get character at new position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvinch" signature="ncurses_mvinch(int y, int x)" returns="int" doc="Moves position and get attributed character at new&#10;position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_insstr" signature="ncurses_insstr(string text)" returns="int" doc="Inserts string at current position moving rest of line&#10;right" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_instr" signature="ncurses_instr(string buffer)" returns="int" doc="Reads string from terminal screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvhline" signature="ncurses_mvhline(int y, int x, int attrchar, int n)" returns="int" doc="Sets new position and draw a horizontal line using an&#10;attributed character and max n characters long" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvvline" signature="ncurses_mvvline(int y, int x, int attrchar, int n)" returns="int" doc="Sets new position and draw a vertical line using an&#10;attributed character and max n characters long" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvcur" signature="ncurses_mvcur(int old_y,int old_x, int new_y, int new_x)" returns="int" doc="Moves cursor immediately" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_init_color" signature="ncurses_init_color(int color, int r, int g, int b)" returns="int" doc="Sets new RGB value for color" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_color_content" signature="ncurses_color_content(int color, int &amp;r, int &amp;g, int &amp;b)" returns="int" doc="Gets the RGB value for color" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_pair_content" signature="ncurses_pair_content(int pair, int &amp;f, int &amp;b)" returns="int" doc="Gets the RGB value for color" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_border" signature="ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)" returns="int" doc="Draws a border around the screen using attributed&#10;characters" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wborder" signature="ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)" returns="int" doc="Draws a border around the window using attributed&#10;characters" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_assume_default_colors" signature="ncurses_assume_default_colors(int fg, int bg)" returns="int" doc="Defines default colors for color" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_define_key" signature="ncurses_define_key(string definition, int keycode)" returns="int" doc="Defines a keycode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_hline" signature="ncurses_hline(int charattr, int n)" returns="int" doc="Draws a horizontal line at current position using an&#10;attributed character and max n characters long" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_vline" signature="ncurses_vline(int charattr, int n)" returns="int" doc="Draws a vertical line at current position using an&#10;attributed character and max n characters long" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_whline" signature="ncurses_whline(resource window, int charattr, int n)" returns="int" doc="Draws a horizontal line in a window at current position&#10;using an attributed character and max n characters long" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wvline" signature="ncurses_wvline(resource window, int charattr, int n)" returns="int" doc="Draws a vertical line in a window at current position&#10;using an attributed character and max n characters long" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_keyok" signature="ncurses_keyok(int keycode, bool enable)" returns="int" doc="Enables or disable a keycode" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mvwaddstr" signature="ncurses_mvwaddstr(resource window, int y, int x, string text)" returns="int" doc="Adds string at new position in window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wrefresh" signature="ncurses_wrefresh(resource window)" returns="int" doc="Refreshes window on terminal screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_termname" signature="ncurses_termname(void)" returns="string" doc="Returns terminal name" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_longname" signature="ncurses_longname(void)" returns="string" doc="Returns terminal description" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mousemask" signature="ncurses_mousemask(int newmask, int &amp;oldmask)" returns="int" doc="Returns and sets mouse options" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_getmouse" signature="ncurses_getmouse(array mevent)" returns="bool" doc="Reads mouse event from queue" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_ungetmouse" signature="ncurses_ungetmouse(array mevent)" returns="int" doc="Pushes mouse event to queue" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_mouse_trafo" signature="ncurses_mouse_trafo(int y, int x, bool toscreen)" returns="bool" doc="Transforms coordinates" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wmouse_trafo" signature="ncurses_wmouse_trafo(resource window, int y, int x, bool toscreen)" returns="bool" doc="Transforms window stdscr coordinates" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_getyx" signature="ncurses_getyx(resource window, int &amp;y, int &amp;x)" returns="void" doc="Returns the current cursor position for a window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_getmaxyx" signature="ncurses_getmaxyx(resource window, int &amp;y, int &amp;x)" returns="void" doc="Returns the size of a window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wmove" signature="ncurses_wmove(resource window, int y, int x)" returns="int" doc="Moves windows output position" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_keypad" signature="ncurses_keypad(resource window, bool bf)" returns="int" doc="Turns keypad on or off" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wcolor_set" signature="ncurses_wcolor_set(resource window, int color_pair)" returns="int" doc="Sets windows color pairings" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wclear" signature="ncurses_wclear(resource window)" returns="int" doc="Clears window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wnoutrefresh" signature="ncurses_wnoutrefresh(resource window)" returns="int" doc="Copies window to virtual screen" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_waddstr" signature="ncurses_waddstr(resource window, string str [, int n])" returns="int" doc="Outputs text at current postion in window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_wgetch" signature="ncurses_wgetch(resource window)" returns="int" doc="Reads a character from keyboard window" ilk="function" src="ncurses_functions.c"/>
      <scope name="wattroff" signature="wattroff(resource window, int attrs)" returns="int" doc="Turns off attributes for a window" ilk="function" src="ncurses_functions.c"/>
      <scope name="wattron" signature="wattron(resource window, int attrs)" returns="int" doc="Turns on attributes for a window" ilk="function" src="ncurses_functions.c"/>
      <scope name="wattrset" signature="wattrset(resource window, int attrs)" returns="int" doc="Set the attributes for a window" ilk="function" src="ncurses_functions.c"/>
      <scope name="wstandend" signature="wstandend(resource window)" returns="int" doc="End standout mode for a window" ilk="function" src="ncurses_functions.c"/>
      <scope name="wstandout" signature="wstandout(resource window)" returns="int" doc="Enter standout mode for a window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_new_panel" signature="ncurses_new_panel(resource window)" returns="resource" doc="Create a new panel and associate it with window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_del_panel" signature="ncurses_del_panel(resource panel)" returns="int" doc="Remove panel from the stack and delete it but not the&#10;associated window" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_hide_panel" signature="ncurses_hide_panel(resource panel)" returns="int" doc="Remove panel from the stack making it invisible" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_show_panel" signature="ncurses_show_panel(resource panel)" returns="int" doc="Places an invisible panel on top of the stack making it&#10;visible" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_top_panel" signature="ncurses_top_panel(resource panel)" returns="int" doc="Moves a visible panel to the top of the stack" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_bottom_panel" signature="ncurses_bottom_panel(resource panel)" returns="int" doc="Moves a visible panel to the bottom of the stack" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_move_panel" signature="ncurses_move_panel(resource panel, int startx, int starty)" returns="int" doc="Moves a panel so that it's upper-left corner is at&#10;startx starty" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_replace_panel" signature="ncurses_replace_panel(resource panel, resource window)" returns="int" doc="Replaces the window associated with panel" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_panel_above" signature="ncurses_panel_above(resource panel)" returns="int" doc="Returns the panel above panel If panel is null returns&#10;the bottom panel in the stack" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_panel_below" signature="ncurses_panel_below(resource panel)" returns="int" doc="Returns the panel below panel If panel is null returns&#10;the top panel in the stack" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_panel_window" signature="ncurses_panel_window(resource panel)" returns="int" doc="Returns the window associated with panel" ilk="function" src="ncurses_functions.c"/>
      <scope name="ncurses_update_panels" signature="ncurses_update_panels(void)" returns="void" doc="Refreshes the virtual screen to reflect the relations&#10;between panels in the stack" ilk="function" src="ncurses_functions.c"/>
      <scope name="notes_create_db" signature="notes_create_db(string database_name)" returns="bool" doc="Creates a Lotus Notes database" ilk="function" src="php_notes.c"/>
      <scope name="notes_drop_db" signature="notes_drop_db(string database_name)" returns="bool" doc="Drops a Lotus Notes database" ilk="function" src="php_notes.c"/>
      <scope name="notes_version" signature="notes_version(string database_name)" returns="string" doc="Gets the Lotus Notes version" ilk="function" src="php_notes.c"/>
      <scope name="notes_create_note" signature="notes_create_note(string database_name, string form_name)" returns="string" doc="Creates a note using form form name" ilk="function" src="php_notes.c"/>
      <scope name="notes_mark_read" signature="notes_mark_read(string database_name, string user_name, string note_id)" returns="string" doc="Marks a note id as read for the User user name Note&#10;user name must be fully distinguished user name" ilk="function" src="php_notes.c"/>
      <scope name="notes_mark_unread" signature="notes_mark_unread(string database_name, string user_name, string note_id)" returns="string" doc="Marks a note id as unread for the User user name Note&#10;user name must be fully distinguished user name" ilk="function" src="php_notes.c"/>
      <scope name="notes_unread" signature="notes_unread(string database_name, string user_name)" returns="string" doc="Returns the unread note id's for the current User user&#10;name Note user name must be fully distinguished user&#10;name" ilk="function" src="php_notes.c"/>
      <scope name="notes_header_info" signature="notes_header_info(string server, string mailbox, int msg_number)" returns="object" doc="Opens the message msg number in the specified mailbox&#10;on the specified server leave server blank for local" ilk="function" src="php_notes.c"/>
      <scope name="notes_body" signature="notes_body(string server, string mailbox, int msg_number)" returns="array" doc="Opens the message msg number in the specified mailbox&#10;on the specified server leave server blank for local&#10;and returns" ilk="function" src="php_notes.c"/>
      <scope name="notes_find_note" signature="notes_find_note(string database_name, string name [, string type])" returns="bool" doc="Returns a note id found in database name" ilk="function" src="php_notes.c"/>
      <scope name="notes_nav_create" signature="notes_nav_create(string database_name, string name)" returns="bool" doc="Creates a navigator name in database name" ilk="function" src="php_notes.c"/>
      <scope name="notes_search" signature="notes_search(string database_name, string keywords)" returns="string" doc="Finds notes that match keywords in database name The&#10;note s that are returned must be converted to base&#10;Example" ilk="function" src="php_notes.c"/>
      <scope name="notes_copy_db" signature="notes_copy_db(string from_database_name, string to_database_name [, string title])" returns="string" doc="Creates a note using form form name" ilk="function" src="php_notes.c"/>
      <scope name="notes_list_msgs" signature="notes_list_msgs(string db)" returns="bool" doc="" ilk="function" src="php_notes.c"/>
      <scope name="ocidefinebyname" signature="ocidefinebyname(int stmt, string name, mixed &amp;var [, int type])" returns="bool" doc="Define a PHP variable to an Oracle column by name" ilk="function" src="oci8.c"/>
      <scope name="ocibindbyname" signature="ocibindbyname(int stmt, string name, mixed &amp;var, [, int maxlength] [, int type])" returns="bool" doc="Bind a PHP variable to an Oracle placeholder by name" ilk="function" src="oci8.c"/>
      <scope name="ocifreedesc" signature="ocifreedesc(object lob)" returns="bool" doc="Deletes large object description" ilk="function" src="oci8.c"/>
      <scope name="ocisavelob" signature="ocisavelob(object lob)" returns="bool" doc="Saves a large object" ilk="function" src="oci8.c"/>
      <scope name="ocisavelobfile" signature="ocisavelobfile(object lob)" returns="bool" doc="Saves a large object file" ilk="function" src="oci8.c"/>
      <scope name="ociloadlob" signature="ociloadlob(object lob)" returns="string" doc="Loads a large object" ilk="function" src="oci8.c"/>
      <scope name="ociwritelobtofile" signature="ociwritelobtofile(object lob [, string filename] [, int start] [, int length])" returns="bool" doc="Writes a large object into a file" ilk="function" src="oci8.c"/>
      <scope name="ociwritetemporarylob" signature="ociwritetemporarylob(int stmt, int loc, string var)" returns="bool" doc="Return the row count of an OCI statement" ilk="function" src="oci8.c"/>
      <scope name="ocicloselob" signature="ocicloselob(object lob)" returns="bool" doc="Closes lob descriptor" ilk="function" src="oci8.c"/>
      <scope name="ocinewdescriptor" signature="ocinewdescriptor(int connection [, int type])" returns="string" doc="Initialize a new empty descriptor LOB FILE LOB is&#10;default" ilk="function" src="oci8.c"/>
      <scope name="ocirollback" signature="ocirollback(int conn)" returns="bool" doc="Rollback the current context" ilk="function" src="oci8.c"/>
      <scope name="ocicommit" signature="ocicommit(int conn)" returns="bool" doc="Commit the current context" ilk="function" src="oci8.c"/>
      <scope name="ocicolumnname" signature="ocicolumnname(int stmt, int col)" returns="string" doc="Tell the name of a column" ilk="function" src="oci8.c"/>
      <scope name="ocicolumnsize" signature="ocicolumnsize(int stmt, int col)" returns="int" doc="Tell the maximum data size of a column" ilk="function" src="oci8.c"/>
      <scope name="ocicolumnscale" signature="ocicolumnscale(int stmt, int col)" returns="int" doc="Tell the scale of a column" ilk="function" src="oci8.c"/>
      <scope name="ocicolumnprecision" signature="ocicolumnprecision(int stmt, int col)" returns="int" doc="Tell the precision of a column" ilk="function" src="oci8.c"/>
      <scope name="ocicolumntype" signature="ocicolumntype(int stmt, int col)" returns="int" doc="Tell the data type of a column" ilk="function" src="oci8.c"/>
      <scope name="ocicolumntyperaw" signature="ocicolumntyperaw(int stmt, int col)" returns="mixed" doc="Tell the raw oracle data type of a column" ilk="function" src="oci8.c"/>
      <scope name="ocicolumnisnull" signature="ocicolumnisnull(int stmt, int col)" returns="bool" doc="Tell whether a column is NULL" ilk="function" src="oci8.c"/>
      <scope name="ociinternaldebug" signature="ociinternaldebug(int onoff)" returns="void" doc="Toggle internal debugging output for the OCI extension" ilk="function" src="oci8.c"/>
      <scope name="ociexecute" signature="ociexecute(int stmt [, int mode])" returns="bool" doc="Execute a parsed statement" ilk="function" src="oci8.c"/>
      <scope name="ocicancel" signature="ocicancel(int stmt)" returns="bool" doc="Prepare a new row of data for reading" ilk="function" src="oci8.c"/>
      <scope name="ocifetch" signature="ocifetch(int stmt)" returns="bool" doc="Prepare a new row of data for reading" ilk="function" src="oci8.c"/>
      <scope name="ocifetchinto" signature="ocifetchinto(int stmt, array &amp;output [, int mode])" returns="int" doc="Fetch a row of result data into an array" ilk="function" src="oci8.c"/>
      <scope name="ocifetchstatement" signature="ocifetchstatement(int stmt, array &amp;output[, int skip][, int maxrows][, int flags])" returns="int" doc="Fetch all rows of result data into an array" ilk="function" src="oci8.c"/>
      <scope name="ocifreestatement" signature="ocifreestatement(int stmt)" returns="bool" doc="Free all resources associated with a statement" ilk="function" src="oci8.c"/>
      <scope name="ocilogoff" signature="ocilogoff(int conn)" returns="bool" doc="Disconnect from database" ilk="function" src="oci8.c"/>
      <scope name="ocinlogon" signature="ocinlogon(string user, string pass [, string db])" returns="int" doc="Connect to an Oracle database and log on returns a new&#10;session" ilk="function" src="oci8.c"/>
      <scope name="ocilogon" signature="ocilogon(string user, string pass [, string db])" returns="int" doc="Connect to an Oracle database and log on Returns a new&#10;session" ilk="function" src="oci8.c"/>
      <scope name="ociplogon" signature="ociplogon(string user, string pass [, string db])" returns="int" doc="Connect to an Oracle database using a persistent&#10;connection and log on Returns a new session" ilk="function" src="oci8.c"/>
      <scope name="ocierror" signature="ocierror([int stmt" returns="array" doc="Return the last error of stmt" ilk="function" src="oci8.c"/>
      <scope name="ocinumcols" signature="ocinumcols(int stmt)" returns="int" doc="Return the number of result columns in a statement" ilk="function" src="oci8.c"/>
      <scope name="ociparse" signature="ociparse(int conn, string query)" returns="int" doc="Parse a query and return a statement" ilk="function" src="oci8.c"/>
      <scope name="ocisetprefetch" signature="ocisetprefetch(int stmt, int prefetch_rows)" returns="int" doc="sets the number of rows to be prefetched on execute to&#10;prefetch rows for stmt" ilk="function" src="oci8.c"/>
      <scope name="ocipasswordchange" signature="ocipasswordchange(int conn, string username, string old_password, string new_password)" returns="bool" doc="changes the password of an account" ilk="function" src="oci8.c"/>
      <scope name="ocinewcursor" signature="ocinewcursor(int conn)" returns="int" doc="Return a new cursor Statement-Handle - use this to bind&#10;ref-cursors" ilk="function" src="oci8.c"/>
      <scope name="ociresult" signature="ociresult(int stmt, mixed column)" returns="string" doc="Return a single column of result data" ilk="function" src="oci8.c"/>
      <scope name="ociserverversion" signature="ociserverversion(int conn)" returns="string" doc="Return a string containing server version information" ilk="function" src="oci8.c"/>
      <scope name="ocistatementtype" signature="ocistatementtype(int stmt)" returns="string" doc="Return the query type of an OCI statement" ilk="function" src="oci8.c"/>
      <scope name="ocirowcount" signature="ocirowcount(int stmt)" returns="int" doc="Return the row count of an OCI statement" ilk="function" src="oci8.c"/>
      <scope name="ocifreecollection" signature="ocifreecollection(object lob)" returns="bool" doc="Deletes collection object" ilk="function" src="oci8.c"/>
      <scope name="ocicollappend" signature="ocicollappend(object collection,value)" returns="bool" doc="Append an object to the collection" ilk="function" src="oci8.c"/>
      <scope name="ocicollgetelem" signature="ocicollgetelem(object collection,ndx)" returns="string" doc="Retrieve the value at collection index ndx" ilk="function" src="oci8.c"/>
      <scope name="ocicollassign" signature="ocicollassign(object collection,object)" returns="bool" doc="Assign a collection from another existing collection" ilk="function" src="oci8.c"/>
      <scope name="ocicollassignelem" signature="ocicollassignelem(object collection,ndx,val)" returns="bool" doc="Assign element val to collection at index ndx" ilk="function" src="oci8.c"/>
      <scope name="ocicollsize" signature="ocicollsize(object collection)" returns="int" doc="Return the size of a collection" ilk="function" src="oci8.c"/>
      <scope name="ocicollmax" signature="ocicollmax(object collection)" returns="int" doc="Return the max value of a collection For a varray this&#10;is the maximum length of the array" ilk="function" src="oci8.c"/>
      <scope name="ocicolltrim" signature="ocicolltrim(object collection,num)" returns="bool" doc="Trim num elements from the end of a collection" ilk="function" src="oci8.c"/>
      <scope name="ocinewcollection" signature="ocinewcollection(int connection, string tdo,[string schema])" returns="bool" doc="Initialize a new collection" ilk="function" src="oci8.c"/>
      <scope name="birdstep_connect" signature="birdstep_connect(string server, string user, string pass)" returns="int" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_close" signature="birdstep_close(int id)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_exec" signature="birdstep_exec(int index, string exec_str)" returns="int" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_fetch" signature="birdstep_fetch(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_result" signature="birdstep_result(int index, int col)" returns="mixed" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_freeresult" signature="birdstep_freeresult(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_autocommit" signature="birdstep_autocommit(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_off_autocommit" signature="birdstep_off_autocommit(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_commit" signature="birdstep_commit(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_rollback" signature="birdstep_rollback(int index)" returns="bool" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_fieldname" signature="birdstep_fieldname(int index, int col)" returns="string" doc="" ilk="function" src="birdstep.c"/>
      <scope name="birdstep_fieldnum" signature="birdstep_fieldnum(int index)" returns="int" doc="" ilk="function" src="birdstep.c"/>
      <scope name="odbc_close_all" signature="odbc_close_all(void)" returns="void" doc="Close all ODBC connections" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_binmode" signature="odbc_binmode(int result_id, int mode)" returns="bool" doc="Handle binary column data" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_longreadlen" signature="odbc_longreadlen(int result_id, int length)" returns="bool" doc="Handle LONG columns" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_prepare" signature="odbc_prepare(resource connection_id, string query)" returns="resource" doc="Prepares a statement for execution" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_execute" signature="odbc_execute(resource result_id [, array parameters_array])" returns="bool" doc="Execute a prepared statement" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_cursor" signature="odbc_cursor(resource result_id)" returns="string" doc="Get cursor name" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_data_source" signature="odbc_data_source(resource connection_id, int fetch_type)" returns="array" doc="Return information about the currently connected data&#10;source" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_exec" signature="odbc_exec(resource connection_id, string query [, int flags])" returns="resource" doc="Prepare and execute an SQL statement" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_object" signature="odbc_fetch_object(int result [, int rownumber])" returns="object" doc="Fetch a result row as an object" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_array" signature="odbc_fetch_array(int result [, int rownumber])" returns="array" doc="Fetch a result row as an associative array" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_into" signature="odbc_fetch_into(resource result_id, array result_array, [, int rownumber])" returns="int" doc="Fetch one result row into an array" ilk="function" src="php_odbc.c"/>
      <scope name="solid_fetch_prev" signature="solid_fetch_prev(resource result_id)" returns="bool" doc="" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_fetch_row" signature="odbc_fetch_row(resource result_id [, int row_number])" returns="bool" doc="Fetch a row" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_result" signature="odbc_result(resource result_id, mixed field)" returns="mixed" doc="Get result data" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_result_all" signature="odbc_result_all(resource result_id [, string format])" returns="int" doc="Print result as HTML table" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_free_result" signature="odbc_free_result(resource result_id)" returns="bool" doc="Free resources associated with a result" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_connect" signature="odbc_connect(string DSN, string user, string password [, int cursor_option])" returns="resource" doc="Connect to a datasource" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_pconnect" signature="odbc_pconnect(string DSN, string user, string password [, int cursor_option])" returns="resource" doc="Establish a persistent connection to a datasource" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_close" signature="odbc_close(resource connection_id)" returns="void" doc="Close an ODBC connection" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_num_rows" signature="odbc_num_rows(resource result_id)" returns="int" doc="Get number of rows in a result" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_next_result" signature="odbc_next_result(resource result_id)" returns="bool" doc="Checks if multiple results are avaiable" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_num_fields" signature="odbc_num_fields(resource result_id)" returns="int" doc="Get number of columns in a result" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_name" signature="odbc_field_name(resource result_id, int field_number)" returns="string" doc="Get a column name" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_type" signature="odbc_field_type(resource result_id, int field_number)" returns="string" doc="Get the datatype of a column" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_len" signature="odbc_field_len(resource result_id, int field_number)" returns="int" doc="Get the length precision of a column" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_scale" signature="odbc_field_scale(resource result_id, int field_number)" returns="int" doc="Get the scale of a column" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_field_num" signature="odbc_field_num(resource result_id, string field_name)" returns="int" doc="Return column number" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_autocommit" signature="odbc_autocommit(resource connection_id [, int OnOff])" returns="mixed" doc="Toggle autocommit mode or get status" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_commit" signature="odbc_commit(resource connection_id)" returns="bool" doc="Commit an ODBC transaction" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_rollback" signature="odbc_rollback(resource connection_id)" returns="bool" doc="Rollback a transaction" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_error" signature="odbc_error([resource connection_id])" returns="string" doc="Get the last error code" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_errormsg" signature="odbc_errormsg([resource connection_id])" returns="string" doc="Get the last error message" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_setoption" signature="odbc_setoption(resource conn_id" returns="bool" doc="Sets connection or statement options" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_tables" signature="odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string table_types]]]])" returns="resource" doc="Call the SQLTables function" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_columns" signature="odbc_columns(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]])" returns="resource" doc="Returns a result identifier that can be used to fetch a&#10;list of column names in specified tables" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_columnprivileges" signature="odbc_columnprivileges(resource connection_id, string catalog, string schema, string table, string column)" returns="resource" doc="Returns a result identifier that can be used to fetch a&#10;list of columns and associated privileges for the&#10;specified" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_foreignkeys" signature="odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)" returns="resource" doc="Returns a result identifier to either a list of foreign&#10;keys in the specified table or a list of foreign" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_gettypeinfo" signature="odbc_gettypeinfo(resource connection_id [, int data_type])" returns="resource" doc="Returns a result identifier containing information&#10;about data types supported by the data source" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_primarykeys" signature="odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)" returns="resource" doc="Returns a result identifier listing the column names&#10;that comprise the primary key for a table" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_procedurecolumns" signature="odbc_procedurecolumns(resource connection_id [, string qualifier, string owner, string proc, string column])" returns="resource" doc="Returns a result identifier containing the list of&#10;input and output parameters as well as the columns that&#10;make up" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_procedures" signature="odbc_procedures(resource connection_id [, string qualifier, string owner, string name])" returns="resource" doc="Returns a result identifier containg the list of&#10;procedure names in a datasource" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_specialcolumns" signature="odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)" returns="resource" doc="Returns a result identifier containing either the&#10;optimal set of columns that uniquely identifies a row&#10;in the table or" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_statistics" signature="odbc_statistics(resource connection_id, string qualifier, string owner, string name, int unique, int accuracy)" returns="resource" doc="Returns a result identifier that contains statistics&#10;about a single table and the indexes associated with&#10;the table" ilk="function" src="php_odbc.c"/>
      <scope name="odbc_tableprivileges" signature="odbc_tableprivileges(resource connection_id, string qualifier, string owner, string name)" returns="resource" doc="Returns a result identifier containing a list of tables&#10;and the privileges associated with each table" ilk="function" src="php_odbc.c"/>
      <scope name="openssl_x509_export_to_file" signature="openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext = true])" returns="bool" doc="Exports a CERT to file or a var" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_export" signature="openssl_x509_export(mixed x509, string &amp;out [, bool notext = true])" returns="bool" doc="Exports a CERT to file or a var" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_check_private_key" signature="openssl_x509_check_private_key(mixed cert, mixed key)" returns="bool" doc="Checks if a private key corresponds to a CERT" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_parse" signature="openssl_x509_parse(mixed x509 [, bool shortnames=true])" returns="array" doc="Returns an array of the fields values of the CERT" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_checkpurpose" signature="openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile])" returns="int" doc="Checks the CERT to see if it can be used for the&#10;purpose in purpose cainfo holds information about&#10;trusted" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_read" signature="openssl_x509_read(mixed cert)" returns="resource" doc="Reads X certificates" ilk="function" src="openssl.c"/>
      <scope name="openssl_x509_free" signature="openssl_x509_free(resource x509)" returns="void" doc="Frees X certificates" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_export_to_file" signature="openssl_csr_export_to_file(resource csr, string outfilename [, bool notext=true])" returns="bool" doc="Exports a CSR to file" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_export" signature="openssl_csr_export(resource csr, string &amp;out [, bool notext=true])" returns="bool" doc="Exports a CSR to file or a var" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_sign" signature="openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days [, array config_args [, long serial]])" returns="resource" doc="Signs a cert with another CERT" ilk="function" src="openssl.c"/>
      <scope name="openssl_csr_new" signature="openssl_csr_new(array dn, resource &amp;privkey [, array configargs, array extraattribs])" returns="bool" doc="Generates a privkey and CSR" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_new" signature="openssl_pkey_new([array configargs])" returns="resource" doc="Generates a new private key" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_export_to_file" signature="openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase, array config_args)" returns="bool" doc="Gets an exportable representation of a key into a file" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_export" signature="openssl_pkey_export(mixed key, &amp;mixed out [, string passphrase [, array config_args]])" returns="bool" doc="Gets an exportable representation of a key into a&#10;string or file" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_get_public" signature="openssl_pkey_get_public(mixed cert)" returns="int" doc="Gets public key from X certificate" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_free" signature="openssl_pkey_free(int key)" returns="void" doc="Frees a key" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkey_get_private" signature="openssl_pkey_get_private(string key [, string passphrase])" returns="int" doc="Gets private keys" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_verify" signature="openssl_pkcs7_verify(string filename, long flags [, string signerscerts [, array cainfo [, string extracerts]]])" returns="bool" doc="Verifys that the data block is intact the signer is who&#10;they say they are and returns the CERTs of" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_encrypt" signature="openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags])" returns="bool" doc="Encrypts the message in the file named infile with the&#10;certificates in recipcerts and output the result to the&#10;file" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_sign" signature="openssl_pkcs7_sign(string infile, string outfile, mixed signcert, mixed signkey, array headers [, long flags [, string extracertsfilename]])" returns="bool" doc="Signs the MIME message in the file named infile with&#10;signcert signkey and output the result to file name&#10;outfile" ilk="function" src="openssl.c"/>
      <scope name="openssl_pkcs7_decrypt" signature="openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert [, mixed recipkey])" returns="bool" doc="Decrypts the S MIME message in the file name infilename&#10;and output the results to the file name outfilename&#10;recipcert" ilk="function" src="openssl.c"/>
      <scope name="openssl_private_encrypt" signature="openssl_private_encrypt(string data, string crypted, mixed key [, int padding])" returns="bool" doc="Encrypts data with private key" ilk="function" src="openssl.c"/>
      <scope name="openssl_private_decrypt" signature="openssl_private_decrypt(string data, string &amp;decrypted, mixed key [, int padding])" returns="bool" doc="Decrypts data with private key" ilk="function" src="openssl.c"/>
      <scope name="openssl_public_encrypt" signature="openssl_public_encrypt(string data, string crypted, mixed key [, int padding])" returns="bool" doc="Encrypts data with public key" ilk="function" src="openssl.c"/>
      <scope name="openssl_public_decrypt" signature="openssl_public_decrypt(string data, string crypted, resource key [, int padding])" returns="bool" doc="Decrypts data with public key" ilk="function" src="openssl.c"/>
      <scope name="openssl_error_string" signature="openssl_error_string(void)" returns="mixed" doc="Returns a description of the last error and alters the&#10;index of the error messages Returns false when the are" ilk="function" src="openssl.c"/>
      <scope name="openssl_sign" signature="openssl_sign(string data, &amp;string signature, mixed key)" returns="bool" doc="Signs data" ilk="function" src="openssl.c"/>
      <scope name="openssl_verify" signature="openssl_verify(string data, string signature, mixed key)" returns="int" doc="Verifys data" ilk="function" src="openssl.c"/>
      <scope name="openssl_seal" signature="openssl_seal(string data, &amp;string sealdata, &amp;array ekeys, array pubkeys)" returns="int" doc="Seals data" ilk="function" src="openssl.c"/>
      <scope name="openssl_open" signature="openssl_open(string data, &amp;string opendata, string ekey, mixed privkey)" returns="bool" doc="Opens data" ilk="function" src="openssl.c"/>
      <scope name="ora_logon" signature="ora_logon(string user, string password)" returns="int" doc="Open an Oracle connection" ilk="function" src="oracle.c"/>
      <scope name="ora_plogon" signature="ora_plogon(string user, string password)" returns="int" doc="Open a persistent Oracle connection" ilk="function" src="oracle.c"/>
      <scope name="ora_logoff" signature="ora_logoff(int connection)" returns="int" doc="Close an Oracle connection" ilk="function" src="oracle.c"/>
      <scope name="ora_open" signature="ora_open(int connection)" returns="int" doc="Open an Oracle cursor" ilk="function" src="oracle.c"/>
      <scope name="ora_close" signature="ora_close(int cursor)" returns="int" doc="Close an Oracle cursor" ilk="function" src="oracle.c"/>
      <scope name="ora_commitoff" signature="ora_commitoff(int connection)" returns="int" doc="Disable automatic commit" ilk="function" src="oracle.c"/>
      <scope name="ora_commiton" signature="ora_commiton(int connection)" returns="int" doc="Enable automatic commit" ilk="function" src="oracle.c"/>
      <scope name="ora_commit" signature="ora_commit(int connection)" returns="int" doc="Commit an Oracle transaction" ilk="function" src="oracle.c"/>
      <scope name="ora_rollback" signature="ora_rollback(int connection)" returns="int" doc="Roll back an Oracle transaction" ilk="function" src="oracle.c"/>
      <scope name="ora_parse" signature="ora_parse(int cursor, string sql_statement [, int defer])" returns="int" doc="Parse an Oracle SQL statement" ilk="function" src="oracle.c"/>
      <scope name="ora_bind" signature="ora_bind(int cursor, string php_variable_name, string sql_parameter_name, int length [, int type])" returns="int" doc="Bind a PHP variable to an Oracle parameter" ilk="function" src="oracle.c"/>
      <scope name="ora_exec" signature="ora_exec(int cursor)" returns="int" doc="Execute a parsed statement" ilk="function" src="oracle.c"/>
      <scope name="ora_numcols" signature="ora_numcols(int cursor)" returns="int" doc="Returns the numbers of columns in a result" ilk="function" src="oracle.c"/>
      <scope name="ora_numrows" signature="ora_numrows(int cursor)" returns="int" doc="Returns the number of rows in a result" ilk="function" src="oracle.c"/>
      <scope name="ora_do" signature="ora_do(int connection, int cursor)" returns="int" doc="Parse and execute a statement and fetch first result&#10;row" ilk="function" src="oracle.c"/>
      <scope name="ora_fetch" signature="ora_fetch(int cursor)" returns="int" doc="Fetch a row of result data from a cursor" ilk="function" src="oracle.c"/>
      <scope name="ora_fetch_into" signature="ora_fetch_into(int cursor, array result [, int flags])" returns="int" doc="Fetch a row into the specified result array" ilk="function" src="oracle.c"/>
      <scope name="ora_columnname" signature="ora_columnname(int cursor, int column)" returns="string" doc="Get the name of an Oracle result column" ilk="function" src="oracle.c"/>
      <scope name="ora_columntype" signature="ora_columntype(int cursor, int column)" returns="string" doc="Get the type of an Oracle result column" ilk="function" src="oracle.c"/>
      <scope name="ora_columnsize" signature="ora_columnsize(int cursor, int column)" returns="int" doc="Return the size of the column" ilk="function" src="oracle.c"/>
      <scope name="ora_getcolumn" signature="ora_getcolumn(int cursor, int column)" returns="mixed" doc="Get data from a fetched row" ilk="function" src="oracle.c"/>
      <scope name="ora_error" signature="ora_error(int cursor_or_connection)" returns="string" doc="Get an Oracle error message" ilk="function" src="oracle.c"/>
      <scope name="ora_errorcode" signature="ora_errorcode(int cursor_or_connection)" returns="int" doc="Get an Oracle error code" ilk="function" src="oracle.c"/>
      <scope name="overload" signature="overload(string class_entry)" returns="void" doc="Enables property and method call overloading for a&#10;class" ilk="function" src="overload.c"/>
      <scope name="pcntl_fork" signature="pcntl_fork(void)" returns="int" doc="Forks the currently running process following the same&#10;behavior as the UNIX fork system call" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_alarm" signature="pcntl_alarm(int seconds)" returns="int" doc="Set an alarm clock for delivery of a signal" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_waitpid" signature="pcntl_waitpid(long pid, long status, long options)" returns="int" doc="Waits on or returns the status of a forked child as&#10;defined by the waitpid system call" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wifexited" signature="pcntl_wifexited(long status)" returns="bool" doc="Returns true if the child status code represents a&#10;successful exit" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wifstopped" signature="pcntl_wifstopped(long status)" returns="bool" doc="Returns true if the child status code represents a&#10;stopped process WUNTRACED must have been used with&#10;waitpid" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wifsignaled" signature="pcntl_wifsignaled(long status)" returns="bool" doc="Returns true if the child status code represents a&#10;process that was terminated due to a signal" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wexitstatus" signature="pcntl_wexitstatus(long status)" returns="int" doc="Returns the status code of a child's exit" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wtermsig" signature="pcntl_wtermsig(long status)" returns="int" doc="Returns the number of the signal that terminated the&#10;process who's status code is passed" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_wstopsig" signature="pcntl_wstopsig(long status)" returns="int" doc="Returns the number of the signal that caused the&#10;process to stop who's status code is passed" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_exec" signature="pcntl_exec(string path [, array args [, array envs]])" returns="bool" doc="Executes specified program in current process space as&#10;defined by exec" ilk="function" src="pcntl.c"/>
      <scope name="pcntl_signal" signature="pcntl_signal(long signo, mixed handle, [bool restart_syscalls])" returns="bool" doc="Assigns a system signal handler to a PHP function" ilk="function" src="pcntl.c"/>
      <scope name="preg_match" signature="preg_match(string pattern, string subject [, array subpatterns [, int flags [, int offset ]]])" returns="int" doc="Perform a Perl-style regular expression match" ilk="function" src="php_pcre.c"/>
      <scope name="preg_match_all" signature="preg_match_all(string pattern, string subject, array subpatterns [, int flags [, int offset]])" returns="int" doc="Perform a Perl-style global regular expression match" ilk="function" src="php_pcre.c"/>
      <scope name="preg_replace" signature="preg_replace(mixed regex, mixed replace, mixed subject [, int limit])" returns="string" doc="Perform Perl-style regular expression replacement" ilk="function" src="php_pcre.c"/>
      <scope name="preg_replace_callback" signature="preg_replace_callback(mixed regex, mixed callback, mixed subject [, int limit])" returns="string" doc="Perform Perl-style regular expression replacement using&#10;replacement callback" ilk="function" src="php_pcre.c"/>
      <scope name="preg_split" signature="preg_split(string pattern, string subject [, int limit [, int flags]])" returns="array" doc="Split string into an array using a perl-style regular&#10;expression as a delimiter" ilk="function" src="php_pcre.c"/>
      <scope name="preg_quote" signature="preg_quote(string str, string delim_char)" returns="string" doc="Quote regular expression characters plus an optional&#10;character" ilk="function" src="php_pcre.c"/>
      <scope name="preg_grep" signature="preg_grep(string regex, array input)" returns="array" doc="Searches array and returns entries which match regex" ilk="function" src="php_pcre.c"/>
      <scope name="pdf_set_info" signature="pdf_set_info(int pdfdoc, string fieldname, string value)" returns="bool" doc="Fills an info field of the document" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_info_creator" signature="pdf_set_info_creator(int pdfdoc, string creator)" returns="bool" doc="Fills the creator field of the document" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_info_title" signature="pdf_set_info_title(int pdfdoc, string title)" returns="bool" doc="Fills the title field of the document" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_info_subject" signature="pdf_set_info_subject(int pdfdoc, string subject)" returns="bool" doc="Fills the subject field of the document" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_info_author" signature="pdf_set_info_author(int pdfdoc, string author)" returns="bool" doc="Fills the author field of the document" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_info_keywords" signature="pdf_set_info_keywords(int pdfdoc, string keywords)" returns="bool" doc="Fills the keywords field of the document" ilk="function" src="pdf.c"/>
      <scope name="pdf_open" signature="pdf_open([int filedesc])" returns="int" doc="Opens a new pdf document If filedesc is NULL document&#10;is created in memory This is the old interface only" ilk="function" src="pdf.c"/>
      <scope name="pdf_close" signature="pdf_close(int pdfdoc)" returns="void" doc="Closes the pdf document" ilk="function" src="pdf.c"/>
      <scope name="pdf_begin_page" signature="pdf_begin_page(int pdfdoc, float width, float height)" returns="void" doc="Starts page" ilk="function" src="pdf.c"/>
      <scope name="pdf_end_page" signature="pdf_end_page(int pdfdoc)" returns="void" doc="Ends page" ilk="function" src="pdf.c"/>
      <scope name="pdf_show" signature="pdf_show(int pdfdoc, string text)" returns="void" doc="Output text at current position" ilk="function" src="pdf.c"/>
      <scope name="pdf_show_xy" signature="pdf_show_xy(int pdfdoc, string text, float x_koor, float y_koor)" returns="void" doc="Output text at position" ilk="function" src="pdf.c"/>
      <scope name="pdf_show_boxed" signature="pdf_show_boxed(int pdfdoc, string text, float x_koor, float y_koor, float width, float height, string mode [, string feature])" returns="int" doc="Output text formated in a boxed" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_font" signature="pdf_set_font(int pdfdoc, string font, float size, string encoding [, int embed])" returns="void" doc="Select the current font face size and encoding" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_value" signature="pdf_set_value(int pdfdoc, string key, float value)" returns="void" doc="Sets arbitrary value" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_value" signature="pdf_get_value(int pdfdoc, string key, float modifier)" returns="float" doc="Gets arbitrary value" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_font" signature="pdf_get_font(int pdfdoc)" returns="int" doc="Gets the current font" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_fontname" signature="pdf_get_fontname(int pdfdoc)" returns="string" doc="Gets the current font name" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_fontsize" signature="pdf_get_fontsize(int pdfdoc)" returns="float" doc="Gets the current font size" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_leading" signature="pdf_set_leading(int pdfdoc, float distance)" returns="void" doc="Sets distance between text lines" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_text_rendering" signature="pdf_set_text_rendering(int pdfdoc, int mode)" returns="void" doc="Determines how text is rendered" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_horiz_scaling" signature="pdf_set_horiz_scaling(int pdfdoc, float scale)" returns="void" doc="Sets horizontal scaling of text" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_text_rise" signature="pdf_set_text_rise(int pdfdoc, float value)" returns="void" doc="Sets the text rise" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_char_spacing" signature="pdf_set_char_spacing(int pdfdoc, float space)" returns="void" doc="Sets character spacing" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_word_spacing" signature="pdf_set_word_spacing(int pdfdoc, float space)" returns="void" doc="Sets spacing between words" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_text_pos" signature="pdf_set_text_pos(int pdfdoc, float x, float y)" returns="void" doc="Sets the position of text for the next pdf show call" ilk="function" src="pdf.c"/>
      <scope name="pdf_continue_text" signature="pdf_continue_text(int pdfdoc, string text)" returns="void" doc="Output text in next line" ilk="function" src="pdf.c"/>
      <scope name="pdf_stringwidth" signature="pdf_stringwidth(int pdfdoc, string text [, int font, float size])" returns="float" doc="Returns width of text in current font" ilk="function" src="pdf.c"/>
      <scope name="pdf_save" signature="pdf_save(int pdfdoc)" returns="void" doc="Saves current enviroment" ilk="function" src="pdf.c"/>
      <scope name="pdf_restore" signature="pdf_restore(int pdfdoc)" returns="void" doc="Restores formerly saved enviroment" ilk="function" src="pdf.c"/>
      <scope name="pdf_translate" signature="pdf_translate(int pdfdoc, float x, float y)" returns="void" doc="Sets origin of coordinate system" ilk="function" src="pdf.c"/>
      <scope name="pdf_scale" signature="pdf_scale(int pdfdoc, float x_scale, float y_scale)" returns="void" doc="Sets scaling" ilk="function" src="pdf.c"/>
      <scope name="pdf_rotate" signature="pdf_rotate(int pdfdoc, float angle)" returns="void" doc="Sets rotation" ilk="function" src="pdf.c"/>
      <scope name="pdf_skew" signature="pdf_skew(int pdfdoc, float xangle, float yangle)" returns="void" doc="Skew the coordinate system" ilk="function" src="pdf.c"/>
      <scope name="pdf_setflat" signature="pdf_setflat(int pdfdoc, float value)" returns="void" doc="Sets flatness" ilk="function" src="pdf.c"/>
      <scope name="pdf_setlinejoin" signature="pdf_setlinejoin(int pdfdoc, int value)" returns="void" doc="Sets linejoin parameter" ilk="function" src="pdf.c"/>
      <scope name="pdf_setlinecap" signature="pdf_setlinecap(int pdfdoc, int value)" returns="void" doc="Sets linecap parameter" ilk="function" src="pdf.c"/>
      <scope name="pdf_setmiterlimit" signature="pdf_setmiterlimit(int pdfdoc, float value)" returns="void" doc="Sets miter limit" ilk="function" src="pdf.c"/>
      <scope name="pdf_setlinewidth" signature="pdf_setlinewidth(int pdfdoc, float width)" returns="void" doc="Sets line width" ilk="function" src="pdf.c"/>
      <scope name="pdf_setdash" signature="pdf_setdash(int pdfdoc, float black, float white)" returns="void" doc="Sets dash pattern" ilk="function" src="pdf.c"/>
      <scope name="pdf_moveto" signature="pdf_moveto(int pdfdoc, float x, float y)" returns="void" doc="Sets current point" ilk="function" src="pdf.c"/>
      <scope name="pdf_curveto" signature="pdf_curveto(int pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3)" returns="void" doc="Draws a curve" ilk="function" src="pdf.c"/>
      <scope name="pdf_lineto" signature="pdf_lineto(int pdfdoc, float x, float y)" returns="void" doc="Draws a line" ilk="function" src="pdf.c"/>
      <scope name="pdf_circle" signature="pdf_circle(int pdfdoc, float x, float y, float radius)" returns="void" doc="Draws a circle" ilk="function" src="pdf.c"/>
      <scope name="pdf_arc" signature="pdf_arc(int pdfdoc, float x, float y, float radius, float start, float end)" returns="void" doc="Draws an arc" ilk="function" src="pdf.c"/>
      <scope name="pdf_rect" signature="pdf_rect(int pdfdoc, float x, float y, float width, float height)" returns="void" doc="Draws a rectangle" ilk="function" src="pdf.c"/>
      <scope name="pdf_closepath" signature="pdf_closepath(int pdfdoc)" returns="void" doc="Close path" ilk="function" src="pdf.c"/>
      <scope name="pdf_closepath_stroke" signature="pdf_closepath_stroke(int pdfdoc)" returns="void" doc="Close path and draw line along path" ilk="function" src="pdf.c"/>
      <scope name="pdf_stroke" signature="pdf_stroke(int pdfdoc)" returns="void" doc="Draw line along path path" ilk="function" src="pdf.c"/>
      <scope name="pdf_fill" signature="pdf_fill(int pdfdoc)" returns="void" doc="Fill current path" ilk="function" src="pdf.c"/>
      <scope name="pdf_fill_stroke" signature="pdf_fill_stroke(int pdfdoc)" returns="void" doc="Fill and stroke current path" ilk="function" src="pdf.c"/>
      <scope name="pdf_closepath_fill_stroke" signature="pdf_closepath_fill_stroke(int pdfdoc)" returns="void" doc="Close fill and stroke current path" ilk="function" src="pdf.c"/>
      <scope name="pdf_endpath" signature="pdf_endpath(int pdfdoc)" returns="void" doc="Ends current path" ilk="function" src="pdf.c"/>
      <scope name="pdf_clip" signature="pdf_clip(int pdfdoc)" returns="void" doc="Clips to current path" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_parameter" signature="pdf_set_parameter(int pdfdoc, string key, string value)" returns="void" doc="Sets arbitrary parameters" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_parameter" signature="pdf_get_parameter(int pdfdoc, string key, mixed modifier)" returns="string" doc="Gets arbitrary parameters" ilk="function" src="pdf.c"/>
      <scope name="pdf_setgray_fill" signature="pdf_setgray_fill(int pdfdoc, float value)" returns="void" doc="Sets filling color to gray value" ilk="function" src="pdf.c"/>
      <scope name="pdf_setgray_stroke" signature="pdf_setgray_stroke(int pdfdoc, float value)" returns="void" doc="Sets drawing color to gray value" ilk="function" src="pdf.c"/>
      <scope name="pdf_setgray" signature="pdf_setgray(int pdfdoc, float value)" returns="void" doc="Sets drawing and filling color to gray value" ilk="function" src="pdf.c"/>
      <scope name="pdf_setrgbcolor_fill" signature="pdf_setrgbcolor_fill(int pdfdoc, float red, float green, float blue)" returns="void" doc="Sets filling color to RGB color value" ilk="function" src="pdf.c"/>
      <scope name="pdf_setrgbcolor_stroke" signature="pdf_setrgbcolor_stroke(int pdfdoc, float red, float green, float blue)" returns="void" doc="Sets drawing color to RGB color value" ilk="function" src="pdf.c"/>
      <scope name="pdf_setrgbcolor" signature="pdf_setrgbcolor(int pdfdoc, float red, float green, float blue)" returns="void" doc="Sets drawing and filling color to RGB color value" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_bookmark" signature="pdf_add_bookmark(int pdfdoc, string text [, int parent, int open])" returns="int" doc="Adds bookmark for current page" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_transition" signature="pdf_set_transition(int pdfdoc, int transition)" returns="void" doc="Sets transition between pages" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_duration" signature="pdf_set_duration(int pdfdoc, float duration)" returns="void" doc="Sets duration between pages" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_gif" signature="pdf_open_gif(int pdf, string giffile)" returns="int" doc="Opens a GIF file and returns an image for placement in&#10;a pdf object" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_jpeg" signature="pdf_open_jpeg(int pdf, string jpegfile)" returns="int" doc="Opens a JPEG file and returns an image for placement in&#10;a PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_png" signature="pdf_open_png(int pdf, string pngfile)" returns="int" doc="Opens a PNG file and returns an image for placement in&#10;a PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_tiff" signature="pdf_open_tiff(int pdf, string tifffile)" returns="int" doc="Opens a TIFF file and returns an image for placement in&#10;a PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_image_file" signature="pdf_open_image_file(int pdf, string type, string file, string stringparam, int intparam)" returns="int" doc="Opens an image file of the given type and returns an&#10;image for placement in a PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_memory_image" signature="pdf_open_memory_image(int pdf, int image)" returns="int" doc="Takes an GD image and returns an image for placement in&#10;a PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_close_image" signature="pdf_close_image(int pdf, int pdfimage)" returns="void" doc="Closes the PDF image" ilk="function" src="pdf.c"/>
      <scope name="pdf_place_image" signature="pdf_place_image(int pdf, int pdfimage, float x, float y, float scale)" returns="void" doc="Places image in the PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_image_width" signature="pdf_get_image_width(int pdf, int pdfimage)" returns="int" doc="Returns the width of an image" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_image_height" signature="pdf_get_image_height(int pdf, int pdfimage)" returns="int" doc="Returns the height of an image" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_weblink" signature="pdf_add_weblink(int pdfdoc, float llx, float lly, float urx, float ury, string url)" returns="void" doc="Adds link to web resource" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_pdflink" signature="pdf_add_pdflink(int pdfdoc, float llx, float lly, float urx, float ury, string filename, int page, string dest)" returns="void" doc="Adds link to PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_border_style" signature="pdf_set_border_style(int pdfdoc, string style, float width)" returns="void" doc="Sets style of box surounding all kinds of annotations&#10;and link" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_border_color" signature="pdf_set_border_color(int pdfdoc, float red, float green, float blue)" returns="void" doc="Sets color of box surounded all kinds of annotations&#10;and links" ilk="function" src="pdf.c"/>
      <scope name="pdf_set_border_dash" signature="pdf_set_border_dash(int pdfdoc, float black, float white)" returns="void" doc="Sets the border dash style of all kinds of annotations&#10;and links" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_annotation" signature="pdf_add_annotation(int pdfdoc, float xll, float yll, float xur, float xur, string title, string text)" returns="void" doc="Sets annotation depreciated use pdf add note instead" ilk="function" src="pdf.c"/>
      <scope name="pdf_new" signature="pdf_new()" returns="int" doc="Creates a new PDF object" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_majorversion" signature="pdf_get_majorversion()" returns="int" doc="Returns the major version number of the PDFlib" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_minorversion" signature="pdf_get_minorversion()" returns="int" doc="Returns the minor version number of the PDFlib" ilk="function" src="pdf.c"/>
      <scope name="pdf_delete" signature="pdf_delete(int pdfdoc)" returns="bool" doc="Deletes the PDF object" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_file" signature="pdf_open_file(int pdfdoc [, char filename])" returns="int" doc="Opens a new PDF document If filename is NULL document&#10;is created in memory This is not yet fully supported" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_buffer" signature="pdf_get_buffer(int pdfdoc)" returns="int" doc="Fetches the full buffer containig the generated PDF&#10;data" ilk="function" src="pdf.c"/>
      <scope name="pdf_findfont" signature="pdf_findfont(int pdfdoc, string fontname, string encoding [, int embed])" returns="int" doc="Prepares the font fontname for later use with pdf&#10;setfont" ilk="function" src="pdf.c"/>
      <scope name="pdf_setfont" signature="pdf_setfont(int pdfdoc, int font, float fontsize)" returns="void" doc="Sets the current font in the fiven fontsize" ilk="function" src="pdf.c"/>
      <scope name="pdf_setpolydash" signature="pdf_setpolydash(int pdfdoc, float darray)" returns="void" doc="Sets more complicated dash pattern" ilk="function" src="pdf.c"/>
      <scope name="pdf_concat" signature="pdf_concat(int pdf, float a, float b, float c, float d, float e, float f)" returns="void" doc="Concatenates a matrix to the current transformation&#10;matrix for text and graphics" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_ccitt" signature="pdf_open_ccitt(int pdf, string filename, int width, int height, int bitreverse, int k, int blackls1)" returns="int" doc="Opens an image file with raw CCITT G or G compresed&#10;bitmap data" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_image" signature="pdf_open_image(int pdf, string type, string source, string data, long length, int width, int height, int components, int bpc, string params)" returns="int" doc="Opens an image of the given type and returns an image&#10;for placement in a PDF document" ilk="function" src="pdf.c"/>
      <scope name="pdf_attach_file" signature="pdf_attach_file(int pdf, float lly, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)" returns="void" doc="Adds a file attachment annotation at the rectangle&#10;specified by his lower left and upper right corners" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_note" signature="pdf_add_note(int pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)" returns="void" doc="Sets annotation" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_locallink" signature="pdf_add_locallink(int pdfdoc, float llx, float lly, float urx, float ury, int page, string dest)" returns="void" doc="Adds link to web resource" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_launchlink" signature="pdf_add_launchlink(int pdfdoc, float llx, float lly, float urx, float ury, string filename)" returns="void" doc="Adds link to web resource" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_pdi" signature="pdf_open_pdi(int pdf, string filename, string stringparam, int intparam)" returns="int" doc="Open an existing PDF document and prepare it for later&#10;use" ilk="function" src="pdf.c"/>
      <scope name="pdf_close_pdi" signature="pdf_close_pdi(int pdf, int doc)" returns="void" doc="Close all open page handles and close the input PDF&#10;document" ilk="function" src="pdf.c"/>
      <scope name="pdf_open_pdi_page" signature="pdf_open_pdi_page(int pdf, int doc, int page, string label)" returns="int" doc="Prepare a page for later use with PDF place image" ilk="function" src="pdf.c"/>
      <scope name="pdf_place_pdi_page" signature="pdf_place_pdi_page(int pdf, int page, float x, float y, float sx, float sy)" returns="void" doc="Place a PDF page with the lower left corner at x y and&#10;scale it" ilk="function" src="pdf.c"/>
      <scope name="pdf_close_pdi_page" signature="pdf_close_pdi_page(int pdf, int page)" returns="void" doc="Close the page handle and free all page-related&#10;resources" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_pdi_parameter" signature="pdf_get_pdi_parameter(int pdf, string key, int doc, int page, int index)" returns="string" doc="Get the contents of some PDI document parameter with&#10;string type" ilk="function" src="pdf.c"/>
      <scope name="pdf_get_pdi_value" signature="pdf_get_pdi_value(int pdf, string key, int doc, int page, int index)" returns="float" doc="Get the contents of some PDI document parameter with&#10;numerical type" ilk="function" src="pdf.c"/>
      <scope name="pdf_begin_pattern" signature="pdf_begin_pattern(int pdf, float width, float height, float xstep, float ystep, int painttype)" returns="int" doc="Start a new pattern definition" ilk="function" src="pdf.c"/>
      <scope name="pdf_end_pattern" signature="pdf_end_pattern(int pdf)" returns="void" doc="Finish the pattern definition" ilk="function" src="pdf.c"/>
      <scope name="pdf_begin_template" signature="pdf_begin_template(int pdf, float width, float height)" returns="int" doc="Start a new template definition" ilk="function" src="pdf.c"/>
      <scope name="pdf_end_template" signature="pdf_end_template(int pdf)" returns="void" doc="Finish the template definition" ilk="function" src="pdf.c"/>
      <scope name="pdf_setcolor" signature="pdf_setcolor(int pdf, string type, string colorspace, float c1 [, float c2 [, float c3 [, float c4]]])" returns="void" doc="Set the current color space and color" ilk="function" src="pdf.c"/>
      <scope name="pdf_makespotcolor" signature="pdf_makespotcolor(int pdf, string spotname)" returns="int" doc="Make a named spot color from the current color" ilk="function" src="pdf.c"/>
      <scope name="pdf_arcn" signature="pdf_arcn(int pdf, float x, float y, float r, float alpha, float beta)" returns="void" doc="Draw a clockwise circular arc from alpha to beta&#10;degrees" ilk="function" src="pdf.c"/>
      <scope name="pdf_initgraphics" signature="pdf_initgraphics(int pdf)" returns="void" doc="Reset all implicit color and graphics state parameters&#10;to their defaults" ilk="function" src="pdf.c"/>
      <scope name="pdf_add_thumbnail" signature="pdf_add_thumbnail(int pdf, int image)" returns="void" doc="Add an existing image as thumbnail for the current page" ilk="function" src="pdf.c"/>
      <scope name="pdf_setmatrix" signature="pdf_setmatrix(int pdf, float a, float b, float c, float d, float e, float f)" returns="void" doc="Explicitly set the current transformation matrix" ilk="function" src="pdf.c"/>
      <scope name="pfpro_version" signature="pfpro_version()" returns="string" doc="Returns the version of the Payflow Pro library" ilk="function" src="pfpro.c"/>
      <scope name="pfpro_init" signature="pfpro_init()" returns="void" doc="Initializes the Payflow Pro library" ilk="function" src="pfpro.c"/>
      <scope name="pfpro_cleanup" signature="pfpro_cleanup()" returns="void" doc="Shuts down the Payflow Pro library" ilk="function" src="pfpro.c"/>
      <scope name="pfpro_process_raw" signature="pfpro_process_raw(string parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])" returns="string" doc="Raw Payflow Pro transaction processing" ilk="function" src="pfpro.c"/>
      <scope name="pfpro_process" signature="pfpro_process(array parmlist [, string hostaddress [, int port, [, int timeout [, string proxyAddress [, int proxyPort [, string proxyLogon [, string proxyPassword]]]]]]])" returns="array" doc="Payflow Pro transaction processing using arrays" ilk="function" src="pfpro.c"/>
      <scope name="pg_connect" signature="pg_connect(string connection_string[, int connect_type]" returns="resource" doc="Open a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_pconnect" signature="pg_pconnect(string connection_string" returns="resource" doc="Open a persistent PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_close" signature="pg_close([resource connection])" returns="bool" doc="Close a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_dbname" signature="pg_dbname([resource connection])" returns="string" doc="Get the database name" ilk="function" src="pgsql.c"/>
      <scope name="pg_last_error" signature="pg_last_error([resource connection])" returns="string" doc="Get the error message string" ilk="function" src="pgsql.c"/>
      <scope name="pg_options" signature="pg_options([resource connection])" returns="string" doc="Get the options associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_port" signature="pg_port([resource connection])" returns="int" doc="Return the port number associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_tty" signature="pg_tty([resource connection])" returns="string" doc="Return the tty name associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_host" signature="pg_host([resource connection])" returns="string" doc="Returns the host name associated with the connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_ping" signature="pg_ping(resource connection)" returns="bool" doc="Ping database If connection is bad try to reconnect" ilk="function" src="pgsql.c"/>
      <scope name="pg_query" signature="pg_query([resource connection,] string query)" returns="resource" doc="Execute a query" ilk="function" src="pgsql.c"/>
      <scope name="pg_num_rows" signature="pg_num_rows(resource result)" returns="int" doc="Return the number of rows in the result" ilk="function" src="pgsql.c"/>
      <scope name="pg_num_fields" signature="pg_num_fields(resource result)" returns="int" doc="Return the number of fields in the result" ilk="function" src="pgsql.c"/>
      <scope name="pg_affected_rows" signature="pg_affected_rows(resource result)" returns="int" doc="Returns the number of affected tuples" ilk="function" src="pgsql.c"/>
      <scope name="pg_last_notice" signature="pg_last_notice(resource connection)" returns="string" doc="Returns the last notice set by the backend" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_name" signature="pg_field_name(resource result, int field_number)" returns="string" doc="Returns the name of the field" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_size" signature="pg_field_size(resource result, int field_number)" returns="int" doc="Returns the internal size of the field" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_type" signature="pg_field_type(resource result, int field_number)" returns="string" doc="Returns the type name for the given field" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_num" signature="pg_field_num(resource result, string field_name)" returns="int" doc="Returns the field number of the named field" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_result" signature="pg_fetch_result(resource result, [int row_number,] mixed field_name)" returns="mixed" doc="Returns values from a result identifier" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_row" signature="pg_fetch_row(resource result [, int row [, int result_type]])" returns="array" doc="Get a row as an enumerated array" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_assoc" signature="pg_fetch_assoc(resource result [, int row])" returns="array" doc="Fetch a row as an assoc array" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_array" signature="pg_fetch_array(resource result [, int row [, int result_type]])" returns="array" doc="Fetch a row as an array" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_object" signature="pg_fetch_object(resource result [, int row])" returns="object" doc="Fetch a row as an object" ilk="function" src="pgsql.c"/>
      <scope name="pg_fetch_all" signature="pg_fetch_all(resource result)" returns="array" doc="Fetch all rows into array" ilk="function" src="pgsql.c"/>
      <scope name="pg_result_seek" signature="pg_result_seek(resource result, int offset)" returns="bool" doc="Set internal row offset" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_prtlen" signature="pg_field_prtlen(resource result, [int row,] mixed field_name_or_number)" returns="int" doc="Returns the printed length" ilk="function" src="pgsql.c"/>
      <scope name="pg_field_is_null" signature="pg_field_is_null(resource result, [int row,] mixed field_name_or_number)" returns="int" doc="Test if a field is NULL" ilk="function" src="pgsql.c"/>
      <scope name="pg_free_result" signature="pg_free_result(resource result)" returns="bool" doc="Free result memory" ilk="function" src="pgsql.c"/>
      <scope name="pg_last_oid" signature="pg_last_oid(resource result)" returns="string" doc="Returns the last object identifier" ilk="function" src="pgsql.c"/>
      <scope name="pg_trace" signature="pg_trace(string filename [, string mode [, resource connection]])" returns="bool" doc="Enable tracing a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_untrace" signature="pg_untrace([resource connection])" returns="bool" doc="Disable tracing of a PostgreSQL connection" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_create" signature="pg_lo_create([resource connection])" returns="int" doc="Create a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_unlink" signature="pg_lo_unlink([resource connection,] string large_object_oid)" returns="bool" doc="Delete a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_open" signature="pg_lo_open([resource connection,] int large_object_oid, string mode)" returns="resource" doc="Open a large object and return fd" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_close" signature="pg_lo_close(resource large_object)" returns="bool" doc="Close a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_read" signature="pg_lo_read(resource large_object [, int len])" returns="string" doc="Read a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_write" signature="pg_lo_write(resource large_object, string buf [, int len])" returns="int" doc="Write a large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_read_all" signature="pg_lo_read_all(resource large_object)" returns="int" doc="Read a large object and send straight to browser" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_import" signature="pg_lo_import([resource connection, ] string filename)" returns="int" doc="Import large object direct from filesystem" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_export" signature="pg_lo_export([resource connection, ] int objoid, string filename)" returns="bool" doc="Export large object direct to filesystem" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_seek" signature="pg_lo_seek(resource large_object, int offset [, int whence])" returns="bool" doc="Seeks position of large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_lo_tell" signature="pg_lo_tell(resource large_object)" returns="int" doc="Returns current position of large object" ilk="function" src="pgsql.c"/>
      <scope name="pg_set_client_encoding" signature="pg_set_client_encoding([resource connection,] string encoding)" returns="int" doc="Set client encoding" ilk="function" src="pgsql.c"/>
      <scope name="pg_client_encoding" signature="pg_client_encoding([resource connection])" returns="string" doc="Get the current client encoding" ilk="function" src="pgsql.c"/>
      <scope name="pg_end_copy" signature="pg_end_copy([resource connection])" returns="bool" doc="Sync with backend Completes the Copy command" ilk="function" src="pgsql.c"/>
      <scope name="pg_put_line" signature="pg_put_line([resource connection,] string query)" returns="bool" doc="Send null-terminated string to backend server" ilk="function" src="pgsql.c"/>
      <scope name="pg_copy_to" signature="pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]])" returns="array" doc="Copy table to array" ilk="function" src="pgsql.c"/>
      <scope name="pg_copy_from" signature="pg_copy_from(resource connection, string table_name , array rows [, string delimiter [, string null_as]])" returns="bool" doc="Copy table from array" ilk="function" src="pgsql.c"/>
      <scope name="pg_escape_string" signature="pg_escape_string(string data)" returns="string" doc="Escape string for text char type" ilk="function" src="pgsql.c"/>
      <scope name="pg_escape_bytea" signature="pg_escape_bytea(string data)" returns="string" doc="Escape binary for bytea type" ilk="function" src="pgsql.c"/>
      <scope name="pg_unescape_bytea" signature="pg_unescape_bytea(string data)" returns="string" doc="Unescape binary for bytea type" ilk="function" src="pgsql.c"/>
      <scope name="pg_result_error" signature="pg_result_error(resource result)" returns="string" doc="Get error message associated with result" ilk="function" src="pgsql.c"/>
      <scope name="pg_connection_status" signature="pg_connection_status(resource connnection)" returns="int" doc="Get connection status" ilk="function" src="pgsql.c"/>
      <scope name="pg_connection_reset" signature="pg_connection_reset(resource connection)" returns="bool" doc="Reset connection reconnect" ilk="function" src="pgsql.c"/>
      <scope name="pg_cancel_query" signature="pg_cancel_query(resource connection)" returns="bool" doc="Cancel request" ilk="function" src="pgsql.c"/>
      <scope name="pg_connection_busy" signature="pg_connection_busy(resource connection)" returns="bool" doc="Get connection is busy or not" ilk="function" src="pgsql.c"/>
      <scope name="pg_send_query" signature="pg_send_query(resource connection, string qeury)" returns="bool" doc="Send asynchronous query" ilk="function" src="pgsql.c"/>
      <scope name="pg_get_result" signature="pg_get_result(resource connection)" returns="resource" doc="Get asynchronous query result" ilk="function" src="pgsql.c"/>
      <scope name="pg_result_status" signature="pg_result_status(resource result[, long result_type])" returns="int" doc="Get status of query result" ilk="function" src="pgsql.c"/>
      <scope name="pg_get_notify" signature="pg_get_notify([resource connection[, result_type]])" returns="array" doc="Get asynchronous notification" ilk="function" src="pgsql.c"/>
      <scope name="pg_get_pid" signature="pg_get_pid([resource connection)" returns="int" doc="Get backend server pid" ilk="function" src="pgsql.c"/>
      <scope name="pg_meta_data" signature="pg_meta_data(resource db, string table)" returns="array" doc="Get meta data" ilk="function" src="pgsql.c"/>
      <scope name="pg_convert" signature="pg_convert(resource db, string table, array values[, int options])" returns="array" doc="Check and convert values for PostgreSQL SQL statement" ilk="function" src="pgsql.c"/>
      <scope name="pg_insert" signature="pg_insert(resource db, string table, array values[, int options])" returns="mixed" doc="Insert values filed value to table" ilk="function" src="pgsql.c"/>
      <scope name="pg_update" signature="pg_update(resource db, string table, array fields, array ids[, int options])" returns="mixed" doc="Update table using values field value and ids id value" ilk="function" src="pgsql.c"/>
      <scope name="pg_delete" signature="pg_delete(resource db, string table, array ids[, int options])" returns="mixed" doc="Delete records has ids id value" ilk="function" src="pgsql.c"/>
      <scope name="pg_select" signature="pg_select(resource db, string table, array ids[, int options])" returns="mixed" doc="Select records that has ids id value" ilk="function" src="pgsql.c"/>
      <scope name="posix_kill" signature="posix_kill(int pid, int sig)" returns="bool" doc="Send a signal to a process POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpid" signature="posix_getpid(void)" returns="int" doc="Get the current process id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getppid" signature="posix_getppid(void)" returns="int" doc="Get the parent process id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getuid" signature="posix_getuid(void)" returns="int" doc="Get the current user id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getgid" signature="posix_getgid(void)" returns="int" doc="Get the current group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_geteuid" signature="posix_geteuid(void)" returns="int" doc="Get the current effective user id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getegid" signature="posix_getegid(void)" returns="int" doc="Get the current effective group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setuid" signature="posix_setuid(long uid)" returns="bool" doc="Set user id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setgid" signature="posix_setgid(int uid)" returns="bool" doc="Set group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_seteuid" signature="posix_seteuid(long uid)" returns="bool" doc="Set effective user id" ilk="function" src="posix.c"/>
      <scope name="posix_setegid" signature="posix_setegid(long uid)" returns="bool" doc="Set effective group id" ilk="function" src="posix.c"/>
      <scope name="posix_getgroups" signature="posix_getgroups(void)" returns="array" doc="Get supplementary group id's POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getlogin" signature="posix_getlogin(void)" returns="string" doc="Get user name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpgrp" signature="posix_getpgrp(void)" returns="int" doc="Get current process group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setsid" signature="posix_setsid(void)" returns="int" doc="Create session and set process group id POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_setpgid" signature="posix_setpgid(int pid, int pgid)" returns="bool" doc="Set process group id for job control POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpgid" signature="posix_getpgid(void)" returns="int" doc="Get the process group id of the specified process This&#10;is not a POSIX function but a SVR ism so" ilk="function" src="posix.c"/>
      <scope name="posix_getsid" signature="posix_getsid(void)" returns="int" doc="Get process group id of session leader This is not a&#10;POSIX function but a SVR ism so be compile" ilk="function" src="posix.c"/>
      <scope name="posix_uname" signature="posix_uname(void)" returns="array" doc="Get system name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_times" signature="posix_times(void)" returns="array" doc="Get process times POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_ctermid" signature="posix_ctermid(void)" returns="string" doc="Generate terminal path name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_ttyname" signature="posix_ttyname(int fd)" returns="string" doc="Determine terminal device name POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_isatty" signature="posix_isatty(int fd)" returns="bool" doc="Determine if filedesc is a tty POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getcwd" signature="posix_getcwd(void)" returns="string" doc="Get working directory pathname POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_mkfifo" signature="posix_mkfifo(string pathname, int mode)" returns="bool" doc="Make a FIFO special file POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getgrnam" signature="posix_getgrnam(string groupname)" returns="array" doc="Group database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getgrgid" signature="posix_getgrgid(long gid)" returns="array" doc="Group database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpwnam" signature="posix_getpwnam(string groupname)" returns="array" doc="User database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getpwuid" signature="posix_getpwuid(long uid)" returns="array" doc="User database access POSIX" ilk="function" src="posix.c"/>
      <scope name="posix_getrlimit" signature="posix_getrlimit(void)" returns="int" doc="Get system resource consumption limits This is not a&#10;POSIX function but a BSDism and a SVR ism We compile" ilk="function" src="posix.c"/>
      <scope name="posix_get_last_error" signature="posix_get_last_error(void)" returns="int" doc="Retrieve the error number set by the last posix&#10;function which failed" ilk="function" src="posix.c"/>
      <scope name="posix_strerror" signature="posix_strerror(int errno)" returns="string" doc="Retrieve the system error message associated with the&#10;given errno" ilk="function" src="posix.c"/>
      <scope name="pspell_new" signature="pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" returns="int" doc="Load a dictionary" ilk="function" src="pspell.c"/>
      <scope name="pspell_new_personal" signature="pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]])" returns="int" doc="Load a dictionary with a personal wordlist" ilk="function" src="pspell.c"/>
      <scope name="pspell_new_config" signature="pspell_new_config(int config)" returns="int" doc="Load a dictionary based on the given config" ilk="function" src="pspell.c"/>
      <scope name="pspell_check" signature="pspell_check(int pspell, string word)" returns="int" doc="Returns true if word is valid" ilk="function" src="pspell.c"/>
      <scope name="pspell_suggest" signature="pspell_suggest(int pspell, string word)" returns="array" doc="Returns array of suggestions" ilk="function" src="pspell.c"/>
      <scope name="pspell_store_replacement" signature="pspell_store_replacement(int pspell, string misspell, string correct)" returns="int" doc="Notify the dictionary of a user-selected replacement" ilk="function" src="pspell.c"/>
      <scope name="pspell_add_to_personal" signature="pspell_add_to_personal(int pspell, string word)" returns="int" doc="Adds a word to a personal list" ilk="function" src="pspell.c"/>
      <scope name="pspell_add_to_session" signature="pspell_add_to_session(int pspell, string word)" returns="int" doc="Adds a word to the current session" ilk="function" src="pspell.c"/>
      <scope name="pspell_clear_session" signature="pspell_clear_session(int pspell)" returns="int" doc="Clears the current session" ilk="function" src="pspell.c"/>
      <scope name="pspell_save_wordlist" signature="pspell_save_wordlist(int pspell)" returns="int" doc="Saves the current personal wordlist" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_create" signature="pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]])" returns="int" doc="Create a new config to be used later to create a&#10;manager" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_runtogether" signature="pspell_config_runtogether(int conf, bool runtogether)" returns="int" doc="Consider run-together words as valid components" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_mode" signature="pspell_config_mode(int conf, long mode)" returns="int" doc="Select mode for config PSPELL FAST PSPELL NORMAL or&#10;PSPELL BAD SPELLERS" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_ignore" signature="pspell_config_ignore(int conf, int ignore)" returns="int" doc="Ignore words n chars" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_personal" signature="pspell_config_personal(int conf, string personal)" returns="int" doc="Use a personal dictionary for this config" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_repl" signature="pspell_config_repl(int conf, string repl)" returns="int" doc="Use a personal dictionary with replacement pairs for&#10;this config" ilk="function" src="pspell.c"/>
      <scope name="pspell_config_save_repl" signature="pspell_config_save_repl(int conf, bool save)" returns="int" doc="Save replacement pairs when personal list is saved for&#10;this config" ilk="function" src="pspell.c"/>
      <scope name="qdom_tree" signature="qdom_tree( string )" returns="object" doc="creates a tree of an xml string" ilk="function" src="qtdom.c"/>
      <scope name="qdom_error" signature="qdom_error()" returns="string" doc="Returns the error string from the last QDOM operation&#10;or FALSE if no errors occured" ilk="function" src="qtdom.c"/>
      <scope name="readline" signature="readline([string prompt])" returns="string" doc="Reads a line" ilk="function" src="readline.c"/>
      <scope name="readline_info" signature="readline_info([string varname] [, string newvalue])" returns="mixed" doc="Gets sets various internal readline variables" ilk="function" src="readline.c"/>
      <scope name="readline_add_history" signature="readline_add_history([string prompt])" returns="void" doc="Adds a line to the history" ilk="function" src="readline.c"/>
      <scope name="readline_clear_history" signature="readline_clear_history(void)" returns="void" doc="Clears the history" ilk="function" src="readline.c"/>
      <scope name="readline_list_history" signature="readline_list_history(void)" returns="array" doc="Lists the history" ilk="function" src="readline.c"/>
      <scope name="readline_read_history" signature="readline_read_history([string filename] [, int from] [,int to])" returns="int" doc="Reads the history" ilk="function" src="readline.c"/>
      <scope name="readline_write_history" signature="readline_write_history([string filename])" returns="int" doc="Writes the history" ilk="function" src="readline.c"/>
      <scope name="readline_completion_function" signature="readline_completion_function(string funcname)" returns="void" doc="Readline completion function" ilk="function" src="readline.c"/>
      <scope name="recode_string" signature="recode_string(string request, string str)" returns="string" doc="Recode string str according to request string" ilk="function" src="recode.c"/>
      <scope name="recode_file" signature="recode_file(string request, resource input, resource output)" returns="bool" doc="Recode file input into file output according to request" ilk="function" src="recode.c"/>
      <scope name="session_set_cookie_params" signature="session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]])" returns="void" doc="Set session cookie parameters" ilk="function" src="session.c"/>
      <scope name="session_get_cookie_params" signature="session_get_cookie_params(void)" returns="array" doc="Return the session cookie parameters" ilk="function" src="session.c"/>
      <scope name="session_name" signature="session_name([string newname])" returns="string" doc="Return the current session name If newname is given the&#10;session name is replaced with newname" ilk="function" src="session.c"/>
      <scope name="session_module_name" signature="session_module_name([string newname])" returns="string" doc="Return the current module name used for accessing&#10;session data If newname is given the module name is&#10;replaced with" ilk="function" src="session.c"/>
      <scope name="session_set_save_handler" signature="session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)" returns="void" doc="Sets user-level functions" ilk="function" src="session.c"/>
      <scope name="session_save_path" signature="session_save_path([string newname])" returns="string" doc="Return the current save path passed to module name If&#10;newname is given the save path is replaced with newname" ilk="function" src="session.c"/>
      <scope name="session_id" signature="session_id([string newid])" returns="string" doc="Return the current session id If newid is given the&#10;session id is replaced with newid" ilk="function" src="session.c"/>
      <scope name="session_regenerate_id" signature="session_regenerate_id()" returns="bool" doc="Update the current session id with a newly generated&#10;one" ilk="function" src="session.c"/>
      <scope name="session_cache_limiter" signature="session_cache_limiter([string new_cache_limiter])" returns="string" doc="Return the current cache limiter If new cache limited&#10;is given the current cache limiter is replaced with new&#10;cache" ilk="function" src="session.c"/>
      <scope name="session_cache_expire" signature="session_cache_expire([int new_cache_expire])" returns="int" doc="Return the current cache expire If new cache expire is&#10;given the current cache expire is replaced with new&#10;cache" ilk="function" src="session.c"/>
      <scope name="session_register" signature="session_register(mixed var_names [, mixed ...])" returns="bool" doc="Adds varname s to the list of variables which are&#10;freezed at the session end" ilk="function" src="session.c"/>
      <scope name="session_unregister" signature="session_unregister(string varname)" returns="bool" doc="Removes varname from the list of variables which are&#10;freezed at the session end" ilk="function" src="session.c"/>
      <scope name="session_is_registered" signature="session_is_registered(string varname)" returns="bool" doc="Checks if a variable is registered in session" ilk="function" src="session.c"/>
      <scope name="session_encode" signature="session_encode(void)" returns="string" doc="Serializes the current setup and returns the serialized&#10;representation" ilk="function" src="session.c"/>
      <scope name="session_decode" signature="session_decode(string data)" returns="bool" doc="Deserializes data and reinitializes the variables" ilk="function" src="session.c"/>
      <scope name="session_start" signature="session_start(void)" returns="bool" doc="Begin session - reinitializes freezed variables&#10;registers browsers etc" ilk="function" src="session.c"/>
      <scope name="session_destroy" signature="session_destroy(void)" returns="bool" doc="Destroy the current session and all data associated&#10;with it" ilk="function" src="session.c"/>
      <scope name="session_unset" signature="session_unset(void)" returns="void" doc="Unset all registered variables" ilk="function" src="session.c"/>
      <scope name="session_write_close" signature="session_write_close(void)" returns="void" doc="Write session data and end session" ilk="function" src="session.c"/>
      <scope name="confirm_extname_compiled" signature="confirm_extname_compiled(string arg)" returns="string" doc="Return a string to confirm that the module is compiled&#10;in" ilk="function" src="skeleton.c"/>
      <scope name="snmpget" signature="snmpget(string host, string community, string object_id [, int timeout [, int retries]])" returns="string" doc="Fetch a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmpwalk" signature="snmpwalk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects under the specified object id" ilk="function" src="snmp.c"/>
      <scope name="snmprealwalk" signature="snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects including their respective object id&#10;withing the specified one" ilk="function" src="snmp.c"/>
      <scope name="snmp_get_quick_print" signature="snmp_get_quick_print(void)" returns="bool" doc="Return the current status of quick print" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_quick_print" signature="snmp_set_quick_print(int quick_print)" returns="void" doc="Return all objects including their respective object id&#10;withing the specified one" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_enum_print" signature="snmp_set_enum_print(int enum_print)" returns="void" doc="Return all values that are enums with their enum value&#10;instead of the raw integer" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_oid_numeric_print" signature="snmp_set_oid_numeric_print(int oid_numeric_print)" returns="void" doc="Return all objects including their respective object id&#10;withing the specified one" ilk="function" src="snmp.c"/>
      <scope name="snmpset" signature="snmpset(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])" returns="int" doc="Set the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp2_get" signature="snmp2_get(string host, string community, string object_id [, int timeout [, int retries]])" returns="string" doc="Fetch a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp2_walk" signature="snmp2_walk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects under the specified object id" ilk="function" src="snmp.c"/>
      <scope name="snmp2_real_walk" signature="snmp2_real_walk(string host, string community, string object_id [, int timeout [, int retries]])" returns="array" doc="Return all objects including their respective object id&#10;withing the specified one" ilk="function" src="snmp.c"/>
      <scope name="snmp2_set" signature="snmp2_set(string host, string community, string object_id, string type, mixed value [, int timeout [, int retries]])" returns="int" doc="Set the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="php_snmpv3" signature="php_snmpv3(INTERNAL_FUNCTION_PARAMETERS, int st)" returns="void" doc="Generic SNMPv object fetcher From here is passed on the&#10;the common internal object fetcher st snmp get - query" ilk="function" src="snmp.c"/>
      <scope name="snmp3_get" signature="snmp3_get(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp3_walk" signature="snmp3_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp3_real_walk" signature="snmp3_real_walk(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp3_set" signature="snmp3_set(string host, string sec_name, string sec_level, string auth_protocol, string auth_passphrase, string priv_protocol, string priv_passphrase, string object_id, string type, mixed value [, int timeout [, int retries]])" returns="int" doc="Fetch the value of a SNMP object" ilk="function" src="snmp.c"/>
      <scope name="snmp_set_valueretrieval" signature="snmp_set_valueretrieval(int method)" returns="int" doc="Specify the method how the SNMP values will be returned" ilk="function" src="snmp.c"/>
      <scope name="snmp_get_valueretrieval" signature="snmp_get_valueretrieval()" returns="int" doc="Return the method how the SNMP values will be returned" ilk="function" src="snmp.c"/>
      <scope name="socket_select" signature="socket_select(array &amp;read_fds, array &amp;write_fds, &amp;array except_fds, int tv_sec[, int tv_usec])" returns="int" doc="Runs the select system call on the sets mentioned with&#10;a timeout specified by tv sec and tv usec" ilk="function" src="sockets.c"/>
      <scope name="socket_create_listen" signature="socket_create_listen(int port[, int backlog])" returns="resource" doc="Opens a socket on port to accept connections" ilk="function" src="sockets.c"/>
      <scope name="socket_accept" signature="socket_accept(resource socket)" returns="resource" doc="Accepts a connection on the listening socket fd" ilk="function" src="sockets.c"/>
      <scope name="socket_set_nonblock" signature="socket_set_nonblock(resource socket)" returns="bool" doc="Sets nonblocking mode on a socket resource" ilk="function" src="sockets.c"/>
      <scope name="socket_set_block" signature="socket_set_block(resource socket)" returns="bool" doc="Sets blocking mode on a socket resource" ilk="function" src="sockets.c"/>
      <scope name="socket_listen" signature="socket_listen(resource socket[, int backlog])" returns="bool" doc="Sets the maximum number of connections allowed to be&#10;waited for on the socket specified by fd" ilk="function" src="sockets.c"/>
      <scope name="socket_close" signature="socket_close(resource socket)" returns="void" doc="Closes a file descriptor" ilk="function" src="sockets.c"/>
      <scope name="socket_write" signature="socket_write(resource socket, string buf[, int length])" returns="int" doc="Writes the buffer to the socket resource length is&#10;optional" ilk="function" src="sockets.c"/>
      <scope name="socket_read" signature="socket_read(resource socket, int length [, int type])" returns="string" doc="Reads a maximum of length bytes from socket" ilk="function" src="sockets.c"/>
      <scope name="socket_getsockname" signature="socket_getsockname(resource socket, string &amp;addr[, int &amp;port])" returns="bool" doc="Queries the remote side of the given socket which may&#10;either result in host port or in a UNIX filesystem" ilk="function" src="sockets.c"/>
      <scope name="socket_getpeername" signature="socket_getpeername(resource socket, string &amp;addr[, int &amp;port])" returns="bool" doc="Queries the remote side of the given socket which may&#10;either result in host port or in a UNIX filesystem" ilk="function" src="sockets.c"/>
      <scope name="socket_create" signature="socket_create(int domain, int type, int protocol)" returns="resource" doc="Creates an endpoint for communication in the domain&#10;specified by domain of type specified by type" ilk="function" src="sockets.c"/>
      <scope name="socket_connect" signature="socket_connect(resource socket, string addr [, int port])" returns="bool" doc="Opens a connection to addr port on the socket specified&#10;by socket" ilk="function" src="sockets.c"/>
      <scope name="socket_strerror" signature="socket_strerror(int errno)" returns="string" doc="Returns a string describing an error" ilk="function" src="sockets.c"/>
      <scope name="socket_bind" signature="socket_bind(resource socket, string addr [, int port])" returns="bool" doc="Binds an open socket to a listening port port is only&#10;specified in AF INET family" ilk="function" src="sockets.c"/>
      <scope name="socket_iovec_alloc" signature="socket_iovec_alloc(int num_vectors [, int ...])" returns="resource" doc="Builds a 'struct iovec' for use with sendmsg recvmsg&#10;writev and readv" ilk="function" src="sockets.c"/>
      <scope name="socket_iovec_fetch" signature="socket_iovec_fetch(resource iovec, int iovec_position)" returns="string" doc="Returns the data held in the iovec specified by iovec&#10;id iovec position" ilk="function" src="sockets.c"/>
      <scope name="socket_iovec_set" signature="socket_iovec_set(resource iovec, int iovec_position, string new_val)" returns="bool" doc="Sets the data held in iovec id iovec position to new&#10;val" ilk="function" src="sockets.c"/>
      <scope name="socket_iovec_add" signature="socket_iovec_add(resource iovec, int iov_len)" returns="bool" doc="Adds a new vector to the scatter gather array" ilk="function" src="sockets.c"/>
      <scope name="socket_iovec_delete" signature="socket_iovec_delete(resource iovec, int iov_pos)" returns="bool" doc="Deletes a vector from an array of vectors" ilk="function" src="sockets.c"/>
      <scope name="socket_iovec_free" signature="socket_iovec_free(resource iovec)" returns="bool" doc="Frees the iovec specified by iovec id" ilk="function" src="sockets.c"/>
      <scope name="socket_readv" signature="socket_readv(resource socket, resource iovec_id)" returns="bool" doc="Reads from an fd using the scatter-gather array defined&#10;by iovec id" ilk="function" src="sockets.c"/>
      <scope name="socket_writev" signature="socket_writev(resource socket, resource iovec_id)" returns="bool" doc="Writes to a file descriptor fd using the scatter-gather&#10;array defined by iovec id" ilk="function" src="sockets.c"/>
      <scope name="socket_recv" signature="socket_recv(resource socket, string &amp;buf, int len, int flags)" returns="int" doc="Receives data from a connected socket" ilk="function" src="sockets.c"/>
      <scope name="socket_send" signature="socket_send(resource socket, string buf, int len, int flags)" returns="int" doc="Sends data to a connected socket" ilk="function" src="sockets.c"/>
      <scope name="socket_recvfrom" signature="socket_recvfrom(resource socket, string &amp;buf, int len, int flags, string &amp;name [, int &amp;port])" returns="int" doc="Receives data from a socket connected or not" ilk="function" src="sockets.c"/>
      <scope name="socket_sendto" signature="socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port])" returns="int" doc="Sends a message to a socket whether it is connected or&#10;not" ilk="function" src="sockets.c"/>
      <scope name="socket_recvmsg" signature="socket_recvmsg(resource socket, resource iovec, array &amp;control, int &amp;controllen, int &amp;flags, string &amp;addr [, int &amp;port])" returns="bool" doc="Used to receive messages on a socket whether&#10;connection-oriented or not" ilk="function" src="sockets.c"/>
      <scope name="socket_sendmsg" signature="socket_sendmsg(resource socket, resource iovec, int flags, string addr [, int port])" returns="bool" doc="Sends a message to a socket regardless of whether it is&#10;connection-oriented or not" ilk="function" src="sockets.c"/>
      <scope name="socket_get_option" signature="socket_get_option(resource socket, int level, int optname)" returns="mixed" doc="Gets socket options for the socket" ilk="function" src="sockets.c"/>
      <scope name="socket_set_option" signature="socket_set_option(resource socket, int level, int optname, int" returns="bool" doc="Sets socket options for the socket" ilk="function" src="sockets.c"/>
      <scope name="socket_create_pair" signature="socket_create_pair(int domain, int type, int protocol, array &amp;fd)" returns="bool" doc="Creates a pair of indistinguishable sockets and stores&#10;them in fds" ilk="function" src="sockets.c"/>
      <scope name="socket_shutdown" signature="socket_shutdown(resource socket[, int how])" returns="bool" doc="Shuts down a socket for receiving sending or both" ilk="function" src="sockets.c"/>
      <scope name="socket_last_error" signature="socket_last_error([resource socket])" returns="int" doc="Returns the last socket error either the last used or&#10;the provided socket resource" ilk="function" src="sockets.c"/>
      <scope name="socket_clear_error" signature="socket_clear_error([resource socket])" returns="void" doc="Clears the error on the socket or the last error code" ilk="function" src="sockets.c"/>
      <scope name="aggregate" signature="aggregate(object obj, string class)" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="aggregate_methods" signature="aggregate_methods(object obj, string class)" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="aggregate_methods_by_list" signature="aggregate_methods_by_list(object obj, string class, array method_list [, bool exclude])" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="aggregate_properties" signature="aggregate_properties(object obj, string class)" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="aggregate_properties_by_list" signature="aggregate_properties_by_list(object obj, string class, array props_list [, bool exclude])" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="aggregate_methods_by_regexp" signature="aggregate_methods_by_regexp(object obj, string class, string regexp [, bool exclude])" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="aggregate_properties_by_regexp" signature="aggregate_properties_by_regexp(object obj, string class, string regexp [, bool exclude])" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="aggregation_info" signature="aggregation_info(object obj)" returns="array" doc="" ilk="function" src="aggregation.c"/>
      <scope name="deaggregate" signature="deaggregate(object obj [, string class])" returns="void" doc="" ilk="function" src="aggregation.c"/>
      <scope name="krsort" signature="krsort(array array_arg [, int sort_flags])" returns="bool" doc="Sort an array by key value in reverse order" ilk="function" src="array.c"/>
      <scope name="ksort" signature="ksort(array array_arg [, int sort_flags])" returns="bool" doc="Sort an array by key" ilk="function" src="array.c"/>
      <scope name="count" signature="count(mixed var [, int mode])" returns="int" doc="Count the number of elements in a variable usually an&#10;array" ilk="function" src="array.c"/>
      <scope name="natsort" signature="natsort(array array_arg)" returns="void" doc="Sort an array using natural sort" ilk="function" src="array.c"/>
      <scope name="natcasesort" signature="natcasesort(array array_arg)" returns="void" doc="Sort an array using case-insensitive natural sort" ilk="function" src="array.c"/>
      <scope name="asort" signature="asort(array array_arg [, int sort_flags])" returns="bool" doc="Sort an array and maintain index association" ilk="function" src="array.c"/>
      <scope name="arsort" signature="arsort(array array_arg [, int sort_flags])" returns="bool" doc="Sort an array in reverse order and maintain index&#10;association" ilk="function" src="array.c"/>
      <scope name="sort" signature="sort(array array_arg [, int sort_flags])" returns="bool" doc="Sort an array" ilk="function" src="array.c"/>
      <scope name="rsort" signature="rsort(array array_arg [, int sort_flags])" returns="bool" doc="Sort an array in reverse order" ilk="function" src="array.c"/>
      <scope name="usort" signature="usort(array array_arg, string cmp_function)" returns="bool" doc="Sort an array by values using a user-defined comparison&#10;function" ilk="function" src="array.c"/>
      <scope name="uasort" signature="uasort(array array_arg, string cmp_function)" returns="bool" doc="Sort an array with a user-defined comparison function&#10;and maintain index association" ilk="function" src="array.c"/>
      <scope name="uksort" signature="uksort(array array_arg, string cmp_function)" returns="bool" doc="Sort an array by keys using a user-defined comparison&#10;function" ilk="function" src="array.c"/>
      <scope name="end" signature="end(array array_arg)" returns="mixed" doc="Advances array argument's internal pointer to the last&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="prev" signature="prev(array array_arg)" returns="mixed" doc="Move array argument's internal pointer to the previous&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="next" signature="next(array array_arg)" returns="mixed" doc="Move array argument's internal pointer to the next&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="reset" signature="reset(array array_arg)" returns="mixed" doc="Set array argument's internal pointer to the first&#10;element and return it" ilk="function" src="array.c"/>
      <scope name="current" signature="current(array array_arg)" returns="mixed" doc="Return the element currently pointed to by the internal&#10;array pointer" ilk="function" src="array.c"/>
      <scope name="key" signature="key(array array_arg)" returns="mixed" doc="Return the key of the element currently pointed to by&#10;the internal array pointer" ilk="function" src="array.c"/>
      <scope name="min" signature="min(mixed arg1 [, mixed arg2 [, mixed ...]])" returns="mixed" doc="Return the lowest value in an array or a series of&#10;arguments" ilk="function" src="array.c"/>
      <scope name="max" signature="max(mixed arg1 [, mixed arg2 [, mixed ...]])" returns="mixed" doc="Return the highest value in an array or a series of&#10;arguments" ilk="function" src="array.c"/>
      <scope name="array_walk" signature="array_walk(array input, string funcname [, mixed userdata])" returns="bool" doc="Apply a user function to every member of an array" ilk="function" src="array.c"/>
      <scope name="in_array" signature="in_array(mixed needle, array haystack [, bool strict])" returns="bool" doc="Checks if the given value exists in the array" ilk="function" src="array.c"/>
      <scope name="array_search" signature="array_search(mixed needle, array haystack [, bool strict])" returns="mixed" doc="Searches the array for a given value and returns the&#10;corresponding key if successful" ilk="function" src="array.c"/>
      <scope name="extract" signature="extract(array var_array [, int extract_type [, string prefix]])" returns="int" doc="Imports variables into symbol table from an array" ilk="function" src="array.c"/>
      <scope name="compact" signature="compact(mixed var_names [, mixed ...])" returns="array" doc="Creates a hash containing variables and their values" ilk="function" src="array.c"/>
      <scope name="array_fill" signature="array_fill(int start_key, int num, mixed val)" returns="array" doc="Create an array containing num elements starting with&#10;index start key each initialized to val" ilk="function" src="array.c"/>
      <scope name="range" signature="range(mixed low, mixed high)" returns="array" doc="Create an array containing the range of integers or&#10;characters from low to high inclusive" ilk="function" src="array.c"/>
      <scope name="shuffle" signature="shuffle(array array_arg)" returns="bool" doc="Randomly shuffle the contents of an array" ilk="function" src="array.c"/>
      <scope name="array_push" signature="array_push(array stack, mixed var [, mixed ...])" returns="int" doc="Pushes elements onto the end of the array" ilk="function" src="array.c"/>
      <scope name="array_pop" signature="array_pop(array stack)" returns="mixed" doc="Pops an element off the end of the array" ilk="function" src="array.c"/>
      <scope name="array_shift" signature="array_shift(array stack)" returns="mixed" doc="Pops an element off the beginning of the array" ilk="function" src="array.c"/>
      <scope name="array_unshift" signature="array_unshift(array stack, mixed var [, mixed ...])" returns="int" doc="Pushes elements onto the beginning of the array" ilk="function" src="array.c"/>
      <scope name="array_splice" signature="array_splice(array input, int offset [, int length [, array replacement]])" returns="array" doc="Removes the elements designated by offset and length&#10;and replace them with supplied array" ilk="function" src="array.c"/>
      <scope name="array_slice" signature="array_slice(array input, int offset [, int length])" returns="array" doc="Returns elements specified by offset and length" ilk="function" src="array.c"/>
      <scope name="array_merge" signature="array_merge(array arr1, array arr2 [, array ...])" returns="array" doc="Merges elements from passed arrays into one array" ilk="function" src="array.c"/>
      <scope name="array_merge_recursive" signature="array_merge_recursive(array arr1, array arr2 [, array ...])" returns="array" doc="Recursively merges elements from passed arrays into one&#10;array" ilk="function" src="array.c"/>
      <scope name="array_keys" signature="array_keys(array input [, mixed search_value])" returns="array" doc="Return just the keys from the input array optionally&#10;only for the specified search value" ilk="function" src="array.c"/>
      <scope name="array_values" signature="array_values(array input)" returns="array" doc="Return just the values from the input array" ilk="function" src="array.c"/>
      <scope name="array_count_values" signature="array_count_values(array input)" returns="array" doc="Return the value as key and the frequency of that value&#10;in input as value" ilk="function" src="array.c"/>
      <scope name="array_reverse" signature="array_reverse(array input [, bool preserve keys])" returns="array" doc="Return input as a new array with the order of the&#10;entries reversed" ilk="function" src="array.c"/>
      <scope name="array_pad" signature="array_pad(array input, int pad_size, mixed pad_value)" returns="array" doc="Returns a copy of input array padded with pad value to&#10;size pad size" ilk="function" src="array.c"/>
      <scope name="array_flip" signature="array_flip(array input)" returns="array" doc="Return array with key - value flipped" ilk="function" src="array.c"/>
      <scope name="array_change_key_case" signature="array_change_key_case(array input [, int case=CASE_LOWER])" returns="array" doc="Retuns an array with all string keys lowercased or&#10;uppercased" ilk="function" src="array.c"/>
      <scope name="array_unique" signature="array_unique(array input)" returns="array" doc="Removes duplicate values from array" ilk="function" src="array.c"/>
      <scope name="array_intersect" signature="array_intersect(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;present in all the other arguments" ilk="function" src="array.c"/>
      <scope name="array_intersect_assoc" signature="array_intersect_assoc(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;present in all the other arguments Keys are used to" ilk="function" src="array.c"/>
      <scope name="array_diff" signature="array_diff(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments" ilk="function" src="array.c"/>
      <scope name="array_diff_assoc" signature="array_diff_assoc(array arr1, array arr2 [, array ...])" returns="array" doc="Returns the entries of arr that have values which are&#10;not present in any of the others arguments but do" ilk="function" src="array.c"/>
      <scope name="array_multisort" signature="array_multisort(array ar1 [, SORT_ASC" returns="bool" doc="Sort multiple arrays at once similar to how ORDER BY&#10;clause works in SQL" ilk="function" src="array.c"/>
      <scope name="array_rand" signature="array_rand(array input [, int num_req])" returns="mixed" doc="Return key keys for random entry entries in the array" ilk="function" src="array.c"/>
      <scope name="array_sum" signature="array_sum(array input)" returns="mixed" doc="Returns the sum of the array entries" ilk="function" src="array.c"/>
      <scope name="array_reduce" signature="array_reduce(array input, mixed callback [, int initial])" returns="mixed" doc="Iteratively reduce the array to a single value via the&#10;callback" ilk="function" src="array.c"/>
      <scope name="array_filter" signature="array_filter(array input [, mixed callback])" returns="array" doc="Filters elements from the array via the callback" ilk="function" src="array.c"/>
      <scope name="array_map" signature="array_map(mixed callback, array input1 [, array input2 ,...])" returns="array" doc="Applies the callback to the elements in given arrays" ilk="function" src="array.c"/>
      <scope name="array_key_exists" signature="array_key_exists(mixed key, array search)" returns="bool" doc="Checks if the given key or index exists in the array" ilk="function" src="array.c"/>
      <scope name="array_chunk" signature="array_chunk(array input, int size [, bool preserve_keys])" returns="array" doc="Split array into chunks" ilk="function" src="array.c"/>
      <scope name="assert" signature="assert(string" returns="int" doc="Checks if assertion is false" ilk="function" src="assert.c"/>
      <scope name="assert_options" signature="assert_options(int what [, mixed value])" returns="mixed" doc="Set get the various assert flags" ilk="function" src="assert.c"/>
      <scope name="base64_encode" signature="base64_encode(string str)" returns="string" doc="Encodes string using MIME base algorithm" ilk="function" src="base64.c"/>
      <scope name="base64_decode" signature="base64_decode(string str)" returns="string" doc="Decodes string using MIME base algorithm" ilk="function" src="base64.c"/>
      <scope name="constant" signature="constant(string const_name)" returns="mixed" doc="Given the name of a constant this function will return&#10;the constants associated value" ilk="function" src="basic_functions.c"/>
      <scope name="ip2long" signature="ip2long(string ip_address)" returns="int" doc="Converts a string containing an IPv Internet Protocol&#10;dotted address into a proper address" ilk="function" src="basic_functions.c"/>
      <scope name="long2ip" signature="long2ip(int proper_address)" returns="string" doc="Converts an IPv Internet network address into a string&#10;in Internet standard dotted format" ilk="function" src="basic_functions.c"/>
      <scope name="getenv" signature="getenv(string varname)" returns="string" doc="Get the value of an environment variable" ilk="function" src="basic_functions.c"/>
      <scope name="putenv" signature="putenv(string setting)" returns="bool" doc="Set the value of an environment variable" ilk="function" src="basic_functions.c"/>
      <scope name="getopt" signature="getopt(string options [, array longopts])" returns="array" doc="Get options from the command line argument list" ilk="function" src="basic_functions.c"/>
      <scope name="flush" signature="flush(void)" returns="void" doc="Flush the output buffer" ilk="function" src="basic_functions.c"/>
      <scope name="sleep" signature="sleep(int seconds)" returns="void" doc="Delay for a given number of seconds" ilk="function" src="basic_functions.c"/>
      <scope name="usleep" signature="usleep(int micro_seconds)" returns="void" doc="Delay for a given number of micro seconds" ilk="function" src="basic_functions.c"/>
      <scope name="get_current_user" signature="get_current_user(void)" returns="string" doc="Get the name of the owner of the current PHP script" ilk="function" src="basic_functions.c"/>
      <scope name="get_cfg_var" signature="get_cfg_var(string option_name)" returns="string" doc="Get the value of a PHP configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="set_magic_quotes_runtime" signature="set_magic_quotes_runtime(int new_setting)" returns="bool" doc="Set the current active configuration setting of magic&#10;quotes runtime and return previous" ilk="function" src="basic_functions.c"/>
      <scope name="get_magic_quotes_runtime" signature="get_magic_quotes_runtime(void)" returns="int" doc="Get the current active configuration setting of magic&#10;quotes runtime" ilk="function" src="basic_functions.c"/>
      <scope name="get_magic_quotes_gpc" signature="get_magic_quotes_gpc(void)" returns="int" doc="Get the current active configuration setting of magic&#10;quotes gpc" ilk="function" src="basic_functions.c"/>
      <scope name="error_log" signature="error_log(string message [, int message_type [, string destination [, string extra_headers]]])" returns="bool" doc="Send an error message somewhere" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_func" signature="call_user_func(string function_name [, mixed parmeter] [, mixed ...])" returns="mixed" doc="Call a user function which is the first parameter" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_func_array" signature="call_user_func_array(string function_name, array parameters)" returns="mixed" doc="Call a user function which is the first parameter with&#10;the arguments contained in array" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_method" signature="call_user_method(string method_name, mixed object [, mixed parameter] [, mixed ...])" returns="mixed" doc="Call a user method on a specific object or class" ilk="function" src="basic_functions.c"/>
      <scope name="call_user_method_array" signature="call_user_method_array(string method_name, mixed object, array params)" returns="mixed" doc="Call a user method on a specific object or class using&#10;a parameter array" ilk="function" src="basic_functions.c"/>
      <scope name="register_shutdown_function" signature="register_shutdown_function(string function_name)" returns="void" doc="Register a user-level function to be called on request&#10;termination" ilk="function" src="basic_functions.c"/>
      <scope name="highlight_file" signature="highlight_file(string file_name [, bool return] )" returns="bool" doc="Syntax highlight a source file" ilk="function" src="basic_functions.c"/>
      <scope name="highlight_string" signature="highlight_string(string string [, bool return] )" returns="bool" doc="Syntax highlight a string or optionally return it" ilk="function" src="basic_functions.c"/>
      <scope name="ini_get" signature="ini_get(string varname)" returns="string" doc="Get a configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="ini_get_all" signature="ini_get_all([string extension])" returns="array" doc="Get all configuration options" ilk="function" src="basic_functions.c"/>
      <scope name="ini_set" signature="ini_set(string varname, string newvalue)" returns="string" doc="Set a configuration option returns false on error and&#10;the old value of the configuration option on success" ilk="function" src="basic_functions.c"/>
      <scope name="ini_restore" signature="ini_restore(string varname)" returns="void" doc="Restore the value of a configuration option specified&#10;by varname" ilk="function" src="basic_functions.c"/>
      <scope name="set_include_path" signature="set_include_path(string new_include_path)" returns="string" doc="Sets the include path configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="get_include_path" signature="get_include_path()" returns="string" doc="Get the current include path configuration option" ilk="function" src="basic_functions.c"/>
      <scope name="restore_include_path" signature="restore_include_path()" returns="void" doc="Restore the value of the include path configuration&#10;option" ilk="function" src="basic_functions.c"/>
      <scope name="print_r" signature="print_r(mixed var [, bool return])" returns="bool" doc="Prints out or returns information about the specified&#10;variable" ilk="function" src="basic_functions.c"/>
      <scope name="connection_aborted" signature="connection_aborted(void)" returns="int" doc="Returns true if client disconnected" ilk="function" src="basic_functions.c"/>
      <scope name="connection_status" signature="connection_status(void)" returns="int" doc="Returns the connection status bitfield" ilk="function" src="basic_functions.c"/>
      <scope name="ignore_user_abort" signature="ignore_user_abort(bool value)" returns="int" doc="Set whether we want to ignore a user abort event or not" ilk="function" src="basic_functions.c"/>
      <scope name="getservbyname" signature="getservbyname(string service, string protocol)" returns="int" doc="Returns port associated with service Protocol must be&#10;tcp or udp" ilk="function" src="basic_functions.c"/>
      <scope name="getservbyport" signature="getservbyport(int port, string protocol)" returns="string" doc="Returns service name associated with port Protocol must&#10;be tcp or udp" ilk="function" src="basic_functions.c"/>
      <scope name="getprotobyname" signature="getprotobyname(string name)" returns="int" doc="Returns protocol number associated with name as per etc&#10;protocols" ilk="function" src="basic_functions.c"/>
      <scope name="getprotobynumber" signature="getprotobynumber(int proto)" returns="string" doc="Returns protocol name associated with protocol number&#10;proto" ilk="function" src="basic_functions.c"/>
      <scope name="register_tick_function" signature="register_tick_function(string function_name [, mixed arg [, mixed ... ]])" returns="bool" doc="Registers a tick callback function" ilk="function" src="basic_functions.c"/>
      <scope name="unregister_tick_function" signature="unregister_tick_function(string function_name)" returns="void" doc="Unregisters a tick callback function" ilk="function" src="basic_functions.c"/>
      <scope name="is_uploaded_file" signature="is_uploaded_file(string path)" returns="bool" doc="Check if file was created by rfc upload" ilk="function" src="basic_functions.c"/>
      <scope name="move_uploaded_file" signature="move_uploaded_file(string path, string new_path)" returns="bool" doc="Move a file if and only if it was created by an upload" ilk="function" src="basic_functions.c"/>
      <scope name="parse_ini_file" signature="parse_ini_file(string filename [, bool process_sections])" returns="array" doc="Parse configuration file" ilk="function" src="basic_functions.c"/>
      <scope name="import_request_variables" signature="import_request_variables(string types [, string prefix])" returns="bool" doc="Import GET POST Cookie variables into the global scope" ilk="function" src="basic_functions.c"/>
      <scope name="get_browser" signature="get_browser([string browser_name [, bool return_array]])" returns="mixed" doc="Get information about the capabilities of a browser If&#10;browser name is omitted or null HTTP USER AGENT is used" ilk="function" src="browscap.c"/>
      <scope name="crc32" signature="crc32(string str)" returns="string" doc="Calculate the crc polynomial of a string" ilk="function" src="crc32.c"/>
      <scope name="crypt" signature="crypt(string str [, string salt])" returns="string" doc="Encrypt a string" ilk="function" src="crypt.c"/>
      <scope name="convert_cyr_string" signature="convert_cyr_string(string str, string from, string to)" returns="string" doc="Convert from one Cyrillic character set to another" ilk="function" src="cyr_convert.c"/>
      <scope name="time" signature="time(void)" returns="int" doc="Return current UNIX timestamp" ilk="function" src="datetime.c"/>
      <scope name="mktime" signature="mktime(int hour, int min, int sec, int mon, int day, int year)" returns="int" doc="Get UNIX timestamp for a date" ilk="function" src="datetime.c"/>
      <scope name="gmmktime" signature="gmmktime(int hour, int min, int sec, int mon, int day, int year)" returns="int" doc="Get UNIX timestamp for a GMT date" ilk="function" src="datetime.c"/>
      <scope name="date" signature="date(string format [, int timestamp])" returns="string" doc="Format a local time date" ilk="function" src="datetime.c"/>
      <scope name="gmdate" signature="gmdate(string format [, int timestamp])" returns="string" doc="Format a GMT UTC date time" ilk="function" src="datetime.c"/>
      <scope name="localtime" signature="localtime([int timestamp [, bool associative_array]])" returns="array" doc="Returns the results of the C system call localtime as&#10;an associative array if the associative array argument&#10;is set" ilk="function" src="datetime.c"/>
      <scope name="getdate" signature="getdate([int timestamp])" returns="array" doc="Get date time information" ilk="function" src="datetime.c"/>
      <scope name="checkdate" signature="checkdate(int month, int day, int year)" returns="bool" doc="Returns true if it is a valid date in gregorian&#10;calendar" ilk="function" src="datetime.c"/>
      <scope name="strftime" signature="strftime(string format [, int timestamp])" returns="string" doc="Format a local time date according to locale settings" ilk="function" src="datetime.c"/>
      <scope name="gmstrftime" signature="gmstrftime(string format [, int timestamp])" returns="string" doc="Format a GMT UCT time date according to locale settings" ilk="function" src="datetime.c"/>
      <scope name="strtotime" signature="strtotime(string time, int now)" returns="int" doc="Convert string representation of date and time to a&#10;timestamp" ilk="function" src="datetime.c"/>
      <scope name="opendir" signature="opendir(string path)" returns="mixed" doc="Open a directory and return a dir handle" ilk="function" src="dir.c"/>
      <scope name="closedir" signature="closedir([resource dir_handle])" returns="void" doc="Close directory connection identified by the dir handle" ilk="function" src="dir.c"/>
      <scope name="chroot" signature="chroot(string directory)" returns="bool" doc="Change root directory" ilk="function" src="dir.c"/>
      <scope name="chdir" signature="chdir(string directory)" returns="bool" doc="Change the current directory" ilk="function" src="dir.c"/>
      <scope name="getcwd" signature="getcwd(void)" returns="mixed" doc="Gets the current directory" ilk="function" src="dir.c"/>
      <scope name="rewinddir" signature="rewinddir([resource dir_handle])" returns="void" doc="Rewind dir handle back to the start" ilk="function" src="dir.c"/>
      <scope name="readdir" signature="readdir([resource dir_handle])" returns="string" doc="Read directory entry from dir handle" ilk="function" src="dir.c"/>
      <scope name="glob" signature="glob(string pattern [, int flags])" returns="array" doc="Find pathnames matching a pattern" ilk="function" src="dir.c"/>
      <scope name="dl" signature="dl(string extension_filename)" returns="int" doc="Load a PHP extension at runtime" ilk="function" src="dl.c"/>
      <scope name="gethostbyaddr" signature="gethostbyaddr(string ip_address)" returns="string" doc="Get the Internet host name corresponding to a given IP&#10;address" ilk="function" src="dns.c"/>
      <scope name="gethostbyname" signature="gethostbyname(string hostname)" returns="string" doc="Get the IP address corresponding to a given Internet&#10;host name" ilk="function" src="dns.c"/>
      <scope name="gethostbynamel" signature="gethostbynamel(string hostname)" returns="array" doc="Return a list of IP addresses that a given hostname&#10;resolves to" ilk="function" src="dns.c"/>
      <scope name="checkdnsrr" signature="checkdnsrr(string host [, string type])" returns="int" doc="Check DNS records corresponding to a given Internet&#10;host name or IP address" ilk="function" src="dns.c"/>
      <scope name="getmxrr" signature="getmxrr(string hostname, array mxhosts [, array weight])" returns="int" doc="Get MX records corresponding to a given Internet host&#10;name" ilk="function" src="dns.c"/>
      <scope name="exec" signature="exec(string command [, array output [, int return_value]])" returns="string" doc="Execute an external program" ilk="function" src="exec.c"/>
      <scope name="system" signature="system(string command [, int return_value])" returns="int" doc="Execute an external program and display output" ilk="function" src="exec.c"/>
      <scope name="passthru" signature="passthru(string command [, int return_value])" returns="void" doc="Execute an external program and display raw output" ilk="function" src="exec.c"/>
      <scope name="escapeshellcmd" signature="escapeshellcmd(string command)" returns="string" doc="Escape shell metacharacters" ilk="function" src="exec.c"/>
      <scope name="escapeshellarg" signature="escapeshellarg(string arg)" returns="string" doc="Quote and escape an argument for use in a shell command" ilk="function" src="exec.c"/>
      <scope name="shell_exec" signature="shell_exec(string cmd)" returns="string" doc="Execute command via shell and return complete output as&#10;string" ilk="function" src="exec.c"/>
      <scope name="proc_close" signature="proc_close(resource process)" returns="int" doc="close a process opened by proc open" ilk="function" src="exec.c"/>
      <scope name="proc_open" signature="proc_open(string command, array descriptorspec, array &amp;pipes)" returns="resource" doc="Run a process with more control over it's file&#10;descriptors" ilk="function" src="exec.c"/>
      <scope name="flock" signature="flock(resource fp, int operation [, int &amp;wouldblock])" returns="bool" doc="Portable file locking" ilk="function" src="file.c"/>
      <scope name="get_meta_tags" signature="get_meta_tags(string filename [, bool use_include_path])" returns="array" doc="Extracts all meta tag content attributes from a file&#10;and returns an array" ilk="function" src="file.c"/>
      <scope name="file_get_contents" signature="file_get_contents(string filename [, bool use_include_path])" returns="string" doc="Read the entire file into a string" ilk="function" src="file.c"/>
      <scope name="file" signature="file(string filename [, bool use_include_path])" returns="array" doc="Read entire file into an array" ilk="function" src="file.c"/>
      <scope name="tempnam" signature="tempnam(string dir, string prefix)" returns="string" doc="Create a unique filename in a directory" ilk="function" src="file.c"/>
      <scope name="tmpfile" signature="tmpfile(void)" returns="resource" doc="Create a temporary file that will be deleted&#10;automatically after use" ilk="function" src="file.c"/>
      <scope name="stream_get_meta_data" signature="stream_get_meta_data(resource fp)" returns="resource" doc="Retrieves header meta data from streams file pointers" ilk="function" src="file.c"/>
      <scope name="stream_select" signature="stream_select(array &amp;read_streams, array &amp;write_streams, array &amp;except_streams, int tv_sec[, int tv_usec])" returns="int" doc="Runs the select system call on the sets of streams with&#10;a timeout specified by tv sec and tv usec" ilk="function" src="file.c"/>
      <scope name="stream_context_get_options" signature="stream_context_get_options(resource context" returns="array" doc="Retrieve options for a stream wrapper context" ilk="function" src="file.c"/>
      <scope name="stream_context_set_option" signature="stream_context_set_option(resource context" returns="bool" doc="Set an option for a wrapper" ilk="function" src="file.c"/>
      <scope name="stream_context_set_params" signature="stream_context_set_params(resource context" returns="bool" doc="Set parameters for a file context" ilk="function" src="file.c"/>
      <scope name="stream_context_create" signature="stream_context_create([array options])" returns="resource" doc="Create a file context and optionally set parameters" ilk="function" src="file.c"/>
      <scope name="stream_filter_prepend" signature="stream_filter_prepend(resource stream, string filtername[, string filterparams])" returns="bool" doc="Prepend a filter to a stream" ilk="function" src="file.c"/>
      <scope name="stream_filter_append" signature="stream_filter_append(resource stream, string filtername[, string filterparams])" returns="bool" doc="Append a filter to a stream" ilk="function" src="file.c"/>
      <scope name="fopen" signature="fopen(string filename, string mode [, bool use_include_path [, resource context]])" returns="resource" doc="Open a file or a URL and return a file pointer" ilk="function" src="file.c"/>
      <scope name="fclose" signature="fclose(resource fp)" returns="bool" doc="Close an open file pointer" ilk="function" src="file.c"/>
      <scope name="popen" signature="popen(string command, string mode)" returns="resource" doc="Execute a command and open either a read or a write&#10;pipe to it" ilk="function" src="file.c"/>
      <scope name="pclose" signature="pclose(resource fp)" returns="int" doc="Close a file pointer opened by popen" ilk="function" src="file.c"/>
      <scope name="feof" signature="feof(resource fp)" returns="bool" doc="Test for end-of-file on a file pointer" ilk="function" src="file.c"/>
      <scope name="stream_set_blocking" signature="stream_set_blocking(resource socket, int mode)" returns="bool" doc="Set blocking non-blocking mode on a socket or stream" ilk="function" src="file.c"/>
      <scope name="set_socket_blocking" signature="set_socket_blocking(resource socket, int mode)" returns="bool" doc="Set blocking non-blocking mode on a socket" ilk="function" src="file.c"/>
      <scope name="stream_set_timeout" signature="stream_set_timeout(resource stream, int seconds, int microseconds)" returns="bool" doc="Set timeout on stream read to seconds microseonds" ilk="function" src="file.c"/>
      <scope name="fgets" signature="fgets(resource fp[, int length])" returns="string" doc="Get a line from file pointer" ilk="function" src="file.c"/>
      <scope name="fgetc" signature="fgetc(resource fp)" returns="string" doc="Get a character from file pointer" ilk="function" src="file.c"/>
      <scope name="fgetss" signature="fgetss(resource fp, int length [, string allowable_tags])" returns="string" doc="Get a line from file pointer and strip HTML tags" ilk="function" src="file.c"/>
      <scope name="fscanf" signature="fscanf(resource stream, string format [, string ...])" returns="mixed" doc="Implements a mostly ANSI compatible fscanf" ilk="function" src="file.c"/>
      <scope name="fwrite" signature="fwrite(resource fp, string str [, int length])" returns="int" doc="Binary-safe file write" ilk="function" src="file.c"/>
      <scope name="fflush" signature="fflush(resource fp)" returns="bool" doc="Flushes output" ilk="function" src="file.c"/>
      <scope name="stream_set_write_buffer" signature="stream_set_write_buffer(resource fp, int buffer)" returns="int" doc="Set file write buffer" ilk="function" src="file.c"/>
      <scope name="rewind" signature="rewind(resource fp)" returns="bool" doc="Rewind the position of a file pointer" ilk="function" src="file.c"/>
      <scope name="ftell" signature="ftell(resource fp)" returns="int" doc="Get file pointer's read write position" ilk="function" src="file.c"/>
      <scope name="fseek" signature="fseek(resource fp, int offset [, int whence])" returns="int" doc="Seek on a file pointer" ilk="function" src="file.c"/>
      <scope name="mkdir" signature="mkdir(string pathname[, int mode])" returns="bool" doc="Create a directory" ilk="function" src="file.c"/>
      <scope name="rmdir" signature="rmdir(string dirname)" returns="bool" doc="Remove a directory" ilk="function" src="file.c"/>
      <scope name="readfile" signature="readfile(string filename [, int use_include_path])" returns="int" doc="Output a file or a URL" ilk="function" src="file.c"/>
      <scope name="umask" signature="umask([int mask])" returns="int" doc="Return or change the umask" ilk="function" src="file.c"/>
      <scope name="fpassthru" signature="fpassthru(resource fp)" returns="int" doc="Output all remaining data from a file pointer" ilk="function" src="file.c"/>
      <scope name="rename" signature="rename(string old_name, string new_name)" returns="bool" doc="Rename a file" ilk="function" src="file.c"/>
      <scope name="unlink" signature="unlink(string filename)" returns="bool" doc="Delete a file" ilk="function" src="file.c"/>
      <scope name="ftruncate" signature="ftruncate(resource fp, int size)" returns="int" doc="Truncate file to 'size' length" ilk="function" src="file.c"/>
      <scope name="fstat" signature="fstat(resource fp)" returns="int" doc="Stat on a filehandle" ilk="function" src="file.c"/>
      <scope name="copy" signature="copy(string source_file, string destination_file)" returns="bool" doc="Copy a file" ilk="function" src="file.c"/>
      <scope name="fread" signature="fread(resource fp, int length)" returns="string" doc="Binary-safe file read" ilk="function" src="file.c"/>
      <scope name="fgetcsv" signature="fgetcsv(resource fp, int length [, string delimiter [, string enclosure]])" returns="array" doc="Get line from file pointer and parse for CSV fields" ilk="function" src="file.c"/>
      <scope name="realpath" signature="realpath(string path)" returns="string" doc="Return the resolved path" ilk="function" src="file.c"/>
      <scope name="fnmatch" signature="fnmatch(string pattern, string filename [, int flags])" returns="bool" doc="Match filename against pattern" ilk="function" src="file.c"/>
      <scope name="disk_total_space" signature="disk_total_space(string path)" returns="float" doc="Get total disk space for filesystem that path is on" ilk="function" src="filestat.c"/>
      <scope name="disk_free_space" signature="disk_free_space(string path)" returns="float" doc="Get free disk space for filesystem that path is on" ilk="function" src="filestat.c"/>
      <scope name="chgrp" signature="chgrp(string filename, mixed group)" returns="bool" doc="Change file group" ilk="function" src="filestat.c"/>
      <scope name="chmod" signature="chmod(string filename, int mode)" returns="bool" doc="Change file mode" ilk="function" src="filestat.c"/>
      <scope name="touch" signature="touch(string filename [, int time [, int atime]])" returns="bool" doc="Set modification time of file" ilk="function" src="filestat.c"/>
      <scope name="clearstatcache" signature="clearstatcache(void)" returns="void" doc="Clear file stat cache" ilk="function" src="filestat.c"/>
      <scope name="fileperms" signature="fileperms(string filename)" returns="int" doc="Get file permissions" ilk="function" src="filestat.c"/>
      <scope name="fileinode" signature="fileinode(string filename)" returns="int" doc="Get file inode" ilk="function" src="filestat.c"/>
      <scope name="filesize" signature="filesize(string filename)" returns="int" doc="Get file size" ilk="function" src="filestat.c"/>
      <scope name="fileowner" signature="fileowner(string filename)" returns="int" doc="Get file owner" ilk="function" src="filestat.c"/>
      <scope name="filegroup" signature="filegroup(string filename)" returns="int" doc="Get file group" ilk="function" src="filestat.c"/>
      <scope name="fileatime" signature="fileatime(string filename)" returns="int" doc="Get last access time of file" ilk="function" src="filestat.c"/>
      <scope name="filemtime" signature="filemtime(string filename)" returns="int" doc="Get last modification time of file" ilk="function" src="filestat.c"/>
      <scope name="filectime" signature="filectime(string filename)" returns="int" doc="Get inode modification time of file" ilk="function" src="filestat.c"/>
      <scope name="filetype" signature="filetype(string filename)" returns="string" doc="Get file type" ilk="function" src="filestat.c"/>
      <scope name="is_writable" signature="is_writable(string filename)" returns="bool" doc="Returns true if file can be written" ilk="function" src="filestat.c"/>
      <scope name="is_readable" signature="is_readable(string filename)" returns="bool" doc="Returns true if file can be read" ilk="function" src="filestat.c"/>
      <scope name="is_executable" signature="is_executable(string filename)" returns="bool" doc="Returns true if file is executable" ilk="function" src="filestat.c"/>
      <scope name="is_file" signature="is_file(string filename)" returns="bool" doc="Returns true if file is a regular file" ilk="function" src="filestat.c"/>
      <scope name="is_dir" signature="is_dir(string filename)" returns="bool" doc="Returns true if file is directory" ilk="function" src="filestat.c"/>
      <scope name="is_link" signature="is_link(string filename)" returns="bool" doc="Returns true if file is symbolic link" ilk="function" src="filestat.c"/>
      <scope name="file_exists" signature="file_exists(string filename)" returns="bool" doc="Returns true if filename exists" ilk="function" src="filestat.c"/>
      <scope name="lstat" signature="lstat(string filename)" returns="array" doc="Give information about a file or symbolic link" ilk="function" src="filestat.c"/>
      <scope name="stat" signature="stat(string filename)" returns="array" doc="Give information about a file" ilk="function" src="filestat.c"/>
      <scope name="sprintf" signature="sprintf(string format [, mixed arg1 [, mixed ...]])" returns="string" doc="Return a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="vsprintf" signature="vsprintf(string format, array args)" returns="string" doc="Return a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="printf" signature="printf(string format [, mixed arg1 [, mixed ...]])" returns="int" doc="Output a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="vprintf" signature="vprintf(string format, array args)" returns="int" doc="Output a formatted string" ilk="function" src="formatted_print.c"/>
      <scope name="fsockopen" signature="fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout [, resource context]]]])" returns="int" doc="Open Internet or Unix domain socket connection" ilk="function" src="fsock.c"/>
      <scope name="pfsockopen" signature="pfsockopen(string hostname, int port [, int errno [, string errstr [, float timeout [, resource context]]]])" returns="int" doc="Open persistent Internet or Unix domain socket&#10;connection" ilk="function" src="fsock.c"/>
      <scope name="ftok" signature="ftok(string pathname, string proj)" returns="int" doc="Convert a pathname and a project identifier to a System&#10;V IPC key" ilk="function" src="ftok.c"/>
      <scope name="header" signature="header(string header [, bool replace, [int http_response_code]])" returns="void" doc="Sends a raw HTTP header" ilk="function" src="head.c"/>
      <scope name="setcookie" signature="setcookie(string name [, string value [, int expires [, string path [, string domain [, bool secure]]]]])" returns="bool" doc="Send a cookie" ilk="function" src="head.c"/>
      <scope name="headers_sent" signature="headers_sent([string &amp;$file [, int &amp;$line]])" returns="bool" doc="Returns true if headers have already been sent false&#10;otherwise" ilk="function" src="head.c"/>
      <scope name="htmlspecialchars" signature="htmlspecialchars(string string [, int quote_style][, string charset])" returns="string" doc="Convert special characters to HTML entities" ilk="function" src="html.c"/>
      <scope name="html_entity_decode" signature="html_entity_decode(string string [, int quote_style][, string charset])" returns="string" doc="Convert all HTML entities to their applicable&#10;characters" ilk="function" src="html.c"/>
      <scope name="htmlentities" signature="htmlentities(string string [, int quote_style][, string charset])" returns="string" doc="Convert all applicable characters to HTML entities" ilk="function" src="html.c"/>
      <scope name="get_html_translation_table" signature="get_html_translation_table([int table [, int quote_style]])" returns="array" doc="Returns the internal translation table used by&#10;htmlspecialchars and htmlentities" ilk="function" src="html.c"/>
      <scope name="image_type_to_mime_type" signature="image_type_to_mime_type(int imagetype)" returns="string" doc="Get Mime-Type for image-type returned by getimagesize&#10;exif read data exif thumbnail exif imagetype" ilk="function" src="image.c"/>
      <scope name="getimagesize" signature="getimagesize(string imagefile [, array info])" returns="array" doc="Get the size of an image as -element array" ilk="function" src="image.c"/>
      <scope name="phpinfo" signature="phpinfo([int what])" returns="void" doc="Output a page of useful information about PHP and the&#10;current request" ilk="function" src="info.c"/>
      <scope name="phpversion" signature="phpversion([string extension])" returns="string" doc="Return the current PHP version" ilk="function" src="info.c"/>
      <scope name="phpcredits" signature="phpcredits([int flag])" returns="void" doc="Prints the list of people who've contributed to the PHP&#10;project" ilk="function" src="info.c"/>
      <scope name="php_logo_guid" signature="php_logo_guid(void)" returns="string" doc="Return the special ID used to request the PHP logo in&#10;phpinfo screens" ilk="function" src="info.c"/>
      <scope name="php_egg_logo_guid" signature="php_egg_logo_guid(void)" returns="string" doc="Return the special ID used to request the PHP logo in&#10;phpinfo screens" ilk="function" src="info.c"/>
      <scope name="zend_logo_guid" signature="zend_logo_guid(void)" returns="string" doc="Return the special ID used to request the Zend logo in&#10;phpinfo screens" ilk="function" src="info.c"/>
      <scope name="php_sapi_name" signature="php_sapi_name(void)" returns="string" doc="Return the current SAPI module name" ilk="function" src="info.c"/>
      <scope name="php_uname" signature="php_uname(void)" returns="string" doc="Return information about the system PHP was built on" ilk="function" src="info.c"/>
      <scope name="php_ini_scanned_files" signature="php_ini_scanned_files(void)" returns="string" doc="Return comma-separated string of ini files parsed from&#10;the additional ini dir" ilk="function" src="info.c"/>
      <scope name="iptcembed" signature="iptcembed(string iptcdata, string jpeg_file_name [, int spool])" returns="array" doc="Embed binary IPTC data into a JPEG image" ilk="function" src="iptc.c"/>
      <scope name="iptcparse" signature="iptcparse(string iptcdata)" returns="array" doc="Parse binary IPTC-data into associative array" ilk="function" src="iptc.c"/>
      <scope name="lcg_value" signature="lcg_value()" returns="float" doc="Returns a value from the combined linear congruential&#10;generator" ilk="function" src="lcg.c"/>
      <scope name="levenshtein" signature="levenshtein(string str1, string str2)" returns="int" doc="Calculate Levenshtein distance between two strings" ilk="function" src="levenshtein.c"/>
      <scope name="readlink" signature="readlink(string filename)" returns="string" doc="Return the target of a symbolic link" ilk="function" src="link.c"/>
      <scope name="linkinfo" signature="linkinfo(string filename)" returns="int" doc="Returns the st dev field of the UNIX C stat structure&#10;describing the link" ilk="function" src="link.c"/>
      <scope name="symlink" signature="symlink(string target, string link)" returns="int" doc="Create a symbolic link" ilk="function" src="link.c"/>
      <scope name="link" signature="link(string target, string link)" returns="int" doc="Create a hard link" ilk="function" src="link.c"/>
      <scope name="ezmlm_hash" signature="ezmlm_hash(string addr)" returns="int" doc="Calculate EZMLM list hash value" ilk="function" src="mail.c"/>
      <scope name="mail" signature="mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]])" returns="int" doc="Send an email message" ilk="function" src="mail.c"/>
      <scope name="abs" signature="abs(int number)" returns="int" doc="Return the absolute value of the number" ilk="function" src="math.c"/>
      <scope name="ceil" signature="ceil(float number)" returns="float" doc="Returns the next highest integer value of the number" ilk="function" src="math.c"/>
      <scope name="floor" signature="floor(float number)" returns="float" doc="Returns the next lowest integer value from the number" ilk="function" src="math.c"/>
      <scope name="round" signature="round(float number [, int precision])" returns="float" doc="Returns the number rounded to specified precision" ilk="function" src="math.c"/>
      <scope name="sin" signature="sin(float number)" returns="float" doc="Returns the sine of the number in radians" ilk="function" src="math.c"/>
      <scope name="cos" signature="cos(float number)" returns="float" doc="Returns the cosine of the number in radians" ilk="function" src="math.c"/>
      <scope name="tan" signature="tan(float number)" returns="float" doc="Returns the tangent of the number in radians" ilk="function" src="math.c"/>
      <scope name="asin" signature="asin(float number)" returns="float" doc="Returns the arc sine of the number in radians" ilk="function" src="math.c"/>
      <scope name="acos" signature="acos(float number)" returns="float" doc="Return the arc cosine of the number in radians" ilk="function" src="math.c"/>
      <scope name="atan" signature="atan(float number)" returns="float" doc="Returns the arc tangent of the number in radians" ilk="function" src="math.c"/>
      <scope name="atan2" signature="atan2(float y, float x)" returns="float" doc="Returns the arc tangent of y x with the resulting&#10;quadrant determined by the signs of y and x" ilk="function" src="math.c"/>
      <scope name="sinh" signature="sinh(float number)" returns="float" doc="Returns the hyperbolic sine of the number defined as&#10;exp number - exp -number" ilk="function" src="math.c"/>
      <scope name="cosh" signature="cosh(float number)" returns="float" doc="Returns the hyperbolic cosine of the number defined as&#10;exp number exp -number" ilk="function" src="math.c"/>
      <scope name="tanh" signature="tanh(float number)" returns="float" doc="Returns the hyperbolic tangent of the number defined as&#10;sinh number cosh number" ilk="function" src="math.c"/>
      <scope name="asinh" signature="asinh(float number)" returns="float" doc="Returns the inverse hyperbolic sine of the number i e&#10;the value whose hyperbolic sine is number" ilk="function" src="math.c"/>
      <scope name="acosh" signature="acosh(float number)" returns="float" doc="Returns the inverse hyperbolic cosine of the number i e&#10;the value whose hyperbolic cosine is number" ilk="function" src="math.c"/>
      <scope name="atanh" signature="atanh(float number)" returns="float" doc="Returns the inverse hyperbolic tangent of the number i&#10;e the value whose hyperbolic tangent is number" ilk="function" src="math.c"/>
      <scope name="pi" signature="pi(void)" returns="float" doc="Returns an approximation of pi" ilk="function" src="math.c"/>
      <scope name="is_finite" signature="is_finite(float val)" returns="bool" doc="Returns whether argument is finite" ilk="function" src="math.c"/>
      <scope name="is_infinite" signature="is_infinite(float val)" returns="bool" doc="Returns whether argument is infinite" ilk="function" src="math.c"/>
      <scope name="is_nan" signature="is_nan(float val)" returns="bool" doc="Returns whether argument is not a number" ilk="function" src="math.c"/>
      <scope name="pow" signature="pow(number base, number exponent)" returns="number" doc="Returns base raised to the power of exponent Returns&#10;integer result when possible" ilk="function" src="math.c"/>
      <scope name="exp" signature="exp(float number)" returns="float" doc="Returns e raised to the power of the number" ilk="function" src="math.c"/>
      <scope name="expm1" signature="expm1(float number)" returns="float" doc="Returns exp number - computed in a way that accurate&#10;even when the value of number is close to zero" ilk="function" src="math.c"/>
      <scope name="log1p" signature="log1p(float number)" returns="float" doc="Returns log number computed in a way that accurate even&#10;when the value of number is close to zero" ilk="function" src="math.c"/>
      <scope name="log" signature="log(float number, [float base])" returns="float" doc="Returns the natural logarithm of the number or the base&#10;log if base is specified" ilk="function" src="math.c"/>
      <scope name="log10" signature="log10(float number)" returns="float" doc="Returns the base- logarithm of the number" ilk="function" src="math.c"/>
      <scope name="sqrt" signature="sqrt(float number)" returns="float" doc="Returns the square root of the number" ilk="function" src="math.c"/>
      <scope name="hypot" signature="hypot(float num1, float num2)" returns="float" doc="Returns sqrt num num num num" ilk="function" src="math.c"/>
      <scope name="deg2rad" signature="deg2rad(float number)" returns="float" doc="Converts the number in degrees to the radian equivalent" ilk="function" src="math.c"/>
      <scope name="rad2deg" signature="rad2deg(float number)" returns="float" doc="Converts the radian number to the equivalent number in&#10;degrees" ilk="function" src="math.c"/>
      <scope name="bindec" signature="bindec(string binary_number)" returns="int" doc="Returns the decimal equivalent of the binary number" ilk="function" src="math.c"/>
      <scope name="hexdec" signature="hexdec(string hexadecimal_number)" returns="int" doc="Returns the decimal equivalent of the hexadecimal&#10;number" ilk="function" src="math.c"/>
      <scope name="octdec" signature="octdec(string octal_number)" returns="int" doc="Returns the decimal equivalent of an octal string" ilk="function" src="math.c"/>
      <scope name="decbin" signature="decbin(int decimal_number)" returns="string" doc="Returns a string containing a binary representation of&#10;the number" ilk="function" src="math.c"/>
      <scope name="decoct" signature="decoct(int decimal_number)" returns="string" doc="Returns a string containing an octal representation of&#10;the given number" ilk="function" src="math.c"/>
      <scope name="dechex" signature="dechex(int decimal_number)" returns="string" doc="Returns a string containing a hexadecimal&#10;representation of the given number" ilk="function" src="math.c"/>
      <scope name="base_convert" signature="base_convert(string number, int frombase, int tobase)" returns="string" doc="Converts a number in a string from any base to any base" ilk="function" src="math.c"/>
      <scope name="number_format" signature="number_format(float number [, int num_decimal_places [, string dec_seperator, string thousands_seperator]])" returns="string" doc="Formats a number with grouped thousands" ilk="function" src="math.c"/>
      <scope name="fmod" signature="fmod(float x, float y)" returns="float" doc="Returns the remainder of dividing x by y as a float" ilk="function" src="math.c"/>
      <scope name="md5" signature="md5(string str)" returns="string" doc="Calculate the md hash of a string" ilk="function" src="md5.c"/>
      <scope name="md5_file" signature="md5_file(string filename)" returns="string" doc="Calculate the md hash of given filename" ilk="function" src="md5.c"/>
      <scope name="metaphone" signature="metaphone(string text, int phones)" returns="string" doc="Break english phrases down into their phonemes" ilk="function" src="metaphone.c"/>
      <scope name="microtime" signature="microtime(void)" returns="string" doc="Returns a string containing the current time in seconds&#10;and microseconds" ilk="function" src="microtime.c"/>
      <scope name="gettimeofday" signature="gettimeofday(void)" returns="array" doc="Returns the current time as array" ilk="function" src="microtime.c"/>
      <scope name="getrusage" signature="getrusage([int who])" returns="array" doc="Returns an array of usage statistics" ilk="function" src="microtime.c"/>
      <scope name="pack" signature="pack(string format, mixed arg1 [, mixed arg2 [, mixed ...]])" returns="string" doc="Takes one or more arguments and packs them into a&#10;binary string according to the format argument" ilk="function" src="pack.c"/>
      <scope name="unpack" signature="unpack(string format, string input)" returns="array" doc="Unpack binary string into named array elements&#10;according to format argument" ilk="function" src="pack.c"/>
      <scope name="getmyuid" signature="getmyuid(void)" returns="int" doc="Get PHP script owner's UID" ilk="function" src="pageinfo.c"/>
      <scope name="getmygid" signature="getmygid(void)" returns="int" doc="Get PHP script owner's GID" ilk="function" src="pageinfo.c"/>
      <scope name="getmypid" signature="getmypid(void)" returns="int" doc="Get current process ID" ilk="function" src="pageinfo.c"/>
      <scope name="getmyinode" signature="getmyinode(void)" returns="int" doc="Get the inode of the current script being parsed" ilk="function" src="pageinfo.c"/>
      <scope name="getlastmod" signature="getlastmod(void)" returns="int" doc="Get time of last page modification" ilk="function" src="pageinfo.c"/>
      <scope name="quoted_printable_decode" signature="quoted_printable_decode(string str)" returns="string" doc="Convert a quoted-printable string to an bit string" ilk="function" src="quot_print.c"/>
      <scope name="srand" signature="srand([int seed])" returns="void" doc="Seeds random number generator" ilk="function" src="rand.c"/>
      <scope name="mt_srand" signature="mt_srand([int seed])" returns="void" doc="Seeds Mersenne Twister random number generator" ilk="function" src="rand.c"/>
      <scope name="rand" signature="rand([int min, int max])" returns="int" doc="Returns a random number" ilk="function" src="rand.c"/>
      <scope name="mt_rand" signature="mt_rand([int min, int max])" returns="int" doc="Returns a random number from Mersenne Twister" ilk="function" src="rand.c"/>
      <scope name="getrandmax" signature="getrandmax(void)" returns="int" doc="Returns the maximum value a random number can have" ilk="function" src="rand.c"/>
      <scope name="mt_getrandmax" signature="mt_getrandmax(void)" returns="int" doc="Returns the maximum value a random number from Mersenne&#10;Twister can have" ilk="function" src="rand.c"/>
      <scope name="ereg" signature="ereg(string pattern, string string [, array registers])" returns="int" doc="Regular expression match" ilk="function" src="reg.c"/>
      <scope name="eregi" signature="eregi(string pattern, string string [, array registers])" returns="int" doc="Case-insensitive regular expression match" ilk="function" src="reg.c"/>
      <scope name="ereg_replace" signature="ereg_replace(string pattern, string replacement, string string)" returns="string" doc="Replace regular expression" ilk="function" src="reg.c"/>
      <scope name="eregi_replace" signature="eregi_replace(string pattern, string replacement, string string)" returns="string" doc="Case insensitive replace regular expression" ilk="function" src="reg.c"/>
      <scope name="split" signature="split(string pattern, string string [, int limit])" returns="array" doc="Split string into array by regular expression" ilk="function" src="reg.c"/>
      <scope name="spliti" signature="spliti(string pattern, string string [, int limit])" returns="array" doc="Split string into array by regular expression&#10;case-insensitive" ilk="function" src="reg.c"/>
      <scope name="sql_regcase" signature="sql_regcase(string string)" returns="string" doc="Make regular expression for case insensitive match" ilk="function" src="reg.c"/>
      <scope name="sha1" signature="sha1(string str)" returns="string" doc="Calculate the sha hash of a string" ilk="function" src="sha1.c"/>
      <scope name="sha1_file" signature="sha1_file(string filename)" returns="string" doc="Calculate the sha hash of given filename" ilk="function" src="sha1.c"/>
      <scope name="soundex" signature="soundex(string str)" returns="string" doc="Calculate the soundex key of a string" ilk="function" src="soundex.c"/>
      <scope name="bin2hex" signature="bin2hex(string data)" returns="string" doc="Converts the binary representation of data to hex" ilk="function" src="string.c"/>
      <scope name="strspn" signature="strspn(string str, string mask [, start [, len]])" returns="int" doc="Finds length of initial segment consisting entirely of&#10;characters found in mask If start or and length is&#10;provided works" ilk="function" src="string.c"/>
      <scope name="strcspn" signature="strcspn(string str, string mask [, start [, len]])" returns="int" doc="Finds length of initial segment consisting entirely of&#10;characters not found in mask If start or and length is&#10;provide" ilk="function" src="string.c"/>
      <scope name="nl_langinfo" signature="nl_langinfo(int item)" returns="string" doc="Query language and locale information" ilk="function" src="string.c"/>
      <scope name="strcoll" signature="strcoll(string str1, string str2)" returns="int" doc="Compares two strings using the current locale" ilk="function" src="string.c"/>
      <scope name="trim" signature="trim(string str [, string character_mask])" returns="string" doc="Strips whitespace from the beginning and end of a&#10;string" ilk="function" src="string.c"/>
      <scope name="rtrim" signature="rtrim(string str [, string character_mask])" returns="string" doc="Removes trailing whitespace" ilk="function" src="string.c"/>
      <scope name="ltrim" signature="ltrim(string str [, string character_mask])" returns="string" doc="Strips whitespace from the beginning of a string" ilk="function" src="string.c"/>
      <scope name="wordwrap" signature="wordwrap(string str [, int width [, string break [, int cut]]])" returns="string" doc="Wraps buffer to selected number of characters using&#10;string break char" ilk="function" src="string.c"/>
      <scope name="explode" signature="explode(string separator, string str [, int limit])" returns="array" doc="Splits a string on string separator and return array of&#10;components" ilk="function" src="string.c"/>
      <scope name="join" signature="join([string glue,] array pieces)" doc="Joins array elements placing glue string between items&#10;and return one string&amp;#xa;join is an alias to implode" ilk="function" returns="string"/>
      <scope name="implode" signature="implode([string glue,] array pieces)" returns="string" doc="Joins array elements placing glue string between items&#10;and return one string" ilk="function" src="string.c"/>
      <scope name="strtok" signature="strtok([string str,] string token)" returns="string" doc="Tokenize a string" ilk="function" src="string.c"/>
      <scope name="strtoupper" signature="strtoupper(string str)" returns="string" doc="Makes a string uppercase" ilk="function" src="string.c"/>
      <scope name="strtolower" signature="strtolower(string str)" returns="string" doc="Makes a string lowercase" ilk="function" src="string.c"/>
      <scope name="basename" signature="basename(string path [, string suffix])" returns="string" doc="Returns the filename component of the path" ilk="function" src="string.c"/>
      <scope name="dirname" signature="dirname(string path)" returns="string" doc="Returns the directory name component of the path" ilk="function" src="string.c"/>
      <scope name="pathinfo" signature="pathinfo(string path)" returns="array" doc="Returns information about a certain string" ilk="function" src="string.c"/>
      <scope name="stristr" signature="stristr(string haystack, string needle)" returns="string" doc="Finds first occurrence of a string within another case&#10;insensitive" ilk="function" src="string.c"/>
      <scope name="strstr" signature="strstr(string haystack, string needle)" returns="string" doc="Finds first occurrence of a string within another" ilk="function" src="string.c"/>
      <scope name="strchr" signature="strchr(string haystack, string needle)" doc="Finds first occurrence of a string within another&amp;#xa;strchr is an alias to strstr" ilk="function" returns="string"/>
      <scope name="strpos" signature="strpos(string haystack, string needle [, int offset])" returns="int" doc="Finds position of first occurrence of a string within&#10;another" ilk="function" src="string.c"/>
      <scope name="strrpos" signature="strrpos(string haystack, string needle)" returns="int" doc="Finds position of last occurrence of a character in a&#10;string within another" ilk="function" src="string.c"/>
      <scope name="strrchr" signature="strrchr(string haystack, string needle)" returns="string" doc="Finds the last occurrence of a character in a string&#10;within another" ilk="function" src="string.c"/>
      <scope name="chunk_split" signature="chunk_split(string str [, int chunklen [, string ending]])" returns="string" doc="Returns split line" ilk="function" src="string.c"/>
      <scope name="substr" signature="substr(string str, int start [, int length])" returns="string" doc="Returns part of a string" ilk="function" src="string.c"/>
      <scope name="substr_replace" signature="substr_replace(string str, string repl, int start [, int length])" returns="string" doc="Replaces part of a string with another string" ilk="function" src="string.c"/>
      <scope name="quotemeta" signature="quotemeta(string str)" returns="string" doc="Quotes meta characters" ilk="function" src="string.c"/>
      <scope name="ord" signature="ord(string character)" returns="int" doc="Returns ASCII value of character" ilk="function" src="string.c"/>
      <scope name="chr" signature="chr(int ascii)" returns="string" doc="Converts ASCII code to a character" ilk="function" src="string.c"/>
      <scope name="ucfirst" signature="ucfirst(string str)" returns="string" doc="Makes a string's first character uppercase" ilk="function" src="string.c"/>
      <scope name="ucwords" signature="ucwords(string str)" returns="string" doc="Uppercase the first character of every word in a string" ilk="function" src="string.c"/>
      <scope name="strtr" signature="strtr(string str, string from, string to)" returns="string" doc="Translates characters in str using given translation&#10;tables" ilk="function" src="string.c"/>
      <scope name="strrev" signature="strrev(string str)" returns="string" doc="Reverse a string" ilk="function" src="string.c"/>
      <scope name="similar_text" signature="similar_text(string str1, string str2 [, float percent])" returns="int" doc="Calculates the similarity between two strings" ilk="function" src="string.c"/>
      <scope name="addcslashes" signature="addcslashes(string str, string charlist)" returns="string" doc="Escapes all chars mentioned in charlist with backslash&#10;It creates octal representations if asked to backslash&#10;characters with th bit" ilk="function" src="string.c"/>
      <scope name="addslashes" signature="addslashes(string str)" returns="string" doc="Escapes single quote double quotes and backslash&#10;characters in a string with backslashes" ilk="function" src="string.c"/>
      <scope name="stripcslashes" signature="stripcslashes(string str)" returns="string" doc="Strips backslashes from a string Uses C-style&#10;conventions" ilk="function" src="string.c"/>
      <scope name="stripslashes" signature="stripslashes(string str)" returns="string" doc="Strips backslashes from a string" ilk="function" src="string.c"/>
      <scope name="str_replace" signature="str_replace(mixed search, mixed replace, mixed subject)" returns="mixed" doc="Replaces all occurrences of search in haystack with&#10;replace" ilk="function" src="string.c"/>
      <scope name="hebrev" signature="hebrev(string str [, int max_chars_per_line])" returns="string" doc="Converts logical Hebrew text to visual text" ilk="function" src="string.c"/>
      <scope name="hebrevc" signature="hebrevc(string str [, int max_chars_per_line])" returns="string" doc="Converts logical Hebrew text to visual text with&#10;newline conversion" ilk="function" src="string.c"/>
      <scope name="nl2br" signature="nl2br(string str)" returns="string" doc="Converts newlines to HTML line breaks" ilk="function" src="string.c"/>
      <scope name="strip_tags" signature="strip_tags(string str [, string allowable_tags])" returns="string" doc="Strips HTML and PHP tags from a string" ilk="function" src="string.c"/>
      <scope name="setlocale" signature="setlocale(mixed category, string locale [, string ...])" returns="string" doc="Set locale information" ilk="function" src="string.c"/>
      <scope name="parse_str" signature="parse_str(string encoded_string [, array result])" returns="void" doc="Parses GET POST COOKIE data and sets global variables" ilk="function" src="string.c"/>
      <scope name="str_repeat" signature="str_repeat(string input, int mult)" returns="string" doc="Returns the input string repeat mult times" ilk="function" src="string.c"/>
      <scope name="count_chars" signature="count_chars(string input [, int mode])" returns="mixed" doc="Returns info about what characters are used in input" ilk="function" src="string.c"/>
      <scope name="strnatcmp" signature="strnatcmp(string s1, string s2)" returns="int" doc="Returns the result of string comparison using 'natural'&#10;algorithm" ilk="function" src="string.c"/>
      <scope name="localeconv" signature="localeconv(void)" returns="array" doc="Returns numeric formatting information based on the&#10;current locale" ilk="function" src="string.c"/>
      <scope name="strnatcasecmp" signature="strnatcasecmp(string s1, string s2)" returns="int" doc="Returns the result of case-insensitive string&#10;comparison using 'natural' algorithm" ilk="function" src="string.c"/>
      <scope name="substr_count" signature="substr_count(string haystack, string needle)" returns="int" doc="Returns the number of times a substring occurs in the&#10;string" ilk="function" src="string.c"/>
      <scope name="str_pad" signature="str_pad(string input, int pad_length [, string pad_string [, int pad_type]])" returns="string" doc="Returns input string padded on the left or right to&#10;specified length with pad string" ilk="function" src="string.c"/>
      <scope name="sscanf" signature="sscanf(string str, string format [, string ...])" returns="mixed" doc="Implements an ANSI C compatible sscanf" ilk="function" src="string.c"/>
      <scope name="str_rot13" signature="str_rot13(string str)" returns="string" doc="Perform the rot transform on a string" ilk="function" src="string.c"/>
      <scope name="str_shuffle" signature="str_shuffle(string str)" returns="void" doc="Shuffles string One permutation of all possible is&#10;created" ilk="function" src="string.c"/>
      <scope name="str_word_count" signature="str_word_count(string str, [int format])" returns="mixed" doc="Counts the number of words inside a string If format of&#10;is specified then the function will return an array" ilk="function" src="string.c"/>
      <scope name="money_format" signature="money_format(string format , float value)" returns="string" doc="Convert monetary value s to string" ilk="function" src="string.c"/>
      <scope name="define_syslog_variables" signature="define_syslog_variables(void)" returns="void" doc="Initializes all syslog-related variables" ilk="function" src="syslog.c"/>
      <scope name="openlog" signature="openlog(string ident, int option, int facility)" returns="bool" doc="Open connection to system logger" ilk="function" src="syslog.c"/>
      <scope name="closelog" signature="closelog(void)" returns="bool" doc="Close connection to system logger" ilk="function" src="syslog.c"/>
      <scope name="syslog" signature="syslog(int priority, string message)" returns="bool" doc="Generate a system log message" ilk="function" src="syslog.c"/>
      <scope name="gettype" signature="gettype(mixed var)" returns="string" doc="Returns the type of the variable" ilk="function" src="type.c"/>
      <scope name="settype" signature="settype(mixed var, string type)" returns="bool" doc="Set the type of the variable" ilk="function" src="type.c"/>
      <scope name="intval" signature="intval(mixed var [, int base])" returns="int" doc="Get the integer value of a variable using the optional&#10;base for the conversion" ilk="function" src="type.c"/>
      <scope name="floatval" signature="floatval(mixed var)" returns="float" doc="Get the float value of a variable" ilk="function" src="type.c"/>
      <scope name="strval" signature="strval(mixed var)" returns="string" doc="Get the string value of a variable" ilk="function" src="type.c"/>
      <scope name="is_null" signature="is_null(mixed var)" returns="bool" doc="Returns true if variable is null" ilk="function" src="type.c"/>
      <scope name="is_resource" signature="is_resource(mixed var)" returns="bool" doc="Returns true if variable is a resource" ilk="function" src="type.c"/>
      <scope name="is_bool" signature="is_bool(mixed var)" returns="bool" doc="Returns true if variable is a boolean" ilk="function" src="type.c"/>
      <scope name="is_long" signature="is_long(mixed var)" returns="bool" doc="Returns true if variable is a long integer" ilk="function" src="type.c"/>
      <scope name="is_float" signature="is_float(mixed var)" returns="bool" doc="Returns true if variable is float point" ilk="function" src="type.c"/>
      <scope name="is_string" signature="is_string(mixed var)" returns="bool" doc="Returns true if variable is a string" ilk="function" src="type.c"/>
      <scope name="is_array" signature="is_array(mixed var)" returns="bool" doc="Returns true if variable is an array" ilk="function" src="type.c"/>
      <scope name="is_object" signature="is_object(mixed var)" returns="bool" doc="Returns true if variable is an object" ilk="function" src="type.c"/>
      <scope name="is_numeric" signature="is_numeric(mixed value)" returns="bool" doc="Returns true if value is a number or a numeric string" ilk="function" src="type.c"/>
      <scope name="is_scalar" signature="is_scalar(mixed value)" returns="bool" doc="Returns true if value is a scalar" ilk="function" src="type.c"/>
      <scope name="is_callable" signature="is_callable(mixed var [, bool syntax_only [, string callable_name]])" returns="bool" doc="Returns true if var is callable" ilk="function" src="type.c"/>
      <scope name="uniqid" signature="uniqid(string prefix [, bool more_entropy])" returns="string" doc="Generates a unique ID" ilk="function" src="uniqid.c"/>
      <scope name="parse_url" signature="parse_url(string url)" returns="array" doc="Parse a URL and return its components" ilk="function" src="url.c"/>
      <scope name="urlencode" signature="urlencode(string str)" returns="string" doc="URL-encodes string" ilk="function" src="url.c"/>
      <scope name="urldecode" signature="urldecode(string str)" returns="string" doc="Decodes URL-encoded string" ilk="function" src="url.c"/>
      <scope name="rawurlencode" signature="rawurlencode(string str)" returns="string" doc="URL-encodes string" ilk="function" src="url.c"/>
      <scope name="rawurldecode" signature="rawurldecode(string str)" returns="string" doc="Decodes URL-encodes string" ilk="function" src="url.c"/>
      <scope name="var_dump" signature="var_dump(mixed var)" returns="void" doc="Dumps a string representation of variable to output" ilk="function" src="var.c"/>
      <scope name="debug_zval_dump" signature="debug_zval_dump(mixed var)" returns="void" doc="Dumps a string representation of an internal zend value&#10;to output" ilk="function" src="var.c"/>
      <scope name="var_export" signature="var_export(mixed var [, bool return])" returns="mixed" doc="Outputs or returns a string representation of a&#10;variable" ilk="function" src="var.c"/>
      <scope name="serialize" signature="serialize(mixed variable)" returns="string" doc="Returns a string representation of variable which can&#10;later be unserialized" ilk="function" src="var.c"/>
      <scope name="unserialize" signature="unserialize(string variable_representation)" returns="mixed" doc="Takes a string representation of variable and recreates&#10;it" ilk="function" src="var.c"/>
      <scope name="memory_get_usage" signature="memory_get_usage()" returns="int" doc="Returns the allocated by PHP memory" ilk="function" src="var.c"/>
      <scope name="version_compare" signature="version_compare(string ver1, string ver2 [, string oper])" returns="int" doc="Compares two PHP-standardized version number strings" ilk="function" src="versioning.c"/>
      <scope name="swf_openfile" signature="swf_openfile(string name, float xsize, float ysize, float framerate, float r, float g, float b)" returns="void" doc="Create a Shockwave Flash file given by name with width&#10;xsize and height ysize at a frame rate of framerate" ilk="function" src="swf.c"/>
      <scope name="swf_closefile" signature="swf_closefile(void)" returns="void" doc="Close a Shockwave flash file that was opened with swf&#10;openfile" ilk="function" src="swf.c"/>
      <scope name="swf_labelframe" signature="swf_labelframe(string name)" returns="void" doc="Adds string name to the current frame" ilk="function" src="swf.c"/>
      <scope name="swf_showframe" signature="swf_showframe(void)" returns="void" doc="Finish the current frame" ilk="function" src="swf.c"/>
      <scope name="swf_setframe" signature="swf_setframe(int frame_number)" returns="void" doc="Set the current frame number to the number given by&#10;frame number" ilk="function" src="swf.c"/>
      <scope name="swf_getframe" signature="swf_getframe(void)" returns="int" doc="Returns the current frame" ilk="function" src="swf.c"/>
      <scope name="swf_mulcolor" signature="swf_mulcolor(float r, float g, float b, float a)" returns="void" doc="Sets the global multiply color to the rgba value&#10;specified" ilk="function" src="swf.c"/>
      <scope name="swf_addcolor" signature="swf_addcolor(float r, float g, float b, float a)" returns="void" doc="Set the global add color to the rgba value specified" ilk="function" src="swf.c"/>
      <scope name="swf_placeobject" signature="swf_placeobject(int objid, int depth)" returns="void" doc="Places the object objid in the current frame at depth&#10;depth" ilk="function" src="swf.c"/>
      <scope name="swf_modifyobject" signature="swf_modifyobject(int depth, int how)" returns="void" doc="Updates the position and or color of the object" ilk="function" src="swf.c"/>
      <scope name="swf_removeobject" signature="swf_removeobject(int depth)" returns="void" doc="Removes the object at the specified depth" ilk="function" src="swf.c"/>
      <scope name="swf_nextid" signature="swf_nextid(void)" returns="int" doc="Returns a free objid" ilk="function" src="swf.c"/>
      <scope name="swf_startdoaction" signature="swf_startdoaction(void)" returns="void" doc="Starts the description of an action list for the&#10;current frame" ilk="function" src="swf.c"/>
      <scope name="swf_enddoaction" signature="swf_enddoaction(void)" returns="void" doc="Ends the list of actions to perform for the current&#10;frame" ilk="function" src="swf.c"/>
      <scope name="swf_actiongotoframe" signature="swf_actiongotoframe(int frame_number)" returns="void" doc="Causes the Flash movie to display the specified frame&#10;frame number and then stop" ilk="function" src="swf.c"/>
      <scope name="swf_actiongeturl" signature="swf_actiongeturl(string url, string target)" returns="void" doc="Gets the specified url" ilk="function" src="swf.c"/>
      <scope name="swf_actionnextframe" signature="swf_actionnextframe(void)" returns="void" doc="Goes foward one frame" ilk="function" src="swf.c"/>
      <scope name="swf_actionprevframe" signature="swf_actionprevframe(void)" returns="void" doc="Goes backward one frame" ilk="function" src="swf.c"/>
      <scope name="swf_actionplay" signature="swf_actionplay(void)" returns="void" doc="Starts playing the Flash movie from the current frame" ilk="function" src="swf.c"/>
      <scope name="swf_actionstop" signature="swf_actionstop(void)" returns="void" doc="Stops playing the Flash movie at the current frame" ilk="function" src="swf.c"/>
      <scope name="swf_actiontogglequality" signature="swf_actiontogglequality(void)" returns="void" doc="Toggles between high and low quality" ilk="function" src="swf.c"/>
      <scope name="swf_actionwaitforframe" signature="swf_actionwaitforframe(int frame, int skipcount)" returns="void" doc="If the specified frame has not been loaded skip the&#10;specified number of actions in the action list" ilk="function" src="swf.c"/>
      <scope name="swf_actionsettarget" signature="swf_actionsettarget(string target)" returns="void" doc="Sets the context for actions" ilk="function" src="swf.c"/>
      <scope name="swf_actiongotolabel" signature="swf_actiongotolabel(string label)" returns="void" doc="Causes the flash movie to display the frame with the&#10;given label and then stop" ilk="function" src="swf.c"/>
      <scope name="swf_defineline" signature="swf_defineline(int objid, float x1, float y1, float x2, float y2, float width)" returns="void" doc="Create a line with object id objid starting from x y&#10;and going to x y with width width" ilk="function" src="swf.c"/>
      <scope name="swf_definerect" signature="swf_definerect(int objid, float x1, float y1, float x2, float y2, float width)" returns="void" doc="Create a rectangle with object id objid the upper&#10;lefthand coordinate is given by x y the bottom right&#10;coordinate" ilk="function" src="swf.c"/>
      <scope name="swf_definepoly" signature="swf_definepoly(int obj_id, array coords, int npoints, float width)" returns="void" doc="Define a Polygon from an array of x y coordinates&#10;coords" ilk="function" src="swf.c"/>
      <scope name="swf_startshape" signature="swf_startshape(int objid)" returns="void" doc="Initialize a new shape with object id objid" ilk="function" src="swf.c"/>
      <scope name="swf_shapelinesolid" signature="swf_shapelinesolid(float r, float g, float b, float a, float width)" returns="void" doc="Create a line with color defined by rgba and a width of&#10;width" ilk="function" src="swf.c"/>
      <scope name="swf_shapefilloff" signature="swf_shapefilloff(void)" returns="void" doc="Turns off filling" ilk="function" src="swf.c"/>
      <scope name="swf_shapefillsolid" signature="swf_shapefillsolid(float r, float g, float b, float a)" returns="void" doc="Sets the current fill style to a solid fill with the&#10;specified rgba color" ilk="function" src="swf.c"/>
      <scope name="swf_shapefillbitmapclip" signature="swf_shapefillbitmapclip(int bitmapid)" returns="void" doc="Sets the current fill mode to clipped bitmap fill&#10;Pixels from the previously defined bitmapid will be&#10;used to fill" ilk="function" src="swf.c"/>
      <scope name="swf_shapefillbitmaptile" signature="swf_shapefillbitmaptile(int bitmapid)" returns="void" doc="Sets the current fill mode to tiled bitmap fill Pixels&#10;from the previously defined bitmapid will be used to&#10;fill" ilk="function" src="swf.c"/>
      <scope name="swf_shapemoveto" signature="swf_shapemoveto(float x, float y)" returns="void" doc="swf shapemoveto moves the current position to the given&#10;x y" ilk="function" src="swf.c"/>
      <scope name="swf_shapelineto" signature="swf_shapelineto(float x, float y)" returns="void" doc="Draws a line from the current position to x y the&#10;current position is then set to x y" ilk="function" src="swf.c"/>
      <scope name="swf_shapecurveto" signature="swf_shapecurveto(float x1, float y1, float x2, float y2)" returns="void" doc="Draws a quadratic bezier curve starting at the current&#10;position using x y as an off curve control point and" ilk="function" src="swf.c"/>
      <scope name="swf_shapecurveto3" signature="swf_shapecurveto3(float x1, float y1, float x2, float y2, float x3, float y3)" returns="void" doc="Draws a cubic bezier curve starting at the current&#10;position using x y and x y as off curve control" ilk="function" src="swf.c"/>
      <scope name="swf_shapearc" signature="swf_shapearc(float x, float y, float r, float ang1, float ang2)" returns="void" doc="Draws a circular arc from ang to ang The center of the&#10;circle is given by x and y r" ilk="function" src="swf.c"/>
      <scope name="swf_endshape" signature="swf_endshape(void)" returns="void" doc="Completes the definition of the current shape" ilk="function" src="swf.c"/>
      <scope name="swf_definefont" signature="swf_definefont(int fontid, string name)" returns="void" doc="Defines a font name specifies the PostScript name of&#10;the font to use This font also becomes the current font" ilk="function" src="swf.c"/>
      <scope name="swf_setfont" signature="swf_setfont(int fontid)" returns="void" doc="Sets fontid to the current font" ilk="function" src="swf.c"/>
      <scope name="swf_fontsize" signature="swf_fontsize(float height)" returns="void" doc="Sets the current font's height to the value specified&#10;by height" ilk="function" src="swf.c"/>
      <scope name="swf_fontslant" signature="swf_fontslant(float slant)" returns="void" doc="Set the current font slant to the angle indicated by&#10;slant" ilk="function" src="swf.c"/>
      <scope name="swf_fonttracking" signature="swf_fonttracking(track)" returns="void" doc="Sets the current font tracking to the specified value&#10;track" ilk="function" src="swf.c"/>
      <scope name="swf_getfontinfo" signature="swf_getfontinfo(void)" returns="array" doc="Get information about the current font" ilk="function" src="swf.c"/>
      <scope name="swf_definetext" signature="swf_definetext(int objid, string str, int docCenter)" returns="void" doc="defines a text string using the current font current&#10;fontsize and current font slant If docCenter is the&#10;word is" ilk="function" src="swf.c"/>
      <scope name="swf_textwidth" signature="swf_textwidth(string str)" returns="void" doc="Calculates the width of a string str using the current&#10;fontsize current font" ilk="function" src="swf.c"/>
      <scope name="swf_definebitmap" signature="swf_definebitmap(int objid, string imgname)" returns="void" doc="Defines a bitmap given the name of a gif rgb jpeg or fi&#10;image The image will be converted into" ilk="function" src="swf.c"/>
      <scope name="swf_getbitmapinfo" signature="swf_getbitmapinfo(int bitmapid)" returns="array" doc="Returns an array of information about a bitmap&#10;specified by bitmapid" ilk="function" src="swf.c"/>
      <scope name="swf_startsymbol" signature="swf_startsymbol(int objid)" returns="void" doc="Create a new symbol with object id objid" ilk="function" src="swf.c"/>
      <scope name="swf_endsymbol" signature="swf_endsymbol(void)" returns="void" doc="End the current symbol" ilk="function" src="swf.c"/>
      <scope name="swf_startbutton" signature="swf_startbutton(int objid, int type)" returns="void" doc="Start a button with an object id objid and a type of&#10;either TYPE MENUBUTTON or TYPE PUSHBUTTON" ilk="function" src="swf.c"/>
      <scope name="swf_addbuttonrecord" signature="swf_addbuttonrecord(int state, int objid, int depth)" returns="void" doc="Controls the location appearance and active area of the&#10;current button" ilk="function" src="swf.c"/>
      <scope name="swf_oncondition" signature="swf_oncondition(int transitions)" returns="void" doc="Describes a transition used to trigger an action list" ilk="function" src="swf.c"/>
      <scope name="swf_endbutton" signature="swf_endbutton(void)" returns="void" doc="Complete the definition of the current button" ilk="function" src="swf.c"/>
      <scope name="swf_viewport" signature="swf_viewport(float xmin, float xmax, float ymin, float ymax)" returns="void" doc="Selects an area on the drawing surface for future&#10;drawing" ilk="function" src="swf.c"/>
      <scope name="swf_ortho2" signature="swf_ortho2(float xmin, float xmax, float ymin, float ymax)" returns="void" doc="Defines a -D orthographic mapping of user coordinates&#10;onto the current viewport" ilk="function" src="swf.c"/>
      <scope name="swf_ortho" signature="swf_ortho(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)" returns="void" doc="Defines an orthographic mapping of user coordinates&#10;onto the current viewport" ilk="function" src="swf.c"/>
      <scope name="swf_polarview" signature="swf_polarview(float dist, float azimuth, float incidence, float twist)" returns="void" doc="Defines he viewer's position in polar coordinates" ilk="function" src="swf.c"/>
      <scope name="swf_perspective" signature="swf_perspective(float fovy, float aspect, float near, float far)" returns="void" doc="Define a perspective projection transformation" ilk="function" src="swf.c"/>
      <scope name="swf_lookat" signature="swf_lookat(float vx, float vy, float vz, float px, float py, float pz, float twist)" returns="void" doc="Defines a viewing transformation by giving the view&#10;position vx vy vz and the coordinates of a reference&#10;point in" ilk="function" src="swf.c"/>
      <scope name="swf_pushmatrix" signature="swf_pushmatrix(void)" returns="void" doc="Push the current transformation matrix onto the stack" ilk="function" src="swf.c"/>
      <scope name="swf_popmatrix" signature="swf_popmatrix(void)" returns="void" doc="Restore a previous transformation matrix" ilk="function" src="swf.c"/>
      <scope name="swf_scale" signature="swf_scale(float x, float y, float z)" returns="void" doc="Scale the current transformation" ilk="function" src="swf.c"/>
      <scope name="swf_translate" signature="swf_translate(float x, float y, float z)" returns="void" doc="Translate the current transformation" ilk="function" src="swf.c"/>
      <scope name="swf_rotate" signature="swf_rotate(float angle, string axis)" returns="void" doc="Rotate the current transformation by the given angle&#10;about x y or z axis The axis may be 'x' 'y'" ilk="function" src="swf.c"/>
      <scope name="swf_posround" signature="swf_posround(int doit)" returns="void" doc="This enables or disables rounding of the translation&#10;when objects are places or moved" ilk="function" src="swf.c"/>
      <scope name="sybase_connect" signature="sybase_connect([string host [, string user [, string password [, string charset [, string appname]]]]])" returns="int" doc="Open Sybase server connection" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_pconnect" signature="sybase_pconnect([string host [, string user [, string password [, string charset [, string appname]]]]])" returns="int" doc="Open persistent Sybase connection" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_close" signature="sybase_close([int link_id])" returns="bool" doc="Close Sybase connection" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_select_db" signature="sybase_select_db(string database [, int link_id])" returns="bool" doc="Select Sybase database" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_query" signature="sybase_query(string query [, int link_id])" returns="int" doc="Send Sybase query" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_free_result" signature="sybase_free_result(int result)" returns="bool" doc="Free result memory" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_get_last_message" signature="sybase_get_last_message(void)" returns="string" doc="Returns the last message from server over min message&#10;severity" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_num_rows" signature="sybase_num_rows(int result)" returns="int" doc="Get number of rows in result" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_num_fields" signature="sybase_num_fields(int result)" returns="int" doc="Get number of fields in result" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_row" signature="sybase_fetch_row(int result)" returns="array" doc="Get row as enumerated array" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_object" signature="sybase_fetch_object(int result [, mixed object])" returns="object" doc="Fetch row as object" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_array" signature="sybase_fetch_array(int result)" returns="array" doc="Fetch row as array" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_data_seek" signature="sybase_data_seek(int result, int offset)" returns="bool" doc="Move internal row pointer" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_field" signature="sybase_fetch_field(int result [, int offset])" returns="object" doc="Get field information" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_field_seek" signature="sybase_field_seek(int result, int offset)" returns="bool" doc="Set field offset" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_result" signature="sybase_result(int result, int row, mixed field)" returns="string" doc="Get result data" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_affected_rows" signature="sybase_affected_rows([int link_id])" returns="int" doc="Get number of affected rows in last query" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_min_error_severity" signature="sybase_min_error_severity(int severity)" returns="void" doc="Sets the minimum error severity" ilk="function" src="php_sybase_db.c"/>
      <scope name="sybase_min_message_severity" signature="sybase_min_message_severity(int severity)" returns="void" doc="Sets the minimum message severity" ilk="function" src="php_sybase_db.c"/>
      <scope name="sybase_unbuffered_query" signature="sybase_unbuffered_query(string query [, int link_id])" returns="int" doc="Send Sybase query" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_fetch_assoc" signature="sybase_fetch_assoc(int result)" returns="array" doc="Fetch row as array without numberic indices" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_min_client_severity" signature="sybase_min_client_severity(int severity)" returns="void" doc="Sets minimum client severity" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_min_server_severity" signature="sybase_min_server_severity(int severity)" returns="void" doc="Sets minimum server severity" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_deadlock_retry_count" signature="sybase_deadlock_retry_count(int retry_count)" returns="void" doc="Sets deadlock retry count" ilk="function" src="php_sybase_ct.c"/>
      <scope name="sybase_set_message_handler" signature="sybase_set_message_handler(mixed error_func [, resource connection])" returns="bool" doc="Set the error handler to be called when a server&#10;message is raised If error func is NULL the handler" ilk="function" src="php_sybase_ct.c"/>
      <scope name="msg_set_queue" signature="msg_set_queue(resource queue, array data)" returns="array" doc="Set information for a message queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_stat_queue" signature="msg_stat_queue(resource queue)" returns="array" doc="Returns information about a message queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_get_queue" signature="msg_get_queue(long key [, long perms])" returns="resource" doc="Attach to a message queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_remove_queue" signature="msg_remove_queue(resource queue)" returns="bool" doc="Destroy the queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_receive" signature="msg_receive(resource queue, long desiredmsgtype, long &amp;msgtype, long maxsize, mixed message [[, bool unserialize=true][, long flags=0[, long errorcode]]])" returns="mixed" doc="Send a message of type msgtype must be to a message&#10;queue" ilk="function" src="sysvmsg.c"/>
      <scope name="msg_send" signature="msg_send(resource queue, long msgtype, mixed message [[, bool serialize=true][, bool blocking=true][, long errorcode]])" returns="bool" doc="Send a message of type msgtype must be to a message&#10;queue" ilk="function" src="sysvmsg.c"/>
      <scope name="sem_get" signature="sem_get(int key [, int max_acquire [, int perm [, int auto_release]])" returns="int" doc="Return an id for the semaphore with the given key and&#10;allow max acquire default processes to acquire it&#10;simultaneously" ilk="function" src="sysvsem.c"/>
      <scope name="sem_acquire" signature="sem_acquire(int id)" returns="int" doc="Acquires the semaphore with the given id blocking if&#10;necessary" ilk="function" src="sysvsem.c"/>
      <scope name="sem_release" signature="sem_release(int id)" returns="int" doc="Releases the semaphore with the given id" ilk="function" src="sysvsem.c"/>
      <scope name="sem_remove" signature="sem_remove(int id)" returns="int" doc="Removes semaphore from Unix systems" ilk="function" src="sysvsem.c"/>
      <scope name="shm_attach" signature="shm_attach(int key [, int memsize [, int perm]])" returns="int" doc="Creates or open a shared memory segment" ilk="function" src="sysvshm.c"/>
      <scope name="shm_detach" signature="shm_detach(int shm_identifier)" returns="int" doc="Disconnects from shared memory segment" ilk="function" src="sysvshm.c"/>
      <scope name="shm_remove" signature="shm_remove(int shm_identifier)" returns="int" doc="Removes shared memory from Unix systems" ilk="function" src="sysvshm.c"/>
      <scope name="shm_put_var" signature="shm_put_var(int shm_identifier, int variable_key, mixed variable)" returns="int" doc="Inserts or updates a variable in shared memory" ilk="function" src="sysvshm.c"/>
      <scope name="shm_get_var" signature="shm_get_var(int id, int variable_key)" returns="mixed" doc="Returns a variable from shared memory" ilk="function" src="sysvshm.c"/>
      <scope name="shm_remove_var" signature="shm_remove_var(int id, int variable_key)" returns="int" doc="Removes variable from shared memory" ilk="function" src="sysvshm.c"/>
      <scope name="token_get_all" signature="token_get_all(string source)" returns="array" doc="" ilk="function" src="tokenizer.c"/>
      <scope name="token_name" signature="token_name(int type)" returns="string" doc="" ilk="function" src="tokenizer.c"/>
      <scope name="wddx_serialize_value" signature="wddx_serialize_value(mixed var [, string comment])" returns="string" doc="Creates a new packet and serializes the given value" ilk="function" src="wddx.c"/>
      <scope name="wddx_serialize_vars" signature="wddx_serialize_vars(mixed var_name [, mixed ...])" returns="string" doc="Creates a new packet and serializes given variables&#10;into a struct" ilk="function" src="wddx.c"/>
      <scope name="wddx_packet_start" signature="wddx_packet_start([string comment])" returns="int" doc="Starts a WDDX packet with optional comment and returns&#10;the packet id" ilk="function" src="wddx.c"/>
      <scope name="wddx_packet_end" signature="wddx_packet_end(int packet_id)" returns="string" doc="Ends specified WDDX packet and returns the string&#10;containing the packet" ilk="function" src="wddx.c"/>
      <scope name="wddx_add_vars" signature="wddx_add_vars(int packet_id,  mixed var_names [, mixed ...])" returns="int" doc="Serializes given variables and adds them to packet&#10;given by packet id" ilk="function" src="wddx.c"/>
      <scope name="wddx_deserialize" signature="wddx_deserialize(string packet)" returns="mixed" doc="Deserializes given packet and returns a PHP value" ilk="function" src="wddx.c"/>
      <scope name="xml_parser_create" signature="xml_parser_create([string encoding])" returns="resource" doc="Create an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_create_ns" signature="xml_parser_create_ns([string encoding [, string sep]])" returns="resource" doc="Create an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_set_object" signature="xml_set_object(resource parser, object &amp;obj)" returns="int" doc="Set up object which should be used for callbacks" ilk="function" src="xml.c"/>
      <scope name="xml_set_element_handler" signature="xml_set_element_handler(resource parser, string shdl, string ehdl)" returns="int" doc="Set up start and end element handlers" ilk="function" src="xml.c"/>
      <scope name="xml_set_character_data_handler" signature="xml_set_character_data_handler(resource parser, string hdl)" returns="int" doc="Set up character data handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_processing_instruction_handler" signature="xml_set_processing_instruction_handler(resource parser, string hdl)" returns="int" doc="Set up processing instruction PI handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_default_handler" signature="xml_set_default_handler(resource parser, string hdl)" returns="int" doc="Set up default handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_unparsed_entity_decl_handler" signature="xml_set_unparsed_entity_decl_handler(resource parser, string hdl)" returns="int" doc="Set up unparsed entity declaration handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_notation_decl_handler" signature="xml_set_notation_decl_handler(resource parser, string hdl)" returns="int" doc="Set up notation declaration handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_external_entity_ref_handler" signature="xml_set_external_entity_ref_handler(resource parser, string hdl)" returns="int" doc="Set up external entity reference handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_start_namespace_decl_handler" signature="xml_set_start_namespace_decl_handler(resource parser, string hdl)" returns="int" doc="Set up character data handler" ilk="function" src="xml.c"/>
      <scope name="xml_set_end_namespace_decl_handler" signature="xml_set_end_namespace_decl_handler(resource parser, string hdl)" returns="int" doc="Set up character data handler" ilk="function" src="xml.c"/>
      <scope name="xml_parse" signature="xml_parse(resource parser, string data [, int isFinal])" returns="int" doc="Start parsing an XML document" ilk="function" src="xml.c"/>
      <scope name="xml_parse_into_struct" signature="xml_parse_into_struct(resource parser, string data, array &amp;struct, array &amp;index)" returns="int" doc="Parsing a XML document" ilk="function" src="xml.c"/>
      <scope name="xml_get_error_code" signature="xml_get_error_code(resource parser)" returns="int" doc="Get XML parser error code" ilk="function" src="xml.c"/>
      <scope name="xml_error_string" signature="xml_error_string(int code)" returns="string" doc="Get XML parser error string" ilk="function" src="xml.c"/>
      <scope name="xml_get_current_line_number" signature="xml_get_current_line_number(resource parser)" returns="int" doc="Get current line number for an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_get_current_column_number" signature="xml_get_current_column_number(resource parser)" returns="int" doc="Get current column number for an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_get_current_byte_index" signature="xml_get_current_byte_index(resource parser)" returns="int" doc="Get current byte index for an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_free" signature="xml_parser_free(resource parser)" returns="int" doc="Free an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_set_option" signature="xml_parser_set_option(resource parser, int option, mixed value)" returns="int" doc="Set options in an XML parser" ilk="function" src="xml.c"/>
      <scope name="xml_parser_get_option" signature="xml_parser_get_option(resource parser, int option)" returns="int" doc="Get options from an XML parser" ilk="function" src="xml.c"/>
      <scope name="utf8_encode" signature="utf8_encode(string data)" returns="string" doc="Encodes an ISO- - string to UTF-" ilk="function" src="xml.c"/>
      <scope name="utf8_decode" signature="utf8_decode(string data)" returns="string" doc="Converts a UTF- encoded string to ISO- -" ilk="function" src="xml.c"/>
      <scope name="xmlrpc_encode_request" signature="xmlrpc_encode_request(string method, mixed params)" returns="string" doc="Generates XML for a method request" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_encode" signature="xmlrpc_encode(mixed value)" returns="string" doc="Generates XML for a PHP value" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_decode_request" signature="xmlrpc_decode_request(string xml, string&amp; method [, string encoding])" returns="array" doc="Decodes XML into native PHP types" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_decode" signature="xmlrpc_decode(string xml [, string encoding])" returns="array" doc="Decodes XML into native PHP types" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_create" signature="xmlrpc_server_create(void)" returns="handle" doc="Creates an xmlrpc server" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_destroy" signature="xmlrpc_server_destroy(handle server)" returns="int" doc="Destroys server resources" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_register_method" signature="xmlrpc_server_register_method(handle server, string method_name, string function)" returns="bool" doc="Register a PHP function to handle method matching&#10;method name" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_register_introspection_callback" signature="xmlrpc_server_register_introspection_callback(handle server, string function)" returns="bool" doc="Register a PHP function to generate documentation" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_call_method" signature="xmlrpc_server_call_method(handle server, string xml, mixed user_data [, array output_options])" returns="mixed" doc="Parses XML requests and call methods" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_server_add_introspection_data" signature="xmlrpc_server_add_introspection_data(handle server, array desc)" returns="int" doc="Adds introspection documentation" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_parse_method_descriptions" signature="xmlrpc_parse_method_descriptions(string xml)" returns="array" doc="Decodes XML into a list of method descriptions" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_set_type" signature="xmlrpc_set_type(string value, string type)" returns="bool" doc="Sets xmlrpc type base or datetime for a PHP string&#10;value" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_get_type" signature="xmlrpc_get_type(mixed value)" returns="string" doc="Gets xmlrpc type for a PHP value Especially useful for&#10;base and datetime strings" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xmlrpc_is_fault" signature="xmlrpc_is_fault(array)" returns="bool" doc="Determines if an array value represents an XMLRPC fault" ilk="function" src="xmlrpc-epi-php.c"/>
      <scope name="xslt_create" signature="xslt_create(void)" returns="resource" doc="Create a new XSLT processor" ilk="function" src="sablot.c"/>
      <scope name="xslt_set_sax_handlers" signature="xslt_set_sax_handlers(resource processor, array handlers)" returns="void" doc="Set the SAX handlers to be called when the XML document&#10;gets processed" ilk="function" src="sablot.c"/>
      <scope name="xslt_set_scheme_handlers" signature="xslt_set_scheme_handlers(resource processor, array handlers)" returns="void" doc="Set the scheme handlers for the XSLT processor" ilk="function" src="sablot.c"/>
      <scope name="xslt_set_error_handler" signature="xslt_set_error_handler(resource processor, mixed error_func)" returns="void" doc="Set the error handler to be called when an XSLT error&#10;happens" ilk="function" src="sablot.c"/>
      <scope name="xslt_set_base" signature="xslt_set_base(resource processor, string base)" returns="void" doc="Sets the base URI for all XSLT transformations" ilk="function" src="sablot.c"/>
      <scope name="xslt_set_encoding" signature="xslt_set_encoding(resource processor, string encoding)" returns="void" doc="Set the output encoding for the current stylesheet" ilk="function" src="sablot.c"/>
      <scope name="xslt_set_log" signature="xslt_set_log(resource processor, string logfile)" returns="void" doc="Set the log file to write the errors to defaults to&#10;stderr" ilk="function" src="sablot.c"/>
      <scope name="xslt_process" signature="xslt_process(resource processor, string xml, string xslt[, mixed result[, array args[, array params]]])" returns="string" doc="Perform the xslt transformation" ilk="function" src="sablot.c"/>
      <scope name="xslt_errno" signature="xslt_errno(resource processor)" returns="int" doc="Error number" ilk="function" src="sablot.c"/>
      <scope name="xslt_error" signature="xslt_error(resource processor)" returns="string" doc="Error string" ilk="function" src="sablot.c"/>
      <scope name="xslt_free" signature="xslt_free(resource processor)" returns="void" doc="Free the xslt processor up" ilk="function" src="sablot.c"/>
      <scope name="xslt_set_object" signature="xslt_set_object(resource parser, object obj)" returns="int" doc="sets the object in which to resolve callback functions" ilk="function" src="sablot.c"/>
      <scope name="xslt_setopt" signature="xslt_setopt(resource processor, int newmask)" returns="int" doc="Set options on a given xsl processor" ilk="function" src="sablot.c"/>
      <scope name="xslt_getopt" signature="xslt_getopt(resource processor)" returns="int" doc="Get options on a given xsl processor" ilk="function" src="sablot.c"/>
      <scope name="xslt_backend_version" signature="xslt_backend_version()" returns="string" doc="Returns the version number of Sablotron if available" ilk="function" src="sablot.c"/>
      <scope name="xslt_backend_name" signature="xslt_backend_name()" returns="string" doc="Returns the name of the Backend here Sablotron" ilk="function" src="sablot.c"/>
      <scope name="xslt_backend_info" signature="xslt_backend_info()" returns="string" doc="Returns the information on the compilation settings of&#10;the backend" ilk="function" src="sablot.c"/>
      <scope name="yaz_connect" signature="yaz_connect(string zurl [ array options])" returns="int" doc="Create target with given zurl Returns positive id if&#10;successful" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_close" signature="yaz_close(int id)" returns="int" doc="Destory and close target" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_search" signature="yaz_search(int id, string type, string query)" returns="int" doc="Specify query of type for search - returns true if&#10;successful" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_present" signature="yaz_present(int id)" returns="int" doc="Retrieve records" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_wait" signature="yaz_wait([array options])" returns="int" doc="Process events" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_errno" signature="yaz_errno(int id)" returns="int" doc="Return last error number for bib- diagnostic for other&#10;error for no error" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_error" signature="yaz_error(int id)" returns="string" doc="Return last error message" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_addinfo" signature="yaz_addinfo(int id)" returns="string" doc="Return additional info for last error empty string if&#10;none" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_hits" signature="yaz_hits(int id)" returns="int" doc="Return number of hits result count for last search" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_record" signature="yaz_record(int id, int pos, string type)" returns="string" doc="Return record information at given result set position" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_syntax" signature="yaz_syntax(int id, string syntax)" returns="int" doc="Set record syntax for retrieval" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_element" signature="yaz_element(int id, string elementsetname)" returns="int" doc="Set Element-Set-Name for retrieval" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_schema" signature="yaz_schema(int id, string schema)" returns="int" doc="Set Schema for retrieval" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_range" signature="yaz_range(int id, int start, int number)" returns="int" doc="Set result set start point and number of records to&#10;request" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_sort" signature="yaz_sort(int id, string sortspec)" returns="int" doc="Set result set sorting criteria" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_itemorder" signature="yaz_itemorder(int id, array package)" returns="int" doc="Sends Item Order request" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_scan" signature="yaz_scan(int id, type, query [, flags])" returns="int" doc="Sends Scan Request" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_es_result" signature="yaz_es_result(int id)" returns="int" doc="Inspects Extended Services Result" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_scan_result" signature="yaz_scan_result(int id, array options)" returns="int" doc="Inspects Scan Result" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_ccl_conf" signature="yaz_ccl_conf(int id, array package)" returns="int" doc="Configure CCL package" ilk="function" src="php_yaz.c"/>
      <scope name="yaz_ccl_parse" signature="yaz_ccl_parse(int id, string query, array res)" returns="int" doc="Parse a CCL query" ilk="function" src="php_yaz.c"/>
      <scope name="yp_get_default_domain" signature="yp_get_default_domain(void)" returns="string" doc="Returns the domain or false" ilk="function" src="yp.c"/>
      <scope name="yp_order" signature="yp_order(string domain, string map)" returns="int" doc="Returns the order number or false" ilk="function" src="yp.c"/>
      <scope name="yp_master" signature="yp_master(string domain, string map)" returns="string" doc="Returns the machine name of the master" ilk="function" src="yp.c"/>
      <scope name="yp_match" signature="yp_match(string domain, string map, string key)" returns="string" doc="Returns the matched line or false" ilk="function" src="yp.c"/>
      <scope name="yp_first" signature="yp_first(string domain, string map)" returns="array" doc="Returns the first key as array with var key and the the&#10;line as the value" ilk="function" src="yp.c"/>
      <scope name="yp_next" signature="yp_next(string domain, string map, string key)" returns="array" doc="Returns an array with var key and the the line as the&#10;value" ilk="function" src="yp.c"/>
      <scope name="yp_all" signature="yp_all(string domain, string map, string callback)" returns="void" doc="Traverse the map and call a function on each entry" ilk="function" src="yp.c"/>
      <scope name="yp_cat" signature="yp_cat(string domain, string map)" returns="array" doc="Return an array containing the entire map" ilk="function" src="yp.c"/>
      <scope name="yp_errno" signature="yp_errno()" returns="int" doc="Returns the error code from the last call or if no&#10;error occured" ilk="function" src="yp.c"/>
      <scope name="yp_err_string" signature="yp_err_string(int errorcode)" returns="string" doc="Returns the corresponding error string for the given&#10;error code" ilk="function" src="yp.c"/>
      <scope name="zip_open" signature="zip_open(string filename)" returns="resource" doc="Open a new zip archive for reading" ilk="function" src="zip.c"/>
      <scope name="zip_read" signature="zip_read(resource zip)" returns="resource" doc="Returns the next file in the archive" ilk="function" src="zip.c"/>
      <scope name="zip_close" signature="zip_close(resource zip)" returns="void" doc="Close a Zip archive" ilk="function" src="zip.c"/>
      <scope name="zip_entry_name" signature="zip_entry_name(resource zip_entry)" returns="string" doc="Return the name given a ZZip entry" ilk="function" src="zip.c"/>
      <scope name="zip_entry_compressedsize" signature="zip_entry_compressedsize(resource zip_entry)" returns="int" doc="Return the compressed size of a ZZip entry" ilk="function" src="zip.c"/>
      <scope name="zip_entry_filesize" signature="zip_entry_filesize(resource zip_entry)" returns="int" doc="Return the actual filesize of a ZZip entry" ilk="function" src="zip.c"/>
      <scope name="zip_entry_compressionmethod" signature="zip_entry_compressionmethod(resource zip_entry)" returns="string" doc="Return a string containing the compression method used&#10;on a particular entry" ilk="function" src="zip.c"/>
      <scope name="zip_entry_open" signature="zip_entry_open(resource zip_dp, resource zip_entry, string mode)" returns="bool" doc="Open a Zip File pointed by the resource entry" ilk="function" src="zip.c"/>
      <scope name="zip_entry_read" signature="zip_entry_read(resource zip_ent [, int nbytes])" returns="string" doc="Read X bytes from an opened zip entry" ilk="function" src="zip.c"/>
      <scope name="zip_entry_close" signature="zip_entry_close(resource zip_ent)" returns="void" doc="Close a zip entry" ilk="function" src="zip.c"/>
      <scope name="gzfile" signature="gzfile(string filename [, int use_include_path])" returns="array" doc="Read und uncompress entire gz-file into an array" ilk="function" src="zlib.c"/>
      <scope name="gzopen" signature="gzopen(string filename, string mode [, int use_include_path])" returns="int" doc="Open a gz-file and return a gz-file pointer" ilk="function" src="zlib.c"/>
      <scope name="readgzfile" signature="readgzfile(string filename [, int use_include_path])" returns="int" doc="Output a gz-file" ilk="function" src="zlib.c"/>
      <scope name="gzcompress" signature="gzcompress(string data [, int level])" returns="string" doc="Gzip-compress a string" ilk="function" src="zlib.c"/>
      <scope name="gzuncompress" signature="gzuncompress(string data [, int length])" returns="string" doc="Unzip a gzip-compressed string" ilk="function" src="zlib.c"/>
      <scope name="gzdeflate" signature="gzdeflate(string data [, int level])" returns="string" doc="Gzip-compress a string" ilk="function" src="zlib.c"/>
      <scope name="gzinflate" signature="gzinflate(string data [, int length])" returns="string" doc="Unzip a gzip-compressed string" ilk="function" src="zlib.c"/>
      <scope name="gzencode" signature="gzencode(string data [, int level [, int encoding_mode]])" returns="string" doc="GZ encode a string" ilk="function" src="zlib.c"/>
      <scope name="ob_gzhandler" signature="ob_gzhandler(string str, int mode)" returns="string" doc="Encode str based on accept-encoding setting - designed&#10;to be called from ob start" ilk="function" src="zlib.c"/>
      <scope name="set_time_limit" signature="set_time_limit(int seconds)" returns="bool" doc="Sets the maximum time a script can run" ilk="function" src="main.c"/>
      <scope name="ob_start" signature="ob_start([ string" returns="bool" doc="Turn on Output Buffering specifying an optional output&#10;handler" ilk="function" src="output.c"/>
      <scope name="ob_flush" signature="ob_flush(void)" returns="bool" doc="Flush send contents of the output buffer The last&#10;buffer content is sent to next buffer" ilk="function" src="output.c"/>
      <scope name="ob_clean" signature="ob_clean(void)" returns="bool" doc="Clean delete the current output buffer" ilk="function" src="output.c"/>
      <scope name="ob_end_flush" signature="ob_end_flush(void)" returns="bool" doc="Flush send the output buffer and delete current output&#10;buffer" ilk="function" src="output.c"/>
      <scope name="ob_end_clean" signature="ob_end_clean(void)" returns="bool" doc="Clean the output buffer and delete current output&#10;buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_flush" signature="ob_get_flush(void)" returns="bool" doc="Get current buffer contents flush send the output&#10;buffer and delete current output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_clean" signature="ob_get_clean(void)" returns="bool" doc="Get current buffer contents and delete current output&#10;buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_contents" signature="ob_get_contents(void)" returns="string" doc="Return the contents of the output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_level" signature="ob_get_level(void)" returns="int" doc="Return the nesting level of the output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_length" signature="ob_get_length(void)" returns="string" doc="Return the length of the output buffer" ilk="function" src="output.c"/>
      <scope name="ob_get_status" signature="ob_get_status([bool full_status])" returns="array" doc="Return the status of the active or all output buffers" ilk="function" src="output.c"/>
      <scope name="ob_implicit_flush" signature="ob_implicit_flush([int flag])" returns="void" doc="Turn implicit flush on off and is equivalent to calling&#10;flush after every output call" ilk="function" src="output.c"/>
      <scope name="output_reset_rewrite_vars" signature="output_reset_rewrite_vars(void)" returns="bool" doc="Reset clear URL rewriter values" ilk="function" src="output.c"/>
      <scope name="output_add_rewrite_var" signature="output_add_rewrite_var(string name, string value)" returns="bool" doc="Add URL rewriter values" ilk="function" src="output.c"/>
      <scope name="stream_register_wrapper" signature="stream_register_wrapper(string protocol, string classname)" returns="bool" doc="Registers a custom URL protocol handler class" ilk="function" src="user_streams.c"/>
      <scope name="apache_child_terminate" signature="apache_child_terminate(void)" returns="bool" doc="Terminate apache process after this request" ilk="function" src="php_apache.c"/>
      <scope name="apache_note" signature="apache_note(string note_name [, string note_value])" returns="string" doc="Get and set Apache request notes" ilk="function" src="php_functions.c"/>
      <scope name="virtual" signature="virtual(string uri)" returns="bool" doc="Perform an apache sub-request" ilk="function" src="php_functions.c"/>
      <scope name="getallheaders" signature="getallheaders(void)" returns="array" doc="Fetch all HTTP request headers" ilk="function" src="php_functions.c"/>
      <scope name="apache_request_headers" signature="apache_request_headers(void)" returns="array" doc="Fetch all HTTP request headers" ilk="function" src="php_apache.c"/>
      <scope name="apache_response_headers" signature="apache_response_headers(void)" returns="array" doc="Fetch all HTTP response headers" ilk="function" src="php_functions.c"/>
      <scope name="apache_setenv" signature="apache_setenv(string variable, string value [, bool walk_to_top])" returns="bool" doc="Set an Apache subprocess env variable" ilk="function" src="php_functions.c"/>
      <scope name="apache_lookup_uri" signature="apache_lookup_uri(string URI)" returns="object" doc="Perform a partial request of the given URI to obtain&#10;information about it" ilk="function" src="php_apache.c"/>
      <scope name="apache_get_version" signature="apache_get_version(void)" returns="string" doc="Fetch Apache version" ilk="function" src="php_functions.c"/>
      <scope name="apache_getenv" signature="apache_getenv(string variable [, bool walk_to_top])" returns="bool" doc="Get an Apache subprocess env variable" ilk="function" src="php_functions.c"/>
      <scope name="apache_get_modules" signature="apache_get_modules(void)" returns="array" doc="Get a list of loaded Apache modules" ilk="function" src="php_functions.c"/>
      <scope name="nsapi_virtual" signature="nsapi_virtual(string uri)" returns="bool" doc="Perform an NSAPI sub-request" ilk="function" src="nsapi.c"/>
      <scope name="nsapi_request_headers" signature="nsapi_request_headers(void)" returns="array" doc="Get all headers from the request" ilk="function" src="nsapi.c"/>
      <scope name="nsapi_response_headers" signature="nsapi_response_headers(void)" returns="array" doc="Get all headers from the response" ilk="function" src="nsapi.c"/>
      <scope name="zend_version" signature="zend_version(void)" returns="string" doc="Get the version of the Zend Engine" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="func_num_args" signature="func_num_args(void)" returns="int" doc="Get the number of arguments that were passed to the&#10;function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="func_get_arg" signature="func_get_arg(int arg_num)" returns="mixed" doc="Get the arg num'th argument that was passed to the&#10;function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="func_get_args" signature="func_get_args()" returns="array" doc="Get an array of the arguments that were passed to the&#10;function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strlen" signature="strlen(string str)" returns="int" doc="Get string length" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strcmp" signature="strcmp(string str1, string str2)" returns="int" doc="Binary safe string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strncmp" signature="strncmp(string str1, string str2, int len)" returns="int" doc="Binary safe string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strcasecmp" signature="strcasecmp(string str1, string str2)" returns="int" doc="Binary safe case-insensitive string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="strncasecmp" signature="strncasecmp(string str1, string str2, int len)" returns="int" doc="Binary safe string comparison" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="each" signature="each(array arr)" returns="array" doc="Return the currently pointed key value pair in the&#10;passed array and advance the pointer to the next&#10;element" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="error_reporting" signature="error_reporting(int new_error_level=null)" returns="int" doc="Return the current error reporting level and if an&#10;argument was passed - change to the new level" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="define" signature="define(string constant_name, mixed value, boolean case_sensitive=true)" returns="bool" doc="Define a new constant" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="defined" signature="defined(string constant_name)" returns="bool" doc="Check whether a constant exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_class" signature="get_class(object object)" returns="string" doc="Retrieves the class name" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_parent_class" signature="get_parent_class(mixed object)" returns="string" doc="Retrieves the parent class name for object or class" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="is_subclass_of" signature="is_subclass_of(object object, string class_name)" returns="bool" doc="Returns true if the object has this class as one of its&#10;parents" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="is_a" signature="is_a(object object, string class_name)" returns="bool" doc="Returns true if the object is of this class or has this&#10;class as one of its parents" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_class_vars" signature="get_class_vars(string class_name)" returns="array" doc="Returns an array of default properties of the class" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_object_vars" signature="get_object_vars(object obj)" returns="array" doc="Returns an array of object properties" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_class_methods" signature="get_class_methods(mixed class)" returns="array" doc="Returns an array of method names for class or class&#10;instance" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="method_exists" signature="method_exists(object object, string method)" returns="bool" doc="Checks if the class method exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="class_exists" signature="class_exists(string classname)" returns="bool" doc="Checks if the class exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="function_exists" signature="function_exists(string function_name)" returns="bool" doc="Checks if the function exists" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="leak" signature="leak(int num_bytes=3)" returns="void" doc="Cause an intentional memory leak for testing debugging&#10;purposes" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_included_files" signature="get_included_files(void)" returns="array" doc="Returns an array with the file names that were include&#10;once 'd" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="trigger_error" signature="trigger_error(string messsage [, int error_type])" returns="void" doc="Generates a user-level error warning notice message" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="set_error_handler" signature="set_error_handler(string error_handler)" returns="string" doc="Sets a user-defined error handler function Returns the&#10;previously defined error handler or false on error" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="restore_error_handler" signature="restore_error_handler(void)" returns="void" doc="Restores the previously defined error handler function" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_declared_classes" signature="get_declared_classes(void)" returns="array" doc="Returns an array of all declared classes" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_defined_functions" signature="get_defined_functions(void)" returns="array" doc="Returns an array of all defined functions" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_defined_vars" signature="get_defined_vars(void)" returns="array" doc="Returns an associative array of names and values of all&#10;currently defined variable names variables in the&#10;current scope" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="create_function" signature="create_function(string args, string code)" returns="string" doc="Creates an anonymous function and returns its name&#10;funny eh" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_resource_type" signature="get_resource_type(resource res)" returns="string" doc="Get the resource type name for a given resource" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_loaded_extensions" signature="get_loaded_extensions(void)" returns="array" doc="Return an array containing names of loaded extensions" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_defined_constants" signature="get_defined_constants(void)" returns="array" doc="Return an array containing the names and values of all&#10;defined constants" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="debug_backtrace" signature="debug_backtrace(void)" returns="void" doc="Prints out a backtrace" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="extension_loaded" signature="extension_loaded(string extension_name)" returns="bool" doc="Returns true if the named extension is loaded" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="get_extension_funcs" signature="get_extension_funcs(string extension_name)" returns="array" doc="Returns an array with the names of functions belonging&#10;to the named extension" ilk="function" src="zend_builtin_functions.c"/>
      <scope name="mysql" signature="mysql(string database_name, string query [, int link_identifier])" doc="Sends an SQL query to MySQL&amp;#xa;mysql is an alias to mysql_db_query" ilk="function" returns="resource"/>
      <scope name="mysql_fieldname" signature="mysql_fieldname(resource result, int field_index)" doc="Gets the name of the specified field in a result&amp;#xa;mysql_fieldname is an alias to mysql_field_name" ilk="function" returns="string"/>
      <scope name="mysql_fieldtable" signature="mysql_fieldtable(resource result, int field_offset)" doc="Gets name of the table the specified field is in&amp;#xa;mysql_fieldtable is an alias to mysql_field_table" ilk="function" returns="string"/>
      <scope name="mysql_fieldlen" signature="mysql_fieldlen(resource result, int field_offset)" doc="Returns the length of the specified field&amp;#xa;mysql_fieldlen is an alias to mysql_field_len" ilk="function" returns="int"/>
      <scope name="mysql_fieldtype" signature="mysql_fieldtype(resource result, int field_offset)" doc="Gets the type of the specified field in a result&amp;#xa;mysql_fieldtype is an alias to mysql_field_type" ilk="function" returns="string"/>
      <scope name="mysql_fieldflags" signature="mysql_fieldflags(resource result, int field_offset)" doc="Gets the flags associated with the specified field in a&#10;result&amp;#xa;mysql_fieldflags is an alias to mysql_field_flags" ilk="function" returns="string"/>
      <scope name="mysql_selectdb" signature="mysql_selectdb(string database_name [, int link_identifier])" doc="Selects a MySQL database&amp;#xa;mysql_selectdb is an alias to mysql_select_db" ilk="function" returns="bool"/>
      <scope name="mysql_createdb" signature="mysql_createdb(string database_name [, int link_identifier])" doc="Create a MySQL database&amp;#xa;mysql_createdb is an alias to mysql_create_db" ilk="function" returns="bool"/>
      <scope name="mysql_dropdb" signature="mysql_dropdb(string database_name [, int link_identifier])" doc="Drops delete a MySQL database&amp;#xa;mysql_dropdb is an alias to mysql_drop_db" ilk="function" returns="bool"/>
      <scope name="mysql_freeresult" signature="mysql_freeresult(resource result)" doc="Free result memory&amp;#xa;mysql_freeresult is an alias to mysql_free_result" ilk="function" returns="bool"/>
      <scope name="mysql_numfields" signature="mysql_numfields(resource result)" doc="Gets number of fields in a result&amp;#xa;mysql_numfields is an alias to mysql_num_fields" ilk="function" returns="int"/>
      <scope name="mysql_numrows" signature="mysql_numrows(resource result)" doc="Gets number of rows in a result&amp;#xa;mysql_numrows is an alias to mysql_num_rows" ilk="function" returns="int"/>
      <scope name="mysql_listdbs" signature="mysql_listdbs([int link_identifier])" doc="List databases available on a MySQL server&amp;#xa;mysql_listdbs is an alias to mysql_list_dbs" ilk="function" returns="resource"/>
      <scope name="mysql_listtables" signature="mysql_listtables(string database_name [, int link_identifier])" doc="List tables in a MySQL database&amp;#xa;mysql_listtables is an alias to mysql_list_tables" ilk="function" returns="resource"/>
      <scope name="mysql_listfields" signature="mysql_listfields(string database_name, string table_name [, int link_identifier])" doc="List MySQL result fields&amp;#xa;mysql_listfields is an alias to mysql_list_fields" ilk="function" returns="resource"/>
      <scope name="mysql_db_name" signature="mysql_db_name(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_db_name is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="mysql_dbname" signature="mysql_dbname(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_dbname is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="mysql_tablename" signature="mysql_tablename(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_tablename is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="mysql_table_name" signature="mysql_table_name(resource result, int row [, mixed field])" doc="Gets result data&amp;#xa;mysql_table_name is an alias to mysql_result" ilk="function" returns="mixed"/>
      <scope name="posix_errno" signature="posix_errno(void)" doc="Retrieve the error number set by the last posix&#10;function which failed&amp;#xa;posix_errno is an alias to posix_get_last_error" ilk="function" returns="int"/>
      <scope name="session_commit" signature="session_commit(void)" doc="Write session data and end session&amp;#xa;session_commit is an alias to session_write_close" ilk="function" returns="void"/>
      <scope name="chop" signature="chop(string str [, string character_mask])" doc="Removes trailing whitespace&amp;#xa;chop is an alias to rtrim" ilk="function" returns="string"/>
      <scope name="magic_quotes_runtime" signature="magic_quotes_runtime(int new_setting)" doc="Set the current active configuration setting of magic&#10;quotes runtime and return previous&amp;#xa;magic_quotes_runtime is an alias to set_magic_quotes_runtime" ilk="function" returns="bool"/>
      <scope name="show_source" signature="show_source(string file_name [, bool return] )" doc="Syntax highlight a source file&amp;#xa;show_source is an alias to highlight_file" ilk="function" returns="bool"/>
      <scope name="ini_alter" signature="ini_alter(string varname, string newvalue)" doc="Set a configuration option returns false on error and&#10;the old value of the configuration option on success&amp;#xa;ini_alter is an alias to ini_set" ilk="function" returns="string"/>
      <scope name="doubleval" signature="doubleval(mixed var)" doc="Get the float value of a variable&amp;#xa;doubleval is an alias to floatval" ilk="function" returns="float"/>
      <scope name="is_int" signature="is_int(mixed var)" doc="Returns true if variable is a long integer&amp;#xa;is_int is an alias to is_long" ilk="function" returns="bool"/>
      <scope name="is_integer" signature="is_integer(mixed var)" doc="Returns true if variable is a long integer&amp;#xa;is_integer is an alias to is_long" ilk="function" returns="bool"/>
      <scope name="is_double" signature="is_double(mixed var)" doc="Returns true if variable is float point&amp;#xa;is_double is an alias to is_float" ilk="function" returns="bool"/>
      <scope name="is_real" signature="is_real(mixed var)" doc="Returns true if variable is float point&amp;#xa;is_real is an alias to is_float" ilk="function" returns="bool"/>
      <scope name="fputs" signature="fputs(resource fp, string str [, int length])" doc="Binary-safe file write&amp;#xa;fputs is an alias to fwrite" ilk="function" returns="int"/>
      <scope name="set_file_buffer" signature="set_file_buffer(resource fp, int buffer)" doc="Set file write buffer&amp;#xa;set_file_buffer is an alias to stream_set_write_buffer" ilk="function" returns="int"/>
      <scope name="socket_set_blocking" signature="socket_set_blocking(resource socket, int mode)" doc="Set blocking non-blocking mode on a socket or stream&amp;#xa;socket_set_blocking is an alias to stream_set_blocking" ilk="function" returns="bool"/>
      <scope name="stream_wrapper_register" signature="stream_wrapper_register(string protocol, string classname)" doc="Registers a custom URL protocol handler class&amp;#xa;stream_wrapper_register is an alias to stream_register_wrapper" ilk="function" returns="bool"/>
      <scope name="socket_set_timeout" signature="socket_set_timeout(resource stream, int seconds, int microseconds)" doc="Set timeout on stream read to seconds microseonds&amp;#xa;socket_set_timeout is an alias to stream_set_timeout" ilk="function" returns="bool"/>
      <scope name="socket_get_status" signature="socket_get_status(resource fp)" doc="Retrieves header meta data from streams file pointers&amp;#xa;socket_get_status is an alias to stream_get_meta_data" ilk="function" returns="resource"/>
      <scope name="is_writeable" signature="is_writeable(string filename)" doc="Returns true if file can be written&amp;#xa;is_writeable is an alias to is_writable" ilk="function" returns="bool"/>
      <scope name="diskfreespace" signature="diskfreespace(string path)" doc="Get free disk space for filesystem that path is on&amp;#xa;diskfreespace is an alias to disk_free_space" ilk="function" returns="float"/>
      <scope name="pos" signature="pos(array array_arg)" doc="Return the element currently pointed to by the internal&#10;array pointer&amp;#xa;pos is an alias to current" ilk="function" returns="mixed"/>
      <scope name="sizeof" signature="sizeof(mixed var [, int mode])" doc="Count the number of elements in a variable usually an&#10;array&amp;#xa;sizeof is an alias to count" ilk="function" returns="int"/>
      <scope name="key_exists" signature="key_exists(mixed key, array search)" doc="Checks if the given key or index exists in the array&amp;#xa;key_exists is an alias to array_key_exists" ilk="function" returns="bool"/>
      <scope name="get_required_files" signature="get_required_files(void)" doc="Returns an array with the file names that were include&#10;once 'd&amp;#xa;get_required_files is an alias to get_included_files" ilk="function" returns="array"/>
      <scope name="user_error" signature="user_error(string messsage [, int error_type])" doc="Generates a user-level error warning notice message&amp;#xa;user_error is an alias to trigger_error" ilk="function" returns="void"/>
      <scope name="ob_list_handlers" signature="ob_list_handlers()" ilk="function"/>
      <variable name="_COOKIE" citdl="array"/>
      <variable name="_ENV" citdl="array"/>
      <variable name="_FILES" citdl="array"/>
      <variable name="_GET" citdl="array"/>
      <variable name="_POST" citdl="array"/>
      <variable name="_REQUEST" citdl="array"/>
      <variable name="_SESSION" citdl="array"/>
      <variable name="HTTP_COOKIE_VARS" citdl="array"/>
      <variable name="HTTP_ENV_VARS" citdl="array"/>
      <variable name="HTTP_GET_VARS" citdl="array"/>
      <variable name="HTTP_POST_FILES" citdl="array"/>
      <variable name="HTTP_POST_VARS" citdl="array"/>
      <variable name="HTTP_SERVER_VARS" citdl="array"/>
      <variable name="HTTP_SESSION_VARS" citdl="array"/>
      <variable name="GLOBALS" citdl="array"/>
      <variable name="__LINE__" citdl="string" ilk="constant"/>
      <variable name="__FILE__" citdl="string" ilk="constant"/>
      <variable name="__FUNCTION__" citdl="string" ilk="constant"/>
      <variable name="__CLASS__" citdl="string" ilk="constant"/>
      <variable name="__METHOD__" citdl="string" ilk="constant"/>
      <variable name="_SERVER" citdl="array">
        <variable name="HTTP_HOST" citdl="string"/>
        <variable name="HTTP_USER_AGENT" citdl="string"/>
        <variable name="HTTP_ACCEPT" citdl="string"/>
        <variable name="HTTP_ACCEPT_LANGUAGE" citdl="string"/>
        <variable name="HTTP_ACCEPT_ENCODING" citdl="string"/>
        <variable name="HTTP_ACCEPT_CHARSET" citdl="string"/>
        <variable name="HTTP_KEEP_ALIVE" citdl="string"/>
        <variable name="HTTP_CONNECTION" citdl="string"/>
        <variable name="HTTP_COOKIE" citdl="string"/>
        <variable name="HTTP_CACHE_CONTROL" citdl="string"/>
        <variable name="PATH" citdl="string"/>
        <variable name="SERVER_SIGNATURE" citdl="string"/>
        <variable name="SERVER_SOFTWARE" citdl="string"/>
        <variable name="SERVER_NAME" citdl="string"/>
        <variable name="SERVER_ADDR" citdl="string"/>
        <variable name="SERVER_PORT" citdl="string"/>
        <variable name="REMOTE_ADDR" citdl="string"/>
        <variable name="DOCUMENT_ROOT" citdl="string"/>
        <variable name="SERVER_ADMIN" citdl="string"/>
        <variable name="SCRIPT_FILENAME" citdl="string"/>
        <variable name="REMOTE_PORT" citdl="string"/>
        <variable name="GATEWAY_INTERFACE" citdl="string"/>
        <variable name="SERVER_PROTOCOL" citdl="string"/>
        <variable name="REQUEST_METHOD" citdl="string"/>
        <variable name="QUERY_STRING" citdl="string"/>
        <variable name="REQUEST_URI" citdl="string"/>
        <variable name="SCRIPT_NAME" citdl="string"/>
        <variable name="PHP_SELF" citdl="string"/>
        <variable name="REQUEST_TIME" citdl="string"/>
        <variable name="argv" citdl="string"/>
        <variable name="argc" citdl="string"/>
      </variable>
      <variable name="E_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_PARSE" citdl="integer" ilk="constant"/>
      <variable name="E_NOTICE" citdl="integer" ilk="constant"/>
      <variable name="E_CORE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_CORE_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_COMPILE_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_COMPILE_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_USER_ERROR" citdl="integer" ilk="constant"/>
      <variable name="E_USER_WARNING" citdl="integer" ilk="constant"/>
      <variable name="E_USER_NOTICE" citdl="integer" ilk="constant"/>
      <variable name="E_ALL" citdl="integer" ilk="constant"/>
      <variable name="TRUE" citdl="boolean" ilk="constant"/>
      <variable name="FALSE" citdl="boolean" ilk="constant"/>
      <variable name="ZEND_THREAD_SAFE" citdl="boolean" ilk="constant"/>
      <variable name="NULL" citdl="NULL" ilk="constant"/>
      <variable name="PHP_VERSION" citdl="string" ilk="constant"/>
      <variable name="PHP_OS" citdl="string" ilk="constant"/>
      <variable name="PHP_SAPI" citdl="string" ilk="constant"/>
      <variable name="DEFAULT_INCLUDE_PATH" citdl="string" ilk="constant"/>
      <variable name="PEAR_INSTALL_DIR" citdl="string" ilk="constant"/>
      <variable name="PEAR_EXTENSION_DIR" citdl="string" ilk="constant"/>
      <variable name="PHP_EXTENSION_DIR" citdl="string" ilk="constant"/>
      <variable name="PHP_PREFIX" citdl="string" ilk="constant"/>
      <variable name="PHP_BINDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_LIBDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_DATADIR" citdl="string" ilk="constant"/>
      <variable name="PHP_SYSCONFDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_LOCALSTATEDIR" citdl="string" ilk="constant"/>
      <variable name="PHP_CONFIG_FILE_PATH" citdl="string" ilk="constant"/>
      <variable name="PHP_CONFIG_FILE_SCAN_DIR" citdl="string" ilk="constant"/>
      <variable name="PHP_SHLIB_SUFFIX" citdl="string" ilk="constant"/>
      <variable name="PHP_EOL" citdl="string" ilk="constant"/>
      <variable name="PHP_INT_MAX" citdl="integer" ilk="constant"/>
      <variable name="PHP_INT_SIZE" citdl="integer" ilk="constant"/>
      <variable name="PHP_OUTPUT_HANDLER_START" citdl="integer" ilk="constant"/>
      <variable name="PHP_OUTPUT_HANDLER_CONT" citdl="integer" ilk="constant"/>
      <variable name="PHP_OUTPUT_HANDLER_END" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_OK" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_INI_SIZE" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_FORM_SIZE" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_PARTIAL" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_NO_FILE" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_NO_TMP_DIR" citdl="integer" ilk="constant"/>
      <variable name="UPLOAD_ERR_CANT_WRITE" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_NONE" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_NO_MEMORY" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_SYNTAX" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_NO_ELEMENTS" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_INVALID_TOKEN" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNCLOSED_TOKEN" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_PARTIAL_CHAR" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_TAG_MISMATCH" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_DUPLICATE_ATTRIBUTE" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_JUNK_AFTER_DOC_ELEMENT" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_PARAM_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNDEFINED_ENTITY" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_RECURSIVE_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_ASYNC_ENTITY" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_BAD_CHAR_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_BINARY_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_MISPLACED_XML_PI" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNKNOWN_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_INCORRECT_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_UNCLOSED_CDATA_SECTION" citdl="integer" ilk="constant"/>
      <variable name="XML_ERROR_EXTERNAL_ENTITY_HANDLING" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_CASE_FOLDING" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_TARGET_ENCODING" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_SKIP_TAGSTART" citdl="integer" ilk="constant"/>
      <variable name="XML_OPTION_SKIP_WHITE" citdl="integer" ilk="constant"/>
      <variable name="T_INCLUDE" citdl="integer" ilk="constant"/>
      <variable name="T_INCLUDE_ONCE" citdl="integer" ilk="constant"/>
      <variable name="T_EVAL" citdl="integer" ilk="constant"/>
      <variable name="T_REQUIRE" citdl="integer" ilk="constant"/>
      <variable name="T_REQUIRE_ONCE" citdl="integer" ilk="constant"/>
      <variable name="T_LOGICAL_OR" citdl="integer" ilk="constant"/>
      <variable name="T_LOGICAL_XOR" citdl="integer" ilk="constant"/>
      <variable name="T_LOGICAL_AND" citdl="integer" ilk="constant"/>
      <variable name="T_PRINT" citdl="integer" ilk="constant"/>
      <variable name="T_PLUS_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_MINUS_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_MUL_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_DIV_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_CONCAT_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_MOD_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_AND_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_OR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_XOR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_SL_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_SR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_BOOLEAN_OR" citdl="integer" ilk="constant"/>
      <variable name="T_BOOLEAN_AND" citdl="integer" ilk="constant"/>
      <variable name="T_IS_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_NOT_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_IDENTICAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_NOT_IDENTICAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_SMALLER_OR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_IS_GREATER_OR_EQUAL" citdl="integer" ilk="constant"/>
      <variable name="T_SL" citdl="integer" ilk="constant"/>
      <variable name="T_SR" citdl="integer" ilk="constant"/>
      <variable name="T_INC" citdl="integer" ilk="constant"/>
      <variable name="T_DEC" citdl="integer" ilk="constant"/>
      <variable name="T_INT_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_DOUBLE_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_STRING_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_ARRAY_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_OBJECT_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_BOOL_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_UNSET_CAST" citdl="integer" ilk="constant"/>
      <variable name="T_NEW" citdl="integer" ilk="constant"/>
      <variable name="T_EXIT" citdl="integer" ilk="constant"/>
      <variable name="T_IF" citdl="integer" ilk="constant"/>
      <variable name="T_ELSEIF" citdl="integer" ilk="constant"/>
      <variable name="T_ELSE" citdl="integer" ilk="constant"/>
      <variable name="T_ENDIF" citdl="integer" ilk="constant"/>
      <variable name="T_LNUMBER" citdl="integer" ilk="constant"/>
      <variable name="T_DNUMBER" citdl="integer" ilk="constant"/>
      <variable name="T_STRING" citdl="integer" ilk="constant"/>
      <variable name="T_STRING_VARNAME" citdl="integer" ilk="constant"/>
      <variable name="T_VARIABLE" citdl="integer" ilk="constant"/>
      <variable name="T_NUM_STRING" citdl="integer" ilk="constant"/>
      <variable name="T_INLINE_HTML" citdl="integer" ilk="constant"/>
      <variable name="T_CHARACTER" citdl="integer" ilk="constant"/>
      <variable name="T_BAD_CHARACTER" citdl="integer" ilk="constant"/>
      <variable name="T_ENCAPSED_AND_WHITESPACE" citdl="integer" ilk="constant"/>
      <variable name="T_CONSTANT_ENCAPSED_STRING" citdl="integer" ilk="constant"/>
      <variable name="T_ECHO" citdl="integer" ilk="constant"/>
      <variable name="T_DO" citdl="integer" ilk="constant"/>
      <variable name="T_WHILE" citdl="integer" ilk="constant"/>
      <variable name="T_ENDWHILE" citdl="integer" ilk="constant"/>
      <variable name="T_FOR" citdl="integer" ilk="constant"/>
      <variable name="T_ENDFOR" citdl="integer" ilk="constant"/>
      <variable name="T_FOREACH" citdl="integer" ilk="constant"/>
      <variable name="T_ENDFOREACH" citdl="integer" ilk="constant"/>
      <variable name="T_DECLARE" citdl="integer" ilk="constant"/>
      <variable name="T_ENDDECLARE" citdl="integer" ilk="constant"/>
      <variable name="T_AS" citdl="integer" ilk="constant"/>
      <variable name="T_SWITCH" citdl="integer" ilk="constant"/>
      <variable name="T_ENDSWITCH" citdl="integer" ilk="constant"/>
      <variable name="T_CASE" citdl="integer" ilk="constant"/>
      <variable name="T_DEFAULT" citdl="integer" ilk="constant"/>
      <variable name="T_BREAK" citdl="integer" ilk="constant"/>
      <variable name="T_CONTINUE" citdl="integer" ilk="constant"/>
      <variable name="T_OLD_FUNCTION" citdl="integer" ilk="constant"/>
      <variable name="T_FUNCTION" citdl="integer" ilk="constant"/>
      <variable name="T_CONST" citdl="integer" ilk="constant"/>
      <variable name="T_RETURN" citdl="integer" ilk="constant"/>
      <variable name="T_USE" citdl="integer" ilk="constant"/>
      <variable name="T_GLOBAL" citdl="integer" ilk="constant"/>
      <variable name="T_STATIC" citdl="integer" ilk="constant"/>
      <variable name="T_VAR" citdl="integer" ilk="constant"/>
      <variable name="T_UNSET" citdl="integer" ilk="constant"/>
      <variable name="T_ISSET" citdl="integer" ilk="constant"/>
      <variable name="T_EMPTY" citdl="integer" ilk="constant"/>
      <variable name="T_CLASS" citdl="integer" ilk="constant"/>
      <variable name="T_EXTENDS" citdl="integer" ilk="constant"/>
      <variable name="T_OBJECT_OPERATOR" citdl="integer" ilk="constant"/>
      <variable name="T_DOUBLE_ARROW" citdl="integer" ilk="constant"/>
      <variable name="T_LIST" citdl="integer" ilk="constant"/>
      <variable name="T_ARRAY" citdl="integer" ilk="constant"/>
      <variable name="T_CLASS_C" citdl="integer" ilk="constant"/>
      <variable name="T_FUNC_C" citdl="integer" ilk="constant"/>
      <variable name="T_LINE" citdl="integer" ilk="constant"/>
      <variable name="T_FILE" citdl="integer" ilk="constant"/>
      <variable name="T_COMMENT" citdl="integer" ilk="constant"/>
      <variable name="T_ML_COMMENT" citdl="integer" ilk="constant"/>
      <variable name="T_OPEN_TAG" citdl="integer" ilk="constant"/>
      <variable name="T_OPEN_TAG_WITH_ECHO" citdl="integer" ilk="constant"/>
      <variable name="T_CLOSE_TAG" citdl="integer" ilk="constant"/>
      <variable name="T_WHITESPACE" citdl="integer" ilk="constant"/>
      <variable name="T_START_HEREDOC" citdl="integer" ilk="constant"/>
      <variable name="T_END_HEREDOC" citdl="integer" ilk="constant"/>
      <variable name="T_DOLLAR_OPEN_CURLY_BRACES" citdl="integer" ilk="constant"/>
      <variable name="T_CURLY_OPEN" citdl="integer" ilk="constant"/>
      <variable name="T_PAAMAYIM_NEKUDOTAYIM" citdl="integer" ilk="constant"/>
      <variable name="T_DOUBLE_COLON" citdl="integer" ilk="constant"/>
      <variable name="CONNECTION_ABORTED" citdl="integer" ilk="constant"/>
      <variable name="CONNECTION_NORMAL" citdl="integer" ilk="constant"/>
      <variable name="CONNECTION_TIMEOUT" citdl="integer" ilk="constant"/>
      <variable name="INI_USER" citdl="integer" ilk="constant"/>
      <variable name="INI_PERDIR" citdl="integer" ilk="constant"/>
      <variable name="INI_SYSTEM" citdl="integer" ilk="constant"/>
      <variable name="INI_ALL" citdl="integer" ilk="constant"/>
      <variable name="M_E" citdl="double" ilk="constant"/>
      <variable name="M_LOG2E" citdl="double" ilk="constant"/>
      <variable name="M_LOG10E" citdl="double" ilk="constant"/>
      <variable name="M_LN2" citdl="double" ilk="constant"/>
      <variable name="M_LN10" citdl="double" ilk="constant"/>
      <variable name="M_PI" citdl="double" ilk="constant"/>
      <variable name="M_PI_2" citdl="double" ilk="constant"/>
      <variable name="M_PI_4" citdl="double" ilk="constant"/>
      <variable name="M_1_PI" citdl="double" ilk="constant"/>
      <variable name="M_2_PI" citdl="double" ilk="constant"/>
      <variable name="M_2_SQRTPI" citdl="double" ilk="constant"/>
      <variable name="M_SQRT2" citdl="double" ilk="constant"/>
      <variable name="M_SQRT1_2" citdl="double" ilk="constant"/>
      <variable name="INF" citdl="double" ilk="constant"/>
      <variable name="NAN" citdl="double" ilk="constant"/>
      <variable name="INFO_GENERAL" citdl="integer" ilk="constant"/>
      <variable name="INFO_CREDITS" citdl="integer" ilk="constant"/>
      <variable name="INFO_CONFIGURATION" citdl="integer" ilk="constant"/>
      <variable name="INFO_MODULES" citdl="integer" ilk="constant"/>
      <variable name="INFO_ENVIRONMENT" citdl="integer" ilk="constant"/>
      <variable name="INFO_VARIABLES" citdl="integer" ilk="constant"/>
      <variable name="INFO_LICENSE" citdl="integer" ilk="constant"/>
      <variable name="INFO_ALL" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_GROUP" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_GENERAL" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_SAPI" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_MODULES" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_DOCS" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_FULLPAGE" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_QA" citdl="integer" ilk="constant"/>
      <variable name="CREDITS_ALL" citdl="integer" ilk="constant"/>
      <variable name="HTML_SPECIALCHARS" citdl="integer" ilk="constant"/>
      <variable name="HTML_ENTITIES" citdl="integer" ilk="constant"/>
      <variable name="ENT_COMPAT" citdl="integer" ilk="constant"/>
      <variable name="ENT_QUOTES" citdl="integer" ilk="constant"/>
      <variable name="ENT_NOQUOTES" citdl="integer" ilk="constant"/>
      <variable name="STR_PAD_LEFT" citdl="integer" ilk="constant"/>
      <variable name="STR_PAD_RIGHT" citdl="integer" ilk="constant"/>
      <variable name="STR_PAD_BOTH" citdl="integer" ilk="constant"/>
      <variable name="PATHINFO_DIRNAME" citdl="integer" ilk="constant"/>
      <variable name="PATHINFO_BASENAME" citdl="integer" ilk="constant"/>
      <variable name="PATHINFO_EXTENSION" citdl="integer" ilk="constant"/>
      <variable name="CHAR_MAX" citdl="integer" ilk="constant"/>
      <variable name="LC_CTYPE" citdl="integer" ilk="constant"/>
      <variable name="LC_NUMERIC" citdl="integer" ilk="constant"/>
      <variable name="LC_TIME" citdl="integer" ilk="constant"/>
      <variable name="LC_COLLATE" citdl="integer" ilk="constant"/>
      <variable name="LC_MONETARY" citdl="integer" ilk="constant"/>
      <variable name="LC_ALL" citdl="integer" ilk="constant"/>
      <variable name="LC_MESSAGES" citdl="integer" ilk="constant"/>
      <variable name="SEEK_SET" citdl="integer" ilk="constant"/>
      <variable name="SEEK_CUR" citdl="integer" ilk="constant"/>
      <variable name="SEEK_END" citdl="integer" ilk="constant"/>
      <variable name="LOCK_SH" citdl="integer" ilk="constant"/>
      <variable name="LOCK_EX" citdl="integer" ilk="constant"/>
      <variable name="LOCK_UN" citdl="integer" ilk="constant"/>
      <variable name="LOCK_NB" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_CONNECT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_AUTH_REQUIRED" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_AUTH_RESULT" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_MIME_TYPE_IS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_FILE_SIZE_IS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_REDIRECTED" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_PROGRESS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_FAILURE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_SEVERITY_INFO" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_SEVERITY_WARN" citdl="integer" ilk="constant"/>
      <variable name="STREAM_NOTIFY_SEVERITY_ERR" citdl="integer" ilk="constant"/>
      <variable name="FNM_NOESCAPE" citdl="integer" ilk="constant"/>
      <variable name="FNM_PATHNAME" citdl="integer" ilk="constant"/>
      <variable name="FNM_PERIOD" citdl="integer" ilk="constant"/>
      <variable name="FNM_CASEFOLD" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_1" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_2" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_3" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_4" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_5" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_6" citdl="integer" ilk="constant"/>
      <variable name="ABDAY_7" citdl="integer" ilk="constant"/>
      <variable name="DAY_1" citdl="integer" ilk="constant"/>
      <variable name="DAY_2" citdl="integer" ilk="constant"/>
      <variable name="DAY_3" citdl="integer" ilk="constant"/>
      <variable name="DAY_4" citdl="integer" ilk="constant"/>
      <variable name="DAY_5" citdl="integer" ilk="constant"/>
      <variable name="DAY_6" citdl="integer" ilk="constant"/>
      <variable name="DAY_7" citdl="integer" ilk="constant"/>
      <variable name="ABMON_1" citdl="integer" ilk="constant"/>
      <variable name="ABMON_2" citdl="integer" ilk="constant"/>
      <variable name="ABMON_3" citdl="integer" ilk="constant"/>
      <variable name="ABMON_4" citdl="integer" ilk="constant"/>
      <variable name="ABMON_5" citdl="integer" ilk="constant"/>
      <variable name="ABMON_6" citdl="integer" ilk="constant"/>
      <variable name="ABMON_7" citdl="integer" ilk="constant"/>
      <variable name="ABMON_8" citdl="integer" ilk="constant"/>
      <variable name="ABMON_9" citdl="integer" ilk="constant"/>
      <variable name="ABMON_10" citdl="integer" ilk="constant"/>
      <variable name="ABMON_11" citdl="integer" ilk="constant"/>
      <variable name="ABMON_12" citdl="integer" ilk="constant"/>
      <variable name="MON_1" citdl="integer" ilk="constant"/>
      <variable name="MON_2" citdl="integer" ilk="constant"/>
      <variable name="MON_3" citdl="integer" ilk="constant"/>
      <variable name="MON_4" citdl="integer" ilk="constant"/>
      <variable name="MON_5" citdl="integer" ilk="constant"/>
      <variable name="MON_6" citdl="integer" ilk="constant"/>
      <variable name="MON_7" citdl="integer" ilk="constant"/>
      <variable name="MON_8" citdl="integer" ilk="constant"/>
      <variable name="MON_9" citdl="integer" ilk="constant"/>
      <variable name="MON_10" citdl="integer" ilk="constant"/>
      <variable name="MON_11" citdl="integer" ilk="constant"/>
      <variable name="MON_12" citdl="integer" ilk="constant"/>
      <variable name="AM_STR" citdl="integer" ilk="constant"/>
      <variable name="PM_STR" citdl="integer" ilk="constant"/>
      <variable name="D_T_FMT" citdl="integer" ilk="constant"/>
      <variable name="D_FMT" citdl="integer" ilk="constant"/>
      <variable name="T_FMT" citdl="integer" ilk="constant"/>
      <variable name="T_FMT_AMPM" citdl="integer" ilk="constant"/>
      <variable name="ERA" citdl="integer" ilk="constant"/>
      <variable name="ERA_D_T_FMT" citdl="integer" ilk="constant"/>
      <variable name="ERA_D_FMT" citdl="integer" ilk="constant"/>
      <variable name="ERA_T_FMT" citdl="integer" ilk="constant"/>
      <variable name="ALT_DIGITS" citdl="integer" ilk="constant"/>
      <variable name="CRNCYSTR" citdl="integer" ilk="constant"/>
      <variable name="RADIXCHAR" citdl="integer" ilk="constant"/>
      <variable name="THOUSEP" citdl="integer" ilk="constant"/>
      <variable name="YESEXPR" citdl="integer" ilk="constant"/>
      <variable name="NOEXPR" citdl="integer" ilk="constant"/>
      <variable name="YESSTR" citdl="integer" ilk="constant"/>
      <variable name="NOSTR" citdl="integer" ilk="constant"/>
      <variable name="CODESET" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_SALT_LENGTH" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_STD_DES" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_EXT_DES" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_MD5" citdl="integer" ilk="constant"/>
      <variable name="CRYPT_BLOWFISH" citdl="integer" ilk="constant"/>
      <variable name="DIRECTORY_SEPARATOR" citdl="string" ilk="constant"/>
      <variable name="PATH_SEPARATOR" citdl="string" ilk="constant"/>
      <variable name="GLOB_BRACE" citdl="integer" ilk="constant"/>
      <variable name="GLOB_MARK" citdl="integer" ilk="constant"/>
      <variable name="GLOB_NOSORT" citdl="integer" ilk="constant"/>
      <variable name="GLOB_NOCHECK" citdl="integer" ilk="constant"/>
      <variable name="GLOB_NOESCAPE" citdl="integer" ilk="constant"/>
      <variable name="GLOB_ONLYDIR" citdl="integer" ilk="constant"/>
      <variable name="LOG_EMERG" citdl="integer" ilk="constant"/>
      <variable name="LOG_ALERT" citdl="integer" ilk="constant"/>
      <variable name="LOG_CRIT" citdl="integer" ilk="constant"/>
      <variable name="LOG_ERR" citdl="integer" ilk="constant"/>
      <variable name="LOG_WARNING" citdl="integer" ilk="constant"/>
      <variable name="LOG_NOTICE" citdl="integer" ilk="constant"/>
      <variable name="LOG_INFO" citdl="integer" ilk="constant"/>
      <variable name="LOG_DEBUG" citdl="integer" ilk="constant"/>
      <variable name="LOG_KERN" citdl="integer" ilk="constant"/>
      <variable name="LOG_USER" citdl="integer" ilk="constant"/>
      <variable name="LOG_MAIL" citdl="integer" ilk="constant"/>
      <variable name="LOG_DAEMON" citdl="integer" ilk="constant"/>
      <variable name="LOG_AUTH" citdl="integer" ilk="constant"/>
      <variable name="LOG_SYSLOG" citdl="integer" ilk="constant"/>
      <variable name="LOG_LPR" citdl="integer" ilk="constant"/>
      <variable name="LOG_NEWS" citdl="integer" ilk="constant"/>
      <variable name="LOG_UUCP" citdl="integer" ilk="constant"/>
      <variable name="LOG_CRON" citdl="integer" ilk="constant"/>
      <variable name="LOG_AUTHPRIV" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL0" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL1" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL2" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL3" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL4" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL5" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL6" citdl="integer" ilk="constant"/>
      <variable name="LOG_LOCAL7" citdl="integer" ilk="constant"/>
      <variable name="LOG_PID" citdl="integer" ilk="constant"/>
      <variable name="LOG_CONS" citdl="integer" ilk="constant"/>
      <variable name="LOG_ODELAY" citdl="integer" ilk="constant"/>
      <variable name="LOG_NDELAY" citdl="integer" ilk="constant"/>
      <variable name="LOG_NOWAIT" citdl="integer" ilk="constant"/>
      <variable name="LOG_PERROR" citdl="integer" ilk="constant"/>
      <variable name="EXTR_OVERWRITE" citdl="integer" ilk="constant"/>
      <variable name="EXTR_SKIP" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_SAME" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_ALL" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_INVALID" citdl="integer" ilk="constant"/>
      <variable name="EXTR_PREFIX_IF_EXISTS" citdl="integer" ilk="constant"/>
      <variable name="EXTR_IF_EXISTS" citdl="integer" ilk="constant"/>
      <variable name="EXTR_REFS" citdl="integer" ilk="constant"/>
      <variable name="SORT_ASC" citdl="integer" ilk="constant"/>
      <variable name="SORT_DESC" citdl="integer" ilk="constant"/>
      <variable name="SORT_REGULAR" citdl="integer" ilk="constant"/>
      <variable name="SORT_NUMERIC" citdl="integer" ilk="constant"/>
      <variable name="SORT_STRING" citdl="integer" ilk="constant"/>
      <variable name="SORT_LOCALE_STRING" citdl="integer" ilk="constant"/>
      <variable name="CASE_LOWER" citdl="integer" ilk="constant"/>
      <variable name="CASE_UPPER" citdl="integer" ilk="constant"/>
      <variable name="COUNT_NORMAL" citdl="integer" ilk="constant"/>
      <variable name="COUNT_RECURSIVE" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_ACTIVE" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_CALLBACK" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_BAIL" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_WARNING" citdl="integer" ilk="constant"/>
      <variable name="ASSERT_QUIET_EVAL" citdl="integer" ilk="constant"/>
      <variable name="STREAM_USE_PATH" citdl="integer" ilk="constant"/>
      <variable name="STREAM_IGNORE_URL" citdl="integer" ilk="constant"/>
      <variable name="STREAM_ENFORCE_SAFE_MODE" citdl="integer" ilk="constant"/>
      <variable name="STREAM_REPORT_ERRORS" citdl="integer" ilk="constant"/>
      <variable name="STREAM_MUST_SEEK" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_GIF" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPEG" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_PNG" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_SWF" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_PSD" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_BMP" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_TIFF_II" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_TIFF_MM" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPC" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JP2" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPX" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JB2" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_IFF" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_WBMP" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_JPEG2000" citdl="integer" ilk="constant"/>
      <variable name="IMAGETYPE_XBM" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_ASSOC" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_NUM" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_BOTH" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_CLIENT_COMPRESS" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_CLIENT_INTERACTIVE" citdl="integer" ilk="constant"/>
      <variable name="MYSQL_CLIENT_IGNORE_SPACE" citdl="integer" ilk="constant"/>
      <variable name="PREG_PATTERN_ORDER" citdl="integer" ilk="constant"/>
      <variable name="PREG_SET_ORDER" citdl="integer" ilk="constant"/>
      <variable name="PREG_OFFSET_CAPTURE" citdl="integer" ilk="constant"/>
      <variable name="PREG_SPLIT_NO_EMPTY" citdl="integer" ilk="constant"/>
      <variable name="PREG_SPLIT_DELIM_CAPTURE" citdl="integer" ilk="constant"/>
      <variable name="PREG_SPLIT_OFFSET_CAPTURE" citdl="integer" ilk="constant"/>
      <variable name="PREG_GREP_INVERT" citdl="integer" ilk="constant"/>
      <variable name="STDIN" citdl="resource" ilk="constant"/>
      <variable name="STDOUT" citdl="resource" ilk="constant"/>
      <variable name="STDERR" citdl="resource" ilk="constant"/>
    </scope>
  </file>
</codeintel>
