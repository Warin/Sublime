<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Ext JavaScript framework - version 3.0" name="Ext_30" version="2.0">
  <file lang="JavaScript" path="extjs">
    <scope ilk="blob" lang="JavaScript" name="ext_30" src="extjs">
      <scope attributes="__local__ private" ilk="function" line="7" lineend="443" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="String" line="15" name="LOAD" />
        <variable attributes="__local__ private" citdl="String" line="15" name="BEFOREREQUEST" />
        <variable attributes="__local__ private" line="15" name="UNDEFINED" />
        <variable attributes="__local__ private" citdl="String" line="15" name="GET" />
        <variable attributes="__local__ private" citdl="window" line="15" name="WINDOW" />
        <variable attributes="__local__ private" citdl="String" line="15" name="REQUESTCOMPLETE" />
        <variable attributes="__local__ private" citdl="String" line="15" name="REQUESTEXCEPTION" />
        <variable attributes="__local__ private" citdl="String" line="15" name="POST" />
        <scope attributes="__local__ private" ilk="class" line="86" lineend="97" name="handleResponse">
          <scope attributes="__local__ private __ctor__" ilk="function" line="86" lineend="97" name="handleResponse" signature="handleResponse(response)">
            <variable ilk="argument" name="response" />
            <variable citdl="handleResponse" name="this" />
            <variable attributes="__local__ private" citdl="response.argument.options" line="88" name="options" />
          </scope>
          <variable citdl="Boolean" line="87" name="transId" />
        </scope>
        <scope attributes="__local__ private" ilk="class" line="100" lineend="111" name="handleFailure">
          <scope attributes="__local__ private __ctor__" ilk="function" line="100" lineend="111" name="handleFailure" signature="handleFailure(response, e)">
            <variable ilk="argument" name="response" />
            <variable ilk="argument" name="e" />
            <variable citdl="handleFailure" name="this" />
            <variable attributes="__local__ private" citdl="response.argument.options" line="102" name="options" />
          </scope>
          <variable citdl="Boolean" line="101" name="transId" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="114" lineend="213" name="doFormUpload" signature="doFormUpload(o, ps, url)">
          <variable ilk="argument" name="o" />
          <variable citdl="Ext.urlDecode()" ilk="argument" name="ps" />
          <variable ilk="argument" name="url" />
          <variable attributes="__local__ private" citdl="Array" line="122" name="hiddens" />
          <variable attributes="__local__ private" citdl="Ext.getDom()" line="122" name="form" />
          <variable attributes="__local__ private" citdl="String" line="122" name="encoding" />
          <variable attributes="__local__ private" citdl="document" line="122" name="doc" />
          <variable attributes="__local__ private" citdl="doc.createElement()" line="122" name="frame" />
          <variable attributes="__local__ private" citdl="Object" line="122" lineend="128" name="buf">
            <variable citdl="form.target" line="123" name="target" />
            <variable citdl="form.method" line="124" name="method" />
            <variable citdl="form.encoding" line="125" name="encoding" />
            <variable citdl="form.enctype" line="126" name="enctype" />
            <variable citdl="form.action" line="127" name="action" />
          </variable>
          <variable attributes="__local__ private" citdl="Ext.id()" line="122" name="id" />
          <variable attributes="__local__ private" citdl="doc.createElement()" line="122" name="hd" />
          <scope attributes="__local__ private" ilk="function" line="210" lineend="212" name="(anonymous)" signature="(anonymous)()" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="7" lineend="1115" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" line="33" name="UNDEFINED" />
        <variable attributes="__local__ private" citdl="String" line="33" name="TOP" />
        <variable attributes="__local__ private" citdl="String" line="33" name="WIDTH" />
        <variable attributes="__local__ private" line="33" name="NULL" />
        <variable attributes="__local__ private" citdl="Boolean" line="33" name="TRUE" />
        <variable attributes="__local__ private" citdl="String" line="33" name="ABSOLUTE" />
        <variable attributes="__local__ private" citdl="String" line="33" name="BOTTOM" />
        <variable attributes="__local__ private" citdl="String" line="33" name="MOTION" />
        <variable attributes="__local__ private" citdl="String" line="33" name="VISIBLE" />
        <variable attributes="__local__ private" citdl="String" line="33" name="POINTS" />
        <variable attributes="__local__ private" citdl="String" line="33" name="POSITION" />
        <variable attributes="__local__ private" citdl="String" line="33" name="SETX" />
        <variable attributes="__local__ private" citdl="String" line="33" name="SETY" />
        <variable attributes="__local__ private" citdl="String" line="33" name="LEFT" />
        <variable attributes="__local__ private" citdl="String" line="33" name="HEIGHT" />
        <variable attributes="__local__ private" citdl="String" line="33" name="EASEOUT" />
        <variable attributes="__local__ private" citdl="String" line="33" name="RIGHT" />
        <variable attributes="__local__ private" citdl="Boolean" line="33" name="FALSE" />
        <variable attributes="__local__ private" citdl="Object" line="33" lineend="33" name="queues" />
        <variable attributes="__local__ private" citdl="Ext.Element.Flyweight" line="33" name="flyEl" />
        <variable attributes="__local__ private" citdl="String" line="33" name="SETXY" />
        <variable attributes="__local__ private" citdl="String" line="33" name="HIDDEN" />
        <scope attributes="__local__ private" ilk="function" line="34" lineend="36" name="getObject" returns="o" signature="getObject(o)">
          <variable ilk="argument" name="o" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="37" lineend="41" name="fly" returns="flyEl" signature="fly(dom)">
          <variable ilk="argument" name="dom" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="45" lineend="50" name="getQueue" returns="queues[id]" signature="getQueue(id)">
          <variable ilk="argument" name="id" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="51" lineend="53" name="setQueue" signature="setQueue(id, value)">
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="value" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="7" lineend="483" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Ext.toArray" line="14" name="TOARRAY" />
        <variable attributes="__local__ private" citdl="Boolean" line="14" name="FALSE" />
        <variable attributes="__local__ private" citdl="Ext.each" line="14" name="EACH" />
        <variable attributes="__local__ private" citdl="Ext.util" line="14" name="EXTUTIL" />
        <variable attributes="__local__ private" citdl="Boolean" line="14" name="TRUE" />
        <variable attributes="__local__ private" citdl="Ext.isObject" line="14" name="ISOBJECT" />
        <variable attributes="__local__ private" citdl="EXTUTIL.Observable.prototype" line="330" name="OBSERVABLE" />
        <scope attributes="__local__ private" ilk="function" line="359" lineend="365" name="createTargeted" signature="createTargeted(h, o, scope)">
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="scope" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="367" lineend="372" name="createBuffered" signature="createBuffered(h, o, scope)">
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="scope" />
          <variable attributes="__local__ private" citdl="EXTUTIL.DelayedTask" line="368" name="task" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="374" lineend="379" name="createSingle" returns="h.apply()" signature="createSingle(h, e, fn, scope)">
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="e" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="scope" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="381" lineend="388" name="createDelayed" signature="createDelayed(h, o, scope)">
          <variable ilk="argument" name="h" />
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="scope" />
          <variable attributes="__local__ private" citdl="TOARRAY()" line="383" name="args" />
          <scope attributes="__local__ private" ilk="function" line="384" lineend="386" name="(anonymous)" signature="(anonymous)()" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="9" lineend="163" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Ext.Panel" line="11" name="cp" />
        <scope attributes="__local__ private" ilk="function" line="13" lineend="104" name="createConsole" signature="createConsole()">
          <variable attributes="__local__ private" citdl="Ext.debug.ScriptsPanel" line="15" name="scriptPanel" />
          <variable attributes="__local__ private" citdl="Ext.debug.LogPanel" line="16" name="logView" />
          <variable attributes="__local__ private" citdl="Ext.debug.DomTree" line="17" name="tree" />
          <variable attributes="__local__ private" citdl="Ext.debug.ComponentInspector" line="18" name="compInspector" />
          <variable attributes="__local__ private" citdl="Ext.debug.ComponentInfoPanel" line="19" name="compInfoPanel" />
          <variable attributes="__local__ private" citdl="Ext.debug.StoreInspector" line="20" name="storeInspector" />
          <variable attributes="__local__ private" citdl="Ext.debug.ObjectInspector" line="21" name="objInspector" />
          <variable attributes="__local__ private" citdl="Ext.TabPanel" line="48" name="tabs" />
          <scope attributes="__local__ private" ilk="function" line="94" lineend="101" name="handleResize" signature="handleResize()">
            <variable attributes="__local__ private" citdl="Ext.getBody()" line="95" name="b" />
            <variable attributes="__local__ private" citdl="b.getViewSize()" line="96" name="size" />
          </scope>
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="10" lineend="176" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="String" line="15" name="PREVIOUSSIBLING" />
        <variable attributes="__local__ private" citdl="Ext.get" line="15" name="GET" />
        <variable attributes="__local__ private" citdl="String" line="15" name="NEXTSIBLING" />
        <variable attributes="__local__ private" citdl="String" line="15" name="PARENTNODE" />
        <variable attributes="__local__ private" citdl="Ext.DomQuery" line="15" name="DQ" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="10" lineend="120" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="textEl.dom.offsetHeight" line="23" name="textSize" />
        <variable attributes="__local__ private" citdl="Number" line="23" name="curHeight" />
        <variable attributes="__local__ private" citdl="Ext.lib.Event" line="23" name="E" />
        <variable attributes="__local__ private" citdl="Ext.util.DelayedTask" line="23" name="resizeTask" />
        <variable attributes="__local__ private" citdl="Ext.isSafari" line="23" name="useKeydown" />
        <variable attributes="__local__ private" citdl="Number" line="23" name="curWidth" />
        <variable attributes="__local__ private" citdl="Ext.util.Event" line="23" name="textEvent" />
        <variable attributes="__local__ private" line="23" name="propRe" />
        <variable attributes="__local__ private" citdl="Ext.util.Event" line="23" name="resizeEvent" />
        <variable attributes="__local__ private" citdl="Ext.lib.Dom" line="23" name="D" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="10" lineend="52" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Ext.DomHelper" line="13" name="DH" />
        <variable attributes="__local__ private" citdl="Ext.getDom" line="13" name="GETDOM" />
        <variable attributes="__local__ private" citdl="Ext.get" line="13" name="GET" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="10" lineend="142" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="class" line="14" lineend="30" name="getMethodEvent">
          <scope attributes="__local__ private __ctor__" ilk="function" line="14" lineend="66" name="getMethodEvent" returns="e" signature="getMethodEvent(method)">
            <variable ilk="argument" name="method" />
            <variable citdl="getMethodEvent" name="this" />
            <variable attributes="__local__ private" citdl="this" line="16" name="obj" />
            <variable attributes="__local__ private" citdl="v" line="16" name="returnValue" />
            <variable attributes="__local__ private" line="16" name="v" />
            <variable attributes="__local__ private" citdl="Boolean" line="16" name="cancel" />
            <variable attributes="__local__ private" citdl="Object" line="16" lineend="19" name="e">
              <variable citdl="this[method]" line="20" name="originalFn" />
              <variable citdl="method" line="21" name="methodName" />
              <variable citdl="Array" line="22" name="before" />
              <variable citdl="Array" line="23" name="after" />
            </variable>
            <scope attributes="__local__ private" ilk="function" line="25" lineend="39" name="makeCall" signature="makeCall(fn, scope, args)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="args" />
            </scope>
            <variable attributes="__local__ private" citdl="Ext.toArray()" line="42" name="args" />
            <scope attributes="__local__ private" ilk="function" line="46" lineend="51" name="(anonymous)" returns="returnValue" signature="(anonymous)()" />
            <scope attributes="__local__ private" ilk="function" line="56" lineend="61" name="(anonymous)" returns="returnValue" signature="(anonymous)()" />
          </scope>
          <variable citdl="e" line="19" name="methodEvents" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="10" lineend="438" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Object" line="12" lineend="12" name="propCache" />
        <variable attributes="__local__ private" line="13" name="camelRe" />
        <variable attributes="__local__ private" citdl="Object" line="14" lineend="14" name="classReCache" />
        <variable attributes="__local__ private" citdl="document.defaultView" line="15" name="view" />
        <variable attributes="__local__ private" citdl="Ext.isIE" line="16" name="propFloat" />
        <variable attributes="__local__ private" line="17" name="opacityRe" />
        <variable attributes="__local__ private" line="18" name="trimRe" />
        <variable attributes="__local__ private" citdl="Ext.Element" line="19" name="EL" />
        <variable attributes="__local__ private" citdl="String" line="20" name="PADDING" />
        <variable attributes="__local__ private" citdl="String" line="21" name="MARGIN" />
        <variable attributes="__local__ private" citdl="String" line="22" name="BORDER" />
        <variable attributes="__local__ private" citdl="String" line="23" name="LEFT" />
        <variable attributes="__local__ private" citdl="String" line="24" name="RIGHT" />
        <variable attributes="__local__ private" citdl="String" line="25" name="TOP" />
        <variable attributes="__local__ private" citdl="String" line="26" name="BOTTOM" />
        <variable attributes="__local__ private" citdl="String" line="27" name="WIDTH" />
        <variable attributes="__local__ private" citdl="Math" line="28" name="MATH" />
        <variable attributes="__local__ private" citdl="String" line="29" name="HIDDEN" />
        <variable attributes="__local__ private" citdl="String" line="30" name="ISCLIPPED" />
        <variable attributes="__local__ private" citdl="String" line="31" name="OVERFLOW" />
        <variable attributes="__local__ private" citdl="String" line="32" name="OVERFLOWX" />
        <variable attributes="__local__ private" citdl="String" line="33" name="OVERFLOWY" />
        <variable attributes="__local__ private" citdl="String" line="34" name="ORIGINALCLIP" />
        <variable attributes="__local__ private" citdl="Object" line="36" lineend="36" name="borders">
          <variable citdl="BORDER" line="36" name="r" />
          <variable citdl="BORDER" line="36" name="b" />
          <variable citdl="BORDER" line="36" name="l" />
          <variable citdl="BORDER" line="36" name="t" />
        </variable>
        <variable attributes="__local__ private" citdl="Object" line="37" lineend="37" name="paddings">
          <variable citdl="PADDING" line="37" name="r" />
          <variable citdl="PADDING" line="37" name="b" />
          <variable citdl="PADDING" line="37" name="l" />
          <variable citdl="PADDING" line="37" name="t" />
        </variable>
        <variable attributes="__local__ private" citdl="Object" line="38" lineend="38" name="margins">
          <variable citdl="MARGIN" line="38" name="r" />
          <variable citdl="MARGIN" line="38" name="b" />
          <variable citdl="MARGIN" line="38" name="l" />
          <variable citdl="MARGIN" line="38" name="t" />
        </variable>
        <variable attributes="__local__ private" citdl="Ext.Element.data" line="39" name="data" />
        <scope attributes="__local__ private" ilk="function" line="43" lineend="45" name="camelFn" returns="a.charAt().toUpperCase()" signature="camelFn(m, a)">
          <variable ilk="argument" name="m" />
          <variable ilk="argument" name="a" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="48" lineend="58" name="addStyles" returns="val" signature="addStyles(sides, styles)">
          <variable ilk="argument" name="sides" />
          <variable ilk="argument" name="styles" />
          <variable attributes="__local__ private" citdl="Number" line="49" name="val" />
          <scope attributes="__local__ private" ilk="function" line="51" lineend="55" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="60" lineend="63" name="chkCache" returns="propCache[prop]" signature="chkCache(prop)">
          <variable ilk="argument" name="prop" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="10" lineend="303" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="String" line="20" name="ZINDEX" />
        <variable attributes="__local__ private" citdl="String" line="20" name="RIGHT" />
        <variable attributes="__local__ private" citdl="Ext.lib.Dom" line="20" name="D" />
        <variable attributes="__local__ private" citdl="String" line="20" name="BOTTOM" />
        <variable attributes="__local__ private" citdl="String" line="20" name="AUTO" />
        <variable attributes="__local__ private" citdl="String" line="20" name="TOP" />
        <variable attributes="__local__ private" citdl="String" line="20" name="RELATIVE" />
        <variable attributes="__local__ private" citdl="String" line="20" name="STATIC" />
        <variable attributes="__local__ private" citdl="String" line="20" name="POSITION" />
        <variable attributes="__local__ private" citdl="String" line="20" name="LEFT" />
        <scope attributes="__local__ private" ilk="function" line="22" lineend="24" name="animTest" returns="this.preanim" signature="animTest(args, animate, i)">
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="animate" />
          <variable ilk="argument" name="i" />
        </scope>
      </scope>
      <scope ilk="function" line="11" lineend="783" name="swfobject" signature="swfobject()">
        <variable attributes="__local__ private" citdl="callbackFn" line="44" name="storedCallbackFn" />
        <variable attributes="__local__ private" citdl="window" line="44" name="win" />
        <variable attributes="__local__ private" citdl="String" line="44" name="OBJECT" />
        <variable attributes="__local__ private" citdl="Boolean" line="44" name="autoHideShow" />
        <variable attributes="__local__ private" citdl="Array" line="44" name="listenersArr" />
        <variable attributes="__local__ private" citdl="abstractAltContent()" line="44" name="storedAltContent" />
        <variable attributes="__local__ private" citdl="Boolean" line="44" name="isExpressInstallActive" />
        <variable attributes="__local__ private" citdl="navigator" line="44" name="nav" />
        <variable attributes="__local__ private" citdl="replaceElemIdStr" line="44" name="storedAltContentId" />
        <variable attributes="__local__ private" citdl="String" line="44" name="UNDEF" />
        <variable citdl="Object" line="44" lineend="79" name="ua">
          <variable citdl="playerVersion" line="79" name="pv" />
          <variable citdl="windows" line="79" name="win" />
          <variable citdl="webkit" line="79" name="wk" />
          <variable citdl="mac" line="79" name="mac" />
          <variable citdl="w3cdom" line="79" name="w3" />
          <variable citdl="ie" line="79" name="ie" />
        </variable>
        <variable attributes="__local__ private" citdl="h.appendChild()" line="44" name="dynamicStylesheet" />
        <variable attributes="__local__ private" citdl="String" line="44" name="ON_READY_STATE_CHANGE" />
        <variable attributes="__local__ private" citdl="String" line="44" name="FLASH_MIME_TYPE" />
        <variable attributes="__local__ private" citdl="Array" line="44" name="objIdArr" />
        <variable attributes="__local__ private" citdl="m" line="44" name="dynamicStylesheetMedia" />
        <variable attributes="__local__ private" citdl="Boolean" line="44" name="plugin" />
        <variable attributes="__local__ private" citdl="Boolean" line="44" name="isDomLoaded" />
        <variable attributes="__local__ private" citdl="Object" line="44" name="doc" />
        <variable attributes="__local__ private" citdl="Array" line="44" name="regObjArr" />
        <variable attributes="__local__ private" line="44" name="storedCallbackObj" />
        <variable attributes="__local__ private" citdl="String" line="44" name="SHOCKWAVE_FLASH" />
        <variable attributes="__local__ private" citdl="Array" line="44" name="domLoadFnArr" />
        <variable attributes="__local__ private" citdl="String" line="44" name="SHOCKWAVE_FLASH_AX" />
        <variable attributes="__local__ private" citdl="String" line="44" name="EXPRESS_INSTALL_ID" />
        <scope attributes="__local__ private" ilk="function" line="87" lineend="129" name="onDomLoad" signature="onDomLoad()">
          <scope attributes="__local__ private" ilk="function" line="97" lineend="102" name="(anonymous)" signature="(anonymous)()" />
          <scope attributes="__local__ private" ilk="function" line="104" lineend="114" name="(anonymous)" signature="(anonymous)()" />
          <scope attributes="__local__ private" ilk="function" line="118" lineend="125" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="131" lineend="143" name="callDomLoadFunctions" signature="callDomLoadFunctions()">
          <variable attributes="__local__ private" citdl="doc.getElementsByTagName()[0].appendChild()" line="134" name="t" />
          <variable attributes="__local__ private" citdl="domLoadFnArr.length" line="139" name="dl" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="145" lineend="152" name="addDomLoadEvent" signature="addDomLoadEvent(fn)">
          <variable ilk="argument" name="fn" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="158" lineend="178" name="addLoadEvent" signature="addLoadEvent(fn)">
          <variable ilk="argument" name="fn" />
          <variable attributes="__local__ private" citdl="win.onload" line="169" name="fnOld" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="183" lineend="190" name="main" signature="main()" />
        <scope attributes="__local__ private" ilk="function" line="199" lineend="227" name="testPlayerVersion" signature="testPlayerVersion()">
          <variable attributes="__local__ private" citdl="doc.getElementsByTagName()[0]" line="200" name="b" />
          <variable attributes="__local__ private" citdl="createElement()" line="201" name="o" />
          <variable attributes="__local__ private" citdl="b.appendChild()" line="203" name="t" />
          <variable attributes="__local__ private" citdl="Number" line="205" name="counter" />
          <scope attributes="__local__ private" ilk="function" line="206" lineend="222" name="(anonymous)" signature="(anonymous)()">
            <variable attributes="__local__ private" citdl="t.GetVariable()" line="208" name="d" />
          </scope>
        </scope>
        <scope attributes="__local__ private" ilk="function" line="231" lineend="286" name="matchVersions" signature="matchVersions()">
          <variable attributes="__local__ private" citdl="regObjArr.length" line="232" name="rl" />
          <variable attributes="__local__ private" citdl="regObjArr[i].id" line="235" name="id" />
          <variable attributes="__local__ private" citdl="regObjArr[i].callbackFn" line="236" name="cb" />
          <variable attributes="__local__ private" citdl="Object" line="237" lineend="237" name="cbObj">
            <variable citdl="id" line="237" name="id" />
            <variable citdl="Boolean" line="237" name="success" />
            <variable citdl="getObjectById()" line="245" name="ref" />
          </variable>
          <variable attributes="__local__ private" citdl="getElementById()" line="239" name="obj" />
          <variable attributes="__local__ private" citdl="Object" line="250" lineend="250" name="att">
            <variable citdl="regObjArr[i].expressInstall" line="251" name="data" />
            <variable citdl="obj.getAttribute()" line="252" name="width" />
            <variable citdl="obj.getAttribute()" line="253" name="height" />
            <variable citdl="obj.getAttribute()" line="254" name="styleclass" />
            <variable citdl="obj.getAttribute()" line="255" name="align" />
          </variable>
          <variable attributes="__local__ private" citdl="Object" line="257" lineend="257" name="par" />
          <variable attributes="__local__ private" citdl="obj.getElementsByTagName()" line="258" name="p" />
          <variable attributes="__local__ private" citdl="p.length" line="259" name="pl" />
          <variable attributes="__local__ private" citdl="getObjectById()" line="276" name="o" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="288" lineend="303" name="getObjectById" returns="r" signature="getObjectById(objectIdStr)">
          <variable ilk="argument" name="objectIdStr" />
          <variable attributes="__local__ private" citdl="o" line="289" name="r" />
          <variable attributes="__local__ private" citdl="getElementById()" line="290" name="o" />
          <variable attributes="__local__ private" citdl="o.getElementsByTagName()[0]" line="296" name="n" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="311" lineend="313" name="canExpressInstall" signature="canExpressInstall()" />
        <scope attributes="__local__ private" ilk="function" line="318" lineend="363" name="showExpressInstall" signature="showExpressInstall(att, par, replaceElemIdStr, callbackFn)">
          <variable ilk="argument" name="att" />
          <variable ilk="argument" name="par" />
          <variable ilk="argument" name="replaceElemIdStr" />
          <variable ilk="argument" name="callbackFn" />
          <variable citdl="Object" line="321" lineend="321" name="storedCallbackObj">
            <variable citdl="replaceElemIdStr" line="321" name="id" />
            <variable citdl="Boolean" line="321" name="success" />
          </variable>
          <variable attributes="__local__ private" citdl="getElementById()" line="322" name="obj" />
          <variable attributes="__local__ private" citdl="String" line="337" name="fv" />
          <variable attributes="__local__ private" citdl="ua.ie" line="337" name="pt" />
          <variable attributes="__local__ private" citdl="createElement()" line="347" name="newObj" />
          <scope attributes="__local__ private" ilk="function" line="352" lineend="359" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="367" lineend="387" name="displayAltContent" signature="displayAltContent(obj)">
          <variable ilk="argument" name="obj" />
          <variable attributes="__local__ private" citdl="createElement()" line="371" name="el" />
          <scope attributes="__local__ private" ilk="function" line="375" lineend="382" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="389" lineend="409" name="abstractAltContent" returns="ac" signature="abstractAltContent(obj)">
          <variable ilk="argument" name="obj" />
          <variable attributes="__local__ private" citdl="createElement()" line="390" name="ac" />
          <variable attributes="__local__ private" citdl="obj.getElementsByTagName()[0]" line="395" name="nestedObj" />
          <variable attributes="__local__ private" citdl="nestedObj.childNodes" line="397" name="c" />
          <variable attributes="__local__ private" citdl="c.length" line="399" name="cl" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="413" lineend="468" name="createSWF" returns="r" signature="createSWF(attObj, parObj, id)">
          <variable ilk="argument" name="attObj" />
          <variable ilk="argument" name="parObj" />
          <variable ilk="argument" name="id" />
          <variable attributes="__local__ private" citdl="getElementById()" line="414" name="el" />
          <variable attributes="__local__ private" citdl="getElementById()" line="414" name="r" />
          <variable attributes="__local__ private" citdl="String" line="421" name="att" />
          <variable attributes="__local__ private" citdl="String" line="435" name="par" />
          <variable attributes="__local__ private" citdl="createElement()" line="446" name="o" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="470" lineend="475" name="createObjParam" signature="createObjParam(el, pName, pValue)">
          <variable ilk="argument" name="el" />
          <variable ilk="argument" name="pName" />
          <variable ilk="argument" name="pValue" />
          <variable attributes="__local__ private" citdl="createElement()" line="471" name="p" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="480" lineend="498" name="removeSWF" signature="removeSWF(id)">
          <variable ilk="argument" name="id" />
          <variable attributes="__local__ private" citdl="getElementById()" line="481" name="obj" />
          <scope attributes="__local__ private" ilk="function" line="485" lineend="492" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="500" lineend="510" name="removeObjectInIE" signature="removeObjectInIE(id)">
          <variable ilk="argument" name="id" />
          <variable attributes="__local__ private" citdl="getElementById()" line="501" name="obj" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="514" lineend="521" name="getElementById" returns="el" signature="getElementById(id)">
          <variable ilk="argument" name="id" />
          <variable attributes="__local__ private" citdl="doc.getElementById()" line="515" name="el" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="523" lineend="525" name="createElement" returns="doc.createElement()" signature="createElement(el)">
          <variable ilk="argument" name="el" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="530" lineend="533" name="addListener" signature="addListener(target, eventType, fn)">
          <variable ilk="argument" name="target" />
          <variable ilk="argument" name="eventType" />
          <variable ilk="argument" name="fn" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="537" lineend="543" name="hasPlayerVersion" signature="hasPlayerVersion(rv)">
          <variable ilk="argument" name="rv" />
          <variable attributes="__local__ private" citdl="ua.pv" line="538" name="pv" />
          <variable attributes="__local__ private" citdl="rv.split()" line="538" name="v" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="548" lineend="579" name="createCSS" signature="createCSS(sel, decl, media, newStyle)">
          <variable ilk="argument" name="sel" />
          <variable ilk="argument" name="decl" />
          <variable ilk="argument" name="media" />
          <variable ilk="argument" name="newStyle" />
          <variable attributes="__local__ private" citdl="doc.getElementsByTagName()[0]" line="550" name="h" />
          <variable attributes="__local__ private" line="552" name="m" />
          <variable attributes="__local__ private" citdl="createElement()" line="559" name="s" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="581" lineend="590" name="setVisibility" signature="setVisibility(id, isVisible)">
          <variable ilk="argument" name="id" />
          <variable ilk="argument" name="isVisible" />
          <variable attributes="__local__ private" citdl="isVisible" line="583" name="v" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="594" lineend="598" name="urlEncodeIfNecessary" returns="hasBadChars" signature="urlEncodeIfNecessary(s)">
          <variable ilk="argument" name="s" />
          <variable attributes="__local__ private" line="595" name="regex" />
          <variable attributes="__local__ private" citdl="regex.exec()" line="596" name="hasBadChars" />
        </scope>
        <variable line="602" name="cleanup" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="11" lineend="179" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="String" line="16" name="beforeend" />
        <variable attributes="__local__ private" citdl="String" line="16" name="beforebegin" />
        <variable attributes="__local__ private" citdl="String" line="16" name="afterend" />
        <variable attributes="__local__ private" line="16" name="pub" />
        <variable attributes="__local__ private" citdl="String" line="16" name="afterbegin" />
        <scope attributes="__local__ private" ilk="function" line="19" lineend="33" name="doInsert" returns="returnElement" signature="doInsert(el, o, returnElement, pos, sibling, append)">
          <variable citdl="Ext.getDom()" ilk="argument" name="el" />
          <variable ilk="argument" name="o" />
          <variable ilk="argument" name="returnElement" />
          <variable ilk="argument" name="pos" />
          <variable ilk="argument" name="sibling" />
          <variable ilk="argument" name="append" />
          <variable attributes="__local__ private" citdl="createDom()" line="21" name="newNode" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="47" lineend="49" name="(anonymous)" signature="(anonymous)()" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="11" lineend="152" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="String" line="18" name="NONE" />
        <variable attributes="__local__ private" citdl="String" line="18" name="XMASKEDRELATIVE" />
        <variable attributes="__local__ private" citdl="String" line="18" name="XMASKED" />
        <variable attributes="__local__ private" citdl="String" line="18" name="VISIBILITY" />
        <variable attributes="__local__ private" citdl="String" line="18" name="HIDDEN" />
        <variable attributes="__local__ private" citdl="Ext.Element.data" line="18" name="data" />
        <variable attributes="__local__ private" citdl="String" line="18" name="DISPLAY" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="11" lineend="147" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="function" line="15" lineend="17" name="isEl" signature="isEl(el)">
          <variable ilk="argument" name="el" />
        </scope>
        <variable attributes="__local__ private" citdl="Ext.DomHelper" line="15" name="DH" />
        <variable attributes="__local__ private" citdl="Ext.getDom" line="15" name="GETDOM" />
        <variable attributes="__local__ private" citdl="Ext.get" line="15" name="GET" />
      </scope>
      <scope attributes="__local__ private" ilk="class" line="14" lineend="157" name="(anonymous)">
        <scope attributes="__local__ private __ctor__" ilk="function" line="14" lineend="157" name="(anonymous)" signature="(anonymous)()">
          <variable citdl="(anonymous)" name="this" />
          <variable attributes="__local__ private" line="15" name="useHasOwn" />
          <scope attributes="__local__ private" ilk="function" line="27" lineend="29" name="pad" returns="n" signature="pad(n)">
            <variable ilk="argument" name="n" />
          </scope>
          <scope attributes="__local__ private" ilk="function" line="30" lineend="32" name="doDecode" returns="eval()" signature="doDecode(json)">
            <variable ilk="argument" name="json" />
          </scope>
          <scope attributes="__local__ private" ilk="function" line="33" lineend="69" name="doEncode" returns="a.join()" signature="doEncode(o)">
            <variable ilk="argument" name="o" />
            <variable attributes="__local__ private" citdl="Array" line="47" name="a" />
            <variable attributes="__local__ private" line="47" name="i" />
            <variable attributes="__local__ private" citdl="Boolean" line="47" name="b" />
            <variable attributes="__local__ private" citdl="o[i]" line="47" name="v" />
          </scope>
          <variable attributes="__local__ private" citdl="Object" line="70" lineend="78" name="m">
            <variable citdl="String" line="71" name="\b" />
            <variable citdl="String" line="72" name="\t" />
            <variable citdl="String" line="73" name="\n" />
            <variable citdl="String" line="74" name="\f" />
            <variable citdl="String" line="75" name="\r" />
            <variable citdl="String" line="76" name="&quot;" />
            <variable citdl="String" line="77" name="\\" />
          </variable>
          <scope attributes="__local__ private" ilk="function" line="79" lineend="93" name="encodeString" returns="String" signature="encodeString(s)">
            <variable ilk="argument" name="s" />
          </scope>
          <scope attributes="__local__ private" ilk="function" line="94" lineend="113" name="encodeArray" returns="a.join()" signature="encodeArray(o)">
            <variable ilk="argument" name="o" />
            <variable attributes="__local__ private" citdl="Array" line="95" name="a" />
            <variable attributes="__local__ private" line="95" name="i" />
            <variable attributes="__local__ private" citdl="Boolean" line="95" name="b" />
            <variable attributes="__local__ private" citdl="o.length" line="95" name="l" />
            <variable attributes="__local__ private" citdl="o[i]" line="95" name="v" />
          </scope>
        </scope>
        <variable line="16" name="isNative" />
        <scope ilk="function" line="115" lineend="122" name="encodeDate" returns="String" signature="encodeDate(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="(anonymous)" name="this" />
        </scope>
        <variable doc="Encodes an Object, Array or other value" line="129" name="encode" />
        <variable doc="Decodes (parses) a JSON string to an object. If the JSON is invalid, this function throws a SyntaxError unless the safe option is set." line="146" name="decode" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="15" lineend="1182" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Ext.EventManager" line="17" name="Event" />
        <variable attributes="__local__ private" citdl="Ext.lib.Dom" line="18" name="Dom" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="16" lineend="189" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Object" line="22" lineend="22" name="validActions" />
      </scope>
      <scope ilk="class" line="19" lineend="20" name="DataView" />
      <scope ilk="class" line="19" lineend="20" name="View" />
      <scope attributes="__local__ private" ilk="function" line="19" lineend="526" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Number" line="20" name="idSeed" />
        <variable attributes="__local__ private" citdl="Ext" line="20" name="E" />
      </scope>
      <scope ilk="class" line="23" lineend="24" name="GridPanel" />
      <scope attributes="__local__ private" ilk="function" line="23" lineend="324" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="function" line="32" lineend="38" name="getDisplay" returns="d" signature="getDisplay(dom)">
          <variable ilk="argument" name="dom" />
          <variable attributes="__local__ private" citdl="data()" line="33" name="d" />
        </scope>
        <variable attributes="__local__ private" citdl="String" line="32" name="NONE" />
        <variable attributes="__local__ private" citdl="Ext.Element.DISPLAY" line="32" name="ELDISPLAY" />
        <variable attributes="__local__ private" citdl="String" line="32" name="VISIBILITY" />
        <variable attributes="__local__ private" citdl="String" line="32" name="ORIGINALDISPLAY" />
        <variable attributes="__local__ private" citdl="String" line="32" name="VISMODE" />
        <variable attributes="__local__ private" citdl="String" line="32" name="HIDDEN" />
        <variable attributes="__local__ private" citdl="Ext.Element.data" line="32" name="data" />
        <variable attributes="__local__ private" citdl="String" line="32" name="DISPLAY" />
        <scope attributes="__local__ private" ilk="function" line="39" lineend="45" name="getVisMode" returns="m" signature="getVisMode(dom)">
          <variable ilk="argument" name="dom" />
          <variable attributes="__local__ private" citdl="data()" line="40" name="m" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="24" lineend="39" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="parseInt()" line="25" name="height" />
        <scope attributes="__local__ private" ilk="function" line="34" lineend="37" name="(anonymous)" signature="(anonymous)()" />
      </scope>
      <scope ilk="class" line="25" lineend="26" name="Grid" />
      <scope attributes="__local__ private" ilk="function" line="26" lineend="28" name="(anonymous)" signature="(anonymous)()" />
      <scope ilk="class" line="27" lineend="28" name="TabPanelItem" />
      <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: An extended {@link Ext.Element} object that supports a shadow and shim, constrain to viewport and&#xA;automatic maintaining of shadow/shim positions." ilk="function" line="27" lineend="466" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Ext.Element.prototype" line="65" name="supr" />
        <variable attributes="__local__ private" citdl="Array" line="68" name="shims" />
      </scope>
      <scope ilk="class" line="31" lineend="32" name="Field" />
      <variable citdl="Object" line="32" name="view">
        <variable citdl="Boolean" line="32" name="headersDisabled" />
      </variable>
      <scope ilk="class" line="35" lineend="36" name="LoadMask" />
      <variable citdl="Object" line="36" name="o">
        <variable citdl="Object" line="7" lineend="7" name="debug">
          <variable citdl="Ext.extend()" line="228" name="ScriptsPanel" />
          <variable citdl="Ext.extend()" line="249" name="LogPanel" />
          <variable citdl="Ext.extend()" line="395" name="DomTree" />
          <variable citdl="Ext.extend()" line="417" name="ComponentNodeUI" />
          <variable citdl="Ext.extend()" line="504" name="ComponentInspector" />
          <variable citdl="Ext.extend()" line="572" name="ComponentInfoPanel" />
          <variable citdl="Ext.extend()" line="623" name="ColumnNodeUI" />
          <variable citdl="Ext.extend()" line="733" name="ObjectInspector" />
          <variable citdl="Ext.extend()" line="786" name="StoreInspector" />
          <variable line="789" name="HtmlNode" />
          <variable citdl="String" line="795" name="n" />
          <variable citdl="String" line="795" name="v" />
        </variable>
        <variable citdl="Object" line="11" lineend="20" name="FlashEventProxy">
          <scope ilk="function" line="12" lineend="19" name="onEvent" signature="onEvent(id, e)">
            <variable ilk="argument" name="id" />
            <variable ilk="argument" name="e" />
            <variable citdl="FlashEventProxy" name="this" />
            <variable attributes="__local__ private" citdl="Ext.getCmp()" line="13" name="fp" />
          </scope>
        </variable>
        <scope doc="Framework-wide error-handler.  Developers can override this method to provide&#xA;custom exception-handling.  Framework errors will often extend from the base&#xA;Ext.Error class." ilk="function" line="13" lineend="15" name="handleError" signature="handleError(e)">
          <variable citdl="Object/Error" doc="The thrown exception object." ilk="argument" name="e" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Object" line="14" name="dd">
          <scope classrefs="Ext.util.Observable" ilk="class" line="11" lineend="57" name="DragTracker">
            <scope attributes="__ctor__" ilk="function" line="11" lineend="57" name="DragTracker" signature="DragTracker(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DragTracker" name="this" />
            </scope>
            <variable citdl="Ext.lib.Region" line="52" name="dragRegion" />
            <variable citdl="Boolean" doc="Defaults to false." line="64" name="active" />
            <variable citdl="Number" doc="Defaults to 5." line="69" name="tolerance" />
            <variable citdl="Boolean" doc="Defaults to false. Specify true to defer trigger start by 1000 ms.&#xA;Specify a Number for the number of milliseconds to defer trigger start." line="75" name="autoStart" />
            <scope ilk="function" line="77" lineend="81" name="initEl" signature="initEl(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <variable citdl="Ext.get()" line="78" name="el" />
            <scope ilk="function" line="83" lineend="85" name="destroy" signature="destroy()" />
            <scope ilk="function" line="87" lineend="102" name="onMouseDown" signature="onMouseDown(e, target)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="target" />
              <variable attributes="__local__ private" citdl="Ext.getDoc()" line="94" name="doc" />
            </scope>
            <variable citdl="this.lastXY" line="89" name="startXY" />
            <variable citdl="e.getXY()" line="89" name="lastXY" />
            <variable citdl="this.delegate" line="90" name="dragTarget" />
            <variable citdl="this.triggerStart.defer()" line="99" name="timer" />
            <scope ilk="function" line="104" lineend="125" name="onMouseMove" signature="onMouseMove(e, target)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="target" />
              <variable attributes="__local__ private" citdl="this.startXY" line="113" name="s" />
              <variable attributes="__local__ private" citdl="e.getXY()" line="113" name="xy" />
            </scope>
            <scope ilk="function" line="127" lineend="142" name="onMouseUp" signature="onMouseUp(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.getDoc()" line="128" name="doc" />
              <variable attributes="__local__ private" citdl="this.active" line="134" name="wasActive" />
            </scope>
            <scope ilk="function" line="144" lineend="149" name="triggerStart" signature="triggerStart(isTimer)">
              <variable ilk="argument" name="isTimer" />
            </scope>
            <scope ilk="function" line="151" lineend="156" name="clearStart" signature="clearStart()" />
            <scope ilk="function" line="158" lineend="161" name="stopSelect" returns="Boolean" signature="stopSelect(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="163" lineend="165" name="onBeforeStart" signature="onBeforeStart(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="167" lineend="169" name="onStart" signature="onStart(xy)">
              <variable ilk="argument" name="xy" />
            </scope>
            <scope ilk="function" line="171" lineend="173" name="onDrag" signature="onDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="175" lineend="177" name="onEnd" signature="onEnd(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="179" lineend="181" name="getDragTarget" returns="this.dragTarget" signature="getDragTarget()" />
            <scope ilk="function" line="183" lineend="185" name="getDragCt" returns="this.el" signature="getDragCt()" />
            <scope ilk="function" line="187" lineend="190" name="getXY" returns="constrain" signature="getXY(constrain)">
              <variable ilk="argument" name="constrain" />
            </scope>
            <scope ilk="function" line="192" lineend="196" name="getOffset" returns="Array" signature="getOffset(constrain)">
              <variable ilk="argument" name="constrain" />
              <variable attributes="__local__ private" citdl="this.getXY()" line="193" name="xy" />
              <variable attributes="__local__ private" citdl="this.startXY" line="194" name="s" />
            </scope>
            <variable citdl="Object" line="198" lineend="216" name="constrainModes">
              <scope ilk="function" line="199" lineend="215" name="point" returns="Array" signature="point(xy)">
                <variable ilk="argument" name="xy" />
                <variable citdl="constrainModes" name="this" />
                <variable attributes="__local__ private" citdl="this.dragRegion" line="205" name="dr" />
              </scope>
              <variable citdl="this.getDragCt().getRegion()" line="202" name="elRegion" />
            </variable>
          </scope>
          <scope ilk="class" line="13" lineend="21" name="Registry">
            <variable citdl="Object" line="13" lineend="126" name="Registry">
              <scope doc="Resgister a drag drop element&#xA;&#xA;Value      Description&#xA;---------  ------------------------------------------&#xA;handles    Array of DOM nodes that trigger dragging&#xA;for the element being registered&#xA;isHandle   True if the element passed in triggers&#xA;dragging itself, else false" ilk="function" line="47" lineend="63" name="register" signature="register(el, data)">
                <variable citdl="document.getElementById()" ilk="argument" name="el" />
                <variable citdl="Object" doc="(optional) An custom data object that will be passed between the elements that are involved&#xA;in drag drop operations.  You can populate this object with any arbitrary properties that your own code&#xA;knows how to interpret, plus there are some specific properties known to the Registry that should be&#xA;populated in the data object (if applicable):" ilk="argument" name="data" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="data.handles" line="58" name="hs" />
              </scope>
              <scope doc="Unregister a drag drop element" ilk="function" line="69" lineend="81" name="unregister" signature="unregister(el)">
                <variable ilk="argument" name="el" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="getId()" line="70" name="id" />
                <variable attributes="__local__ private" citdl="elements[id]" line="71" name="data" />
                <variable attributes="__local__ private" citdl="data.handles" line="75" name="hs" />
              </scope>
              <scope doc="Returns the handle registered for a DOM Node by id" ilk="function" line="88" lineend="93" name="getHandle" returns="Object" signature="getHandle(id)">
                <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
                <variable citdl="Registry" name="this" />
              </scope>
              <scope doc="Returns the handle that is registered for the DOM node that is the target of the event" ilk="function" line="100" lineend="103" name="getHandleFromEvent" returns="Object" signature="getHandleFromEvent(e)">
                <variable citdl="Event" doc="The event" ilk="argument" name="e" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="101" name="t" />
              </scope>
              <scope doc="Returns a custom data object that is registered for a DOM node by id" ilk="function" line="110" lineend="115" name="getTarget" returns="Object" signature="getTarget(id)">
                <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
                <variable citdl="Registry" name="this" />
              </scope>
              <scope doc="Returns a custom data object that is registered for the DOM node that is the target of the event" ilk="function" line="122" lineend="125" name="getTargetFromEvent" returns="Object" signature="getTargetFromEvent(e)">
                <variable citdl="Event" doc="The event" ilk="argument" name="e" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="123" name="t" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Object" ilk="class" line="14" lineend="171" name="StatusProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the&#xA;default drag proxy used by all Ext.dd components." ilk="function" line="14" lineend="28" name="StatusProxy" signature="StatusProxy(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="this.id" line="16" name="id" />
            <variable citdl="Ext.Layer" line="25" name="el" />
            <variable citdl="Ext.get()" line="26" name="ghost" />
            <variable citdl="this.dropNotAllowed" line="27" name="dropStatus" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is allowed (defaults to &quot;x-dd-drop-ok&quot;)." line="35" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="40" name="dropNotAllowed" />
            <scope doc="Updates the proxy&apos;s visual element to indicate the status of whether or not drop is allowed&#xA;over the current target element." ilk="function" line="47" lineend="53" name="setStatus" signature="setStatus(cssClass)">
              <variable citdl="String" doc="The css class for the new drop status indicator image" ilk="argument" name="cssClass" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Resets the status indicator to the default dropNotAllowed value" ilk="function" line="59" lineend="65" name="reset" signature="reset(clearGhost)">
              <variable citdl="Boolean" doc="True to also remove all content from the ghost, false to preserve it" ilk="argument" name="clearGhost" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Updates the contents of the ghost element" ilk="function" line="72" lineend="84" name="update" signature="update(html)">
              <variable citdl="String/HTMLElement" doc="The html that will replace the current innerHTML of the ghost element, or a&#xA;DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first)." ilk="argument" name="html" />
              <variable citdl="StatusProxy" name="this" />
              <variable attributes="__local__ private" citdl="this.ghost.dom.firstChild" line="80" name="el" />
            </scope>
            <scope doc="Returns the underlying proxy {@link Ext.Layer}" ilk="function" line="90" lineend="92" name="getEl" returns="Ext.Layer" signature="getEl()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Returns the ghost element" ilk="function" line="98" lineend="100" name="getGhost" returns="Ext.Element" signature="getGhost()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Hides the proxy" ilk="function" line="106" lineend="111" name="hide" signature="hide(clear)">
              <variable citdl="Boolean" doc="True to reset the status and clear the ghost contents, false to preserve them" ilk="argument" name="clear" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Stops the repair animation if it&apos;s currently running" ilk="function" line="116" lineend="120" name="stop" signature="stop()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Displays this proxy" ilk="function" line="125" lineend="127" name="show" signature="show()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Force the Layer to sync its shadow and shim positions to the element" ilk="function" line="132" lineend="134" name="sync" signature="sync()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Causes the proxy to return to its position of origin via an animation.  Should be called after an&#xA;invalid drop operation by the item being dragged." ilk="function" line="143" lineend="160" name="repair" signature="repair(xy, callback, scope)">
              <variable citdl="Array" doc="The XY position of the element ([x, y])" ilk="argument" name="xy" />
              <variable citdl="Function" doc="The function to call after the repair is complete" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to execute the callback" ilk="argument" name="scope" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="callback" line="144" name="callback" />
            <variable citdl="scope" line="145" name="scope" />
            <variable citdl="this.el.shift()" line="156" name="anim" />
            <scope ilk="function" line="163" lineend="170" name="afterRepair" signature="afterRepair()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="15" lineend="109" name="PanelProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom drag proxy implementation specific to {@link Ext.Panel}s. This class is primarily used internally&#xA;for the Panel&apos;s drag drop implementation, and should never need to be created directly." ilk="function" line="15" lineend="19" name="PanelProxy" signature="PanelProxy(panel, config)">
              <variable doc="The {@link Ext.Panel} to proxy for" ilk="argument" name="panel" />
              <variable doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <variable citdl="panel" line="16" name="panel" />
            <variable citdl="this.panel.id" line="17" name="id" />
            <variable citdl="Boolean" doc="false to drag with no proxy (defaults to true)." line="26" name="insertProxy" />
            <variable citdl="Ext.emptyFn" line="29" name="setStatus" />
            <variable citdl="Ext.emptyFn" line="30" name="reset" />
            <variable citdl="Ext.emptyFn" line="31" name="update" />
            <variable citdl="Ext.emptyFn" line="32" name="stop" />
            <variable citdl="Ext.emptyFn" line="33" name="sync" />
            <scope doc="Gets the proxy&apos;s element" ilk="function" line="39" lineend="41" name="getEl" returns="Element" signature="getEl()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Gets the proxy&apos;s ghost element" ilk="function" line="47" lineend="49" name="getGhost" returns="Element" signature="getGhost()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Gets the proxy&apos;s element" ilk="function" line="55" lineend="57" name="getProxy" returns="Element" signature="getProxy()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Hides the proxy" ilk="function" line="62" lineend="72" name="hide" signature="hide()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Shows the proxy" ilk="function" line="77" lineend="87" name="show" signature="show()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <variable citdl="this.panel.createGhost()" line="79" name="ghost" />
            <variable citdl="this.panel.el.insertSibling()" line="82" name="proxy" />
            <scope ilk="function" line="90" lineend="95" name="repair" signature="repair(xy, callback, scope)">
              <variable ilk="argument" name="xy" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel&#xA;to keep the proxy sync&apos;d to the Panel&apos;s location." ilk="function" line="104" lineend="108" name="moveProxy" signature="moveProxy(parentNode, before)">
              <variable citdl="HTMLElement" doc="The proxy&apos;s parent DOM node" ilk="argument" name="parentNode" />
              <variable citdl="HTMLElement" doc="(optional) The sibling node before which the proxy should be inserted (defaults&#xA;to the parent&apos;s last child if not specified)" ilk="argument" name="before" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DDProxy" ilk="class" line="15" lineend="30" name="DragSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element draggable." ilk="function" line="15" lineend="30" name="DragSource" signature="DragSource(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragSource" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="16" name="el" />
            <variable citdl="Object" line="18" lineend="18" name="dragData" />
            <variable citdl="Ext.dd.StatusProxy" line="24" name="proxy" />
            <variable citdl="Boolean" line="29" name="dragging" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to undefined)." line="42" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class returned to the drag source when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="47" name="dropNotAllowed" />
            <scope doc="Returns the data object associated with this drag source" ilk="function" line="53" lineend="55" name="getDragData" returns="Object" signature="getDragData(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="58" lineend="81" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="Ext.dd.DragDropMgr.getDDById()" line="59" name="target" />
              <variable attributes="__local__ private" citdl="target.notifyEnter()" line="63" name="status" />
            </scope>
            <variable citdl="target" line="60" name="cachedTarget" />
            <scope doc="An empty function by default, but provided so that you can perform a custom action&#xA;before the dragged item enters the drop target and optionally cancel the onDragEnter." ilk="function" line="91" lineend="93" name="beforeDragEnter" returns="Boolean" signature="beforeDragEnter(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="96" lineend="99" name="alignElWithMouse" signature="alignElWithMouse()" />
            <scope ilk="function" line="102" lineend="122" name="onDragOver" signature="onDragOver(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.cachedTarget" line="103" name="target" />
              <variable attributes="__local__ private" citdl="target.notifyOver()" line="106" name="status" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action&#xA;while the dragged item is over the drop target and optionally cancel the onDragOver." ilk="function" line="132" lineend="134" name="beforeDragOver" returns="Boolean" signature="beforeDragOver(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="137" lineend="157" name="onDragOut" signature="onDragOut(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.cachedTarget" line="138" name="target" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action before the dragged&#xA;item is dragged out of the target without dropping, and optionally cancel the onDragOut." ilk="function" line="167" lineend="169" name="beforeDragOut" returns="Boolean" signature="beforeDragOut(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="172" lineend="198" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.cachedTarget" line="173" name="target" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action before the dragged&#xA;item is dropped onto the target and optionally cancel the onDragDrop." ilk="function" line="208" lineend="210" name="beforeDragDrop" returns="Boolean" signature="beforeDragDrop(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="213" lineend="226" name="onValidDrop" signature="onValidDrop(target, e, id)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="229" lineend="231" name="getRepairXY" returns="this.el.getXY()" signature="getRepairXY(e, data)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="234" lineend="254" name="onInvalidDrop" signature="onInvalidDrop(target, e, id)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <variable line="240" name="cacheTarget" />
            <scope ilk="function" line="257" lineend="262" name="afterRepair" signature="afterRepair()" />
            <scope doc="An empty function by default, but provided so that you can perform a custom action after an invalid&#xA;drop has occurred." ilk="function" line="272" lineend="274" name="beforeInvalidDrop" returns="Boolean" signature="beforeInvalidDrop(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="277" lineend="287" name="handleMouseDown" signature="handleMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.getDragData()" line="281" name="data" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action before the initial&#xA;drag event begins and optionally cancel it." ilk="function" line="296" lineend="298" name="onBeforeDrag" returns="Boolean" signature="onBeforeDrag(data, e)">
              <variable citdl="Object" doc="An object containing arbitrary data to be shared with drop targets" ilk="argument" name="data" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="An empty function by default, but provided so that you can perform a custom action once the initial&#xA;drag event has begun.  The drag cannot be canceled from this function." line="306" name="onStartDrag" />
            <scope ilk="function" line="309" lineend="315" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" line="318" lineend="324" name="onInitDrag" returns="Boolean" signature="onInitDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable attributes="__local__ private" citdl="this.el.dom.cloneNode()" line="319" name="clone" />
            </scope>
            <scope doc="Returns the drag source&apos;s underlying {@link Ext.dd.StatusProxy}" ilk="function" line="330" lineend="332" name="getProxy" returns="Ext.dd.StatusProxy" signature="getProxy()" />
            <scope doc="Hides the drag source&apos;s {@link Ext.dd.StatusProxy}" ilk="function" line="337" lineend="341" name="hideProxy" signature="hideProxy()" />
            <scope ilk="function" line="344" lineend="346" name="triggerCacheRefresh" signature="triggerCacheRefresh()" />
            <scope ilk="function" line="349" lineend="350" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="353" lineend="355" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="358" lineend="359" name="onEndDrag" signature="onEndDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="362" lineend="364" name="autoOffset" signature="autoOffset(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DDTarget" ilk="class" line="16" lineend="28" name="DropTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element a drop target that can have&#xA;draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided." ilk="function" line="16" lineend="28" name="DropTarget" signature="DropTarget(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropTarget" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="17" name="el" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to undefined)." line="44" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class returned to the drag source when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="49" name="dropNotAllowed" />
            <variable citdl="Boolean" line="52" name="isTarget" />
            <variable citdl="Boolean" line="55" name="isNotifyTarget" />
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source is now over the&#xA;target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element&#xA;and returns the dropAllowed config value.  This method should be overridden if drop validation is required." ilk="function" line="67" lineend="72" name="notifyEnter" returns="String" signature="notifyEnter(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the target.&#xA;This method will be called on every mouse movement while the drag source is over the drop target.&#xA;This default implementation simply returns the dropAllowed config value." ilk="function" line="84" lineend="86" name="notifyOver" returns="String" signature="notifyOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source has been dragged&#xA;out of the target without dropping.  This default implementation simply removes the CSS class specified by&#xA;overClass (if any) from the drop element." ilk="function" line="96" lineend="100" name="notifyOut" signature="notifyOut(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the dragged item has&#xA;been dropped on it.  This method has no default implementation and returns false, so you must provide an&#xA;implementation that does something to process the drop event and returns true so that the drag source&apos;s&#xA;repair action does not run." ilk="function" line="112" lineend="114" name="notifyDrop" returns="Boolean" signature="notifyDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
          </scope>
          <scope ilk="class" line="27" lineend="41" name="ScrollManager">
            <variable citdl="Object" line="27" lineend="200" name="ScrollManager">
              <scope doc="Registers new overflow element(s) to auto scroll" ilk="function" line="126" lineend="135" name="register" signature="register(el)">
                <variable citdl="Mixed/Array" doc="The id of or the element to be scrolled or an array of either" ilk="argument" name="el" />
                <variable citdl="ScrollManager" name="this" />
              </scope>
              <scope doc="Unregisters overflow element(s) so they are no longer scrolled" ilk="function" line="141" lineend="150" name="unregister" signature="unregister(el)">
                <variable citdl="Mixed/Array" doc="The id of or the element to be removed or an array of either" ilk="argument" name="el" />
                <variable citdl="ScrollManager" name="this" />
              </scope>
              <variable citdl="Number" doc="The number of pixels from the top or bottom edge of a container the pointer needs to be to&#xA;trigger scrolling (defaults to 25)" line="157" name="vthresh" />
              <variable citdl="Number" doc="The number of pixels from the right or left edge of a container the pointer needs to be to&#xA;trigger scrolling (defaults to 25)" line="163" name="hthresh" />
              <variable citdl="Number" doc="The number of pixels to scroll in each scroll increment (defaults to 50)" line="169" name="increment" />
              <variable citdl="Number" doc="The frequency of scrolls in milliseconds (defaults to 500)" line="175" name="frequency" />
              <variable citdl="Boolean" doc="True to animate the scroll (defaults to true)" line="181" name="animate" />
              <variable citdl="Number" doc="The animation duration in seconds -&#xA;MUST BE less than Ext.dd.ScrollManager.frequency! (defaults to .4)" line="188" name="animDuration" />
              <scope doc="Manually trigger a cache refresh." ilk="function" line="193" lineend="199" name="refreshCache" signature="refreshCache()">
                <variable citdl="ScrollManager" name="this" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Object" ilk="class" line="64" lineend="1180" name="DragDrop">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines the interface and base operation of items that that can be&#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver and onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&#xA;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with&#xA;other DragDrop objects.&#xA;handle element(s): The drag operation only occurs if the element that&#xA;was clicked matches a handle element.  By default this is the linked&#xA;element, but there are times that you will want only a portion of the&#xA;linked element to initiate the drag operation, and the setHandleElId()&#xA;method provides a way to define this.&#xA;drag element: this represents the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link Ext.dd.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link Ext.dd.DDProxy}.&#xA;&#xA;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any&#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&#xA;dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&#xA;Since none of the event handlers have been implemented, nothing would&#xA;actually happen if you were to run the code above.  Normally you would&#xA;override this class or one of the default implementations, but you can&#xA;also override the methods you want on an instance of the class...&#xA;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}" ilk="function" line="64" lineend="68" name="DragDrop" signature="DragDrop(id, sGroup, config)">
              <variable citdl="String" doc="of the element that is linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DragDrop:&#xA;padding, isTarget, maintainOffset, primaryButtonOnly" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="String" doc="Set to false to enable a DragDrop object to fire drag events while dragging&#xA;over its own Element. Defaults to true - DragDrop objects do not by default&#xA;fire drag events to themselves." line="88" name="id" />
            <variable citdl="Object" doc="Configuration attributes passed into the constructor" line="95" name="config" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The id of the element that will be dragged.  By default this is same&#xA;as the linked element , but could be changed to another element. Ex:&#xA;Ext.dd.DDProxy" line="105" name="dragElId" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The ID of the element that initiates the drag operation.  By default&#xA;this is the linked element, but could be changed to be a child of this&#xA;element.  This lets us do things like only starting the drag when the&#xA;header element within the linked html element is clicked." line="116" name="handleElId" />
            <variable citdl="Object" doc="An object who&apos;s property names identify HTML tags to be considered invalid as drag handles.&#xA;A non-null property value identifies the tag as invalid. Defaults to the&#xA;following value which prevents drag operations from being initiated by &amp;lt;a&gt; elements:&#xA;A: &quot;A&quot;" line="128" lineend="628" name="invalidHandleTypes">
              <variable citdl="String" line="628" name="A" />
            </variable>
            <variable citdl="Object" doc="An object who&apos;s property names identify the IDs of elements to be considered invalid as drag handles.&#xA;A non-null property value identifies the ID as invalid. For example, to prevent&#xA;dragging from being initiated on element ID &quot;foo&quot;, use:&#xA;foo: true" line="140" lineend="629" name="invalidHandleIds" />
            <variable citdl="Array" doc="An Array of CSS class names for elements to be considered in valid as drag handles." line="147" name="invalidHandleClasses" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="156" name="startPageX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="165" name="startPageY" />
            <variable citdl="true, &apos;group2&apos;:true" doc="The group defines a logical collection of DragDrop objects that are&#xA;related.  Instances only get events when interacting with other&#xA;DragDrop object in the same group.  This lets us define multiple&#xA;groups using a single DragDrop subclass if we want." line="175" lineend="606" name="groups" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Individual drag/drop instances can be locked.  This will prevent&#xA;onmousedown start drag." line="184" name="locked" />
            <scope doc="Lock this instance" ilk="function" line="190" lineend="190" name="lock" signature="lock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="When set to true, other DD objects in cooperating DDGroups do not receive&#xA;notification events when this DD object is dragged over them. Defaults to false." line="198" name="moveOnly" />
            <scope doc="Unlock this instace" ilk="function" line="204" lineend="204" name="unlock" signature="unlock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="By default, all instances can be a drop target.  This can be disabled by&#xA;setting isTarget to false." line="212" name="isTarget" />
            <variable citdl="Array" doc="The padding configured for this drag and drop object for calculating&#xA;the drop zone intersection with this object." line="220" name="padding" />
            <variable attributes="private" citdl="Ext.getDom()" doc="PRIVATE: Cached reference to the linked element" line="227" name="_domRef" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Internal typeof flag" line="234" name="__ygDragDrop" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when horizontal contraints are applied" line="242" name="constrainX" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when vertical contraints are applied" line="250" name="constrainY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The left constraint" line="258" name="minX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The right constraint" line="266" name="maxX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The up constraint" line="275" name="minY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The down constraint" line="283" name="maxY" />
            <variable citdl="Boolean" doc="Maintain offsets when we resetconstraints.  Set to true when you want&#xA;the position of the element relative to its parent to stay the same&#xA;when the page changes" line="293" name="maintainOffset" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;horizontal graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="302" name="xTicks" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;vertical graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="311" name="yTicks" />
            <variable citdl="Boolean" doc="By default the drag and drop instance will only respond to the primary&#xA;button click (left button for a right-handed mouse).  Set to true to&#xA;allow drag and drop to start with any mouse click that is propogated&#xA;by the browser" line="321" name="primaryButtonOnly" />
            <variable citdl="Boolean" doc="The availabe property is false until the linked dom element is accessible." line="328" name="available" />
            <variable citdl="Boolean" doc="By default, drags can only be initiated if the mousedown occurs in the&#xA;region the linked element is.  This is done in part to work around a&#xA;bug in some browsers that mis-report the mousedown if the previous&#xA;mouseup happened outside of the window.  This property is set to true&#xA;if outer handles are defined." line="341" name="hasOuterHandles" />
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the startDrag event" ilk="function" line="348" lineend="348" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called after a drag/drop object is clicked&#xA;and the drag or mousedown time thresholds have beeen met." ilk="function" line="357" lineend="357" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDrag event" ilk="function" line="364" lineend="364" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called during the onMouseMove event while dragging an&#xA;object." ilk="function" line="372" lineend="372" name="onDrag" signature="onDrag(e)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element fist begins hovering over&#xA;another DragDrop obj" ilk="function" line="383" lineend="383" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of one or more&#xA;dragdrop items being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOver event" ilk="function" line="390" lineend="390" name="b4DragOver" signature="b4DragOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element is hovering over another&#xA;DragDrop obj" ilk="function" line="401" lineend="401" name="onDragOver" signature="onDragOver(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of dd items&#xA;being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOut event" ilk="function" line="408" lineend="408" name="b4DragOut" signature="b4DragOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when we are no longer hovering over an element" ilk="function" line="418" lineend="418" name="onDragOut" signature="onDragOut(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was hovering over.  In INTERSECT mode, an array of dd items&#xA;that the mouse is no longer over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragDrop event" ilk="function" line="425" lineend="425" name="b4DragDrop" signature="b4DragDrop(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on another DragDrop&#xA;obj" ilk="function" line="436" lineend="436" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was dropped on.  In INTERSECT mode, an array of dd items this&#xA;was dropped on." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on an area with no&#xA;drop target" ilk="function" line="444" lineend="444" name="onInvalidDrop" signature="onInvalidDrop(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the endDrag event" ilk="function" line="451" lineend="451" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Fired when we are done dragging the object" ilk="function" line="458" lineend="458" name="endDrag" signature="endDrag(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code executed immediately before the onMouseDown event" ilk="function" line="466" lineend="466" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mousedown" ilk="function" line="473" lineend="473" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mouseup" ilk="function" line="480" lineend="480" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Override the onAvailable method to do what is needed after the initial&#xA;position was determined." ilk="function" line="487" lineend="488" name="onAvailable" signature="onAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Object" doc="Provides default constraint padding to &quot;constrainTo&quot; elements (defaults to {left: 0, right:0, top:0, bottom:0})." line="494" lineend="494" name="defaultPadding">
              <variable citdl="Number" line="494" name="top" />
              <variable citdl="Number" line="494" name="right" />
              <variable citdl="Number" line="494" name="bottom" />
              <variable citdl="Number" line="494" name="left" />
            </variable>
            <scope doc="Initializes the drag drop object&apos;s constraints to restrict movement to a certain element.&#xA;&#xA;Usage:&#xA;var dd = new Ext.dd.DDProxy(&quot;dragDiv1&quot;, &quot;proxytest&quot;,&#xA;{ dragElId: &quot;existingProxyDiv&quot; });&#xA;dd.startDrag = function(){&#xA;this.constrainTo(&quot;parent-id&quot;);&#xA;Or you can initalize it using the {@link Ext.Element} object:&#xA;Ext.get(&quot;dragDiv1&quot;).initDDProxy(&quot;proxytest&quot;, {dragElId: &quot;existingProxyDiv&quot;}, {&#xA;startDrag : function(){&#xA;this.constrainTo(&quot;parent-id&quot;);&#xA;});" ilk="function" line="521" lineend="550" name="constrainTo" signature="constrainTo(constrainTo, pad, inContent)">
              <variable citdl="Mixed" doc="The element to constrain to." ilk="argument" name="constrainTo" />
              <variable citdl="Object/Number" doc="(optional) Pad provides a way to specify &quot;padding&quot; of the constraints,&#xA;and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or&#xA;an object containing the sides to pad. For example: {right:10, bottom:10}" ilk="argument" name="pad" />
              <variable citdl="Boolean" doc="(optional) Constrain the draggable in the content box of the element (inside padding and borders)" ilk="argument" name="inContent" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get().getBox()" line="526" name="b" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="527" name="ce" />
              <variable attributes="__local__ private" citdl="ce.getScroll()" line="528" name="s" />
              <variable attributes="__local__ private" citdl="Object" line="529" lineend="534" name="c">
                <variable citdl="s.top" line="531" name="y" />
                <variable citdl="s.left" line="531" name="x" />
                <variable citdl="Ext.lib.Dom.getViewHeight()" line="531" name="height" />
                <variable citdl="Ext.lib.Dom.getViewWidth()" line="531" name="width" />
              </variable>
              <variable attributes="__local__ private" citdl="ce.dom" line="529" name="cd" />
              <variable attributes="__local__ private" citdl="ce.getXY()" line="533" name="xy" />
              <variable attributes="__local__ private" citdl="b.y" line="538" name="topSpace" />
              <variable attributes="__local__ private" citdl="b.x" line="539" name="leftSpace" />
            </scope>
            <scope doc="Returns a reference to the linked element" ilk="function" line="557" lineend="563" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the actual element to drag.  By default this is&#xA;the same as the html element, but it can be assigned to another&#xA;element. An example of this can be found in Ext.dd.DDProxy" ilk="function" line="572" lineend="574" name="getDragEl" returns="HTMLElement" signature="getDragEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Sets up the DragDrop object.  Must be called in the constructor of any&#xA;Ext.dd.DragDrop subclass" ilk="function" line="584" lineend="588" name="init" signature="init(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Initializes Targeting functionality only... the object does not&#xA;get a mousedown handler." ilk="function" line="598" lineend="635" name="initTarget" signature="initTarget(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Ext.dd.DDM" line="604" name="DDM" />
            <scope doc="Applies the configuration parameters that were passed into the constructor.&#xA;This is supposed to happen at each level through the inheritance chain.  So&#xA;a DDProxy implentation will execute apply config on DDProxy, DD, and&#xA;DragDrop in order to get all of the parameters that are available in&#xA;each object." ilk="function" line="645" lineend="654" name="applyConfig" signature="applyConfig()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the linked element is available" ilk="function" line="661" lineend="665" name="handleOnAvailable" signature="handleOnAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Configures the padding for the target zone in px.  Effectively expands&#xA;(or reduces) the virtual object size for targeting calculations.&#xA;Supports css-style shorthand; if only one parameter is passed, all sides&#xA;will have that padding, and if only two are passed, the top and bottom&#xA;will have the first param, the left and right the second." ilk="function" line="679" lineend="688" name="setPadding" signature="setPadding(iTop, iRight, iBot, iLeft)">
              <variable citdl="Number" doc="Top pad" ilk="argument" name="iTop" />
              <variable citdl="Number" doc="Right pad" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="Bot pad" ilk="argument" name="iBot" />
              <variable citdl="Number" doc="Left pad" ilk="argument" name="iLeft" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Stores the initial placement of the linked element." ilk="function" line="696" lineend="716" name="setInitPosition" signature="setInitPosition(diffX, diffY)">
              <variable citdl="Number" doc="the X offset, default 0" ilk="argument" name="diffX" />
              <variable citdl="Number" doc="the Y offset, default 0" ilk="argument" name="diffY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="697" name="el" />
              <variable attributes="__local__ private" citdl="diffX" line="703" name="dx" />
              <variable attributes="__local__ private" citdl="diffY" line="704" name="dy" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="706" name="p" />
            </scope>
            <variable citdl="p[0]" line="708" name="initPageX" />
            <variable citdl="p[1]" line="709" name="initPageY" />
            <variable citdl="p[0]" line="711" name="lastPageX" />
            <variable citdl="p[1]" line="712" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Sets the start position of the element.  This is set when the obj&#xA;is initialized, the reset when a drag is started." ilk="function" line="725" lineend="731" name="setStartPosition" signature="setStartPosition(pos)">
              <variable doc="current position (from previous lookup)" ilk="argument" name="pos" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="pos" line="726" name="p" />
            </scope>
            <variable line="727" name="deltaSetXY" />
            <scope doc="Add this instance to a group of related drag/drop objects.  All&#xA;instances belong to at least one group, and can belong to as many&#xA;groups as needed." ilk="function" line="740" lineend="743" name="addToGroup" signature="addToGroup(sGroup)">
              <variable citdl="String" doc="the name of the group" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove&apos;s this instance from the supplied interaction group" ilk="function" line="750" lineend="756" name="removeFromGroup" signature="removeFromGroup(sGroup)">
              <variable citdl="String" doc="The group to drop" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify that an element other than the linked element&#xA;will be moved with the cursor during a drag" ilk="function" line="764" lineend="766" name="setDragElId" signature="setDragElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify a child of the linked element that should be&#xA;used to initiate the drag operation.  An example of this would be if&#xA;you have a content div with text and links.  Clicking anywhere in the&#xA;content area would normally start the drag operation.  Use this method&#xA;to specify that an element inside of the content div is the element&#xA;that starts the drag operation." ilk="function" line="779" lineend="785" name="setHandleElId" signature="setHandleElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to&#xA;initiate the drag." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to set an element outside of the linked element as a drag&#xA;handle" ilk="function" line="793" lineend="802" name="setOuterHandleElId" signature="setOuterHandleElId(id)">
              <variable doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove all drag and drop hooks for this element" ilk="function" line="808" lineend="813" name="unreg" signature="unreg()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope ilk="function" line="815" lineend="817" name="destroy" signature="destroy()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns true if this instance is locked, or the drag drop mgr is locked&#xA;(meaning that all drag/drop is disabled on the page.)" ilk="function" line="826" lineend="828" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when this object is clicked" ilk="function" line="837" lineend="868" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="Ext.dd.DragDrop" doc="the clicked dd object (this dd obj)" ilk="argument" name="oDD" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Point" line="848" name="pt" />
            </scope>
            <scope ilk="function" line="870" lineend="875" name="clickValidator" signature="clickValidator(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="871" name="target" />
            </scope>
            <scope doc="Allows you to specify a tag name that should not start a drag operation&#xA;when clicked.  This is designed to facilitate embedding links within a&#xA;drag handle that do something other than start the drag." ilk="function" line="884" lineend="887" name="addInvalidHandleType" signature="addInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to exclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="885" name="type" />
            </scope>
            <scope doc="Lets you to specify an element id for a child of a drag handle&#xA;that should not initiate a drag" ilk="function" line="895" lineend="900" name="addInvalidHandleId" signature="addInvalidHandleId(id)">
              <variable citdl="String" doc="the element id of the element you wish to ignore" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Lets you specify a css class of elements that will not initiate a drag" ilk="function" line="907" lineend="909" name="addInvalidHandleClass" signature="addInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the elements you wish to ignore" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an excluded tag name set by addInvalidHandleType" ilk="function" line="916" lineend="920" name="removeInvalidHandleType" signature="removeInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to unexclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="917" name="type" />
            </scope>
            <scope doc="Unsets an invalid handle id" ilk="function" line="927" lineend="932" name="removeInvalidHandleId" signature="removeInvalidHandleId(id)">
              <variable citdl="String" doc="the id of the element to re-enable" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an invalid css class" ilk="function" line="940" lineend="946" name="removeInvalidHandleClass" signature="removeInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the element(s) you wish to&#xA;re-enable" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Checks the tag exclusion list to see if this click should be ignored" ilk="function" line="954" lineend="974" name="isValidHandleChild" returns="Boolean" signature="isValidHandleChild(node)">
              <variable citdl="HTMLElement" doc="the HTMLElement to evaluate" ilk="argument" name="node" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="956" name="valid" />
              <variable attributes="__local__ private" citdl="node.nodeName.toUpperCase()" line="958" name="nodeName" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Create the array of horizontal tick marks if an interval was specified&#xA;in setXConstraint()." ilk="function" line="982" lineend="1003" name="setXTicks" signature="setXTicks(iStartX, iTickSize)">
              <variable ilk="argument" name="iStartX" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="986" lineend="986" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="984" name="xTickSize" />
            <scope attributes="private" doc="PRIVATE: Create the array of vertical tick marks if an interval was specified in&#xA;setYConstraint()." ilk="function" line="1011" lineend="1032" name="setYTicks" signature="setYTicks(iStartY, iTickSize)">
              <variable ilk="argument" name="iStartY" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="1015" lineend="1015" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="1013" name="yTickSize" />
            <scope doc="By default, the element can be dragged any place on the screen.  Use&#xA;this method to limit the horizontal travel of the element.  Pass in&#xA;0,0 for the parameters if you want to lock the drag to the y axis." ilk="function" line="1046" lineend="1055" name="setXConstraint" signature="setXConstraint(iLeft, iRight, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move to the left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move to the&#xA;right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element&#xA;should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iLeft" line="1047" name="leftConstraint" />
            <variable citdl="iRight" line="1048" name="rightConstraint" />
            <scope doc="Clears any constraints applied to this instance.  Also clears ticks&#xA;since they can&apos;t exist independent of a constraint at this time." ilk="function" line="1062" lineend="1066" name="clearConstraints" signature="clearConstraints()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Clears any tick interval defined for this instance" ilk="function" line="1072" lineend="1077" name="clearTicks" signature="clearTicks()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Set&#xA;this to limit the vertical travel of the element.  Pass in 0,0 for the&#xA;parameters if you want to lock the drag to the x axis." ilk="function" line="1089" lineend="1099" name="setYConstraint" signature="setYConstraint(iUp, iDown, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iUp" line="1090" name="topConstraint" />
            <variable citdl="iDown" line="1091" name="bottomConstraint" />
            <scope doc="resetConstraints must be called if you manually reposition a dd element." ilk="function" line="1106" lineend="1133" name="resetConstraints" signature="resetConstraints()">
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" line="1112" name="dx" />
              <variable attributes="__local__ private" line="1113" name="dy" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Normally the drag element is moved pixel by pixel, but we can specify&#xA;that it move a number of pixels at a time.  This method resolves the&#xA;location when we have it set up like this." ilk="function" line="1145" lineend="1169" name="getTick" returns="Number" signature="getTick(val, tickArray)">
              <variable citdl="Number" doc="where we want to place the object" ilk="argument" name="val" />
              <variable citdl="Array" doc="sorted array of valid points" ilk="argument" name="tickArray" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="i" line="1157" name="next" />
              <variable attributes="__local__ private" citdl="val" line="1159" name="diff1" />
              <variable attributes="__local__ private" citdl="tickArray[next]" line="1160" name="diff2" />
            </scope>
            <scope doc="toString method" ilk="function" line="1176" lineend="1178" name="toString" returns="String" signature="toString()">
              <variable citdl="DragDrop" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DragSource" ilk="class" line="65" lineend="70" name="DragZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that allows dragging of multiple child source nodes.&#xA;This class does not move the drag target nodes, but a proxy element which may contain&#xA;any DOM structure you wish. The DOM element to show in the proxy is provided by either a&#xA;provided implementation of {@link #getDragData}, or by registered draggables registered with {@link Ext.dd.Registry}&#xA;If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some&#xA;application object (For example nodes in a {@link Ext.DataView DataView}) then use of this class&#xA;is the most efficient way to &quot;activate&quot; those nodes.&#xA;By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}.&#xA;However a simpler way to allow a DragZone to manage any number of draggable elements is to configure&#xA;the DragZone with  an implementation of the {@link #getDragData} method which interrogates the passed&#xA;mouse event to see if it has taken place within an element, or class of elements. This is easily done&#xA;by using the event&apos;s {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a&#xA;{@link Ext.DomQuery} selector. For example, to make the nodes of a DataView draggable, use the following&#xA;technique. Knowledge of the use of the DataView is required:&#xA;myDataView.on(&apos;render&apos;, function() {&#xA;myDataView.dragZone = new Ext.dd.DragZone(myDataView.getEl(), {&#xA;//      On receipt of a mousedown event, see if it is within a DataView node.&#xA;//      Return a drag data object if so.&#xA;getDragData: function(e) {&#xA;//          Use the DataView&apos;s own itemSelector (a mandatory property) to&#xA;//          test if the mousedown is within one of the DataView&apos;s nodes.&#xA;var sourceEl = e.getTarget(myDataView.itemSelector, 10);&#xA;//          If the mousedown is within a DataView node, clone the node to produce&#xA;//          a ddel element for use by the drag proxy. Also add application data&#xA;//          to the returned data object.&#xA;if (sourceEl) {&#xA;d = sourceEl.cloneNode(true);&#xA;d.id = Ext.id();&#xA;return {&#xA;ddel: d,&#xA;sourceEl: sourceEl,&#xA;repairXY: Ext.fly(sourceEl).getXY(),&#xA;sourceStore: myDataView.store,&#xA;draggedRecord: v.getRecord(sourceEl)&#xA;//      Provide coordinates for the proxy to slide back to on failed drag.&#xA;//      This is the original XY coordinates of the draggable element captured&#xA;//      in the getDragData method.&#xA;getRepairXY: function() {&#xA;return this.dragData.repairXY;&#xA;});&#xA;});&#xA;See the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which&#xA;cooperates with this DragZone." ilk="function" line="65" lineend="70" name="DragZone" signature="DragZone(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragZone" name="this" />
            </scope>
            <scope citdl="Object" doc="This property contains the data representing the dragged object. This data is set up by the implementation&#xA;of the {@link #getDragData} method. It must contain a ddel property, but can contain&#xA;any other data according to the application&apos;s needs." ilk="function" line="97" lineend="99" name="getDragData" returns="Object" signature="getDragData(e)">
              <variable citdl="EventObject" doc="The mouse down event" ilk="argument" name="e" />
            </scope>
            <scope doc="Called once drag threshold has been reached to initialize the proxy element. By default, it clones the&#xA;this.dragData.ddel" ilk="function" line="108" lineend="112" name="onInitDrag" returns="Boolean" signature="onInitDrag(x, y)">
              <variable citdl="Number" doc="The x position of the click on the dragged object" ilk="argument" name="x" />
              <variable citdl="Number" doc="The y position of the click on the dragged object" ilk="argument" name="y" />
            </scope>
            <scope doc="Called after a repair of an invalid drop. By default, highlights this.dragData.ddel" ilk="function" line="117" lineend="122" name="afterRepair" signature="afterRepair()" />
            <variable citdl="Boolean" line="121" name="dragging" />
            <scope doc="Called before a repair of an invalid drop to get the XY to animate to. By default returns&#xA;the XY of this.dragData.ddel" ilk="function" line="130" lineend="132" name="getRepairXY" returns="Array" signature="getRepairXY(e)">
              <variable citdl="EventObject" doc="The mouse up event" ilk="argument" name="e" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DropTarget" ilk="class" line="70" lineend="72" name="DropZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that allows dropping on multiple child target nodes.&#xA;By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.&#xA;However a simpler way to allow a DropZone to manage any number of target elements is to configure the&#xA;DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed&#xA;mouse event to see if it has taken place within an element, or class of elements. This is easily done&#xA;by using the event&apos;s {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a&#xA;{@link Ext.DomQuery} selector.&#xA;Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over&#xA;a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},&#xA;{@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations&#xA;of these methods to provide application-specific behaviour for these events to update both&#xA;application state, and UI state.&#xA;For example to make a GridPanel a cooperating target with the example illustrated in&#xA;{@link Ext.dd.DragZone DragZone}, the following technique might be used:&#xA;myGridPanel.on(&apos;render&apos;, function() {&#xA;myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {&#xA;//      If the mouse is over a grid row, return that node. This is&#xA;//      provided as the &quot;target&quot; parameter in all &quot;onNodeXXXX&quot; node event handling functions&#xA;getTargetFromEvent: function(e) {&#xA;return e.getTarget(myGridPanel.getView().rowSelector);&#xA;//      On entry into a target node, highlight that node.&#xA;onNodeEnter : function(target, dd, e, data){&#xA;Ext.fly(target).addClass(&apos;my-row-highlight-class&apos;);&#xA;//      On exit from a target node, unhighlight that node.&#xA;onNodeOut : function(target, dd, e, data){&#xA;Ext.fly(target).removeClass(&apos;my-row-highlight-class&apos;);&#xA;//      While over a target node, return the default drop allowed class which&#xA;//      places a &quot;tick&quot; icon into the drag proxy.&#xA;onNodeOver : function(target, dd, e, data){&#xA;return Ext.dd.DropZone.prototype.dropAllowed;&#xA;//      On node drop we can interrogate the target to find the underlying&#xA;//      application object that is the real target of the dragged data.&#xA;//      In this case, it is a Record in the GridPanel&apos;s Store.&#xA;//      We can use the data set up by the DragZone&apos;s getDragData method to read&#xA;//      any data we decided to attach in the DragZone&apos;s getDragData method.&#xA;onNodeDrop : function(target, dd, e, data){&#xA;var rowIndex = myGridPanel.getView().findRowIndex(target);&#xA;var r = myGridPanel.getStore().getAt(rowIndex);&#xA;Ext.Msg.alert(&apos;Drop gesture&apos;, &apos;Dropped Record id &apos; + data.draggedRecord.id +&#xA;&apos; on Record id &apos; + r.id);&#xA;return true;&#xA;});&#xA;See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which&#xA;cooperates with this DropZone." ilk="function" line="70" lineend="72" name="DropZone" signature="DropZone(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropZone" name="this" />
            </scope>
            <scope doc="Returns a custom data object associated with the DOM node that is the target of the event.  By default&#xA;this looks up the event target in the {@link Ext.dd.Registry}, although you can override this method to&#xA;provide your own custom lookup." ilk="function" line="82" lineend="84" name="getTargetFromEvent" returns="Object" signature="getTargetFromEvent(e)">
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has entered a drop node&#xA;that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.&#xA;This method has no default implementation and should be overridden to provide&#xA;node-specific processing if necessary." ilk="function" line="97" lineend="99" name="onNodeEnter" signature="onNodeEnter(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called while the DropZone determines that a {@link Ext.dd.DragSource} is over a drop node&#xA;that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.&#xA;The default implementation returns this.dropNotAllowed, so it should be&#xA;overridden to provide the proper feedback." ilk="function" line="114" lineend="116" name="onNodeOver" returns="String" signature="onNodeOver(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dragged out of&#xA;the drop node without dropping.  This method has no default implementation and should be overridden to provide&#xA;node-specific processing if necessary." ilk="function" line="128" lineend="130" name="onNodeOut" signature="onNodeOut(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped onto&#xA;the drop node.  The default implementation returns false, so it should be overridden to provide the&#xA;appropriate processing of the drop event and return true so that the drag source&apos;s repair action does not run." ilk="function" line="143" lineend="145" name="onNodeDrop" returns="Boolean" signature="onNodeDrop(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called while the DropZone determines that a {@link Ext.dd.DragSource} is being dragged over it,&#xA;but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so&#xA;it should be overridden to provide the proper feedback if necessary." ilk="function" line="157" lineend="159" name="onContainerOver" returns="String" signature="onContainerOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped on it,&#xA;but not on any of its registered drop nodes.  The default implementation returns false, so it should be&#xA;overridden to provide the appropriate processing of the drop event if you need the drop zone itself to&#xA;be able to accept drops.  It should return true when valid so that the drag source&apos;s repair action does not run." ilk="function" line="171" lineend="173" name="onContainerDrop" returns="Boolean" signature="onContainerDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source is now over&#xA;the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop&#xA;nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops&#xA;you should override this method and provide a custom implementation." ilk="function" line="186" lineend="188" name="notifyEnter" returns="String" signature="notifyEnter(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the drop zone.&#xA;This method will be called on every mouse movement while the drag source is over the drop zone.&#xA;It will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically&#xA;delegate to the appropriate node-specific methods as necessary when the drag source enters and exits&#xA;registered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a&#xA;registered node, it will call {@link #onContainerOver}." ilk="function" line="203" lineend="220" name="notifyOver" returns="String" signature="notifyOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getTargetFromEvent()" line="204" name="n" />
            </scope>
            <variable citdl="n" line="208" name="lastOverNode" />
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source has been dragged&#xA;out of the zone without dropping.  If the drag source is currently over a registered node, the notification&#xA;will be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored." ilk="function" line="230" lineend="235" name="notifyOut" signature="notifyOut(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag zone" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the dragged item has&#xA;been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there&#xA;is a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,&#xA;otherwise it will call {@link #onContainerDrop}." ilk="function" line="247" lineend="256" name="notifyDrop" returns="Boolean" signature="notifyDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getTargetFromEvent()" line="252" name="n" />
            </scope>
            <scope ilk="function" line="259" lineend="261" name="triggerCacheRefresh" signature="triggerCacheRefresh()" />
          </scope>
          <scope ilk="class" line="1203" lineend="1218" name="DragDropMgr">
            <variable citdl="Object" line="1203" lineend="2470" name="DragDropMgr">
              <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Two dimensional Array of registered DragDrop objects.  The first&#xA;dimension is the DragDrop item group, the second the DragDrop&#xA;object." line="1218" lineend="2213" name="ids" />
              <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Array of element ids defined as drag handles.  Used to determine&#xA;if the element that generated the mousedown event is actually the&#xA;handle and not the html element itself." line="1229" lineend="1229" name="handleIds" />
              <variable attributes="private __static__" citdl="DragDrop" doc="PRIVATE STATIC: the DragDrop object that is currently being dragged&#xA;**/" line="1238" name="dragCurrent" />
              <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: the DragDrop object(s) that are being hovered over" line="1247" lineend="1781" name="dragOvers" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the X distance between the cursor and the object being dragged" line="1256" name="deltaX" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the Y distance between the cursor and the object being dragged" line="1265" name="deltaY" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should prevent the default behavior of the&#xA;events we define. By default this is true, but this can be set to&#xA;false if you need the default behavior (not recommended)" line="1275" name="preventDefault" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should stop the propagation of the events&#xA;we generate. This is true by default but you may want to set it to&#xA;false if the html element contains other features that require the&#xA;mouse click." line="1286" name="stopPropagation" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Internal flag that is set to true when drag and drop has been&#xA;intialized" line="1295" name="initialized" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: All drag and drop can be disabled." line="1303" name="locked" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Called the first time an element is registered." ilk="function" line="1311" lineend="1313" name="init" signature="init()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="__static__" citdl="Number" doc="STATIC: In point mode, drag and drop interaction is defined by the&#xA;location of the cursor during the drag/drop" line="1322" name="POINT" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: In intersect mode, drag and drop interaction is defined by the&#xA;overlap of two or more drag and drop objects." line="1331" name="INTERSECT" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The current drag and drop mode.  Default: POINT" line="1339" name="mode" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Runs method on all drag and drop objects" ilk="function" line="1347" lineend="1357" name="_execOnAll" signature="_execOnAll(sMethod, args)">
                <variable ilk="argument" name="sMethod" />
                <variable ilk="argument" name="args" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1350" name="oDD" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Drag and drop initialization.  Sets up the global event handlers" ilk="function" line="1365" lineend="1376" name="_onLoad" signature="_onLoad()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Reset constraints on all drag and drop objs" ilk="function" line="1384" lineend="1386" name="_onResize" signature="_onResize(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Lock all drag and drop functionality" ilk="function" line="1393" lineend="1393" name="lock" signature="lock()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Unlock all drag and drop functionality" ilk="function" line="1400" lineend="1400" name="unlock" signature="unlock()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Is drag and drop locked?" ilk="function" line="1408" lineend="1408" name="isLocked" returns="Boolean" signature="isLocked()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Location cache that is set for all drag drop objects when a drag is&#xA;initiated, cleared when the drag is finished." line="1417" lineend="1417" name="locationCache" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Set useCache to false if you want to force object the lookup of each&#xA;drag and drop linked element constantly during a drag." line="1426" name="useCache" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The number of pixels that the mouse needs to move after the&#xA;mousedown before the drag is initiated.  Default=3;" line="1435" name="clickPixelThresh" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The number of milliseconds after the mousedown event to initiate the&#xA;drag if we don&apos;t get a mouseup event. Default=1000" line="1444" name="clickTimeThresh" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Flag that indicates that either the drag pixel threshold or the&#xA;mousdown time threshold has been met" line="1454" name="dragThreshMet" />
              <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Timeout used for the click time threshold" line="1463" name="clickTimeout" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The X position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1473" name="startX" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The Y position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1483" name="startY" />
              <scope attributes="__static__" doc="STATIC: Each DragDrop instance must be registered with the DragDropMgr.&#xA;This is executed in DragDrop.init()" ilk="function" line="1493" lineend="1500" name="regDragDrop" signature="regDragDrop(oDD, sGroup)">
                <variable citdl="DragDrop" doc="the DragDrop object to register" ilk="argument" name="oDD" />
                <variable citdl="String" doc="the name of the group this element belongs to" ilk="argument" name="sGroup" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Removes the supplied dd instance from the supplied group. Executed&#xA;by DragDrop.removeFromGroup, so don&apos;t call this function directly." ilk="function" line="1509" lineend="1518" name="removeDDFromGroup" signature="removeDDFromGroup(oDD, sGroup)">
                <variable ilk="argument" name="oDD" />
                <variable ilk="argument" name="sGroup" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup]" line="1514" name="obj" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Unregisters a drag and drop item.  This is executed in&#xA;DragDrop.unreg, use that method instead of calling this directly." ilk="function" line="1527" lineend="1534" name="_remove" signature="_remove(oDD)">
                <variable ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Each DragDrop handle element must be registered.  This is done&#xA;automatically when executing DragDrop.setHandleElId()" ilk="function" line="1545" lineend="1550" name="regHandle" signature="regHandle(sDDId, sHandleId)">
                <variable citdl="String" doc="the DragDrop id this element is a handle for" ilk="argument" name="sDDId" />
                <variable citdl="String" doc="the id of the element that is the drag&#xA;handle" ilk="argument" name="sHandleId" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop item." ilk="function" line="1561" lineend="1563" name="isDragDrop" returns="Boolean" signature="isDragDrop(id)">
                <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the drag and drop instances that are in all groups the&#xA;passed in instance belongs to." ilk="function" line="1574" lineend="1589" name="getRelated" returns="Array" signature="getRelated(p_oDD, bTargetsOnly)">
                <variable citdl="DragDrop" doc="the obj to get related data for" ilk="argument" name="p_oDD" />
                <variable citdl="Boolean" doc="if true, only return targetable objs" ilk="argument" name="bTargetsOnly" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="1575" name="oDDs" />
                <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1578" name="dd" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns true if the specified dd target is a legal target for&#xA;the specifice drag obj" ilk="function" line="1601" lineend="1610" name="isLegalTarget" returns="Boolean" signature="isLegalTarget(oDD, oTargetDD)">
                <variable ilk="argument" name="oDD" />
                <variable ilk="argument" name="oTargetDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.getRelated()" line="1602" name="targets" />
              </scope>
              <scope attributes="__static__" doc="STATIC: My goal is to be able to transparently determine if an object is&#xA;typeof DragDrop, and the exact subclass of DragDrop.  typeof&#xA;returns &quot;object&quot;, oDD.constructor.toString() always returns&#xA;&quot;DragDrop&quot; and not the name of the subclass.  So for now it just&#xA;evaluates a well-known variable in DragDrop." ilk="function" line="1623" lineend="1625" name="isTypeOfDD" returns="Boolean" signature="isTypeOfDD(oDD)">
                <variable ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop handle for the given Drag Drop object." ilk="function" line="1636" lineend="1639" name="isHandle" returns="Boolean" signature="isHandle(sDDId, sHandleId)">
                <variable ilk="argument" name="sDDId" />
                <variable ilk="argument" name="sHandleId" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the DragDrop instance for a given id" ilk="function" line="1648" lineend="1655" name="getDDById" returns="DragDrop" signature="getDDById(id)">
                <variable citdl="String" doc="the id of the DragDrop object" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Fired after a registered DragDrop object gets the mousedown event.&#xA;Sets up the events required to track the object being dragged" ilk="function" line="1666" lineend="1696" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable doc="the DragDrop object being dragged" ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="oDD.getEl()" line="1679" name="el" />
                <scope attributes="__local__ private" ilk="function" line="1691" lineend="1694" name="(anonymous)" signature="(anonymous)()">
                  <variable attributes="__local__ private" citdl="Ext.dd.DDM" line="1692" name="DDM" />
                </scope>
              </scope>
              <variable citdl="e.getTarget()" line="1676" name="currentTarget" />
              <scope attributes="__static__" doc="STATIC: Fired when either the drag pixel threshol or the mousedown hold&#xA;time threshold has been met." ilk="function" line="1706" lineend="1713" name="startDrag" signature="startDrag(x, y)">
                <variable citdl="Number" doc="the X position of the original mousedown" ilk="argument" name="x" />
                <variable citdl="Number" doc="the Y position of the original mousedown" ilk="argument" name="y" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mouseup event.  Will be invoked&#xA;from the context of the document." ilk="function" line="1723" lineend="1742" name="handleMouseUp" signature="handleMouseUp(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility to stop event propagation and event default, if these&#xA;features are turned on." ilk="function" line="1751" lineend="1759" name="stopEvent" signature="stopEvent(e)">
                <variable citdl="Event" doc="the event as returned by this.getEvent()" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to clean up event handlers after the drag&#xA;operation is complete" ilk="function" line="1769" lineend="1782" name="stopDrag" signature="stopDrag(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mousemove event.  Will be invoked&#xA;from the context of the html element." ilk="function" line="1798" lineend="1830" name="handleMouseMove" returns="Boolean" signature="handleMouseMove(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Math.abs()" line="1811" name="diffX" />
                <variable attributes="__local__ private" citdl="Math.abs()" line="1812" name="diffY" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Iterates over all of the DragDrop elements to find ones we are&#xA;hovering over or dropping on" ilk="function" line="1841" lineend="1966" name="fireEvents" signature="fireEvents(e, isDrop)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="Boolean" doc="is this a drop op or a mouseover op?" ilk="argument" name="isDrop" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.dragCurrent" line="1842" name="dc" />
                <variable attributes="__local__ private" citdl="e.getPoint()" line="1850" name="pt" />
                <variable attributes="__local__ private" citdl="Array" line="1853" name="oldOvers" />
                <variable attributes="__local__ private" citdl="Array" line="1855" name="outEvts" />
                <variable attributes="__local__ private" citdl="Array" line="1856" name="overEvts" />
                <variable attributes="__local__ private" citdl="Array" line="1857" name="dropEvts" />
                <variable attributes="__local__ private" citdl="Array" line="1858" name="enterEvts" />
                <variable attributes="__local__ private" citdl="this.dragOvers[i]" line="1864" name="ddo" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="1885" name="oDD" />
                <variable attributes="__local__ private" citdl="Number" line="1935" name="len" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Helper function for getting the best match from the list of drag&#xA;and drop objects returned by the drag and drop events when we are&#xA;in INTERSECT mode.  It returns either the first object that the&#xA;cursor is over, or the object that has the greatest overlap with&#xA;the dragged element." ilk="function" line="1980" lineend="2013" name="getBestMatch" returns="DragDrop" signature="getBestMatch(dds)">
                <variable citdl="Array" doc="The array of drag and drop objects&#xA;targeted" ilk="argument" name="dds" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="dds[0]" line="1981" name="winner" />
                <variable attributes="__local__ private" citdl="dds.length" line="1988" name="len" />
                <variable attributes="__local__ private" citdl="dds[i]" line="1995" name="dd" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Refreshes the cache of the top-left and bottom-right points of the&#xA;drag and drop objects in the specified group(s).  This is in the&#xA;format that is stored in the drag and drop instance, so typical&#xA;usage is:&#xA;&#xA;Ext.dd.DragDropMgr.refreshCache(ddinstance.groups);&#xA;&#xA;Alternatively:&#xA;&#xA;Ext.dd.DragDropMgr.refreshCache({group1:true, group2:true});" ilk="function" line="2033" lineend="2055" name="refreshCache" signature="refreshCache(groups)">
                <variable citdl="Object" doc="an associative array of groups to refresh" ilk="argument" name="groups" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="2039" name="oDD" />
                <variable attributes="__local__ private" citdl="this.getLocation()" line="2043" name="loc" />
              </scope>
              <scope attributes="__static__" doc="STATIC: This checks to make sure an element exists and is in the DOM.  The&#xA;main purpose is to handle cases where innerHTML is used to remove&#xA;drag and drop objects from the DOM.  IE provides an &apos;unspecified&#xA;error&apos; when trying to access the offsetParent of such an element" ilk="function" line="2067" lineend="2083" name="verifyEl" returns="Boolean" signature="verifyEl(el)">
                <variable citdl="HTMLElement" doc="the element to check" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="el.offsetParent" line="2069" name="parent" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns a Region object containing the drag and drop element&apos;s position&#xA;and size, including the padding configured for it" ilk="function" line="2096" lineend="2122" name="getLocation" returns="Ext.lib.Region" signature="getLocation(oDD)">
                <variable citdl="DragDrop" doc="the drag and drop object to get the&#xA;location for" ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="oDD.getEl()" line="2101" name="el" />
                <variable attributes="__local__ private" citdl="y1" line="2101" name="y2" />
                <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2101" name="pos" />
                <variable attributes="__local__ private" citdl="x1" line="2101" name="l" />
                <variable attributes="__local__ private" citdl="pos[1]" line="2101" name="y1" />
                <variable attributes="__local__ private" citdl="x2" line="2101" name="r" />
                <variable attributes="__local__ private" citdl="y1" line="2101" name="t" />
                <variable attributes="__local__ private" citdl="x1" line="2101" name="x2" />
                <variable attributes="__local__ private" citdl="pos[0]" line="2101" name="x1" />
                <variable attributes="__local__ private" citdl="y2" line="2101" name="b" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Checks the cursor location to see if it over the target" ilk="function" line="2133" lineend="2181" name="isOverTarget" returns="Boolean" signature="isOverTarget(pt, oTarget, intersect)">
                <variable citdl="Ext.lib.Point" doc="The point to evaluate" ilk="argument" name="pt" />
                <variable citdl="DragDrop" doc="the DragDrop object we are inspecting" ilk="argument" name="oTarget" />
                <variable ilk="argument" name="intersect" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.locationCache[oTarget.id]" line="2135" name="loc" />
                <variable attributes="__local__ private" citdl="this.dragCurrent" line="2153" name="dc" />
                <variable attributes="__local__ private" citdl="dc.getTargetCoord()" line="2165" name="pos" />
                <variable attributes="__local__ private" citdl="dc.getDragEl()" line="2167" name="el" />
                <variable attributes="__local__ private" citdl="Ext.lib.Region" line="2171" name="curRegion" />
                <variable attributes="__local__ private" citdl="curRegion.intersect()" line="2173" name="overlap" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: unload event handler" ilk="function" line="2189" lineend="2191" name="_onUnload" signature="_onUnload(e, me)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="me" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Cleans up the drag and drop events and objects." ilk="function" line="2199" lineend="2214" name="unregAll" signature="unregAll()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable citdl="Object" line="2212" lineend="2222" name="elementCache" />
              <scope attributes="deprecated private __static__" doc="DEPRECATED PRIVATE STATIC: Get the wrapper for the DOM element specified" ilk="function" line="2233" lineend="2240" name="getElWrapper" returns="Ext.dd.DDM.ElementWrapper" signature="getElWrapper(id)">
                <variable citdl="String" doc="the id of the element to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.elementCache[id]" line="2234" name="oWrapper" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the actual DOM element" ilk="function" line="2250" lineend="2252" name="getElement" returns="Object" signature="getElement(id)">
                <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the style property for the DOM element (i.e.,&#xA;document.getElById(id).style)" ilk="function" line="2263" lineend="2266" name="getCss" returns="Object" signature="getCss(id)">
                <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Ext.getDom()" line="2264" name="el" />
              </scope>
              <scope ilk="class" line="2275" lineend="2291" name="ElementWrapper">
                <scope attributes="__ctor__ deprecated private" doc="DEPRECATED PRIVATE: Inner class for cached elements" ilk="function" line="2275" lineend="2291" name="ElementWrapper" signature="ElementWrapper(el)">
                  <variable ilk="argument" name="el" />
                  <variable citdl="ElementWrapper" name="this" />
                </scope>
                <variable citdl="el" doc="The element" line="2280" name="el" />
                <variable citdl="this.el" doc="The element id" line="2285" name="id" />
                <variable citdl="this.el" doc="A reference to the style property" line="2290" name="css" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the X position of an html element" ilk="function" line="2302" lineend="2304" name="getPosX" returns="Number" signature="getPosX(el)">
                <variable doc="the element for which to get the position" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the Y position of an html element" ilk="function" line="2314" lineend="2316" name="getPosY" returns="Number" signature="getPosY(el)">
                <variable doc="the element for which to get the position" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Swap two nodes.  In IE, we use the native method, for others we&#xA;emulate the IE behavior" ilk="function" line="2326" lineend="2342" name="swapNode" signature="swapNode(n1, n2)">
                <variable doc="the first node to swap" ilk="argument" name="n1" />
                <variable doc="the other node to swap" ilk="argument" name="n2" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="n2.parentNode" line="2330" name="p" />
                <variable attributes="__local__ private" citdl="n2.nextSibling" line="2331" name="s" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the current scroll position" ilk="function" line="2350" lineend="2362" name="getScroll" signature="getScroll()">
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="document.body" line="2351" name="db" />
                <variable attributes="__local__ private" citdl="dde.scrollTop" line="2351" name="t" />
                <variable attributes="__local__ private" citdl="document.documentElement" line="2351" name="dde" />
                <variable attributes="__local__ private" citdl="dde.scrollLeft" line="2351" name="l" />
              </scope>
              <scope attributes="deprecated __static__" doc="DEPRECATED STATIC: Returns the specified element style property" ilk="function" line="2373" lineend="2375" name="getStyle" returns="String" signature="getStyle(el, styleProp)">
                <variable citdl="HTMLElement" doc="the element" ilk="argument" name="el" />
                <variable citdl="String" doc="the style property" ilk="argument" name="styleProp" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Gets the scrollTop" ilk="function" line="2383" lineend="2383" name="getScrollTop" returns="Number" signature="getScrollTop()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Gets the scrollLeft" ilk="function" line="2391" lineend="2391" name="getScrollLeft" returns="Number" signature="getScrollLeft()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Sets the x/y position of an element to the location of the&#xA;target element." ilk="function" line="2401" lineend="2404" name="moveToEl" signature="moveToEl(moveEl, targetEl)">
                <variable citdl="HTMLElement" doc="The element to move" ilk="argument" name="moveEl" />
                <variable citdl="HTMLElement" doc="The position reference element" ilk="argument" name="targetEl" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2402" name="aCoord" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Numeric array sort function" ilk="function" line="2411" lineend="2411" name="numericSort" signature="numericSort(a, b)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="b" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal counter" line="2419" name="_timeoutCount" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Trying to make the load order less important.  Without this we get&#xA;an error if this file is loaded before the Event Utility." ilk="function" line="2428" lineend="2441" name="_addListeners" signature="_addListeners()">
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Ext.dd.DDM" line="2429" name="DDM" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Recursively searches the immediate parent and all child nodes for&#xA;the handle element in order to determine wheter or not it was&#xA;clicked." ilk="function" line="2451" lineend="2468" name="handleWasClicked" returns="Boolean" signature="handleWasClicked(node, id)">
                <variable doc="the html element to inspect" ilk="argument" name="node" />
                <variable ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="node.parentNode" line="2456" name="p" />
              </scope>
            </variable>
          </scope>
          <variable citdl="Ext.dd.DragDropMgr" line="2475" name="DDM" />
          <scope classrefs="Ext.dd.DragDrop" ilk="class" line="2492" lineend="2496" name="DD">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation where the linked element follows the&#xA;mouse cursor during a drag." ilk="function" line="2492" lineend="2496" name="DD" signature="DD(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DD:&#xA;scroll" ilk="argument" name="config" />
              <variable citdl="DD" name="this" />
            </scope>
            <variable citdl="Boolean" doc="When set to true, the utility automatically tries to scroll the browser&#xA;window when a drag and drop element is dragged near the viewport boundary.&#xA;Defaults to true." line="2507" name="scroll" />
            <scope doc="Sets the pointer offset to the distance between the linked element&apos;s top&#xA;left corner and the location the element was clicked" ilk="function" line="2516" lineend="2520" name="autoOffset" signature="autoOffset(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="iPageX" line="2517" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2518" name="y" />
            </scope>
            <scope doc="Sets the pointer offset.  You can call this directly to force the&#xA;offset to be in a particular location (e.g., pass in 0,0 to set it&#xA;to the center of the object)" ilk="function" line="2530" lineend="2533" name="setDelta" signature="setDelta(iDeltaX, iDeltaY)">
              <variable citdl="Number" doc="the distance from the left" ilk="argument" name="iDeltaX" />
              <variable citdl="Number" doc="the distance from the top" ilk="argument" name="iDeltaY" />
            </scope>
            <variable citdl="iDeltaX" line="2531" name="deltaX" />
            <variable citdl="iDeltaY" line="2532" name="deltaY" />
            <scope doc="Sets the drag element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2544" lineend="2550" name="setDragElPos" signature="setDragElPos(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2548" name="el" />
            </scope>
            <scope doc="Sets the element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2562" lineend="2578" name="alignElWithMouse" returns="oCoord" signature="alignElWithMouse(el, iPageX, iPageY)">
              <variable citdl="HTMLElement" doc="the element to move" ilk="argument" name="el" />
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getTargetCoord()" line="2563" name="oCoord" />
              <variable attributes="__local__ private" citdl="el.dom" line="2564" name="fly" />
              <variable attributes="__local__ private" citdl="Array" line="2566" name="aCoord" />
              <variable attributes="__local__ private" citdl="fly.getLeft()" line="2568" name="newLeft" />
              <variable attributes="__local__ private" citdl="fly.getTop()" line="2569" name="newTop" />
            </scope>
            <variable citdl="Array" line="2570" name="deltaSetXY" />
            <scope doc="Saves the most recent position so that we can reset the constraints and&#xA;tick marks on-demand.  We need to know this so that we can calculate the&#xA;number of pixels the element is offset from its original position." ilk="function" line="2590" lineend="2599" name="cachePosition" signature="cachePosition(iPageX, iPageY)">
              <variable doc="the current x position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageX" />
              <variable doc="the current y position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2595" name="aCoord" />
            </scope>
            <variable citdl="iPageX" line="2592" name="lastPageX" />
            <variable citdl="iPageY" line="2593" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Auto-scroll the window if the dragged object has been moved beyond the&#xA;visible window boundary." ilk="function" line="2611" lineend="2674" name="autoScroll" signature="autoScroll(x, y, h, w)">
              <variable citdl="Number" doc="the drag element&apos;s x position" ilk="argument" name="x" />
              <variable citdl="Number" doc="the drag element&apos;s y position" ilk="argument" name="y" />
              <variable citdl="Number" doc="the height of the drag element" ilk="argument" name="h" />
              <variable citdl="Number" doc="the width of the drag element" ilk="argument" name="w" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewHeight()" line="2615" name="clientH" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewWidth()" line="2618" name="clientW" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollTop()" line="2621" name="st" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollLeft()" line="2624" name="sl" />
              <variable attributes="__local__ private" citdl="h" line="2627" name="bot" />
              <variable attributes="__local__ private" citdl="w" line="2630" name="right" />
              <variable attributes="__local__ private" line="2635" name="toBot" />
              <variable attributes="__local__ private" line="2638" name="toRight" />
              <variable attributes="__local__ private" citdl="Number" line="2643" name="thresh" />
              <variable attributes="__local__ private" line="2648" name="scrAmt" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Finds the location the element should be placed if we want to move&#xA;it to where the mouse location less the click offset would place us." ilk="function" line="2685" lineend="2706" name="getTargetCoord" signature="getTargetCoord(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="iPageX" line="2688" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2689" name="y" />
            </scope>
            <scope doc="Sets up config options specific to this class. Overrides&#xA;Ext.dd.DragDrop, but all versions of this method through the&#xA;inheritance chain are called" ilk="function" line="2713" lineend="2716" name="applyConfig" signature="applyConfig()" />
            <scope doc="Event that fires prior to the onMouseDown event.  Overrides&#xA;Ext.dd.DragDrop." ilk="function" line="2722" lineend="2726" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Event that fires prior to the onDrag event.  Overrides&#xA;Ext.dd.DragDrop." ilk="function" line="2732" lineend="2735" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2737" lineend="2739" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="Ext.dd.DD" ilk="class" line="2788" lineend="2793" name="DDProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="function" line="2788" lineend="2793" name="DDProxy" signature="DDProxy(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDProxy in addition to those in DragDrop:&#xA;resizeFrame, centerFrame, dragElId" ilk="argument" name="config" />
              <variable citdl="DDProxy" name="this" />
            </scope>
            <variable attributes="__static__" citdl="String" doc="STATIC: The default drag frame div id" line="2801" name="dragElId" />
            <variable citdl="Boolean" doc="By default we resize the drag frame to be the same size as the element&#xA;we want to drag (this is to get the frame effect).  We can turn it off&#xA;if we want a different behavior." line="2812" name="resizeFrame" />
            <variable citdl="Boolean" doc="By default the frame is positioned exactly where the drag element is, so&#xA;we use the cursor offset provided by Ext.dd.DD.  Another option that works only if&#xA;you do not have constraints on the obj is to have the drag frame centered&#xA;around the cursor.  Set centerFrame to true for this effect." line="2822" name="centerFrame" />
            <scope doc="Creates the proxy element if it does not yet exist" ilk="function" line="2828" lineend="2855" name="createFrame" signature="createFrame()">
              <variable attributes="__local__ private" citdl="this" line="2829" name="self" />
              <variable attributes="__local__ private" citdl="document.body" line="2830" name="body" />
              <scope attributes="__local__ private" ilk="function" line="2833" lineend="2833" name="(anonymous)" signature="(anonymous)()" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2837" name="div" />
              <variable attributes="__local__ private" citdl="div.style" line="2842" name="s" />
            </scope>
            <scope doc="Initialization for the drag frame element.  Must be called in the&#xA;constructor of all subclasses" ilk="function" line="2862" lineend="2864" name="initFrame" signature="initFrame()" />
            <scope ilk="function" line="2866" lineend="2872" name="applyConfig" signature="applyConfig()" />
            <scope attributes="private" doc="PRIVATE: Resizes the drag frame to the dimensions of the clicked object, positions&#xA;it over the object, and finally displays it" ilk="function" line="2882" lineend="2897" name="showFrame" signature="showFrame(iPageX, iPageY)">
              <variable citdl="Number" doc="X click position" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="Y click position" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2883" name="el" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2884" name="dragEl" />
              <variable attributes="__local__ private" citdl="dragEl.style" line="2885" name="s" />
            </scope>
            <scope attributes="private" doc="PRIVATE: The proxy is automatically resized to the dimensions of the linked&#xA;element when a drag is initiated, unless resizeFrame is set to false" ilk="function" line="2905" lineend="2910" name="_resizeProxy" signature="_resizeProxy()">
              <variable attributes="__local__ private" citdl="this.getEl()" line="2907" name="el" />
            </scope>
            <scope ilk="function" line="2913" lineend="2918" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getPageX()" line="2914" name="x" />
              <variable attributes="__local__ private" citdl="e.getPageY()" line="2915" name="y" />
            </scope>
            <scope ilk="function" line="2921" lineend="2924" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" line="2927" lineend="2929" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2934" lineend="2951" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2936" name="lel" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2937" name="del" />
            </scope>
            <scope ilk="function" line="2953" lineend="2955" name="beforeMove" signature="beforeMove()" />
            <scope ilk="function" line="2957" lineend="2959" name="afterDrag" signature="afterDrag()" />
            <scope ilk="function" line="2961" lineend="2963" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="Ext.dd.DragDrop" ilk="class" line="2981" lineend="2985" name="DDTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that does not move, but can be a drop&#xA;target.  You would get the same result by simply omitting implementation&#xA;for the event callbacks, but this way we reduce the processing cost of the&#xA;event listener and the callbacks." ilk="function" line="2981" lineend="2985" name="DDTarget" signature="DDTarget(id, sGroup, config)">
              <variable citdl="String" doc="the id of the element that is a drop target" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDTarget in addition to those in&#xA;DragDrop:&#xA;none" ilk="argument" name="config" />
              <variable citdl="DDTarget" name="this" />
            </scope>
            <scope ilk="function" line="2989" lineend="2991" name="toString" signature="toString()" />
          </scope>
        </variable>
        <variable citdl="Object" line="14" name="tree">
          <scope classrefs="Object" ilk="class" line="7" lineend="169" name="TreeEventModel">
            <scope attributes="__ctor__" ilk="function" line="7" lineend="10" name="TreeEventModel" signature="TreeEventModel(tree)">
              <variable ilk="argument" name="tree" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="tree" line="8" name="tree" />
            <scope ilk="function" line="13" lineend="22" name="initEvents" signature="initEvents()">
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="this.tree.getTreeEl()" line="14" name="el" />
            </scope>
            <scope ilk="function" line="24" lineend="33" name="getNode" signature="getNode(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" line="25" name="t" />
              <variable attributes="__local__ private" citdl="Ext.fly().getAttribute()" line="27" name="id" />
            </scope>
            <scope ilk="function" line="35" lineend="41" name="getNodeTarget" returns="t" signature="getNodeTarget(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="36" name="t" />
            </scope>
            <scope ilk="function" line="43" lineend="57" name="delegateOut" signature="delegateOut(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="this.getNode()" line="48" name="n" />
            </scope>
            <scope ilk="function" line="59" lineend="78" name="delegateOver" signature="delegateOver(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="65" name="trackingDoc" />
            <variable citdl="this.getNode()" line="72" name="lastEcOver" />
            <scope ilk="function" line="80" lineend="87" name="trackExit" signature="trackExit(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="89" lineend="103" name="delegateClick" signature="delegateClick(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="105" lineend="109" name="delegateDblClick" signature="delegateDblClick(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="111" lineend="115" name="delegateContextMenu" signature="delegateContextMenu(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="117" lineend="119" name="onNodeClick" signature="onNodeClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="121" lineend="124" name="onNodeOver" signature="onNodeOver(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="Node" line="122" name="lastOverNode" />
            <scope ilk="function" line="126" lineend="128" name="onNodeOut" signature="onNodeOut(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="130" lineend="132" name="onIconOver" signature="onIconOver(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="134" lineend="136" name="onIconOut" signature="onIconOut(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="138" lineend="140" name="onIconClick" signature="onIconClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="142" lineend="144" name="onCheckboxClick" signature="onCheckboxClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="146" lineend="148" name="onNodeDblClick" signature="onNodeDblClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="150" lineend="152" name="onNodeContextMenu" signature="onNodeContextMenu(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="154" lineend="160" name="beforeEvent" returns="Boolean" signature="beforeEvent(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="162" lineend="164" name="disable" signature="disable()">
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="163" name="disabled" />
            <scope ilk="function" line="166" lineend="168" name="enable" signature="enable()">
              <variable citdl="TreeEventModel" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="12" lineend="36" name="DefaultSelectionModel">
            <scope attributes="__ctor__" doc="The default single selection for a TreePanel." ilk="function" line="12" lineend="36" name="DefaultSelectionModel" signature="DefaultSelectionModel(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DefaultSelectionModel" name="this" />
            </scope>
            <scope ilk="function" line="39" lineend="43" name="init" signature="init(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <variable citdl="tree" line="40" name="tree" />
            <scope ilk="function" line="45" lineend="47" name="onNodeClick" signature="onNodeClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Select a node." ilk="function" line="54" lineend="67" name="select" returns="TreeNode" signature="select(node)">
              <variable citdl="TreeNode" doc="The node to select" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.selNode" line="55" name="last" />
            </scope>
            <variable citdl="Node" line="62" name="selNode" />
            <scope doc="Deselect a node." ilk="function" line="73" lineend="77" name="unselect" signature="unselect(node)">
              <variable citdl="TreeNode" doc="The node to unselect" ilk="argument" name="node" />
            </scope>
            <scope doc="Clear all selections" ilk="function" line="82" lineend="90" name="clearSelections" returns="n" signature="clearSelections()">
              <variable attributes="__local__ private" citdl="this.selNode" line="83" name="n" />
            </scope>
            <scope doc="Get the selected node" ilk="function" line="96" lineend="98" name="getSelectedNode" returns="TreeNode" signature="getSelectedNode()" />
            <scope doc="Returns true if the node is selected" ilk="function" line="105" lineend="107" name="isSelected" returns="Boolean" signature="isSelected(node)">
              <variable citdl="TreeNode" doc="The node to check" ilk="argument" name="node" />
            </scope>
            <scope doc="Selects the node above the selected node in the tree, intelligently walking the nodes" ilk="function" line="113" lineend="133" name="selectPrevious" signature="selectPrevious()">
              <variable attributes="__local__ private" citdl="this.selNode" line="114" name="s" />
              <variable attributes="__local__ private" citdl="s.previousSibling" line="118" name="ps" />
              <variable attributes="__local__ private" citdl="ps.lastChild" line="123" name="lc" />
            </scope>
            <scope doc="Selects the node above the selected node in the tree, intelligently walking the nodes" ilk="function" line="139" lineend="159" name="selectNext" signature="selectNext()">
              <variable attributes="__local__ private" citdl="this.selNode" line="140" name="s" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree().selModel.select()" line="149" name="newS" />
              <scope attributes="__local__ private" ilk="function" line="150" lineend="155" name="(anonymous)" returns="Boolean" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="161" lineend="197" name="onKeyDown" signature="onKeyDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.selNode" line="162" name="s" />
              <variable attributes="__local__ private" citdl="this" line="164" name="sm" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="168" name="k" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="13" lineend="114" name="TreeFilter">
            <scope attributes="__ctor__" doc="Note this class is experimental and doesn&apos;t update the indent (lines) or expand collapse icons of the nodes" ilk="function" line="13" lineend="17" name="TreeFilter" signature="TreeFilter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="config" />
              <variable citdl="TreeFilter" name="this" />
            </scope>
            <variable citdl="tree" line="14" name="tree" />
            <variable citdl="Object" line="15" lineend="112" name="filtered" />
            <variable citdl="Boolean" line="20" name="clearBlank" />
            <variable citdl="Boolean" line="21" name="reverse" />
            <variable citdl="Boolean" line="22" name="autoClear" />
            <variable citdl="Boolean" line="23" name="remove" />
            <scope doc="Filter the data by a specific attribute." ilk="function" line="32" lineend="54" name="filter" signature="filter(value, attr, startNode)">
              <variable citdl="String/RegExp" doc="Either string that the attribute value&#xA;should start with or a RegExp to test against the attribute" ilk="argument" name="value" />
              <variable citdl="String" doc="(optional) The attribute passed in your node&apos;s attributes collection. Defaults to &quot;text&quot;." ilk="argument" name="attr" />
              <variable citdl="TreeNode" doc="(optional) The node to start the filter at." ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" line="34" name="f" />
              <variable attributes="__local__ private" citdl="value.length" line="36" name="vlen" />
              <scope attributes="__local__ private" ilk="function" line="47" lineend="49" name="f" returns="value.test()" signature="f(n)">
                <variable ilk="argument" name="n" />
              </scope>
            </scope>
            <scope doc="Filter by a function. The passed function will be called with each&#xA;node in the tree (or from the startNode). If the function returns true, the node is kept&#xA;otherwise it is filtered. If a node is filtered, its children are also filtered." ilk="function" line="63" lineend="95" name="filterBy" signature="filterBy(fn, scope, startNode)">
              <variable citdl="Function" doc="The filter function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to the current node)" ilk="argument" name="scope" />
              <variable citdl="startNode" ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.reverse" line="68" name="rv" />
              <variable attributes="__local__ private" citdl="this.filtered" line="68" name="af" />
              <scope attributes="__local__ private" ilk="function" line="69" lineend="83" name="f" returns="Boolean" signature="f(n)">
                <variable ilk="argument" name="n" />
                <variable attributes="__local__ private" citdl="fn.call()" line="76" name="m" />
              </scope>
              <variable attributes="__local__ private" citdl="af[id]" line="88" name="n" />
            </scope>
            <scope doc="Clears the current filter. Note: with the &quot;remove&quot; option&#xA;set a filter cannot be cleared." ilk="function" line="101" lineend="113" name="clear" signature="clear()">
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.tree" line="102" name="t" />
              <variable attributes="__local__ private" citdl="this.filtered" line="103" name="af" />
              <variable attributes="__local__ private" citdl="af[id]" line="106" name="n" />
            </scope>
          </scope>
          <scope classrefs="Ext.tree.TreeNode" ilk="class" line="14" lineend="34" name="AsyncTreeNode">
            <scope attributes="__ctor__" ilk="function" line="14" lineend="34" name="AsyncTreeNode" signature="AsyncTreeNode(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="AsyncTreeNode" name="this" />
            </scope>
            <variable citdl="config" line="15" name="loaded" />
            <variable citdl="Boolean" line="16" name="loading" />
            <scope ilk="function" line="36" lineend="61" name="expand" signature="expand(deep, anim, callback, scope)">
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="anim" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="setInterval()" line="38" name="timer" />
              <scope attributes="__local__ private" ilk="function" line="39" lineend="44" name="f" signature="f()" />
              <variable attributes="__local__ private" citdl="this.loader" line="54" name="loader" />
            </scope>
            <scope doc="Returns true if this node is currently loading" ilk="function" line="67" lineend="69" name="isLoading" returns="Boolean" signature="isLoading()" />
            <scope ilk="function" line="71" lineend="77" name="loadComplete" signature="loadComplete(deep, anim, callback, scope)">
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="anim" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
            </scope>
            <scope doc="Returns true if this node has been loaded" ilk="function" line="83" lineend="85" name="isLoaded" returns="Boolean" signature="isLoaded()" />
            <scope ilk="function" line="87" lineend="93" name="hasChildNodes" returns="Ext.tree.AsyncTreeNode.superclass.hasChildNodes.call()" signature="hasChildNodes()" />
            <scope doc="Trigger a reload for this node" ilk="function" line="100" lineend="111" name="reload" signature="reload(callback, scope)">
              <variable citdl="Function" ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
            </scope>
            <variable citdl="Boolean" line="105" name="childrenRendered" />
            <variable citdl="Boolean" line="108" name="expanded" />
          </scope>
          <scope classrefs="Ext.dd.DragZone" ilk="class" line="15" lineend="82" name="TreeDragZone">
            <scope attributes="__ctor__" ilk="function" line="15" lineend="23" name="TreeDragZone" signature="TreeDragZone(tree, config)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="config" />
              <variable citdl="TreeDragZone" name="this" />
            </scope>
            <variable citdl="Ext.tree.TreePanel" doc="The TreePanel for this drag zone" line="22" name="tree" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to &apos;TreeDD&apos;)." line="31" name="ddGroup" />
            <scope ilk="function" line="34" lineend="37" name="onBeforeDrag" returns="n" signature="onBeforeDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="data.node" line="35" name="n" />
            </scope>
            <scope ilk="function" line="40" lineend="47" name="onInitDrag" signature="onInitDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.dragData" line="41" name="data" />
            </scope>
            <scope ilk="function" line="50" lineend="52" name="getRepairXY" returns="data.node.ui.getDDRepairXY()" signature="getRepairXY(e, data)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="55" lineend="58" name="onEndDrag" signature="onEndDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="61" lineend="64" name="onValidDrop" signature="onValidDrop(dd, e, id)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="67" lineend="72" name="beforeInvalidDrop" signature="beforeInvalidDrop(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.tree.getSelectionModel()" line="69" name="sm" />
            </scope>
            <scope ilk="function" line="75" lineend="80" name="afterRepair" signature="afterRepair()" />
            <variable citdl="Boolean" line="79" name="dragging" />
          </scope>
          <scope classrefs="Ext.dd.DropZone" ilk="class" line="16" lineend="321" name="TreeDropZone">
            <scope attributes="__ctor__" ilk="function" line="16" lineend="50" name="TreeDropZone" signature="TreeDropZone(tree, config)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="config" />
              <variable citdl="TreeDropZone" name="this" />
            </scope>
            <variable citdl="config.allowParentInsert" doc="Allow inserting a dragged node between an expanded parent node and its first child that will become a&#xA;sibling of the parent when dropped (defaults to false)" line="22" name="allowParentInsert" />
            <variable citdl="config.allowContainerDrop" doc="True if drops on the tree container (outside of a specific tree node) are allowed (defaults to false)" line="27" name="allowContainerDrop" />
            <variable citdl="config.appendOnly" doc="True if the tree should only allow append drops (use for trees which are sorted, defaults to false)" line="32" name="appendOnly" />
            <variable citdl="Ext.tree.TreePanel" doc="The TreePanel for this drop zone" line="40" name="tree" />
            <variable citdl="Ext.tree.TreePanel" doc="Arbitrary data that can be associated with this tree and will be included in the event object that gets&#xA;passed to any nodedragover event handler (defaults to {})" line="47" lineend="47" name="dragOverData" />
            <variable citdl="String" line="49" name="lastInsertClass" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to &apos;TreeDD&apos;)." line="58" name="ddGroup" />
            <variable citdl="Number" doc="The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node&#xA;over the target (defaults to 1000)" line="65" name="expandDelay" />
            <scope ilk="function" line="68" lineend="72" name="expandNode" signature="expandNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="75" lineend="77" name="queueExpand" signature="queueExpand(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <variable citdl="this.expandNode.defer()" line="76" name="expandProcId" />
            <scope ilk="function" line="80" lineend="85" name="cancelExpand" signature="cancelExpand()" />
            <scope ilk="function" line="88" lineend="117" name="isValidDropPoint" returns="overEvent.cancel" signature="isValidDropPoint(n, pt, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="pt" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="n.node" line="90" name="targetNode" />
              <variable attributes="__local__ private" citdl="data.node" line="91" name="dropNode" />
              <variable attributes="__local__ private" citdl="this.dragOverData" line="106" name="overEvent" />
              <variable attributes="__local__ private" citdl="this.tree.fireEvent()" line="115" name="result" />
            </scope>
            <scope ilk="function" line="120" lineend="144" name="getDropPoint" returns="String" signature="getDropPoint(e, n, dd)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable attributes="__local__ private" citdl="n.node" line="121" name="tn" />
              <variable attributes="__local__ private" citdl="n.ddel" line="125" name="dragEl" />
              <variable attributes="__local__ private" citdl="t" line="126" name="b" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getY()" line="126" name="t" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getPageY()" line="127" name="y" />
              <variable attributes="__local__ private" citdl="tn.allowChildren" line="128" name="noAppend" />
              <variable attributes="__local__ private" citdl="Boolean" line="132" name="noBelow" />
              <variable attributes="__local__ private" line="136" name="q" />
            </scope>
            <scope ilk="function" line="147" lineend="149" name="onNodeEnter" signature="onNodeEnter(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="151" lineend="156" name="onContainerOver" returns="this.dropNotAllowed" signature="onContainerOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="159" lineend="193" name="onNodeOver" returns="returnCls" signature="onNodeOver(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getDropPoint()" line="160" name="pt" />
              <variable attributes="__local__ private" citdl="n.node" line="161" name="node" />
              <variable attributes="__local__ private" citdl="this.dropNotAllowed" line="171" name="returnCls" />
              <variable attributes="__local__ private" citdl="n.ddel" line="174" name="el" />
              <variable attributes="__local__ private" citdl="String" line="175" name="cls" />
            </scope>
            <scope ilk="function" line="196" lineend="199" name="onNodeOut" signature="onNodeOut(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="202" lineend="213" name="onNodeDrop" returns="this.processDrop()" signature="onNodeDrop(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getDropPoint()" line="203" name="point" />
              <variable attributes="__local__ private" citdl="n.node" line="204" name="targetNode" />
              <variable attributes="__local__ private" citdl="data.node" line="211" name="dropNode" />
            </scope>
            <scope ilk="function" line="215" lineend="223" name="onContainerDrop" returns="Boolean" signature="onContainerDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.tree.getRootNode()" line="217" name="targetNode" />
              <variable attributes="__local__ private" citdl="data.node" line="219" name="dropNode" />
            </scope>
            <scope ilk="function" line="226" lineend="253" name="processDrop" returns="Boolean" signature="processDrop(target, data, point, dd, e, dropNode)">
              <variable citdl="dropEvent.target" ilk="argument" name="target" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="point" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="dropNode" />
              <variable attributes="__local__ private" citdl="Object" line="227" lineend="237" name="dropEvent">
                <variable citdl="this.tree" line="228" name="tree" />
                <variable citdl="target" line="229" name="target" />
                <variable citdl="data" line="230" name="data" />
                <variable citdl="point" line="231" name="point" />
                <variable citdl="dd" line="232" name="source" />
                <variable citdl="e" line="233" name="rawEvent" />
                <variable citdl="dropNode" line="234" name="dropNode" />
                <variable line="235" name="cancel" />
                <variable citdl="Boolean" line="236" name="dropStatus" />
              </variable>
              <variable attributes="__local__ private" citdl="this.tree.fireEvent()" line="238" name="retval" />
              <scope attributes="__local__ private" ilk="function" line="246" lineend="248" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="256" lineend="278" name="completeDrop" signature="completeDrop(de)">
              <variable ilk="argument" name="de" />
              <variable attributes="__local__ private" citdl="de.point" line="257" name="p" />
              <variable attributes="__local__ private" citdl="de.dropNode" line="257" name="ns" />
              <variable attributes="__local__ private" citdl="de.target" line="257" name="t" />
              <variable attributes="__local__ private" citdl="ns[i]" line="261" name="n" />
            </scope>
            <scope ilk="function" line="281" lineend="287" name="afterNodeMoved" signature="afterNodeMoved(dd, data, e, targetNode, dropNode)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="targetNode" />
              <variable ilk="argument" name="dropNode" />
            </scope>
            <scope ilk="function" line="290" lineend="292" name="getTree" returns="this.tree" signature="getTree()" />
            <scope ilk="function" line="295" lineend="304" name="removeDropIndicators" signature="removeDropIndicators(n)">
              <variable ilk="argument" name="n" />
              <variable attributes="__local__ private" citdl="n.ddel" line="297" name="el" />
            </scope>
            <scope ilk="function" line="307" lineend="310" name="beforeDragDrop" returns="Boolean" signature="beforeDragDrop(target, e, id)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="313" lineend="318" name="afterRepair" signature="afterRepair(data)">
              <variable ilk="argument" name="data" />
            </scope>
          </scope>
          <scope classrefs="Ext.Editor" ilk="class" line="18" lineend="30" name="TreeEditor">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used&#xA;as the editor field." ilk="function" line="18" lineend="30" name="TreeEditor" signature="TreeEditor(tree, fc, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="fc" ilk="argument" name="fc" />
              <variable citdl="Object" doc="(optional) A TreeEditor config object" ilk="argument" name="config" />
              <variable citdl="TreeEditor" name="this" />
              <variable attributes="__local__ private" citdl="fc.events" line="20" name="field" />
            </scope>
            <variable citdl="tree" line="23" name="tree" />
            <variable citdl="String" doc="The position to align to (see {@link Ext.Element#alignTo} for more details, defaults to &quot;l-l&quot;)." line="37" name="alignment" />
            <variable citdl="Boolean" line="39" name="autoSize" />
            <variable citdl="Boolean" doc="True to hide the bound element while the editor is displayed (defaults to false)" line="44" name="hideEl" />
            <variable citdl="String" doc="CSS class to apply to the editor (defaults to &quot;x-small-editor x-tree-editor&quot;)" line="49" name="cls" />
            <variable citdl="Boolean" doc="True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)" line="54" name="shim" />
            <variable citdl="String" line="56" name="shadow" />
            <variable citdl="Number" doc="The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed&#xA;the containing tree element&apos;s size, it will be automatically limited for you to the container width, taking&#xA;scroll and client offsets into account prior to each edit." line="63" name="maxWidth" />
            <variable citdl="Number" doc="editing on the current node (defaults to 350).  If two clicks occur on the same node within this time span,&#xA;the editor for the node will display, otherwise it will be processed as a regular click." line="69" name="editDelay" />
            <scope ilk="function" line="71" lineend="78" name="initEditor" signature="initEditor(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" line="81" lineend="90" name="fitToTree" signature="fitToTree(ed, el)">
              <variable ilk="argument" name="ed" />
              <variable ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="this.tree.getTreeEl().dom" line="82" name="td" />
              <variable attributes="__local__ private" citdl="el.dom" line="82" name="nd" />
              <variable attributes="__local__ private" citdl="Math.min()" line="88" name="w" />
            </scope>
            <scope doc="Edit the text of the passed {@link Ext.tree.TreeNode TreeNode}." ilk="function" line="96" lineend="115" name="triggerEdit" returns="Boolean" signature="triggerEdit(node, defer)">
              <variable citdl="Ext.tree.TreeNode" doc="The TreeNode to edit. The TreeNode must be {@link Ext.tree.TreeNode#editable editable}." ilk="argument" name="node" />
              <variable ilk="argument" name="defer" />
              <variable attributes="__local__ private" citdl="node.text" line="108" name="value" />
            </scope>
            <variable citdl="Ext.tree.TreeNode" doc="The {@link Ext.tree.TreeNode TreeNode} this editor is bound to. Read-only." line="104" name="editNode" />
            <variable citdl="this.startEdit.defer()" line="112" name="autoEditTimer" />
            <scope ilk="function" line="118" lineend="120" name="bindScroll" signature="bindScroll()" />
            <scope ilk="function" line="123" lineend="129" name="beforeNodeClick" returns="this.triggerEdit()" signature="beforeNodeClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="131" lineend="133" name="onNodeDblClick" signature="onNodeDblClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="136" lineend="139" name="updateNode" signature="updateNode(ed, value)">
              <variable ilk="argument" name="ed" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="142" lineend="147" name="onHide" signature="onHide()" />
            <scope ilk="function" line="150" lineend="159" name="onSpecialKey" signature="onSpecialKey(field, e)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="151" name="k" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="20" lineend="611" name="TreeNodeUI">
            <scope attributes="__ctor__" doc="This class provides the default UI implementation for Ext TreeNodes.&#xA;The TreeNode UI implementation is separate from the&#xA;tree implementation, and allows customizing of the appearance of&#xA;tree nodes.&#xA;&#xA;If you are customizing the Tree&apos;s user interface, you&#xA;may need to extend this class, but you should never need to instantiate this class.&#xA;&#xA;This class provides access to the user interface components of an Ext TreeNode, through&#xA;{@link Ext.tree.TreeNode#getUI}" ilk="function" line="20" lineend="27" name="TreeNodeUI" signature="TreeNodeUI(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Node" line="21" name="node" />
            <variable citdl="Boolean" line="22" name="rendered" />
            <variable citdl="Boolean" line="23" name="animating" />
            <variable citdl="Boolean" line="24" name="wasLeaf" />
            <variable citdl="String" line="25" name="ecc" />
            <variable citdl="Ext.BLANK_IMAGE_URL" line="26" name="emptyIcon" />
            <scope ilk="function" line="31" lineend="35" name="removeChild" signature="removeChild(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="38" lineend="40" name="beforeLoad" signature="beforeLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="43" lineend="45" name="afterLoad" signature="afterLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="48" lineend="52" name="onTextChange" signature="onTextChange(node, text, oldText)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="text" />
              <variable ilk="argument" name="oldText" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="55" lineend="65" name="onDisableChange" signature="onDisableChange(node, state)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="state" line="56" name="disabled" />
            <scope ilk="function" line="68" lineend="76" name="onSelectedChange" signature="onSelectedChange(state)">
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="79" lineend="96" name="onMove" signature="onMove(tree, node, oldParent, newParent, index, refNode)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="oldParent" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="refNode" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="newParent.ui.getContainer()" line="82" name="targetNode" />
              <variable attributes="__local__ private" citdl="refNode" line="88" name="insertBefore" />
            </scope>
            <variable citdl="buf.join()" line="80" name="childIndent" />
            <variable citdl="document.createElement()" line="84" name="holder" />
            <scope doc="Adds one or more CSS classes to the node&apos;s UI element.&#xA;Duplicate classes are automatically filtered out." ilk="function" line="103" lineend="107" name="addClass" signature="addClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Removes one or more CSS classes from the node&apos;s UI element." ilk="function" line="113" lineend="117" name="removeClass" signature="removeClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="120" lineend="125" name="remove" signature="remove()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="128" lineend="130" name="fireEvent" returns="this.node.fireEvent.apply()" signature="fireEvent()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="133" lineend="154" name="initEvents" signature="initEvents()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="145" name="ot" />
              <variable attributes="__local__ private" citdl="ot.enableDD" line="146" name="dd" />
            </scope>
            <scope ilk="function" line="157" lineend="159" name="getDDHandles" returns="Array" signature="getDDHandles()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Hides this node." ilk="function" line="164" lineend="169" name="hide" signature="hide()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Shows this node." ilk="function" line="174" lineend="179" name="show" signature="show()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="182" lineend="188" name="onContextMenu" signature="onContextMenu(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="191" lineend="217" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="197" name="a" />
            </scope>
            <scope ilk="function" line="220" lineend="232" name="onDblClick" signature="onDblClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="234" lineend="236" name="onOver" signature="onOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="238" lineend="240" name="onOut" signature="onOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="243" lineend="249" name="onCheckChange" signature="onCheckChange()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox.checked" line="244" name="checked" />
            </scope>
            <scope ilk="function" line="252" lineend="256" name="ecClick" signature="ecClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="259" lineend="261" name="startDrop" signature="startDrop()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Boolean" line="260" name="dropping" />
            <scope ilk="function" line="264" lineend="268" name="endDrop" signature="endDrop()">
              <variable citdl="TreeNodeUI" name="this" />
              <scope attributes="__local__ private" ilk="function" line="265" lineend="267" name="(anonymous)" signature="(anonymous)()">
                <variable citdl="Boolean" line="266" name="dropping" />
              </scope>
            </scope>
            <scope ilk="function" line="271" lineend="274" name="expand" signature="expand()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="277" lineend="289" name="focus" signature="focus()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree().getTreeEl().dom" line="283" name="noscroll" />
              <variable attributes="__local__ private" citdl="noscroll.scrollLeft" line="284" name="l" />
            </scope>
            <scope doc="Sets the checked status of the tree node to the passed value, or, if no value was passed,&#xA;toggles the checked status. If the node was rendered with no checkbox, this has no effect." ilk="function" line="296" lineend="302" name="toggleCheck" signature="toggleCheck(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox" line="297" name="cb" />
            </scope>
            <scope ilk="function" line="305" lineend="309" name="blur" signature="blur()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="312" lineend="332" name="animExpand" signature="animExpand(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="313" name="ct" />
            </scope>
            <scope ilk="function" line="335" lineend="341" name="highlight" signature="highlight()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="336" name="tree" />
            </scope>
            <scope ilk="function" line="344" lineend="347" name="collapse" signature="collapse()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="350" lineend="366" name="animCollapse" signature="animCollapse(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="351" name="ct" />
            </scope>
            <scope ilk="function" line="369" lineend="371" name="getContainer" returns="this.ctNode" signature="getContainer()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="374" lineend="376" name="getEl" returns="this.wrap" signature="getEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="379" lineend="381" name="appendDDGhost" signature="appendDDGhost(ghostNode)">
              <variable ilk="argument" name="ghostNode" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="384" lineend="386" name="getDDRepairXY" returns="Ext.lib.Dom.getXY()" signature="getDDRepairXY()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="389" lineend="391" name="onRender" signature="onRender()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="394" lineend="429" name="render" signature="render(bulkRender)">
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="n.attributes" line="395" name="a" />
              <variable attributes="__local__ private" citdl="this.node" line="395" name="n" />
              <variable attributes="__local__ private" citdl="n.parentNode" line="396" name="targetNode" />
            </scope>
            <scope ilk="function" line="432" lineend="471" name="renderElements" signature="renderElements(n, a, targetNode, bulkRender)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="targetNode" />
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" line="436" name="cb" />
              <variable attributes="__local__ private" citdl="a.href" line="438" name="href" />
              <variable attributes="__local__ private" citdl="Array" line="447" name="buf" />
              <variable attributes="__local__ private" line="449" name="nel" />
              <variable attributes="__local__ private" citdl="this.elNode.childNodes" line="458" name="cs" />
              <variable attributes="__local__ private" citdl="Number" line="462" name="index" />
            </scope>
            <variable citdl="n.parentNode" line="434" name="indentMarkup" />
            <variable citdl="Ext.DomHelper.insertHtml()" line="451" name="wrap" />
            <variable citdl="this.wrap.childNodes[0]" line="456" name="elNode" />
            <variable citdl="this.wrap.childNodes[1]" line="457" name="ctNode" />
            <variable citdl="cs[0]" line="459" name="indentNode" />
            <variable citdl="cs[1]" line="460" name="ecNode" />
            <variable citdl="cs[2]" line="461" name="iconNode" />
            <variable citdl="cs[3]" line="464" name="checkbox" />
            <variable citdl="cs[index]" line="469" name="anchor" />
            <variable citdl="cs[index].firstChild" line="470" name="textNode" />
            <scope doc="Returns the &amp;lt;a&gt; element that provides focus for the node&apos;s UI." ilk="function" line="477" lineend="479" name="getAnchor" returns="HTMLElement" signature="getAnchor()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the text node." ilk="function" line="485" lineend="487" name="getTextEl" returns="HtmlNode" signature="getTextEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the icon &amp;lt;img&gt; element." ilk="function" line="493" lineend="495" name="getIconEl" returns="HTMLElement" signature="getIconEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the checked status of the node. If the node was rendered with no&#xA;checkbox, it returns false." ilk="function" line="502" lineend="504" name="isChecked" returns="Boolean" signature="isChecked()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="507" lineend="544" name="updateExpandIcon" signature="updateExpandIcon()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node" line="509" name="n" />
              <variable attributes="__local__ private" citdl="String" line="509" name="c2" />
              <variable attributes="__local__ private" citdl="String" line="509" name="c1" />
              <variable attributes="__local__ private" citdl="n.isLast()" line="510" name="cls" />
              <variable attributes="__local__ private" citdl="n.hasChildNodes()" line="511" name="hasChild" />
              <variable attributes="__local__ private" citdl="String" line="538" name="ecc" />
            </scope>
            <variable citdl="c2" line="528" name="c2" />
            <variable citdl="c1" line="528" name="c1" />
            <scope ilk="function" line="547" lineend="551" name="onIdChange" signature="onIdChange(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="554" lineend="571" name="getChildIndent" returns="this.childIndent" signature="getChildIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="556" name="buf" />
              <variable attributes="__local__ private" citdl="this.node" line="557" name="p" />
            </scope>
            <scope ilk="function" line="574" lineend="587" name="renderIndent" signature="renderIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="String" line="576" name="indent" />
              <variable attributes="__local__ private" citdl="this.node.parentNode" line="577" name="p" />
            </scope>
            <scope ilk="function" line="589" lineend="610" name="destroy" signature="destroy()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="26" lineend="106" name="TreeSorter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the&#xA;associated TreePanel that might affect the tree&apos;s sort order (beforechildrenrendered, append, insert and textchange).&#xA;Example usage:&#xA;&#xA;new Ext.tree.TreeSorter(myTree, {&#xA;folderSort: true,&#xA;dir: &quot;desc&quot;,&#xA;sortType: function(node) {&#xA;// sort by a custom, typed attribute:&#xA;return parseInt(node.id, 10);&#xA;});" ilk="function" line="26" lineend="83" name="TreeSorter" signature="TreeSorter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="this.dir" line="57" name="dsc" />
              <variable attributes="__local__ private" citdl="this.property" line="58" name="p" />
              <variable attributes="__local__ private" citdl="this.sortType" line="59" name="sortType" />
              <variable attributes="__local__ private" citdl="this.folderSort" line="60" name="fs" />
              <variable attributes="__local__ private" citdl="this.caseSensitive" line="61" name="cs" />
              <variable attributes="__local__ private" citdl="this.leafAttr" line="62" name="leafAttr" />
            </scope>
            <variable attributes="__local__ private" line="61" name="caseSensitive" />
            <scope ilk="function" line="64" lineend="82" name="sortFn" returns="Number" signature="sortFn(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="sortType" line="73" name="v1" />
              <variable attributes="__local__ private" citdl="sortType" line="74" name="v2" />
            </scope>
            <scope ilk="function" line="86" lineend="88" name="doSort" signature="doSort(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="90" lineend="92" name="compareNodes" signature="compareNodes(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="94" lineend="98" name="updateSort" signature="updateSort(tree, node)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="100" lineend="105" name="updateSortParent" signature="updateSortParent(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="node.parentNode" line="101" name="p" />
            </scope>
          </scope>
          <scope classrefs="Ext.data.Node" ilk="class" line="36" lineend="159" name="TreeNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: is to use the cls or iconCls attributes and add the icon via a CSS background image." ilk="function" line="36" lineend="159" name="TreeNode" signature="TreeNode(attributes)">
              <variable citdl="Object/String" doc="The attributes/config for the node or just a string with the text for the node" ilk="argument" name="attributes" />
              <variable citdl="TreeNode" name="this" />
              <variable attributes="__local__ private" citdl="this.attributes.uiProvider" line="152" name="uiClass" />
            </scope>
            <variable citdl="Boolean" line="41" name="childrenRendered" />
            <variable citdl="Boolean" line="42" name="rendered" />
            <variable citdl="attributes.expanded" line="44" name="expanded" />
            <variable citdl="attributes.isTarget" line="45" name="isTarget" />
            <variable citdl="attributes.draggable" line="46" name="draggable" />
            <variable citdl="attributes.allowChildren" line="47" name="allowChildren" />
            <variable citdl="String" doc="Read-only. The text for this node. To change it use setText()." line="53" name="text" />
            <variable citdl="Boolean" doc="True if this node is disabled." line="58" name="disabled" />
            <variable citdl="Boolean" doc="True if this node is hidden." line="63" name="hidden" />
            <variable citdl="TreeNodeUI" doc="Read-only. The UI for this node" line="158" name="ui" />
            <variable citdl="Boolean" line="161" name="preventHScroll" />
            <scope doc="Returns true if this node is expanded" ilk="function" line="166" lineend="168" name="isExpanded" returns="Boolean" signature="isExpanded()" />
            <scope doc="Returns the UI object for this node." ilk="function" line="176" lineend="178" name="getUI" returns="TreeNodeUI" signature="getUI()" />
            <scope ilk="function" line="180" lineend="183" name="getLoader" returns="this.loader" signature="getLoader()">
              <variable attributes="__local__ private" line="181" name="owner" />
            </scope>
            <scope ilk="function" line="186" lineend="195" name="setFirstChild" signature="setFirstChild(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.firstChild" line="187" name="of" />
            </scope>
            <scope ilk="function" line="198" lineend="207" name="setLastChild" signature="setLastChild(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.lastChild" line="199" name="ol" />
            </scope>
            <scope ilk="function" line="211" lineend="221" name="appendChild" returns="Node" signature="appendChild(n)">
              <variable citdl="this.getLoader().createNode()" ilk="argument" name="n" />
              <variable attributes="__local__ private" citdl="Ext.tree.TreeNode.superclass.appendChild.call()" line="215" name="node" />
            </scope>
            <scope ilk="function" line="224" lineend="240" name="removeChild" returns="Node" signature="removeChild(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="243" lineend="253" name="insertBefore" returns="newNode" signature="insertBefore(node, refNode)">
              <variable citdl="this.getLoader().createNode()" ilk="argument" name="node" />
              <variable ilk="argument" name="refNode" />
              <variable attributes="__local__ private" citdl="Ext.tree.TreeNode.superclass.insertBefore.call()" line="247" name="newNode" />
            </scope>
            <scope doc="Sets the text for this node" ilk="function" line="259" lineend="267" name="setText" signature="setText(text)">
              <variable citdl="String" ilk="argument" name="text" />
              <variable attributes="__local__ private" citdl="this.text" line="260" name="oldText" />
            </scope>
            <scope doc="Triggers selection of this node" ilk="function" line="272" lineend="274" name="select" signature="select()" />
            <scope doc="Triggers deselection of this node" ilk="function" line="279" lineend="281" name="unselect" signature="unselect()" />
            <scope doc="Returns true if this node is selected" ilk="function" line="287" lineend="289" name="isSelected" returns="Boolean" signature="isSelected()" />
            <scope doc="Expand this node." ilk="function" line="300" lineend="329" name="expand" signature="expand(deep, anim, callback, scope)">
              <variable citdl="Boolean" doc="(optional) True to expand all children as well" ilk="argument" name="deep" />
              <variable citdl="Boolean" doc="(optional) false to cancel the default animation" ilk="argument" name="anim" />
              <variable citdl="Function" doc="(optional) A callback to be called when&#xA;expanding this node completes (does not wait for deep expand to complete).&#xA;Called with 1 parameter, this node." ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
              <scope attributes="__local__ private" ilk="function" line="310" lineend="316" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="331" lineend="335" name="runCallback" signature="runCallback(cb, scope, args)">
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" line="337" lineend="339" name="isHiddenRoot" returns="this.isRoot" signature="isHiddenRoot()" />
            <scope doc="Collapse this node." ilk="function" line="350" lineend="379" name="collapse" signature="collapse(deep, anim, callback, scope)">
              <variable citdl="Boolean" doc="(optional) True to collapse all children as well" ilk="argument" name="deep" />
              <variable citdl="Boolean" doc="(optional) false to cancel the default animation" ilk="argument" name="anim" />
              <variable citdl="Function" doc="(optional) A callback to be called when&#xA;expanding this node completes (does not wait for deep expand to complete).&#xA;Called with 1 parameter, this node." ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
              <scope attributes="__local__ private" ilk="function" line="357" lineend="363" name="(anonymous)" signature="(anonymous)()" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="374" name="cs" />
            </scope>
            <scope ilk="function" line="382" lineend="386" name="delayedExpand" signature="delayedExpand(delay)">
              <variable ilk="argument" name="delay" />
            </scope>
            <variable citdl="this.expand.defer()" line="384" name="expandProcId" />
            <scope ilk="function" line="389" lineend="394" name="cancelExpand" signature="cancelExpand()" />
            <scope doc="Toggles expanded/collapsed state of the node" ilk="function" line="399" lineend="405" name="toggle" signature="toggle()" />
            <scope doc="Ensures all parent nodes are expanded, and if necessary, scrolls&#xA;the node into view." ilk="function" line="413" lineend="420" name="ensureVisible" signature="ensureVisible(callback, scope)">
              <variable citdl="Function" doc="(optional) A function to call when the node has been made visible." ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree()" line="414" name="tree" />
              <scope attributes="__local__ private" ilk="function" line="415" lineend="419" name="(anonymous)" signature="(anonymous)()">
                <variable attributes="__local__ private" citdl="tree.getNodeById()" line="416" name="node" />
              </scope>
            </scope>
            <scope doc="Expand all child nodes" ilk="function" line="426" lineend="431" name="expandChildNodes" signature="expandChildNodes(deep)">
              <variable citdl="Boolean" doc="(optional) true if the child nodes should also expand their child nodes" ilk="argument" name="deep" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="427" name="cs" />
            </scope>
            <scope doc="Collapse all child nodes" ilk="function" line="437" lineend="442" name="collapseChildNodes" signature="collapseChildNodes(deep)">
              <variable citdl="Boolean" doc="(optional) true if the child nodes should also collapse their child nodes" ilk="argument" name="deep" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="438" name="cs" />
            </scope>
            <scope doc="Disables this node" ilk="function" line="447" lineend="454" name="disable" signature="disable()" />
            <scope doc="Enables this node" ilk="function" line="459" lineend="465" name="enable" signature="enable()" />
            <scope ilk="function" line="468" lineend="477" name="renderChildren" signature="renderChildren(suppressEvent)">
              <variable ilk="argument" name="suppressEvent" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="472" name="cs" />
            </scope>
            <scope ilk="function" line="480" lineend="488" name="sort" signature="sort(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="483" name="cs" />
            </scope>
            <scope ilk="function" line="491" lineend="502" name="render" signature="render(bulkRender)">
              <variable ilk="argument" name="bulkRender" />
            </scope>
            <scope ilk="function" line="505" lineend="516" name="renderIndent" signature="renderIndent(deep, refresh)">
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="refresh" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="511" name="cs" />
            </scope>
            <scope ilk="function" line="518" lineend="520" name="beginUpdate" signature="beginUpdate()" />
            <scope ilk="function" line="522" lineend="526" name="endUpdate" signature="endUpdate()" />
            <scope ilk="function" line="528" lineend="538" name="destroy" signature="destroy()" />
            <variable line="533" name="childNodes" />
            <scope ilk="function" line="541" lineend="543" name="onIdChange" signature="onIdChange(id)">
              <variable ilk="argument" name="id" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="46" lineend="80" name="TreeLoader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}&apos;s child&#xA;nodes from a specified URL. The response must be a JavaScript Array definition&#xA;whose elements are node definition objects. e.g.:&#xA;&#xA;id: 1,&#xA;text: &apos;A leaf Node&apos;,&#xA;leaf: true&#xA;},{&#xA;id: 2,&#xA;text: &apos;A folder Node&apos;,&#xA;children: [{&#xA;id: 3,&#xA;text: &apos;A child Node&apos;,&#xA;leaf: true&#xA;&#xA;A server request is sent, and child nodes are loaded only when a node is expanded.&#xA;The loading node&apos;s id is passed to the server under the parameter name &quot;node&quot; to&#xA;enable the server to produce the correct child nodes.&#xA;&#xA;To pass extra parameters, an event handler may be attached to the &quot;beforeload&quot;&#xA;event, and the parameters specified in the TreeLoader&apos;s baseParams property:&#xA;&#xA;myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) {&#xA;this.baseParams.category = node.attributes.category;&#xA;}, this);&#xA;This would pass an HTTP parameter called &quot;category&quot; to the server containing&#xA;the value of the Node&apos;s &quot;category&quot; attribute." ilk="function" line="46" lineend="80" name="TreeLoader" signature="TreeLoader(config)">
              <variable citdl="Object" doc="A config object containing config properties." ilk="argument" name="config" />
              <variable citdl="TreeLoader" name="this" />
            </scope>
            <variable citdl="Object" line="47" lineend="47" name="baseParams" />
            <variable citdl="Object" doc="specifies an array of node definition objects representing the child nodes&#xA;to be loaded." line="113" lineend="113" name="uiProviders" />
            <variable citdl="Boolean" doc="child nodes before loading." line="119" name="clearOnLoad" />
            <variable doc="A list of params to be executed&#xA;server side.  Specify the params in the order in which they must be executed on the server-side&#xA;as either (1) an Array of String values, or (2) a String of params delimited by either whitespace,&#xA;comma, or pipe. For example,&#xA;any of the following would be acceptable:&#xA;paramOrder: [&apos;param1&apos;,&apos;param2&apos;,&apos;param3&apos;]&#xA;paramOrder: &apos;param1 param2 param3&apos;&#xA;paramOrder: &apos;param1,param2,param3&apos;&#xA;paramOrder: &apos;param1|param2|param&apos;" line="134" name="paramOrder" />
            <variable citdl="Boolean" doc="Send parameters as a collection of named arguments (defaults to false). Providing a&#xA;{@link #paramOrder} nullifies this configuration." line="141" name="paramsAsHash" />
            <variable doc="Function to call when executing a request." line="147" name="directFn" />
            <scope doc="Load an {@link Ext.tree.TreeNode} from the URL specified in the constructor.&#xA;This is called automatically when a node is expanded, but may be used to reload&#xA;a node (or append new children if the {@link #clearOnLoad} option is false.)" ilk="function" line="157" lineend="168" name="load" signature="load(node, callback, scope)">
              <variable citdl="Ext.tree.TreeNode" ilk="argument" name="node" />
              <variable citdl="Function" ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
            </scope>
            <scope ilk="function" line="170" lineend="186" name="doPreload" returns="Boolean" signature="doPreload(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="node.attributes.children" line="173" name="cs" />
              <variable attributes="__local__ private" citdl="node.appendChild()" line="176" name="cn" />
            </scope>
            <scope ilk="function" line="188" lineend="211" name="getParams" returns="buf.join()" signature="getParams(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.baseParams" line="189" name="bp" />
              <variable attributes="__local__ private" citdl="Array" line="189" name="buf" />
            </scope>
            <scope ilk="function" line="213" lineend="235" name="requestData" signature="requestData(node, callback, scope)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.getParams()" line="216" name="args" />
            </scope>
            <variable citdl="Ext.Ajax.request()" line="228" name="transId" />
            <scope ilk="function" line="237" lineend="249" name="processDirectResponse" signature="processDirectResponse(result, response, args)">
              <variable ilk="argument" name="result" />
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" line="252" lineend="256" name="runCallback" signature="runCallback(cb, scope, args)">
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" line="258" lineend="260" name="isLoading" signature="isLoading()" />
            <scope ilk="function" line="262" lineend="266" name="abort" signature="abort()" />
            <scope doc="Override this function for custom TreeNode node implementation, or to&#xA;modify the attributes at creation time.&#xA;Example:&#xA;new Ext.tree.TreePanel({&#xA;...&#xA;new Ext.tree.TreeLoader({&#xA;url: &apos;dataUrl&apos;,&#xA;createNode: function(attr) {&#xA;//          Allow consolidation consignments to have&#xA;//          consignments dropped into them.&#xA;if (attr.isConsolidation) {&#xA;attr.iconCls = &apos;x-consol&apos;,&#xA;attr.allowDrop = true;&#xA;return Ext.tree.TreeLoader.prototype.call(this, attr);&#xA;}),&#xA;...&#xA;});" ilk="function" line="291" lineend="309" name="createNode" returns="attr.leaf" signature="createNode(attr)">
              <variable citdl="Object" doc="The attributes from which to create the new node." ilk="argument" name="attr" />
            </scope>
            <scope ilk="function" line="311" lineend="327" name="processResponse" signature="processResponse(response, node, callback, scope)">
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="response.responseText" line="312" name="json" />
              <variable attributes="__local__ private" citdl="response.responseData" line="314" name="o" />
              <variable attributes="__local__ private" citdl="this.createNode()" line="317" name="n" />
            </scope>
            <scope ilk="function" line="329" lineend="334" name="handleResponse" signature="handleResponse(response)">
              <variable ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.argument" line="331" name="a" />
            </scope>
            <scope ilk="function" line="336" lineend="341" name="handleFailure" signature="handleFailure(response)">
              <variable ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.argument" line="338" name="a" />
            </scope>
          </scope>
          <variable citdl="Object" line="114" name="TreePanel">
            <variable citdl="Object" line="114" lineend="916" name="nodeTypes">
              <variable citdl="Ext.tree.AsyncTreeNode" line="114" name="async" />
              <variable citdl="Ext.tree.TreeNode" line="546" name="node" />
            </variable>
          </variable>
          <scope classrefs="Ext.util.Observable" ilk="class" line="205" lineend="219" name="MultiSelectionModel">
            <scope attributes="__ctor__" doc="Multi selection for a TreePanel." ilk="function" line="205" lineend="219" name="MultiSelectionModel" signature="MultiSelectionModel(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="MultiSelectionModel" name="this" />
            </scope>
            <variable citdl="Array" line="206" name="selNodes" />
            <variable citdl="Object" line="207" lineend="207" name="selMap" />
            <scope ilk="function" line="222" lineend="226" name="init" signature="init(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <variable citdl="tree" line="223" name="tree" />
            <scope ilk="function" line="228" lineend="234" name="onNodeClick" signature="onNodeClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Select a node." ilk="function" line="243" lineend="257" name="select" returns="TreeNode" signature="select(node, e, keepExisting)">
              <variable citdl="TreeNode" doc="The node to select" ilk="argument" name="node" />
              <variable citdl="EventObject" doc="(optional) An event associated with the selection" ilk="argument" name="e" />
              <variable citdl="Boolean" doc="True to retain existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <variable citdl="Node" line="248" name="lastSelNode" />
            <scope doc="Deselect a node." ilk="function" line="263" lineend="274" name="unselect" signature="unselect(node)">
              <variable citdl="TreeNode" doc="The node to unselect" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.selNodes" line="266" name="sn" />
              <variable attributes="__local__ private" citdl="sn.indexOf()" line="267" name="index" />
            </scope>
            <scope doc="Clear all selections" ilk="function" line="279" lineend="291" name="clearSelections" signature="clearSelections(suppressEvent)">
              <variable ilk="argument" name="suppressEvent" />
              <variable attributes="__local__ private" citdl="this.selNodes" line="280" name="sn" />
            </scope>
            <scope doc="Returns true if the node is selected" ilk="function" line="298" lineend="300" name="isSelected" returns="Boolean" signature="isSelected(node)">
              <variable citdl="TreeNode" doc="The node to check" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns an array of the selected nodes" ilk="function" line="306" lineend="308" name="getSelectedNodes" returns="Array" signature="getSelectedNodes()" />
            <variable citdl="Ext.tree.DefaultSelectionModel.prototype.onKeyDown" line="310" name="onKeyDown" />
            <variable citdl="Ext.tree.DefaultSelectionModel.prototype.selectNext" line="312" name="selectNext" />
            <variable citdl="Ext.tree.DefaultSelectionModel.prototype.selectPrevious" line="314" name="selectPrevious" />
          </scope>
          <variable citdl="Ext.extend()" doc="This class provides the default UI implementation for root Ext TreeNodes.&#xA;The RootTreeNode UI implementation allows customizing the appearance of the root tree node.&#xA;&#xA;If you are customizing the Tree&apos;s user interface, you&#xA;may need to extend this class, but you should never need to instantiate this class." line="633" name="RootTreeNodeUI" />
        </variable>
        <scope classrefs="Object" ilk="class" line="16" lineend="170" name="Shadow">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,&#xA;and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced&#xA;functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class." ilk="function" line="16" lineend="66" name="Shadow" signature="Shadow(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="21" lineend="21" name="a">
              <variable citdl="Number" line="21" name="h" />
              <variable citdl="Number" line="25" name="w" />
              <variable citdl="a.t" line="26" name="l" />
              <variable citdl="o" line="26" name="t" />
            </variable>
            <variable attributes="__local__ private" citdl="this.offset" line="21" name="o" />
            <variable attributes="__local__ private" citdl="Math.floor()" line="22" name="rad" />
          </scope>
          <variable citdl="this.defaultMode" line="19" name="mode" />
          <variable citdl="a" line="65" name="adjusts" />
          <variable citdl="Number" doc="The shadow display mode.  Supports the following options:&#xA;sides : Shadow displays on both sides and bottom only&#xA;frame : Shadow displays equally on all four sides&#xA;drop : Traditional bottom-right drop shadow" line="81" name="offset" />
          <variable citdl="String" line="84" name="defaultMode" />
          <scope doc="Displays the shadow under the target element" ilk="function" line="90" lineend="109" name="show" signature="show(target)">
            <variable citdl="Ext.get()" ilk="argument" name="target" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="Ext.Shadow.Pool.pull()" line="93" name="el" />
          <scope doc="Returns true if the shadow is visible, else false" ilk="function" line="114" lineend="116" name="isVisible" returns="this.el" signature="isVisible()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Direct alignment when values are already available. Show must be called at least once before&#xA;calling this method to ensure it is initialized." ilk="function" line="126" lineend="147" name="realign" signature="realign(l, t, w, h)">
            <variable ilk="argument" name="l" />
            <variable ilk="argument" name="t" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="this.adjusts" line="130" name="a" />
            <variable attributes="__local__ private" citdl="this.el.dom" line="130" name="d" />
            <variable attributes="__local__ private" citdl="d.style" line="130" name="s" />
            <variable attributes="__local__ private" citdl="Number" line="131" name="iea" />
            <variable attributes="__local__ private" citdl="sh" line="134" name="shs" />
            <variable attributes="__local__ private" line="134" name="sw" />
            <variable attributes="__local__ private" line="134" name="sh" />
            <variable attributes="__local__ private" citdl="sw" line="134" name="sws" />
            <variable attributes="__local__ private" citdl="d.childNodes" line="139" name="cn" />
            <variable attributes="__local__ private" citdl="Math.max()" line="140" name="sww" />
          </scope>
          <scope doc="Hides this shadow" ilk="function" line="152" lineend="158" name="hide" signature="hide()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Adjust the z-index of this shadow" ilk="function" line="164" lineend="169" name="setZIndex" signature="setZIndex(z)">
            <variable ilk="argument" name="z" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="z" line="165" name="zIndex" />
          <variable citdl="Object" line="173" lineend="191" name="Pool">
            <scope ilk="function" line="179" lineend="186" name="pull" returns="sh" signature="pull()">
              <variable citdl="Pool" name="this" />
              <variable attributes="__local__ private" citdl="p.shift()" line="180" name="sh" />
            </scope>
            <scope ilk="function" line="188" lineend="190" name="push" signature="push(sh)">
              <variable ilk="argument" name="sh" />
              <variable citdl="Pool" name="this" />
            </scope>
          </variable>
        </scope>
        <variable citdl="Object" line="16" name="UpdateManager">
          <variable citdl="Object" line="16" name="defaults">
            <variable citdl="String" line="16" name="indicatorText" />
          </variable>
        </variable>
        <variable citdl="Object" line="16" name="menu">
          <scope ilk="class" line="12" lineend="17" name="MenuMgr">
            <variable citdl="Object" line="12" lineend="210" name="MenuMgr">
              <scope doc="Hides all menus that are currently visible" ilk="function" line="107" lineend="109" name="hideAll" signature="hideAll()">
                <variable citdl="MenuMgr" name="this" />
              </scope>
              <scope ilk="function" line="112" lineend="129" name="register" signature="register(menu)">
                <variable ilk="argument" name="menu" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menu.group" line="121" name="g" />
              </scope>
              <scope doc="Returns a {@link Ext.menu.Menu} object" ilk="function" line="137" lineend="150" name="get" returns="Ext.menu.Menu" signature="get(menu)">
                <variable citdl="String/Object" doc="The string menu id, an existing menu object reference, or a Menu config that will&#xA;be used to generate and return a new Menu instance." ilk="argument" name="menu" />
                <variable citdl="MenuMgr" name="this" />
              </scope>
              <scope ilk="function" line="153" lineend="164" name="unregister" signature="unregister(menu)">
                <variable ilk="argument" name="menu" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menu.group" line="159" name="g" />
              </scope>
              <scope ilk="function" line="167" lineend="176" name="registerCheckable" signature="registerCheckable(menuItem)">
                <variable ilk="argument" name="menuItem" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menuItem.group" line="168" name="g" />
              </scope>
              <scope ilk="function" line="179" lineend="185" name="unregisterCheckable" signature="unregisterCheckable(menuItem)">
                <variable ilk="argument" name="menuItem" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menuItem.group" line="180" name="g" />
              </scope>
              <scope ilk="function" line="187" lineend="197" name="getCheckedItem" signature="getCheckedItem(groupId)">
                <variable ilk="argument" name="groupId" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="groups[groupId]" line="188" name="g" />
              </scope>
              <scope ilk="function" line="199" lineend="209" name="setCheckedItem" signature="setCheckedItem(groupId, itemId)">
                <variable ilk="argument" name="groupId" />
                <variable ilk="argument" name="itemId" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="groups[groupId]" line="200" name="g" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Ext.menu.Item" ilk="class" line="16" lineend="45" name="CheckItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a menu item that contains a checkbox by default, but can also be part of a radio group." ilk="function" line="16" lineend="45" name="CheckItem" signature="CheckItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="CheckItem" name="this" />
            </scope>
            <variable citdl="String" doc="All check items with the same group name will automatically be grouped into a single-select&#xA;radio button group (defaults to &apos;&apos;)" line="55" name="itemCls" />
            <variable citdl="String" line="59" name="groupClass" />
            <variable citdl="Boolean" doc="if this checkbox is part of a radio group (group = true) only the last item in the group that is&#xA;initialized with checked = true will be rendered as checked." line="66" name="checked" />
            <variable citdl="String" line="69" name="ctype" />
            <scope ilk="function" line="72" lineend="81" name="onRender" signature="onRender(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope ilk="function" line="84" lineend="87" name="destroy" signature="destroy()" />
            <scope doc="Set the checked state of this item" ilk="function" line="94" lineend="104" name="setChecked" signature="setChecked(state, suppressEvent)">
              <variable ilk="argument" name="state" />
              <variable citdl="Boolean" doc="(optional) True to prevent the checkchange event from firing (defaults to false)" ilk="argument" name="suppressEvent" />
            </scope>
            <scope ilk="function" line="107" lineend="112" name="handleClick" signature="handleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope classrefs="Ext.menu.BaseItem" ilk="class" line="16" lineend="18" name="Separator">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will&#xA;add one of these by using &quot;-&quot; in you call to add() or in your items config rather than creating one directly." ilk="function" line="16" lineend="18" name="Separator" signature="Separator(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Separator" name="this" />
            </scope>
            <variable citdl="String" line="24" name="itemCls" />
            <variable citdl="Boolean" line="28" name="hideOnClick" />
            <variable citdl="String" line="34" name="activeClass" />
            <scope ilk="function" line="37" lineend="44" name="onRender" signature="onRender(li)">
              <variable ilk="argument" name="li" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="38" name="s" />
            </scope>
            <variable citdl="s" line="41" name="el" />
          </scope>
          <scope classrefs="Ext.menu.BaseItem" ilk="class" line="17" lineend="22" name="TextItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a static text string to a menu, usually used as either a heading or group separator." ilk="function" line="17" lineend="22" name="TextItem" signature="TextItem(cfg)">
              <variable ilk="argument" name="cfg" />
              <variable citdl="TextItem" name="this" />
            </scope>
            <variable citdl="Boolean" line="31" name="hideOnClick" />
            <variable citdl="String" line="35" name="itemCls" />
            <scope ilk="function" line="38" lineend="44" name="onRender" signature="onRender()">
              <variable attributes="__local__ private" citdl="document.createElement()" line="39" name="s" />
            </scope>
            <variable citdl="s" line="42" name="el" />
          </scope>
          <scope classrefs="Ext.Component" ilk="class" line="17" lineend="45" name="BaseItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The base class for all items that render into menus.  BaseItem provides default rendering, activated state&#xA;management and base configuration options shared by all menu components." ilk="function" line="17" lineend="45" name="BaseItem" signature="BaseItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BaseItem" name="this" />
            </scope>
            <variable citdl="Ext.menu.Menu" doc="The parent Menu of this Item." line="68" name="canActivate" />
            <variable citdl="String" line="72" name="activeClass" />
            <variable citdl="Boolean" line="76" name="hideOnClick" />
            <variable citdl="Number" line="80" name="clickHideDelay" />
            <variable citdl="String" line="83" name="ctype" />
            <variable citdl="String" line="86" name="actionMode" />
            <scope ilk="function" line="89" lineend="99" name="onRender" signature="onRender(container, position)">
              <variable ilk="argument" name="container" />
              <variable ilk="argument" name="position" />
            </scope>
            <variable citdl="this.ownerCt" line="92" name="parentMenu" />
            <scope doc="Sets the function that will handle click events for this item (equivalent to passing in the {@link #handler}&#xA;config property).  If an existing handler is already registered, it will be unregistered for you." ilk="function" line="107" lineend="112" name="setHandler" signature="setHandler(handler, scope)">
              <variable citdl="Function" doc="The function that should be called on click" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The scope that should be passed to the handler" ilk="argument" name="scope" />
            </scope>
            <scope ilk="function" line="115" lineend="122" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="125" lineend="134" name="activate" returns="Boolean" signature="activate()">
              <variable attributes="__local__ private" citdl="this.container" line="129" name="li" />
            </scope>
            <variable citdl="li.getRegion().adjust()" line="131" name="region" />
            <scope ilk="function" line="137" lineend="140" name="deactivate" signature="deactivate()" />
            <scope ilk="function" line="143" lineend="145" name="shouldDeactivate" signature="shouldDeactivate(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="148" lineend="152" name="handleClick" signature="handleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable citdl="Ext.emptyFn" line="155" name="expandMenu" />
            <variable citdl="Ext.emptyFn" line="158" name="hideMenu" />
          </scope>
          <scope classrefs="Ext.menu.BaseItem" ilk="class" line="18" lineend="23" name="Item">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A base class for all menu items that require menu-related functionality (like sub-menus) and are not static&#xA;display items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific&#xA;activation and click handling." ilk="function" line="18" lineend="23" name="Item" signature="Item(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="Ext.menu.MenuMgr.get()" line="21" name="menu" />
            <variable citdl="Ext.menu.Menu" doc="The submenu associated with this Item if one was configured." line="54" name="itemCls" />
            <variable citdl="Boolean" line="58" name="canActivate" />
            <variable citdl="Number" line="62" name="showDelay" />
            <variable citdl="Number" line="64" name="hideDelay" />
            <variable citdl="String" line="67" name="ctype" />
            <scope ilk="function" line="70" lineend="88" name="onRender" signature="onRender(container, position)">
              <variable ilk="argument" name="container" />
              <variable ilk="argument" name="position" />
              <scope ilk="class" line="81" lineend="82" name="Item" />
              <variable attributes="__local__ private" citdl="this.getTemplateArgs()" line="83" name="a" />
            </scope>
            <variable citdl="Ext.menu.Item.prototype.itemTpl" line="81" name="itemTpl" />
            <variable citdl="position" line="84" name="el" />
            <variable citdl="this.el.child()" line="85" name="iconEl" />
            <variable citdl="this.el.child()" line="86" name="textEl" />
            <scope ilk="function" line="90" lineend="100" name="getTemplateArgs" signature="getTemplateArgs()" />
            <scope doc="Sets the text to display in this menu item" ilk="function" line="106" lineend="112" name="setText" signature="setText(text)">
              <variable citdl="String" doc="The text to display" ilk="argument" name="text" />
            </scope>
            <variable citdl="String" line="107" name="text" />
            <scope doc="Sets the CSS class to apply to the item&apos;s icon element" ilk="function" line="118" lineend="124" name="setIconClass" signature="setIconClass(cls)">
              <variable citdl="String" doc="The CSS class to apply" ilk="argument" name="cls" />
              <variable attributes="__local__ private" citdl="this.iconCls" line="119" name="oldCls" />
            </scope>
            <variable citdl="cls" line="120" name="iconCls" />
            <scope ilk="function" line="127" lineend="132" name="beforeDestroy" signature="beforeDestroy()" />
            <scope ilk="function" line="135" lineend="140" name="handleClick" signature="handleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="143" lineend="151" name="activate" returns="Boolean" signature="activate(autoExpand)">
              <variable ilk="argument" name="autoExpand" />
            </scope>
            <scope ilk="function" line="154" lineend="162" name="shouldDeactivate" returns="Boolean" signature="shouldDeactivate(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="165" lineend="168" name="deactivate" signature="deactivate()" />
            <scope ilk="function" line="171" lineend="181" name="expandMenu" signature="expandMenu(autoActivate)">
              <variable ilk="argument" name="autoActivate" />
            </scope>
            <variable citdl="this.deferExpand.defer()" line="176" name="showTimer" />
            <scope ilk="function" line="184" lineend="190" name="deferExpand" signature="deferExpand(autoActivate)">
              <variable ilk="argument" name="autoActivate" />
            </scope>
            <scope ilk="function" line="193" lineend="199" name="hideMenu" signature="hideMenu()" />
            <variable citdl="this.deferHide.defer()" line="197" name="hideTimer" />
            <scope ilk="function" line="202" lineend="209" name="deferHide" signature="deferHide()" />
          </scope>
          <variable citdl="Ext.extend()" doc="A menu containing a {@link Ext.ColorPalette} Component." line="71" name="ColorMenu" />
          <variable citdl="Ext.extend()" doc="A menu containing a {@link Ext.DatePicker} Component." line="89" name="DateMenu" />
          <variable citdl="Ext.extend()" doc="A menu object.  This is the container to which you may add menu items.  Menu can also serve as a base class&#xA;when you want a specialized menu based off of another component (like {@link Ext.menu.DateMenu} for example).&#xA;Menus may contain either {@link Ext.menu.Item menu items}, or general {@link Ext.Component Component}s.&#xA;To make a contained general {@link Ext.Component Component} line up with other {@link Ext.menu.Item menu items}&#xA;specify iconCls: &apos;no-icon&apos;.  This reserves a space for an icon, and indents the Component in line&#xA;with the other menu items.  See {@link Ext.form.ComboBox}.{@link Ext.form.ComboBox#getListParent getListParent}&#xA;for an example.&#xA;By default, Menus are absolutely positioned, floating Components. By configuring a Menu with&#xA;{@link #floating}:false, a Menu may be used as child of a Container." line="663" name="Menu" />
          <variable citdl="Ext.extend()" line="733" name="MenuNav" />
        </variable>
        <variable citdl="Object" line="19" lineend="19" name="DataView" />
        <variable citdl="Object" line="19" lineend="17" name="View" />
        <scope ilk="class" line="22" lineend="34" name="ComponentMgr">
          <variable citdl="Object" line="22" lineend="138" name="ComponentMgr">
            <scope doc="Registers a component." ilk="function" line="32" lineend="34" name="register" signature="register(c)">
              <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Unregisters a component." ilk="function" line="40" lineend="42" name="unregister" signature="unregister(c)">
              <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Returns a component by {@link Ext.Component#id id}.&#xA;For additional details see {@link Ext.util.MixedCollection#get}." ilk="function" line="51" lineend="53" name="get" returns="all.get()" signature="get(id)">
              <variable citdl="String" doc="The component {@link Ext.Component#id id}" ilk="argument" name="id" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Registers a function that will be called when a specified component is added to ComponentMgr" ilk="function" line="61" lineend="68" name="onAvailable" signature="onAvailable(id, fn, scope)">
              <variable citdl="String" doc="The component {@link Ext.Component#id id}" ilk="argument" name="id" />
              <variable citdl="Function" doc="The callback function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The scope of the callback" ilk="argument" name="scope" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <variable citdl="MixedCollection" doc="The MixedCollection used internally for the component cache. An example usage may be subscribing to&#xA;events on the MixedCollection to monitor addition or removal.  Read-only." line="75" name="all" />
            <scope doc="Checks if a Component type is registered." ilk="function" line="82" lineend="84" name="isRegistered" returns="Boolean" signature="isRegistered(xtype)">
              <variable citdl="Ext.Component" doc="The mnemonic string by which the Component class may be looked up" ilk="argument" name="xtype" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Registers a new Component constructor, keyed by a new&#xA;{@link Ext.Component#xtype}.&#xA;Use this method (or its alias {@link Ext#reg Ext.reg}) to register new&#xA;subclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying&#xA;child Components.&#xA;see {@link Ext.Container#items}" ilk="function" line="96" lineend="99" name="registerType" signature="registerType(xtype, cls)">
              <variable citdl="String" doc="The mnemonic string by which the Component class may be looked up." ilk="argument" name="xtype" />
              <variable citdl="Constructor" doc="The new Component class." ilk="argument" name="cls" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Creates a new Component from the specified config object using the&#xA;config object&apos;s {@link Ext.component#xtype xtype} to determine the class to instantiate." ilk="function" line="109" lineend="111" name="create" returns="Ext.Component" signature="create(config, defaultType)">
              <variable citdl="Object" doc="A configuration object for the Component you wish to create." ilk="argument" name="config" />
              <variable citdl="Constructor" doc="The constructor to provide the default Component type if&#xA;the config object does not contain a xtype. (Optional if the config contains a xtype)." ilk="argument" name="defaultType" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Registers a new Plugin constructor, keyed by a new&#xA;{@link Ext.Component#ptype}.&#xA;Use this method (or its alias {@link Ext#preg Ext.preg}) to register new&#xA;plugins for {@link Ext.Component}s so that lazy instantiation may be used when specifying&#xA;Plugins." ilk="function" line="122" lineend="125" name="registerPlugin" signature="registerPlugin(ptype, cls)">
              <variable citdl="String" doc="The mnemonic string by which the Plugin class may be looked up." ilk="argument" name="ptype" />
              <variable citdl="Constructor" doc="The new Plugin class." ilk="argument" name="cls" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Creates a new Plugin from the specified config object using the&#xA;config object&apos;s {@link Ext.component#ptype ptype} to determine the class to instantiate." ilk="function" line="135" lineend="137" name="createPlugin" returns="Ext.Component" signature="createPlugin(config, defaultType)">
              <variable citdl="Object" doc="A configuration object for the Plugin you wish to create." ilk="argument" name="config" />
              <variable citdl="Constructor" doc="The constructor to provide the default Plugin type if&#xA;the config object does not contain a ptype. (Optional if the config contains a ptype)." ilk="argument" name="defaultType" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
          </variable>
        </scope>
        <variable citdl="Object" line="22" name="state">
          <scope classrefs="Ext.util.Observable" ilk="class" line="13" lineend="24" name="Provider">
            <scope attributes="__ctor__" doc="Abstract base class for state provider implementations. This class provides methods&#xA;for encoding and decoding typed variables including dates and defines the&#xA;Provider interface." ilk="function" line="13" lineend="24" name="Provider" signature="Provider()">
              <variable citdl="Provider" name="this" />
            </scope>
            <variable citdl="Object" line="22" lineend="22" name="state" />
            <scope doc="Returns the current value for a key" ilk="function" line="32" lineend="35" name="get" returns="Mixed" signature="get(name, defaultValue)">
              <variable citdl="String" doc="The key name" ilk="argument" name="name" />
              <variable citdl="Mixed" doc="A default value to return if the key&apos;s value is not found" ilk="argument" name="defaultValue" />
            </scope>
            <variable citdl="this.state[name]" line="34" name="defaultValue" />
            <scope doc="Clears a value from the state" ilk="function" line="41" lineend="44" name="clear" signature="clear(name)">
              <variable citdl="String" doc="The key name" ilk="argument" name="name" />
            </scope>
            <scope doc="Sets the value for a key" ilk="function" line="51" lineend="54" name="set" signature="set(name, value)">
              <variable citdl="String" doc="The key name" ilk="argument" name="name" />
              <variable citdl="Mixed" doc="The value to set" ilk="argument" name="value" />
            </scope>
            <scope doc="Decodes a string previously encoded with {@link #encodeValue}." ilk="function" line="61" lineend="92" name="decodeValue" returns="Mixed" signature="decodeValue(cookie)">
              <variable ilk="argument" name="cookie" />
              <variable attributes="__local__ private" line="62" name="re" />
              <variable attributes="__local__ private" citdl="re.exec()" line="63" name="matches" />
              <variable attributes="__local__ private" citdl="matches[1]" line="65" name="type" />
              <variable attributes="__local__ private" citdl="matches[2]" line="66" name="v" />
              <variable attributes="__local__ private" citdl="Array" line="75" lineend="82" name="all" />
              <variable attributes="__local__ private" citdl="v.split()" line="76" name="values" />
              <variable attributes="__local__ private" citdl="values[i].split()" line="85" name="kv" />
            </scope>
            <scope doc="Encodes a value including type information.  Decode with {@link #decodeValue}." ilk="function" line="99" lineend="126" name="encodeValue" returns="String" signature="encodeValue(v)">
              <variable ilk="argument" name="v" />
              <variable attributes="__local__ private" citdl="String" line="100" name="enc" />
              <variable attributes="__local__ private" citdl="String" line="108" name="flat" />
            </scope>
          </scope>
          <scope ilk="class" line="22" lineend="32" name="Manager">
            <variable citdl="Object" line="22" lineend="68" name="Manager">
              <scope doc="Configures the default state provider for your application" ilk="function" line="30" lineend="32" name="setProvider" signature="setProvider(stateProvider)">
                <variable citdl="Provider" doc="The state provider to set" ilk="argument" name="stateProvider" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Returns the current value for a key" ilk="function" line="40" lineend="42" name="get" returns="Mixed" signature="get(key, defaultValue)">
                <variable ilk="argument" name="key" />
                <variable citdl="Mixed" doc="The default value to return if the key lookup does not match" ilk="argument" name="defaultValue" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Sets the value for a key" ilk="function" line="49" lineend="51" name="set" signature="set(key, value)">
                <variable ilk="argument" name="key" />
                <variable citdl="Mixed" doc="The state data" ilk="argument" name="value" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Clears a value from the state" ilk="function" line="57" lineend="59" name="clear" signature="clear(key)">
                <variable ilk="argument" name="key" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Gets the currently configured state provider" ilk="function" line="65" lineend="67" name="getProvider" returns="Provider" signature="getProvider()">
                <variable citdl="Manager" name="this" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Ext.state.Provider" ilk="class" line="32" lineend="40" name="CookieProvider">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The default Provider implementation which saves state via cookies.&#xA;Usage:&#xA;var cp = new Ext.state.CookieProvider({&#xA;path: &quot;/cgi-bin/&quot;,&#xA;expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days&#xA;domain: &quot;extjs.com&quot;&#xA;});&#xA;Ext.state.Manager.setProvider(cp);" ilk="function" line="32" lineend="40" name="CookieProvider" signature="CookieProvider(config)">
              <variable citdl="Object" doc="The configuration object" ilk="argument" name="config" />
              <variable citdl="CookieProvider" name="this" />
            </scope>
            <variable citdl="String" line="34" name="path" />
            <variable citdl="Date" line="35" name="expires" />
            <variable line="36" name="domain" />
            <variable citdl="Boolean" line="37" name="secure" />
            <variable citdl="this.readCookies()" line="39" name="state" />
            <scope ilk="function" line="44" lineend="51" name="set" signature="set(name, value)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="54" lineend="57" name="clear" signature="clear(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <scope ilk="function" line="60" lineend="73" name="readCookies" returns="cookies" signature="readCookies()">
              <variable attributes="__local__ private" citdl="Object" line="61" lineend="61" name="cookies" />
              <variable attributes="__local__ private" citdl="document.cookie" line="62" name="c" />
              <variable attributes="__local__ private" line="63" name="re" />
              <variable attributes="__local__ private" line="64" name="matches" />
              <variable attributes="__local__ private" citdl="matches[1]" line="66" name="name" />
              <variable attributes="__local__ private" citdl="matches[2]" line="67" name="value" />
            </scope>
            <scope ilk="function" line="76" lineend="82" name="setCookie" signature="setCookie(name, value)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="85" lineend="90" name="clearCookie" signature="clearCookie(name)">
              <variable ilk="argument" name="name" />
            </scope>
          </scope>
        </variable>
        <variable citdl="String" doc="The version of the framework" line="22" name="version" />
        <variable citdl="Object" line="23" name="grid">
          <scope classrefs="Ext.dd.DDProxy" ilk="class" line="9" name="SplitDragZone">
            <scope attributes="__ctor__" ilk="function" line="9" lineend="20" name="SplitDragZone" signature="SplitDragZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="SplitDragZone" name="this" />
            </scope>
            <variable citdl="grid" line="10" name="grid" />
            <variable citdl="grid.getView()" line="11" name="view" />
            <variable citdl="this.view.resizeProxy" line="12" name="proxy" />
            <variable citdl="Boolean" line="19" name="scroll" />
            <variable citdl="Ext.Element.fly" line="22" name="fly" />
            <scope ilk="function" line="24" lineend="36" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnWidth()" line="27" name="w" />
              <variable attributes="__local__ private" citdl="Math.max()" line="28" name="minw" />
            </scope>
            <variable citdl="x" line="32" name="minX" />
            <variable citdl="x" line="33" name="maxX" />
            <variable citdl="x" line="34" name="startPos" />
            <scope ilk="function" line="39" lineend="50" name="handleMouseDown" signature="handleMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.EventObject.setEvent()" line="40" name="ev" />
              <variable attributes="__local__ private" citdl="this.fly()" line="41" name="t" />
            </scope>
            <variable citdl="this.view.getCellIndex()" line="43" name="cellIndex" />
            <variable citdl="t.dom" line="44" name="split" />
            <variable citdl="this.grid.colModel" line="45" name="cm" />
            <scope ilk="function" line="52" lineend="57" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Math.max()" line="54" name="endX" />
              <variable attributes="__local__ private" citdl="endX" line="55" name="diff" />
            </scope>
            <scope ilk="function" line="59" lineend="61" name="autoOffset" signature="autoOffset()" />
          </scope>
          <scope classrefs="Ext.Editor" ilk="class" line="9" name="GridEditor">
            <scope attributes="__ctor__" ilk="function" line="9" lineend="12" name="GridEditor" signature="GridEditor(field, config)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="config" />
              <variable citdl="GridEditor" name="this" />
            </scope>
            <variable citdl="String" line="15" name="alignment" />
            <variable citdl="String" line="16" name="autoSize" />
            <variable citdl="Boolean" line="17" name="hideEl" />
            <variable citdl="String" line="18" name="cls" />
            <variable citdl="Boolean" line="19" name="shim" />
            <variable citdl="Boolean" line="20" name="shadow" />
          </scope>
          <scope classrefs="Ext.dd.DragZone" ilk="class" line="9" lineend="63" name="HeaderDragZone">
            <scope attributes="__ctor__" ilk="function" line="9" lineend="19" name="HeaderDragZone" signature="HeaderDragZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="HeaderDragZone" name="this" />
            </scope>
            <variable citdl="grid" line="10" name="grid" />
            <variable citdl="grid.getView()" line="11" name="view" />
            <variable citdl="String" line="12" name="ddGroup" />
            <variable citdl="Boolean" line="18" name="scroll" />
            <variable citdl="Number" line="21" name="maxDragWidth" />
            <scope ilk="function" line="22" lineend="29" name="getDragData" returns="Boolean" signature="getDragData(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="23" name="t" />
              <variable attributes="__local__ private" citdl="this.view.findHeaderCell()" line="24" name="h" />
            </scope>
            <scope ilk="function" line="31" lineend="38" name="onInitDrag" returns="Boolean" signature="onInitDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.dragData.ddel.cloneNode()" line="33" name="clone" />
            </scope>
            <scope ilk="function" line="40" lineend="45" name="afterValidDrop" signature="afterValidDrop()">
              <variable attributes="__local__ private" citdl="this.view" line="41" name="v" />
              <scope attributes="__local__ private" ilk="function" line="42" lineend="44" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="47" lineend="52" name="afterInvalidDrop" signature="afterInvalidDrop()">
              <variable attributes="__local__ private" citdl="this.view" line="48" name="v" />
              <scope attributes="__local__ private" ilk="function" line="49" lineend="51" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="14" lineend="281" name="Column">
            <scope attributes="__ctor__" doc="This class encapsulates column configuration data to be used in the initialization of a&#xA;{@link Ext.grid.ColumnModel ColumnModel}.&#xA;While subclasses are provided to render data in different ways, this class renders a passed&#xA;data field unchanged and is usually used for textual columns." ilk="function" line="14" lineend="31" name="Column" signature="Column(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Column" name="this" />
            </scope>
            <variable citdl="Ext.util.Format[this.renderer]" line="18" name="renderer" />
            <variable citdl="this.renderer.scope" line="20" name="scope" />
            <variable line="26" name="id" />
            <variable citdl="Ext.create()" line="29" name="editor" />
            <variable citdl="Number" line="33" name="AUTO_ID" />
            <variable citdl="Boolean" doc="{@link #editor}.  Set to false to initially disable editing on this column.&#xA;The initial configuration may be dynamically altered using&#xA;{@link Ext.grid.ColumnModel}.{@link Ext.grid.ColumnModel#setEditable setEditable()}.&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;fn: this.gridRenderer,&#xA;scope: this&#xA;var companyColumn = {&#xA;header: &apos;Company Name&apos;,&#xA;dataIndex: &apos;company&apos;,&#xA;renderer: function(value, metaData, record, rowIndex, colIndex, store) {&#xA;// provide the logic depending on business rules&#xA;// name of your own choosing to manipulate the cell depending upon&#xA;// the data in the underlying Record object.&#xA;if (value == &apos;whatever&apos;) {&#xA;//metaData.css : String : A CSS class name to add to the TD element of the cell.&#xA;//metaData.attr : String : An html attribute definition string to apply to&#xA;//                         the data container element within the table&#xA;//                         cell (e.g. &apos;style=&quot;color:red;&quot;&apos;).&#xA;metaData.css = &apos;name-of-css-class-you-will-define&apos;;&#xA;return value;&#xA;&#xA;&#xA;&#xA;&#xA;var grid = new Ext.grid.GridPanel({&#xA;...&#xA;columns: [{&#xA;header: &apos;Last Updated&apos;,&#xA;dataIndex: &apos;lastChange&apos;,&#xA;width: 85,&#xA;sortable: true,&#xA;//renderer: Ext.util.Format.dateRenderer(&apos;m/d/Y&apos;),&#xA;xtype: &apos;datecolumn&apos;, // use xtype instead of renderer&#xA;format: &apos;M/d/Y&apos; // configuration property for {@link Ext.grid.DateColumn}&#xA;}, {&#xA;...&#xA;});&#xA;&#xA;*/// private. Used by ColumnModel to avoid reprocessing" line="230" name="isColumn" />
            <scope citdl="Function" doc="Optional. A function which returns displayable data when passed the following parameters:&#xA;&#xA;value : ObjectThe data value for the cell.&#xA;metadata : ObjectAn object in which you may set the following attributes:&#xA;css : StringA CSS class name to add to the cell&apos;s TD element.&#xA;attr : StringAn HTML attribute definition string to apply to the data container&#xA;element within the table cell (e.g. &apos;style=&quot;color:red;&quot;&apos;).&#xA;record : Ext.data.recordThe {@link Ext.data.Record} from which the data was&#xA;extracted.&#xA;rowIndex : NumberRow index&#xA;colIndex : NumberColumn index&#xA;store : Ext.data.StoreThe {@link Ext.data.Store} object from which the Record&#xA;was extracted." ilk="function" line="249" lineend="254" name="renderer" returns="value" signature="renderer(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope ilk="function" line="257" lineend="259" name="getEditor" returns="this.editable" signature="getEditor(rowIndex)">
              <variable ilk="argument" name="rowIndex" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Returns the {@link Ext.Editor editor} defined for this column that was created to wrap the {@link Ext.form.Field Field}&#xA;used to edit the cell." ilk="function" line="267" lineend="280" name="getCellEditor" returns="Ext.Editor" signature="getCellEditor(rowIndex)">
              <variable citdl="Number" doc="The row index" ilk="argument" name="rowIndex" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="this.getEditor()" line="268" name="editor" />
            </scope>
            <variable citdl="Object" line="400" lineend="406" name="types">
              <variable citdl="Ext.grid.Column" line="401" name="gridcolumn" />
              <variable citdl="Ext.grid.BooleanColumn" line="402" name="booleancolumn" />
              <variable citdl="Ext.grid.NumberColumn" line="403" name="numbercolumn" />
              <variable citdl="Ext.grid.DateColumn" line="404" name="datecolumn" />
              <variable citdl="Ext.grid.TemplateColumn" line="405" name="templatecolumn" />
            </variable>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="14" lineend="17" name="AbstractSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Abstract base class for grid SelectionModels.  It provides the interface that should be&#xA;implemented by descendant classes.  This class should not be directly instantiated." ilk="function" line="14" lineend="17" name="AbstractSelectionModel" signature="AbstractSelectionModel()">
              <variable citdl="AbstractSelectionModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="15" name="locked" />
            <scope citdl="Object" doc="The GridPanel for which this SelectionModel is handling selection. Read-only.&#xA;*//** @ignore Called by the grid automatically. Do not call directly. */" ilk="function" line="27" lineend="30" name="init" signature="init(grid)">
              <variable ilk="argument" name="grid" />
            </scope>
            <variable citdl="grid" line="28" name="grid" />
            <scope doc="Locks the selections." ilk="function" line="35" lineend="37" name="lock" signature="lock()" />
            <scope doc="Unlocks the selections." ilk="function" line="42" lineend="44" name="unlock" signature="unlock()" />
            <scope doc="Returns true if the selections are locked." ilk="function" line="50" lineend="52" name="isLocked" returns="Boolean" signature="isLocked()" />
            <scope ilk="function" line="54" lineend="56" name="destroy" signature="destroy()" />
          </scope>
          <scope classrefs="Ext.grid.AbstractSelectionModel" ilk="class" line="17" lineend="62" name="RowSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The default SelectionModel used by {@link Ext.grid.GridPanel}.&#xA;It supports multiple selections and keyboard selection/navigation. The objects stored&#xA;as selections and returned by {@link #getSelected}, and {@link #getSelections} are&#xA;the {@link Ext.data.Record Record}s which provide the data for the selected rows." ilk="function" line="17" lineend="62" name="RowSelectionModel" signature="RowSelectionModel(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="RowSelectionModel" name="this" />
              <scope attributes="__local__ private" ilk="function" line="19" lineend="21" name="(anonymous)" returns="o.id" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="21" name="selections" />
            <variable citdl="Boolean" line="23" name="last" />
            <variable citdl="Boolean" line="24" name="lastActive" />
            <variable citdl="Boolean" doc="true to allow selection of only one row at a time (defaults to false&#xA;allowing multiple selections)" line="70" name="singleSelect" />
            <scope doc="false to turn off moving the editor to the next row down when the enter key is pressed&#xA;or the next row up when shift + enter keys are pressed.&#xA;*/// private" ilk="function" line="78" lineend="127" name="initEvents" signature="initEvents()">
              <variable attributes="__local__ private" citdl="this.grid.view" line="123" name="view" />
            </scope>
            <variable citdl="Ext.KeyNav" line="121" name="rowNav" />
            <scope ilk="function" line="130" lineend="143" name="onRefresh" signature="onRefresh()">
              <variable attributes="__local__ private" line="131" name="index" />
              <variable attributes="__local__ private" citdl="this.grid.store" line="131" name="ds" />
              <variable attributes="__local__ private" citdl="this.getSelections()" line="132" name="s" />
              <variable attributes="__local__ private" citdl="s[i]" line="135" name="r" />
            </scope>
            <scope ilk="function" line="146" lineend="150" name="onRemove" signature="onRemove(v, index, r)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="r" />
            </scope>
            <scope ilk="function" line="153" lineend="157" name="onRowUpdated" signature="onRowUpdated(v, index, r)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="r" />
            </scope>
            <scope doc="Select records." ilk="function" line="164" lineend="172" name="selectRecords" signature="selectRecords(records, keepExisting)">
              <variable citdl="Array" doc="The records to select" ilk="argument" name="records" />
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
              <variable attributes="__local__ private" citdl="this.grid.store" line="168" name="ds" />
            </scope>
            <scope doc="Gets the number of selected rows." ilk="function" line="178" lineend="180" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Selects the first row in the grid." ilk="function" line="185" lineend="187" name="selectFirstRow" signature="selectFirstRow()" />
            <scope doc="Select the last row." ilk="function" line="193" lineend="195" name="selectLastRow" signature="selectLastRow(keepExisting)">
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Selects the row immediately following the last selected row." ilk="function" line="202" lineend="209" name="selectNext" returns="Boolean" signature="selectNext(keepExisting)">
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Selects the row that precedes the last selected row." ilk="function" line="216" lineend="223" name="selectPrevious" returns="Boolean" signature="selectPrevious(keepExisting)">
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Returns true if there is a next record to select" ilk="function" line="229" lineend="231" name="hasNext" returns="Boolean" signature="hasNext()" />
            <scope doc="Returns true if there is a previous record to select" ilk="function" line="237" lineend="239" name="hasPrevious" returns="Boolean" signature="hasPrevious()" />
            <scope doc="Returns the selected records" ilk="function" line="246" lineend="248" name="getSelections" returns="Array" signature="getSelections()" />
            <scope doc="Returns the first selected record." ilk="function" line="254" lineend="256" name="getSelected" returns="Record" signature="getSelected()" />
            <scope doc="Calls the passed function with each selection. If the function returns&#xA;false, iteration is stopped and this function returns&#xA;false. Otherwise it returns true." ilk="function" line="266" lineend="274" name="each" returns="Boolean" signature="each(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.getSelections()" line="267" name="s" />
            </scope>
            <scope doc="Clears all selections if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}." ilk="function" line="282" lineend="297" name="clearSelections" signature="clearSelections(fast)">
              <variable citdl="Boolean" doc="(optional) true to bypass the&#xA;conditional checks and events described in {@link #deselectRow}." ilk="argument" name="fast" />
              <variable attributes="__local__ private" citdl="this.grid.store" line="287" name="ds" />
              <variable attributes="__local__ private" citdl="this.selections" line="288" name="s" />
              <scope attributes="__local__ private" ilk="function" line="289" lineend="291" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Selects all rows if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}." ilk="function" line="304" lineend="312" name="selectAll" signature="selectAll()" />
            <scope doc="Returns true if there is a selection." ilk="function" line="318" lineend="320" name="hasSelection" returns="Boolean" signature="hasSelection()" />
            <scope doc="Returns true if the specified row is selected." ilk="function" line="327" lineend="330" name="isSelected" returns="Boolean" signature="isSelected(index)">
              <variable citdl="Number/Record" doc="The record or index of the record to check" ilk="argument" name="index" />
              <variable attributes="__local__ private" line="328" name="r" />
            </scope>
            <scope doc="Returns true if the specified record id is selected." ilk="function" line="337" lineend="339" name="isIdSelected" returns="Boolean" signature="isIdSelected(id)">
              <variable citdl="String" doc="The id of record to check" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="342" lineend="361" name="handleMouseDown" signature="handleMouseDown(g, rowIndex, e)">
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="rowIndex" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.grid.getView()" line="346" name="view" />
              <variable attributes="__local__ private" citdl="this.last" line="348" name="last" />
              <variable attributes="__local__ private" citdl="this.isSelected()" line="353" name="isSelected" />
            </scope>
            <scope doc="Selects multiple rows." ilk="function" line="369" lineend="376" name="selectRows" signature="selectRows(rows, keepExisting)">
              <variable citdl="Array" doc="Array of the indexes of the row to select" ilk="argument" name="rows" />
              <variable citdl="Boolean" doc="(optional) true to keep&#xA;existing selections (defaults to false)" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Selects a range of rows if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.&#xA;All rows in between startRow and endRow are also selected." ilk="function" line="386" lineend="403" name="selectRange" signature="selectRange(startRow, endRow, keepExisting)">
              <variable citdl="Number" doc="The index of the first row in the range" ilk="argument" name="startRow" />
              <variable citdl="Number" doc="The index of the last row in the range" ilk="argument" name="endRow" />
              <variable citdl="Boolean" doc="(optional) True to retain existing selections" ilk="argument" name="keepExisting" />
              <variable attributes="__local__ private" line="387" name="i" />
            </scope>
            <scope doc="Deselects a range of rows if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.&#xA;All rows in between startRow and endRow are also deselected." ilk="function" line="412" lineend="419" name="deselectRange" signature="deselectRange(startRow, endRow, preventViewNotify)">
              <variable citdl="Number" doc="The index of the first row in the range" ilk="argument" name="startRow" />
              <variable citdl="Number" doc="The index of the last row in the range" ilk="argument" name="endRow" />
              <variable ilk="argument" name="preventViewNotify" />
            </scope>
            <scope doc="Selects a row.  Before selecting a row, checks if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is locked} and fires the&#xA;{@link #beforerowselect} event.  If these checks are satisfied the row&#xA;will be selected and followed up by  firing the {@link #rowselect} and&#xA;{@link #selectionchange} events." ilk="function" line="432" lineend="449" name="selectRow" signature="selectRow(index, keepExisting, preventViewNotify)">
              <variable ilk="argument" name="index" />
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
              <variable citdl="Boolean" doc="(optional) Specify true to&#xA;prevent notifying the view (disables updating the selected appearance)" ilk="argument" name="preventViewNotify" />
              <variable attributes="__local__ private" citdl="this.grid.store.getAt()" line="436" name="r" />
            </scope>
            <scope doc="Deselects a row.  Before deselecting a row, checks if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is locked}.&#xA;If this check is satisfied the row will be deselected and followed up by&#xA;firing the {@link #rowdeselect} and {@link #selectionchange} events." ilk="function" line="460" lineend="479" name="deselectRow" signature="deselectRow(index, preventViewNotify)">
              <variable ilk="argument" name="index" />
              <variable citdl="Boolean" doc="(optional) Specify true to&#xA;prevent notifying the view (disables updating the selected appearance)" ilk="argument" name="preventViewNotify" />
              <variable attributes="__local__ private" citdl="this.grid.store.getAt()" line="470" name="r" />
            </scope>
            <scope ilk="function" line="482" lineend="486" name="restoreLast" signature="restoreLast()" />
            <scope ilk="function" line="489" lineend="491" name="acceptsNav" signature="acceptsNav(row, col, cm)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="cm" />
            </scope>
            <scope ilk="function" line="494" lineend="521" name="onEditorKey" signature="onEditorKey(field, e)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="g.activeEditor" line="495" name="ed" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="495" name="k" />
              <variable attributes="__local__ private" citdl="g.walkCells()" line="495" name="newCell" />
              <variable attributes="__local__ private" citdl="this.grid" line="495" name="g" />
              <variable attributes="__local__ private" citdl="e.shiftKey" line="496" name="shift" />
            </scope>
            <scope ilk="function" line="523" lineend="529" name="destroy" signature="destroy()" />
          </scope>
          <scope classrefs="Ext.dd.DragZone" ilk="class" line="17" lineend="24" name="GridDragZone">
            <scope attributes="__ctor__" doc="A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the&#xA;template methods of DragZone to enable dragging of the selected rows of a GridPanel.&#xA;A cooperating {@link Ext.dd.DropZone DropZone} must be created who&apos;s template method implementations of&#xA;{@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},&#xA;{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} are able&#xA;to process the {@link #getDragData data} which is provided." ilk="function" line="17" lineend="24" name="GridDragZone" signature="GridDragZone(grid, config)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="config" />
              <variable citdl="GridDragZone" name="this" />
            </scope>
            <variable citdl="grid.getView()" line="18" name="view" />
            <variable citdl="Boolean" line="20" name="scroll" />
            <variable citdl="grid" line="21" name="grid" />
            <variable citdl="document.createElement()" line="22" name="ddel" />
            <variable citdl="String" line="27" name="ddGroup" />
            <scope doc="The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.&#xA;This data is available for processing in the {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},&#xA;{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} methods of a cooperating {@link Ext.dd.DropZone DropZone}.&#xA;The data object contains the following properties:&#xA;grid : Ext.Grid.GridPanelThe GridPanel from which the data is being dragged.&#xA;ddel : htmlElementAn htmlElement which provides the &quot;picture&quot; of the data being dragged.&#xA;rowIndex : NumberThe index of the row which receieved the mousedown gesture which triggered the drag.&#xA;selections : ArrayAn Array of the selected Records which are being dragged from the GridPanel." ilk="function" line="40" lineend="51" name="getDragData" returns="Boolean" signature="getDragData(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="41" name="t" />
              <variable attributes="__local__ private" citdl="this.view.findRowIndex()" line="42" name="rowIndex" />
              <variable attributes="__local__ private" citdl="this.grid.selModel" line="44" name="sm" />
            </scope>
            <scope doc="The provided implementation of the onInitDrag method. Sets the innerHTML of the drag proxy which provides the &quot;picture&quot;&#xA;of the data being dragged.&#xA;The innerHTML data is found by calling the owning GridPanel&apos;s {@link Ext.grid.GridPanel#getDragDropText getDragDropText}." ilk="function" line="58" lineend="63" name="onInitDrag" signature="onInitDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.dragData" line="59" name="data" />
            </scope>
            <scope doc="An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight&#xA;the selected rows to show that they have not been dragged." ilk="function" line="69" lineend="71" name="afterRepair" signature="afterRepair()" />
            <variable citdl="Boolean" line="70" name="dragging" />
            <scope doc="An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.&#xA;Called before a repair of an invalid drop to get the XY to animate to." ilk="function" line="79" lineend="81" name="getRepairXY" returns="Array" signature="getRepairXY(e, data)">
              <variable citdl="EventObject" doc="The mouse up event" ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="83" lineend="85" name="onEndDrag" signature="onEndDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="87" lineend="90" name="onValidDrop" signature="onValidDrop(dd, e, id)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="92" lineend="94" name="beforeInvalidDrop" signature="beforeInvalidDrop(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="18" lineend="76" name="GridView">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class encapsulates the user interface of an {@link Ext.grid.GridPanel}.&#xA;Methods of this class may be used to access user interface elements to enable&#xA;special display effects. Do not change the DOM structure of the user interface.&#xA;This class does not provide ways to manipulate the underlying data. The data&#xA;model of a Grid is held in an {@link Ext.data.Store}." ilk="function" line="18" lineend="76" name="GridView" signature="GridView(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="GridView" name="this" />
            </scope>
            <variable citdl="Ext.grid.GridDragZone" doc="Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom&#xA;parameters to the row template for the current row to customize how it is rendered using the rowParams&#xA;parameter.  This function should return the CSS class name (or empty string &apos;&apos; for none) that will be added&#xA;to the row&apos;s wrapping div.  To apply multiple class names, simply return them space-delimited within the string&#xA;(e.g., &apos;my-class another-class&apos;). Example usage:&#xA;viewConfig: {&#xA;forceFit: true,&#xA;showPreview: true, // custom property&#xA;enableRowBody: true, // required to create a second, full-width row to show expanded Record data&#xA;getRowClass: function(record, rowIndex, rp, ds){ // rp = rowParams&#xA;if(this.showPreview){&#xA;rp.body = &apos;&amp;lt;p&gt;&apos;+record.data.excerpt+&apos;&amp;lt;/p&gt;&apos;;&#xA;return &apos;x-grid3-row-expanded&apos;;&#xA;return &apos;x-grid3-row-collapsed&apos;;&#xA;&#xA;&#xA;&#xA;&#xA;this.mainBody.update(&apos;&amp;lt;div class=&quot;x-grid-empty&quot;&gt;&apos; + this.emptyText + &apos;&amp;lt;/div&gt;&apos;);" line="153" name="deferEmptyText" />
            <variable citdl="Number" doc="(defaults to 19 pixels)." line="158" name="scrollOffset" />
            <variable citdl="Boolean" doc="Defaults to false.  Specify true to have the column widths re-proportioned&#xA;when the grid is initially rendered.  The&#xA;{@link Ext.grid.Column#width initially configured width} of each column will be adjusted&#xA;to fit the grid width and prevent horizontal scrolling. If columns are later resized (manually&#xA;or programmatically), the other columns in the grid will not be resized to fit the grid width.&#xA;See {@link #forceFit} also." line="168" name="autoFill" />
            <variable citdl="Boolean" doc="Defaults to false.  Specify true to have the column widths re-proportioned&#xA;at all times.  The {@link Ext.grid.Column#width initially configured width} of each&#xA;column will be adjusted to fit the grid width and prevent horizontal scrolling. If columns are&#xA;later resized (manually or programmatically), the other columns in the grid will be resized&#xA;to fit the grid width. See {@link #autoFill} also." line="177" name="forceFit" />
            <variable citdl="Array" line="181" name="sortClasses" />
            <variable citdl="String" line="185" name="sortAscText" />
            <variable citdl="String" line="189" name="sortDescText" />
            <variable citdl="String" line="193" name="columnsText" />
            <variable citdl="String" doc="example overriding the default styling:&#xA;.x-grid3-row-selected {background-color: yellow;}&#xA;Note that this only controls the row, and will not do anything for the text inside it.  To style inner&#xA;facets (like text) use something like:&#xA;.x-grid3-row-selected .x-grid3-cell-inner {&#xA;color: #FFCC00;" line="210" name="selectedRowClass" />
            <variable citdl="Number" line="213" name="borderWidth" />
            <variable citdl="String" line="214" name="tdClass" />
            <variable citdl="String" line="215" name="hdCls" />
            <variable citdl="Boolean" line="216" name="markDirty" />
            <variable citdl="Number" line="221" name="cellSelectorDepth" />
            <variable citdl="Number" line="225" name="rowSelectorDepth" />
            <variable citdl="String" line="230" name="cellSelector" />
            <variable citdl="String" line="234" name="rowSelector" />
            <variable citdl="String" line="237" name="firstRowCls" />
            <variable citdl="String" line="238" name="lastRowCls" />
            <variable line="239" name="rowClsRe" />
            <scope ilk="function" line="244" lineend="306" name="initTemplates" signature="initTemplates()">
              <variable attributes="__local__ private" citdl="this.templates" line="245" name="ts" />
              <variable attributes="__local__ private" citdl="ts[k]" line="297" name="t" />
            </scope>
            <variable citdl="ts" line="304" name="templates" />
            <variable citdl="RegExp" line="305" name="colRe" />
            <scope ilk="function" line="309" lineend="315" name="fly" returns="this._flyweight" signature="fly(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <variable citdl="Ext.Element.Flyweight" line="311" name="_flyweight" />
            <scope ilk="function" line="318" lineend="320" name="getEditorParent" returns="this.scroller.dom" signature="getEditorParent()" />
            <scope ilk="function" line="323" lineend="356" name="initElements" signature="initElements()">
              <variable attributes="__local__ private" citdl="Ext.Element" line="324" name="E" />
              <variable attributes="__local__ private" citdl="this.grid.getGridEl().dom.firstChild" line="326" name="el" />
              <variable attributes="__local__ private" citdl="el.childNodes" line="327" name="cs" />
            </scope>
            <variable citdl="E" line="329" name="el" />
            <variable citdl="E" line="331" name="mainWrap" />
            <variable citdl="E" line="332" name="mainHd" />
            <variable citdl="this.mainHd.dom.firstChild" line="338" name="innerHd" />
            <variable citdl="E" line="339" name="scroller" />
            <variable citdl="Ext.Element" doc="Read-only. The GridView&apos;s body Element which encapsulates all rows in the Grid.&#xA;This {@link Ext.Element Element} is only available after the GridPanel has been rendered." line="349" name="mainBody" />
            <variable citdl="E" line="351" name="focusEl" />
            <variable citdl="E" line="354" name="resizeMarker" />
            <variable citdl="E" line="355" name="resizeProxy" />
            <scope ilk="function" line="359" lineend="361" name="getRows" returns="this.hasRows()" signature="getRows()" />
            <scope ilk="function" line="366" lineend="371" name="findCell" returns="this.fly().findParent()" signature="findCell(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <scope doc="Return the index of the grid column which contains the passed element.&#xA;See also {@link #findRowIndex}" ilk="function" line="379" lineend="385" name="findCellIndex" returns="Boolean" signature="findCellIndex(el, requiredCls)">
              <variable citdl="Element" doc="The target element" ilk="argument" name="el" />
              <variable ilk="argument" name="requiredCls" />
              <variable attributes="__local__ private" citdl="this.findCell()" line="380" name="cell" />
            </scope>
            <scope ilk="function" line="388" lineend="396" name="getCellIndex" returns="Boolean" signature="getCellIndex(el)">
              <variable ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="el.className.match()" line="390" name="m" />
            </scope>
            <scope ilk="function" line="399" lineend="402" name="findHeaderCell" returns="cell" signature="findHeaderCell(el)">
              <variable ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="this.findCell()" line="400" name="cell" />
            </scope>
            <scope ilk="function" line="405" lineend="407" name="findHeaderIndex" returns="this.findCellIndex()" signature="findHeaderIndex(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <scope doc="Return the HtmlElement representing the grid row which contains the passed element." ilk="function" line="414" lineend="419" name="findRow" returns="this.fly().findParent()" signature="findRow(el)">
              <variable citdl="Element" doc="The target element" ilk="argument" name="el" />
            </scope>
            <scope doc="Return the index of the grid row which contains the passed element.&#xA;See also {@link #findCellIndex}" ilk="function" line="427" lineend="430" name="findRowIndex" returns="r" signature="findRowIndex(el)">
              <variable citdl="Element" doc="The target element" ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="this.findRow()" line="428" name="r" />
            </scope>
            <scope doc="Return the &amp;lt;div&gt; HtmlElement which represents a Grid row for the specified index." ilk="function" line="439" lineend="441" name="getRow" returns="HTMLElement" signature="getRow(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope doc="Returns the grid&apos;s &amp;lt;td&gt; HtmlElement at the specified coordinates." ilk="function" line="449" lineend="451" name="getCell" returns="HTMLElement" signature="getCell(row, col)">
              <variable citdl="Number" doc="The row index in which to find the cell." ilk="argument" name="row" />
              <variable citdl="Number" doc="The column index of the cell." ilk="argument" name="col" />
            </scope>
            <scope doc="Return the &amp;lt;td&gt; HtmlElement which represents the Grid&apos;s header cell for the specified column index." ilk="function" line="458" lineend="460" name="getHeaderCell" returns="HTMLElement" signature="getHeaderCell(index)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="465" lineend="470" name="addRowClass" signature="addRowClass(row, cls)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="cls" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="466" name="r" />
            </scope>
            <scope ilk="function" line="473" lineend="478" name="removeRowClass" signature="removeRowClass(row, cls)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="cls" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="474" name="r" />
            </scope>
            <scope ilk="function" line="481" lineend="484" name="removeRow" signature="removeRow(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="487" lineend="493" name="removeRows" signature="removeRows(firstRow, lastRow)">
              <variable ilk="argument" name="firstRow" />
              <variable ilk="argument" name="lastRow" />
              <variable attributes="__local__ private" citdl="this.mainBody.dom" line="488" name="bd" />
            </scope>
            <scope ilk="function" line="498" lineend="501" name="getScrollState" signature="getScrollState()">
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="499" name="sb" />
            </scope>
            <scope ilk="function" line="504" lineend="508" name="restoreScroll" signature="restoreScroll(state)">
              <variable ilk="argument" name="state" />
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="505" name="sb" />
            </scope>
            <scope doc="Scrolls the grid to the top" ilk="function" line="513" lineend="516" name="scrollToTop" signature="scrollToTop()" />
            <scope ilk="function" line="519" lineend="523" name="syncScroll" signature="syncScroll()">
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="521" name="mb" />
            </scope>
            <scope ilk="function" line="526" lineend="530" name="syncHeaderScroll" signature="syncHeaderScroll()">
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="527" name="mb" />
            </scope>
            <scope ilk="function" line="533" lineend="537" name="updateSortIcon" signature="updateSortIcon(col, dir)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="dir" />
              <variable attributes="__local__ private" citdl="this.sortClasses" line="534" name="sc" />
              <variable attributes="__local__ private" citdl="this.mainHd.select().removeClass()" line="535" name="hds" />
            </scope>
            <scope ilk="function" line="540" lineend="571" name="updateAllColumnWidths" signature="updateAllColumnWidths()">
              <variable attributes="__local__ private" line="545" name="i" />
              <variable attributes="__local__ private" citdl="this.getTotalWidth()" line="545" name="tw" />
              <variable attributes="__local__ private" line="545" name="len" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnCount()" line="545" name="clen" />
              <variable attributes="__local__ private" citdl="Array" line="545" name="ws" />
              <variable attributes="__local__ private" citdl="this.getHeaderCell()" line="553" name="hd" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="557" name="ns" />
              <variable attributes="__local__ private" citdl="row.firstChild.rows[0]" line="557" name="trow" />
              <variable attributes="__local__ private" citdl="ns[i]" line="557" name="row" />
            </scope>
            <scope ilk="function" line="574" lineend="594" name="updateColumnWidth" signature="updateColumnWidth(col, width)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="width" />
              <variable attributes="__local__ private" citdl="this.getColumnWidth()" line="575" name="w" />
              <variable attributes="__local__ private" citdl="this.getTotalWidth()" line="576" name="tw" />
              <variable attributes="__local__ private" citdl="this.getHeaderCell()" line="580" name="hd" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="583" name="ns" />
              <variable attributes="__local__ private" citdl="ns[i]" line="583" name="row" />
            </scope>
            <scope ilk="function" line="597" lineend="620" name="updateColumnHidden" signature="updateColumnHidden(col, hidden)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hidden" />
              <variable attributes="__local__ private" citdl="this.getTotalWidth()" line="598" name="tw" />
              <variable attributes="__local__ private" citdl="hidden" line="602" name="display" />
              <variable attributes="__local__ private" citdl="this.getHeaderCell()" line="604" name="hd" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="607" name="ns" />
              <variable attributes="__local__ private" citdl="ns[i]" line="607" name="row" />
            </scope>
            <scope ilk="function" line="623" lineend="662" name="doRender" returns="buf.join()" signature="doRender(cs, rs, ds, startRow, colCount, stripe)">
              <variable ilk="argument" name="cs" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="startRow" />
              <variable ilk="argument" name="colCount" />
              <variable ilk="argument" name="stripe" />
              <variable attributes="__local__ private" citdl="ts.row" line="624" name="rt" />
              <variable attributes="__local__ private" citdl="colCount" line="624" name="last" />
              <variable attributes="__local__ private" citdl="this.templates" line="624" name="ts" />
              <variable attributes="__local__ private" citdl="ts.cell" line="624" name="ct" />
              <variable attributes="__local__ private" citdl="String" line="625" name="tstyle" />
              <variable attributes="__local__ private" citdl="cs[i]" line="627" name="c" />
              <variable attributes="__local__ private" citdl="Array" line="627" name="cb" />
              <variable attributes="__local__ private" citdl="Object" line="627" lineend="627" name="p">
                <variable citdl="c.id" line="633" name="id" />
                <variable citdl="i" line="634" name="css" />
                <variable citdl="p.cellAttr" line="635" name="attr" />
                <variable citdl="String" line="635" name="cellAttr" />
                <variable citdl="c.renderer()" line="636" name="value" />
                <variable citdl="c.style" line="637" name="style" />
              </variable>
              <variable attributes="__local__ private" citdl="rs[j]" line="627" name="r" />
              <variable attributes="__local__ private" citdl="Object" line="627" lineend="627" name="rp">
                <variable citdl="tstyle" line="627" name="tstyle" />
                <variable citdl="colCount" line="653" name="cols" />
                <variable citdl="alt.join()" line="657" name="alt" />
                <variable citdl="cb.join()" line="658" name="cells" />
              </variable>
              <variable attributes="__local__ private" citdl="Array" line="627" name="buf" />
              <variable attributes="__local__ private" line="630" name="rowIndex" />
              <variable attributes="__local__ private" citdl="Array" line="646" name="alt" />
            </scope>
            <scope ilk="function" line="665" lineend="684" name="processRows" signature="processRows(startRow, skipStripe)">
              <variable citdl="startRow" ilk="argument" name="startRow" />
              <variable citdl="skipStripe" ilk="argument" name="skipStripe" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="669" name="rows" />
            </scope>
            <scope ilk="function" line="686" lineend="696" name="afterRender" signature="afterRender()" />
            <scope ilk="function" line="699" lineend="777" name="renderUI" signature="renderUI()">
              <variable attributes="__local__ private" citdl="this.renderHeaders()" line="701" name="header" />
              <variable attributes="__local__ private" citdl="this.templates.body.apply()" line="702" name="body" />
              <variable attributes="__local__ private" citdl="this.templates.master.apply()" line="710" name="html" />
              <variable attributes="__local__ private" citdl="this.grid" line="712" name="g" />
            </scope>
            <variable citdl="Ext.grid.GridView.SplitDragZone" line="729" name="splitZone" />
            <variable citdl="Ext.grid.GridView.ColumnDragZone" line="733" name="columnDrag" />
            <variable citdl="Ext.grid.HeaderDropZone" line="734" name="columnDrop" />
            <variable citdl="Ext.menu.Menu" line="738" name="hmenu" />
            <variable citdl="Ext.menu.Menu" line="744" name="colMenu" />
            <variable citdl="Ext.grid.GridDragZone" line="772" name="dragZone" />
            <scope ilk="function" line="780" lineend="819" name="layout" signature="layout()">
              <variable attributes="__local__ private" citdl="this.grid" line="784" name="g" />
              <variable attributes="__local__ private" citdl="g.getGridEl()" line="785" name="c" />
              <variable attributes="__local__ private" citdl="c.getSize()" line="786" name="csize" />
              <variable attributes="__local__ private" citdl="csize.width" line="787" name="vw" />
              <variable attributes="__local__ private" citdl="this.mainHd.getHeight()" line="801" name="hdHeight" />
              <variable attributes="__local__ private" citdl="csize.height" line="802" name="vh" />
            </scope>
            <variable citdl="vw" line="812" name="lastViewWidth" />
            <scope ilk="function" line="823" lineend="825" name="onLayout" signature="onLayout(vw, vh)">
              <variable ilk="argument" name="vw" />
              <variable ilk="argument" name="vh" />
            </scope>
            <scope ilk="function" line="827" lineend="829" name="onColumnWidthUpdated" signature="onColumnWidthUpdated(col, w, tw)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="tw" />
            </scope>
            <scope ilk="function" line="831" lineend="833" name="onAllColumnWidthsUpdated" signature="onAllColumnWidthsUpdated(ws, tw)">
              <variable ilk="argument" name="ws" />
              <variable ilk="argument" name="tw" />
            </scope>
            <scope ilk="function" line="835" lineend="837" name="onColumnHiddenUpdated" signature="onColumnHiddenUpdated(col, hidden, tw)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hidden" />
              <variable ilk="argument" name="tw" />
            </scope>
            <scope ilk="function" line="839" lineend="841" name="updateColumnText" signature="updateColumnText(col, text)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope ilk="function" line="843" lineend="845" name="afterMove" signature="afterMove(colIndex)">
              <variable ilk="argument" name="colIndex" />
            </scope>
            <scope ilk="function" line="849" lineend="855" name="init" signature="init(grid)">
              <variable ilk="argument" name="grid" />
            </scope>
            <variable citdl="grid" line="850" name="grid" />
            <scope ilk="function" line="858" lineend="860" name="getColumnId" returns="this.cm.getColumnId()" signature="getColumnId(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="863" lineend="865" name="getOffsetWidth" signature="getOffsetWidth()" />
            <scope ilk="function" line="868" lineend="891" name="renderHeaders" returns="ts.header.apply()" signature="renderHeaders()">
              <variable attributes="__local__ private" citdl="this.cm" line="873" name="cm" />
              <variable attributes="__local__ private" citdl="Array" line="873" name="cb" />
              <variable attributes="__local__ private" citdl="this.templates" line="873" name="ts" />
              <variable attributes="__local__ private" citdl="Object" line="873" lineend="873" name="p">
                <variable citdl="cm.getColumnId()" line="878" name="id" />
                <variable citdl="cm.getColumnHeader()" line="879" name="value" />
                <variable citdl="this.getColumnStyle()" line="880" name="style" />
                <variable citdl="this.getColumnTooltip()" line="881" name="tooltip" />
                <variable citdl="i" line="882" name="css" />
                <variable citdl="String" line="884" name="istyle" />
              </variable>
              <variable attributes="__local__ private" citdl="ts.hcell" line="873" name="ct" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="874" name="len" />
              <variable attributes="__local__ private" citdl="len" line="875" name="last" />
            </scope>
            <scope ilk="function" line="894" lineend="904" name="getColumnTooltip" returns="String" signature="getColumnTooltip(i)">
              <variable ilk="argument" name="i" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnTooltip()" line="895" name="tt" />
            </scope>
            <scope ilk="function" line="907" lineend="909" name="beforeUpdate" signature="beforeUpdate()" />
            <scope ilk="function" line="912" lineend="916" name="updateHeaders" signature="updateHeaders()" />
            <scope doc="Focuses the specified row." ilk="function" line="922" lineend="924" name="focusRow" signature="focusRow(row)">
              <variable citdl="Number" doc="The row index" ilk="argument" name="row" />
            </scope>
            <scope doc="Focuses the specified cell." ilk="function" line="931" lineend="938" name="focusCell" signature="focusCell(row, col, hscroll)">
              <variable citdl="Number" doc="The row index" ilk="argument" name="row" />
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
            </scope>
            <scope ilk="function" line="940" lineend="964" name="resolveCell" signature="resolveCell(row, col, hscroll)">
              <variable citdl="row.rowIndex" ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
              <variable attributes="__local__ private" citdl="this.getCell()" line="955" name="cellEl" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="955" name="rowEl" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="955" name="colCount" />
              <variable attributes="__local__ private" citdl="this.cm" line="955" name="cm" />
            </scope>
            <scope ilk="function" line="966" lineend="972" name="getResolvedXY" returns="c" signature="getResolvedXY(resolved)">
              <variable ilk="argument" name="resolved" />
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="970" name="s" />
              <variable attributes="__local__ private" citdl="resolved.row" line="970" name="r" />
              <variable attributes="__local__ private" citdl="resolved.cell" line="970" name="c" />
            </scope>
            <scope ilk="function" line="974" lineend="981" name="syncFocusEl" signature="syncFocusEl(row, col, hscroll)">
              <variable citdl="Math.min()" ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
              <variable attributes="__local__ private" citdl="row" line="975" name="xy" />
            </scope>
            <scope ilk="function" line="983" lineend="1028" name="ensureVisible" returns="this.getResolvedXY()" signature="ensureVisible(row, col, hscroll)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
              <variable attributes="__local__ private" citdl="this.resolveCell()" line="984" name="resolved" />
              <variable attributes="__local__ private" citdl="resolved.cell" line="994" name="cellEl" />
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="994" name="c" />
              <variable attributes="__local__ private" citdl="this.el.dom" line="994" name="stop" />
              <variable attributes="__local__ private" citdl="rowEl" line="994" name="p" />
              <variable attributes="__local__ private" citdl="resolved.row" line="994" name="rowEl" />
              <variable attributes="__local__ private" citdl="Number" line="994" name="ctop" />
              <variable attributes="__local__ private" citdl="c.clientHeight" line="1004" name="ch" />
              <variable attributes="__local__ private" citdl="stop" line="1004" name="sbot" />
              <variable attributes="__local__ private" citdl="ctop" line="1004" name="cbot" />
              <variable attributes="__local__ private" citdl="parseInt()" line="1016" name="cleft" />
              <variable attributes="__local__ private" citdl="cleft" line="1017" name="cright" />
              <variable attributes="__local__ private" citdl="parseInt()" line="1019" name="sleft" />
              <variable attributes="__local__ private" citdl="sleft" line="1020" name="sright" />
            </scope>
            <scope ilk="function" line="1031" lineend="1062" name="insertRows" signature="insertRows(dm, firstRow, lastRow, isUpdate)">
              <variable ilk="argument" name="dm" />
              <variable ilk="argument" name="firstRow" />
              <variable ilk="argument" name="lastRow" />
              <variable ilk="argument" name="isUpdate" />
              <variable attributes="__local__ private" citdl="dm.getCount()" line="1032" name="last" />
              <variable attributes="__local__ private" citdl="this.renderRows()" line="1040" name="html" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="1040" name="before" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="1047" name="r" />
            </scope>
            <scope ilk="function" line="1065" lineend="1076" name="deleteRows" signature="deleteRows(dm, firstRow, lastRow)">
              <variable ilk="argument" name="dm" />
              <variable ilk="argument" name="firstRow" />
              <variable ilk="argument" name="lastRow" />
            </scope>
            <scope ilk="function" line="1079" lineend="1090" name="getColumnStyle" returns="style" signature="getColumnStyle(col, isHeader)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="isHeader" />
              <variable attributes="__local__ private" line="1080" name="style" />
              <variable attributes="__local__ private" citdl="this.cm.config[col].align" line="1085" name="align" />
            </scope>
            <scope ilk="function" line="1093" lineend="1099" name="getColumnWidth" returns="w" signature="getColumnWidth(col)">
              <variable ilk="argument" name="col" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnWidth()" line="1094" name="w" />
            </scope>
            <scope ilk="function" line="1102" lineend="1104" name="getTotalWidth" returns="this.cm.getTotalWidth()" signature="getTotalWidth()" />
            <scope ilk="function" line="1107" lineend="1160" name="fitColumns" returns="Boolean" signature="fitColumns(preventRefresh, onlyExpand, omitColumn)">
              <variable ilk="argument" name="preventRefresh" />
              <variable ilk="argument" name="onlyExpand" />
              <variable ilk="argument" name="omitColumn" />
              <variable attributes="__local__ private" citdl="this.cm" line="1108" name="cm" />
              <variable attributes="__local__ private" citdl="cols.pop()" line="1108" name="i" />
              <variable attributes="__local__ private" citdl="cm.getTotalWidth()" line="1109" name="tw" />
              <variable attributes="__local__ private" citdl="this.grid.getGridEl().getWidth()" line="1110" name="aw" />
              <variable attributes="__local__ private" citdl="aw" line="1115" name="extra" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1121" name="vc" />
              <variable attributes="__local__ private" citdl="vc" line="1122" name="ac" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1127" name="colCount" />
              <variable attributes="__local__ private" citdl="Array" line="1128" name="cols" />
              <variable attributes="__local__ private" citdl="Number" line="1129" name="extraCol" />
              <variable attributes="__local__ private" citdl="Number" line="1130" name="width" />
              <variable attributes="__local__ private" citdl="cm.getColumnWidth()" line="1131" name="w" />
              <variable attributes="__local__ private" line="1141" name="frac" />
              <variable attributes="__local__ private" citdl="ac" line="1149" name="adjustCol" />
            </scope>
            <scope ilk="function" line="1163" lineend="1180" name="autoExpand" signature="autoExpand(preventUpdate)">
              <variable ilk="argument" name="preventUpdate" />
              <variable attributes="__local__ private" citdl="this.grid" line="1164" name="g" />
              <variable attributes="__local__ private" citdl="this.cm" line="1164" name="cm" />
              <variable attributes="__local__ private" citdl="cm.getTotalWidth()" line="1166" name="tw" />
              <variable attributes="__local__ private" citdl="this.grid.getGridEl().getWidth()" line="1167" name="aw" />
              <variable attributes="__local__ private" citdl="cm.getIndexById()" line="1169" name="ci" />
              <variable attributes="__local__ private" citdl="cm.getColumnWidth()" line="1170" name="currentWidth" />
              <variable attributes="__local__ private" citdl="Math.min()" line="1171" name="cw" />
            </scope>
            <scope ilk="function" line="1183" lineend="1196" name="getColumnData" returns="cs" signature="getColumnData()">
              <variable attributes="__local__ private" citdl="Array" line="1185" name="cs" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1185" name="colCount" />
              <variable attributes="__local__ private" citdl="this.cm" line="1185" name="cm" />
              <variable attributes="__local__ private" citdl="cm.getDataIndex()" line="1187" name="name" />
            </scope>
            <scope ilk="function" line="1199" lineend="1217" name="renderRows" returns="this.doRender()" signature="renderRows(startRow, endRow)">
              <variable citdl="startRow" ilk="argument" name="startRow" />
              <variable ilk="argument" name="endRow" />
              <variable attributes="__local__ private" citdl="this.grid" line="1201" name="g" />
              <variable attributes="__local__ private" citdl="g.colModel" line="1201" name="cm" />
              <variable attributes="__local__ private" citdl="g.stripeRows" line="1201" name="stripe" />
              <variable attributes="__local__ private" citdl="g.store" line="1201" name="ds" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1202" name="colCount" />
              <variable attributes="__local__ private" citdl="this.getColumnData()" line="1208" name="cs" />
              <variable attributes="__local__ private" citdl="ds.getRange()" line="1214" name="rs" />
            </scope>
            <scope ilk="function" line="1220" lineend="1223" name="renderBody" returns="this.templates.body.apply()" signature="renderBody()">
              <variable attributes="__local__ private" citdl="this.renderRows()" line="1221" name="markup" />
            </scope>
            <scope ilk="function" line="1226" lineend="1244" name="refreshRow" signature="refreshRow(record)">
              <variable citdl="ds.getAt()" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="record" line="1227" name="index" />
              <variable attributes="__local__ private" citdl="this.ds" line="1227" name="ds" />
            </scope>
            <scope doc="Refreshs the grid UI" ilk="function" line="1250" lineend="1264" name="refresh" signature="refresh(headersToo)">
              <variable citdl="Boolean" doc="(optional) True to also refresh the headers" ilk="argument" name="headersToo" />
              <variable attributes="__local__ private" citdl="this.renderBody()" line="1254" name="result" />
            </scope>
            <scope ilk="function" line="1267" lineend="1271" name="applyEmptyText" signature="applyEmptyText()" />
            <scope ilk="function" line="1274" lineend="1288" name="updateHeaderSortState" signature="updateHeaderSortState()">
              <variable attributes="__local__ private" citdl="this.ds.getSortState()" line="1275" name="state" />
              <variable attributes="__local__ private" citdl="this.cm.findColumnIndex()" line="1283" name="sortColumn" />
              <variable attributes="__local__ private" citdl="state.direction" line="1285" name="sortDir" />
            </scope>
            <variable citdl="state" line="1282" name="sortState" />
            <scope ilk="function" line="1291" lineend="1337" name="destroy" signature="destroy()">
              <variable attributes="__local__ private" citdl="Ext.dd.DDM.ids[&apos;gridHeader&apos;+this.grid.getGridEl().id]" line="1303" name="dds" />
              <variable attributes="__local__ private" citdl="dds[dd].dragElId" line="1307" name="elid" />
            </scope>
            <scope ilk="function" line="1340" lineend="1342" name="onDenyColumnHide" signature="onDenyColumnHide()" />
            <scope ilk="function" line="1345" lineend="1363" name="render" signature="render()">
              <variable attributes="__local__ private" citdl="this.grid.ownerCt" line="1347" name="ct" />
              <scope attributes="__local__ private" ilk="function" line="1349" lineend="1352" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="1367" lineend="1411" name="initData" signature="initData(ds, cm)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="cm" />
            </scope>
            <variable citdl="ds" line="1390" name="ds" />
            <variable citdl="cm" line="1410" name="cm" />
            <scope ilk="function" line="1414" lineend="1418" name="onDataChange" signature="onDataChange()" />
            <scope ilk="function" line="1421" lineend="1424" name="onClear" signature="onClear()" />
            <scope ilk="function" line="1427" lineend="1429" name="onUpdate" signature="onUpdate(ds, record)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="1432" lineend="1434" name="onAdd" signature="onAdd(ds, records, index)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="records" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="1437" lineend="1447" name="onRemove" signature="onRemove(ds, record, index, isUpdate)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="isUpdate" />
            </scope>
            <scope ilk="function" line="1450" lineend="1452" name="onLoad" signature="onLoad()" />
            <scope ilk="function" line="1455" lineend="1457" name="onColWidthChange" signature="onColWidthChange(cm, col, width)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="width" />
            </scope>
            <scope ilk="function" line="1460" lineend="1462" name="onHeaderChange" signature="onHeaderChange(cm, col, text)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope ilk="function" line="1465" lineend="1467" name="onHiddenChange" signature="onHiddenChange(cm, col, hidden)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hidden" />
            </scope>
            <scope ilk="function" line="1470" lineend="1477" name="onColumnMove" signature="onColumnMove(cm, oldIndex, newIndex)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="oldIndex" />
              <variable ilk="argument" name="newIndex" />
              <variable attributes="__local__ private" citdl="this.getScrollState()" line="1472" name="s" />
            </scope>
            <variable line="1471" name="indexMap" />
            <scope ilk="function" line="1480" lineend="1484" name="onColConfigChange" signature="onColConfigChange()" />
            <scope ilk="function" line="1488" lineend="1490" name="initUI" signature="initUI(grid)">
              <variable ilk="argument" name="grid" />
            </scope>
            <scope ilk="function" line="1493" lineend="1494" name="initEvents" signature="initEvents()" />
            <scope ilk="function" line="1497" lineend="1503" name="onHeaderClick" signature="onHeaderClick(g, index)">
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="1506" lineend="1511" name="onRowOver" signature="onRowOver(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" line="1507" name="row" />
            </scope>
            <scope ilk="function" line="1514" lineend="1519" name="onRowOut" signature="onRowOut(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" line="1515" name="row" />
            </scope>
            <scope ilk="function" line="1522" lineend="1524" name="handleWheel" signature="handleWheel(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="1527" lineend="1529" name="onRowSelect" signature="onRowSelect(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="1532" lineend="1534" name="onRowDeselect" signature="onRowDeselect(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="1537" lineend="1542" name="onCellSelect" signature="onCellSelect(row, col)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable attributes="__local__ private" citdl="this.getCell()" line="1538" name="cell" />
            </scope>
            <scope ilk="function" line="1545" lineend="1550" name="onCellDeselect" signature="onCellDeselect(row, col)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable attributes="__local__ private" citdl="this.getCell()" line="1546" name="cell" />
            </scope>
            <scope ilk="function" line="1553" lineend="1567" name="onColumnSplitterMoved" signature="onColumnSplitterMoved(i, w)">
              <variable ilk="argument" name="i" />
              <variable ilk="argument" name="w" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="1555" name="cm" />
            </scope>
            <variable citdl="Boolean" line="1554" name="userResized" />
            <scope ilk="function" line="1570" lineend="1591" name="handleHdMenuClick" returns="Boolean" signature="handleHdMenuClick(item)">
              <variable ilk="argument" name="item" />
              <variable attributes="__local__ private" citdl="this.hdCtxIndex" line="1571" name="index" />
              <variable attributes="__local__ private" citdl="this.ds" line="1572" name="ds" />
              <variable attributes="__local__ private" citdl="this.cm" line="1572" name="cm" />
            </scope>
            <scope ilk="function" line="1594" lineend="1596" name="isHideableColumn" signature="isHideableColumn(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope ilk="function" line="1599" lineend="1613" name="beforeColMenuShow" signature="beforeColMenuShow()">
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1600" name="colCount" />
              <variable attributes="__local__ private" citdl="this.cm" line="1600" name="cm" />
            </scope>
            <scope ilk="function" line="1616" lineend="1631" name="handleHdDown" signature="handleHdDown(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.findHeaderCell()" line="1619" name="hd" />
              <variable attributes="__local__ private" citdl="this.getCellIndex()" line="1621" name="index" />
              <variable attributes="__local__ private" citdl="this.cm" line="1623" name="cm" />
              <variable attributes="__local__ private" citdl="this.hmenu.items" line="1623" name="ms" />
              <scope attributes="__local__ private" ilk="function" line="1626" lineend="1628" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="index" line="1622" name="hdCtxIndex" />
            <scope ilk="function" line="1634" lineend="1649" name="handleHdOver" signature="handleHdOver(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.findHeaderCell()" line="1635" name="hd" />
              <variable attributes="__local__ private" citdl="this.fly()" line="1639" name="fly" />
            </scope>
            <variable citdl="hd" line="1637" name="activeHd" />
            <variable citdl="this.getCellIndex()" line="1638" name="activeHdIndex" />
            <variable citdl="fly.getRegion()" line="1640" name="activeHdRegion" />
            <variable citdl="fly.child()" line="1643" name="activeHdBtn" />
            <scope ilk="function" line="1652" lineend="1666" name="handleHdMove" signature="handleHdMove(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.splitHandleWidth" line="1654" name="hw" />
              <variable attributes="__local__ private" citdl="this.activeHdRegion" line="1655" name="r" />
              <variable attributes="__local__ private" citdl="e.getPageX()" line="1656" name="x" />
              <variable attributes="__local__ private" citdl="this.activeHd.style" line="1657" name="ss" />
            </scope>
            <scope ilk="function" line="1669" lineend="1676" name="handleHdOut" signature="handleHdOut(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.findHeaderCell()" line="1670" name="hd" />
            </scope>
            <scope ilk="function" line="1679" lineend="1682" name="hasRows" returns="fc" signature="hasRows()">
              <variable attributes="__local__ private" citdl="this.mainBody.dom.firstChild" line="1680" name="fc" />
            </scope>
            <scope ilk="function" line="1685" lineend="1687" name="bind" signature="bind(d, c)">
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="c" />
            </scope>
            <variable citdl="Object" line="1776" name="SplitDragZone" />
          </scope>
          <scope classrefs="Ext.grid.AbstractSelectionModel" ilk="class" line="20" lineend="57" name="CellSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides the basic implementation for single cell selection in a grid.&#xA;The object stored as the selection contains the following properties:&#xA;&#xA;cell : see {@link #getSelectedCell}&#xA;record : Ext.data.record The {@link Ext.data.Record Record}&#xA;which provides the data for the row containing the selection" ilk="function" line="20" lineend="57" name="CellSelectionModel" signature="CellSelectionModel(config)">
              <variable citdl="Object" doc="The object containing the configuration of this model." ilk="argument" name="config" />
              <variable citdl="CellSelectionModel" name="this" />
            </scope>
            <scope ilk="function" line="62" lineend="73" name="initEvents" signature="initEvents()">
              <variable attributes="__local__ private" citdl="this.grid.view" line="65" name="view" />
            </scope>
            <scope ilk="function" line="76" lineend="78" name="beforeEdit" signature="beforeEdit(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="81" lineend="85" name="onRowUpdated" signature="onRowUpdated(v, index, r)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="r" />
            </scope>
            <scope ilk="function" line="88" lineend="90" name="onViewChange" signature="onViewChange()" />
            <scope doc="Returns an array containing the row and column indexes of the currently selected cell&#xA;(e.g., [0, 0]), or null if none selected. The array has elements:&#xA;&#xA;rowIndex : NumberThe index of the selected row&#xA;cellIndex : NumberThe index of the selected cell.&#xA;Due to possible column reordering, the cellIndex should not be used as an&#xA;index into the Record&apos;s data. Instead, use the cellIndex to determine the name&#xA;of the selected cell and use the field name to retrieve the data value from the record:&#xA;// get name&#xA;var fieldName = grid.getColumnModel().getDataIndex(cellIndex);&#xA;// get data value based on name&#xA;var data = record.get(fieldName);" ilk="function" line="109" lineend="111" name="getSelectedCell" returns="Array" signature="getSelectedCell()" />
            <scope doc="If anything is selected, clears all selections and fires the selectionchange event." ilk="function" line="118" lineend="127" name="clearSelections" signature="clearSelections(preventNotify)">
              <variable citdl="Boolean" doc="true to prevent the gridview from&#xA;being notified about the change." ilk="argument" name="preventNotify" />
              <variable attributes="__local__ private" citdl="this.selection" line="119" name="s" />
            </scope>
            <variable citdl="Object" line="124" lineend="165" name="selection">
              <variable citdl="r" line="163" name="record" />
              <variable citdl="Array" line="164" name="cell" />
            </variable>
            <scope doc="Returns true if there is a selection." ilk="function" line="133" lineend="135" name="hasSelection" returns="Boolean" signature="hasSelection()" />
            <scope ilk="function" line="138" lineend="143" name="handleMouseDown" signature="handleMouseDown(g, row, cell, e)">
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="cell" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Selects a cell.  Before selecting a cell, fires the&#xA;{@link #beforecellselect} event.  If this check is satisfied the cell&#xA;will be selected and followed up by  firing the {@link #cellselect} and&#xA;{@link #selectionchange} events." ilk="function" line="158" lineend="176" name="select" signature="select(rowIndex, colIndex, preventViewNotify, preventFocus, r)">
              <variable citdl="Number" doc="The index of the row to select" ilk="argument" name="rowIndex" />
              <variable citdl="Number" doc="The index of the column to select" ilk="argument" name="colIndex" />
              <variable citdl="Boolean" doc="(optional) Specify true to&#xA;prevent notifying the view (disables updating the selected appearance)" ilk="argument" name="preventViewNotify" />
              <variable citdl="Boolean" doc="(optional) Whether to prevent the cell at&#xA;the specified rowIndex / colIndex from being focused." ilk="argument" name="preventFocus" />
              <variable citdl="Ext.data.Record" doc="(optional) The record to select" ilk="argument" name="r" />
              <variable attributes="__local__ private" citdl="this.grid.getView()" line="167" name="v" />
            </scope>
            <scope ilk="function" line="179" lineend="181" name="isSelectable" signature="isSelectable(rowIndex, colIndex, cm)">
              <variable ilk="argument" name="rowIndex" />
              <variable ilk="argument" name="colIndex" />
              <variable ilk="argument" name="cm" />
            </scope>
            <scope ilk="function" line="184" lineend="236" name="handleKeyDown" signature="handleKeyDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.grid" line="188" name="g" />
              <variable attributes="__local__ private" citdl="this.selection" line="188" name="s" />
              <variable attributes="__local__ private" citdl="g.walkCells()" line="191" name="cell" />
              <variable attributes="__local__ private" citdl="this" line="197" name="sm" />
              <scope attributes="__local__ private" ilk="function" line="198" lineend="200" name="walk" returns="g.walkCells()" signature="walk(row, col, step)">
                <variable ilk="argument" name="row" />
                <variable ilk="argument" name="col" />
                <variable ilk="argument" name="step" />
              </scope>
              <variable attributes="__local__ private" citdl="s.cell[1]" line="201" name="c" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="201" name="k" />
              <variable attributes="__local__ private" citdl="s.cell[0]" line="201" name="r" />
              <variable attributes="__local__ private" citdl="walk()" line="202" name="newCell" />
            </scope>
            <scope ilk="function" line="238" lineend="240" name="acceptsNav" signature="acceptsNav(row, col, cm)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="cm" />
            </scope>
            <scope ilk="function" line="242" lineend="261" name="onEditorKey" signature="onEditorKey(field, e)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="g.activeEditor" line="243" name="ed" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="243" name="k" />
              <variable attributes="__local__ private" citdl="g.walkCells()" line="243" name="newCell" />
              <variable attributes="__local__ private" citdl="this.grid" line="243" name="g" />
            </scope>
          </scope>
          <variable citdl="Object" line="23" lineend="23" name="GridPanel" />
          <scope classrefs="Object" ilk="class" line="24" lineend="61" name="RowNumberer">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a utility class that can be passed into a {@link Ext.grid.ColumnModel} as a column config that provides&#xA;an automatic row numbering column.&#xA;Usage:&#xA;// This is a typical column config with the first column providing row numbers&#xA;var colModel = new Ext.grid.ColumnModel([&#xA;new Ext.grid.RowNumberer(),&#xA;{header: &quot;Name&quot;, width: 80, sortable: true},&#xA;{header: &quot;Code&quot;, width: 50, sortable: true},&#xA;{header: &quot;Description&quot;, width: 200, sortable: true}&#xA;]);" ilk="function" line="24" lineend="29" name="RowNumberer" signature="RowNumberer(config)">
              <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
              <variable citdl="RowNumberer" name="this" />
            </scope>
            <variable citdl="this.renderer.createDelegate()" line="27" name="renderer" />
            <variable citdl="String" doc="number column (defaults to &apos;&apos;)." line="36" name="header" />
            <variable citdl="Number" line="40" name="width" />
            <variable citdl="Boolean" line="45" name="sortable" />
            <variable citdl="Boolean" line="48" name="fixed" />
            <variable citdl="Boolean" line="49" name="menuDisabled" />
            <variable citdl="String" line="50" name="dataIndex" />
            <variable citdl="String" line="51" name="id" />
            <variable line="52" name="rowspan" />
            <scope ilk="function" line="55" lineend="60" name="renderer" returns="rowIndex" signature="renderer(v, p, record, rowIndex)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="rowIndex" />
              <variable citdl="RowNumberer" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="25" name="Grid" />
          <variable attributes="__ctor__" citdl="Ext.data.Record.create()" doc="CONSTRUCTOR: A specific {@link Ext.data.Record} type that represents a name/value pair and is made to work with the&#xA;{@link Ext.grid.PropertyGrid}.  Typically, PropertyRecords do not need to be created directly as they can be&#xA;created implicitly by simply using the appropriate data configs either via the {@link Ext.grid.PropertyGrid#source}&#xA;config property or by calling {@link Ext.grid.PropertyGrid#setSource}.  However, if the need arises, these records&#xA;can also be created explicitly as shwon below.  Example usage:&#xA;&#xA;var rec = new Ext.grid.PropertyRecord({&#xA;name: &apos;Birthday&apos;,&#xA;value: new Date(Date.parse(&apos;05/26/1972&apos;))&#xA;});&#xA;// Add record to an already populated grid&#xA;grid.store.addSorted(rec);" line="28" name="PropertyRecord" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="41" lineend="51" name="PropertyStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom wrapper for the {@link Ext.grid.PropertyGrid}&apos;s {@link Ext.data.Store}. This class handles the mapping&#xA;between the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format&#xA;required for compatibility with the underlying store. Generally this class should not need to be used directly --&#xA;the grid&apos;s data should be accessed from the underlying store via the {@link #store} property." ilk="function" line="41" lineend="51" name="PropertyStore" signature="PropertyStore(grid, source)">
              <variable citdl="Ext.grid.Grid" doc="The grid this store will be bound to" ilk="argument" name="grid" />
              <variable citdl="Object" doc="The source data config object" ilk="argument" name="source" />
              <variable citdl="PropertyStore" name="this" />
            </scope>
            <variable citdl="grid" line="42" name="grid" />
            <variable citdl="Ext.data.Store" line="45" name="store" />
            <scope ilk="function" line="54" lineend="64" name="setSource" signature="setSource(o)">
              <variable ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="Array" line="57" name="data" />
            </scope>
            <variable citdl="o" line="55" name="source" />
            <scope ilk="function" line="67" lineend="79" name="onUpdate" signature="onUpdate(ds, record, type)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="type" />
              <variable attributes="__local__ private" citdl="record.data.value" line="69" name="v" />
              <variable attributes="__local__ private" citdl="record.modified.value" line="70" name="oldValue" />
            </scope>
            <scope ilk="function" line="82" lineend="84" name="getProperty" returns="this.store.getAt()" signature="getProperty(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="87" lineend="92" name="isEditableValue" signature="isEditableValue(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope ilk="function" line="95" lineend="98" name="setValue" signature="setValue(prop, value)">
              <variable ilk="argument" name="prop" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="101" lineend="103" name="getSource" returns="this.source" signature="getSource()" />
          </scope>
          <scope classrefs="Ext.dd.DropZone" ilk="class" line="57" lineend="75" name="HeaderDropZone">
            <scope attributes="__ctor__" ilk="function" line="57" lineend="75" name="HeaderDropZone" signature="HeaderDropZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="HeaderDropZone" name="this" />
            </scope>
            <variable citdl="grid" line="58" name="grid" />
            <variable citdl="grid.getView()" line="59" name="view" />
            <variable citdl="Ext.DomHelper.append()" line="63" name="proxyTop" />
            <variable citdl="Ext.DomHelper.append()" line="66" name="proxyBottom" />
            <variable citdl="String" line="71" name="ddGroup" />
            <variable citdl="Array" line="77" name="proxyOffsets" />
            <variable citdl="Ext.Element.fly" line="78" name="fly" />
            <scope ilk="function" line="80" lineend="86" name="getTargetFromEvent" returns="this.view.getHeaderCell()" signature="getTargetFromEvent(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="81" name="t" />
              <variable attributes="__local__ private" citdl="this.view.findCellIndex()" line="82" name="cindex" />
            </scope>
            <scope ilk="function" line="88" lineend="98" name="nextVisible" signature="nextVisible(h)">
              <variable citdl="h.nextSibling" ilk="argument" name="h" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="89" name="cm" />
              <variable attributes="__local__ private" citdl="this.view" line="89" name="v" />
            </scope>
            <scope ilk="function" line="100" lineend="110" name="prevVisible" signature="prevVisible(h)">
              <variable citdl="h.prevSibling" ilk="argument" name="h" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="101" name="cm" />
              <variable attributes="__local__ private" citdl="this.view" line="101" name="v" />
            </scope>
            <scope ilk="function" line="112" lineend="137" name="positionIndicator" returns="pt" signature="positionIndicator(h, n, e)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getPageX()" line="113" name="x" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getRegion()" line="114" name="r" />
              <variable attributes="__local__ private" citdl="r.right" line="115" name="px" />
              <variable attributes="__local__ private" citdl="r.top" line="115" name="py" />
              <variable attributes="__local__ private" citdl="String" line="115" name="pt" />
            </scope>
            <variable citdl="this.view.mainHd.getHeight()" line="132" name="bottomOffset" />
            <scope ilk="function" line="139" lineend="143" name="onNodeEnter" signature="onNodeEnter(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="145" lineend="155" name="onNodeOver" returns="result" signature="onNodeOver(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="Boolean" line="146" name="result" />
            </scope>
            <scope ilk="function" line="157" lineend="160" name="onNodeOut" signature="onNodeOut(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="162" lineend="182" name="onNodeDrop" returns="Boolean" signature="onNodeDrop(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="data.header" line="163" name="h" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="165" name="cm" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getPageX()" line="166" name="x" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getRegion()" line="167" name="r" />
              <variable attributes="__local__ private" line="168" name="pt" />
              <variable attributes="__local__ private" citdl="this.view.getCellIndex()" line="169" name="oldIndex" />
              <variable attributes="__local__ private" citdl="this.view.getCellIndex()" line="170" name="newIndex" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="91" lineend="149" name="ColumnModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: After the data has been read into the client side cache ({@link Ext.data.Store Store}),&#xA;the ColumnModel is used to configure how and what parts of that data will be displayed in the&#xA;vertical slices (columns) of the grid. The Ext.grid.ColumnModel Class is the default implementation&#xA;of a ColumnModel used by implentations of {@link Ext.grid.GridPanel GridPanel}.&#xA;Data is mapped into the store&apos;s records and then indexed into the ColumnModel using the&#xA;{@link Ext.grid.Column#dataIndex dataIndex}:&#xA;&#xA;{data source} == mapping ==&gt; {data store} == {@link Ext.grid.Column#dataIndex dataIndex} ==&gt; {ColumnModel}&#xA;&#xA;Each {@link Ext.grid.Column Column} in the grid&apos;s ColumnModel is configured with a&#xA;{@link Ext.grid.Column#dataIndex dataIndex} to specify how the data within&#xA;each record in the store is indexed into the ColumnModel.&#xA;There are two ways to initialize the ColumnModel class:&#xA;Initialization Method 1: an Array&#xA;var colModel = new Ext.grid.ColumnModel([&#xA;{ header: &quot;Ticker&quot;, width: 60, sortable: true},&#xA;{ header: &quot;Company Name&quot;, width: 150, sortable: true, id: &apos;company&apos;},&#xA;{ header: &quot;Market Cap.&quot;, width: 100, sortable: true},&#xA;{ header: &quot;$ Sales&quot;, width: 100, sortable: true, renderer: money},&#xA;{ header: &quot;Employees&quot;, width: 100, sortable: true, resizable: false}&#xA;]);&#xA;The ColumnModel may be initialized with an Array of {@link Ext.grid.Column} column configuration&#xA;objects to define the initial layout / display of the columns in the Grid. The order of each&#xA;{@link Ext.grid.Column} column configuration object within the specified Array defines the initial&#xA;order of the column display.  A Column&apos;s display may be initially hidden using the&#xA;{@link Ext.grid.Column#hidden hidden} config property (and then shown using the column&#xA;header menu).  Field&apos;s that are not included in the ColumnModel will not be displayable at all.&#xA;How each column in the grid correlates (maps) to the {@link Ext.data.Record} field in the&#xA;{@link Ext.data.Store Store} the column draws its data from is configured through the&#xA;{@link Ext.grid.Column#dataIndex dataIndex}.  If the&#xA;{@link Ext.grid.Column#dataIndex dataIndex} is not explicitly defined (as shown in the&#xA;example above) it will use the column configuration&apos;s index in the Array as the index.&#xA;See {@link Ext.grid.Column} for additional configuration options for each column.&#xA;Initialization Method 2: an Object&#xA;In order to use configuration options from Ext.grid.ColumnModel, an Object may be used to&#xA;initialize the ColumnModel.  The column configuration Array will be specified in the {@link #columns}&#xA;config property. The {@link #defaults} config property can be used to apply defaults&#xA;for all columns, e.g.:&#xA;var colModel = new Ext.grid.ColumnModel({&#xA;columns: [&#xA;{ header: &quot;Ticker&quot;, width: 60, menuDisabled: false},&#xA;{ header: &quot;Company Name&quot;, width: 150, id: &apos;company&apos;},&#xA;{ header: &quot;Market Cap.&quot;},&#xA;{ header: &quot;$ Sales&quot;, renderer: money},&#xA;{ header: &quot;Employees&quot;, resizable: false}&#xA;defaults: {&#xA;sortable: true,&#xA;menuDisabled: true,&#xA;width: 100&#xA;listeners: {&#xA;{@link #hiddenchange}: function(cm, colIndex, hidden) {&#xA;saveConfig(colIndex, hidden);&#xA;});&#xA;In both examples above, the ability to apply a CSS class to all cells in a column (including the&#xA;header) is demonstrated through the use of the {@link Ext.grid.Column#id id} config&#xA;option. This column could be styled by including the following css:&#xA;//add this css *after* the core css is loaded&#xA;.x-grid3-td-company {&#xA;color: red; // entire column will have red font&#xA;// modify the header row only, adding an icon to the column header&#xA;.x-grid3-hd-company {&#xA;background: transparent&#xA;url(../../resources/images/icons/silk/building.png)&#xA;no-repeat 3px 3px ! important;&#xA;padding-left:20px;&#xA;Note that the &quot;Company Name&quot; column could be specified as the&#xA;{@link Ext.grid.GridPanel}.{@link Ext.grid.GridPanel#autoExpandColumn autoExpandColumn}." ilk="function" line="91" lineend="149" name="ColumnModel" signature="ColumnModel(config)">
              <variable citdl="Mixed" doc="Specify either an Array of {@link Ext.grid.Column} configuration objects or specify&#xA;a configuration Object (see introductory section discussion utilizing Initialization Method 2 above)." ilk="argument" name="config" />
              <variable citdl="ColumnModel" name="this" />
            </scope>
            <variable citdl="Number" doc="specified (defaults to 100).  This property shall preferably be configured through the&#xA;{@link #defaults} config property." line="156" name="defaultWidth" />
            <variable citdl="Boolean" doc="sortable specified (defaults to false).  This property shall preferably be configured&#xA;through the {@link #defaults} config property." line="162" name="defaultSortable" />
            <scope doc="{@link Ext.grid.Column} are the options which may appear in the object literal for each&#xA;individual column definition." ilk="function" line="179" lineend="181" name="getColumnId" returns="String" signature="getColumnId(index)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="183" lineend="185" name="getColumnAt" returns="this.config[index]" signature="getColumnAt(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope doc="Reconfigures this column model according to the passed Array of column definition objects.&#xA;For a description of the individual properties of a column definition object, see the&#xA;Config Options.&#xA;Causes the {@link #configchange} event to be fired. A {@link Ext.grid.GridPanel GridPanel}&#xA;using this ColumnModel will listen for this event and refresh its UI automatically." ilk="function" line="197" lineend="230" name="setConfig" signature="setConfig(config, initial)">
              <variable citdl="Array" doc="Array of Column definition objects." ilk="argument" name="config" />
              <variable citdl="Boolean" doc="Specify true to bypass cleanup which deletes the totalWidth&#xA;and destroys existing editors." ilk="argument" name="initial" />
              <variable attributes="__local__ private" line="198" name="i" />
              <variable attributes="__local__ private" citdl="this.config[i]" line="198" name="c" />
              <variable attributes="__local__ private" line="198" name="len" />
              <variable attributes="__local__ private" citdl="Ext.grid.Column.types[c.xtype||&apos;gridcolumn&apos;]" line="221" name="cls" />
            </scope>
            <variable citdl="Ext.apply()" line="213" name="defaults" />
            <variable citdl="config" line="215" name="config" />
            <variable citdl="Object" line="216" lineend="216" name="lookup" />
            <scope doc="Returns the column for a specified id." ilk="function" line="237" lineend="239" name="getColumnById" returns="Object" signature="getColumnById(id)">
              <variable citdl="String" doc="The column id" ilk="argument" name="id" />
            </scope>
            <scope doc="Returns the index for a specified column id." ilk="function" line="246" lineend="253" name="getIndexById" returns="Number" signature="getIndexById(id)">
              <variable citdl="String" doc="The column id" ilk="argument" name="id" />
            </scope>
            <scope doc="Moves a column from one position to another." ilk="function" line="260" lineend="266" name="moveColumn" signature="moveColumn(oldIndex, newIndex)">
              <variable citdl="Number" doc="The index of the column to move." ilk="argument" name="oldIndex" />
              <variable citdl="Number" doc="The position at which to reinsert the coolumn." ilk="argument" name="newIndex" />
              <variable attributes="__local__ private" citdl="this.config[oldIndex]" line="261" name="c" />
            </scope>
            <variable line="264" name="dataMap" />
            <scope doc="Returns the number of columns." ilk="function" line="273" lineend="284" name="getColumnCount" returns="Number" signature="getColumnCount(visibleOnly)">
              <variable citdl="Boolean" doc="Optional. Pass as true to only include visible columns." ilk="argument" name="visibleOnly" />
              <variable attributes="__local__ private" citdl="Number" line="275" name="c" />
            </scope>
            <scope doc="Returns the column configs that return true by the passed function that is called&#xA;with (columnConfig, index)&#xA;// returns an array of column config objects for all hidden columns&#xA;var columns = grid.getColumnModel().getColumnsBy(function(c){&#xA;return c.hidden;&#xA;});" ilk="function" line="299" lineend="308" name="getColumnsBy" returns="Array" signature="getColumnsBy(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="Array" line="300" name="r" />
              <variable attributes="__local__ private" citdl="this.config[i]" line="302" name="c" />
            </scope>
            <scope doc="Returns true if the specified column is sortable." ilk="function" line="315" lineend="317" name="isSortable" returns="Boolean" signature="isSortable(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Returns true if the specified column menu is disabled." ilk="function" line="324" lineend="326" name="isMenuDisabled" returns="Boolean" signature="isMenuDisabled(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Returns the rendering (formatting) function defined for the column." ilk="function" line="333" lineend="338" name="getRenderer" returns="Function" signature="getRenderer(col)">
              <variable citdl="Number" doc="The column index." ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some&#xA;default formatting functions." ilk="function" line="357" lineend="359" name="setRenderer" signature="setRenderer(col, fn)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Function" doc="The function to use to process the cell&apos;s raw data&#xA;to return HTML markup for the grid view. The render function is called with&#xA;the following parameters:&#xA;value : ObjectThe data value for the cell.&#xA;metadata : ObjectAn object in which you may set the following attributes:&#xA;css : StringA CSS class name to add to the cell&apos;s TD element.&#xA;attr : StringAn HTML attribute definition string to apply to the data container element within the table cell&#xA;(e.g. &apos;style=&quot;color:red;&quot;&apos;).&#xA;record : Ext.data.recordThe {@link Ext.data.Record} from which the data was extracted.&#xA;rowIndex : NumberRow index&#xA;colIndex : NumberColumn index&#xA;store : Ext.data.StoreThe {@link Ext.data.Store} object from which the Record was extracted." ilk="argument" name="fn" />
            </scope>
            <scope doc="Returns the width for the specified column." ilk="function" line="366" lineend="368" name="getColumnWidth" returns="Number" signature="getColumnWidth(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the width for a column." ilk="function" line="377" lineend="383" name="setColumnWidth" signature="setColumnWidth(col, width, suppressEvent)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
              <variable citdl="Boolean" doc="True to suppress firing the {@link #widthchange}&#xA;event. Defaults to false." ilk="argument" name="suppressEvent" />
            </scope>
            <variable citdl="Number" line="379" name="totalWidth" />
            <scope doc="Returns the total width of all columns." ilk="function" line="390" lineend="400" name="getTotalWidth" returns="Number" signature="getTotalWidth(includeHidden)">
              <variable citdl="Boolean" doc="True to include hidden column widths" ilk="argument" name="includeHidden" />
            </scope>
            <scope doc="Returns the header for the specified column." ilk="function" line="407" lineend="409" name="getColumnHeader" returns="String" signature="getColumnHeader(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the header for a column." ilk="function" line="416" lineend="419" name="setColumnHeader" signature="setColumnHeader(col, header)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="String" doc="The new header" ilk="argument" name="header" />
            </scope>
            <scope doc="Returns the tooltip for the specified column." ilk="function" line="426" lineend="428" name="getColumnTooltip" returns="String" signature="getColumnTooltip(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the tooltip for a column." ilk="function" line="434" lineend="436" name="setColumnTooltip" signature="setColumnTooltip(col, tooltip)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="String" doc="The new tooltip" ilk="argument" name="tooltip" />
            </scope>
            <scope doc="Returns the dataIndex for the specified column.&#xA;// Get field name for the column&#xA;var fieldName = grid.getColumnModel().getDataIndex(columnIndex);" ilk="function" line="447" lineend="449" name="getDataIndex" returns="String" signature="getDataIndex(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the dataIndex for a column." ilk="function" line="456" lineend="458" name="setDataIndex" signature="setDataIndex(col, dataIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="String" doc="The new dataIndex" ilk="argument" name="dataIndex" />
            </scope>
            <scope doc="Finds the index of the first matching column for the given dataIndex." ilk="function" line="465" lineend="473" name="findColumnIndex" returns="Number" signature="findColumnIndex(dataIndex)">
              <variable ilk="argument" name="dataIndex" />
              <variable attributes="__local__ private" citdl="this.config" line="466" name="c" />
            </scope>
            <scope doc="Returns true if the cell is editable.&#xA;var store = new Ext.data.Store({...});&#xA;var colModel = new Ext.grid.ColumnModel({&#xA;columns: [...],&#xA;isCellEditable: function(col, row) {&#xA;var record = store.getAt(row);&#xA;if (record.get(&apos;readonly&apos;)) { // replace with your condition&#xA;return false;&#xA;return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);&#xA;});&#xA;var grid = new Ext.grid.GridPanel({&#xA;store: store,&#xA;colModel: colModel,&#xA;...&#xA;});" ilk="function" line="499" lineend="501" name="isCellEditable" returns="Boolean" signature="isCellEditable(colIndex, rowIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
              <variable citdl="Number" doc="The row index" ilk="argument" name="rowIndex" />
            </scope>
            <scope doc="Returns the editor defined for the cell/column." ilk="function" line="510" lineend="512" name="getCellEditor" returns="Ext.Editor" signature="getCellEditor(colIndex, rowIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
              <variable citdl="Number" doc="The row index" ilk="argument" name="rowIndex" />
            </scope>
            <scope doc="Sets if a column is editable." ilk="function" line="519" lineend="521" name="setEditable" signature="setEditable(col, editable)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Boolean" doc="True if the column is editable" ilk="argument" name="editable" />
            </scope>
            <scope doc="Returns true if the column is hidden." ilk="function" line="529" lineend="531" name="isHidden" returns="Boolean" signature="isHidden(colIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
            </scope>
            <scope doc="Returns true if the column width cannot be changed" ilk="function" line="537" lineend="539" name="isFixed" returns="this.config[colIndex].fixed" signature="isFixed(colIndex)">
              <variable ilk="argument" name="colIndex" />
            </scope>
            <scope doc="Returns true if the column can be resized" ilk="function" line="545" lineend="547" name="isResizable" returns="Boolean" signature="isResizable(colIndex)">
              <variable ilk="argument" name="colIndex" />
            </scope>
            <scope doc="Sets if a column is hidden.&#xA;myGrid.getColumnModel().setHidden(0, true); // hide column 0 (0 = the first column)." ilk="function" line="556" lineend="563" name="setHidden" signature="setHidden(colIndex, hidden)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
              <variable citdl="Boolean" doc="True if the column is hidden" ilk="argument" name="hidden" />
              <variable attributes="__local__ private" citdl="this.config[colIndex]" line="557" name="c" />
            </scope>
            <scope doc="Sets the editor for a column and destroys the prior editor." ilk="function" line="570" lineend="573" name="setEditor" signature="setEditor(col, editor)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Object" doc="The editor object" ilk="argument" name="editor" />
            </scope>
            <scope doc="Destroys this column model by purging any event listeners, and removing any editors." ilk="function" line="578" lineend="583" name="destroy" signature="destroy()" />
            <scope ilk="function" line="587" lineend="592" name="defaultRenderer" returns="value" signature="defaultRenderer(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="ColumnModel" name="this" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows." line="103" name="CheckboxSelectionModel" />
          <scope classrefs="Ext.grid.ColumnModel" ilk="class" line="114" lineend="135" name="PropertyColumnModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly." ilk="function" line="114" lineend="142" name="PropertyColumnModel" signature="PropertyColumnModel(grid, store)">
              <variable citdl="Ext.grid.Grid" doc="The grid this store will be bound to" ilk="argument" name="grid" />
              <variable ilk="argument" name="store" />
              <variable citdl="PropertyColumnModel" name="this" />
              <variable attributes="__local__ private" citdl="Ext.grid" line="116" name="g" />
              <variable attributes="__local__ private" citdl="Ext.form" line="116" name="f" />
              <variable attributes="__local__ private" citdl="f.Field" line="133" name="bfield" />
            </scope>
            <variable citdl="grid" line="118" name="grid" />
            <variable citdl="store" line="123" name="store" />
            <variable citdl="Object" line="134" lineend="139" name="editors">
              <variable citdl="g.GridEditor" line="135" name="date" />
              <variable citdl="g.GridEditor" line="136" name="string" />
              <variable citdl="g.GridEditor" line="137" name="number" />
              <variable citdl="g.GridEditor" line="138" name="boolean" />
            </variable>
            <variable citdl="this.renderCell.createDelegate()" line="140" name="renderCellDelegate" />
            <variable citdl="this.renderProp.createDelegate()" line="141" name="renderPropDelegate" />
            <variable citdl="String" line="146" name="nameText" />
            <variable citdl="String" line="147" name="valueText" />
            <variable citdl="String" line="148" name="dateFormat" />
            <scope ilk="function" line="151" lineend="153" name="renderDate" returns="dateVal.dateFormat()" signature="renderDate(dateVal)">
              <variable ilk="argument" name="dateVal" />
            </scope>
            <scope ilk="function" line="156" lineend="158" name="renderBool" returns="bVal" signature="renderBool(bVal)">
              <variable ilk="argument" name="bVal" />
            </scope>
            <scope ilk="function" line="161" lineend="163" name="isCellEditable" returns="colIndex" signature="isCellEditable(colIndex, rowIndex)">
              <variable ilk="argument" name="colIndex" />
              <variable ilk="argument" name="rowIndex" />
            </scope>
            <scope ilk="function" line="166" lineend="169" name="getRenderer" returns="col" signature="getRenderer(col)">
              <variable ilk="argument" name="col" />
            </scope>
            <scope ilk="function" line="172" lineend="174" name="renderProp" returns="this.getPropertyName()" signature="renderProp(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope ilk="function" line="177" lineend="185" name="renderCell" returns="Ext.util.Format.htmlEncode()" signature="renderCell(val)">
              <variable ilk="argument" name="val" />
              <variable attributes="__local__ private" citdl="val" line="178" name="rv" />
            </scope>
            <scope ilk="function" line="188" lineend="191" name="getPropertyName" returns="pn" signature="getPropertyName(name)">
              <variable ilk="argument" name="name" />
              <variable attributes="__local__ private" citdl="this.grid.propertyNames" line="189" name="pn" />
            </scope>
            <scope ilk="function" line="194" lineend="210" name="getCellEditor" returns="this.editors.string" signature="getCellEditor(colIndex, rowIndex)">
              <variable ilk="argument" name="colIndex" />
              <variable ilk="argument" name="rowIndex" />
              <variable attributes="__local__ private" citdl="this.store.getProperty()" line="197" name="p" />
              <variable attributes="__local__ private" citdl="p.data.value" line="197" name="val" />
              <variable attributes="__local__ private" citdl="p.data.name" line="197" name="n" />
            </scope>
            <scope ilk="function" line="213" lineend="218" name="destroy" signature="destroy()" />
          </scope>
          <variable citdl="Object" line="244" name="GridView">
            <scope classrefs="Ext.grid.HeaderDragZone" ilk="class" line="186" name="ColumnDragZone">
              <scope attributes="__ctor__" ilk="function" line="186" lineend="189" name="ColumnDragZone" signature="ColumnDragZone(grid, hd)">
                <variable ilk="argument" name="grid" />
                <variable ilk="argument" name="hd" />
                <variable citdl="ColumnDragZone" name="this" />
              </scope>
              <scope ilk="function" line="192" lineend="194" name="handleMouseDown" signature="handleMouseDown(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" line="196" lineend="198" name="callHandleMouseDown" signature="callHandleMouseDown(e)">
                <variable ilk="argument" name="e" />
              </scope>
            </scope>
            <variable citdl="Object" line="244" name="prototype">
              <variable citdl="String" line="238" name="lockText" />
              <variable citdl="String" line="239" name="unlockText" />
              <variable citdl="String" line="266" name="sortAscText" />
              <variable citdl="String" line="267" name="sortDescText" />
              <variable citdl="String" line="268" name="columnsText" />
            </variable>
            <scope ilk="function" line="1693" lineend="1704" name="SplitDragZone" signature="SplitDragZone(grid, hd)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable citdl="GridView" name="this" />
            </scope>
            <variable citdl="grid" line="1694" name="grid" />
            <variable citdl="grid.getView()" line="1695" name="view" />
            <variable citdl="this.view.resizeMarker" line="1696" name="marker" />
            <variable citdl="this.view.resizeProxy" line="1697" name="proxy" />
            <variable citdl="Boolean" line="1702" name="scroll" />
            <variable citdl="this.view.splitHandleWidth" line="1703" name="hw" />
          </variable>
          <variable citdl="Object" line="252" name="PropertyColumnModel">
            <variable citdl="Object" line="252" name="prototype">
              <variable citdl="String" line="282" name="nameText" />
              <variable citdl="String" line="283" name="valueText" />
              <variable citdl="String" line="284" name="dateFormat" />
            </variable>
          </variable>
          <variable citdl="Object" line="280" name="GroupingView">
            <variable citdl="Object" line="280" name="prototype">
              <variable citdl="String" line="274" name="emptyGroupText" />
              <variable citdl="String" line="275" name="groupByText" />
              <variable citdl="String" line="276" name="showGroupsText" />
            </variable>
            <variable citdl="Number" line="517" name="GROUP_ID" />
          </variable>
          <variable citdl="Ext.extend()" line="290" name="EditorGridPanel" />
          <variable citdl="Object" line="297" name="BooleanColumn">
            <variable citdl="Object" line="297" name="prototype">
              <variable citdl="String" line="290" name="trueText" />
              <variable citdl="String" line="291" name="falseText" />
              <variable citdl="String" line="292" name="undefinedText" />
            </variable>
          </variable>
          <variable citdl="Object" line="303" name="NumberColumn">
            <variable citdl="Object" line="303" name="prototype">
              <variable citdl="String" line="299" name="format" />
            </variable>
          </variable>
          <variable citdl="Object" line="309" name="DateColumn">
            <variable citdl="Object" line="309" name="prototype">
              <variable citdl="String" line="305" name="format" />
            </variable>
          </variable>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized grid implementation intended to mimic the traditional property grid as typically seen in&#xA;development IDEs.  Each row in the grid represents a property of some object, and the data is stored&#xA;as a set of name/value pairs in {@link Ext.grid.PropertyRecord}s.  Example usage:&#xA;&#xA;var grid = new Ext.grid.PropertyGrid({&#xA;title: &apos;Properties Grid&apos;,&#xA;autoHeight: true,&#xA;width: 300,&#xA;renderTo: &apos;grid-ct&apos;,&#xA;source: {&#xA;&quot;(name)&quot;: &quot;My Object&quot;,&#xA;&quot;Created&quot;: new Date(Date.parse(&apos;10/15/2006&apos;)),&#xA;&quot;Available&quot;: false,&#xA;&quot;Version&quot;: .01,&#xA;&quot;Description&quot;: &quot;A test object&quot;&#xA;});" line="369" name="PropertyGrid" />
          <variable citdl="Ext.extend()" doc="A Column definition class which renders a value by processing a {@link Ext.data.Record Record}&apos;s&#xA;{@link Ext.data.Record#data data} using a {@link #tpl configured} {@link Ext.XTemplate XTemplate}.&#xA;See the {@link Ext.grid.ColumnModel#xtype xtype} config option of {@link Ext.grid.ColumnModel} for more&#xA;details." line="383" name="TemplateColumn" />
        </variable>
        <scope classrefs="Object" ilk="class" line="24" lineend="139" name="CompositeElementLite">
          <scope attributes="__ctor__" doc="Flyweight composite class. Reuses the same Ext.Element for element operations.&#xA;var els = Ext.select(&quot;#some-el div.some-class&quot;);&#xA;// or select directly from an existing element&#xA;var el = Ext.get(&apos;some-el&apos;);&#xA;el.select(&apos;div.some-class&apos;);&#xA;els.setWidth(100); // all elements become 100 width&#xA;els.hide(true); // all elements fade out and hide&#xA;// or&#xA;els.setWidth(100).hide(true);&#xA;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element&#xA;actions will be performed on all the elements in this collection." ilk="function" line="24" lineend="28" name="CompositeElementLite" signature="CompositeElementLite(els, root)">
            <variable ilk="argument" name="els" />
            <variable ilk="argument" name="root" />
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <variable citdl="Array" line="25" name="elements" />
          <variable citdl="Ext.Element.Flyweight" line="27" name="el" />
          <variable citdl="Boolean" line="31" name="isComposite" />
          <scope doc="Returns the number of elements in this composite" ilk="function" line="36" lineend="38" name="getCount" returns="this.elements.length" signature="getCount()">
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <scope ilk="function" line="39" lineend="51" name="add" returns="this" signature="add(els)">
            <variable ilk="argument" name="els" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="44" name="yels" />
            <scope attributes="__local__ private" ilk="function" line="45" lineend="47" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope ilk="function" line="52" lineend="60" name="invoke" returns="this" signature="invoke(fn, args)">
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="args" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="54" name="els" />
            <variable attributes="__local__ private" citdl="this.el" line="54" name="el" />
            <scope attributes="__local__ private" ilk="function" line="55" lineend="58" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Returns a flyweight Element of the dom element object at the specified index" ilk="function" line="66" lineend="73" name="item" returns="Ext.Element" signature="item(index)">
            <variable citdl="Number" ilk="argument" name="index" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this" line="67" name="me" />
          </scope>
          <scope ilk="function" line="76" lineend="81" name="addListener" returns="this" signature="addListener(eventName, handler, scope, opt)">
            <variable ilk="argument" name="eventName" />
            <variable ilk="argument" name="handler" />
            <variable ilk="argument" name="scope" />
            <variable ilk="argument" name="opt" />
            <variable citdl="CompositeElementLite" name="this" />
            <scope attributes="__local__ private" ilk="function" line="77" lineend="79" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Calls the passed function passing (el, this, index) for each element in this composite. The element&#xA;passed is the flyweight (shared) Ext.Element instance, so if you require a&#xA;a reference to the dom node, use el.dom." ilk="function" line="90" lineend="99" name="each" returns="CompositeElement" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The this object (defaults to the element)" ilk="argument" name="scope" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this" line="92" name="me" />
            <variable attributes="__local__ private" citdl="me.el" line="92" name="el" />
          </scope>
          <variable citdl="Object" line="102" name="prototype">
            <scope ilk="function" line="11" lineend="23" name="addElements" returns="this" signature="addElements(els, root)">
              <variable citdl="Ext.Element.selectorFunction()" ilk="argument" name="els" />
              <variable ilk="argument" name="root" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this.elements" line="18" name="yels" />
              <scope attributes="__local__ private" ilk="function" line="19" lineend="21" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Clears this composite and adds the elements returned by the passed selector." ilk="function" line="30" lineend="34" name="fill" returns="CompositeElement" signature="fill(els)">
              <variable citdl="String/Array" doc="A string CSS selector, an array of elements or an element" ilk="argument" name="els" />
              <variable citdl="prototype" name="this" />
            </scope>
            <variable citdl="Array" line="31" name="elements" />
            <scope doc="Returns the first Element" ilk="function" line="40" lineend="42" name="first" returns="Ext.Element" signature="first()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Returns the last Element" ilk="function" line="48" lineend="50" name="last" returns="Ext.Element" signature="last()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Returns true if this composite contains the passed element" ilk="function" line="57" lineend="59" name="contains" returns="this.indexOf()" signature="contains(el)">
              <variable citdl="Mixed" doc="The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection." ilk="argument" name="el" />
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Filters this composite to only elements that match the passed selector." ilk="function" line="66" lineend="75" name="filter" returns="CompositeElement" signature="filter(selector)">
              <variable citdl="String" doc="A string CSS selector" ilk="argument" name="selector" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="67" name="els" />
              <scope attributes="__local__ private" ilk="function" line="68" lineend="72" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Removes the specified element(s)." ilk="function" line="84" lineend="101" name="removeElement" returns="CompositeElement" signature="removeElement(keys, removeDom)">
              <variable ilk="argument" name="keys" />
              <variable citdl="Boolean" doc="(optional) True to also remove the element from the document" ilk="argument" name="removeDom" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="87" name="me" />
              <variable attributes="__local__ private" citdl="this.elements" line="87" name="els" />
              <variable attributes="__local__ private" line="87" name="el" />
              <scope attributes="__local__ private" ilk="function" line="88" lineend="99" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </variable>
          <scope doc="Find the index of the passed element within the composite collection." ilk="function" line="106" lineend="108" name="indexOf" returns="this.elements.indexOf()" signature="indexOf(el)">
            <variable citdl="Mixed" doc="The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection." ilk="argument" name="el" />
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <scope doc="Replaces the specified element with the passed element." ilk="function" line="118" lineend="131" name="replaceElement" returns="CompositeElement" signature="replaceElement(el, replacement, domReplace)">
            <variable citdl="Mixed" doc="The id of an element, the Element itself, the index of the element in this composite&#xA;to replace." ilk="argument" name="el" />
            <variable citdl="Mixed" doc="The id of an element or the Element itself." ilk="argument" name="replacement" />
            <variable citdl="Boolean" doc="(Optional) True to remove and replace the element in the document too." ilk="argument" name="domReplace" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" line="120" name="index" />
            <variable attributes="__local__ private" citdl="this.elements[index]" line="120" name="d" />
          </scope>
          <scope doc="Removes all elements." ilk="function" line="136" lineend="138" name="clear" signature="clear()">
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <scope attributes="__local__ private" ilk="function" line="143" lineend="158" name="(anonymous)" signature="(anonymous)()">
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element.prototype" line="146" name="ElProto" />
            <variable attributes="__local__ private" citdl="Ext.CompositeElementLite.prototype" line="146" name="CelProto" />
            <variable attributes="__local__ private" line="146" name="fnName" />
            <scope attributes="__local__ private" ilk="function" line="150" lineend="154" name="(anonymous)" returns="this.invoke()" signature="(anonymous)(fnName)">
              <variable ilk="argument" name="fnName" />
            </scope>
          </scope>
        </scope>
        <variable citdl="Object" line="27" lineend="25" name="TabPanelItem" />
        <scope citdl="Function" doc="A reusable empty function" ilk="function" line="28" lineend="28" name="emptyFn" signature="emptyFn()">
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Ext.Element" ilk="class" line="28" lineend="466" name="Layer">
          <scope attributes="__ctor__" ilk="function" line="28" lineend="63" name="Layer" signature="Layer(config, existingEl)">
            <variable citdl="config" ilk="argument" name="config" />
            <variable ilk="argument" name="existingEl" />
            <variable citdl="Layer" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper" line="30" name="dh" />
            <variable attributes="__local__ private" citdl="cp" line="31" name="pel" />
            <variable attributes="__local__ private" citdl="config.parentEl" line="31" name="cp" />
            <variable attributes="__local__ private" citdl="config.dh" line="36" name="o" />
          </scope>
          <variable citdl="String" line="36" name="tag" />
          <variable citdl="String" line="36" name="cls" />
          <variable citdl="config.constrain" line="42" name="constrain" />
          <variable citdl="config.zindex" line="49" name="zindex" />
          <variable citdl="config.shadowOffset" line="52" name="shadowOffset" />
          <variable citdl="Ext.Shadow" line="56" name="shadow" />
          <variable citdl="config.shim" line="60" name="useShim" />
          <variable citdl="config.useDisplay" line="61" name="useDisplay" />
          <scope ilk="function" line="72" lineend="74" name="getZIndex" returns="this.zindex" signature="getZIndex()" />
          <scope ilk="function" line="76" lineend="97" name="getShim" returns="shim" signature="getShim()">
            <variable attributes="__local__ private" citdl="shims.shift()" line="83" name="shim" />
            <variable attributes="__local__ private" citdl="this.dom.parentNode" line="90" name="pn" />
          </scope>
          <variable citdl="shim" line="95" name="shim" />
          <variable citdl="HTMLElement" doc="The DOM element" line="96" name="dom" />
          <scope ilk="function" line="99" lineend="105" name="hideShim" signature="hideShim()" />
          <variable citdl="String" doc="The DOM element ID" line="102" name="id" />
          <scope ilk="function" line="107" lineend="114" name="disableShadow" signature="disableShadow()" />
          <variable citdl="Boolean" line="109" name="shadowDisabled" />
          <variable citdl="this.shadowOffset" line="111" name="lastShadowOffset" />
          <scope ilk="function" line="116" lineend="125" name="enableShadow" signature="enableShadow(show)">
            <variable ilk="argument" name="show" />
          </scope>
          <scope ilk="function" line="130" lineend="167" name="sync" signature="sync(doShow)">
            <variable ilk="argument" name="doShow" />
            <variable attributes="__local__ private" citdl="this.shadow" line="131" name="sw" />
            <variable attributes="__local__ private" citdl="this.getShim()" line="133" name="sh" />
            <variable attributes="__local__ private" citdl="this.getHeight()" line="136" name="h" />
            <variable attributes="__local__ private" citdl="this.getWidth()" line="136" name="w" />
            <variable attributes="__local__ private" citdl="this.getLeft()" line="139" name="l" />
            <variable attributes="__local__ private" citdl="this.getTop()" line="139" name="t" />
            <variable attributes="__local__ private" citdl="sw.adjusts" line="152" name="a" />
            <variable attributes="__local__ private" citdl="sh.dom.style" line="152" name="s" />
          </scope>
          <scope ilk="function" line="170" lineend="178" name="destroy" signature="destroy()" />
          <scope ilk="function" line="180" lineend="182" name="remove" signature="remove()" />
          <scope ilk="function" line="185" lineend="187" name="beginUpdate" signature="beginUpdate()" />
          <variable citdl="Boolean" line="186" name="updating" />
          <scope ilk="function" line="190" lineend="193" name="endUpdate" signature="endUpdate()" />
          <scope ilk="function" line="196" lineend="201" name="hideUnders" signature="hideUnders(negOffset)">
            <variable ilk="argument" name="negOffset" />
          </scope>
          <scope ilk="function" line="204" lineend="248" name="constrainXY" returns="this" signature="constrainXY()">
            <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewHeight()" line="207" name="vh" />
            <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewWidth()" line="207" name="vw" />
            <variable attributes="__local__ private" citdl="Ext.getDoc().getScroll()" line="208" name="s" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="210" name="xy" />
            <variable attributes="__local__ private" citdl="xy[1]" line="211" name="y" />
            <variable attributes="__local__ private" citdl="xy[0]" line="211" name="x" />
            <variable attributes="__local__ private" citdl="this.shadowOffset" line="212" name="so" />
            <variable attributes="__local__ private" citdl="this.dom.offsetHeight" line="213" name="h" />
            <variable attributes="__local__ private" citdl="this.dom.offsetWidth" line="213" name="w" />
            <variable attributes="__local__ private" citdl="Boolean" line="215" name="moved" />
            <variable attributes="__local__ private" citdl="this.avoidY" line="236" name="ay" />
          </scope>
          <scope ilk="function" line="250" lineend="252" name="isVisible" returns="this.visible" signature="isVisible()" />
          <scope ilk="function" line="255" lineend="264" name="showAction" signature="showAction()" />
          <variable citdl="Boolean" line="256" name="visible" />
          <scope ilk="function" line="267" lineend="274" name="hideAction" signature="hideAction()" />
          <scope ilk="function" line="277" lineend="310" name="setVisible" returns="this" signature="setVisible(v, a, d, c, e)">
            <variable ilk="argument" name="v" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="c" line="293" name="cb" />
            <scope attributes="__local__ private" ilk="function" line="295" lineend="300" name="cb" signature="cb()" />
          </scope>
          <scope ilk="function" line="312" lineend="315" name="storeXY" signature="storeXY(xy)">
            <variable ilk="argument" name="xy" />
          </scope>
          <variable citdl="xy" line="314" name="lastXY" />
          <scope ilk="function" line="317" lineend="320" name="storeLeftTop" signature="storeLeftTop(left, top)">
            <variable ilk="argument" name="left" />
            <variable ilk="argument" name="top" />
          </scope>
          <variable citdl="Array" line="319" name="lastLT" />
          <scope ilk="function" line="323" lineend="326" name="beforeFx" returns="Ext.Layer.superclass.beforeFx.apply()" signature="beforeFx()" />
          <scope ilk="function" line="329" lineend="332" name="afterFx" signature="afterFx()" />
          <scope ilk="function" line="335" lineend="339" name="beforeAction" signature="beforeAction()" />
          <scope ilk="function" line="342" lineend="347" name="setLeft" returns="this" signature="setLeft(left)">
            <variable ilk="argument" name="left" />
          </scope>
          <scope ilk="function" line="349" lineend="354" name="setTop" returns="this" signature="setTop(top)">
            <variable ilk="argument" name="top" />
          </scope>
          <scope ilk="function" line="356" lineend="361" name="setLeftTop" returns="this" signature="setLeftTop(left, top)">
            <variable ilk="argument" name="left" />
            <variable ilk="argument" name="top" />
          </scope>
          <scope ilk="function" line="363" lineend="373" name="setXY" returns="this" signature="setXY(xy, a, d, c, e)">
            <variable ilk="argument" name="xy" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="367" name="cb" />
          </scope>
          <scope ilk="function" line="376" lineend="385" name="createCB" signature="createCB(c)">
            <variable ilk="argument" name="c" />
            <variable attributes="__local__ private" citdl="this" line="377" name="el" />
          </scope>
          <scope ilk="function" line="388" lineend="391" name="setX" returns="this" signature="setX(x, a, d, c, e)">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope ilk="function" line="394" lineend="397" name="setY" returns="this" signature="setY(y, a, d, c, e)">
            <variable ilk="argument" name="y" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope ilk="function" line="400" lineend="408" name="setSize" returns="this" signature="setSize(w, h, a, d, c, e)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="402" name="cb" />
          </scope>
          <scope ilk="function" line="411" lineend="419" name="setWidth" returns="this" signature="setWidth(w, a, d, c, e)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="413" name="cb" />
          </scope>
          <scope ilk="function" line="422" lineend="430" name="setHeight" returns="this" signature="setHeight(h, a, d, c, e)">
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="424" name="cb" />
          </scope>
          <scope ilk="function" line="433" lineend="445" name="setBounds" returns="this" signature="setBounds(x, y, w, h, a, d, c, e)">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="y" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="435" name="cb" />
          </scope>
          <scope doc="Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically&#xA;incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow&#xA;element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index)." ilk="function" line="454" lineend="464" name="setZIndex" returns="this" signature="setZIndex(zindex)">
            <variable citdl="Number" doc="The new z-index to set" ilk="argument" name="zindex" />
          </scope>
        </scope>
        <scope classrefs="Ext.util.Observable" ilk="class" line="31" lineend="139" name="SplitBar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).&#xA;&#xA;Usage:&#xA;&#xA;var split = new Ext.SplitBar(&quot;elementToDrag&quot;, &quot;elementToSize&quot;,&#xA;Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);&#xA;split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter(&quot;container&quot;));&#xA;split.minSize = 100;&#xA;split.maxSize = 600;&#xA;split.animate = true;&#xA;split.on(&apos;moved&apos;, splitterMoved);&#xA;Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial&#xA;position of the SplitBar)." ilk="function" line="31" lineend="139" name="SplitBar" signature="SplitBar(dragElement, resizingElement, orientation, placement, existingProxy)">
            <variable citdl="Mixed" doc="The element to be dragged and act as the SplitBar." ilk="argument" name="dragElement" />
            <variable citdl="Mixed" doc="The element to be resized based on where the SplitBar element is dragged" ilk="argument" name="resizingElement" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)" ilk="argument" name="orientation" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or" ilk="argument" name="placement" />
            <variable ilk="argument" name="existingProxy" />
            <variable citdl="SplitBar" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="34" name="el" />
          <variable citdl="Ext.get()" line="37" name="resizingEl" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: The orientation of the split. Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)&#xA;Note: If this is changed after creating the SplitBar, the placement property must be manually updated" line="45" name="orientation" />
          <variable citdl="Number" doc="The increment, in pixels by which to move this SplitBar. When undefined, the SplitBar moves smoothly." line="56" name="minSize" />
          <variable citdl="Number" doc="The maximum size of the resizing element. (Defaults to 2000)" line="62" name="maxSize" />
          <variable citdl="Boolean" doc="Whether to animate the transition to the new size" line="68" name="animate" />
          <variable citdl="Boolean" doc="Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes." line="74" name="useShim" />
          <variable line="77" name="shim" />
          <variable citdl="Ext.SplitBar.createProxy()" line="81" name="proxy" />
          <variable citdl="Ext.dd.DDProxy" line="86" name="dd" />
          <variable citdl="Object" line="95" lineend="95" name="dragSpecs" />
          <variable attributes="private" citdl="Ext.SplitBar.BasicLayoutAdapter" line="100" name="adapter" />
          <variable citdl="placement" line="105" name="placement" />
          <scope ilk="function" line="142" lineend="174" name="onStartProxyDrag" signature="onStartProxyDrag(x, y)">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="y" />
            <variable attributes="__local__ private" citdl="this.adapter.getElementSize()" line="149" name="size" />
            <variable attributes="__local__ private" citdl="size" line="152" name="c1" />
            <variable attributes="__local__ private" citdl="Math.max()" line="153" name="c2" />
          </scope>
          <variable citdl="Ext.DomHelper.append()" line="144" name="overlay" />
          <variable citdl="this.getMinimumSize()" line="150" name="activeMinSize" />
          <variable citdl="this.getMaximumSize()" line="151" name="activeMaxSize" />
          <scope attributes="private" ilk="function" line="179" lineend="208" name="onEndProxyDrag" signature="onEndProxyDrag(e)">
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="Ext.lib.Event.getXY()" line="181" name="endPoint" />
            <variable attributes="__local__ private" citdl="this.dragSpecs.startSize" line="186" name="newSize" />
          </scope>
          <scope doc="Get the adapter this SplitBar uses" ilk="function" line="214" lineend="216" name="getAdapter" returns="this.adapter" signature="getAdapter()" />
          <scope doc="Set the adapter this SplitBar uses" ilk="function" line="222" lineend="225" name="setAdapter" signature="setAdapter(adapter)">
            <variable citdl="Object" doc="A SplitBar adapter object" ilk="argument" name="adapter" />
          </scope>
          <scope doc="Gets the minimum size for the resizing element" ilk="function" line="231" lineend="233" name="getMinimumSize" returns="Number" signature="getMinimumSize()" />
          <scope doc="Sets the minimum size for the resizing element" ilk="function" line="239" lineend="241" name="setMinimumSize" signature="setMinimumSize(minSize)">
            <variable citdl="Number" doc="The minimum size" ilk="argument" name="minSize" />
          </scope>
          <scope doc="Gets the maximum size for the resizing element" ilk="function" line="247" lineend="249" name="getMaximumSize" returns="Number" signature="getMaximumSize()" />
          <scope doc="Sets the maximum size for the resizing element" ilk="function" line="255" lineend="257" name="setMaximumSize" signature="setMaximumSize(maxSize)">
            <variable citdl="Number" doc="The maximum size" ilk="argument" name="maxSize" />
          </scope>
          <scope doc="Sets the initialize size for the resizing element" ilk="function" line="263" lineend="268" name="setCurrentSize" signature="setCurrentSize(size)">
            <variable citdl="Number" doc="The initial size" ilk="argument" name="size" />
            <variable attributes="__local__ private" citdl="this.animate" line="264" name="oldAnimate" />
          </scope>
          <scope doc="Destroy this splitbar." ilk="function" line="274" lineend="281" name="destroy" signature="destroy(removeEl)">
            <variable citdl="Boolean" doc="True to remove the element" ilk="argument" name="removeEl" />
          </scope>
          <scope attributes="private" ilk="function" line="287" lineend="294" name="createProxy" returns="proxy.dom" signature="createProxy(dir)">
            <variable ilk="argument" name="dir" />
            <variable citdl="SplitBar" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="288" name="proxy" />
            <variable attributes="__local__ private" citdl="String" line="290" name="cls" />
          </scope>
          <scope classrefs="Object" ilk="class" line="301" lineend="349" name="BasicLayoutAdapter">
            <scope attributes="__ctor__" doc="Default Adapter. It assumes the splitter and resizing element are not positioned&#xA;elements and only gets/sets the width of the element. Generally used for table based layouts." ilk="function" line="301" lineend="302" name="BasicLayoutAdapter" signature="BasicLayoutAdapter()">
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="306" lineend="308" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called before drag operations to get the current size of the resizing element." ilk="function" line="313" lineend="319" name="getElementSize" returns="s.resizingEl.getHeight()" signature="getElementSize(s)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called after drag operations to set the size of the resizing element." ilk="function" line="327" lineend="348" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="Number" doc="The new size to set" ilk="argument" name="newSize" />
              <variable citdl="Function" doc="A function to be invoked when resizing is complete" ilk="argument" name="onComplete" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.SplitBar.BasicLayoutAdapter&#xA;Adapter that  moves the splitter element to align with the resized sizing element.&#xA;Used with an absolute positioned SplitBar. Object" doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="class" line="359" lineend="394" name="AbsoluteLayoutAdapter">
            <scope attributes="__ctor__" doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="function" line="359" lineend="362" name="AbsoluteLayoutAdapter" signature="AbsoluteLayoutAdapter(container)">
              <variable citdl="Mixed" doc="The container that wraps around the absolute positioned content. If it&apos;s&#xA;document.body, make sure you assign an id to the body element." ilk="argument" name="container" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="365" lineend="367" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="369" lineend="371" name="getElementSize" returns="this.basic.getElementSize()" signature="getElementSize(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="373" lineend="375" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="newSize" />
              <variable ilk="argument" name="onComplete" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="377" lineend="393" name="moveSplitter" signature="moveSplitter(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
              <variable attributes="__local__ private" citdl="Ext.SplitBar" line="378" name="yes" />
            </scope>
          </scope>
          <variable citdl="Ext.SplitBar.BasicLayoutAdapter" line="360" name="basic" />
          <variable citdl="Ext.get()" line="361" name="container" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a vertical SplitBar" line="401" name="VERTICAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a horizontal SplitBar" line="408" name="HORIZONTAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the left of the splitter element" line="415" name="LEFT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the right of the splitter element" line="422" name="RIGHT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned above the splitter element" line="429" name="TOP" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned under splitter element" line="436" name="BOTTOM" />
        </scope>
        <variable citdl="Object" line="31" name="form">
          <scope classrefs="Object" ilk="class" line="20" lineend="254" name="Action">
            <scope attributes="__ctor__" doc="The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.&#xA;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;the Form needs to perform an action such as submit or load. The Configuration options&#xA;listed for this class are set through the Form&apos;s action methods: {@link Ext.form.BasicForm#submit submit},&#xA;{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}&#xA;The instance of Action which performed the action is passed to the success&#xA;and failure callbacks of the Form&apos;s action methods ({@link Ext.form.BasicForm#submit submit},&#xA;{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),&#xA;and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and&#xA;{@link Ext.form.BasicForm#actionfailed actionfailed} event handlers." ilk="function" line="20" lineend="23" name="Action" signature="Action(form, options)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="form" line="21" name="form" />
            <variable citdl="options" line="22" name="options" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when client side validation of the Form fails&#xA;thus aborting a submit action. Client side validation is performed unless&#xA;{@link #clientValidation} is explicitly set to false." line="32" name="CLIENT_INVALID" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when server side processing fails and the {@link #result}&apos;s&#xA;success property is set to false.&#xA;In the case of a form submission, field-specific error messages may be returned in the&#xA;{@link #result}&apos;s errors property." line="41" name="SERVER_INVALID" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when a communication error happens when attempting&#xA;to send a request to the remote server. The {@link #response} may be examined to&#xA;provide further information." line="49" name="CONNECT_FAILURE" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when the response&apos;s success&#xA;property is set to false, or no field values are returned in the response&apos;s&#xA;data property." line="57" name="LOAD_FAILURE" />
            <variable citdl="String" doc="{@link Ext.form.BasicForm.reset reset} on Action success. If specified, this happens&#xA;before the {@link #success} callback is called and before the Form&apos;s&#xA;{@link Ext.form.BasicForm.actioncomplete actioncomplete} event fires." line="121" name="type" />
            <scope citdl="Object" doc="The type of failure detected will be one of these: {@link #CLIENT_INVALID},&#xA;{@link #SERVER_INVALID}, {@link #CONNECT_FAILURE}, or {@link #LOAD_FAILURE}.  Usage:&#xA;&#xA;var fp = new Ext.form.FormPanel({&#xA;...&#xA;buttons: [{&#xA;text: &apos;Save&apos;,&#xA;formBind: true,&#xA;handler: function(){&#xA;if(fp.getForm().isValid()){&#xA;fp.getForm().submit({&#xA;url: &apos;form-submit.php&apos;,&#xA;waitMsg: &apos;Submitting your data...&apos;,&#xA;success: function(form, action){&#xA;// server responded with success = true&#xA;var result = action.{@link #result};&#xA;failure: function(form, action){&#xA;if (action.{@link #failureType} === Ext.form.Action.{@link #CONNECT_FAILURE}) {&#xA;Ext.Msg.alert(&apos;Error&apos;,&#xA;&apos;Status:&apos;+action.{@link #response}.status+&apos;: &apos;+&#xA;action.{@link #response}.statusText);&#xA;if (action.failureType === Ext.form.Action.{@link #SERVER_INVALID}){&#xA;// server responded with success = false&#xA;Ext.Msg.alert(&apos;Invalid&apos;, action.{@link #result}.errormsg);&#xA;});&#xA;},{&#xA;text: &apos;Reset&apos;,&#xA;handler: function(){&#xA;fp.getForm().reset();&#xA;&#xA;*/// interface method" ilk="function" line="177" lineend="179" name="run" signature="run(options)">
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="182" lineend="184" name="success" signature="success(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="187" lineend="189" name="handleResponse" signature="handleResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="192" lineend="196" name="failure" signature="failure(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="response" line="193" name="response" />
            <variable citdl="Ext.form.Action.CONNECT_FAILURE" line="194" name="failureType" />
            <scope ilk="function" line="201" lineend="208" name="processResponse" returns="this.result" signature="processResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="this.handleResponse()" line="206" name="result" />
            <scope ilk="function" line="211" lineend="220" name="getUrl" returns="url" signature="getUrl(appendParams)">
              <variable ilk="argument" name="appendParams" />
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.options.url" line="212" name="url" />
              <variable attributes="__local__ private" citdl="this.getParams()" line="214" name="p" />
            </scope>
            <scope ilk="function" line="223" lineend="225" name="getMethod" signature="getMethod()">
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="228" lineend="241" name="getParams" returns="p" signature="getParams()">
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.form.baseParams" line="229" name="bp" />
              <variable attributes="__local__ private" citdl="this.options.params" line="230" name="p" />
            </scope>
            <scope ilk="function" line="244" lineend="253" name="createCallback" signature="createCallback(opts)">
              <variable citdl="opts" ilk="argument" name="opts" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope classrefs="Ext.form.Action" ilk="class" line="312" lineend="314" name="Submit">
              <scope attributes="__ctor__" doc="A class which handles submission of data from {@link Ext.form.BasicForm Form}s&#xA;and processes the returned response.&#xA;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;{@link Ext.form.BasicForm#submit submit}ting.&#xA;Response Packet Criteria&#xA;A response packet may contain:&#xA;&#xA;success property : Boolean&#xA;The success property is required.&#xA;errors property : Object&#xA;The errors property,&#xA;which is optional, contains error messages for invalid fields.&#xA;&#xA;JSON Packets&#xA;By default, response packets are assumed to be JSON, so a typical response&#xA;packet may look like this:&#xA;success: false,&#xA;errors: {&#xA;clientCode: &quot;Client not found&quot;,&#xA;portOfLoading: &quot;This field must not be null&quot;&#xA;Other data may be placed into the response for processing by the {@link Ext.form.BasicForm}&apos;s callback&#xA;or event handler methods. The object decoded from this JSON is available in the&#xA;{@link Ext.form.Action#result result} property.&#xA;Alternatively, if an {@link #errorReader} is specified as an {@link Ext.data.XmlReader XmlReader}:&#xA;errorReader: new Ext.data.XmlReader({&#xA;record : &apos;field&apos;,&#xA;success: &apos;@success&apos;&#xA;}, [&#xA;&apos;id&apos;, &apos;msg&apos;&#xA;then the results may be sent back in XML format:&#xA;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&#xA;&amp;lt;message success=&quot;false&quot;&amp;gt;&#xA;&amp;lt;errors&amp;gt;&#xA;&amp;lt;field&amp;gt;&#xA;&amp;lt;id&amp;gt;clientCode&amp;lt;/id&amp;gt;&#xA;&amp;lt;msg&amp;gt;&amp;lt;![CDATA[Code not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;&#xA;&amp;lt;/field&amp;gt;&#xA;&amp;lt;field&amp;gt;&#xA;&amp;lt;id&amp;gt;portOfLoading&amp;lt;/id&amp;gt;&#xA;&amp;lt;msg&amp;gt;&amp;lt;![CDATA[Port not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;&#xA;&amp;lt;/field&amp;gt;&#xA;&amp;lt;/errors&amp;gt;&#xA;&amp;lt;/message&amp;gt;&#xA;Other elements may be placed into the response XML for processing by the {@link Ext.form.BasicForm}&apos;s callback&#xA;or event handler methods. The XML document is available in the {@link #errorReader}&apos;s {@link Ext.data.XmlReader#xmlData xmlData} property." ilk="function" line="312" lineend="314" name="Submit" signature="Submit(form, options)">
                <variable ilk="argument" name="form" />
                <variable ilk="argument" name="options" />
                <variable citdl="Submit" name="this" />
              </scope>
              <variable citdl="String" doc="no need for an errorReader.&#xA;A Reader which reads a single record from the returned data. The DataReader&apos;s&#xA;success property specifies how submission success is determined. The Record&apos;s&#xA;data provides the error messages to apply to any invalid form Fields." line="330" name="type" />
              <scope ilk="function" line="333" lineend="350" name="run" signature="run()">
                <variable attributes="__local__ private" citdl="this.options" line="334" name="o" />
                <variable attributes="__local__ private" citdl="this.getMethod()" line="335" name="method" />
                <variable attributes="__local__ private" citdl="method" line="336" name="isGet" />
              </scope>
              <variable citdl="Ext.form.Action.CLIENT_INVALID" line="347" name="failureType" />
              <scope ilk="function" line="353" lineend="364" name="success" signature="success(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.processResponse()" line="354" name="result" />
              </scope>
              <scope ilk="function" line="367" lineend="386" name="handleResponse" returns="Ext.decode()" signature="handleResponse(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.form.errorReader.read()" line="369" name="rs" />
                <variable attributes="__local__ private" citdl="Array" line="370" name="errors" />
                <variable attributes="__local__ private" citdl="rs.records[i]" line="373" name="r" />
              </scope>
            </scope>
            <scope classrefs="Ext.form.Action" ilk="class" line="448" lineend="451" name="Load">
              <scope attributes="__ctor__" doc="A class which handles loading of data from a server into the Fields of an {@link Ext.form.BasicForm}.&#xA;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;{@link Ext.form.BasicForm#load load}ing.&#xA;Response Packet Criteria&#xA;A response packet must contain:&#xA;&#xA;success property : Boolean&#xA;data property : Object&#xA;The data property contains the values of Fields to load.&#xA;The individual value object for each Field is passed to the Field&apos;s&#xA;{@link Ext.form.Field#setValue setValue} method.&#xA;&#xA;JSON Packets&#xA;By default, response packets are assumed to be JSON, so for the following form load call:&#xA;var myFormPanel = new Ext.form.FormPanel({&#xA;title: &apos;Client and routing info&apos;,&#xA;items: [{&#xA;fieldLabel: &apos;Client&apos;,&#xA;name: &apos;clientName&apos;&#xA;}, {&#xA;fieldLabel: &apos;Port of loading&apos;,&#xA;name: &apos;portOfLoading&apos;&#xA;}, {&#xA;fieldLabel: &apos;Port of discharge&apos;,&#xA;name: &apos;portOfDischarge&apos;&#xA;});&#xA;myFormPanel.{@link Ext.form.FormPanel#getForm getForm}().{@link Ext.form.BasicForm#load load}({&#xA;url: &apos;/getRoutingInfo.php&apos;,&#xA;params: {&#xA;consignmentRef: myConsignmentRef&#xA;failure: function(form, action() {&#xA;Ext.Msg.alert(&quot;Load failed&quot;, action.result.errorMessage);&#xA;});&#xA;a success response packet may look like this:&#xA;success: true,&#xA;data: {&#xA;clientName: &quot;Fred. Olsen Lines&quot;,&#xA;portOfLoading: &quot;FXT&quot;,&#xA;portOfDischarge: &quot;OSL&quot;&#xA;while a failure response packet may look like this:&#xA;success: false,&#xA;errorMessage: &quot;Consignment reference not found&quot;&#xA;Other data may be placed into the response for processing the {@link Ext.form.BasicForm Form}&apos;s&#xA;callback or event handler methods. The object decoded from this JSON is available in the&#xA;{@link Ext.form.Action#result result} property." ilk="function" line="448" lineend="451" name="Load" signature="Load(form, options)">
                <variable ilk="argument" name="form" />
                <variable ilk="argument" name="options" />
                <variable citdl="Load" name="this" />
              </scope>
              <variable citdl="this.form.reader" line="450" name="reader" />
              <variable citdl="String" line="455" name="type" />
              <scope ilk="function" line="458" lineend="466" name="run" signature="run()" />
              <scope ilk="function" line="469" lineend="479" name="success" signature="success(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.processResponse()" line="470" name="result" />
              </scope>
              <variable citdl="Ext.form.Action.LOAD_FAILURE" line="472" name="failureType" />
              <scope ilk="function" line="482" lineend="492" name="handleResponse" returns="Ext.decode()" signature="handleResponse(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.form.reader.read()" line="484" name="rs" />
                <variable attributes="__local__ private" citdl="rs.records" line="485" name="data" />
              </scope>
            </scope>
            <variable citdl="Ext.extend()" doc="Provides Ext.direct support for loading form data. This example illustrates usage&#xA;of Ext.Direct to load a submit a form through Ext.Direct.&#xA;&#xA;var myFormPanel = new Ext.form.FormPanel({&#xA;// configs for FormPanel&#xA;title: &apos;Basic Information&apos;,&#xA;border: false,&#xA;padding: 10,&#xA;buttons:[{&#xA;text: &apos;Submit&apos;,&#xA;handler: function(){&#xA;basicInfo.getForm().submit({&#xA;params: {&#xA;uid: 5&#xA;});&#xA;}],&#xA;// configs apply to child items&#xA;defaults: {anchor: &apos;100%&apos;},&#xA;defaultType: &apos;textfield&apos;,&#xA;items: [&#xA;// form fields go here&#xA;// configs for BasicForm&#xA;api: {&#xA;load: Profile.getBasicInfo,&#xA;// The server-side must mark the submit handler as a &apos;formHandler&apos;&#xA;submit: Profile.updateBasicInfo&#xA;paramOrder: [&apos;uid&apos;]&#xA;});&#xA;// load the form&#xA;myFormPanel.getForm().load({&#xA;params: {&#xA;uid: 5&#xA;});" line="577" name="DirectLoad" />
            <variable citdl="Ext.extend()" doc="Provides Ext.direct support for submitting form data.&#xA;See {@link Ext.form.Action.DirectLoad}." line="618" name="DirectSubmit" />
            <variable citdl="Object" line="621" lineend="626" name="ACTION_TYPES">
              <variable citdl="Ext.form.Action.Load" line="622" name="load" />
              <variable citdl="Ext.form.Action.Submit" line="623" name="submit" />
              <variable citdl="Ext.form.Action.DirectLoad" line="624" name="directload" />
              <variable citdl="Ext.form.Action.DirectSubmit" line="625" name="directsubmit" />
            </variable>
          </scope>
          <variable citdl="Object" line="31" lineend="136" name="Field">
            <variable citdl="Object" line="607" lineend="639" name="msgFx">
              <variable citdl="Object" line="608" lineend="616" name="normal">
                <scope ilk="function" line="609" lineend="611" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="normal" name="this" />
                </scope>
                <scope ilk="function" line="613" lineend="615" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="normal" name="this" />
                </scope>
              </variable>
              <variable citdl="Object" line="618" lineend="626" name="slide">
                <scope ilk="function" line="619" lineend="621" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slide" name="this" />
                </scope>
                <scope ilk="function" line="623" lineend="625" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slide" name="this" />
                </scope>
              </variable>
              <variable citdl="Object" line="628" lineend="638" name="slideRight">
                <scope ilk="function" line="629" lineend="633" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slideRight" name="this" />
                </scope>
                <scope ilk="function" line="635" lineend="637" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slideRight" name="this" />
                </scope>
              </variable>
            </variable>
          </variable>
          <scope classrefs="Ext.util.Observable" ilk="class" line="37" lineend="265" name="BasicForm">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Encapsulates the DOM &amp;lt;form&gt; element at the heart of the {@link Ext.form.FormPanel FormPanel} class, and provides&#xA;input field management, validation, submission, and form loading services.&#xA;By default, Ext Forms are submitted through Ajax, using an instance of {@link Ext.form.Action.Submit}.&#xA;To enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option.&#xA;File Uploads&#xA;{@link #fileUpload File uploads} are not performed using Ajax submission, that&#xA;is they are not performed using XMLHttpRequests. Instead the form is submitted in the standard&#xA;manner with the DOM &amp;lt;form&gt; element temporarily modified to have its&#xA;target set to refer&#xA;to a dynamically generated, hidden &amp;lt;iframe&gt; which is inserted into the document&#xA;but removed after the return data has been gathered.&#xA;The server response is parsed by the browser to create the document for the IFRAME. If the&#xA;server is using JSON to send the return object, then the&#xA;Content-Type header&#xA;must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.&#xA;Characters which are significant to an HTML parser must be sent as HTML entities, so encode&#xA;&quot;&amp;lt;&quot; as &quot;&amp;amp;lt;&quot;, &quot;&amp;amp;&quot; as &quot;&amp;amp;amp;&quot; etc.&#xA;The response text is retrieved from the document, and a fake XMLHttpRequest object&#xA;is created containing a responseText property in order to conform to the&#xA;requirements of event handlers and callbacks.&#xA;Be aware that file upload packets are sent with the content type multipart/form&#xA;and some server technologies (notably JEE) may require some custom processing in order to&#xA;retrieve parameter names and parameter values from the packet content." ilk="function" line="37" lineend="78" name="BasicForm" signature="BasicForm(el, config)">
              <variable citdl="Mixed" doc="The form element or its id" ilk="argument" name="el" />
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BasicForm" name="this" />
              <scope attributes="__local__ private" ilk="function" line="47" lineend="49" name="(anonymous)" returns="o.itemId" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="49" name="items" />
            <variable citdl="Number" doc="The request method to use (GET or POST) for form actions if one isn&apos;t supplied in the action options.&#xA;records: recordArray" line="144" name="timeout" />
            <variable doc="with {@link Ext.form.Action.DirectLoad} and {@link Ext.form.Action.DirectSubmit}.&#xA;Methods which have been imported by Ext.Direct can be specified here to load and submit&#xA;forms.&#xA;Such as the following:&#xA;api: {&#xA;load: App.ss.MyProfile.load,&#xA;submit: App.ss.MyProfile.submit&#xA;Load actions can use {@link #paramOrder} or {@link #paramsAsHash}&#xA;to customize how the load method is invoked.&#xA;Submit actions will always use a standard form submit. The formHandler configuration must&#xA;be set on the associated server-side method which has been imported by Ext.Direct&#xA;paramOrder: [&apos;param1&apos;,&apos;param2&apos;,&apos;param3&apos;]&#xA;paramOrder: &apos;param1 param2 param3&apos;&#xA;paramOrder: &apos;param1,param2,param3&apos;&#xA;paramOrder: &apos;param1|param2|param&apos;" line="177" name="paramOrder" />
            <variable citdl="Boolean" doc="load configuration. Send parameters as a collection of named&#xA;arguments (defaults to false). Providing a&#xA;{@link #paramOrder} nullifies this configuration." line="185" name="paramsAsHash" />
            <variable line="189" name="activeAction" />
            <variable citdl="Boolean" doc="or {@link #setValues}() data instead of when the form was first created.  Defaults to false." line="195" name="trackResetOnLoad" />
            <scope citdl="Mixed" doc="form submissions. (defaults to false)&#xA;Note: When using standardSubmit, the options to {@link #submit} are ignored because Ext&apos;s&#xA;Ajax infrastracture is bypassed. To pass extra parameters (baseParams and params), you will need to&#xA;create hidden fields within the form.&#xA;The url config option is also bypassed, so set the action as well:&#xA;&#xA;PANEL.getForm().getEl().dom.action = &apos;URL&apos;&#xA;&#xA;An example encapsulating the above:&#xA;&#xA;new Ext.FormPanel({&#xA;standardSubmit: true,&#xA;baseParams: {&#xA;foo: &apos;bar&apos;&#xA;url: &apos;myProcess.php&apos;,&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;name: &apos;userName&apos;&#xA;}],&#xA;buttons: [{&#xA;text: &apos;Save&apos;,&#xA;handler: function(){&#xA;var O = this.ownerCt;&#xA;if (O.getForm().isValid()) {&#xA;if (O.url)&#xA;O.getForm().getEl().dom.action = O.url;&#xA;if (O.baseParams) {&#xA;for (i in O.baseParams) {&#xA;O.add({&#xA;xtype: &apos;hidden&apos;,&#xA;name: i,&#xA;value: O.baseParams[i]&#xA;O.doLayout();&#xA;O.getForm().submit();&#xA;});&#xA;&#xA;By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific&#xA;element by passing it or its id or mask the form itself by passing in true.&#xA;*/// private" ilk="function" line="251" lineend="258" name="initEl" signature="initEl(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <variable citdl="Ext.get()" line="252" name="el" />
            <variable citdl="this.el.id" line="253" name="id" />
            <scope doc="Get the HTML form Element" ilk="function" line="264" lineend="266" name="getEl" returns="this.el" signature="getEl()" />
            <scope ilk="function" line="269" lineend="271" name="onSubmit" signature="onSubmit(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="274" lineend="283" name="destroy" signature="destroy()">
              <scope attributes="__local__ private" ilk="function" line="275" lineend="277" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Returns true if client-side validation on the form is successful." ilk="function" line="289" lineend="297" name="isValid" returns="valid" signature="isValid()">
              <variable attributes="__local__ private" citdl="Boolean" line="290" name="valid" />
              <scope attributes="__local__ private" ilk="function" line="291" lineend="295" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Returns true if any fields in this form have changed from their original values.&#xA;Note that if this BasicForm was configured with {@link #trackResetOnLoad} then the&#xA;Fields&apos; original values are updated when the values are loaded by {@link #setValues}&#xA;or {@link #loadRecord}." ilk="function" line="306" lineend="315" name="isDirty" returns="dirty" signature="isDirty()">
              <variable attributes="__local__ private" citdl="Boolean" line="307" name="dirty" />
              <scope attributes="__local__ private" ilk="function" line="308" lineend="313" name="(anonymous)" returns="Boolean" signature="(anonymous)()" />
            </scope>
            <scope doc="Performs a predefined action ({@link Ext.form.Action.Submit} or&#xA;{@link Ext.form.Action.Load}) or a custom extension of {@link Ext.form.Action}&#xA;to perform application-specific processing." ilk="function" line="376" lineend="385" name="doAction" returns="BasicForm" signature="doAction(action, options)">
              <variable citdl="Ext.form.Action.ACTION_TYPES" ilk="argument" name="action" />
              <variable citdl="Object" doc="(optional) The options to pass to the {@link Ext.form.Action}.&#xA;All of the config options listed below are supported by both the&#xA;{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}&#xA;actions unless otherwise noted (custom actions could also accept&#xA;other config options):&#xA;url : StringThe url for the action (defaults&#xA;to the form&apos;s {@link #url}.)&#xA;method : StringThe form method to use (defaults&#xA;to the form&apos;s method, or POST if not defined)&#xA;params : String/ObjectThe params to pass&#xA;(defaults to the form&apos;s baseParams, or none if not defined)&#xA;Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.&#xA;headers : ObjectRequest headers to set for the action&#xA;(defaults to the form&apos;s default headers)&#xA;success : FunctionThe callback that will&#xA;be invoked after a successful response (see top of&#xA;{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}&#xA;for a description of what constitutes a successful response).&#xA;The function is passed the following parameters:&#xA;form : Ext.form.BasicFormThe form that requested the action&#xA;action : The {@link Ext.form.Action Action} object which performed the operation.&#xA;The action object contains these properties of interest:&#xA;{@link Ext.form.Action#response response}&#xA;{@link Ext.form.Action#result result} : interrogate for custom postprocessing&#xA;{@link Ext.form.Action#type type}&#xA;failure : FunctionThe callback that will be invoked after a&#xA;failed transaction attempt. The function is passed the following parameters:&#xA;form : The {@link Ext.form.BasicForm} that requested the action.&#xA;action : The {@link Ext.form.Action Action} object which performed the operation.&#xA;The action object contains these properties of interest:&#xA;{@link Ext.form.Action#failureType failureType}&#xA;{@link Ext.form.Action#response response}&#xA;{@link Ext.form.Action#result result} : interrogate for custom postprocessing&#xA;{@link Ext.form.Action#type type}&#xA;scope : ObjectThe scope in which to call the&#xA;callback functions (The this reference for the callback functions).&#xA;clientValidation : BooleanSubmit Action only.&#xA;Determines whether a Form&apos;s fields are validated in a final call to&#xA;{@link Ext.form.BasicForm#isValid isValid} prior to submission. Set to false&#xA;to prevent this. If undefined, pre-submission field validation is performed." ilk="argument" name="options" />
            </scope>
            <scope doc="Shortcut to {@link #doAction do} a {@link Ext.form.Action.Submit submit action}.&#xA;myFormPanel.getForm().submit({&#xA;clientValidation: true,&#xA;url: &apos;updateConsignment.php&apos;,&#xA;params: {&#xA;newStatus: &apos;delivered&apos;&#xA;success: function(form, action) {&#xA;Ext.Msg.alert(&apos;Success&apos;, action.result.msg);&#xA;failure: function(form, action) {&#xA;switch (action.failureType) {&#xA;case Ext.form.Action.CLIENT_INVALID:&#xA;Ext.Msg.alert(&apos;Failure&apos;, &apos;Form fields may not be submitted with invalid values&apos;);&#xA;break;&#xA;case Ext.form.Action.CONNECT_FAILURE:&#xA;Ext.Msg.alert(&apos;Failure&apos;, &apos;Ajax communication failed&apos;);&#xA;break;&#xA;case Ext.form.Action.SERVER_INVALID:&#xA;Ext.Msg.alert(&apos;Failure&apos;, action.result.msg);&#xA;});&#xA;&quot;success&quot;:true, // note this is Boolean, not string&#xA;&quot;msg&quot;:&quot;Consignment updated&quot;&#xA;&quot;success&quot;:false, // note this is Boolean, not string&#xA;&quot;msg&quot;:&quot;You do not have permission to perform this operation&quot;" ilk="function" line="429" lineend="440" name="submit" returns="BasicForm" signature="submit(options)">
              <variable citdl="Object" doc="The options to pass to the action (see {@link #doAction} for details).&#xA;Note: this is ignored when using the {@link #standardSubmit} option.&#xA;The following code:&#xA;would process the following server response for a successful submission:&#xA;and the following server response for a failed submission:" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="this.isValid()" line="431" name="v" />
              <variable attributes="__local__ private" citdl="String.format()" line="437" name="submitAction" />
            </scope>
            <scope doc="Shortcut to {@link #doAction do} a {@link Ext.form.Action.Load load action}." ilk="function" line="447" lineend="451" name="load" returns="BasicForm" signature="load(options)">
              <variable citdl="Object" doc="The options to pass to the action (see {@link #doAction} for details)" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="String.format()" line="448" name="loadAction" />
            </scope>
            <scope doc="Persists the values in this form into the passed {@link Ext.data.Record} object in a beginEdit/endEdit block." ilk="function" line="458" lineend="469" name="updateRecord" returns="BasicForm" signature="updateRecord(record)">
              <variable citdl="Record" doc="The record to edit" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="record.fields" line="460" name="fs" />
              <scope attributes="__local__ private" ilk="function" line="461" lineend="466" name="(anonymous)" signature="(anonymous)()">
                <variable attributes="__local__ private" citdl="this.findField()" line="462" name="field" />
              </scope>
            </scope>
            <scope doc="Loads an {@link Ext.data.Record} into this form by calling {@link #setValues} with the&#xA;{@link Ext.data.Record#data record data}.&#xA;See also {@link #trackResetOnLoad}." ilk="function" line="478" lineend="481" name="loadRecord" returns="BasicForm" signature="loadRecord(record)">
              <variable citdl="Record" doc="The record to load" ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="484" lineend="496" name="beforeAction" signature="beforeAction(action)">
              <variable ilk="argument" name="action" />
              <variable attributes="__local__ private" citdl="action.options" line="485" name="o" />
            </scope>
            <variable citdl="Ext.get()" line="490" name="waitMsgTarget" />
            <scope ilk="function" line="499" lineend="522" name="afterAction" signature="afterAction(action, success)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="success" />
              <variable attributes="__local__ private" citdl="action.options" line="501" name="o" />
            </scope>
            <scope doc="Find a {@link Ext.form.Field} in this form." ilk="function" line="530" lineend="541" name="findField" returns="field" signature="findField(id)">
              <variable citdl="String" doc="The value to search for (specify either a {@link Ext.Component#id id},&#xA;{@link Ext.grid.Column#dataIndex dataIndex}, {@link Ext.form.Field#getName name or hiddenName})." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.items.get()" line="531" name="field" />
              <scope attributes="__local__ private" ilk="function" line="533" lineend="538" name="(anonymous)" returns="Boolean" signature="(anonymous)()" />
            </scope>
            <scope doc="Mark fields in this form invalid in bulk." ilk="function" line="549" lineend="567" name="markInvalid" returns="BasicForm" signature="markInvalid(errors)">
              <variable citdl="Array/Object" doc="Either an array in the form [{id:&apos;fieldId&apos;, msg:&apos;The message&apos;},...] or an object hash of {id: msg, id2: msg2}" ilk="argument" name="errors" />
              <variable attributes="__local__ private" citdl="errors[i]" line="552" name="fieldError" />
              <variable attributes="__local__ private" citdl="this.findField()" line="553" name="f" />
              <variable attributes="__local__ private" line="559" name="field" />
              <variable attributes="__local__ private" line="559" name="id" />
            </scope>
            <scope doc="Set values for fields in this form in bulk.&#xA;[{id:&apos;clientName&apos;, value:&apos;Fred. Olsen Lines&apos;},&#xA;{id:&apos;portOfLoading&apos;, value:&apos;FXT&apos;},&#xA;{id:&apos;portOfDischarge&apos;, value:&apos;OSL&apos;} ]&#xA;clientName: &apos;Fred. Olsen Lines&apos;,&#xA;portOfLoading: &apos;FXT&apos;,&#xA;portOfDischarge: &apos;OSL&apos;" ilk="function" line="583" lineend="607" name="setValues" returns="BasicForm" signature="setValues(values)">
              <variable citdl="Array/Object" doc="Either an array in the form:&#xA;or an object hash of the form:" ilk="argument" name="values" />
              <variable attributes="__local__ private" citdl="values[i]" line="586" name="v" />
              <variable attributes="__local__ private" citdl="this.findField()" line="587" name="f" />
              <variable attributes="__local__ private" line="596" name="field" />
              <variable attributes="__local__ private" line="596" name="id" />
            </scope>
            <scope doc="Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.&#xA;If multiple fields exist with the same name they are returned as an array.&#xA;Note: The values are collected from all enabled HTML input elements within the form, not from&#xA;the Ext Field objects. This means that all returned values are Strings (or Arrays of Strings) and that the&#xA;value can potentially be the emptyText of a field." ilk="function" line="618" lineend="624" name="getValues" returns="String/Object" signature="getValues(asString)">
              <variable citdl="Boolean" doc="(optional) Pass true to return the values as a string. (defaults to false, returning an Object)" ilk="argument" name="asString" />
              <variable attributes="__local__ private" citdl="Ext.lib.Ajax.serializeForm()" line="619" name="fs" />
            </scope>
            <scope ilk="function" line="626" lineend="632" name="getFieldValues" returns="o" signature="getFieldValues()">
              <variable attributes="__local__ private" citdl="Object" line="627" lineend="627" name="o" />
              <scope attributes="__local__ private" ilk="function" line="628" lineend="630" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Clears all invalid messages in this form." ilk="function" line="638" lineend="643" name="clearInvalid" returns="BasicForm" signature="clearInvalid()">
              <scope attributes="__local__ private" ilk="function" line="639" lineend="641" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Resets this form." ilk="function" line="649" lineend="654" name="reset" returns="BasicForm" signature="reset()">
              <scope attributes="__local__ private" ilk="function" line="650" lineend="652" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Add Ext.form Components to this form&apos;s Collection. This does not result in rendering of&#xA;the passed Component, it just enables the form to validate Fields, and distribute values to&#xA;Fields.&#xA;You will not usually call this function. In order to be rendered, a Field must be added&#xA;to a {@link Ext.Container Container}, usually an {@link Ext.form.FormPanel FormPanel}.&#xA;The FormPanel to which the field is added takes care of adding the Field to the BasicForm&apos;s&#xA;collection." ilk="function" line="669" lineend="672" name="add" returns="BasicForm" signature="add()" />
            <scope doc="Removes a field from the items collection (does NOT remove its markup)." ilk="function" line="680" lineend="683" name="remove" returns="BasicForm" signature="remove(field)">
              <variable citdl="Field" ilk="argument" name="field" />
            </scope>
            <scope doc="Calls {@link Ext#apply} for all fields in this form with the passed object." ilk="function" line="704" lineend="709" name="applyToFields" returns="BasicForm" signature="applyToFields(o)">
              <variable ilk="argument" name="o" />
              <scope attributes="__local__ private" ilk="function" line="705" lineend="707" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Calls {@link Ext#applyIf} for all field in this form with the passed object." ilk="function" line="716" lineend="721" name="applyIfToFields" returns="BasicForm" signature="applyIfToFields(o)">
              <variable ilk="argument" name="o" />
              <scope attributes="__local__ private" ilk="function" line="717" lineend="719" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="723" lineend="731" name="callFieldMethod" returns="this" signature="callFieldMethod(fnName, args)">
              <variable ilk="argument" name="fnName" />
              <variable citdl="args" ilk="argument" name="args" />
              <scope attributes="__local__ private" ilk="function" line="725" lineend="729" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A basic hidden field for storing hidden values in forms that need to be passed in the form submit." line="38" name="Hidden" />
          <scope ilk="class" line="41" lineend="63" name="VTypes">
            <variable citdl="Object" line="41" lineend="134" name="VTypes">
              <scope doc="The function used to validate email addresses.  Note that this is a very basic validation -- complete&#xA;validation per the email RFC specifications is very complex and beyond the scope of this class, although&#xA;this function can be overridden if a more comprehensive validation scheme is desired.  See the validation&#xA;section of the Wikipedia article on email addresses&#xA;for additional information.  This implementation is intended to validate the following emails:&#xA;&apos;barney@example.de&apos;, &apos;barney.rubble@example.com&apos;, &apos;barney-rubble@example.coop&apos;, &apos;barney+rubble@example.com&apos;&#xA;." ilk="function" line="61" lineend="63" name="email" returns="Boolean" signature="email(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the email validation function returns false.  Defaults to:&#xA;&apos;This field should be an e-mail address in the format &quot;user@example.com&quot;&apos;" line="69" name="emailText" />
              <variable citdl="RegExp" doc="The keystroke filter mask to be applied on email input.  See the {@link #email} method for&#xA;information about more complex email validation. Defaults to:&#xA;/[a-z0-9_\.\-@]/i" line="76" name="emailMask" />
              <scope doc="The function used to validate URLs" ilk="function" line="83" lineend="85" name="url" returns="Boolean" signature="url(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the url validation function returns false.  Defaults to:&#xA;&apos;This field should be a URL in the format &quot;http:/&apos;+&apos;/www.example.com&quot;&apos;" line="91" name="urlText" />
              <scope doc="The function used to validate alpha values" ilk="function" line="98" lineend="100" name="alpha" returns="Boolean" signature="alpha(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the alpha validation function returns false.  Defaults to:&#xA;&apos;This field should only contain letters and _&apos;" line="106" name="alphaText" />
              <variable citdl="RegExp" doc="The keystroke filter mask to be applied on alpha input.  Defaults to:&#xA;/[a-z_]/i" line="112" name="alphaMask" />
              <scope doc="The function used to validate alphanumeric values" ilk="function" line="119" lineend="121" name="alphanum" returns="Boolean" signature="alphanum(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the alphanumeric validation function returns false.  Defaults to:&#xA;&apos;This field should only contain letters, numbers and _&apos;" line="127" name="alphanumText" />
            </variable>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Basic Label field." line="62" name="Label" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.&#xA;Radio grouping is handled automatically by the browser if you give each radio in a group the same name." line="80" name="Radio" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A display-only text field which is not validated and not submitted." line="96" name="DisplayField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds&#xA;support for auto-sizing." line="116" name="TextArea" />
          <variable citdl="Object" line="121" name="TextField">
            <variable citdl="Object" line="121" name="prototype">
              <variable citdl="String" line="140" name="minLengthText" />
              <variable citdl="String" line="141" name="maxLengthText" />
              <variable citdl="String" line="142" name="blankText" />
              <variable citdl="String" line="143" name="regexText" />
              <variable line="144" name="emptyText" />
            </variable>
          </variable>
          <variable citdl="Object" line="129" name="NumberField">
            <variable citdl="Object" line="129" name="prototype">
              <variable citdl="String" line="150" name="decimalSeparator" />
              <variable citdl="Number" line="151" name="decimalPrecision" />
              <variable citdl="String" line="152" name="minText" />
              <variable citdl="String" line="153" name="maxText" />
              <variable citdl="String" line="154" name="nanText" />
            </variable>
          </variable>
          <variable citdl="Object" line="140" name="DateField">
            <variable citdl="Object" line="140" name="prototype">
              <variable citdl="String" line="160" name="disabledDaysText" />
              <variable citdl="String" line="161" name="disabledDatesText" />
              <variable citdl="String" line="162" name="minText" />
              <variable citdl="String" line="163" name="maxText" />
              <variable citdl="String" line="164" name="invalidText" />
              <variable citdl="String" line="165" name="format" />
              <variable citdl="String" line="166" name="altFormats" />
            </variable>
          </variable>
          <variable citdl="Object" line="147" name="ComboBox">
            <variable citdl="Object" line="147" name="prototype">
              <variable citdl="String" line="172" name="loadingText" />
              <variable line="173" name="valueNotFoundText" />
            </variable>
          </variable>
          <variable citdl="Object" line="156" name="VTypes">
            <variable citdl="String" line="179" name="emailText" />
            <variable citdl="String" line="180" name="urlText" />
            <variable citdl="String" line="181" name="alphaText" />
            <variable citdl="String" line="182" name="alphanumText" />
          </variable>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields." line="176" name="Checkbox" />
          <variable citdl="Object" line="234" name="HtmlEditor">
            <variable citdl="Object" line="234" name="prototype">
              <variable citdl="String" line="188" name="createLinkText" />
              <variable citdl="Object" line="189" lineend="260" name="buttonTips">
                <variable citdl="Object" line="190" lineend="194" name="bold">
                  <variable citdl="String" line="191" name="title" />
                  <variable citdl="String" line="192" name="text" />
                  <variable citdl="String" line="193" name="cls" />
                </variable>
                <variable citdl="Object" line="195" lineend="199" name="italic">
                  <variable citdl="String" line="196" name="title" />
                  <variable citdl="String" line="197" name="text" />
                  <variable citdl="String" line="198" name="cls" />
                </variable>
                <variable citdl="Object" line="200" lineend="204" name="underline">
                  <variable citdl="String" line="201" name="title" />
                  <variable citdl="String" line="202" name="text" />
                  <variable citdl="String" line="203" name="cls" />
                </variable>
                <variable citdl="Object" line="205" lineend="209" name="increasefontsize">
                  <variable citdl="String" line="206" name="title" />
                  <variable citdl="String" line="207" name="text" />
                  <variable citdl="String" line="208" name="cls" />
                </variable>
                <variable citdl="Object" line="210" lineend="214" name="decreasefontsize">
                  <variable citdl="String" line="211" name="title" />
                  <variable citdl="String" line="212" name="text" />
                  <variable citdl="String" line="213" name="cls" />
                </variable>
                <variable citdl="Object" line="215" lineend="219" name="backcolor">
                  <variable citdl="String" line="216" name="title" />
                  <variable citdl="String" line="217" name="text" />
                  <variable citdl="String" line="218" name="cls" />
                </variable>
                <variable citdl="Object" line="220" lineend="224" name="forecolor">
                  <variable citdl="String" line="221" name="title" />
                  <variable citdl="String" line="222" name="text" />
                  <variable citdl="String" line="223" name="cls" />
                </variable>
                <variable citdl="Object" line="225" lineend="229" name="justifyleft">
                  <variable citdl="String" line="226" name="title" />
                  <variable citdl="String" line="227" name="text" />
                  <variable citdl="String" line="228" name="cls" />
                </variable>
                <variable citdl="Object" line="230" lineend="234" name="justifycenter">
                  <variable citdl="String" line="231" name="title" />
                  <variable citdl="String" line="232" name="text" />
                  <variable citdl="String" line="233" name="cls" />
                </variable>
                <variable citdl="Object" line="235" lineend="239" name="justifyright">
                  <variable citdl="String" line="236" name="title" />
                  <variable citdl="String" line="237" name="text" />
                  <variable citdl="String" line="238" name="cls" />
                </variable>
                <variable citdl="Object" line="240" lineend="244" name="insertunorderedlist">
                  <variable citdl="String" line="241" name="title" />
                  <variable citdl="String" line="242" name="text" />
                  <variable citdl="String" line="243" name="cls" />
                </variable>
                <variable citdl="Object" line="245" lineend="249" name="insertorderedlist">
                  <variable citdl="String" line="246" name="title" />
                  <variable citdl="String" line="247" name="text" />
                  <variable citdl="String" line="248" name="cls" />
                </variable>
                <variable citdl="Object" line="250" lineend="254" name="createlink">
                  <variable citdl="String" line="251" name="title" />
                  <variable citdl="String" line="252" name="text" />
                  <variable citdl="String" line="253" name="cls" />
                </variable>
                <variable citdl="Object" line="255" lineend="259" name="sourceedit">
                  <variable citdl="String" line="256" name="title" />
                  <variable citdl="String" line="257" name="text" />
                  <variable citdl="String" line="258" name="cls" />
                </variable>
              </variable>
            </variable>
          </variable>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).&#xA;The trigger has no default action, so you must assign a function to implement the trigger click handler by&#xA;overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox&#xA;for which you can provide a custom implementation.  For example:&#xA;&#xA;var trigger = new Ext.form.TriggerField();&#xA;trigger.onTriggerClick = myTriggerFn;&#xA;trigger.applyToMarkup(&apos;my-field&apos;);&#xA;&#xA;However, in general you will most likely want to use TriggerField as the base class for a reusable component.&#xA;{@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this." line="238" name="TriggerField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Standard container used for grouping items within a {@link Ext.form.FormPanel form}.&#xA;&#xA;var form = new Ext.FormPanel({&#xA;title: &apos;Simple Form with FieldSets&apos;,&#xA;labelWidth: 75, // label settings here cascade unless overridden&#xA;url: &apos;save-form.php&apos;,&#xA;frame:true,&#xA;bodyStyle:&apos;padding:5px 5px 0&apos;,&#xA;width: 700,&#xA;renderTo: document.body,&#xA;layout:&apos;column&apos;, // arrange items in columns&#xA;defaults: {      // defaults applied to items&#xA;layout: &apos;form&apos;,&#xA;border: false,&#xA;bodyStyle: &apos;padding:4px&apos;&#xA;items: [{&#xA;// Fieldset in Column 1&#xA;xtype:&apos;fieldset&apos;,&#xA;columnWidth: 0.5,&#xA;title: &apos;Fieldset 1&apos;,&#xA;collapsible: true,&#xA;autoHeight:true,&#xA;defaults: {&#xA;anchor: &apos;-20&apos; // leave room for error icon&#xA;defaultType: &apos;textfield&apos;,&#xA;items :[{&#xA;fieldLabel: &apos;Field 1&apos;&#xA;}, {&#xA;fieldLabel: &apos;Field 2&apos;&#xA;}, {&#xA;fieldLabel: &apos;Field 3&apos;&#xA;},{&#xA;// Fieldset in Column 2 - Panel inside&#xA;xtype:&apos;fieldset&apos;,&#xA;title: &apos;Show Panel&apos;, // title, header, or checkboxToggle creates fieldset header&#xA;autoHeight:true,&#xA;columnWidth: 0.5,&#xA;checkboxToggle: true,&#xA;collapsed: true, // fieldset initially collapsed&#xA;layout:&apos;anchor&apos;,&#xA;items :[{&#xA;xtype: &apos;panel&apos;,&#xA;anchor: &apos;100%&apos;,&#xA;title: &apos;Panel inside a fieldset&apos;,&#xA;frame: true,&#xA;height: 100&#xA;});" line="304" name="FieldSet" />
          <variable citdl="Object" line="305" name="TimeField">
            <variable citdl="Object" line="305" name="prototype">
              <variable citdl="String" line="297" name="minText" />
              <variable citdl="String" line="298" name="maxText" />
              <variable citdl="String" line="299" name="invalidText" />
              <variable citdl="String" line="300" name="format" />
              <variable citdl="String" line="301" name="altFormats" />
            </variable>
          </variable>
          <variable citdl="Object" line="311" name="CheckboxGroup">
            <variable citdl="Object" line="311" name="prototype">
              <variable citdl="String" line="308" name="blankText" />
            </variable>
          </variable>
          <variable citdl="Object" line="317" name="RadioGroup">
            <variable citdl="Object" line="317" name="prototype">
              <variable citdl="String" line="314" name="blankText" />
            </variable>
          </variable>
          <variable citdl="Ext.extend()" doc="TwinTriggerField is not a public class to be used directly.  It is meant as an abstract base class&#xA;to be extended by an implementing class.  For an example of implementing this class, see the custom&#xA;SearchField implementation here:&#xA;http://extjs.com/deploy/ext/examples/form/custom.html" line="327" name="TwinTriggerField" />
          <variable citdl="Ext.FormPanel" line="334" name="FormPanel" />
          <variable citdl="Object" line="528" lineend="604" name="MessageTargets">
            <variable citdl="Object" line="529" lineend="542" name="qtip">
              <scope ilk="function" line="530" lineend="537" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="qtip" name="this" />
              </scope>
              <scope ilk="function" line="538" lineend="541" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="qtip" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="543" lineend="551" name="title">
              <scope ilk="function" line="544" lineend="547" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="title" name="this" />
              </scope>
              <scope ilk="function" line="548" lineend="550" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="title" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="552" lineend="575" name="under">
              <scope ilk="function" line="553" lineend="566" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="under" name="this" />
                <variable attributes="__local__ private" citdl="field.getErrorCt()" line="556" name="elp" />
              </scope>
              <scope ilk="function" line="567" lineend="574" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="under" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="576" lineend="603" name="side">
              <scope ilk="function" line="577" lineend="592" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="side" name="this" />
                <variable attributes="__local__ private" citdl="field.getErrorCt()" line="580" name="elp" />
              </scope>
              <scope ilk="function" line="593" lineend="602" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="side" name="this" />
              </scope>
            </variable>
          </variable>
        </variable>
        <scope doc="Copies all the properties of config to obj." ilk="function" line="33" lineend="44" name="apply" returns="Object" signature="apply(o, c, defaults)">
          <variable citdl="c[p]" ilk="argument" name="o" />
          <variable ilk="argument" name="c" />
          <variable citdl="Object" doc="A different object that will also be applied for default values" ilk="argument" name="defaults" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Object" line="35" lineend="34" name="LoadMask" />
        <variable citdl="String" doc="URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images.&#xA;In older versions of IE, this defaults to &quot;http://extjs.com/s.gif&quot; and you should change this to a URL on your server.&#xA;For other browsers it uses an inline data URL." line="36" name="BLANK_IMAGE_URL" />
        <variable citdl="Object" line="37" name="util">
          <scope ilk="class" line="12" lineend="29" name="Format">
            <variable citdl="Object" line="12" lineend="355" name="Format">
              <scope doc="Truncate a string and add an ellipsis (&apos;...&apos;) to the end if it exceeds the specified length" ilk="function" line="22" lineend="37" name="ellipsis" returns="String" signature="ellipsis(value, len, word)">
                <variable citdl="String" doc="The string to truncate" ilk="argument" name="value" />
                <variable ilk="argument" name="len" />
                <variable citdl="Boolean" doc="True to try to find a common work break" ilk="argument" name="word" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="value.substr()" line="25" name="vs" />
                <variable attributes="__local__ private" citdl="Math.max()" line="26" name="index" />
              </scope>
              <scope doc="Checks a reference and converts it to empty string if it is undefined" ilk="function" line="44" lineend="46" name="undef" returns="Mixed" signature="undef(value)">
                <variable citdl="Mixed" doc="Reference to check" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Checks a reference and converts it to the default value if it&apos;s empty" ilk="function" line="54" lineend="56" name="defaultValue" returns="String" signature="defaultValue(value, defaultValue)">
                <variable citdl="Mixed" doc="Reference to check" ilk="argument" name="value" />
                <variable citdl="String" doc="The value to insert of it&apos;s undefined (defaults to &quot;&quot;)" ilk="argument" name="defaultValue" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Convert certain characters (&amp;, , and &apos;) to their HTML character equivalents for literal display in web pages." ilk="function" line="63" lineend="65" name="htmlEncode" returns="String" signature="htmlEncode(value)">
                <variable citdl="String" doc="The string to encode" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Convert certain characters (&amp;, , and &apos;) from their HTML character equivalents." ilk="function" line="72" lineend="74" name="htmlDecode" returns="String" signature="htmlDecode(value)">
                <variable citdl="String" doc="The string to decode" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Trims any whitespace from either side of a string" ilk="function" line="81" lineend="83" name="trim" returns="String" signature="trim(value)">
                <variable citdl="String" doc="The text to trim" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Returns a substring from within an original string" ilk="function" line="92" lineend="94" name="substr" returns="String" signature="substr(value, start, length)">
                <variable citdl="String" doc="The original text" ilk="argument" name="value" />
                <variable citdl="Number" doc="The start index of the substring" ilk="argument" name="start" />
                <variable citdl="Number" doc="The length of the substring" ilk="argument" name="length" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts a string to all lower case letters" ilk="function" line="101" lineend="103" name="lowercase" returns="String" signature="lowercase(value)">
                <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts a string to all upper case letters" ilk="function" line="110" lineend="112" name="uppercase" returns="String" signature="uppercase(value)">
                <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts the first character only of a string to upper case" ilk="function" line="119" lineend="121" name="capitalize" returns="String" signature="capitalize(value)">
                <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope ilk="function" line="124" lineend="132" name="call" returns="eval().call()" signature="call(value, fn)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="fn" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="126" name="args" />
              </scope>
              <scope doc="Format a number as US currency" ilk="function" line="139" lineend="155" name="usMoney" returns="String" signature="usMoney(v)">
                <variable citdl="whole" ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="v.split()" line="143" name="ps" />
                <variable attributes="__local__ private" citdl="ps[0]" line="144" name="whole" />
                <variable attributes="__local__ private" citdl="ps[1]" line="145" name="sub" />
                <variable attributes="__local__ private" line="146" name="r" />
              </scope>
              <scope doc="Parse a value into a formatted date using the specified format pattern." ilk="function" line="163" lineend="171" name="date" returns="String" signature="date(v, format)">
                <variable citdl="Date" ilk="argument" name="v" />
                <variable citdl="String" doc="(optional) Any valid date format string (defaults to &apos;m/d/Y&apos;)" ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Returns a date rendering function that can be reused to apply a date format multiple times efficiently" ilk="function" line="178" lineend="182" name="dateRenderer" returns="Function" signature="dateRenderer(format)">
                <variable citdl="String" doc="Any valid date format string" ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
              </scope>
              <variable line="185" name="stripTagsRE" />
              <scope doc="Strips all HTML tags" ilk="function" line="192" lineend="194" name="stripTags" returns="String" signature="stripTags(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
              </scope>
              <variable line="196" name="stripScriptsRe" />
              <scope doc="Strips all script tags" ilk="function" line="203" lineend="205" name="stripScripts" returns="String" signature="stripScripts(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Simple format for a file size (xxx bytes, xxx KB, xxx MB)" ilk="function" line="212" lineend="220" name="fileSize" returns="String" signature="fileSize(size)">
                <variable citdl="Number/String" doc="The numeric value to format" ilk="argument" name="size" />
                <variable citdl="Format" name="this" />
              </scope>
              <variable doc="It does simple math for use in a template, for example:&#xA;var tpl = new Ext.Template(&apos;{value} * 10 = {value:math(&quot;* 10&quot;)}&apos;);" line="228" name="math" />
              <scope doc="Rounds the passed number to the required decimal precision." ilk="function" line="244" lineend="251" name="round" returns="Number" signature="round(value, precision)">
                <variable citdl="Number/String" doc="The numeric value to round." ilk="argument" name="value" />
                <variable citdl="Number" doc="The number of decimal places to which to round the first parameter&apos;s value." ilk="argument" name="precision" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="Number()" line="245" name="result" />
              </scope>
              <scope doc="Formats the number according to the format string.&#xA;examples (123456.789):&#xA;&#xA;0 - (123456) show only digits, no precision&#xA;0.00 - (123456.78) show only digits, 2 precision&#xA;0.0000 - (123456.7890) show only digits, 4 precision&#xA;0,000 - (123,456) show comma and digits, no precision&#xA;0,000.00 - (123,456.78) show comma and digits, 2 precision&#xA;0,0.00 - (123,456.78) shortcut method, show comma and digits, 2 precision&#xA;To reverse the grouping (,) and decimal (.) for international numbers, add /i to the end.&#xA;For example: 0.000,00/i" ilk="function" line="270" lineend="322" name="number" returns="String" signature="number(v, format)">
                <variable citdl="Number" doc="The number to format." ilk="argument" name="v" />
                <variable citdl="String" doc="The way you would like to format this text." ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="v" line="281" name="neg" />
                <variable attributes="__local__ private" citdl="String" line="281" name="comma" />
                <variable attributes="__local__ private" citdl="Boolean" line="281" name="i18n" />
                <variable attributes="__local__ private" citdl="String" line="281" name="dec" />
                <variable attributes="__local__ private" citdl="format.indexOf()" line="292" name="hasComma" />
                <variable attributes="__local__ private" citdl="fnum.split()" line="292" name="psplit" />
                <variable attributes="__local__ private" citdl="v.toString()" line="302" name="fnum" />
                <variable attributes="__local__ private" citdl="cnum.length" line="306" name="j" />
                <variable attributes="__local__ private" citdl="Math.floor()" line="306" name="m" />
                <variable attributes="__local__ private" citdl="cnum.length" line="306" name="n" />
                <variable attributes="__local__ private" citdl="Array" line="306" name="parr" />
                <variable attributes="__local__ private" citdl="psplit[0]" line="306" name="cnum" />
              </scope>
              <scope doc="Returns a number rendering function that can be reused to apply a number format multiple times efficiently" ilk="function" line="329" lineend="333" name="numberRenderer" returns="Function" signature="numberRenderer(format)">
                <variable citdl="String" doc="Any valid number format string for {@link #number}" ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Selectively do a plural form of a word based on a numeric value. For example, in a template,&#xA;{commentCount:plural(&quot;Comment&quot;)}  would result in &quot;1 Comment&quot; if commentCount was 1 or would be &quot;x Comments&quot;&#xA;if the value is 0 or greater than 1." ilk="function" line="343" lineend="345" name="plural" returns="v" signature="plural(v, s, p)">
                <variable ilk="argument" name="v" />
                <variable ilk="argument" name="s" />
                <variable ilk="argument" name="p" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts newline characters to the HTML tag &amp;lt;br/&gt;" ilk="function" line="352" lineend="354" name="nl2br" returns="String" signature="nl2br(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
              </scope>
            </variable>
          </scope>
          <scope ilk="class" line="12" lineend="34" name="CSS">
            <variable citdl="Object" line="12" lineend="160" name="CSS">
              <scope doc="Creates a stylesheet from a text blob of rules.&#xA;These rules will be wrapped in a STYLE tag and appended to the HEAD of the document." ilk="function" line="27" lineend="50" name="createStyleSheet" returns="StyleSheet" signature="createStyleSheet(cssText, id)">
                <variable citdl="String" doc="The text containing the css rules" ilk="argument" name="cssText" />
                <variable citdl="String" doc="An id to add to the stylesheet for later removal" ilk="argument" name="id" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="rules.styleSheet" line="28" name="ss" />
                <variable attributes="__local__ private" citdl="doc.getElementsByTagName()[0]" line="29" name="head" />
                <variable attributes="__local__ private" citdl="doc.createElement()" line="30" name="rules" />
              </scope>
              <scope doc="Removes a style or link tag by id" ilk="function" line="56" lineend="61" name="removeStyleSheet" signature="removeStyleSheet(id)">
                <variable citdl="String" doc="The id of the tag" ilk="argument" name="id" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="doc.getElementById()" line="57" name="existing" />
              </scope>
              <scope doc="Dynamically swaps an existing stylesheet reference for a new one" ilk="function" line="68" lineend="76" name="swapStyleSheet" signature="swapStyleSheet(id, url)">
                <variable citdl="String" doc="The id of an existing link tag to remove" ilk="argument" name="id" />
                <variable citdl="String" doc="The href of the new stylesheet to include" ilk="argument" name="url" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="doc.createElement()" line="70" name="ss" />
              </scope>
              <scope doc="Refresh the rule cache if you have dynamically added stylesheets" ilk="function" line="82" lineend="84" name="refreshCache" returns="Object" signature="refreshCache()">
                <variable citdl="CSS" name="this" />
              </scope>
              <scope ilk="function" line="87" lineend="97" name="cacheStyleSheet" signature="cacheStyleSheet(ss)">
                <variable ilk="argument" name="ss" />
                <variable citdl="CSS" name="this" />
                <variable citdl="Object" line="89" lineend="89" name="rules" />
                <variable attributes="__local__ private" citdl="ss.cssRules" line="92" name="ssRules" />
              </scope>
              <scope doc="Gets all css rules for the document" ilk="function" line="104" lineend="115" name="getRules" returns="Object" signature="getRules(refreshCache)">
                <variable citdl="Boolean" doc="true to refresh the internal cache" ilk="argument" name="refreshCache" />
                <variable citdl="CSS" name="this" />
                <variable citdl="Object" line="106" lineend="106" name="rules" />
                <variable attributes="__local__ private" citdl="doc.styleSheets" line="107" name="ds" />
              </scope>
              <scope doc="Gets an an individual CSS rule by selector(s)" ilk="function" line="123" lineend="134" name="getRule" returns="CSSRule" signature="getRule(selector, refreshCache)">
                <variable citdl="String/Array" doc="The CSS selector or an array of selectors to try. The first selector that is found is returned." ilk="argument" name="selector" />
                <variable citdl="Boolean" doc="true to refresh the internal cache if you have recently updated any rules or added styles dynamically" ilk="argument" name="refreshCache" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="this.getRules()" line="124" name="rs" />
              </scope>
              <scope doc="Updates a rule property" ilk="function" line="144" lineend="159" name="updateRule" returns="Boolean" signature="updateRule(selector, property, value)">
                <variable citdl="String/Array" doc="If it&apos;s an array it tries each selector until it finds one. Stops immediately once one is found." ilk="argument" name="selector" />
                <variable citdl="String" doc="The css property" ilk="argument" name="property" />
                <variable citdl="String" doc="The new value for the property" ilk="argument" name="value" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="this.getRule()" line="146" name="rule" />
              </scope>
            </variable>
          </scope>
          <variable citdl="Object" doc="Utility class for managing and interacting with cookies." line="12" lineend="96" name="Cookies">
            <scope doc="Create a cookie with the specified name and value. Additional settings&#xA;for the cookie may be optionally specified (for example: expiration,&#xA;access restriction, SSL)." ilk="function" line="35" lineend="43" name="set" signature="set(name, value)">
              <variable citdl="Object" ilk="argument" name="name" />
              <variable citdl="Object" ilk="argument" name="value" />
              <variable citdl="Cookies" name="this" />
              <variable attributes="__local__ private" citdl="arguments" line="36" name="argv" />
              <variable attributes="__local__ private" citdl="arguments.length" line="37" name="argc" />
              <variable attributes="__local__ private" line="38" name="expires" />
              <variable attributes="__local__ private" line="39" name="path" />
              <variable attributes="__local__ private" line="40" name="domain" />
              <variable attributes="__local__ private" line="41" name="secure" />
            </scope>
            <scope doc="Retrieves cookies that are accessible by the current page. If a cookie&#xA;does not exist, get() returns null.  The following&#xA;example retrieves the cookie called &quot;valid&quot; and stores the String value&#xA;in the variable validStatus.&#xA;&#xA;var validStatus = Ext.util.Cookies.get(&quot;valid&quot;);" ilk="function" line="57" lineend="74" name="get" returns="Mixed" signature="get(name)">
              <variable citdl="Object" doc="The name of the cookie to get" ilk="argument" name="name" />
              <variable citdl="Cookies" name="this" />
              <variable attributes="__local__ private" citdl="name" line="58" name="arg" />
              <variable attributes="__local__ private" citdl="arg.length" line="59" name="alen" />
              <variable attributes="__local__ private" citdl="document.cookie.length" line="60" name="clen" />
              <variable attributes="__local__ private" citdl="Number" line="61" name="i" />
              <variable attributes="__local__ private" citdl="Number" line="62" name="j" />
            </scope>
            <scope doc="Removes a cookie with the provided name from the browser&#xA;if found." ilk="function" line="81" lineend="85" name="clear" signature="clear(name)">
              <variable citdl="Object" doc="The name of the cookie to remove" ilk="argument" name="name" />
              <variable citdl="Cookies" name="this" />
            </scope>
            <scope attributes="private" ilk="function" line="89" lineend="95" name="getCookieVal" returns="unescape()" signature="getCookieVal(offset)">
              <variable ilk="argument" name="offset" />
              <variable citdl="Cookies" name="this" />
              <variable attributes="__local__ private" citdl="document.cookie.indexOf()" line="90" name="endstr" />
            </scope>
          </variable>
          <scope ilk="class" line="14" lineend="29" name="TextMetrics">
            <variable citdl="Object" line="14" lineend="46" name="TextMetrics">
              <scope doc="Measures the size of the specified text" ilk="function" line="26" lineend="33" name="measure" returns="Object" signature="measure(el, text, fixedWidth)">
                <variable citdl="String/HTMLElement" doc="The element, dom node or id from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="argument" name="el" />
                <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
                <variable citdl="TextMetrics" name="this" />
              </scope>
              <scope doc="Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces&#xA;the overhead of multiple calls to initialize the style properties on each measurement." ilk="function" line="43" lineend="45" name="createInstance" returns="Ext.util.TextMetrics.Instance" signature="createInstance(el, fixedWidth)">
                <variable citdl="String/HTMLElement" doc="The element, dom node or id that the instance will be bound to" ilk="argument" name="el" />
                <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
                <variable citdl="TextMetrics" name="this" />
              </scope>
            </variable>
            <scope ilk="function" line="49" lineend="117" name="Instance" returns="instance" signature="Instance(bindTo, fixedWidth)">
              <variable ilk="argument" name="bindTo" />
              <variable ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
              <variable attributes="__local__ private" citdl="Ext.Element" line="50" name="ml" />
              <variable attributes="__local__ private" citdl="Object" line="60" lineend="112" name="instance">
                <scope doc="Returns the size of the specified text based on the internal element&apos;s style and width properties" ilk="function" line="66" lineend="71" name="getSize" returns="Object" signature="getSize(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                  <variable attributes="__local__ private" citdl="ml.getSize()" line="68" name="s" />
                </scope>
                <scope doc="Binds this TextMetrics instance to an element from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="function" line="78" lineend="82" name="bind" signature="bind(el)">
                  <variable citdl="String/HTMLElement" doc="The element, dom node or id" ilk="argument" name="el" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Sets a fixed width on the internal measurement element.  If the text will be multiline, you have&#xA;to set a fixed width in order to accurately measure the text height." ilk="function" line="89" lineend="91" name="setFixedWidth" signature="setFixedWidth(width)">
                  <variable citdl="Number" doc="The width to set on the element" ilk="argument" name="width" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured width of the specified text" ilk="function" line="98" lineend="101" name="getWidth" returns="Number" signature="getWidth(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured height of the specified text.  For multiline text, be sure to call&#xA;{@link #setFixedWidth} if necessary." ilk="function" line="109" lineend="111" name="getHeight" returns="Number" signature="getHeight(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
              </variable>
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="19" lineend="60" name="MixedCollection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A Collection class that maintains both numeric indexes and keys and exposes events." ilk="function" line="19" lineend="60" name="MixedCollection" signature="MixedCollection(allowFunctions, keyFn)">
              <variable citdl="Boolean" doc="True if the addAll function should add function references to the&#xA;collection (defaults to false)" ilk="argument" name="allowFunctions" />
              <variable citdl="Function" doc="A function that can accept an item of the type(s) stored in this MixedCollection&#xA;and return the key value for that item.  This is used when available to look up the key on items that&#xA;were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is&#xA;equivalent to providing an implementation for the {@link #getKey} method." ilk="argument" name="keyFn" />
              <variable citdl="MixedCollection" name="this" />
            </scope>
            <variable citdl="Array" line="20" name="items" />
            <variable citdl="Object" line="21" lineend="21" name="map" />
            <variable citdl="Array" line="22" name="keys" />
            <variable citdl="Number" line="23" name="length" />
            <variable citdl="allowFunctions" line="55" name="allowFunctions" />
            <variable citdl="keyFn" line="57" name="getKey" />
            <scope doc="Adds an item to the collection. Fires the {@link #add} event when complete." ilk="function" line="75" lineend="92" name="add" returns="Object" signature="add(key, o)">
              <variable citdl="String" doc="The key to associate with the item, or the new item.&#xA;If you supplied a {@link #getKey} implementation for this MixedCollection, or if the key&#xA;of your stored items is in a property called id, then the MixedCollection&#xA;will be able to derive the key for the new item. In this case just pass the new item in&#xA;this parameter." ilk="argument" name="key" />
              <variable citdl="Object" doc="The item to add." ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this.map[key]" line="81" name="old" />
            </scope>
            <scope doc="MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation&#xA;simply returns item.id but you can provide your own implementation&#xA;to return a different value as in the following examples:&#xA;// normal way&#xA;var mc = new Ext.util.MixedCollection();&#xA;mc.add(someEl.dom.id, someEl);&#xA;mc.add(otherEl.dom.id, otherEl);&#xA;//and so on&#xA;// using getKey&#xA;var mc = new Ext.util.MixedCollection();&#xA;mc.getKey = function(el){&#xA;return el.dom.id;&#xA;mc.add(someEl);&#xA;mc.add(otherEl);&#xA;// or via the constructor&#xA;var mc = new Ext.util.MixedCollection(false, function(el){&#xA;return el.dom.id;&#xA;});&#xA;mc.add(someEl);&#xA;mc.add(otherEl);" ilk="function" line="123" lineend="125" name="getKey" returns="Object" signature="getKey(o)">
              <variable ilk="argument" name="o" />
            </scope>
            <scope doc="Replaces an item in the collection. Fires the {@link #replace} event when complete." ilk="function" line="138" lineend="152" name="replace" returns="Object" signature="replace(key, o)">
              <variable citdl="String" doc="The key associated with the item to replace, or the replacement item.&#xA;If you supplied a {@link #getKey} implementation for this MixedCollection, or if the key&#xA;of your stored items is in a property called id, then the MixedCollection&#xA;will be able to derive the key of the replacement item. If you want to replace an item&#xA;with one having the same key value, then just pass the replacement item in this parameter." ilk="argument" name="key" />
              <variable citdl="Object" doc="o (optional) If the first parameter passed was a key, the item to associate&#xA;with that key." ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this.map[key]" line="143" name="old" />
              <variable attributes="__local__ private" citdl="this.indexOfKey()" line="147" name="index" />
            </scope>
            <scope doc="Adds all elements of an Array or an Object to the collection." ilk="function" line="159" lineend="172" name="addAll" signature="addAll(objs)">
              <variable citdl="Object/Array" doc="An Object containing properties which will be added to the collection, or&#xA;an Array of values, each of which are added to the collection." ilk="argument" name="objs" />
              <variable attributes="__local__ private" citdl="arguments.length" line="161" name="args" />
            </scope>
            <scope doc="Executes the specified function once for every item in the collection, passing the following arguments:&#xA;&#xA;item : MixedThe collection item&#xA;index : NumberThe item&apos;s index&#xA;length : NumberThe total number of items in the collection&#xA;&#xA;The function should return a boolean value. Returning false from the function will stop the iteration." ilk="function" line="185" lineend="192" name="each" signature="each(fn, scope)">
              <variable citdl="Function" doc="The function to execute for each item." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the function." ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="Array" line="186" name="items" />
            </scope>
            <scope doc="Executes the specified function once for every key in the collection, passing each&#xA;key, and its associated item as the first two parameters." ilk="function" line="200" lineend="204" name="eachKey" signature="eachKey(fn, scope)">
              <variable citdl="Function" doc="The function to execute for each item." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the function." ilk="argument" name="scope" />
            </scope>
            <scope doc="Returns the first item in the collection which elicits a true return value from the&#xA;passed selection function." ilk="function" line="213" lineend="220" name="find" returns="Object" signature="find(fn, scope)">
              <variable citdl="Function" doc="The selection function to execute for each item." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the function." ilk="argument" name="scope" />
            </scope>
            <scope doc="Inserts an item at the specified index in the collection. Fires the {@link #add} event when complete." ilk="function" line="229" lineend="250" name="insert" returns="Object" signature="insert(index, key, o)">
              <variable citdl="Number" doc="The index to insert the item at." ilk="argument" name="index" />
              <variable citdl="String" doc="The key to associate with the new item, or the item itself." ilk="argument" name="key" />
              <variable citdl="Object" doc="(optional) If the second parameter was a key, the new item." ilk="argument" name="o" />
            </scope>
            <scope doc="Remove an item from the collection." ilk="function" line="257" lineend="259" name="remove" returns="Object" signature="remove(o)">
              <variable citdl="Object" doc="The item to remove." ilk="argument" name="o" />
            </scope>
            <scope doc="Remove an item from a specified index in the collection. Fires the {@link #remove} event when complete." ilk="function" line="266" lineend="280" name="removeAt" returns="Object" signature="removeAt(index)">
              <variable citdl="Number" doc="The index within the collection of the item to remove." ilk="argument" name="index" />
              <variable attributes="__local__ private" citdl="this.items[index]" line="269" name="o" />
              <variable attributes="__local__ private" citdl="this.keys[index]" line="271" name="key" />
            </scope>
            <scope doc="Removed an item associated with the passed key fom the collection." ilk="function" line="287" lineend="289" name="removeKey" returns="Object" signature="removeKey(key)">
              <variable citdl="String" doc="The key of the item to remove." ilk="argument" name="key" />
            </scope>
            <scope doc="Returns the number of items in the collection." ilk="function" line="295" lineend="297" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Returns index within the collection of the passed Object." ilk="function" line="304" lineend="306" name="indexOf" returns="Number" signature="indexOf(o)">
              <variable citdl="Object" doc="The item to find the index of." ilk="argument" name="o" />
            </scope>
            <scope doc="Returns index within the collection of the passed key." ilk="function" line="313" lineend="315" name="indexOfKey" returns="Number" signature="indexOfKey(key)">
              <variable citdl="String" doc="The key to find the index of." ilk="argument" name="key" />
            </scope>
            <scope doc="Returns the item associated with the passed key OR index. Key has priority over index.  This is the equivalent&#xA;of calling {@link #key} first, then if nothing matched calling {@link #itemAt}." ilk="function" line="324" lineend="328" name="item" returns="Object" signature="item(key)">
              <variable citdl="String/Number" doc="The key or index of the item." ilk="argument" name="key" />
              <variable attributes="__local__ private" citdl="mk" line="326" name="item" />
              <variable attributes="__local__ private" citdl="this.map[key]" line="326" name="mk" />
            </scope>
            <scope doc="Returns the item at the specified index." ilk="function" line="335" lineend="337" name="itemAt" returns="Object" signature="itemAt(index)">
              <variable citdl="Number" doc="The index of the item." ilk="argument" name="index" />
            </scope>
            <scope doc="Returns the item associated with the passed key." ilk="function" line="344" lineend="346" name="key" returns="Object" signature="key(key)">
              <variable citdl="String/Number" doc="The key of the item." ilk="argument" name="key" />
            </scope>
            <scope doc="Returns true if the collection contains the passed Object as an item." ilk="function" line="353" lineend="355" name="contains" returns="Boolean" signature="contains(o)">
              <variable citdl="Object" doc="The Object to look for in the collection." ilk="argument" name="o" />
            </scope>
            <scope doc="Returns true if the collection contains the passed Object as a key." ilk="function" line="362" lineend="364" name="containsKey" returns="Boolean" signature="containsKey(key)">
              <variable citdl="String" doc="The key to look for in the collection." ilk="argument" name="key" />
            </scope>
            <scope doc="Removes all items from the collection.  Fires the {@link #clear} event when complete." ilk="function" line="369" lineend="375" name="clear" signature="clear()" />
            <scope doc="Returns the first item in the collection." ilk="function" line="381" lineend="383" name="first" returns="Object" signature="first()" />
            <scope doc="Returns the last item in the collection." ilk="function" line="389" lineend="391" name="last" returns="Object" signature="last()" />
            <scope ilk="function" line="394" lineend="418" name="_sort" returns="a" signature="_sort(property, dir, fn)">
              <variable ilk="argument" name="property" />
              <variable ilk="argument" name="dir" />
              <variable citdl="fn" ilk="argument" name="fn" />
              <variable attributes="__local__ private" citdl="Array" line="398" name="c" />
              <variable attributes="__local__ private" line="398" name="i" />
              <variable attributes="__local__ private" citdl="this.items" line="398" name="items" />
              <variable attributes="__local__ private" citdl="this.keys" line="398" name="k" />
              <variable citdl="Object" line="398" name="String()">
                <variable attributes="__local__ private" line="398" name="toUpperCase()" />
              </variable>
              <variable attributes="__local__ private" line="398" name="len" />
              <variable attributes="__local__ private" citdl="String().toUpperCase()" line="398" name="dsc" />
            </scope>
            <scope doc="Sorts this collection with the passed comparison function" ilk="function" line="425" lineend="427" name="sort" signature="sort(dir, fn)">
              <variable ilk="argument" name="dir" />
              <variable citdl="Function" doc="(optional) comparison function" ilk="argument" name="fn" />
            </scope>
            <scope doc="Sorts this collection by keys" ilk="function" line="434" lineend="439" name="keySort" signature="keySort(dir, fn)">
              <variable ilk="argument" name="dir" />
              <variable citdl="Function" doc="(optional) a comparison function (defaults to case insensitive string)" ilk="argument" name="fn" />
            </scope>
            <scope doc="Returns a range of items in this collection" ilk="function" line="447" lineend="465" name="getRange" returns="Array" signature="getRange(start, end)">
              <variable citdl="start" ilk="argument" name="start" />
              <variable citdl="Math.min()" ilk="argument" name="end" />
              <variable attributes="__local__ private" citdl="this.items" line="448" name="items" />
              <variable attributes="__local__ private" line="454" name="i" />
              <variable attributes="__local__ private" citdl="Array" line="454" name="r" />
            </scope>
            <scope doc="Filter the objects in this collection by a specific property.&#xA;Returns a new collection that has been filtered." ilk="function" line="477" lineend="485" name="filter" returns="MixedCollection" signature="filter(property, value, anyMatch, caseSensitive)">
              <variable citdl="String" doc="A property on your objects" ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either string that the property values&#xA;should start with or a RegExp to test against the property" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="(optional) True to match any part of the string, not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison (defaults to False)." ilk="argument" name="caseSensitive" />
              <scope attributes="__local__ private" ilk="function" line="482" lineend="484" name="(anonymous)" returns="o" signature="(anonymous)()" />
            </scope>
            <scope doc="Filter by a function. Returns a new collection that has been filtered.&#xA;The passed function will be called with each object in the collection.&#xA;If the function returns true, the value is included otherwise it is filtered." ilk="function" line="495" lineend="505" name="filterBy" returns="MixedCollection" signature="filterBy(fn, scope)">
              <variable citdl="Function" doc="The function to be called, it will receive the args o (the object), k (the key)" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="Ext.util.MixedCollection" line="496" name="r" />
              <variable attributes="__local__ private" citdl="this.keys" line="498" name="k" />
              <variable attributes="__local__ private" citdl="this.items" line="498" name="it" />
            </scope>
            <scope doc="Finds the index of the first matching object in this collection by a specific property/value." ilk="function" line="517" lineend="525" name="findIndex" returns="Number" signature="findIndex(property, value, start, anyMatch, caseSensitive)">
              <variable citdl="String" doc="The name of a property on your objects." ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="A string that the property values&#xA;should start with or a RegExp to test against the property." ilk="argument" name="value" />
              <variable citdl="Number" doc="(optional) The index to start searching at (defaults to 0)." ilk="argument" name="start" />
              <variable citdl="Boolean" doc="(optional) True to match any part of the string, not just the beginning." ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison." ilk="argument" name="caseSensitive" />
              <scope attributes="__local__ private" ilk="function" line="522" lineend="524" name="(anonymous)" returns="o" signature="(anonymous)()" />
            </scope>
            <scope doc="Find the index of the first matching object in this collection by a function.&#xA;If the function returns true it is considered a match." ilk="function" line="535" lineend="543" name="findIndexBy" returns="Number" signature="findIndexBy(fn, scope, start)">
              <variable citdl="Function" doc="The function to be called, it will receive the args o (the object), k (the key)." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)." ilk="argument" name="scope" />
              <variable citdl="Number" doc="(optional) The index to start searching at (defaults to 0)." ilk="argument" name="start" />
              <variable attributes="__local__ private" citdl="this.keys" line="536" name="k" />
              <variable attributes="__local__ private" citdl="this.items" line="536" name="it" />
            </scope>
            <scope ilk="function" line="546" lineend="552" name="createValueMatcher" returns="value" signature="createValueMatcher(value, anyMatch, caseSensitive)">
              <variable citdl="RegExp" ilk="argument" name="value" />
              <variable ilk="argument" name="anyMatch" />
              <variable ilk="argument" name="caseSensitive" />
            </scope>
            <scope doc="Creates a shallow copy of this collection" ilk="function" line="558" lineend="566" name="clone" returns="MixedCollection" signature="clone()">
              <variable attributes="__local__ private" citdl="Ext.util.MixedCollection" line="559" name="r" />
              <variable attributes="__local__ private" citdl="this.keys" line="560" name="k" />
              <variable attributes="__local__ private" citdl="this.items" line="560" name="it" />
            </scope>
          </scope>
          <scope ilk="class" line="35" lineend="66" name="DelayedTask">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DelayedTask class provides a convenient way to &quot;buffer&quot; the execution of a method,&#xA;performing setTimeout where a new timeout cancels the old timeout. When called, the&#xA;task will wait the specified time period before executing. If durng that time period,&#xA;the task is called again, the original call will be cancelled. This continues so that&#xA;the function is only called a single time for each iteration.&#xA;This method is especially useful for things like detecting whether a user has finished&#xA;typing in a text field. An example would be performing validation on a keypress. You can&#xA;use this class to buffer the keypress events for a certain number of milliseconds, and&#xA;perform only if they stop for that amount of time.  Usage:&#xA;var task = new Ext.util.DelayedTask(function(){&#xA;alert(Ext.getDom(&apos;myInputField&apos;).value.length);&#xA;});&#xA;// Wait 500ms before calling our function. If the user presses another key&#xA;// during that 500ms, it will be cancelled and we&apos;ll wait another 500ms.&#xA;Ext.get(&apos;myInputField&apos;).on(&apos;keypress&apos;, function(){&#xA;task.{@link #delay}(500);&#xA;});&#xA;&#xA;Note that we are using a DelayedTask here to illustrate a point. The configuration&#xA;option buffer for {@link Ext.util.Observable#addListener addListener/on} will&#xA;also setup a delayed task for you to buffer events." ilk="function" line="35" lineend="68" name="DelayedTask" signature="DelayedTask(fn, scope, args)">
              <variable citdl="Function" doc="(optional) The default function to timeout" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The default scope of that timeout" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The default Array of arguments" ilk="argument" name="args" />
              <variable citdl="DelayedTask" name="this" />
              <scope attributes="__local__ private" ilk="function" line="38" lineend="42" name="call" signature="call()" />
              <variable attributes="__local__ private" citdl="this" line="38" name="me" />
              <variable attributes="__local__ private" citdl="setInterval()" line="38" name="id" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" doc="@class Ext.util.ClickRepeater&#xA;@extends Ext.util.Observable&#xA;A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the&#xA;mouse is pressed. The interval between firings may be specified in the config but&#xA;defaults to 20 milliseconds.&#xA;Optionally, a CSS class may be applied to the element during the time it is pressed.&#xA;@cfg {Mixed} el The element to act as a button.&#xA;@cfg {Number} delay The initial delay before the repeating event begins firing.&#xA;Similar to an autorepeat key delay.&#xA;@cfg {Number} interval The interval between firings of the &quot;click&quot; event. Default 20 ms.&#xA;@cfg {String} pressClass A CSS class name to be applied to the element while pressed.&#xA;@cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.&#xA;&quot;interval&quot; and &quot;delay&quot; are ignored.&#xA;@cfg {Boolean} preventDefault True to prevent the default click event&#xA;@cfg {Boolean} stopDefault True to stop the default click event&#xA;@history&#xA;2007-02-02 jvs Original code contributed by Nige &quot;Animal&quot; White&#xA;2007-02-02 jvs Renamed to ClickRepeater&#xA;2007-02-03 jvs Modifications for FF Mac and Safari&#xA;@constructor&#xA;@param {Mixed} el The element to listen on&#xA;@param {Object} config" ilk="class" line="37" lineend="90" name="ClickRepeater">
            <scope attributes="__ctor__" doc="@class Ext.util.ClickRepeater&#xA;@extends Ext.util.Observable&#xA;A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the&#xA;mouse is pressed. The interval between firings may be specified in the config but&#xA;defaults to 20 milliseconds.&#xA;Optionally, a CSS class may be applied to the element during the time it is pressed.&#xA;@cfg {Mixed} el The element to act as a button.&#xA;@cfg {Number} delay The initial delay before the repeating event begins firing.&#xA;Similar to an autorepeat key delay.&#xA;@cfg {Number} interval The interval between firings of the &quot;click&quot; event. Default 20 ms.&#xA;@cfg {String} pressClass A CSS class name to be applied to the element while pressed.&#xA;@cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.&#xA;&quot;interval&quot; and &quot;delay&quot; are ignored.&#xA;@cfg {Boolean} preventDefault True to prevent the default click event&#xA;@cfg {Boolean} stopDefault True to stop the default click event&#xA;@history&#xA;2007-02-02 jvs Original code contributed by Nige &quot;Animal&quot; White&#xA;2007-02-02 jvs Renamed to ClickRepeater&#xA;2007-02-03 jvs Modifications for FF Mac and Safari&#xA;@constructor&#xA;@param {Mixed} el The element to listen on&#xA;@param {Object} config" ilk="function" line="37" lineend="75" name="ClickRepeater" signature="ClickRepeater(el, config)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="config" />
              <variable citdl="ClickRepeater" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="38" name="el" />
            <variable citdl="Boolean" line="65" name="disabled" />
            <variable citdl="Number" line="78" name="interval" />
            <variable citdl="Number" line="79" name="delay" />
            <variable citdl="Boolean" line="80" name="preventDefault" />
            <variable citdl="Boolean" line="81" name="stopDefault" />
            <variable citdl="Number" line="82" name="timer" />
            <scope doc="Enables the repeater and allows events to fire." ilk="function" line="87" lineend="95" name="enable" signature="enable()" />
            <scope doc="Disables the repeater and stops events from firing." ilk="function" line="100" lineend="110" name="disable" signature="disable(force)">
              <variable ilk="argument" name="force" />
            </scope>
            <scope doc="Convenience function for setting disabled/enabled by boolean." ilk="function" line="116" lineend="118" name="setDisabled" signature="setDisabled(disabled)">
              <variable citdl="Boolean" ilk="argument" name="disabled" />
            </scope>
            <scope ilk="function" line="120" lineend="127" name="eventOptions" signature="eventOptions(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="130" lineend="134" name="destroy" signature="destroy()" />
            <scope ilk="function" line="137" lineend="156" name="handleMouseDown" signature="handleMouseDown()" />
            <variable citdl="Date" line="143" name="mousedownTime" />
            <scope ilk="function" line="159" lineend="167" name="click" signature="click()" />
            <scope ilk="function" line="169" lineend="171" name="easeOutExpo" signature="easeOutExpo(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
            </scope>
            <scope ilk="function" line="174" lineend="180" name="handleMouseOut" signature="handleMouseOut()" />
            <scope ilk="function" line="183" lineend="189" name="handleMouseReturn" signature="handleMouseReturn()" />
            <scope ilk="function" line="192" lineend="199" name="handleMouseUp" signature="handleMouseUp()" />
          </scope>
          <scope ilk="class" line="39" lineend="58" name="TaskRunner">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides the ability to execute one or more arbitrary tasks in a multithreaded&#xA;manner.  Generally, you can use the singleton {@link Ext.TaskMgr} instead, but&#xA;if needed, you can create separate instances of TaskRunner.  Any number of&#xA;separate tasks can be started at any time and will run independently of each&#xA;other. Example usage:&#xA;&#xA;// Start a simple clock task that updates a div once per second&#xA;var updateClock = function(){&#xA;Ext.fly(&apos;clock&apos;).update(new Date().format(&apos;g:i:s A&apos;));&#xA;var task = {&#xA;run: updateClock,&#xA;interval: 1000 //1 second&#xA;var runner = new Ext.util.TaskRunner();&#xA;runner.start(task);&#xA;// equivalent using TaskMgr&#xA;Ext.TaskMgr.start({&#xA;run: updateClock,&#xA;interval: 1000&#xA;});&#xA;&#xA;Also see {@link Ext.util.DelayedTask}." ilk="function" line="39" lineend="155" name="TaskRunner" signature="TaskRunner(interval)">
              <variable citdl="Number" doc="(optional) The minimum precision in milliseconds supported by this TaskRunner instance&#xA;(defaults to 10)" ilk="argument" name="interval" />
              <variable citdl="TaskRunner" name="this" />
              <scope attributes="__local__ private" ilk="function" line="47" lineend="51" name="stopThread" signature="stopThread()" />
              <variable attributes="__local__ private" citdl="Boolean" line="47" name="running" />
              <variable attributes="__local__ private" citdl="Array" line="47" name="tasks" />
              <variable attributes="__local__ private" citdl="Number" line="47" name="id" />
              <variable attributes="__local__ private" citdl="Array" line="47" name="removeQueue" />
              <scope attributes="__local__ private" ilk="function" line="54" lineend="59" name="startThread" signature="startThread()" />
              <scope attributes="__local__ private" ilk="function" line="62" lineend="67" name="removeTask" signature="removeTask(t)">
                <variable ilk="argument" name="t" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="70" lineend="99" name="runTasks" signature="runTasks()">
                <variable attributes="__local__ private" citdl="removeQueue.length" line="72" name="rqLen" />
                <variable attributes="__local__ private" citdl="Date" line="72" name="now" />
              </scope>
            </scope>
            <scope doc="Starts a new task." ilk="function" line="121" lineend="128" name="start" returns="Object" signature="start(task)">
              <variable citdl="Object" doc="A config object that supports the following properties:&#xA;run : FunctionThe function to execute each time the task is run. The&#xA;function will be called at each interval and passed the args argument if specified.  If a&#xA;particular scope is required, be sure to specify it using the scope argument.&#xA;interval : NumberThe frequency in milliseconds with which the task&#xA;should be executed.&#xA;args : Array(optional) An array of arguments to be passed to the function&#xA;specified by run.&#xA;scope : Object(optional) The scope (this reference) in which to execute the&#xA;run function. Defaults to the task config object.&#xA;duration : Number(optional) The length of time in milliseconds to execute&#xA;the task before stopping automatically (defaults to indefinite).&#xA;repeat : Number(optional) The number of times to execute the task before&#xA;stopping automatically (defaults to indefinite)." ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope doc="Stops an existing running task." ilk="function" line="136" lineend="139" name="stop" returns="Object" signature="stop(task)">
              <variable citdl="Object" doc="The task to stop" ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope doc="Stops all tasks that are currently running." ilk="function" line="145" lineend="154" name="stopAll" signature="stopAll()">
              <variable citdl="TaskRunner" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="73" name="Format">
            <scope ilk="function" line="93" lineend="97" name="date" returns="v.dateFormat()" signature="date(v, format)">
              <variable citdl="Date" ilk="argument" name="v" />
              <variable ilk="argument" name="format" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope ilk="function" line="103" lineend="119" name="brMoney" returns="String" signature="brMoney(v)">
              <variable citdl="whole" ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
              <variable attributes="__local__ private" citdl="v.split()" line="107" name="ps" />
              <variable attributes="__local__ private" citdl="ps[0]" line="108" name="whole" />
              <variable attributes="__local__ private" citdl="ps[1]" line="109" name="sub" />
              <variable attributes="__local__ private" line="110" name="r" />
            </scope>
          </variable>
          <variable citdl="Object" line="142" name="Observable">
            <variable citdl="Object" line="142" name="prototype">
              <scope ilk="function" line="72" lineend="77" name="beforeMethod" signature="beforeMethod(method, fn, scope)">
                <variable ilk="argument" name="method" />
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable citdl="prototype" name="this" />
              </scope>
              <scope ilk="function" line="80" lineend="85" name="afterMethod" signature="afterMethod(method, fn, scope)">
                <variable ilk="argument" name="method" />
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable citdl="prototype" name="this" />
              </scope>
              <scope ilk="function" line="87" lineend="104" name="removeMethodListener" signature="removeMethodListener(method, fn, scope)">
                <variable ilk="argument" name="method" />
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable citdl="prototype" name="this" />
                <variable attributes="__local__ private" citdl="Boolean" line="88" name="found" />
                <variable attributes="__local__ private" citdl="getMethodEvent.call()" line="88" name="e" />
              </scope>
              <scope doc="Relays selected events from the specified Observable as if the events were fired by this." ilk="function" line="111" lineend="122" name="relayEvents" signature="relayEvents(o, events)">
                <variable citdl="Object" doc="The Observable whose events this object is to relay." ilk="argument" name="o" />
                <variable citdl="Array" doc="Array of event names to relay." ilk="argument" name="events" />
                <variable citdl="prototype" name="this" />
                <variable attributes="__local__ private" citdl="this" line="112" name="me" />
                <scope attributes="__local__ private" ilk="function" line="113" lineend="117" name="createHandler" returns="me.fireEvent.apply()" signature="createHandler(ename)">
                  <variable ilk="argument" name="ename" />
                </scope>
                <scope attributes="__local__ private" ilk="function" line="118" lineend="121" name="(anonymous)" signature="(anonymous)()" />
              </scope>
              <scope doc="Used to enable bubbling of events" ilk="function" line="128" lineend="140" name="enableBubble" signature="enableBubble(events)">
                <variable citdl="Object" ilk="argument" name="events" />
                <variable citdl="prototype" name="this" />
                <variable attributes="__local__ private" citdl="this" line="129" name="me" />
                <scope attributes="__local__ private" ilk="function" line="131" lineend="139" name="(anonymous)" signature="(anonymous)()">
                  <variable attributes="__local__ private" citdl="me.events[ename]" line="133" name="ce" />
                </scope>
              </scope>
            </variable>
            <scope attributes="__static__" doc="STATIC: Sets observability on the passed class constructor.&#xA;This makes any event fired on any instance of the passed class also fire a single event through&#xA;the class allowing for central handling of events on many instances at once.&#xA;Usage:&#xA;Ext.util.Observable.observeClass(Ext.data.Connection);&#xA;Ext.data.Connection.on(&apos;beforerequest&apos;, function(con, options) {&#xA;console.log(&quot;Ajax request made to &quot; + options.url);&#xA;});" ilk="function" line="172" lineend="178" name="observeClass" signature="observeClass(c)">
              <variable citdl="Function" doc="The class constructor to make observable." ilk="argument" name="c" />
              <variable citdl="Observable" name="this" />
            </scope>
          </variable>
          <variable doc="Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t&#xA;mess with the Object prototype&#xA;http://www.json.org/js.html" line="157" name="JSON" />
        </variable>
        <scope ilk="class" line="38" lineend="49" name="MessageBox">
          <variable citdl="Object" line="38" lineend="620" name="MessageBox">
            <scope doc="Returns a reference to the underlying {@link Ext.Window} element" ilk="function" line="101" lineend="165" name="getDialog" returns="Ext.Window" signature="getDialog(titleText)">
              <variable ilk="argument" name="titleText" />
              <variable citdl="MessageBox" name="this" />
              <variable citdl="Object" line="129" lineend="129" name="buttons">
                <variable citdl="dlg.addButton()" line="132" name="ok" />
                <variable citdl="dlg.addButton()" line="133" name="yes" />
                <variable citdl="dlg.addButton()" line="134" name="no" />
                <variable citdl="dlg.addButton()" line="135" name="cancel" />
              </variable>
              <variable attributes="__local__ private" citdl="this.buttonText" line="130" name="bt" />
              <variable attributes="__local__ private" citdl="bodyEl.dom.childNodes[1]" line="144" name="contentEl" />
              <scope attributes="__local__ private" ilk="function" line="148" lineend="156" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Updates the message box body text" ilk="function" line="173" lineend="202" name="updateText" returns="Ext.MessageBox" signature="updateText(text)">
              <variable citdl="String" doc="(optional) Replaces the message box element&apos;s innerHTML with the specified string (defaults to&#xA;the XHTML-compliant non-breaking space character &apos;&amp;amp;#160;&apos;)" ilk="argument" name="text" />
              <variable citdl="MessageBox" name="this" />
              <variable attributes="__local__ private" citdl="iconCls" line="179" name="iw" />
              <variable attributes="__local__ private" citdl="msgEl.getWidth()" line="180" name="mw" />
              <variable attributes="__local__ private" citdl="dlg.getFrameWidth()" line="181" name="fw" />
              <variable attributes="__local__ private" citdl="dlg.body.getFrameWidth()" line="182" name="bw" />
              <variable attributes="__local__ private" citdl="Math.max()" line="189" name="w" />
            </scope>
            <scope doc="Updates a progress-style message box&apos;s text and progress bar. Only relevant on message boxes&#xA;initiated via {@link Ext.MessageBox#progress} or {@link Ext.MessageBox#wait},&#xA;or by calling {@link Ext.MessageBox#show} with progress: true." ilk="function" line="214" lineend="220" name="updateProgress" returns="Ext.MessageBox" signature="updateProgress(value, progressText, msg)">
              <variable citdl="Number" doc="Any number between 0 and 1 (e.g., .5, defaults to 0)" ilk="argument" name="value" />
              <variable citdl="String" doc="The progress text to display inside the progress bar (defaults to &apos;&apos;)" ilk="argument" name="progressText" />
              <variable citdl="String" doc="The message box&apos;s body text is replaced with the specified string (defaults to undefined&#xA;so that any existing body text will not get overwritten by default unless a new value is passed in)" ilk="argument" name="msg" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Returns true if the message box is currently displayed" ilk="function" line="226" lineend="228" name="isVisible" returns="Boolean" signature="isVisible()">
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Hides the message box if it is displayed" ilk="function" line="234" lineend="246" name="hide" returns="Ext.MessageBox" signature="hide()">
              <variable citdl="MessageBox" name="this" />
              <variable attributes="__local__ private" citdl="dlg" line="235" name="proxy" />
            </scope>
            <scope doc="Displays a new message box, or reinitializes an existing message box, based on the config options&#xA;passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,&#xA;although those calls are basic shortcuts and do not support all of the config options allowed here.&#xA;&#xA;&#xA;&#xA;&#xA;Ext.Msg.show({&#xA;title: &apos;Address&apos;,&#xA;msg: &apos;Please enter your address:&apos;,&#xA;width: 300,&#xA;buttons: Ext.MessageBox.OKCANCEL,&#xA;multiline: true,&#xA;fn: saveAddress,&#xA;animEl: &apos;addAddressBtn&apos;,&#xA;icon: Ext.MessageBox.INFO&#xA;});" ilk="function" line="317" lineend="391" name="show" returns="Ext.MessageBox" signature="show(options)">
              <variable ilk="argument" name="options" />
              <variable citdl="MessageBox" name="this" />
              <variable attributes="__local__ private" citdl="this.getDialog()" line="322" name="d" />
              <variable attributes="__local__ private" line="325" name="allowClose" />
              <variable attributes="__local__ private" citdl="opt.buttons" line="348" name="bs" />
              <variable attributes="__local__ private" citdl="buttons[&quot;ok&quot;]" line="349" name="db" />
              <scope attributes="__local__ private" ilk="function" line="370" lineend="383" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Adds the specified icon to the dialog.  By default, the class &apos;ext-mb-icon&apos; is applied for default&#xA;styling, and the class passed in is expected to supply the background image url. Pass in empty string (&apos;&apos;)&#xA;to clear any existing icon.  The following built-in icon classes are supported, but you can also pass&#xA;in a custom class name:&#xA;&#xA;Ext.MessageBox.INFO&#xA;Ext.MessageBox.WARNING&#xA;Ext.MessageBox.QUESTION&#xA;Ext.MessageBox.ERROR" ilk="function" line="407" lineend="419" name="setIcon" returns="Ext.MessageBox" signature="setIcon(icon)">
              <variable citdl="String" doc="A CSS classname specifying the icon&apos;s background image url, or empty string to clear the icon" ilk="argument" name="icon" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a message box with a progress bar.  This message box has no buttons and is not closeable by&#xA;the user.  You are responsible for updating the progress bar as needed via {@link Ext.MessageBox#updateProgress}&#xA;and closing the message box when the process is complete." ilk="function" line="430" lineend="441" name="progress" returns="Ext.MessageBox" signature="progress(title, msg, progressText)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="String" doc="(optional) The text to display inside the progress bar (defaults to &apos;&apos;)" ilk="argument" name="progressText" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user&#xA;interaction while waiting for a long-running process to complete that does not have defined intervals.&#xA;You are responsible for closing the message box when the process is complete." ilk="function" line="452" lineend="464" name="wait" returns="Ext.MessageBox" signature="wait(msg, title, config)">
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="String" doc="(optional) The title bar text" ilk="argument" name="title" />
              <variable citdl="Object" doc="(optional) A {@link Ext.ProgressBar#waitConfig} object" ilk="argument" name="config" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).&#xA;If a callback function is passed it will be called after the user clicks the button, and the&#xA;id of the button that was clicked will be passed as the only parameter to the callback&#xA;(could also be the top-right close button)." ilk="function" line="477" lineend="486" name="alert" returns="Ext.MessageBox" signature="alert(title, msg, fn, scope)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a confirmation message box with Yes and No buttons (comparable to JavaScript&apos;s confirm).&#xA;If a callback function is passed it will be called after the user clicks either button,&#xA;and the id of the button that was clicked will be passed as the only parameter to the callback&#xA;(could also be the top-right close button)." ilk="function" line="499" lineend="509" name="confirm" returns="Ext.MessageBox" signature="confirm(title, msg, fn, scope)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript&apos;s prompt).&#xA;The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user&#xA;clicks either button, and the id of the button that was clicked (could also be the top-right&#xA;close button) and the text that was entered will be passed as the two parameters to the callback." ilk="function" line="525" lineend="538" name="prompt" returns="Ext.MessageBox" signature="prompt(title, msg, fn, scope, multiline, value)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
              <variable citdl="Boolean/Number" doc="(optional) True to create a multiline textbox using the defaultTextHeight&#xA;property, or the height in pixels to create the textbox (defaults to false / single-line)" ilk="argument" name="multiline" />
              <variable citdl="String" doc="(optional) Default value of the text input element (defaults to &apos;&apos;)" ilk="argument" name="value" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <variable citdl="Object" doc="Button config that displays a single OK button" line="544" lineend="544" name="OK">
              <variable citdl="Boolean" line="544" name="ok" />
            </variable>
            <variable citdl="Object" doc="Button config that displays a single Cancel button" line="549" lineend="549" name="CANCEL">
              <variable citdl="Boolean" line="549" name="cancel" />
            </variable>
            <variable citdl="Object" doc="Button config that displays OK and Cancel buttons" line="554" lineend="554" name="OKCANCEL">
              <variable citdl="Boolean" line="554" name="cancel" />
              <variable citdl="Boolean" line="554" name="ok" />
            </variable>
            <variable citdl="Object" doc="Button config that displays Yes and No buttons" line="559" lineend="559" name="YESNO">
              <variable citdl="Boolean" line="559" name="yes" />
              <variable citdl="Boolean" line="559" name="no" />
            </variable>
            <variable citdl="Object" doc="Button config that displays Yes, No and Cancel buttons" line="564" lineend="564" name="YESNOCANCEL">
              <variable citdl="Boolean" line="564" name="cancel" />
              <variable citdl="Boolean" line="564" name="yes" />
              <variable citdl="Boolean" line="564" name="no" />
            </variable>
            <variable citdl="String" doc="The CSS class that provides the INFO icon image" line="569" name="INFO" />
            <variable citdl="String" doc="The CSS class that provides the WARNING icon image" line="574" name="WARNING" />
            <variable citdl="String" doc="The CSS class that provides the QUESTION icon image" line="579" name="QUESTION" />
            <variable citdl="String" doc="The CSS class that provides the ERROR icon image" line="584" name="ERROR" />
            <variable citdl="Number" doc="The default height in pixels of the message box&apos;s multiline textarea if displayed (defaults to 75)" line="590" name="defaultTextHeight" />
            <variable citdl="Number" doc="The maximum width in pixels of the message box (defaults to 600)" line="595" name="maxWidth" />
            <variable citdl="Number" doc="The minimum width in pixels of the message box (defaults to 110)" line="600" name="minWidth" />
            <variable citdl="Number" doc="The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful&#xA;for setting a different minimum width than text-only dialogs may need (defaults to 250)" line="606" name="minProgressWidth" />
            <variable citdl="Object" doc="An object containing the default button text strings that can be overriden for localized language support.&#xA;Supported properties are: ok, cancel, yes and no.  Generally you should include a locale-specific&#xA;resource file for handling language support across the framework.&#xA;Customize the default text like so: Ext.MessageBox.buttonText.yes = &quot;oui&quot;; //french" line="614" lineend="619" name="buttonText">
              <variable citdl="String" line="615" name="ok" />
              <variable citdl="String" line="616" name="cancel" />
              <variable citdl="String" line="617" name="yes" />
              <variable citdl="String" line="618" name="no" />
            </variable>
          </variable>
        </scope>
        <scope ilk="function" line="40" lineend="42" name="extendX" returns="Ext.extend()" signature="extendX(supr, fn)">
          <variable ilk="argument" name="supr" />
          <variable ilk="argument" name="fn" />
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Ext.util.Observable" ilk="class" line="47" lineend="170" name="Resizable">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Applies drag handles to an element to make it resizable. The drag handles are inserted into the element&#xA;and positioned absolute. Some elements, such as a textarea or image, don&apos;t support this. To overcome that, you can wrap&#xA;the textarea in a div and set &apos;resizeChild&apos; to true (or to the id of the element), or set wrap:true in your config and&#xA;the element will be wrapped for you automatically.&#xA;Here is the list of valid resize handles:&#xA;&#xA;Value   Description&#xA;------  -------------------&#xA;&apos;n&apos;     north&#xA;&apos;s&apos;     south&#xA;&apos;e&apos;     east&#xA;&apos;w&apos;     west&#xA;&apos;nw&apos;    northwest&#xA;&apos;sw&apos;    southwest&#xA;&apos;se&apos;    southeast&#xA;&apos;ne&apos;    northeast&#xA;&apos;all&apos;   all&#xA;Here&apos;s an example showing the creation of a typical Resizable:&#xA;&#xA;var resizer = new Ext.Resizable(&apos;element-id&apos;, {&#xA;handles: &apos;all&apos;,&#xA;minWidth: 200,&#xA;minHeight: 100,&#xA;maxWidth: 500,&#xA;maxHeight: 400,&#xA;pinned: true&#xA;});&#xA;resizer.on(&apos;resize&apos;, myHandler);&#xA;To hide a particular handle, set its display to none in CSS, or through script:&#xA;resizer.east.setDisplayed(false);" ilk="function" line="47" lineend="170" name="Resizable" signature="Resizable(el, config)">
            <variable citdl="Mixed" doc="The id or element to resize" ilk="argument" name="el" />
            <variable citdl="Object" doc="configuration options" ilk="argument" name="config" />
            <variable citdl="Resizable" name="this" />
            <variable attributes="__local__ private" citdl="config.resizeChild.getSize()" line="58" name="csize" />
            <variable attributes="__local__ private" citdl="this.el.getStyle()" line="84" name="position" />
            <variable attributes="__local__ private" citdl="this.handles.split()" line="97" name="hs" />
            <variable attributes="__local__ private" citdl="Ext.Resizable.positions" line="98" name="ps" />
            <variable attributes="__local__ private" citdl="ps[hs[i]]" line="101" name="pos" />
            <variable attributes="__local__ private" citdl="this.resizeChild" line="123" name="rc" />
            <variable attributes="__local__ private" citdl="this.west" line="124" name="hw" />
            <variable attributes="__local__ private" citdl="this.north" line="124" name="hn" />
            <variable attributes="__local__ private" citdl="this.east" line="124" name="he" />
          </scope>
          <variable citdl="Ext.get()" line="48" name="el" />
          <variable citdl="Ext.Element." doc="The proxy Element that is resized in place of the real Element during the resize operation.&#xA;This may be queried using {@link Ext.Element#getBox} to provide the new area to resize to.&#xA;Read only." line="73" name="proxy" />
          <variable citdl="Boolean" line="80" name="disableTrackOver" />
          <variable citdl="String" line="89" name="handles" />
          <variable citdl="this.southeast" line="106" name="corner" />
          <variable citdl="Boolean" line="109" name="updateBox" />
          <variable line="112" name="activeHandle" />
          <variable citdl="Ext.get()" line="116" name="resizeChild" />
          <variable citdl="Array" line="131" name="adjustments" />
          <variable citdl="this.dynamic" line="137" name="dd" />
          <variable citdl="Object" line="706" lineend="708" name="positions">
            <variable citdl="String" line="707" name="e" />
            <variable citdl="String" line="707" name="sw" />
            <variable citdl="String" line="707" name="ne" />
            <variable citdl="String" line="707" name="n" />
            <variable citdl="String" line="707" name="s" />
            <variable citdl="String" line="707" name="w" />
            <variable citdl="String" line="707" name="se" />
            <variable citdl="String" line="707" name="nw" />
          </variable>
          <scope classrefs="Object" ilk="class" line="711" lineend="760" name="Handle">
            <scope attributes="__ctor__" ilk="function" line="711" lineend="735" name="Handle" signature="Handle(rz, pos, disableTrackOver, transparent)">
              <variable ilk="argument" name="rz" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="disableTrackOver" />
              <variable ilk="argument" name="transparent" />
              <variable citdl="Handle" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomHelper.createTemplate()" line="716" name="tpl" />
            </scope>
            <variable citdl="pos" line="720" name="position" />
            <variable citdl="rz" line="721" name="rz" />
            <variable citdl="this.tpl.append()" line="722" name="el" />
            <scope ilk="function" line="740" lineend="742" name="afterResize" signature="afterResize(rz)">
              <variable ilk="argument" name="rz" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="744" lineend="746" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="748" lineend="750" name="onMouseOver" signature="onMouseOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="752" lineend="754" name="onMouseOut" signature="onMouseOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="756" lineend="759" name="destroy" signature="destroy()">
              <variable citdl="Handle" name="this" />
            </scope>
          </scope>
        </scope>
        <scope doc="Returns the current HTML document object as an {@link Ext.Element}." ilk="function" line="48" lineend="50" name="getDoc" returns="Ext.get()" signature="getDoc()">
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Error" ilk="class" line="49" lineend="52" name="Error">
          <scope attributes="__ctor__" doc="A base error class. Future implementations are intended to provide more&#xA;robust error handling throughout the framework (in the debug build only)&#xA;to check for common errors and problems. The messages issued by this class&#xA;will aid error checking. Error checks will be automatically removed in the&#xA;production build so that performance is not negatively impacted.&#xA;Some sample messages currently implemented:&#xA;&quot;DataProxy attempted to execute an API-action but found an undefined&#xA;url / function. Please review your Proxy url/api-configuration.&quot;&#xA;&#xA;&quot;Could not locate your &quot;root&quot; property in your server response.&#xA;Please review your JsonReader config to ensure the config-property&#xA;&quot;root&quot; matches the property your server-response.  See the JsonReader&#xA;docs for additional assistance.&quot;&#xA;&#xA;An example of the code used for generating error messages:&#xA;try {&#xA;generateError({&#xA;foo: &apos;bar&apos;&#xA;});&#xA;catch (e) {&#xA;console.error(e);&#xA;function generateError(data) {&#xA;throw new Ext.Error(&apos;foo-error&apos;, data);" ilk="function" line="49" lineend="52" name="Error" signature="Error(message)">
            <variable citdl="String" ilk="argument" name="message" />
            <variable citdl="Error" name="this" />
          </scope>
          <variable line="51" name="message" />
          <variable citdl="Object" line="80" name="prototype">
            <variable citdl="Object" line="56" lineend="56" name="lang" />
            <variable citdl="String" line="58" name="name" />
            <scope doc="getName" ilk="function" line="63" lineend="65" name="getName" returns="String" signature="getName()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="getMessage" ilk="function" line="70" lineend="72" name="getMessage" returns="String" signature="getMessage()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="toJson" ilk="function" line="77" lineend="79" name="toJson" returns="String" signature="toJson()">
              <variable citdl="prototype" name="this" />
            </scope>
          </variable>
        </scope>
        <variable citdl="Boolean" line="56" name="enableFx" />
        <scope doc="Returns true if the passed object is a JavaScript date object, otherwise false." ilk="function" line="57" lineend="59" name="isDate" returns="Boolean" signature="isDate(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Object" ilk="class" line="60" lineend="252" name="Action">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it&#xA;can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI&#xA;updates across any components that support the Action interface (primarily {@link Ext.Toolbar}, {@link Ext.Button}&#xA;and {@link Ext.menu.Menu} components).&#xA;Aside from supporting the config object interface, any component that needs to use Actions must also support&#xA;the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),&#xA;setDisabled(boolean), setVisible(boolean) and setHandler(function).&#xA;Example usage:&#xA;&#xA;// Define the shared action.  Each component below will have the same&#xA;// display text and icon, and will display the same message on click.&#xA;var action = new Ext.Action({&#xA;{@link #text}: &apos;Do something&apos;,&#xA;{@link #handler}: function(){&#xA;Ext.Msg.alert(&apos;Click&apos;, &apos;You did something.&apos;);&#xA;{@link #iconCls}: &apos;do-something&apos;,&#xA;{@link #itemId}: &apos;myAction&apos;&#xA;});&#xA;var panel = new Ext.Panel({&#xA;title: &apos;Actions&apos;,&#xA;width: 500,&#xA;height: 300,&#xA;tbar: [&#xA;// Add the action directly to a toolbar as a menu button&#xA;action,&#xA;text: &apos;Action Menu&apos;,&#xA;// Add the action to a menu as a text item&#xA;menu: [action]&#xA;items: [&#xA;// Add the action to the panel body as a standard button&#xA;new Ext.Button(action)&#xA;renderTo: Ext.getBody()&#xA;});&#xA;// Change the text for all components using the action&#xA;action.setText(&apos;Something else&apos;);&#xA;// Reference an action through a container using the itemId&#xA;var btn = panel.getComponent(&apos;myAction&apos;);&#xA;var aRef = btn.baseAction;&#xA;aRef.setText(&apos;New text&apos;);" ilk="function" line="60" lineend="64" name="Action" signature="Action(config)">
            <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="config" line="61" name="initialConfig" />
          <variable citdl="config.itemId" line="62" name="itemId" />
          <variable citdl="Array" line="63" name="items" />
          <variable citdl="Boolean" doc="The CSS class selector that specifies a background image to be used as the header icon for&#xA;all components using this action (defaults to &apos;&apos;).&#xA;An example of specifying a custom icon class would be something like:&#xA;&#xA;// specify the property in the config for the class:&#xA;...&#xA;iconCls: &apos;do-something&apos;&#xA;// css class that specifies background image to be used as the icon image:&#xA;.do-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }&#xA;*/// private" line="103" name="isAction" />
          <scope doc="Sets the text to be displayed by all components using this action." ilk="function" line="109" lineend="112" name="setText" signature="setText(text)">
            <variable citdl="String" doc="The text to display" ilk="argument" name="text" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Gets the text currently displayed by all components using this action." ilk="function" line="117" lineend="119" name="getText" returns="this.initialConfig.text" signature="getText()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the icon CSS class for all components using this action.  The class should supply&#xA;a background image that will be used as the icon image." ilk="function" line="126" lineend="129" name="setIconClass" signature="setIconClass(cls)">
            <variable citdl="String" doc="The CSS class supplying the icon image" ilk="argument" name="cls" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Gets the icon CSS class currently used by all components using this action." ilk="function" line="134" lineend="136" name="getIconClass" returns="this.initialConfig.iconCls" signature="getIconClass()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the disabled state of all components using this action.  Shortcut method&#xA;for {@link #enable} and {@link #disable}." ilk="function" line="143" lineend="146" name="setDisabled" signature="setDisabled(v)">
            <variable ilk="argument" name="v" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Enables all components using this action." ilk="function" line="151" lineend="153" name="enable" signature="enable()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Disables all components using this action." ilk="function" line="158" lineend="160" name="disable" signature="disable()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Returns true if the components using this action are currently disabled, else returns false." ilk="function" line="165" lineend="167" name="isDisabled" returns="this.initialConfig.disabled" signature="isDisabled()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the hidden state of all components using this action.  Shortcut method&#xA;for {@link #hide} and {@link #show}." ilk="function" line="174" lineend="177" name="setHidden" signature="setHidden(v)">
            <variable ilk="argument" name="v" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Shows all components using this action." ilk="function" line="182" lineend="184" name="show" signature="show()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Hides all components using this action." ilk="function" line="189" lineend="191" name="hide" signature="hide()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Returns true if the components using this action are currently hidden, else returns false." ilk="function" line="196" lineend="198" name="isHidden" returns="this.initialConfig.hidden" signature="isHidden()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the function that will be called by each component using this action when its primary event is triggered." ilk="function" line="206" lineend="210" name="setHandler" signature="setHandler(fn, scope)">
            <variable citdl="Function" doc="The function that will be invoked by the action&apos;s components.  The function&#xA;will be called with no arguments." ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope in which the function will execute" ilk="argument" name="scope" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Executes the specified function once for each component currently tied to this action.  The function passed&#xA;in should accept a single argument that will be an object that supports the basic Action config/method interface." ilk="function" line="218" lineend="220" name="each" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to execute for each component" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope in which the function will execute" ilk="argument" name="scope" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope ilk="function" line="223" lineend="228" name="callEach" signature="callEach(fnName, args)">
            <variable ilk="argument" name="fnName" />
            <variable ilk="argument" name="args" />
            <variable citdl="Action" name="this" />
            <variable attributes="__local__ private" citdl="this.items" line="224" name="cs" />
          </scope>
          <scope ilk="function" line="231" lineend="234" name="addComponent" signature="addComponent(comp)">
            <variable ilk="argument" name="comp" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope ilk="function" line="237" lineend="239" name="removeComponent" signature="removeComponent(comp)">
            <variable ilk="argument" name="comp" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Executes this action manually using the handler function specified in the original config object&#xA;or the handler function set with {@link #setHandler}.  Any arguments passed to this&#xA;function will be passed on to the handler function." ilk="function" line="249" lineend="251" name="execute" signature="execute()">
            <variable citdl="Action" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="64" name="MessageBox">
          <variable citdl="Object" line="64" lineend="89" name="buttonText">
            <variable citdl="String" line="65" name="ok" />
            <variable citdl="String" line="66" name="cancel" />
            <variable citdl="String" line="67" name="yes" />
            <variable citdl="String" line="68" name="no" />
          </variable>
        </variable>
        <scope doc="Utility method for validating that a value is numeric, returning the specified default value if it is not." ilk="function" line="67" lineend="70" name="num" returns="Number" signature="num(v, defaultValue)">
          <variable citdl="Number()" ilk="argument" name="v" />
          <variable citdl="Number" doc="The value to return if the original value is non-numeric" ilk="argument" name="defaultValue" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Object" line="70" name="ListView">
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Supporting Class for Ext.ListView." line="70" name="Sorter" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Supporting Class for Ext.ListView." line="123" name="ColumnResizer" />
        </variable>
        <scope ilk="class" line="72" lineend="101" name="DomQuery">
          <variable citdl="Object" line="72" lineend="815" name="DomQuery">
            <scope ilk="function" line="386" lineend="388" name="getStyle" returns="Ext.fly().getStyle()" signature="getStyle(el, name)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="name" />
              <variable citdl="DomQuery" name="this" />
            </scope>
            <scope doc="Compiles a selector/xpath query into a reusable function. The returned function&#xA;takes one parameter &quot;root&quot; (optional), which is the context node from where the query should start." ilk="function" line="396" lineend="467" name="compile" returns="Function" signature="compile(path, type)">
              <variable citdl="path.substr()" ilk="argument" name="path" />
              <variable citdl="String" doc="(optional) Either &quot;select&quot; (the default) or &quot;simple&quot; for a simple selector match" ilk="argument" name="type" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="q.match()" line="405" name="lmode" />
              <variable attributes="__local__ private" line="405" name="mm" />
              <variable attributes="__local__ private" citdl="path" line="405" name="q" />
              <variable attributes="__local__ private" citdl="tk.length" line="405" name="tklen" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.matchers" line="405" name="tk" />
              <variable attributes="__local__ private" citdl="q" line="405" name="lq" />
              <variable attributes="__local__ private" citdl="Array" line="405" name="fn" />
              <variable attributes="__local__ private" line="405" name="mode" />
              <variable attributes="__local__ private" citdl="q.match()" line="418" name="tm" />
              <variable attributes="__local__ private" citdl="Boolean" line="441" name="matched" />
              <variable attributes="__local__ private" citdl="tk[j]" line="443" name="t" />
              <variable attributes="__local__ private" citdl="q.match()" line="444" name="m" />
            </scope>
            <scope doc="Selects a group of elements." ilk="function" line="476" lineend="502" name="select" returns="Array" signature="select(path, root, type)">
              <variable ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable ilk="argument" name="type" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="path.split()" line="484" name="paths" />
              <variable attributes="__local__ private" citdl="Array" line="484" name="results" />
              <variable attributes="__local__ private" citdl="paths[i].replace()" line="486" name="p" />
              <variable attributes="__local__ private" citdl="cache[p]()" line="493" name="result" />
            </scope>
            <scope doc="Selects a single element." ilk="function" line="510" lineend="512" name="selectNode" returns="Element" signature="selectNode(path, root)">
              <variable ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable citdl="DomQuery" name="this" />
            </scope>
            <scope doc="Selects the value of a node, optionally replacing null with the defaultValue." ilk="function" line="521" lineend="531" name="selectValue" returns="String" signature="selectValue(path, root, defaultValue)">
              <variable citdl="path.replace()" ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable citdl="String" ilk="argument" name="defaultValue" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" line="527" name="v" />
              <variable attributes="__local__ private" citdl="valueCache[path]()" line="527" name="n" />
            </scope>
            <scope doc="Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified." ilk="function" line="540" lineend="543" name="selectNumber" returns="Number" signature="selectNumber(path, root, defaultValue)">
              <variable ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable citdl="Number" ilk="argument" name="defaultValue" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.selectValue()" line="541" name="v" />
            </scope>
            <scope doc="Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="551" lineend="558" name="is" returns="Boolean" signature="is(el, ss)">
              <variable citdl="String/HTMLElement/Array" doc="An element id, element or array of elements" ilk="argument" name="el" />
              <variable ilk="argument" name="ss" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="Ext.isArray()" line="556" name="isArray" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.filter()" line="556" name="result" />
            </scope>
            <scope doc="Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="569" lineend="576" name="filter" returns="Array" signature="filter(els, ss, nonMatches)">
              <variable ilk="argument" name="els" />
              <variable citdl="ss.replace()" ilk="argument" name="ss" />
              <variable citdl="Boolean" doc="If true, it returns the elements that DON&apos;T match&#xA;the selector instead of the ones that match" ilk="argument" name="nonMatches" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="simpleCache[ss]()" line="574" name="result" />
            </scope>
            <variable citdl="Array" doc="Collection of matching regular expressions and code snippets." line="581" name="matchers" />
            <variable line="582" name="re" />
            <variable citdl="String" line="583" name="select" />
            <variable citdl="Object" doc="Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.&#xA;New operators can be added as long as the match the format c= where c is any character other than space, &amp;gt; &amp;lt;." line="603" lineend="628" name="operators">
              <scope ilk="function" line="604" lineend="606" name="=" returns="a" signature="=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="607" lineend="609" name="!=" returns="a" signature="!=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="610" lineend="612" name="^=" returns="a" signature="^=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="613" lineend="615" name="$=" returns="a" signature="$=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="616" lineend="618" name="*=" returns="a" signature="*=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="619" lineend="621" name="%=" signature="%=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="622" lineend="624" name="|=" returns="a" signature="|=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="625" lineend="627" name="~=" returns="a" signature="~=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" doc="Collection of &quot;pseudo class&quot; processors. Each processor is passed the current nodeset (array)&#xA;and the argument (if any) supplied in the selector." line="634" lineend="814" name="pseudos">
              <scope ilk="function" line="635" lineend="644" name="first-child" returns="r" signature="first-child(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="636" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="636" name="ri" />
                <variable attributes="__local__ private" line="636" name="n" />
              </scope>
              <scope ilk="function" line="646" lineend="655" name="last-child" returns="r" signature="last-child(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="647" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="647" name="ri" />
                <variable attributes="__local__ private" line="647" name="n" />
              </scope>
              <scope ilk="function" line="657" lineend="682" name="nth-child" returns="r" signature="nth-child(c, a)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="a" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" line="660" name="f" />
                <variable attributes="__local__ private" citdl="nthRe.exec()" line="660" name="m" />
                <variable attributes="__local__ private" citdl="m[2]" line="660" name="l" />
                <variable attributes="__local__ private" citdl="Array" line="660" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="660" name="ri" />
                <variable attributes="__local__ private" citdl="n.parentNode" line="662" name="pn" />
                <variable attributes="__local__ private" citdl="Number" line="664" name="j" />
              </scope>
              <scope ilk="function" line="684" lineend="692" name="only-child" returns="r" signature="only-child(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="685" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="685" name="ri" />
              </scope>
              <scope ilk="function" line="694" lineend="710" name="empty" returns="r" signature="empty(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="695" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="695" name="ri" />
                <variable attributes="__local__ private" line="697" name="cn" />
                <variable attributes="__local__ private" citdl="Number" line="697" name="j" />
                <variable attributes="__local__ private" citdl="Boolean" line="697" name="empty" />
                <variable attributes="__local__ private" citdl="ci.childNodes" line="697" name="cns" />
              </scope>
              <scope ilk="function" line="712" lineend="720" name="contains" returns="r" signature="contains(c, v)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="v" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="713" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="713" name="ri" />
              </scope>
              <scope ilk="function" line="722" lineend="730" name="nodeValue" returns="r" signature="nodeValue(c, v)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="v" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="723" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="723" name="ri" />
              </scope>
              <scope ilk="function" line="732" lineend="740" name="checked" returns="r" signature="checked(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="733" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="733" name="ri" />
              </scope>
              <scope ilk="function" line="742" lineend="744" name="not" returns="Ext.DomQuery.filter()" signature="not(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="746" lineend="758" name="any" returns="r" signature="any(c, selectors)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="selectors" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="selectors.split()" line="748" name="ss" />
                <variable attributes="__local__ private" line="748" name="s" />
                <variable attributes="__local__ private" citdl="Array" line="748" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="748" name="ri" />
              </scope>
              <scope ilk="function" line="760" lineend="762" name="odd" returns="this[&quot;nth-child&quot;]()" signature="odd(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="764" lineend="766" name="even" returns="this[&quot;nth-child&quot;]()" signature="even(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="768" lineend="770" name="nth" returns="c[a-1]" signature="nth(c, a)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="a" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="772" lineend="774" name="first" returns="c[0]" signature="first(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="776" lineend="778" name="last" returns="c[c.length-1]" signature="last(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="780" lineend="789" name="has" returns="r" signature="has(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Ext.DomQuery.select" line="782" name="s" />
                <variable attributes="__local__ private" citdl="Array" line="782" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="782" name="ri" />
              </scope>
              <scope ilk="function" line="791" lineend="801" name="next" returns="r" signature="next(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="793" name="is" />
                <variable attributes="__local__ private" citdl="Array" line="793" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="793" name="ri" />
                <variable attributes="__local__ private" citdl="next()" line="795" name="n" />
              </scope>
              <scope ilk="function" line="803" lineend="813" name="prev" returns="r" signature="prev(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="805" name="is" />
                <variable attributes="__local__ private" citdl="Array" line="805" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="805" name="ri" />
                <variable attributes="__local__ private" citdl="prev()" line="807" name="n" />
              </scope>
            </variable>
          </variable>
        </scope>
        <variable citdl="Ext.apply()" doc="The default global group of stores." line="72" name="StoreMgr" />
        <scope ilk="class" line="75" lineend="87" name="QuickTips">
          <variable citdl="Object" line="75" lineend="158" name="QuickTips">
            <scope doc="Initialize the global QuickTips instance and prepare any quick tips." ilk="function" line="82" lineend="95" name="init" signature="init(autoRender)">
              <variable citdl="Boolean" doc="True to render the QuickTips container immediately to preload images. (Defaults to true)" ilk="argument" name="autoRender" />
              <variable citdl="QuickTips" name="this" />
              <scope attributes="__local__ private" ilk="function" line="85" lineend="87" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Enable quick tips globally." ilk="function" line="100" lineend="107" name="enable" signature="enable()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Disable quick tips globally." ilk="function" line="112" lineend="117" name="disable" signature="disable()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Returns true if quick tips are enabled, else false." ilk="function" line="123" lineend="125" name="isEnabled" returns="Boolean" signature="isEnabled()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Gets the global QuickTips instance." ilk="function" line="130" lineend="132" name="getQuickTip" returns="tip" signature="getQuickTip()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Configures a new quick tip instance and assigns it to a target element.  See&#xA;{@link Ext.QuickTip#register} for details." ilk="function" line="139" lineend="141" name="register" signature="register()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Removes any registered quick tip from the target element and destroys it." ilk="function" line="147" lineend="149" name="unregister" signature="unregister()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Alias of {@link #register}." ilk="function" line="155" lineend="157" name="tips" signature="tips()">
              <variable citdl="QuickTips" name="this" />
            </scope>
          </variable>
        </scope>
        <scope ilk="class" line="79" lineend="192" name="Element">
          <variable citdl="String" doc="*/// special markup used throughout Ext when box wrapping elements" line="12" name="boxMarkup" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Visibility mode constant for use with {@link #setVisibilityMode}. Use visibility to hide element" line="15" name="VISIBILITY" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Visibility mode constant for use with {@link #setVisibilityMode}. Use display to hide element" line="21" name="DISPLAY" />
          <variable citdl="Object" line="52" name="prototype">
            <scope doc="Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element" ilk="function" line="23" lineend="50" name="insertSibling" returns="Ext.Element" signature="insertSibling(el, where, returnDom)">
              <variable citdl="Mixed/Object/Array" doc="The id, element to insert or a DomHelper config to create and insert *or* an array of any of those." ilk="argument" name="el" />
              <variable citdl="String" doc="(optional) &apos;before&apos; or &apos;after&apos; defaults to before" ilk="argument" name="where" />
              <variable citdl="Boolean" doc="(optional) True to return the raw DOM element instead of Ext.Element" ilk="argument" name="returnDom" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="25" name="me" />
              <variable attributes="__local__ private" citdl="me.insertSibling()" line="25" name="rt" />
              <scope attributes="__local__ private" ilk="function" line="28" lineend="30" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </variable>
          <scope attributes="__ctor__" ilk="function" line="79" lineend="103" name="Element" returns="Ext.Element.cache[id]" signature="Element(element, forceNew)">
            <variable ilk="argument" name="element" />
            <variable ilk="argument" name="forceNew" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="80" name="dom" />
            <scope doc="Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods&#xA;to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or&#xA;{@link Ext.CompositeElementLite CompositeElementLite} object." ilk="function" line="175" lineend="185" name="select" returns="CompositeElementLite/CompositeElement" signature="select(selector, unique, root)">
              <variable citdl="String/Array" doc="The CSS selector or an array of elements" ilk="argument" name="selector" />
              <variable citdl="Boolean" doc="(optional) true to create a unique Ext.Element for each element (defaults to a shared flyweight object) Not supported in core" ilk="argument" name="unique" />
              <variable citdl="HTMLElement/String" doc="(optional) The root element of the query or id of the root" ilk="argument" name="root" />
              <variable attributes="__local__ private" citdl="Ext.Element.selectorFunction()" line="176" name="els" />
            </scope>
          </scope>
          <variable citdl="HTMLElement" doc="The DOM element" line="96" name="dom" />
          <variable citdl="String" doc="The DOM element ID" line="102" name="id" />
          <scope doc="Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods&#xA;to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or&#xA;{@link Ext.CompositeElementLite CompositeElementLite} object." ilk="function" line="112" lineend="123" name="select" returns="CompositeElementLite/CompositeElement" signature="select(selector, unique, root)">
            <variable citdl="String/Array" doc="The CSS selector or an array of elements" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) true to create a unique Ext.Element for each element (defaults to a shared flyweight object)" ilk="argument" name="unique" />
            <variable citdl="HTMLElement/String" doc="(optional) The root element of the query or id of the root" ilk="argument" name="root" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element.selectorFunction()" line="113" name="els" />
          </scope>
          <variable citdl="Ext.DomQuery.select" line="161" name="selectorFunction" />
          <scope ilk="function" line="186" lineend="192" name="uncache" signature="uncache(el)">
            <variable ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="82" name="Container">
          <variable citdl="Object" line="82" lineend="893" name="LAYOUTS">
            <variable citdl="Ext.layout.FitLayout" line="48" name="fit" />
            <variable citdl="Ext.layout.AbsoluteLayout" line="82" name="absolute" />
            <variable citdl="Ext.layout.MenuLayout" line="93" name="menu" />
            <variable citdl="Ext.layout.CardLayout" line="127" name="card" />
            <variable citdl="Ext.layout.ColumnLayout" line="130" name="column" />
            <variable citdl="Ext.layout.AccordionLayout" line="174" name="accordion" />
            <variable citdl="Ext.layout.TableLayout" line="194" name="table" />
            <variable citdl="Ext.layout.AnchorLayout" line="200" name="anchor" />
            <variable citdl="Ext.layout.ContainerLayout" line="215" name="auto" />
            <variable citdl="Ext.layout.ToolbarLayout" line="253" name="toolbar" />
            <variable citdl="Ext.layout.VBoxLayout" line="262" name="vbox" />
            <variable citdl="Ext.layout.FormLayout" line="266" name="form" />
            <variable citdl="Ext.layout.HBoxLayout" line="417" name="hbox" />
            <variable citdl="Ext.layout.BorderLayout" line="1108" name="border" />
          </variable>
        </variable>
        <scope doc="Utility method for returning a default value if the passed value is empty.&#xA;The value is deemed to be empty if it is&#xA;null&#xA;undefined&#xA;an empty array&#xA;a zero length string (Unless the allowBlank parameter is true)" ilk="function" line="85" lineend="87" name="value" returns="Mixed" signature="value(v, defaultValue, allowBlank)">
          <variable ilk="argument" name="v" />
          <variable citdl="Mixed" doc="The value to return if the original value is empty" ilk="argument" name="defaultValue" />
          <variable citdl="Boolean" doc="(optional) true to allow zero length strings to qualify as non-empty (defaults to false)" ilk="argument" name="allowBlank" />
          <variable citdl="o" name="this" />
        </scope>
        <scope doc="Escapes the passed string for use in a regular expression" ilk="function" line="94" lineend="96" name="escapeRe" returns="String" signature="escapeRe(s)">
          <variable ilk="argument" name="s" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Object" line="97" name="DatePicker">
          <variable citdl="Object" line="97" name="prototype">
            <variable citdl="String" line="102" name="todayText" />
            <variable citdl="String" line="103" name="minText" />
            <variable citdl="String" line="104" name="maxText" />
            <variable citdl="String" line="105" name="disabledDaysText" />
            <variable citdl="String" line="106" name="disabledDatesText" />
            <variable citdl="Date.monthNames" line="107" name="monthNames" />
            <variable citdl="Date.dayNames" line="108" name="dayNames" />
            <variable citdl="String" line="109" name="nextText" />
            <variable citdl="String" line="110" name="prevText" />
            <variable citdl="String" line="111" name="monthYearText" />
            <variable citdl="String" line="112" name="todayTip" />
            <variable citdl="String" line="113" name="format" />
            <variable citdl="String" line="114" name="okText" />
            <variable citdl="String" line="115" name="cancelText" />
            <variable citdl="Number" line="116" name="startDay" />
          </variable>
        </variable>
        <scope ilk="function" line="98" lineend="100" name="sequence" signature="sequence(o, name, fn, scope)">
          <variable citdl="o[name].createSequence()" ilk="argument" name="o" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="scope" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Ext.extend()" doc="Container for a group of buttons. Example usage:&#xA;&#xA;var p = new Ext.Panel({&#xA;title: &apos;Panel with Button Group&apos;,&#xA;width: 300,&#xA;height:200,&#xA;renderTo: document.body,&#xA;html: &apos;whatever&apos;,&#xA;tbar: [{&#xA;xtype: &apos;buttongroup&apos;,&#xA;{@link #columns}: 3,&#xA;title: &apos;Clipboard&apos;,&#xA;items: [{&#xA;text: &apos;Paste&apos;,&#xA;scale: &apos;large&apos;,&#xA;rowspan: 3, iconCls: &apos;add&apos;,&#xA;iconAlign: &apos;top&apos;,&#xA;cls: &apos;x-btn-as-arrow&apos;&#xA;},{&#xA;xtype:&apos;splitbutton&apos;,&#xA;text: &apos;Menu Button&apos;,&#xA;scale: &apos;large&apos;,&#xA;rowspan: 3,&#xA;iconCls: &apos;add&apos;,&#xA;iconAlign: &apos;top&apos;,&#xA;arrowAlign:&apos;bottom&apos;,&#xA;menu: [{text: &apos;Menu Item 1&apos;}]&#xA;},{&#xA;xtype:&apos;splitbutton&apos;, text: &apos;Cut&apos;, iconCls: &apos;add16&apos;, menu: [{text: &apos;Cut Menu Item&apos;}]&#xA;},{&#xA;text: &apos;Copy&apos;, iconCls: &apos;add16&apos;&#xA;},{&#xA;text: &apos;Format&apos;, iconCls: &apos;add16&apos;&#xA;});" line="101" name="ButtonGroup" />
        <variable citdl="Object" line="102" name="data">
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="11" lineend="17" name="DirectProxy">
            <scope attributes="__ctor__" ilk="function" line="11" lineend="17" name="DirectProxy" signature="DirectProxy(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DirectProxy" name="this" />
            </scope>
            <variable doc="server side.  Specify the params in the order in which they must be executed on the server-side&#xA;as either (1) an Array of String values, or (2) a String of params delimited by either whitespace,&#xA;comma, or pipe. For example,&#xA;any of the following would be acceptable:&#xA;paramOrder: [&apos;param1&apos;,&apos;param2&apos;,&apos;param3&apos;]&#xA;paramOrder: &apos;param1 param2 param3&apos;&#xA;paramOrder: &apos;param1,param2,param3&apos;&#xA;paramOrder: &apos;param1|param2|param&apos;" line="32" name="paramOrder" />
            <variable citdl="Boolean" doc="Send parameters as a collection of named arguments (defaults to true). Providing a&#xA;{@link #paramOrder} nullifies this configuration." line="39" name="paramsAsHash" />
            <variable doc="Function to call when executing a request.  directFn is a simple alternative to defining the api configuration-parameter&#xA;for Store&apos;s which will not implement a full CRUD api." line="46" name="directFn" />
            <scope ilk="function" line="49" lineend="85" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, options)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="reader" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="Array" line="50" name="args" />
              <variable attributes="__local__ private" citdl="this.api[action]" line="51" name="directFn" />
              <variable attributes="__local__ private" citdl="Object" line="75" lineend="81" name="trans">
                <variable citdl="params" line="76" name="params" />
                <variable citdl="callback" line="77" name="callback" />
                <variable citdl="scope" line="78" name="scope" />
                <variable citdl="options" line="79" name="arg" />
                <variable citdl="reader" line="80" name="reader" />
              </variable>
            </scope>
            <scope ilk="function" line="88" lineend="105" name="createCallback" signature="createCallback(action, rs, trans)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="trans" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for read actions" ilk="function" line="113" lineend="128" name="onRead" signature="onRead(action, trans, result, res)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable ilk="argument" name="result" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable attributes="__local__ private" citdl="trans.reader.readRecords()" line="114" name="records" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for write actions" ilk="function" line="136" lineend="139" name="onWrite" signature="onWrite(action, trans, result, res, rs)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable ilk="argument" name="result" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable ilk="argument" name="rs" />
            </scope>
          </scope>
          <variable citdl="Object" doc="Defines the default sorting (casting?) comparison functions used when sorting data." line="13" lineend="91" name="SortTypes">
            <scope doc="Default sort that does nothing" ilk="function" line="19" lineend="21" name="none" returns="Mixed" signature="none(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <variable citdl="RegExp" doc="The regular expression used to strip tags" line="28" name="stripTagsRE" />
            <scope doc="Strips all HTML tags to sort on text only" ilk="function" line="35" lineend="37" name="asText" returns="String" signature="asText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Strips all HTML tags to sort on text only - Case insensitive" ilk="function" line="44" lineend="46" name="asUCText" returns="String" signature="asUCText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Case insensitive string" ilk="function" line="53" lineend="55" name="asUCString" returns="String" signature="asUCString(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Date sorting" ilk="function" line="62" lineend="70" name="asDate" returns="Number" signature="asDate(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Float sorting" ilk="function" line="77" lineend="80" name="asFloat" returns="Number" signature="asFloat(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseFloat()" line="78" name="val" />
            </scope>
            <scope doc="Integer sorting" ilk="function" line="87" lineend="90" name="asInt" returns="Number" signature="asInt(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseInt()" line="88" name="val" />
            </scope>
          </variable>
          <scope classrefs="Object" ilk="class" line="14" lineend="249" name="Field">
            <scope attributes="__ctor__" doc="This class encapsulates the field definition information specified in the field definition objects&#xA;passed to {@link Ext.data.Record#create}.&#xA;Developers do not need to instantiate this class. Instances are created by {@link Ext.data.Record.create}&#xA;and cached in the {@link Ext.data.Record#fields fields} property of the created Record constructor&apos;s prototype." ilk="function" line="14" lineend="101" name="Field" signature="Field(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Field" name="this" />
              <variable attributes="__local__ private" citdl="Ext.data.SortTypes" line="24" name="st" />
              <variable attributes="__local__ private" line="45" name="stripRe" />
              <variable attributes="__local__ private" citdl="this.dateFormat" line="50" name="dateFormat" />
              <variable attributes="__local__ private" line="50" name="cv" />
              <scope attributes="__local__ private" ilk="function" line="77" lineend="95" name="cv" returns="parsed" signature="cv(v)">
                <variable ilk="argument" name="v" />
                <variable attributes="__local__ private" citdl="Date.parse()" line="93" name="parsed" />
              </scope>
            </scope>
            <variable citdl="String" line="21" name="type" />
            <variable citdl="st[this.sortType]" line="27" name="sortType" />
            <variable citdl="cv" line="99" name="convert" />
            <variable doc="The name by which the field is referenced within the Record. This is referenced by, for example,&#xA;the dataIndex property in column definition objects passed to {@link Ext.grid.ColumnModel}.&#xA;Note: In the simplest case, if no properties other than name are required, a field&#xA;definition may consist of just a String for the field name.&#xA;&#xA;&#xA;&#xA;// example of convert function&#xA;function fullName(v, record){&#xA;return record.name.last + &apos;, &apos; + record.name.first;&#xA;function location(v, record){&#xA;return !record.city ? &apos;&apos; : (record.city + &apos;, &apos; + record.state);&#xA;var Dude = Ext.data.Record.create([&#xA;{name: &apos;fullname&apos;,  convert: fullName},&#xA;{name: &apos;firstname&apos;, mapping: &apos;name.first&apos;},&#xA;{name: &apos;lastname&apos;,  mapping: &apos;name.last&apos;},&#xA;{name: &apos;city&apos;, defaultValue: &apos;homeless&apos;},&#xA;&apos;state&apos;,&#xA;{name: &apos;location&apos;,  convert: location}&#xA;]);&#xA;// create the data store&#xA;var store = new Ext.data.Store({&#xA;reader: new Ext.data.JsonReader(&#xA;idProperty: &apos;key&apos;,&#xA;root: &apos;daRoot&apos;,&#xA;totalProperty: &apos;total&apos;&#xA;Dude  // recordType&#xA;});&#xA;var myData = [&#xA;{ key: 1,&#xA;name: { first: &apos;Fat&apos;,    last:  &apos;Albert&apos; }&#xA;// notice no city, state provided in data object&#xA;{ key: 2,&#xA;name: { first: &apos;Barney&apos;, last:  &apos;Rubble&apos; },&#xA;city: &apos;Bedrock&apos;, state: &apos;Stoneridge&apos;&#xA;{ key: 3,&#xA;name: { first: &apos;Cliff&apos;,  last:  &apos;Claven&apos; },&#xA;city: &apos;Boston&apos;,  state: &apos;MA&apos;" line="186" name="dateFormat" />
            <variable citdl="String" doc="(Optional) The default value used when a Record is being created by a {@link Ext.data.Reader Reader}&#xA;when the item referenced by the {@link Ext.data.Field#mapping mapping} does not exist in the data&#xA;object (i.e. undefined). (defaults to &quot;&quot;)" line="193" name="defaultValue" />
            <variable doc="(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation&#xA;that is creating the {@link Ext.data.Record Record} to extract the Field value from the data object.&#xA;If the path expression is the same as the field name, the mapping may be omitted.&#xA;The form of the mapping expression depends on the Reader being used.&#xA;&#xA;{@link Ext.data.JsonReader}The mapping is a string containing the javascript&#xA;expression to reference the data from an element of the data item&apos;s {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.&#xA;{@link Ext.data.XmlReader}The mapping is an {@link Ext.DomQuery} path to the data&#xA;item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.&#xA;{@link Ext.data.ArrayReader}The mapping is a number indicating the Array index&#xA;of the field&apos;s value. Defaults to the field specification&apos;s Array position.&#xA;&#xA;If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}&#xA;function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to&#xA;return the desired data." line="212" name="mapping" />
            <variable citdl="String" doc="(Optional) Initial direction to sort (&quot;ASC&quot; or  &quot;DESC&quot;).  Defaults to&#xA;&quot;ASC&quot;." line="241" name="sortDir" />
            <variable citdl="Boolean" doc="(Optional) Used for validating a {@link Ext.data.Record record}, defaults to true.&#xA;An empty value here will cause {@link Ext.data.Record}.{@link Ext.data.Record#isValid isValid}&#xA;to evaluate to false." line="248" name="allowBlank" />
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="15" lineend="100" name="Tree">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Represents a tree data structure and bubbles all the events for its nodes. The nodes&#xA;in the tree have most standard DOM functionality." ilk="function" line="15" lineend="100" name="Tree" signature="Tree(root)">
              <variable citdl="Node" doc="(optional) The root node" ilk="argument" name="root" />
              <variable citdl="Tree" name="this" />
            </scope>
            <variable citdl="Object" line="16" lineend="16" name="nodeHash" />
            <variable citdl="Node" doc="The root node for this tree" line="21" name="root" />
            <variable citdl="String" doc="The token used to separate paths in node ids (defaults to &apos;/&apos;)." line="107" name="pathSeparator" />
            <scope ilk="function" line="110" lineend="112" name="proxyNodeEvent" returns="this.fireEvent.apply()" signature="proxyNodeEvent()" />
            <scope doc="Returns the root node for this tree." ilk="function" line="118" lineend="120" name="getRootNode" returns="Node" signature="getRootNode()" />
            <scope doc="Sets the root node for this tree." ilk="function" line="127" lineend="133" name="setRootNode" returns="Node" signature="setRootNode(node)">
              <variable citdl="Node" ilk="argument" name="node" />
            </scope>
            <scope doc="Gets a node in this tree by its id." ilk="function" line="140" lineend="142" name="getNodeById" returns="Node" signature="getNodeById(id)">
              <variable citdl="String" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="145" lineend="147" name="registerNode" signature="registerNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="150" lineend="152" name="unregisterNode" signature="unregisterNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="154" lineend="156" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="15" lineend="23" name="MemoryProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor&#xA;to the Reader when its load method is called." ilk="function" line="15" lineend="23" name="MemoryProxy" signature="MemoryProxy(data)">
              <variable citdl="Object" doc="The data object which the Reader uses to construct a block of Ext.data.Records." ilk="argument" name="data" />
              <variable citdl="MemoryProxy" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="17" lineend="17" name="api" />
            </scope>
            <variable citdl="data" line="22" name="data" />
            <scope doc="Fires if an exception occurs in the Proxy during data loading. Note that this event is also relayed&#xA;through {@link Ext.data.Store}, so you can listen for it directly on any Store instance." ilk="function" line="53" lineend="68" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, arg)">
              <variable citdl="String" ilk="argument" name="action" />
              <variable citdl="Array" doc="If action is load, rs will be null" ilk="argument" name="rs" />
              <variable citdl="Object" doc="An object containing properties which are to be used as HTTP parameters&#xA;for the request to the remote server." ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" doc="The Reader object which converts the data&#xA;object into a block of Ext.data.Records." ilk="argument" name="reader" />
              <variable citdl="Function" doc="The function into which to pass the block of Ext.data.Records.&#xA;The function must be passed&#xA;The Record block object&#xA;The &quot;arg&quot; argument from the load function&#xA;A boolean success indicator" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to call the callback" ilk="argument" name="scope" />
              <variable citdl="Object" doc="An optional argument which is passed to the callback as its second parameter." ilk="argument" name="arg" />
              <variable attributes="__local__ private" citdl="reader.readRecords()" line="56" name="result" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="21" lineend="138" name="DataReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Abstract base class for reading structured data from a data source and converting&#xA;it into an object containing {@link Ext.data.Record} objects and metadata for use&#xA;by an {@link Ext.data.Store}.  This class is intended to be extended and should not&#xA;be created directly. For existing implementations, see {@link Ext.data.ArrayReader},&#xA;{@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}." ilk="function" line="21" lineend="36" name="DataReader" signature="DataReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options (implementation-specific)." ilk="argument" name="meta" />
              <variable citdl="Array/Object" doc="Either an Array of {@link Ext.data.Field Field} definition objects (which&#xA;will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}&#xA;constructor created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <variable citdl="Mixed" doc="This DataReader&apos;s configured metadata as passed to the constructor." line="27" name="meta" />
            <variable citdl="Ext.isArray()" doc="Either an Array of {@link Ext.data.Field Field} definition objects (which&#xA;will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}&#xA;constructor created from {@link Ext.data.Record#create}." line="34" name="recordType" />
            <variable citdl="Ext.emptyFn" doc="Abstract method, overridden in {@link Ext.data.JsonReader}" line="43" name="buildExtractors" />
            <scope doc="Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.&#xA;You must return at least the database pk using the idProperty defined in your DataReader configuration.  The incoming&#xA;data from server will be merged with the data in the local record.&#xA;In addition, you must return record-data from the server in the same order received.&#xA;Will perform a commit as well, un-marking dirty-fields.  Store&apos;s &quot;update&quot; event will be suppressed." ilk="function" line="54" lineend="86" name="realize" signature="realize(rs, data)">
              <variable ilk="argument" name="rs" />
              <variable citdl="Array" doc="The new record data to apply.  Must include the primary-key from database defined in idProperty field." ilk="argument" name="data" />
              <variable citdl="DataReader" name="this" />
              <variable attributes="__local__ private" citdl="this.extractValues()" line="79" name="values" />
            </scope>
            <scope doc="Used for updating a non-phantom or &quot;real&quot; record&apos;s data with fresh data from server after remote-save.&#xA;You must return a complete new record from the server.  If you don&apos;t, your local record&apos;s missing fields&#xA;will be populated with the default values specified in your Ext.data.Record.create specification.  Without a defaultValue,&#xA;local fields will be populated with empty string &quot;&quot;.  So return your entire record&apos;s data after both remote create and update.&#xA;In addition, you must return record-data from the server in the same order received.&#xA;Will perform a commit as well, un-marking dirty-fields.  Store&apos;s &quot;update&quot; event will be suppressed as the record receives&#xA;a fresh new data-hash." ilk="function" line="99" lineend="127" name="update" signature="update(rs, data)">
              <variable citdl="Array" ilk="argument" name="rs" />
              <variable citdl="Array" ilk="argument" name="data" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <scope doc="Returns true if the supplied data-hash looks and quacks like data.  Checks to see if it has a key&#xA;corresponding to idProperty defined in your DataReader config containing non-empty pk." ilk="function" line="135" lineend="137" name="isData" returns="Boolean" signature="isData(data)">
              <variable citdl="Object" ilk="argument" name="data" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <variable citdl="Ext.extend()" doc="General error class for Ext.data.DataReader" line="151" name="Error" />
          </scope>
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="28" lineend="53" name="HttpProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of {@link Ext.data.DataProxy} that processes data requests within the same&#xA;domain of the originating page.&#xA;Note: this class cannot be used to retrieve data from a domain other&#xA;than the domain from which the running page was served. For cross-domain requests, use a&#xA;{@link Ext.data.ScriptTagProxy ScriptTagProxy}.&#xA;Be aware that to enable the browser to parse an XML document, the server must set&#xA;the Content-Type header in the HTTP response to &quot;text/xml&quot;." ilk="function" line="28" lineend="53" name="HttpProxy" signature="HttpProxy(conn)">
              <variable citdl="Object" doc="An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}.&#xA;Note that if this HttpProxy is being used by a (@link Ext.data.Store Store}, then the&#xA;Store&apos;s call to {@link #load} will override any specified callback and params&#xA;options. In this case, use the Store&apos;s {@link Ext.data.Store#events events} to modify parameters,&#xA;or react to loading events. The Store&apos;s {@link Ext.data.Store#baseParams baseParams} may also be&#xA;used to pass parameters known at instantiation time.&#xA;If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make&#xA;the request." ilk="argument" name="conn" />
              <variable citdl="HttpProxy" name="this" />
              <variable attributes="__local__ private" citdl="Ext.data.Api.actions" line="48" name="actions" />
            </scope>
            <variable citdl="conn" doc="The Connection object (Or options parameter to {@link Ext.Ajax#request}) which this HttpProxy&#xA;uses to make requests to the server. Properties of this object may be changed dynamically to&#xA;change the way data is requested." line="37" name="conn" />
            <variable line="45" name="useAjax" />
            <variable citdl="Object" line="49" lineend="49" name="activeRequest" />
            <scope doc="If set to true, a {@link Ext.data.Record#phantom non-phantom} record&apos;s&#xA;{@link Ext.data.Record#id id} will be appended to the url (defaults to false).&#xA;The url is built based upon the action being executed [load|create|save|destroy]&#xA;using the commensurate {@link #api} property, or if undefined default to the&#xA;configured {@link Ext.data.Store}.{@link Ext.data.Store#url url}.&#xA;Some MVC (e.g., Ruby on Rails, Merb and Django) support this style of segment based urls&#xA;where the segments in the URL follow the Model-View-Controller approach.&#xA;someSite.com/controller/action/id&#xA;&#xA;Where the segments in the url are typically:&#xA;The first segment : represents the controller class that should be invoked.&#xA;The second segment : represents the class function, or method, that should be called.&#xA;The third segment : represents the ID (a variable typically passed to the method).&#xA;&#xA;For example:&#xA;&#xA;api: {&#xA;load :    &apos;/controller/load&apos;,&#xA;create :  &apos;/controller/new&apos;,  // Server MUST return idProperty of new record&#xA;save :    &apos;/controller/update&apos;,&#xA;destroy : &apos;/controller/destroy_action&apos;&#xA;// Alternatively, one can use the object-form to specify each API-action&#xA;api: {&#xA;load: {url: &apos;read.php&apos;, method: &apos;GET&apos;},&#xA;create: &apos;create.php&apos;,&#xA;destroy: &apos;destroy.php&apos;,&#xA;save: &apos;update.php&apos;&#xA;Return the {@link Ext.data.Connection} object being used by this Proxy." ilk="function" line="95" lineend="97" name="getConnection" returns="Connection" signature="getConnection()" />
            <scope doc="Used for overriding the url used for a single request.  Designed to be called during a beforeaction event.  Calling setUrl&#xA;will override any urls set via the api configuration parameter.  Set the optional parameter makePermanent to set the url for&#xA;all subsequent requests.  If not set to makePermanent, the next request will use the same url or api configuration defined&#xA;in the initial proxy configuration." ilk="function" line="109" lineend="115" name="setUrl" signature="setUrl(url, makePermanent)">
              <variable citdl="String" ilk="argument" name="url" />
              <variable citdl="Boolean" doc="(Optional) [false]&#xA;(e.g.: beforeload, beforesave, etc)." ilk="argument" name="makePermanent" />
            </scope>
            <variable citdl="url" line="112" name="url" />
            <scope doc="HttpProxy implementation of DataProxy#doRequest" ilk="function" line="134" lineend="177" name="doRequest" signature="doRequest(action, rs, params, reader, cb, scope, arg)">
              <variable citdl="String" doc="The crud action type (create, read, update, destroy)" ilk="argument" name="action" />
              <variable citdl="Array" doc="If action is load, rs will be null" ilk="argument" name="rs" />
              <variable citdl="Object" doc="An object containing properties which are to be used as HTTP parameters&#xA;for the request to the remote server." ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" doc="The Reader object which converts the data&#xA;object into a block of Ext.data.Records." ilk="argument" name="reader" />
              <variable ilk="argument" name="cb" />
              <variable citdl="Object" doc="The scope in which to call the callback" ilk="argument" name="scope" />
              <variable citdl="Object" doc="An optional argument which is passed to the callback as its second parameter." ilk="argument" name="arg" />
              <variable attributes="__local__ private" citdl="Object" line="135" lineend="145" name="o">
                <variable line="136" name="method" />
                <variable citdl="Object" line="137" lineend="141" name="request">
                  <variable citdl="cb" line="138" name="callback" />
                  <variable citdl="scope" line="139" name="scope" />
                  <variable citdl="arg" line="140" name="arg" />
                </variable>
                <variable citdl="reader" line="142" name="reader" />
                <variable citdl="this.createCallback()" line="143" name="callback" />
                <variable citdl="this" line="144" name="scope" />
                <variable citdl="params" line="149" name="jsonData" />
                <variable citdl="params" line="151" name="params" />
              </variable>
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns a callback function for a request.  Note a special case is made for the&#xA;read action vs all the others." ilk="function" line="186" lineend="204" name="createCallback" signature="createCallback(action, rs)">
              <variable citdl="String" doc="[create|update|delete|load]" ilk="argument" name="action" />
              <variable citdl="Array" doc="The Store-recordset being acted upon" ilk="argument" name="rs" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for read action" ilk="function" line="213" lineend="236" name="onRead" signature="onRead(action, o, response)">
              <variable citdl="String" doc="Action name as per {@link Ext.data.Api.actions#read}." ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="o" />
              <variable ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="o.reader.read()" line="214" name="result" />
              <variable attributes="__local__ private" citdl="o.reader.readResponse()" line="229" name="res" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for write actions" ilk="function" line="244" lineend="260" name="onWrite" signature="onWrite(action, o, response, rs)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="rs" />
              <variable attributes="__local__ private" citdl="o.reader" line="245" name="reader" />
              <variable attributes="__local__ private" citdl="reader.readResponse()" line="246" name="res" />
            </scope>
            <scope ilk="function" line="263" lineend="275" name="destroy" signature="destroy()">
              <variable attributes="__local__ private" citdl="Ext.data.Api.actions" line="267" name="actions" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="34" lineend="400" name="Record">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Instances of this class encapsulate both Record definition information, and Record&#xA;value information for use in {@link Ext.data.Store} objects, or any code which needs&#xA;to access Records cached in an {@link Ext.data.Store} object.&#xA;Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.&#xA;Instances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data&#xA;objects.&#xA;Note that an instance of a Record class may only belong to one {@link Ext.data.Store Store} at a time.&#xA;In order to copy data from one Store to another, use the {@link #copy} method to create an exact&#xA;copy of the Record, and insert the new instance into the other Store.&#xA;When serializing a Record for submission to the server, be aware that it contains many private&#xA;properties, and also a reference to its owning Store which in turn holds references to its Records.&#xA;This means that a whole Record may not be encoded using {@link Ext.util.JSON.encode}. Instead, use the&#xA;{@link #data} and {@link #id} properties.&#xA;Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below." ilk="function" line="34" lineend="38" name="Record" signature="Record(data, id)">
              <variable citdl="Object" doc="(Optional) An object, the properties of which provide values for the new Record&apos;s&#xA;fields. If not specified the {@link Ext.data.Field#defaultValue defaultValue}&#xA;for each field will be assigned." ilk="argument" name="data" />
              <variable citdl="Object" doc="(Optional) The id of the Record. This id should be unique, and is used by the&#xA;{@link Ext.data.Store} object which owns the Record to index its collection of Records. If&#xA;an id is not specified a {@link #phantom} Record will be created&#xA;with an {@link #Record.id automatically generated id}." ilk="argument" name="id" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable line="36" name="id" />
            <variable citdl="data" line="37" name="data" />
            <scope attributes="__static__" doc="STATIC: Generate a constructor for a specific Record layout.&#xA;// create a Record constructor from a description of the fields&#xA;var TopicRecord = Ext.data.Record.create([ // creates a subclass of Ext.data.Record&#xA;{{@link Ext.data.Field#name name}: &apos;title&apos;, {@link Ext.data.Field#mapping mapping}: &apos;topic_title&apos;},&#xA;{name: &apos;author&apos;, mapping: &apos;username&apos;, allowBlank: false},&#xA;{name: &apos;totalPosts&apos;, mapping: &apos;topic_replies&apos;, type: &apos;int&apos;},&#xA;{name: &apos;lastPost&apos;, mapping: &apos;post_time&apos;, type: &apos;date&apos;},&#xA;{name: &apos;lastPoster&apos;, mapping: &apos;user2&apos;},&#xA;{name: &apos;excerpt&apos;, mapping: &apos;post_text&apos;, allowBlank: false},&#xA;// In the simplest case, if no properties other than name are required,&#xA;// a field definition may consist of just a String for the field name.&#xA;&apos;signature&apos;&#xA;]);&#xA;// create Record instance&#xA;var myNewRecord = new TopicRecord(&#xA;title: &apos;Do my job please&apos;,&#xA;author: &apos;noobie&apos;,&#xA;totalPosts: 1,&#xA;lastPost: new Date(),&#xA;lastPoster: &apos;Animal&apos;,&#xA;excerpt: &apos;No way dude!&apos;,&#xA;signature: &apos;&apos;&#xA;id // optionally specify the id of the record otherwise {@link #Record.id one is auto-assigned}&#xA;myStore.{@link Ext.data.Store#add add}(myNewRecord);" ilk="function" line="79" lineend="92" name="create" returns="Function" signature="create(o)">
              <variable citdl="Array" doc="An Array of {@link Ext.data.Field Field} definition objects.&#xA;The constructor generated by this method may be used to create new Record instances. The data&#xA;object must contain properties named after the {@link Ext.data.Field field}&#xA;{@link Ext.data.Field#name}s.  Example usage:" ilk="argument" name="o" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="Ext.extend()" line="80" name="f" />
              <variable attributes="__local__ private" citdl="f.prototype" line="81" name="p" />
              <scope attributes="__local__ private" ilk="function" line="82" lineend="84" name="(anonymous)" returns="field.name" signature="(anonymous)()" />
            </scope>
            <variable citdl="String" line="94" name="PREFIX" />
            <variable citdl="Number" line="95" name="AUTO_ID" />
            <variable citdl="String" line="96" name="EDIT" />
            <variable citdl="String" line="97" name="REJECT" />
            <variable citdl="String" line="98" name="COMMIT" />
            <scope doc="Generates a sequential id. This method is typically called when a record is {@link #create}d&#xA;and {@link #Record no id has been specified}. The returned id takes the form:&#xA;&amp;#123;PREFIX}-&amp;#123;AUTO_ID}.&#xA;PREFIX : StringExt.data.Record.PREFIX&#xA;(defaults to &apos;ext-record&apos;)&#xA;AUTO_ID : StringExt.data.Record.AUTO_ID&#xA;(defaults to 1 initially)" ilk="function" line="113" lineend="116" name="id" returns="String" signature="id(rec)">
              <variable citdl="Record" doc="The record being created.  The record does not exist, it&apos;s a {@link #phantom}." ilk="argument" name="rec" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="Boolean" doc="This property is stored in the Record definition&apos;s prototype&#xA;A MixedCollection containing the defined {@link Ext.data.Field Field}s for this Record.  Read-only." line="142" name="dirty" />
            <variable citdl="Boolean" line="143" name="editing" />
            <variable line="144" name="error" />
            <variable citdl="Object" doc="This object contains a key and value storing the original values of all modified&#xA;fields or is null if no fields have been modified." line="151" lineend="394" name="modified" />
            <variable citdl="Boolean" doc="false when the record does not yet exist in a server-side database (see&#xA;{@link #markDirty}).  Any record which has a real database pk set as its id property&#xA;is NOT a phantom -- it&apos;s real." line="159" name="phantom" />
            <scope ilk="function" line="162" lineend="169" name="join" signature="join(store)">
              <variable ilk="argument" name="store" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="Ext.data.Store" doc="The {@link Ext.data.Store} to which this Record belongs." line="168" name="store" />
            <scope doc="Set the {@link Ext.data.Field#name named field} to the specified value.  For example:&#xA;&#xA;// record has a field named &apos;firstname&apos;&#xA;var Employee = Ext.data.Record.{@link #create}([&#xA;{name: &apos;firstname&apos;},&#xA;...&#xA;]);&#xA;// update the 2nd record in the store:&#xA;var rec = myStore.{@link Ext.data.Store#getAt getAt}(1);&#xA;// set the value (shows dirty flag):&#xA;rec.set(&apos;firstname&apos;, &apos;Betty&apos;);&#xA;// commit the change (removes dirty flag):&#xA;rec.{@link #commit}();&#xA;// update the record in the store, bypass setting dirty flag,&#xA;// and do not store the change in the {@link Ext.data.Store#getModifiedRecords modified records}&#xA;rec.{@link #data}[&apos;firstname&apos;] = &apos;Wilma&apos;); // updates record, but not the view&#xA;rec.{@link #commit}(); // updates the view&#xA;&#xA;Notes:&#xA;If the store has a writer and autoSave=true, each set()&#xA;will execute an XHR to the server.&#xA;Use {@link #beginEdit} to prevent the store&apos;s update&#xA;event firing while using set().&#xA;Use {@link #endEdit} to have the store&apos;s update&#xA;event fire." ilk="function" line="205" lineend="223" name="set" signature="set(name, value)">
              <variable citdl="String" doc="The {@link Ext.data.Field#name name of the field} to set." ilk="argument" name="name" />
              <variable citdl="Object" doc="The value to set the field to." ilk="argument" name="value" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" line="206" name="isObj" />
            </scope>
            <scope ilk="function" line="226" lineend="230" name="afterEdit" signature="afterEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope ilk="function" line="233" lineend="237" name="afterReject" signature="afterReject()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope ilk="function" line="240" lineend="244" name="afterCommit" signature="afterCommit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Get the value of the {@link Ext.data.Field#name named field}." ilk="function" line="251" lineend="253" name="get" returns="Object" signature="get(name)">
              <variable citdl="String" doc="The {@link Ext.data.Field#name name of the field} to get the value of." ilk="argument" name="name" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Begin an edit. While in edit mode, no events (e.g.. the update event)&#xA;are relayed to the containing store.&#xA;See also: {@link #endEdit} and {@link #cancelEdit}." ilk="function" line="260" lineend="263" name="beginEdit" signature="beginEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Cancels all changes made in the current edit operation." ilk="function" line="268" lineend="271" name="cancelEdit" signature="cancelEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="End an edit. If any data was modified, the containing store is notified&#xA;(ie, the store&apos;s update event will fire)." ilk="function" line="277" lineend="282" name="endEdit" signature="endEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Rejects all changes made to the Record since either creation, or the last commit operation.&#xA;Modified fields are reverted to their original values.&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event&#xA;to have their code notified of reject operations." ilk="function" line="293" lineend="306" name="reject" signature="reject(silent)">
              <variable citdl="Boolean" doc="(optional) True to skip notification of the owning&#xA;store of the change (defaults to false)" ilk="argument" name="silent" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="this.modified" line="294" name="m" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Commits all changes made to the Record since either creation, or the last commit operation.&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event&#xA;to have their code notified of commit operations." ilk="function" line="316" lineend="323" name="commit" signature="commit(silent)">
              <variable citdl="Boolean" doc="(optional) True to skip notification of the owning&#xA;store of the change (defaults to false)" ilk="argument" name="silent" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Gets a hash of only the fields that have been modified since this Record was created or commited." ilk="function" line="329" lineend="337" name="getChanges" returns="cs" signature="getChanges()">
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="330" lineend="330" name="cs" />
              <variable attributes="__local__ private" citdl="this.modified" line="330" name="m" />
            </scope>
            <scope ilk="function" line="340" lineend="342" name="hasError" returns="this.error" signature="hasError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope ilk="function" line="345" lineend="347" name="clearError" signature="clearError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Creates a copy of this Record." ilk="function" line="356" lineend="358" name="copy" returns="Record" signature="copy(newId)">
              <variable ilk="argument" name="newId" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Returns true if the passed field name has been {@link #modified}&#xA;since the load or last commit." ilk="function" line="366" lineend="368" name="isModified" returns="Boolean" signature="isModified(fieldName)">
              <variable citdl="String" doc="{@link Ext.data.Field.{@link Ext.data.Field#name}" ilk="argument" name="fieldName" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="By default returns false if any {@link Ext.data.Field field} within the&#xA;record configured with {@link Ext.data.Field#allowBlank} = false returns&#xA;true from an {@link Ext}.{@link Ext#isEmpty isempty} test." ilk="function" line="376" lineend="380" name="isValid" returns="Boolean" signature="isValid()">
              <variable citdl="Record" name="this" />
              <scope attributes="__local__ private" ilk="function" line="377" lineend="379" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Marks this Record as {@link #dirty}.  This method&#xA;is used interally when adding {@link #phantom} records to a&#xA;{@link Ext.data.Store#writer writer enabled store}.&#xA;Marking a record {@link #dirty} causes the phantom to&#xA;be returned by {@link Ext.data.Store#getModifiedRecords} where it will&#xA;have a create action composed for it during {@link Ext.data.Store#save store save}&#xA;operations." ilk="function" line="391" lineend="399" name="markDirty" signature="markDirty()">
              <variable citdl="Record" name="this" />
              <scope attributes="__local__ private" ilk="function" line="396" lineend="398" name="(anonymous)" signature="(anonymous)()">
                <variable citdl="this.data[f.name]" line="397" name="modified" />
              </scope>
            </scope>
          </scope>
          <scope classrefs="Ext.data.Store" ilk="class" line="42" lineend="47" name="DirectStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Small helper class to create an {@link Ext.data.Store} configured with an&#xA;{@link Ext.data.DirectProxy} and {@link Ext.data.JsonReader} to make interacting&#xA;with an {@link Ext.Direct} Server-side {@link Ext.direct.Provider Provider} easier.&#xA;To create a different proxy/reader combination create a basic {@link Ext.data.Store}&#xA;configured as needed.&#xA;&#xA;*Note: Although they are not listed, this class inherits all of the config options of:&#xA;&#xA;{@link Ext.data.Store Store}&#xA;&#xA;&#xA;&#xA;{@link Ext.data.JsonReader JsonReader}&#xA;&#xA;{@link Ext.data.JsonReader#root root}&#xA;{@link Ext.data.JsonReader#idProperty idProperty}&#xA;{@link Ext.data.JsonReader#totalProperty totalProperty}&#xA;&#xA;&#xA;{@link Ext.data.DirectProxy DirectProxy}&#xA;&#xA;{@link Ext.data.DirectProxy#directFn directFn}&#xA;{@link Ext.data.DirectProxy#paramOrder paramOrder}&#xA;{@link Ext.data.DirectProxy#paramsAsHash paramsAsHash}" ilk="function" line="42" lineend="50" name="DirectStore" signature="DirectStore(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="DirectStore" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="43" lineend="240" name="DataProxy">
            <scope attributes="__ctor__" doc="Abstract base class for implementations which provide retrieval of unformatted data objects.&#xA;This class is intended to be extended and should not be created directly. For existing implementations,&#xA;see {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and&#xA;{@link Ext.data.MemoryProxy}.&#xA;DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}&#xA;(of the appropriate type which knows how to parse the data object) to provide a block of&#xA;{@link Ext.data.Records} to an {@link Ext.data.Store}.&#xA;The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the&#xA;config object to an {@link Ext.data.Connection}.&#xA;Custom implementations must implement either the doRequest method (preferred) or the&#xA;load method (deprecated). See&#xA;{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or&#xA;{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.&#xA;Example 1&#xA;&#xA;proxy: new Ext.data.ScriptTagProxy({&#xA;{@link Ext.data.Connection#url url}: &apos;http://extjs.com/forum/topics-remote.php&apos;&#xA;}),&#xA;&#xA;Example 2&#xA;&#xA;proxy : new Ext.data.HttpProxy({&#xA;{@link Ext.data.Connection#method method}: &apos;GET&apos;,&#xA;{@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,&#xA;{@link Ext.data.Connection#url url}: &apos;local/default.php&apos;, // see options parameter for {@link Ext.Ajax#request}&#xA;{@link #api}: {&#xA;// all actions except the following will use above url&#xA;create  : &apos;local/new.php&apos;,&#xA;update  : &apos;local/update.php&apos;&#xA;})," ilk="function" line="43" lineend="240" name="DataProxy" signature="DataProxy(conn)">
              <variable citdl="conn" ilk="argument" name="conn" />
              <variable citdl="DataProxy" name="this" />
            </scope>
            <variable citdl="conn.api" line="52" name="api" />
            <variable citdl="conn.url" line="53" name="url" />
            <variable citdl="conn.listeners" line="55" name="listeners" />
            <variable citdl="conn.prettyUrls" line="58" name="prettyUrls" />
            <variable citdl="Boolean" doc="Defaults to false.  Set to true to operate in a RESTful manner.&#xA;Note: this parameter will automatically be set to true if the&#xA;{@link Ext.data.Store} it is plugged into is set to restful: true. If the&#xA;Store is RESTful, there is no need to set this option on the proxy.&#xA;RESTful implementations enable the serverside framework to automatically route&#xA;actions sent to one url based upon the HTTP method, for example:&#xA;&#xA;store: new Ext.data.Store({&#xA;restful: true,&#xA;proxy: new Ext.data.HttpProxy({url:&apos;/users&apos;}); // all requests sent to /users&#xA;...&#xA;&#xA;There is no {@link #api} specified in the configuration of the proxy,&#xA;all requests will be marshalled to a single RESTful url (/users) so the serverside&#xA;framework can inspect the HTTP Method and act accordingly:&#xA;&#xA;Method   url        action&#xA;POST     /users     create&#xA;GET      /users     read&#xA;PUT      /users/23  update&#xA;DESTROY  /users/23  delete" line="269" name="restful" />
            <scope doc="Redefines the Proxy&apos;s API or a single action of an API. Can be called with two method signatures.&#xA;If called with an object as the only parameter, the object should redefine the entire API, e.g.:&#xA;proxy.setApi({&#xA;read    : &apos;/users/read&apos;,&#xA;create  : &apos;/users/create&apos;,&#xA;update  : &apos;/users/update&apos;,&#xA;destroy : &apos;/users/destroy&apos;&#xA;});&#xA;If called with two parameters, the first parameter should be a string specifying the API action to&#xA;redefine and the second parameter should be the URL (or function if using DirectProxy) to call for that action, e.g.:&#xA;proxy.setApi(Ext.data.Api.actions.read, &apos;/users/new_load_url&apos;);" ilk="function" line="288" lineend="305" name="setApi" signature="setApi()">
              <variable attributes="__local__ private" citdl="Ext.data.Api.isValid()" line="290" name="valid" />
            </scope>
            <scope doc="Returns true if the specified action is defined as a unique action in the api-config.&#xA;request.  If all API-actions are routed to unique urls, the xaction parameter is unecessary.  However, if no api is defined&#xA;and all Proxy actions are routed to DataProxy#url, the server-side will require the xaction parameter to perform a switch to&#xA;the corresponding code for CRUD action." ilk="function" line="315" lineend="317" name="isApiAction" returns="Boolean" signature="isApiAction(action)">
              <variable ilk="argument" name="action" />
            </scope>
            <scope doc="All proxy actions are executed through this method.  Automatically fires the &quot;before&quot; + action event" ilk="function" line="329" lineend="340" name="request" signature="request(action, rs, params, reader, callback, scope, options)">
              <variable citdl="String" doc="Name of the action" ilk="argument" name="action" />
              <variable citdl="Array" doc="Will be null when action is &apos;load&apos;" ilk="argument" name="rs" />
              <variable citdl="Object" ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" ilk="argument" name="reader" />
              <variable citdl="Function" ilk="argument" name="callback" />
              <variable citdl="Object" doc="Scope with which to call the callback (defaults to the Proxy object)" ilk="argument" name="scope" />
              <variable citdl="Object" doc="Any options specified for the action (e.g. see {@link Ext.data.Store#load}." ilk="argument" name="options" />
            </scope>
            <variable attributes="deprecated" doc="DEPRECATED: Deprecated load method using old method signature. See {@doRequest} for preferred method." line="352" name="load" />
            <scope doc="(e.g.: {@link Ext.data.HttpProxy#doRequest HttpProxy.doRequest},&#xA;{@link Ext.data.DirectProxy#doRequest DirectProxy.doRequest})." ilk="function" line="359" lineend="364" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, options)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="reader" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="options" />
            </scope>
            <scope attributes="private" doc="PRIVATE: buildUrl&#xA;Sets the appropriate url based upon the action being executed.  If restful is true, and only a single record is being acted upon,&#xA;url will be built Rails-style, as in &quot;/controller/action/32&quot;.  restful will aply iff the supplied record is an&#xA;instance of Ext.data.Record rather than an Array of them." ilk="function" line="376" lineend="397" name="buildUrl" returns="String" signature="buildUrl(action, record)">
              <variable citdl="String" doc="The api action being executed [read|create|update|destroy]" ilk="argument" name="action" />
              <variable citdl="record" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="m[1]" line="378" name="url" />
              <variable attributes="__local__ private" citdl="m[2]" line="383" name="format" />
              <variable attributes="__local__ private" citdl="url.match()" line="384" name="m" />
            </scope>
            <scope doc="Destroys the proxy by purging any event listeners and cancelling any active requests." ilk="function" line="402" lineend="404" name="destroy" signature="destroy()" />
            <variable citdl="Ext.extend()" doc="DataProxy Error extension.&#xA;constructor" line="421" name="Error" />
          </scope>
          <variable citdl="Ext.extend()" doc="DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML." line="45" name="XmlWriter" />
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="46" lineend="72" name="ScriptTagProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain&#xA;other than the originating domain of the running page.&#xA;&#xA;Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain&#xA;of the running page, you must use this class, rather than HttpProxy.&#xA;&#xA;The content passed back from a server resource requested by a ScriptTagProxy must be executable JavaScript&#xA;source code because it is used as the source inside a &amp;lt;script&gt; tag.&#xA;&#xA;In order for the browser to process the returned data, the server must wrap the data object&#xA;with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.&#xA;Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy&#xA;depending on whether the callback name was passed:&#xA;&#xA;&#xA;boolean scriptTag = false;&#xA;String cb = request.getParameter(&quot;callback&quot;);&#xA;if (cb != null) {&#xA;scriptTag = true;&#xA;response.setContentType(&quot;text/javascript&quot;);&#xA;} else {&#xA;response.setContentType(&quot;application/x-json&quot;);&#xA;Writer out = response.getWriter();&#xA;if (scriptTag) {&#xA;out.write(cb + &quot;(&quot;);&#xA;out.print(dataBlock.toJsonString());&#xA;if (scriptTag) {&#xA;out.write(&quot;);&quot;);" ilk="function" line="46" lineend="72" name="ScriptTagProxy" signature="ScriptTagProxy(config)">
              <variable citdl="Object" doc="A configuration object." ilk="argument" name="config" />
              <variable citdl="ScriptTagProxy" name="this" />
            </scope>
            <variable citdl="document.getElementsByTagName()[0]" line="51" name="head" />
            <variable citdl="Number" line="74" name="TRANS_ID" />
            <variable citdl="Number" line="83" name="timeout" />
            <variable citdl="String" doc="the server the name of the callback function set up by the load call to process the returned data object.&#xA;Defaults to &quot;callback&quot;.The server-side processing must read this parameter value, and generate&#xA;javascript output which calls this named function passing the data object as its only parameter." line="90" name="callbackParam" />
            <variable citdl="Boolean" doc="name to the request." line="95" name="nocache" />
            <scope doc="HttpProxy implementation of DataProxy#doRequest" ilk="function" line="114" lineend="154" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, arg)">
              <variable citdl="String" ilk="argument" name="action" />
              <variable citdl="Array" doc="If action is read, rs will be null" ilk="argument" name="rs" />
              <variable citdl="Object" doc="An object containing properties which are to be used as HTTP parameters&#xA;for the request to the remote server." ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" doc="The Reader object which converts the data&#xA;object into a block of Ext.data.Records." ilk="argument" name="reader" />
              <variable citdl="Function" doc="The function into which to pass the block of Ext.data.Records.&#xA;The function must be passed&#xA;The Record block object&#xA;The &quot;arg&quot; argument from the load function&#xA;A boolean success indicator" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to call the callback" ilk="argument" name="scope" />
              <variable citdl="Object" doc="An optional argument which is passed to the callback as its second parameter." ilk="argument" name="arg" />
              <variable attributes="__local__ private" citdl="Ext.urlEncode()" line="115" name="p" />
              <variable attributes="__local__ private" citdl="this.buildUrl()" line="117" name="url" />
              <variable attributes="__local__ private" line="126" name="transId" />
              <variable attributes="__local__ private" citdl="Object" line="127" lineend="138" name="trans">
                <variable citdl="transId" line="128" name="id" />
                <variable citdl="action" line="129" name="action" />
                <variable citdl="String" line="130" name="cb" />
                <variable citdl="String" line="131" name="scriptId" />
                <variable citdl="params" line="132" name="params" />
                <variable citdl="arg" line="133" name="arg" />
                <variable citdl="url" line="134" name="url" />
                <variable citdl="callback" line="135" name="callback" />
                <variable citdl="scope" line="136" name="scope" />
                <variable citdl="reader" line="137" name="reader" />
                <variable citdl="this.handleFailure.defer()" line="145" name="timeoutId" />
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="147" name="script" />
            </scope>
            <variable citdl="trans" line="153" name="trans" />
            <scope ilk="function" line="157" lineend="168" name="createCallback" signature="createCallback(action, rs, trans)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="trans" />
              <variable attributes="__local__ private" citdl="this" line="158" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for read actions" ilk="function" line="176" lineend="197" name="onRead" signature="onRead(action, trans, res)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable attributes="__local__ private" citdl="trans.reader.readRecords()" line="177" name="result" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for write actions" ilk="function" line="205" lineend="222" name="onWrite" signature="onWrite(action, trans, res, rs)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable ilk="argument" name="rs" />
              <variable attributes="__local__ private" citdl="trans.reader" line="206" name="reader" />
            </scope>
            <scope ilk="function" line="225" lineend="227" name="isLoading" returns="this.trans" signature="isLoading()" />
            <scope doc="Abort the current server request." ilk="function" line="232" lineend="236" name="abort" signature="abort()" />
            <scope ilk="function" line="239" lineend="256" name="destroyTrans" signature="destroyTrans(trans, isLoaded)">
              <variable ilk="argument" name="trans" />
              <variable ilk="argument" name="isLoaded" />
              <scope attributes="__local__ private" ilk="function" line="249" lineend="254" name="window" signature="window()" />
              <variable line="250" name="window" />
            </scope>
            <scope ilk="function" line="259" lineend="272" name="handleFailure" signature="handleFailure(trans)">
              <variable ilk="argument" name="trans" />
            </scope>
            <scope ilk="function" line="275" lineend="278" name="destroy" signature="destroy()" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.&#xA;A JsonStore will be automatically configured with a {@link Ext.data.JsonReader}.&#xA;A store configuration would be something like:&#xA;var store = new Ext.data.JsonStore({&#xA;// store configs&#xA;autoDestroy: true,&#xA;url: &apos;get-images.php&apos;,&#xA;storeId: &apos;myStore&apos;,&#xA;// reader configs&#xA;root: &apos;images&apos;,&#xA;idProperty: &apos;name&apos;,&#xA;fields: [&apos;name&apos;, &apos;url&apos;, {name:&apos;size&apos;, type: &apos;float&apos;}, {name:&apos;lastmod&apos;, type:&apos;date&apos;}]&#xA;});&#xA;&#xA;This store is configured to consume a returned object of the form:&#xA;images: [&#xA;{name: &apos;Image one&apos;, url:&apos;/GetImage.php?id=1&apos;, size:46.5, lastmod: new Date(2007, 10, 29)},&#xA;{name: &apos;Image Two&apos;, url:&apos;/GetImage.php?id=2&apos;, size:43.2, lastmod: new Date(2007, 10, 30)}&#xA;&#xA;An object literal of this form could also be used as the {@link #data} config option.&#xA;*Note: Although not listed here, this class accepts all of the configuration options of&#xA;{@link Ext.data.JsonReader JsonReader}." line="48" name="JsonStore" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="49" lineend="83" name="Connection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The class encapsulates a connection to the page&apos;s originating domain, allowing requests to be made&#xA;either to a configured URL, or to a URL specified at request time.&#xA;Requests made by this class are asynchronous, and will return immediately. No data from&#xA;the server will be available to the statement immediately following the {@link #request} call.&#xA;To process returned data, use a&#xA;success callback&#xA;in the request options object,&#xA;or an {@link #requestcomplete event listener}.&#xA;File UploadsFile uploads are not performed using normal &quot;Ajax&quot; techniques, that&#xA;is they are not performed using XMLHttpRequests. Instead the form is submitted in the standard&#xA;manner with the DOM &amp;lt;form&gt; element temporarily modified to have its&#xA;target set to refer&#xA;to a dynamically generated, hidden &amp;lt;iframe&gt; which is inserted into the document&#xA;but removed after the return data has been gathered.&#xA;The server response is parsed by the browser to create the document for the IFRAME. If the&#xA;server is using JSON to send the return object, then the&#xA;Content-Type header&#xA;must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.&#xA;Characters which are significant to an HTML parser must be sent as HTML entities, so encode&#xA;&quot;&amp;lt;&quot; as &quot;&amp;amp;lt;&quot;, &quot;&amp;amp;&quot; as &quot;&amp;amp;amp;&quot; etc.&#xA;The response text is retrieved from the document, and a fake XMLHttpRequest object&#xA;is created containing a responseText property in order to conform to the&#xA;requirements of event handlers and callbacks.&#xA;Be aware that file upload packets are sent with the content type multipart/form&#xA;and some server technologies (notably JEE) may require some custom processing in order to&#xA;retrieve parameter names and parameter values from the packet content." ilk="function" line="49" lineend="83" name="Connection" signature="Connection(config)">
              <variable citdl="Object" doc="a configuration object." ilk="argument" name="config" />
              <variable citdl="Connection" name="this" />
            </scope>
            <variable citdl="Number" doc="The url config may be a function which returns the URL to use for the Ajax request. The scope&#xA;(this reference) of the function is the scope option passed to the {@link #request} method." line="237" name="timeout" />
            <variable citdl="Boolean" line="242" name="autoAbort" />
            <variable citdl="Boolean" line="248" name="disableCaching" />
            <variable citdl="String" doc="through a cache buster. Defaults to &apos;_dc&apos;" line="255" name="disableCachingParam" />
            <scope doc="Sends an HTTP request to a remote server.&#xA;Important: Ajax server requests are asynchronous, and this call will&#xA;return before the response has been received. Process any returned data&#xA;in a callback function.&#xA;&#xA;Ext.Ajax.request({&#xA;url: &apos;ajax_demo/sample.json&apos;,&#xA;success: function(response, opts) {&#xA;var obj = Ext.decode(response.responseText);&#xA;console.dir(obj);&#xA;failure: function(response, opts) {&#xA;console.log(&apos;server-side failure with status code &apos; + response.status);&#xA;});&#xA;&#xA;To execute a callback function in the correct scope, use the scope option." ilk="function" line="354" lineend="422" name="request" returns="Number" signature="request(o)">
              <variable ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this" line="355" name="me" />
              <scope attributes="__local__ private" ilk="function" line="364" lineend="366" name="(anonymous)" signature="(anonymous)()" />
              <variable attributes="__local__ private" citdl="o.url" line="372" name="url" />
              <variable attributes="__local__ private" citdl="Object" line="372" lineend="377" name="cb">
                <variable citdl="handleResponse" line="372" name="success" />
                <variable citdl="handleFailure" line="373" name="failure" />
                <variable citdl="me" line="374" name="scope" />
                <variable citdl="Object" line="375" lineend="375" name="argument">
                  <variable citdl="o" line="375" name="options" />
                </variable>
                <variable citdl="o.timeout" line="376" name="timeout" />
              </variable>
              <variable attributes="__local__ private" citdl="o.params" line="372" name="p" />
              <variable attributes="__local__ private" citdl="o.method" line="372" name="method" />
              <variable attributes="__local__ private" line="378" name="form" />
              <variable attributes="__local__ private" citdl="Ext.lib.Ajax.serializeForm()" line="379" name="serForm" />
              <variable attributes="__local__ private" citdl="o.disableCachingParam" line="404" name="dcp" />
            </scope>
            <scope doc="Determine whether this object has a request outstanding." ilk="function" line="429" lineend="431" name="isLoading" returns="Boolean" signature="isLoading(transId)">
              <variable ilk="argument" name="transId" />
            </scope>
            <scope doc="Aborts any outstanding request." ilk="function" line="437" lineend="441" name="abort" signature="abort(transId)">
              <variable ilk="argument" name="transId" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="52" lineend="201" name="DataWriter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Ext.data.DataWriter facilitates create, update, and destroy actions between&#xA;an Ext.data.Store and a server-side framework. A Writer enabled Store will&#xA;automatically manage the Ajax requests to perform CRUD actions on a Store.&#xA;Ext.data.DataWriter is an abstract base class which is intended to be extended&#xA;and should not be created directly. For existing implementations, see&#xA;{@link Ext.data.JsonWriter}.&#xA;Creating a writer is simple:&#xA;&#xA;var writer = new Ext.data.JsonWriter();&#xA;&#xA;The proxy for a writer enabled store can be configured with a simple url:&#xA;&#xA;// Create a standard HttpProxy instance.&#xA;var proxy = new Ext.data.HttpProxy({&#xA;url: &apos;app.php/users&apos;&#xA;});&#xA;&#xA;For finer grained control, the proxy may also be configured with an api:&#xA;&#xA;// Use the api specification&#xA;var proxy = new Ext.data.HttpProxy({&#xA;api: {&#xA;read    : &apos;app.php/users/read&apos;,&#xA;create  : &apos;app.php/users/create&apos;,&#xA;update  : &apos;app.php/users/update&apos;,&#xA;destroy : &apos;app.php/users/destroy&apos;&#xA;});&#xA;&#xA;Creating a Writer enabled store:&#xA;&#xA;var store = new Ext.data.Store({&#xA;proxy: proxy,&#xA;reader: reader,&#xA;writer: writer&#xA;});" ilk="function" line="52" lineend="59" name="DataWriter" signature="DataWriter(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DataWriter" name="this" />
            </scope>
            <variable citdl="Boolean" doc="false by default.  Set true to have DataWriter return ALL fields of a modified&#xA;record -- not just those that changed.&#xA;false to have DataWriter only request modified fields from a record." line="69" name="writeAllFields" />
            <variable citdl="Boolean" doc="false by default.  Set true to have the DataWriter always write HTTP params as a list,&#xA;even when acting upon a single record." line="75" name="listful" />
            <scope ilk="function" line="84" lineend="86" name="write" signature="write(action, params, rs)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="abstract method meant to be overridden by all DataWriter extensions.  It&apos;s the extension&apos;s job to apply the &quot;data&quot; to the &quot;params&quot;.&#xA;The data-object provided to render is populated with data according to the meta-info defined in the user&apos;s DataReader config," line="96" name="render" />
            <scope attributes="private" doc="PRIVATE: update" ilk="function" line="104" lineend="121" name="update" returns="params" signature="update(rs)">
              <variable citdl="Array" doc="Record(s) to write" ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="105" lineend="105" name="params" />
              <variable attributes="__local__ private" citdl="Array" line="108" name="data" />
              <variable attributes="__local__ private" citdl="Array" line="108" name="ids" />
              <scope attributes="__local__ private" ilk="function" line="109" lineend="112" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="(e.g.: {@link Ext.data.JsonWriter#saveRecord JsonWriter.saveRecord}" line="127" name="updateRecord" />
            <scope attributes="private" doc="PRIVATE: create" ilk="function" line="135" lineend="148" name="create" returns="params" signature="create(rs)">
              <variable citdl="Array" doc="Record(s) to write" ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="136" lineend="136" name="params" />
              <variable attributes="__local__ private" citdl="Array" line="138" name="data" />
              <scope attributes="__local__ private" ilk="function" line="139" lineend="141" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="(e.g.: {@link Ext.data.JsonWriter#createRecord JsonWriter.createRecord})" line="154" name="createRecord" />
            <scope attributes="private" doc="PRIVATE: destroy" ilk="function" line="162" lineend="175" name="destroy" returns="params" signature="destroy(rs)">
              <variable citdl="Array" doc="Record(s) to write" ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="163" lineend="163" name="params" />
              <variable attributes="__local__ private" citdl="Array" line="166" name="data" />
              <variable attributes="__local__ private" citdl="Array" line="166" name="ids" />
              <scope attributes="__local__ private" ilk="function" line="167" lineend="169" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="(e.g.: {@link Ext.data.JsonWriter#destroyRecord JsonWriter.destroyRecord})" line="181" name="destroyRecord" />
            <scope attributes="private" doc="PRIVATE: Converts a Record to a hash" ilk="function" line="188" lineend="200" name="toHash" returns="data" signature="toHash(rec)">
              <variable ilk="argument" name="rec" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="rec.fields.map" line="190" name="map" />
              <variable attributes="__local__ private" citdl="Object" line="190" lineend="190" name="data" />
              <variable attributes="__local__ private" line="191" name="raw" />
              <variable attributes="__local__ private" line="192" name="m" />
            </scope>
          </scope>
          <scope classrefs="Ext.data.DataReader" ilk="class" line="57" lineend="60" name="XmlReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document&#xA;based on mappings in a provided {@link Ext.data.Record} constructor.&#xA;Note: that in order for the browser to parse a returned XML document, the Content-Type&#xA;header in the HTTP response must be set to &quot;text/xml&quot; or &quot;application/xml&quot;.&#xA;Example code:&#xA;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: &apos;name&apos;},     // &quot;mapping&quot; property not needed if it is the same as &quot;name&quot;&#xA;{name: &apos;occupation&apos;}                 // This field will use &quot;occupation&quot; as the mapping.&#xA;]);&#xA;var myReader = new Ext.data.XmlReader({&#xA;totalRecords: &quot;results&quot;, // The element which contains the total dataset size (optional)&#xA;record: &quot;row&quot;,           // The repeated element which contains row information&#xA;id: &quot;id&quot;                 // The element within the row that provides an ID for the record (optional)&#xA;}, Employee);&#xA;&#xA;This would consume an XML file like this:&#xA;&#xA;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xA;&amp;lt;dataset&gt;&#xA;&amp;lt;results&gt;2&amp;lt;/results&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;1&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Bill&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Gardener&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;2&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Ben&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Horticulturalist&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;/dataset&gt;" ilk="function" line="57" lineend="60" name="XmlReader" signature="XmlReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options" ilk="argument" name="meta" />
              <variable citdl="Object" doc="Either an Array of field definition objects as passed to&#xA;{@link Ext.data.Record#create}, or a Record constructor object created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="XmlReader" name="this" />
            </scope>
            <scope doc="This method is only used by a DataProxy which has retrieved data from a remote server." ilk="function" line="69" lineend="75" name="read" returns="Object" signature="read(response)">
              <variable citdl="Object" doc="The XHR object which contains the parsed XML document.  The response is expected&#xA;to contain a property called responseXML which refers to an XML document object." ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.responseXML" line="70" name="doc" />
            </scope>
            <variable citdl="String" line="72" name="message" />
            <scope doc="Create a data block containing Ext.data.Records from an XML document." ilk="function" line="83" lineend="124" name="readRecords" returns="Object" signature="readRecords(doc)">
              <variable citdl="Object" doc="A parsed XML document." ilk="argument" name="doc" />
              <variable attributes="__local__ private" citdl="doc.documentElement" line="89" name="root" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery" line="90" name="q" />
              <variable attributes="__local__ private" citdl="this.recordType" line="91" name="recordType" />
              <variable attributes="__local__ private" citdl="recordType.prototype.fields" line="91" name="fields" />
              <variable attributes="__local__ private" citdl="this.meta.idPath" line="92" name="sid" />
              <variable attributes="__local__ private" citdl="Number" line="93" name="totalRecords" />
              <variable attributes="__local__ private" citdl="Boolean" line="93" name="success" />
              <variable attributes="__local__ private" citdl="q.selectValue()" line="99" name="sv" />
              <variable attributes="__local__ private" citdl="Array" line="102" name="records" />
              <variable attributes="__local__ private" citdl="q.select()" line="103" name="ns" />
              <variable attributes="__local__ private" citdl="ns[i]" line="105" name="n" />
              <variable attributes="__local__ private" citdl="Object" line="106" lineend="106" name="values" />
              <variable attributes="__local__ private" citdl="sid" line="107" name="id" />
              <variable attributes="__local__ private" citdl="fields.items[j]" line="109" name="f" />
              <variable attributes="__local__ private" citdl="q.selectValue()" line="110" name="v" />
              <variable attributes="__local__ private" citdl="recordType" line="114" name="record" />
            </scope>
            <variable citdl="XMLDocument" doc="After any data loads/reads, the raw XML Document is available for further custom processing." line="88" name="xmlData" />
            <variable citdl="Ext.emptyFn" line="127" name="readResponse" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Formerly known as &quot;SimpleStore&quot;.&#xA;Small helper class to make creating {@link Ext.data.Store}s from Array data easier.&#xA;An ArrayStore will be automatically configured with a {@link Ext.data.ArrayReader}.&#xA;A store configuration would be something like:&#xA;var store = new Ext.data.ArrayStore({&#xA;// store configs&#xA;autoDestroy: true,&#xA;storeId: &apos;myStore&apos;,&#xA;// reader configs&#xA;idIndex: 0,&#xA;fields: [&#xA;&apos;company&apos;,&#xA;{name: &apos;price&apos;, type: &apos;float&apos;},&#xA;{name: &apos;change&apos;, type: &apos;float&apos;},&#xA;{name: &apos;pctChange&apos;, type: &apos;float&apos;},&#xA;{name: &apos;lastChange&apos;, type: &apos;date&apos;, dateFormat: &apos;n/j h:ia&apos;}&#xA;});&#xA;&#xA;This store is configured to consume a returned object of the form:&#xA;var myData = [&#xA;[&apos;3m Co&apos;,71.72,0.02,0.03,&apos;9/1 12:00am&apos;],&#xA;[&apos;Alcoa Inc&apos;,29.01,0.42,1.47,&apos;9/1 12:00am&apos;],&#xA;[&apos;Boeing Co.&apos;,75.43,0.53,0.71,&apos;9/1 12:00am&apos;],&#xA;[&apos;Hewlett-Packard Co.&apos;,36.53,-0.03,-0.08,&apos;9/1 12:00am&apos;],&#xA;[&apos;Wal-Mart Stores, Inc.&apos;,45.45,0.73,1.63,&apos;9/1 12:00am&apos;]&#xA;&#xA;An object literal of this form could also be used as the {@link #data} config option.&#xA;*Note: Although not listed here, this class accepts all of the configuration options of&#xA;{@link Ext.data.ArrayReader ArrayReader}." line="65" name="ArrayStore" />
          <variable citdl="Ext.data.ArrayStore" line="69" name="SimpleStore" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Small helper class to make creating {@link Ext.data.Store}s from XML data easier.&#xA;A XmlStore will be automatically configured with a {@link Ext.data.XmlReader}.&#xA;A store configuration would be something like:&#xA;var store = new Ext.data.XmlStore({&#xA;// store configs&#xA;autoDestroy: true,&#xA;storeId: &apos;myStore&apos;,&#xA;url: &apos;sheldon.xml&apos;, // automatically configures a HttpProxy&#xA;// reader configs&#xA;record: &apos;Item&apos;, // records will have an &quot;Item&quot; tag&#xA;idPath: &apos;ASIN&apos;,&#xA;totalRecords: &apos;@TotalResults&apos;&#xA;fields: [&#xA;// set up the fields mapping into the xml doc&#xA;// The first needs mapping, the others are very basic&#xA;{name: &apos;Author&apos;, mapping: &apos;ItemAttributes &gt; Author&apos;},&#xA;&apos;Title&apos;, &apos;Manufacturer&apos;, &apos;ProductGroup&apos;&#xA;});&#xA;&#xA;This store is configured to consume a returned object of the form:&#xA;&amp;#60?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xA;&amp;#60ItemSearchResponse xmlns=&quot;http://webservices.amazon.com/AWSECommerceService/2009-05-15&quot;&gt;&#xA;&amp;#60Items&gt;&#xA;&amp;#60Request&gt;&#xA;&amp;#60IsValid&gt;True&amp;#60/IsValid&gt;&#xA;&amp;#60ItemSearchRequest&gt;&#xA;&amp;#60Author&gt;Sidney Sheldon&amp;#60/Author&gt;&#xA;&amp;#60SearchIndex&gt;Books&amp;#60/SearchIndex&gt;&#xA;&amp;#60/ItemSearchRequest&gt;&#xA;&amp;#60/Request&gt;&#xA;&amp;#60TotalResults&gt;203&amp;#60/TotalResults&gt;&#xA;&amp;#60TotalPages&gt;21&amp;#60/TotalPages&gt;&#xA;&amp;#60Item&gt;&#xA;&amp;#60ASIN&gt;0446355453&amp;#60/ASIN&gt;&#xA;&amp;#60DetailPageURL&gt;&#xA;http://www.amazon.com/&#xA;&amp;#60/DetailPageURL&gt;&#xA;&amp;#60ItemAttributes&gt;&#xA;&amp;#60Author&gt;Sidney Sheldon&amp;#60/Author&gt;&#xA;&amp;#60Manufacturer&gt;Warner Books&amp;#60/Manufacturer&gt;&#xA;&amp;#60ProductGroup&gt;Book&amp;#60/ProductGroup&gt;&#xA;&amp;#60Title&gt;Master of the Game&amp;#60/Title&gt;&#xA;&amp;#60/ItemAttributes&gt;&#xA;&amp;#60/Item&gt;&#xA;&amp;#60/Items&gt;&#xA;&amp;#60/ItemSearchResponse&gt;&#xA;&#xA;An object literal of this form could also be used as the {@link #data} config option.&#xA;Note: Although not listed here, this class accepts all of the configuration options of&#xA;{@link Ext.data.XmlReader XmlReader}." line="74" name="XmlStore" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="76" lineend="348" name="Store">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Store class encapsulates a client side cache of {@link Ext.data.Record Record}&#xA;objects which provide input data for Components such as the {@link Ext.grid.GridPanel GridPanel},&#xA;the {@link Ext.form.ComboBox ComboBox}, or the {@link Ext.DataView DataView}.&#xA;Retrieving Data&#xA;A Store object may access a data object using:&#xA;{@link #proxy configured implementation} of {@link Ext.data.DataProxy DataProxy}&#xA;{@link #data} to automatically pass in data&#xA;{@link #loadData} to manually pass in data&#xA;&#xA;Reading Data&#xA;A Store object has no inherent knowledge of the format of the data object (it could be&#xA;an Array, XML, or JSON). A Store object uses an appropriate {@link #reader configured implementation}&#xA;of a {@link Ext.data.DataReader DataReader} to create {@link Ext.data.Record Record} instances from the data&#xA;object.&#xA;Store Types&#xA;There are several implementations of Store available which are customized for use with&#xA;a specific DataReader implementation.  Here is an example using an ArrayStore which implicitly&#xA;creates a reader commensurate to an Array data object.&#xA;&#xA;var myStore = new Ext.data.ArrayStore({&#xA;fields: [&apos;fullname&apos;, &apos;first&apos;],&#xA;idIndex: 0 // id for each record will be the first element&#xA;});&#xA;&#xA;For custom implementations create a basic {@link Ext.data.Store} configured as needed:&#xA;&#xA;// create a {@link Ext.data.Record Record} constructor:&#xA;var rt = Ext.data.Record.create([&#xA;{name: &apos;fullname&apos;},&#xA;{name: &apos;first&apos;}&#xA;]);&#xA;var myStore = new Ext.data.Store({&#xA;// explicitly create reader&#xA;reader: new Ext.data.ArrayReader(&#xA;idIndex: 0  // id for each record will be the first element&#xA;rt // recordType&#xA;});&#xA;&#xA;Load some data into store (note the data object is an array which corresponds to the reader):&#xA;&#xA;var myData = [&#xA;[1, &apos;Fred Flintstone&apos;, &apos;Fred&apos;],  // note that id for the record is the first element&#xA;[2, &apos;Barney Rubble&apos;, &apos;Barney&apos;]&#xA;myStore.loadData(myData);&#xA;&#xA;Records are cached and made available through accessor functions.  An example of adding&#xA;a record to the store:&#xA;&#xA;var defaultData = {&#xA;fullname: &apos;Full Name&apos;,&#xA;first: &apos;First Name&apos;&#xA;var recId = 100; // provide unique id for the record&#xA;var r = new myStore.recordType(defaultData, ++recId); // create new record&#xA;myStore.{@link #insert}(0, r); // insert a new record into the store (also see {@link #add})" ilk="function" line="76" lineend="348" name="Store" signature="Store(config)">
              <variable citdl="Object" doc="A config object containing the objects needed for the Store to access data,&#xA;and read the data into Records." ilk="argument" name="config" />
              <variable citdl="Store" name="this" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="77" name="data" />
            <variable citdl="Object" doc="See the {@link #baseParams corresponding configuration option}&#xA;for a description of this property.&#xA;To modify this property see {@link #setBaseParam}." line="87" lineend="87" name="baseParams" />
            <variable citdl="Array" line="90" name="removed" />
            <variable citdl="config.data" line="93" name="inlineData" />
            <variable citdl="Ext.data.HttpProxy" line="102" name="proxy" />
            <variable citdl="Boolean" line="107" name="batch" />
            <variable citdl="this.reader.recordType" line="113" name="recordType" />
            <variable citdl="Ext.util.MixedCollection" doc="A {@link Ext.util.MixedCollection MixedCollection} containing the defined {@link Ext.data.Field Field}s&#xA;for the {@link Ext.data.Record Records} stored in this Store. Read-only." line="196" name="fields" />
            <variable citdl="Array" line="198" name="modified" />
            <variable citdl="Object" line="324" lineend="324" name="sortToggle" />
            <variable citdl="this.id" line="334" name="storeId" />
            <variable doc="Note: if a (deprecated) {@link #id} is specified it will supersede the storeId&#xA;assignment.&#xA;&#xA;var writer = new {@link Ext.data.JsonWriter}({&#xA;encode: true,&#xA;writeAllFields: true // write all fields, not just those that changed&#xA;});&#xA;// Typical Store collecting the Proxy, Reader and Writer together.&#xA;var store = new Ext.data.Store({&#xA;storeId: &apos;user&apos;,&#xA;root: &apos;records&apos;,&#xA;proxy: proxy,&#xA;reader: reader,&#xA;writer: writer,     //" line="407" name="writer" />
            <variable citdl="Boolean" doc="An object containing properties which are to be sent as parameters&#xA;for every HTTP request.&#xA;Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.&#xA;Note: baseParams may be superseded by any params&#xA;specified in a {@link #load} request, see {@link #load}&#xA;for more details.&#xA;This property may be modified after creation using the {@link #setBaseParam}&#xA;method.&#xA;sortInfo: {&#xA;field: &apos;fieldName&apos;,&#xA;direction: &apos;ASC&apos; // or &apos;DESC&apos; (case sensitive for local sorting)" line="443" name="remoteSort" />
            <variable citdl="Boolean" doc="to is destroyed (defaults to false).&#xA;Note: this should be set to true when using stores that are bound to only 1 component." line="450" name="autoDestroy" />
            <variable citdl="Boolean" doc="the store is loaded or when a record is removed (defaults to false). See {@link #getModifiedRecords}&#xA;for the accessor method to retrieve the modified records." line="457" name="pruneModifiedRecords" />
            <variable citdl="o" doc="Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}&#xA;for the details of what this may contain. This may be useful for accessing any params which were used&#xA;to load the current Record cache." line="465" name="lastOptions" />
            <variable citdl="Boolean" doc="Defaults to true causing the store to automatically {@link #save} records to&#xA;the server when a record is modified (ie: becomes &apos;dirty&apos;). Specify false to manually call {@link #save}&#xA;to send all modifiedRecords to the server.&#xA;Note: each CRUD action will be sent as a separate request." line="474" name="autoSave" />
            <variable citdl="Boolean" doc="Defaults to false.  Set to true to have the Store and the set&#xA;Proxy operate in a RESTful manner. The store will automatically generate GET, POST,&#xA;PUT and DELETE requests to the server. The HTTP method used for any given CRUD&#xA;action is described in {@link Ext.data.Api#restActions}.  For additional information&#xA;see {@link Ext.data.DataProxy#restful}.&#xA;Note: if {@link #restful}:true batch will&#xA;internally be set to false." line="497" name="restful" />
            <variable doc="An object containing properties which specify the names of the paging and&#xA;sorting parameters passed to remote servers when loading blocks of data. By default, this&#xA;object takes the following form:&#xA;start : &apos;start&apos;,  // The parameter name which specifies the start row&#xA;limit : &apos;limit&apos;,  // The parameter name which specifies number of rows to return&#xA;sort : &apos;sort&apos;,    // The parameter name which specifies the column to sort on&#xA;dir : &apos;dir&apos;       // The parameter name which specifies the sort direction&#xA;The server must produce the requested data block upon receipt of these parameter names.&#xA;If different parameter names are required, this property can be overriden using a configuration&#xA;property.&#xA;A {@link Ext.PagingToolbar PagingToolbar} bound to this Store uses this property to determine&#xA;the parameter names to use in its {@link #load requests}." line="517" name="paramNames" />
            <variable citdl="Object" doc="Provides the default values for the {@link #paramNames} property. To globally modify the parameters&#xA;for all stores, this object should be changed on the store prototype." line="524" lineend="529" name="defaultParamNames">
              <variable citdl="String" line="525" name="start" />
              <variable citdl="String" line="526" name="limit" />
              <variable citdl="String" line="527" name="sort" />
              <variable citdl="String" line="528" name="dir" />
            </variable>
            <scope doc="Destroys the store." ilk="function" line="534" lineend="542" name="destroy" signature="destroy()" />
            <variable citdl="this.writer" line="540" name="reader" />
            <scope doc="Add Records to the Store and fires the {@link #add} event.  To add Records&#xA;to the store from a remote source use {@link #load}({add:true}).&#xA;See also {@link #recordType} and {@link #insert}." ilk="function" line="551" lineend="565" name="add" signature="add(records)">
              <variable citdl="Array" doc="An Array of Ext.data.Record objects&#xA;to add to the cache. See {@link #recordType}." ilk="argument" name="records" />
              <variable attributes="__local__ private" citdl="this.data.length" line="559" name="index" />
            </scope>
            <scope doc="(Local sort only) Inserts the passed Record into the Store at the index where it&#xA;should go based on the current sort information." ilk="function" line="572" lineend="575" name="addSorted" signature="addSorted(record)">
              <variable citdl="Ext.data.Record" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.findInsertIndex()" line="573" name="index" />
            </scope>
            <scope doc="Remove a Record from the Store and fires the {@link #remove} event." ilk="function" line="581" lineend="593" name="remove" signature="remove(record)">
              <variable citdl="Ext.data.Record" doc="The Ext.data.Record object to remove from the cache." ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.data.indexOf()" line="582" name="index" />
            </scope>
            <scope doc="Remove a Record from the Store at the specified index. Fires the {@link #remove} event." ilk="function" line="599" lineend="601" name="removeAt" signature="removeAt(index)">
              <variable citdl="Number" doc="The index of the record to remove." ilk="argument" name="index" />
            </scope>
            <scope doc="Remove all Records from the Store and fires the {@link #clear} event." ilk="function" line="606" lineend="615" name="removeAll" signature="removeAll()" />
            <scope doc="Inserts Records into the Store at the given index and fires the {@link #add} event.&#xA;See also {@link #add} and {@link #addSorted}." ilk="function" line="623" lineend="630" name="insert" signature="insert(index, records)">
              <variable citdl="Number" doc="The start index at which to insert the passed Records." ilk="argument" name="index" />
              <variable citdl="Array" doc="An Array of Ext.data.Record objects to add to the cache." ilk="argument" name="records" />
            </scope>
            <scope doc="Get the index within the cache of the passed Record." ilk="function" line="637" lineend="639" name="indexOf" returns="Number" signature="indexOf(record)">
              <variable citdl="Ext.data.Record" doc="The Ext.data.Record object to find." ilk="argument" name="record" />
            </scope>
            <scope doc="Get the index within the cache of the Record with the passed id." ilk="function" line="646" lineend="648" name="indexOfId" returns="Number" signature="indexOfId(id)">
              <variable citdl="String" doc="The id of the Record to find." ilk="argument" name="id" />
            </scope>
            <scope doc="Get the Record with the specified id." ilk="function" line="655" lineend="657" name="getById" returns="Ext.data.Record" signature="getById(id)">
              <variable citdl="String" doc="The id of the Record to find." ilk="argument" name="id" />
            </scope>
            <scope doc="Get the Record at the specified index." ilk="function" line="664" lineend="666" name="getAt" returns="Ext.data.Record" signature="getAt(index)">
              <variable citdl="Number" doc="The index of the Record to find." ilk="argument" name="index" />
            </scope>
            <scope doc="Returns a range of Records between specified indices." ilk="function" line="674" lineend="676" name="getRange" returns="Array" signature="getRange(start, end)">
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
            </scope>
            <scope ilk="function" line="679" lineend="684" name="storeOptions" signature="storeOptions(o)">
              <variable citdl="Ext.apply()" ilk="argument" name="o" />
            </scope>
            <scope doc="Loads the Record cache from the configured {@link #proxy} using the configured {@link #reader}.&#xA;Notes:&#xA;Important: loading is asynchronous! This call will return before the new data has been&#xA;loaded. To perform any post-processing where information from the load call is required, specify&#xA;the callback function to be called, or use a {@link Ext.util.Observable#listeners a &apos;load&apos; event handler}.&#xA;If using {@link Ext.PagingToolbar remote paging}, the first load call must specify the start and limit&#xA;properties in the options.params property to establish the initial position within the&#xA;dataset, and the number of Records to cache on each read from the Proxy.&#xA;If using {@link #remoteSort remote sorting}, the configured {@link #sortInfo}&#xA;will be automatically included with the posted parameters according to the specified&#xA;{@link #paramNames}." ilk="function" line="717" lineend="732" name="load" returns="Boolean" signature="load(options)">
              <variable citdl="Object" doc="An object containing properties which control loading options:&#xA;params :ObjectAn object containing properties to pass as HTTP&#xA;parameters to a remote data source. Note: params will override any&#xA;{@link #baseParams} of the same name.&#xA;Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.&#xA;callback : FunctionA function to be called after the Records&#xA;have been loaded. The callback is called after the load event and is passed the following arguments:&#xA;r : Ext.data.Record[]&#xA;options: Options object from the load call&#xA;success: Boolean success indicator&#xA;scope : ObjectScope with which to call the callback (defaults&#xA;to the Store object)&#xA;add : BooleanIndicator to append loaded records rather than&#xA;replace the current cache.  Note: see note for {@link #loadData}" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="this.paramNames" line="721" name="pn" />
            </scope>
            <scope attributes="private" doc="PRIVATE: updateRecord  Should not be used directly.  This method will be called automatically if a Writer is set.&#xA;Listens to &apos;update&apos; event." ilk="function" line="742" lineend="746" name="updateRecord" signature="updateRecord(store, record, action)">
              <variable citdl="Object" ilk="argument" name="store" />
              <variable citdl="Object" ilk="argument" name="record" />
              <variable citdl="Object" ilk="argument" name="action" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Should not be used directly.  Store#add will call this automatically if a Writer is set" ilk="function" line="755" lineend="765" name="createRecords" signature="createRecords(store, rs, index)">
              <variable citdl="Object" ilk="argument" name="store" />
              <variable citdl="Object" ilk="argument" name="rs" />
              <variable citdl="Object" ilk="argument" name="index" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Destroys a record or records.  Should not be used directly.  It&apos;s called by Store#remove if a Writer is set." ilk="function" line="774" lineend="790" name="destroyRecord" signature="destroyRecord(store, record, index)">
              <variable ilk="argument" name="store" />
              <variable ilk="argument" name="record" />
              <variable citdl="Number" ilk="argument" name="index" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This method should generally not be used directly.  This method is called internally&#xA;by {@link #load}, or if a Writer is set will be called automatically when {@link #add},&#xA;{@link #remove}, or {@link #update} events fire." ilk="function" line="802" lineend="844" name="execute" returns="doRequest" signature="execute(action, rs, options)">
              <variable citdl="String" doc="Action name (&apos;read&apos;, &apos;create&apos;, &apos;update&apos;, or &apos;destroy&apos;)" ilk="argument" name="action" />
              <variable citdl="Array" ilk="argument" name="rs" />
              <variable citdl="Object" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="Boolean" line="814" name="doRequest" />
              <variable attributes="__local__ private" citdl="Ext.apply()" line="835" name="params" />
            </scope>
            <scope doc="Saves all pending changes to the store.  If the commensurate Ext.data.Api.actions action is not configured, then&#xA;the configured {@link #url} will be used.&#xA;&#xA;change            url&#xA;---------------   --------------------&#xA;removed records   Ext.data.Api.actions.destroy&#xA;phantom records   Ext.data.Api.actions.create&#xA;{@link #getModifiedRecords modified records}  Ext.data.Api.actions.update" ilk="function" line="859" lineend="897" name="save" returns="Boolean" signature="save()">
              <variable attributes="__local__ private" citdl="Array" line="870" name="rs" />
              <variable attributes="__local__ private" citdl="Array" line="876" name="phantoms" />
              <variable attributes="__local__ private" citdl="rs.splice().shift()" line="879" name="rec" />
            </scope>
            <scope ilk="function" line="900" lineend="915" name="doTransaction" signature="doTransaction(action, rs)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <scope attributes="__local__ private" ilk="function" line="901" lineend="907" name="transaction" signature="transaction(records)">
                <variable ilk="argument" name="records" />
              </scope>
            </scope>
            <scope ilk="function" line="919" lineend="929" name="createCallback" signature="createCallback(action, rs)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable attributes="__local__ private" citdl="Ext.data.Api.actions" line="920" name="actions" />
            </scope>
            <scope ilk="function" line="933" lineend="941" name="clearModified" signature="clearModified(rs)">
              <variable ilk="argument" name="rs" />
            </scope>
            <scope ilk="function" line="944" lineend="956" name="reMap" signature="reMap(record)">
              <variable ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.data.keys.indexOf()" line="952" name="index" />
            </scope>
            <scope ilk="function" line="959" lineend="973" name="onCreateRecords" signature="onCreateRecords(success, rs, data)">
              <variable ilk="argument" name="success" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="976" lineend="988" name="onUpdateRecords" signature="onUpdateRecords(success, rs, data)">
              <variable ilk="argument" name="success" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="991" lineend="1004" name="onDestroyRecords" signature="onDestroyRecords(success, rs, data)">
              <variable ilk="argument" name="success" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="1007" lineend="1010" name="handleException" signature="handleException(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Reloads the Record cache from the configured Proxy using the configured {@link Ext.data.Reader Reader} and&#xA;the options from the last load operation performed.&#xA;Note: see the Important note in {@link #load}." ilk="function" line="1020" lineend="1022" name="reload" signature="reload(options)">
              <variable citdl="Object" doc="(optional) An Object containing {@link #load loading options} which may&#xA;override the options used in the last {@link #load} operation. See {@link #load} for details (defaults to&#xA;null, in which case the {@link #lastOptions} are used)." ilk="argument" name="options" />
            </scope>
            <scope ilk="function" line="1026" lineend="1061" name="loadRecords" signature="loadRecords(o, options, success)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="options" />
              <variable ilk="argument" name="success" />
              <variable attributes="__local__ private" citdl="o.records" line="1036" name="r" />
              <variable attributes="__local__ private" citdl="o.totalRecords" line="1036" name="t" />
            </scope>
            <variable citdl="t" line="1050" name="totalLength" />
            <scope doc="Loads data from a passed data block and fires the {@link #load} event. A {@link Ext.data.Reader Reader}&#xA;which understands the format of the data must have been configured in the constructor." ilk="function" line="1075" lineend="1078" name="loadData" signature="loadData(o, append)">
              <variable ilk="argument" name="o" />
              <variable citdl="Boolean" doc="(Optional) true to append the new Records rather the default to replace&#xA;the existing cache.&#xA;Note: that Records in a Store are keyed by their {@link Ext.data.Record#id id}, so added Records&#xA;with ids which are already present in the Store will replace existing Records. Only Records with&#xA;new, unique ids will be added." ilk="argument" name="append" />
              <variable attributes="__local__ private" citdl="this.reader.readRecords()" line="1076" name="r" />
            </scope>
            <scope doc="Gets the number of cached records.&#xA;If using paging, this may not be the total size of the dataset. If the data object&#xA;used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns&#xA;the dataset size.  Note: see the Important note in {@link #load}." ilk="function" line="1087" lineend="1089" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Gets the total number of records in the dataset as returned by the server.&#xA;If using paging, for this to be accurate, the data object used by the {@link #reader Reader}&#xA;must contain the dataset size. For remote data sources, the value for this property&#xA;(totalProperty for {@link Ext.data.JsonReader JsonReader},&#xA;totalRecords for {@link Ext.data.XmlReader XmlReader}) shall be returned by a query on the server.&#xA;Note: see the Important note in {@link #load}." ilk="function" line="1102" lineend="1104" name="getTotalCount" returns="Number" signature="getTotalCount()" />
            <scope doc="Returns an object describing the current sort state of this Store." ilk="function" line="1114" lineend="1116" name="getSortState" returns="Object" signature="getSortState()" />
            <scope ilk="function" line="1119" lineend="1124" name="applySort" signature="applySort()">
              <variable attributes="__local__ private" citdl="this.sortInfo" line="1121" name="s" />
              <variable attributes="__local__ private" citdl="s.field" line="1121" name="f" />
            </scope>
            <scope ilk="function" line="1127" lineend="1138" name="sortData" signature="sortData(f, direction)">
              <variable ilk="argument" name="f" />
              <variable citdl="direction" ilk="argument" name="direction" />
              <variable attributes="__local__ private" citdl="this.fields.get().sortType" line="1129" name="st" />
              <scope attributes="__local__ private" ilk="function" line="1130" lineend="1133" name="fn" returns="v1" signature="fn(r1, r2)">
                <variable ilk="argument" name="r1" />
                <variable ilk="argument" name="r2" />
                <variable attributes="__local__ private" citdl="st()" line="1131" name="v1" />
                <variable attributes="__local__ private" citdl="st()" line="1131" name="v2" />
              </scope>
            </scope>
            <scope doc="Sets the default sort column and order to be used by the next {@link #load} operation." ilk="function" line="1145" lineend="1149" name="setDefaultSort" signature="setDefaultSort(field, dir)">
              <variable ilk="argument" name="field" />
              <variable citdl="String" doc="(optional) The sort order, &apos;ASC&apos; or &apos;DESC&apos; (case-sensitive, defaults to &apos;ASC&apos;)" ilk="argument" name="dir" />
            </scope>
            <variable citdl="Object" line="1147" lineend="1174" name="sortInfo">
              <variable citdl="field" line="1147" name="field" />
              <variable citdl="dir" line="1147" name="direction" />
            </variable>
            <scope doc="Sort the Records.&#xA;If remote sorting is used, the sort is performed on the server, and the cache is reloaded. If local&#xA;sorting is used, the cache is sorted internally. See also {@link #remoteSort} and {@link #paramNames}." ilk="function" line="1158" lineend="1188" name="sort" returns="Boolean" signature="sort(fieldName, dir)">
              <variable citdl="String" doc="The name of the field to sort by." ilk="argument" name="fieldName" />
              <variable citdl="String" doc="(optional) The sort order, &apos;ASC&apos; or &apos;DESC&apos; (case-sensitive, defaults to &apos;ASC&apos;)" ilk="argument" name="dir" />
              <variable attributes="__local__ private" citdl="this.fields.get()" line="1159" name="f" />
              <variable attributes="__local__ private" line="1170" name="st" />
              <variable attributes="__local__ private" line="1171" name="si" />
            </scope>
            <scope doc="Calls the specified function for each of the {@link Ext.data.Record Records} in the cache." ilk="function" line="1196" lineend="1198" name="each" signature="each(fn, scope)">
              <variable citdl="Function" doc="The function to call. The {@link Ext.data.Record Record} is passed as the first parameter.&#xA;Returning false aborts and exits the iteration." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to call the function (defaults to the {@link Ext.data.Record Record})." ilk="argument" name="scope" />
            </scope>
            <scope doc="Gets all {@link Ext.data.Record records} modified since the last commit.  Modified records are&#xA;persisted across load operations (e.g., during paging). Note: deleted records are not&#xA;included.  See also {@link #pruneModifiedRecords} and&#xA;{@link Ext.data.Record}{@link Ext.data.Record#markDirty markDirty}..&#xA;*{@link Ext.data.Record}{@link Ext.data.Record#modified modified}.." ilk="function" line="1209" lineend="1211" name="getModifiedRecords" returns="Array" signature="getModifiedRecords()" />
            <scope ilk="function" line="1214" lineend="1222" name="createFilterFn" returns="value.test()" signature="createFilterFn(property, value, anyMatch, caseSensitive)">
              <variable ilk="argument" name="property" />
              <variable citdl="this.data.createValueMatcher()" ilk="argument" name="value" />
              <variable ilk="argument" name="anyMatch" />
              <variable ilk="argument" name="caseSensitive" />
            </scope>
            <scope doc="Sums the value of property for each {@link Ext.data.Record record} between start&#xA;and end and returns the result." ilk="function" line="1232" lineend="1241" name="sum" returns="Number" signature="sum(property, start, end)">
              <variable citdl="String" doc="A field in each record" ilk="argument" name="property" />
              <variable citdl="Number" doc="(optional) The record index to start at (defaults to 0)" ilk="argument" name="start" />
              <variable citdl="Number" doc="(optional) The last record index to include (defaults to length - 1)" ilk="argument" name="end" />
              <variable attributes="__local__ private" citdl="Number" line="1233" name="v" />
              <variable attributes="__local__ private" citdl="this.data.items" line="1233" name="rs" />
            </scope>
            <scope doc="Filter the {@link Ext.data.Record records} by a specified property." ilk="function" line="1251" lineend="1254" name="filter" returns="fn" signature="filter(property, value, anyMatch, caseSensitive)">
              <variable ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either a string that the field should begin with, or a RegExp to test&#xA;against the field." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="(optional) true to match any part not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) true for case sensitive comparison" ilk="argument" name="caseSensitive" />
              <variable attributes="__local__ private" citdl="this.createFilterFn()" line="1252" name="fn" />
            </scope>
            <scope doc="Filter by a function. The specified function will be called for each&#xA;Record in this Store. If the function returns true the Record is included,&#xA;otherwise it is filtered out." ilk="function" line="1267" lineend="1271" name="filterBy" signature="filterBy(fn, scope)">
              <variable citdl="Function" doc="The function to be called. It will be passed the following parameters:&#xA;record : Ext.data.RecordThe {@link Ext.data.Record record}&#xA;to test for filtering. Access field values using {@link Ext.data.Record#get}.&#xA;id : ObjectThe ID of the Record passed." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
            </scope>
            <variable citdl="this.snapshot" line="1268" name="snapshot" />
            <scope doc="Query the records by a specified property." ilk="function" line="1282" lineend="1285" name="query" returns="MixedCollection" signature="query(property, value, anyMatch, caseSensitive)">
              <variable ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either a string that the field&#xA;should begin with, or a RegExp to test against the field." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="(optional) True to match any part not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison" ilk="argument" name="caseSensitive" />
              <variable attributes="__local__ private" citdl="this.createFilterFn()" line="1283" name="fn" />
            </scope>
            <scope doc="Query the cached records in this Store using a filtering function. The specified function&#xA;will be called with each record in this Store. If the function returns true the record is&#xA;included in the results.&#xA;&#xA;**/" ilk="function" line="1299" lineend="1302" name="queryBy" returns="MixedCollection" signature="queryBy(fn, scope)">
              <variable citdl="Function" doc="The function to be called. It will be passed the following parameters:&#xA;record : Ext.data.RecordThe {@link Ext.data.Record record}&#xA;to test for filtering. Access field values using {@link Ext.data.Record#get}.&#xA;id : ObjectThe ID of the Record passed." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.snapshot" line="1300" name="data" />
            </scope>
            <scope doc="Finds the index of the first matching record in this store by a specific property/value." ilk="function" line="1314" lineend="1317" name="find" returns="Number" signature="find(property, value, start, anyMatch, caseSensitive)">
              <variable citdl="String" doc="A property on your objects" ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either a string that the property value&#xA;should begin with, or a RegExp to test against the property." ilk="argument" name="value" />
              <variable ilk="argument" name="start" />
              <variable citdl="Boolean" doc="(optional) True to match any part of the string, not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison" ilk="argument" name="caseSensitive" />
              <variable attributes="__local__ private" citdl="this.createFilterFn()" line="1315" name="fn" />
            </scope>
            <scope doc="Finds the index of the first matching record in this store by a specific property/value." ilk="function" line="1326" lineend="1330" name="findExact" returns="Number" signature="findExact(property, value, start)">
              <variable citdl="String" doc="A property on your objects" ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="The value to match against" ilk="argument" name="value" />
              <variable ilk="argument" name="start" />
              <scope attributes="__local__ private" ilk="function" line="1327" lineend="1329" name="(anonymous)" returns="rec.get()" signature="(anonymous)()" />
            </scope>
            <scope doc="Find the index of the first matching Record in this Store by a function.&#xA;If the function returns true it is considered a match." ilk="function" line="1344" lineend="1346" name="findBy" returns="Number" signature="findBy(fn, scope, start)">
              <variable citdl="Function" doc="The function to be called. It will be passed the following parameters:&#xA;record : Ext.data.RecordThe {@link Ext.data.Record record}&#xA;to test for filtering. Access field values using {@link Ext.data.Record#get}.&#xA;id : ObjectThe ID of the Record passed." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
              <variable ilk="argument" name="start" />
            </scope>
            <scope doc="Collects unique values for a particular dataIndex from this store.&#xA;**/" ilk="function" line="1355" lineend="1368" name="collect" returns="Array" signature="collect(dataIndex, allowNull, bypassFilter)">
              <variable citdl="String" doc="The property to collect" ilk="argument" name="dataIndex" />
              <variable citdl="Boolean" doc="(optional) Pass true to allow null, undefined or empty string values" ilk="argument" name="allowNull" />
              <variable citdl="Boolean" doc="(optional) Pass true to collect from all records, even ones which are filtered" ilk="argument" name="bypassFilter" />
              <variable attributes="__local__ private" line="1356" name="d" />
              <variable attributes="__local__ private" citdl="Array" line="1358" name="r" />
              <variable attributes="__local__ private" citdl="String()" line="1358" name="sv" />
              <variable attributes="__local__ private" citdl="Object" line="1358" lineend="1358" name="l" />
              <variable attributes="__local__ private" citdl="d[i].data[dataIndex]" line="1358" name="v" />
            </scope>
            <scope doc="Revert to a view of the Record cache with no filtering applied." ilk="function" line="1375" lineend="1383" name="clearFilter" signature="clearFilter(suppressEvent)">
              <variable citdl="Boolean" doc="If true the filter is cleared silently without firing the&#xA;{@link #datachanged} event." ilk="argument" name="suppressEvent" />
            </scope>
            <scope doc="Returns true if this store is currently filtered" ilk="function" line="1389" lineend="1391" name="isFiltered" returns="Boolean" signature="isFiltered()" />
            <scope ilk="function" line="1394" lineend="1399" name="afterEdit" signature="afterEdit(record)">
              <variable ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="1402" lineend="1405" name="afterReject" signature="afterReject(record)">
              <variable ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="1408" lineend="1411" name="afterCommit" signature="afterCommit(record)">
              <variable ilk="argument" name="record" />
            </scope>
            <scope doc="Commit all Records with {@link #getModifiedRecords outstanding changes}. To handle updates for changes,&#xA;subscribe to the Store&apos;s {@link #update update event}, and perform updating when the third parameter is&#xA;Ext.data.Record.COMMIT." ilk="function" line="1418" lineend="1424" name="commitChanges" signature="commitChanges()">
              <variable attributes="__local__ private" citdl="this.modified.slice()" line="1419" name="m" />
            </scope>
            <scope doc="{@link Ext.data.Record#reject Reject} outstanding changes on all {@link #getModifiedRecords modified records}." ilk="function" line="1429" lineend="1435" name="rejectChanges" signature="rejectChanges()">
              <variable attributes="__local__ private" citdl="this.modified.slice()" line="1430" name="m" />
            </scope>
            <scope ilk="function" line="1438" lineend="1449" name="onMetaChange" signature="onMetaChange(meta, rtype, o)">
              <variable ilk="argument" name="meta" />
              <variable ilk="argument" name="rtype" />
              <variable ilk="argument" name="o" />
            </scope>
            <scope ilk="function" line="1452" lineend="1461" name="findInsertIndex" returns="index" signature="findInsertIndex(record)">
              <variable ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.data.clone()" line="1454" name="data" />
              <variable attributes="__local__ private" citdl="this.data.indexOf()" line="1457" name="index" />
            </scope>
            <scope doc="Set the value for a property name in this store&apos;s {@link #baseParams}.  Usage:&#xA;myStore.setBaseParam(&apos;foo&apos;, {bar:3});&#xA;**/" ilk="function" line="1470" lineend="1473" name="setBaseParam" signature="setBaseParam(name, value)">
              <variable citdl="String" doc="Name of the property to assign" ilk="argument" name="name" />
              <variable citdl="Mixed" doc="Value to assign the named property" ilk="argument" name="value" />
            </scope>
            <variable citdl="Ext.extend()" doc="Store Error extension." line="1486" name="Error" />
          </scope>
          <variable citdl="Object" line="77" name="JsonWriter" />
          <scope classrefs="Ext.data.DataReader" ilk="class" line="102" lineend="113" name="JsonReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from a JSON response&#xA;based on mappings in a provided {@link Ext.data.Record} constructor.&#xA;Example code:&#xA;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;firstname&apos;},                  // map the Record&apos;s &quot;firstname&quot; field to the row object&apos;s key of the same name&#xA;{name: &apos;job&apos;, mapping: &apos;occupation&apos;}  // map the Record&apos;s &quot;job&quot; field to the row object&apos;s &quot;occupation&quot; key&#xA;]);&#xA;var myReader = new Ext.data.JsonReader(&#xA;{                             // The metadata property, with configuration options:&#xA;totalProperty: &quot;results&quot;, //   the property which contains the total dataset size (optional)&#xA;root: &quot;rows&quot;,             //   the property which contains an Array of record data objects&#xA;idProperty: &quot;id&quot;          //   the property within each row object that provides an ID for the record (optional)&#xA;Employee  // {@link Ext.data.Record} constructor that provides mapping for JSON object&#xA;This would consume a JSON data object of the form:&#xA;results: 2,  // Reader&apos;s configured totalProperty&#xA;rows: [      // Reader&apos;s configured root&#xA;{ id: 1, firstname: &apos;Bill&apos;, occupation: &apos;Gardener&apos; },         // a row object&#xA;{ id: 2, firstname: &apos;Ben&apos; , occupation: &apos;Horticulturalist&apos; }  // another row object&#xA;Automatic configuration using metaData&#xA;It is possible to change a JsonReader&apos;s metadata at any time by including a metaData&#xA;property in the JSON data object. If the JSON data object has a metaData property, a&#xA;{@link Ext.data.Store Store} object using this Reader will reconfigure itself to use the newly provided&#xA;field definition and fire its {@link Ext.data.Store#metachange metachange} event. The metachange event&#xA;handler may interrogate the metaData property to perform any configuration required.&#xA;Note that reconfiguring a Store potentially invalidates objects which may refer to Fields or Records&#xA;which no longer exist.&#xA;The metaData property in the JSON data object may contain:&#xA;&#xA;any of the configuration options for this class&#xA;a {@link Ext.data.Record#fields fields} property which the JsonReader will&#xA;use as an argument to the {@link Ext.data.Record#create data Record create method} in order to&#xA;configure the layout of the Records it will produce.&#xA;a {@link Ext.data.Store#sortInfo sortInfo} property which the JsonReader will&#xA;use to set the {@link Ext.data.Store}&apos;s {@link Ext.data.Store#sortInfo sortInfo} property&#xA;any user-defined properties needed&#xA;&#xA;To use this facility to send the same data as the example above (without having to code the creation&#xA;of the Record constructor), you would create the JsonReader like this:&#xA;var myReader = new Ext.data.JsonReader();&#xA;The first data packet from the server would configure the reader by containing a&#xA;metaData property and the data. For example, the JSON data object might take&#xA;the form:&#xA;metaData: {&#xA;idProperty: &apos;id&apos;,&#xA;root: &apos;rows&apos;,&#xA;totalProperty: &apos;results&apos;,&#xA;fields: [&#xA;{name: &apos;name&apos;},&#xA;{name: &apos;job&apos;, mapping: &apos;occupation&apos;}&#xA;sortInfo: {field: &apos;name&apos;, direction:&apos;ASC&apos;}, // used by store to set its sortInfo&#xA;foo: &apos;bar&apos; // custom property&#xA;results: 2,&#xA;rows: [ // an Array&#xA;{ &apos;id&apos;: 1, &apos;name&apos;: &apos;Bill&apos;, occupation: &apos;Gardener&apos; },&#xA;{ &apos;id&apos;: 2, &apos;name&apos;: &apos;Ben&apos;, occupation: &apos;Horticulturalist&apos; }" ilk="function" line="102" lineend="113" name="JsonReader" signature="JsonReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options." ilk="argument" name="meta" />
              <variable citdl="Array/Object" doc="Either an Array of {@link Ext.data.Field Field} definition objects (which&#xA;will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}&#xA;constructor created from {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="JsonReader" name="this" />
            </scope>
            <scope citdl="Mixed" doc="This JsonReader&apos;s metadata as passed to the constructor, or as passed in&#xA;the last data packet&apos;s metaData property." ilk="function" line="127" lineend="134" name="read" returns="Object" signature="read(response)">
              <variable citdl="Object" doc="The XHR object which contains the JSON data in its responseText." ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.responseText" line="128" name="json" />
              <variable attributes="__local__ private" citdl="Ext.decode()" line="129" name="o" />
            </scope>
            <variable citdl="String" line="131" name="message" />
            <scope ilk="function" line="137" lineend="139" name="onMetaChange" signature="onMetaChange(meta, recordType, o)">
              <variable ilk="argument" name="meta" />
              <variable ilk="argument" name="recordType" />
              <variable ilk="argument" name="o" />
            </scope>
            <scope ilk="function" line="144" lineend="146" name="simpleAccess" returns="obj[subsc]" signature="simpleAccess(obj, subsc)">
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="subsc" />
            </scope>
            <variable line="151" name="getJsonAccessor" />
            <scope doc="Create a data block containing Ext.data.Records from a JSON object." ilk="function" line="173" lineend="217" name="readRecords" returns="Object" signature="readRecords(o)">
              <variable citdl="Object" doc="An object which contains an Array of row objects in the property specified&#xA;in the config as &apos;root, and optionally a property, specified in the config as &apos;totalProperty&apos;&#xA;which contains the total size of the dataset." ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="Record.prototype.fields" line="187" name="f" />
              <variable attributes="__local__ private" citdl="this.recordType" line="187" name="Record" />
              <variable attributes="__local__ private" citdl="this.meta" line="187" name="s" />
              <variable attributes="__local__ private" citdl="parseInt()" line="187" name="v" />
              <variable attributes="__local__ private" citdl="f.items" line="187" name="fi" />
              <variable attributes="__local__ private" citdl="f.length" line="187" name="fl" />
              <variable attributes="__local__ private" citdl="root.length" line="191" name="c" />
              <variable attributes="__local__ private" citdl="Boolean" line="191" name="success" />
              <variable attributes="__local__ private" citdl="this.getRoot()" line="191" name="root" />
              <variable attributes="__local__ private" citdl="c" line="191" name="totalRecords" />
              <variable attributes="__local__ private" citdl="Array" line="205" name="records" />
              <variable attributes="__local__ private" citdl="root[i]" line="207" name="n" />
              <variable attributes="__local__ private" citdl="Record" line="208" name="record" />
            </scope>
            <variable citdl="Object" doc="After any data loads, the raw JSON data is available for further custom processing.  If no data is&#xA;loaded or there is a load exception this property will be undefined." line="179" name="jsonData" />
            <variable citdl="o.metaData" line="182" name="meta" />
            <variable citdl="Ext.data.Record.create()" line="183" name="recordType" />
            <scope ilk="class" line="220" lineend="250" name="buildExtractors">
              <scope attributes="__ctor__" ilk="function" line="220" lineend="250" name="buildExtractors" returns="p" signature="buildExtractors()">
                <variable citdl="buildExtractors" name="this" />
                <variable attributes="__local__ private" citdl="Record.prototype.fields" line="225" name="f" />
                <variable attributes="__local__ private" citdl="this.recordType" line="225" name="Record" />
                <variable attributes="__local__ private" citdl="this.meta" line="225" name="s" />
                <variable attributes="__local__ private" citdl="f.items" line="225" name="fi" />
                <variable attributes="__local__ private" citdl="f.length" line="225" name="fl" />
                <variable attributes="__local__ private" citdl="this.getJsonAccessor()" line="235" name="g" />
                <variable attributes="__local__ private" citdl="Array" line="243" name="ef" />
                <variable attributes="__local__ private" line="246" name="map" />
              </scope>
              <variable citdl="this.getJsonAccessor()" line="228" name="getTotal" />
              <variable citdl="this.getJsonAccessor()" line="231" name="getSuccess" />
              <variable citdl="s.root" line="233" name="getRoot" />
              <scope ilk="function" line="241" lineend="241" name="getId" signature="getId()">
                <variable citdl="buildExtractors" name="this" />
              </scope>
              <variable citdl="ef" line="249" name="ef" />
            </scope>
            <scope ilk="function" line="253" lineend="261" name="extractValues" returns="values" signature="extractValues(data, items, len)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="items" />
              <variable ilk="argument" name="len" />
              <variable attributes="__local__ private" citdl="Object" line="254" lineend="254" name="values" />
              <variable attributes="__local__ private" citdl="items[j]" line="254" name="f" />
              <variable attributes="__local__ private" citdl="this.ef[j]()" line="257" name="v" />
            </scope>
            <scope doc="Decode a json response from server." ilk="function" line="268" lineend="288" name="readResponse" returns="o" signature="readResponse(action, response)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" ilk="argument" name="response" />
              <variable attributes="__local__ private" line="269" name="o" />
            </scope>
            <variable citdl="this.buildExtractors()" line="286" name="ef" />
            <variable citdl="Ext.extend()" doc="Error class for JsonReader" line="301" name="Error" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from an Array.&#xA;Each element of that Array represents a row of data fields. The&#xA;fields are pulled into a Record object using as a subscript, the mapping property&#xA;of the field definition if it exists, or the field&apos;s ordinal position in the definition.&#xA;Example code:&#xA;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which&#xA;{name: &apos;occupation&apos;, mapping: 2}    // precludes using the ordinal position as the index.&#xA;]);&#xA;var myReader = new Ext.data.ArrayReader({&#xA;{@link #idIndex}: 0&#xA;}, Employee);&#xA;This would consume an Array like this:&#xA;&#xA;[ [1, &apos;Bill&apos;, &apos;Gardener&apos;], [2, &apos;Ben&apos;, &apos;Horticulturalist&apos;] ]" line="102" name="ArrayReader" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized store implementation that provides for grouping records by one of the available fields. This&#xA;is usually used in conjunction with an {@link Ext.grid.GroupingView} to proved the data model for&#xA;a grouped GridPanel." line="138" name="GroupingStore" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="167" lineend="191" name="Node">
            <scope attributes="__ctor__" ilk="function" line="167" lineend="292" name="Node" signature="Node(attributes)">
              <variable citdl="Object" doc="The attributes/config for the node" ilk="argument" name="attributes" />
              <variable citdl="Node" name="this" />
            </scope>
            <variable citdl="Object" doc="The attributes supplied for the node. You can use this property to access any custom attributes you supplied." line="172" name="attributes">
              <variable citdl="this.id" line="180" name="id" />
            </variable>
            <variable citdl="this.attributes.leaf" line="173" name="leaf" />
            <variable citdl="this.attributes.id" doc="The node id. @type String" line="177" name="id" />
            <variable citdl="Array" doc="All child nodes of this node. @type Array" line="185" name="childNodes" />
            <variable doc="The parent node for this node. @type Node" line="199" name="parentNode" />
            <variable doc="The first direct child node of this node, or null if this node has no child nodes. @type Node" line="203" name="firstChild" />
            <variable doc="The last direct child node of this node, or null if this node has no child nodes. @type Node" line="207" name="lastChild" />
            <variable doc="The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node" line="211" name="previousSibling" />
            <variable doc="The node immediately following this node in the tree, or null if there is no sibling node. @type Node" line="215" name="nextSibling" />
            <variable citdl="this.attributes.listeners" line="290" name="listeners" />
            <scope ilk="function" line="296" lineend="309" name="fireEvent" returns="Boolean" signature="fireEvent(evtName)">
              <variable ilk="argument" name="evtName" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree()" line="302" name="ot" />
            </scope>
            <scope doc="Returns true if this node is a leaf" ilk="function" line="315" lineend="317" name="isLeaf" returns="Boolean" signature="isLeaf()" />
            <scope ilk="function" line="320" lineend="322" name="setFirstChild" signature="setFirstChild(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="325" lineend="327" name="setLastChild" signature="setLastChild(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="Returns true if this node is the last child of its parent" ilk="function" line="334" lineend="336" name="isLast" returns="Boolean" signature="isLast()" />
            <scope doc="Returns true if this node is the first child of its parent" ilk="function" line="342" lineend="344" name="isFirst" returns="Boolean" signature="isFirst()" />
            <scope doc="Returns true if this node has one or more child nodes, else false." ilk="function" line="350" lineend="352" name="hasChildNodes" returns="Boolean" signature="hasChildNodes()" />
            <scope doc="Returns true if this node has one or more child nodes, or if the expandable&#xA;node attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false." ilk="function" line="359" lineend="361" name="isExpandable" returns="Boolean" signature="isExpandable()" />
            <scope doc="Insert node(s) as the last child node of this node." ilk="function" line="368" lineend="415" name="appendChild" returns="Node" signature="appendChild(node)">
              <variable citdl="Node/Array" doc="The node or Array of nodes to append" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="Boolean" line="369" name="multi" />
              <variable attributes="__local__ private" citdl="this.childNodes.length" line="384" name="index" />
              <variable attributes="__local__ private" citdl="node.parentNode" line="385" name="oldParent" />
              <variable attributes="__local__ private" citdl="this.childNodes[index-1]" line="399" name="ps" />
            </scope>
            <scope doc="Removes a child node from this node." ilk="function" line="422" lineend="457" name="removeChild" returns="Node" signature="removeChild(node)">
              <variable citdl="Node" doc="The node to remove" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.childNodes.indexOf()" line="423" name="index" />
            </scope>
            <scope doc="Inserts the first node before the second node in this nodes childNodes collection." ilk="function" line="465" lineend="513" name="insertBefore" returns="Node" signature="insertBefore(node, refNode)">
              <variable citdl="Node" doc="The node to insert" ilk="argument" name="node" />
              <variable citdl="Node" doc="The node to insert before (if null the node is appended)" ilk="argument" name="refNode" />
              <variable attributes="__local__ private" citdl="this.childNodes.indexOf()" line="477" name="index" />
              <variable attributes="__local__ private" citdl="node.parentNode" line="478" name="oldParent" />
              <variable attributes="__local__ private" citdl="index" line="479" name="refIndex" />
              <variable attributes="__local__ private" citdl="this.childNodes[refIndex-1]" line="498" name="ps" />
            </scope>
            <scope doc="Removes this node from its parent" ilk="function" line="519" lineend="522" name="remove" returns="Node" signature="remove()" />
            <scope doc="Returns the child node at the specified index." ilk="function" line="529" lineend="531" name="item" returns="Node" signature="item(index)">
              <variable citdl="Number" ilk="argument" name="index" />
            </scope>
            <scope doc="Replaces one child node in this node with another." ilk="function" line="539" lineend="544" name="replaceChild" returns="Node" signature="replaceChild(newChild, oldChild)">
              <variable citdl="Node" doc="The replacement node" ilk="argument" name="newChild" />
              <variable citdl="Node" doc="The node to replace" ilk="argument" name="oldChild" />
              <variable attributes="__local__ private" citdl="oldChild" line="540" name="s" />
            </scope>
            <scope doc="Returns the index of a child node" ilk="function" line="551" lineend="553" name="indexOf" returns="Number" signature="indexOf(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope doc="Returns the tree this node is in." ilk="function" line="559" lineend="572" name="getOwnerTree" returns="Tree" signature="getOwnerTree()">
              <variable attributes="__local__ private" citdl="this" line="562" name="p" />
            </scope>
            <variable citdl="p.ownerTree" line="565" name="ownerTree" />
            <scope doc="Returns depth of this node (the root node has a depth of 0)" ilk="function" line="578" lineend="586" name="getDepth" returns="Number" signature="getDepth()">
              <variable attributes="__local__ private" citdl="Number" line="579" name="depth" />
              <variable attributes="__local__ private" citdl="this" line="580" name="p" />
            </scope>
            <scope ilk="function" line="589" lineend="604" name="setOwnerTree" signature="setOwnerTree(tree)">
              <variable ilk="argument" name="tree" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="596" name="cs" />
            </scope>
            <scope doc="Changes the id of this node." ilk="function" line="610" lineend="622" name="setId" signature="setId(id)">
              <variable citdl="String" doc="The new id for the node." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.ownerTree" line="612" name="t" />
            </scope>
            <variable citdl="Ext.emptyFn" line="625" name="onIdChange" />
            <scope doc="Returns the path for this node. The path can be used to expand or select this node programmatically." ilk="function" line="632" lineend="642" name="getPath" returns="String" signature="getPath(attr)">
              <variable citdl="String" doc="(optional) The attr to use for the path (defaults to the node&apos;s id)" ilk="argument" name="attr" />
              <variable attributes="__local__ private" citdl="this.parentNode" line="634" name="p" />
              <variable attributes="__local__ private" citdl="Array" line="635" name="b" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree().pathSeparator" line="640" name="sep" />
            </scope>
            <scope doc="Bubbles up the tree from this node, calling the specified function with each node. The scope (this) of&#xA;function call will be the scope provided or the current node. The arguments to the function&#xA;will be the args provided or the current node. If the function returns false at any point,&#xA;the bubble is stopped." ilk="function" line="653" lineend="661" name="bubble" signature="bubble(fn, scope, args)">
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to current node)" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The args to call the function with (default to passing the current node)" ilk="argument" name="args" />
              <variable attributes="__local__ private" citdl="this" line="654" name="p" />
            </scope>
            <scope doc="Cascades down the tree from this node, calling the specified function with each node. The scope (this) of&#xA;function call will be the scope provided or the current node. The arguments to the function&#xA;will be the args provided or the current node. If the function returns false at any point,&#xA;the cascade is stopped on that branch." ilk="function" line="672" lineend="679" name="cascade" signature="cascade(fn, scope, args)">
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to current node)" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The args to call the function with (default to passing the current node)" ilk="argument" name="args" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="674" name="cs" />
            </scope>
            <scope doc="Interates the child nodes of this node, calling the specified function with each node. The scope (this) of&#xA;function call will be the scope provided or the current node. The arguments to the function&#xA;will be the args provided or the current node. If the function returns false at any point,&#xA;the iteration stops." ilk="function" line="690" lineend="697" name="eachChild" signature="eachChild(fn, scope, args)">
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to current node)" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The args to call the function with (default to passing the current node)" ilk="argument" name="args" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="691" name="cs" />
            </scope>
            <scope doc="Finds the first child that has the attribute with the specified value." ilk="function" line="705" lineend="713" name="findChild" returns="Node" signature="findChild(attribute, value)">
              <variable citdl="String" doc="The attribute name" ilk="argument" name="attribute" />
              <variable citdl="Mixed" doc="The value to search for" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="706" name="cs" />
            </scope>
            <scope doc="Finds the first child by a custom function. The child matches if the function passed&#xA;returns true." ilk="function" line="722" lineend="730" name="findChildBy" returns="Node" signature="findChildBy(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="723" name="cs" />
            </scope>
            <scope doc="Sorts this nodes children using the supplied sort function" ilk="function" line="737" lineend="755" name="sort" signature="sort(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="738" name="cs" />
              <variable attributes="__local__ private" citdl="cs.length" line="739" name="len" />
              <variable attributes="__local__ private" citdl="scope" line="741" name="sortFn" />
              <variable attributes="__local__ private" citdl="cs[i]" line="744" name="n" />
            </scope>
            <scope doc="Returns true if this node is an ancestor (at any point) of the passed node." ilk="function" line="762" lineend="764" name="contains" returns="Boolean" signature="contains(node)">
              <variable citdl="Node" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns true if the passed node is an ancestor (at any point) of this node." ilk="function" line="771" lineend="780" name="isAncestor" returns="Boolean" signature="isAncestor(node)">
              <variable citdl="Node" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.parentNode" line="772" name="p" />
            </scope>
            <scope ilk="function" line="782" lineend="784" name="toString" returns="String" signature="toString()" />
          </scope>
          <variable doc="Ext.data.Api is a singleton designed to manage the data API including methods&#xA;for validating a developer&apos;s DataProxy API.  Defines variables for CRUD actions&#xA;create, read, update and destroy in addition to a mapping of RESTful HTTP methods&#xA;GET, POST, PUT and DELETE to CRUD actions." line="189" name="Api" />
        </variable>
        <scope ilk="function" line="108" lineend="113" name="log" signature="log()">
          <variable citdl="o" name="this" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" line="108" name="FlashComponent" />
        <variable citdl="Object" line="110" name="direct">
          <variable citdl="Ext.extend()" line="45" name="JsonProvider" />
          <variable citdl="Ext.extend()" doc="Ext.direct.Provider is an abstract class meant to be extended.&#xA;&#xA;For example ExtJs implements the following subclasses:&#xA;&#xA;Provider&#xA;+---{@link Ext.direct.JsonProvider JsonProvider}&#xA;+---{@link Ext.direct.PollingProvider PollingProvider}&#xA;+---{@link Ext.direct.RemotingProvider RemotingProvider}" line="110" name="Provider" />
          <variable citdl="Ext.extend()" doc="&#xA;&#xA;&#xA;&#xA;var pollA = new Ext.direct.PollingProvider({&#xA;type:&apos;polling&apos;,&#xA;url: &apos;php/pollA.php&apos;,&#xA;});&#xA;Ext.Direct.addProvider(pollA);&#xA;pollA.disconnect();&#xA;Ext.Direct.addProvider(&#xA;type:&apos;polling&apos;,&#xA;url: &apos;php/pollB.php&apos;,&#xA;id: &apos;pollB-provider&apos;&#xA;var pollB = Ext.Direct.getProvider(&apos;pollB-provider&apos;);" line="149" name="PollingProvider" />
          <variable citdl="Ext.extend()" line="372" name="RemotingProvider" />
        </variable>
        <variable citdl="Object" line="111" name="PagingToolbar">
          <variable citdl="Object" line="111" name="prototype">
            <variable citdl="String" line="122" name="beforePageText" />
            <variable citdl="String" line="123" name="afterPageText" />
            <variable citdl="String" line="124" name="firstText" />
            <variable citdl="String" line="125" name="prevText" />
            <variable citdl="String" line="126" name="nextText" />
            <variable citdl="String" line="127" name="lastText" />
            <variable citdl="String" line="128" name="refreshText" />
            <variable citdl="String" line="129" name="displayMsg" />
            <variable citdl="String" line="130" name="emptyMsg" />
          </variable>
        </variable>
        <variable citdl="Object" line="112" name="Panel">
          <scope classrefs="Ext.dd.DragSource" ilk="class" line="112" name="DD">
            <scope attributes="__ctor__" ilk="function" line="112" lineend="123" name="DD" signature="DD(panel, cfg)">
              <variable ilk="argument" name="panel" />
              <variable ilk="argument" name="cfg" />
              <variable citdl="DD" name="this" />
              <variable attributes="__local__ private" citdl="panel.header" line="117" name="h" />
            </scope>
            <variable citdl="panel" line="113" name="panel" />
            <variable citdl="Object" line="114" lineend="114" name="dragData">
              <variable citdl="panel" line="114" name="panel" />
            </variable>
            <variable citdl="Ext.dd.PanelProxy" line="115" name="proxy" />
            <variable citdl="Boolean" line="122" name="scroll" />
            <variable citdl="Ext.emptyFn" line="126" name="showFrame" />
            <variable citdl="Ext.emptyFn" line="127" name="startDrag" />
            <scope ilk="function" line="128" lineend="130" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" line="131" lineend="135" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getPageX()" line="132" name="x" />
              <variable attributes="__local__ private" citdl="e.getPageY()" line="133" name="y" />
            </scope>
            <scope ilk="function" line="136" lineend="139" name="onInitDrag" returns="Boolean" signature="onInitDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <variable citdl="Ext.emptyFn" line="140" name="createFrame" />
            <scope ilk="function" line="141" lineend="143" name="getDragEl" returns="this.proxy.ghost.dom" signature="getDragEl(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="144" lineend="147" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="149" lineend="153" name="autoOffset" signature="autoOffset(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
          </scope>
        </variable>
        <scope ilk="function" line="115" lineend="117" name="logf" signature="logf(format, arg1, arg2, etc)">
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="arg1" />
          <variable ilk="argument" name="arg2" />
          <variable ilk="argument" name="etc" />
          <variable citdl="o" name="this" />
        </scope>
        <scope ilk="function" line="119" lineend="142" name="dump" signature="dump(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="129" name="b" />
          <variable attributes="__local__ private" line="131" name="to" />
          <variable attributes="__local__ private" citdl="b.join()" line="136" name="s" />
        </scope>
        <scope doc="Applies event listeners to elements by selectors when the document is ready.&#xA;The event name is specified with an &amp;#64; suffix.&#xA;&#xA;Ext.addBehaviors({&#xA;// add a listener for click on all anchors in element with id foo&#xA;&apos;#foo a&amp;#64;click&apos; : function(e, t){&#xA;// do something&#xA;// add the same listener to multiple selectors (separated by comma BEFORE the &amp;#64;)&#xA;&apos;#foo a, #bar span.some-class&amp;#64;mouseover&apos; : function(){&#xA;// do something&#xA;});" ilk="function" line="120" lineend="141" name="addBehaviors" signature="addBehaviors(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="122" lineend="124" name="(anonymous)" signature="(anonymous)()" />
          <variable attributes="__local__ private" citdl="Object" line="126" lineend="126" name="cache" />
          <variable attributes="__local__ private" line="127" name="parts" />
          <variable attributes="__local__ private" line="128" name="b" />
          <variable attributes="__local__ private" citdl="parts[0]" line="129" name="s" />
        </scope>
        <variable citdl="Object" line="120" name="EventManager">
          <scope ilk="function" line="29" lineend="37" name="doResizeEvent" signature="doResizeEvent()">
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="D.getViewHeight()" line="31" name="h" />
            <variable attributes="__local__ private" citdl="D.getViewWidth()" line="31" name="w" />
          </scope>
          <scope doc="Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers." ilk="function" line="45" lineend="52" name="onWindowResize" signature="onWindowResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope ilk="function" line="55" lineend="63" name="fireWindowResize" signature="fireWindowResize()">
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size." ilk="function" line="71" lineend="86" name="onTextResize" signature="onTextResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="74" name="textEl" />
            <scope attributes="__local__ private" ilk="function" line="79" lineend="83" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Removes the passed window resize listener." ilk="function" line="93" lineend="97" name="removeResizeListener" signature="removeResizeListener(fn, scope)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope of handler" ilk="argument" name="scope" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope ilk="function" line="100" lineend="104" name="fireResize" signature="fireResize()">
            <variable citdl="EventManager" name="this" />
          </scope>
          <variable citdl="Number" doc="The frequency, in milliseconds, to check for text resize events (defaults to 50)" line="109" name="textResizeInterval" />
          <variable citdl="Boolean" doc="Url used for onDocumentReady with using SSL (defaults to Ext.SSL_SECURE_URL)" line="114" name="ieDeferSrc" />
          <variable citdl="useKeydown" line="118" name="useKeydown" />
          <variable citdl="Ext.EventManager.addListener" line="122" name="on" />
        </variable>
        <scope classrefs="Ext.util.Observable" ilk="class" line="125" lineend="289" name="Component">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Base class for all Ext components.  All subclasses of Component may participate in the automated&#xA;Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.&#xA;Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,&#xA;or they may be added dynamically via the {@link Ext.Container#add add} method.&#xA;The Component base class has built-in support for basic hide/show and enable/disable behavior.&#xA;All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via&#xA;{@link Ext#getCmp}, passing the {@link #id}.&#xA;All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or&#xA;{@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).&#xA;See the Creating new UI controls tutorial for details on how&#xA;and to either extend or augment ExtJs base classes to create custom Components.&#xA;Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the&#xA;xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:&#xA;&#xA;xtype            Class&#xA;-------------    ------------------&#xA;box              {@link Ext.BoxComponent}&#xA;button           {@link Ext.Button}&#xA;buttongroup      {@link Ext.ButtonGroup}&#xA;colorpalette     {@link Ext.ColorPalette}&#xA;component        {@link Ext.Component}&#xA;container        {@link Ext.Container}&#xA;cycle            {@link Ext.CycleButton}&#xA;dataview         {@link Ext.DataView}&#xA;datepicker       {@link Ext.DatePicker}&#xA;editor           {@link Ext.Editor}&#xA;editorgrid       {@link Ext.grid.EditorGridPanel}&#xA;flash            {@link Ext.FlashComponent}&#xA;grid             {@link Ext.grid.GridPanel}&#xA;listview         {@link Ext.ListView}&#xA;panel            {@link Ext.Panel}&#xA;progress         {@link Ext.ProgressBar}&#xA;propertygrid     {@link Ext.grid.PropertyGrid}&#xA;slider           {@link Ext.Slider}&#xA;spacer           {@link Ext.Spacer}&#xA;splitbutton      {@link Ext.SplitButton}&#xA;tabpanel         {@link Ext.TabPanel}&#xA;treepanel        {@link Ext.tree.TreePanel}&#xA;viewport         {@link Ext.ViewPort}&#xA;window           {@link Ext.Window}&#xA;Toolbar components&#xA;---------------------------------------&#xA;paging           {@link Ext.PagingToolbar}&#xA;toolbar          {@link Ext.Toolbar}&#xA;tbbutton         {@link Ext.Toolbar.Button}        (deprecated; use button)&#xA;tbfill           {@link Ext.Toolbar.Fill}&#xA;tbitem           {@link Ext.Toolbar.Item}&#xA;tbseparator      {@link Ext.Toolbar.Separator}&#xA;tbspacer         {@link Ext.Toolbar.Spacer}&#xA;tbsplit          {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)&#xA;tbtext           {@link Ext.Toolbar.TextItem}&#xA;Menu components&#xA;---------------------------------------&#xA;menu             {@link Ext.menu.Menu}&#xA;colormenu        {@link Ext.menu.ColorMenu}&#xA;datemenu         {@link Ext.menu.DateMenu}&#xA;menubaseitem     {@link Ext.menu.BaseItem}&#xA;menucheckitem    {@link Ext.menu.CheckItem}&#xA;menuitem         {@link Ext.menu.Item}&#xA;menuseparator    {@link Ext.menu.Separator}&#xA;menutextitem     {@link Ext.menu.TextItem}&#xA;Form components&#xA;---------------------------------------&#xA;form             {@link Ext.FormPanel}&#xA;checkbox         {@link Ext.form.Checkbox}&#xA;checkboxgroup    {@link Ext.form.CheckboxGroup}&#xA;combo            {@link Ext.form.ComboBox}&#xA;datefield        {@link Ext.form.DateField}&#xA;displayfield     {@link Ext.form.DisplayField}&#xA;field            {@link Ext.form.Field}&#xA;fieldset         {@link Ext.form.FieldSet}&#xA;hidden           {@link Ext.form.Hidden}&#xA;htmleditor       {@link Ext.form.HtmlEditor}&#xA;label            {@link Ext.form.Label}&#xA;numberfield      {@link Ext.form.NumberField}&#xA;radio            {@link Ext.form.Radio}&#xA;radiogroup       {@link Ext.form.RadioGroup}&#xA;textarea         {@link Ext.form.TextArea}&#xA;textfield        {@link Ext.form.TextField}&#xA;timefield        {@link Ext.form.TimeField}&#xA;trigger          {@link Ext.form.TriggerField}&#xA;Chart components&#xA;---------------------------------------&#xA;chart            {@link Ext.chart.Chart}&#xA;barchart         {@link Ext.chart.BarChart}&#xA;cartesianchart   {@link Ext.chart.CartesianChart}&#xA;columnchart      {@link Ext.chart.ColumnChart}&#xA;linechart        {@link Ext.chart.LineChart}&#xA;piechart         {@link Ext.chart.PieChart}&#xA;Store xtypes&#xA;---------------------------------------&#xA;arraystore       {@link Ext.data.ArrayStore}&#xA;directstore      {@link Ext.data.DirectStore}&#xA;groupingstore    {@link Ext.data.GroupingStore}&#xA;jsonstore        {@link Ext.data.JsonStore}&#xA;simplestore      {@link Ext.data.SimpleStore}      (deprecated; use arraystore)&#xA;store            {@link Ext.data.Store}&#xA;xmlstore         {@link Ext.data.XmlStore}" ilk="function" line="125" lineend="289" name="Component" signature="Component(config)">
            <variable citdl="Ext.Element/String/Object" doc="The configuration options may be specified as either:&#xA;an element :&#xA;it is set as the internal element and its id used as the component id&#xA;a string :&#xA;it is assumed to be the id of an existing element and is used as the component id&#xA;anything else :&#xA;it is assumed to be a standard config object and is applied to the component" ilk="argument" name="config" />
            <variable citdl="Component" name="this" />
          </scope>
          <variable citdl="config" line="129" name="baseAction" />
          <variable citdl="Object" doc="This Component&apos;s initial configuration specification. Read-only." line="141" name="initialConfig" />
          <variable citdl="this.initPlugin()" line="271" name="plugins" />
          <variable citdl="Number" line="292" name="AUTO_ID" />
          <variable citdl="Boolean" doc="Note: this config is only used when this Component is rendered by a Container which&#xA;has been configured to use the {@link Ext.layout.FormLayout FormLayout} layout manager (e.g.&#xA;{@link Ext.form.FormPanel} or specifying layout:&apos;form&apos;).&#xA;Also see {@link #hideLabel} and&#xA;{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.&#xA;Example use:&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Name&apos;&#xA;});&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Name&apos;,&#xA;labelStyle: &apos;font-weight:bold;&apos;&#xA;});&#xA;&#xA;&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;layoutConfig: {&#xA;labelSeparator: &apos;~&apos;   // layout config has lowest priority (defaults to &apos;:&apos;)&#xA;{@link Ext.layout.FormLayout#labelSeparator labelSeparator}: &apos;&gt;&gt;&apos;,     // config at container level&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Field 1&apos;,&#xA;labelSeparator: &apos;...&apos; // field/component level config supersedes others&#xA;},{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Field 2&apos; // labelSeparator will be &apos;=&apos;&#xA;});&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;&#xA;hideLabel: true&#xA;});&#xA;// Apply a style to the field&apos;s label:&#xA;&amp;lt;style&gt;&#xA;.required .x-form-item-label {font-weight:bold;color:red;}&#xA;&amp;lt;/style&gt;&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Name&apos;,&#xA;itemCls: &apos;required&apos; //this label will be styled&#xA;},{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Favorite Color&apos;&#xA;});&#xA;*/// Configs below are used for all Components when rendered by AnchorLayout.&#xA;/**&#xA;&#xA;&#xA;var c = new Ext.Panel({ //&#xA;{@link Ext.BoxComponent#height height}: 300,&#xA;{@link #renderTo}: document.body,&#xA;{@link Ext.Container#layout layout}: &apos;auto&apos;,&#xA;{@link Ext.Container#items items}: [&#xA;itemId: &apos;p1&apos;,&#xA;{@link Ext.Panel#title title}: &apos;Panel 1&apos;,&#xA;{@link Ext.BoxComponent#height height}: 150&#xA;itemId: &apos;p2&apos;,&#xA;{@link Ext.Panel#title title}: &apos;Panel 2&apos;,&#xA;{@link Ext.BoxComponent#height height}: 150&#xA;p1 = c.{@link Ext.Container#getComponent getComponent}(&apos;p1&apos;); // not the same as {@link Ext#getCmp Ext.getCmp()}&#xA;p2 = p1.{@link #ownerCt}.{@link Ext.Container#getComponent getComponent}(&apos;p2&apos;); // reference via a sibling&#xA;&#xA;&#xA;&#xA;new Ext.Panel({&#xA;title: &apos;Some Title&apos;,&#xA;renderTo: Ext.getBody(),&#xA;width: 400, height: 300,&#xA;layout: &apos;form&apos;,&#xA;items: [{&#xA;xtype: &apos;textarea&apos;,&#xA;style: {&#xA;width: &apos;95%&apos;,&#xA;marginBottom: &apos;10px&apos;&#xA;new Ext.Button({&#xA;text: &apos;Send&apos;,&#xA;minWidth: &apos;100&apos;,&#xA;style: {&#xA;marginBottom: &apos;10px&apos;&#xA;});" line="567" name="disabled" />
          <variable citdl="Boolean" doc="Render this component hidden (default is false). If true, the&#xA;{@link #hide} method will be called internally." line="573" name="hidden" />
          <variable citdl="String" doc="An object or array of objects that will provide custom functionality for this component.  The only&#xA;requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.&#xA;When a component is created, if any plugins are available, the component will call the init method on each&#xA;plugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the&#xA;component as needed to provide its functionality.&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;Ext.state.Manager.setProvider(new Ext.state.CookieProvider({&#xA;expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now&#xA;}));&#xA;&#xA;xtype: &apos;box&apos;,&#xA;autoEl: {&#xA;tag: &apos;img&apos;,&#xA;src: &apos;http://www.example.com/example.jpg&apos;&#xA;}, {&#xA;xtype: &apos;box&apos;,&#xA;autoEl: {&#xA;tag: &apos;blockquote&apos;,&#xA;html: &apos;autoEl is cool!&apos;&#xA;}, {&#xA;xtype: &apos;container&apos;,&#xA;autoEl: &apos;ul&apos;,&#xA;cls: &apos;ux-unordered-list&apos;,&#xA;items: {&#xA;xtype: &apos;box&apos;,&#xA;autoEl: &apos;li&apos;,&#xA;html: &apos;First list item&apos;" line="704" name="autoEl" />
          <variable citdl="String" doc="CSS class added to the component when it is disabled (defaults to &apos;x-item-disabled&apos;)." line="710" name="disabledClass" />
          <variable citdl="Boolean" doc="Whether the component can move the Dom node when rendering (defaults to true)." line="715" name="allowDomMove" />
          <variable citdl="Boolean" doc="True if the component should check for hidden classes (e.g. &apos;x-hidden&apos; or &apos;x-hide-display&apos;) and remove&#xA;them on render (defaults to false)." line="721" name="autoShow" />
          <variable citdl="String" doc="How this component should be hidden. Supported values are &apos;visibility&apos;&#xA;(css visibility), &apos;offsets&apos; (negative offset position) and &apos;display&apos;&#xA;(css display).&#xA;Note: the default of &apos;display&apos; is generally preferred&#xA;since items are automatically laid out when they are first shown (no sizing&#xA;is done while hidden)." line="731" name="hideMode" />
          <variable citdl="Boolean" doc="True to hide and show the component&apos;s container when hide/show is called on the component, false to hide&#xA;and show the component itself (defaults to false).  For example, this can be used as a shortcut for a hide&#xA;button on a window by setting hide:true on the button when adding it to its parent container." line="738" name="hideParent" />
          <variable citdl="Boolean" doc="The {@link Ext.Element} which encapsulates this Component. Read-only.&#xA;This will usually be a &amp;lt;DIV&gt; element created by the class&apos;s onRender method, but&#xA;that may be overridden using the {@link #autoEl} config.&#xA;Note: this element will not be available until this Component has been rendered.&#xA;To add listeners for DOM events to this Component (as opposed to listeners&#xA;for this Component&apos;s own Observable events), see the {@link Ext.util.Observable#listeners listeners}&#xA;config for a suggestion, or use a render listener directly:&#xA;new Ext.Panel({&#xA;title: &apos;The Clickable Panel&apos;,&#xA;listeners: {&#xA;render: function(p) {&#xA;// Append the Panel to the click handler&amp;#39;s argument list.&#xA;p.getEl().on(&apos;click&apos;, handlePanelClick.createDelegate(null, [p], true));&#xA;single: true  // Remove the listener after first invocation&#xA;});&#xA;See also {@link #getEl getEl}" line="784" name="rendered" />
          <variable citdl="String" line="787" name="ctype" />
          <variable citdl="String" line="790" name="actionMode" />
          <scope ilk="function" line="793" lineend="795" name="getActionEl" returns="this[this.actionMode]" signature="getActionEl()" />
          <scope ilk="function" line="797" lineend="807" name="initPlugin" returns="p" signature="initPlugin(p)">
            <variable citdl="Ext.ComponentMgr.createPlugin()" ilk="argument" name="p" />
          </scope>
          <variable citdl="Ext.emptyFn" line="838" name="initComponent" />
          <scope doc="Render this Component into the passed HTML element.&#xA;If you are using a {@link Ext.Container Container} object to house this Component, then&#xA;do not use the render method.&#xA;A Container&apos;s child Components are rendered by that Container&apos;s&#xA;{@link Ext.Container#layout layout} manager when the Container is first rendered.&#xA;Certain layout managers allow dynamic addition of child components. Those that do&#xA;include {@link Ext.layout.CardLayout}, {@link Ext.layout.AnchorLayout},&#xA;{@link Ext.layout.FormLayout}, {@link Ext.layout.TableLayout}.&#xA;If the Container is already rendered when a new child Component is added, you may need to call&#xA;the Container&apos;s {@link Ext.Container#doLayout doLayout} to refresh the view which causes any&#xA;unrendered child Components to be rendered. This is required so that you can add multiple&#xA;child components if needed while only refreshing the layout once.&#xA;When creating complex UIs, it is important to remember that sizing and positioning&#xA;of child items is the responsibility of the Container&apos;s {@link Ext.Container#layout layout} manager.&#xA;If you expect child items to be sized in response to user interactions, you must&#xA;configure the Container with a layout manager which creates and manages the type of layout you&#xA;have in mind.&#xA;Omitting the Container&apos;s {@link Ext.Container#layout layout} config means that a basic&#xA;layout manager is used which does nothing but render child components sequentially into the&#xA;Container. No sizing or positioning will be performed in this situation." ilk="function" line="866" lineend="918" name="render" returns="this" signature="render(container, position)">
            <variable citdl="Element/HTMLElement/String" doc="(optional) The element this Component should be&#xA;rendered into. If it is being created from existing markup, this should be omitted." ilk="argument" name="container" />
            <variable citdl="String/Number" doc="(optional) The element ID or DOM node index within the container before&#xA;which this component will be inserted (defaults to appending to the end of the container)" ilk="argument" name="position" />
          </scope>
          <variable citdl="Ext.get()" line="869" name="el" />
          <variable citdl="Ext.get()" line="873" name="container" />
          <scope ilk="function" line="920" lineend="961" name="initRef" signature="initRef()">
            <variable attributes="__local__ private" citdl="this.ref.split()" line="950" name="levels" />
            <variable attributes="__local__ private" citdl="Number" line="951" name="i" />
            <variable attributes="__local__ private" citdl="levels.length" line="951" name="last" />
            <variable attributes="__local__ private" citdl="this" line="952" name="t" />
          </scope>
          <scope ilk="function" line="964" lineend="977" name="initState" signature="initState(config)">
            <variable ilk="argument" name="config" />
            <variable attributes="__local__ private" citdl="this.getStateId()" line="966" name="id" />
            <variable attributes="__local__ private" citdl="Ext.state.Manager.get()" line="968" name="state" />
          </scope>
          <scope ilk="function" line="980" lineend="982" name="getStateId" returns="this.stateId" signature="getStateId()" />
          <scope ilk="function" line="985" lineend="991" name="initStateEvents" signature="initStateEvents()" />
          <scope ilk="function" line="994" lineend="998" name="applyState" signature="applyState(state, config)">
            <variable ilk="argument" name="state" />
            <variable ilk="argument" name="config" />
          </scope>
          <scope ilk="function" line="1001" lineend="1003" name="getState" signature="getState()" />
          <scope ilk="function" line="1006" lineend="1017" name="saveState" signature="saveState()">
            <variable attributes="__local__ private" citdl="this.getStateId()" line="1008" name="id" />
            <variable attributes="__local__ private" citdl="this.getState()" line="1010" name="state" />
          </scope>
          <scope doc="Apply this component to existing markup that is valid. With this function, no call to render() is required." ilk="function" line="1023" lineend="1027" name="applyToMarkup" signature="applyToMarkup(el)">
            <variable citdl="String/HTMLElement" ilk="argument" name="el" />
          </scope>
          <scope doc="Adds a CSS class to the component&apos;s underlying element." ilk="function" line="1034" lineend="1041" name="addClass" returns="Ext.Component" signature="addClass(cls)">
            <variable citdl="String" doc="The CSS class name to add" ilk="argument" name="cls" />
          </scope>
          <variable citdl="this.cls" line="1038" name="cls" />
          <scope doc="Removes a CSS class from the component&apos;s underlying element." ilk="function" line="1048" lineend="1055" name="removeClass" returns="Ext.Component" signature="removeClass(cls)">
            <variable citdl="String" doc="The CSS class name to remove" ilk="argument" name="cls" />
          </scope>
          <scope ilk="function" line="1059" lineend="1078" name="onRender" signature="onRender(ct, position)">
            <variable ilk="argument" name="ct" />
            <variable ilk="argument" name="position" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="1064" name="div" />
          </scope>
          <scope ilk="function" line="1081" lineend="1088" name="getAutoCreate" returns="cfg" signature="getAutoCreate()">
            <variable attributes="__local__ private" citdl="Ext.isObject()" line="1082" name="cfg" />
          </scope>
          <variable citdl="Ext.emptyFn" line="1091" name="afterRender" />
          <scope doc="Destroys this component by purging any event listeners, removing the component&apos;s element from the DOM,&#xA;removing the component from its {@link Ext.Container} (if applicable) and unregistering it from&#xA;{@link Ext.ComponentMgr}.  Destruction is generally handled automatically by the framework and this method&#xA;should usually not need to be called directly." ilk="function" line="1100" lineend="1115" name="destroy" signature="destroy()" />
          <variable citdl="Ext.emptyFn" line="1118" name="beforeDestroy" />
          <variable citdl="Ext.emptyFn" line="1121" name="onDestroy" />
          <scope doc="Returns the {@link Ext.Element} which encapsulates this Component.&#xA;This will usually be a &amp;lt;DIV&gt; element created by the class&apos;s onRender method, but&#xA;that may be overridden using the {@link #autoEl} config.&#xA;Note: this element will not be available until this Component has been rendered.&#xA;To add listeners for DOM events to this Component (as opposed to listeners&#xA;for this Component&apos;s own Observable events), see the {@link #listeners} config for a suggestion,&#xA;or use a render listener directly:&#xA;new Ext.Panel({&#xA;title: &apos;The Clickable Panel&apos;,&#xA;listeners: {&#xA;render: function(p) {&#xA;// Append the Panel to the click handler&amp;#39;s argument list.&#xA;p.getEl().on(&apos;click&apos;, handlePanelClick.createDelegate(null, [p], true));&#xA;single: true  // Remove the listener after first invocation&#xA;});" ilk="function" line="1144" lineend="1146" name="getEl" returns="Ext.Element" signature="getEl()" />
          <scope doc="Returns the id of this component or automatically generates and&#xA;returns an id if an id is not defined yet:&#xA;&apos;ext-comp-&apos; + (++Ext.Component.AUTO_ID)" ilk="function" line="1155" lineend="1157" name="getId" returns="String" signature="getId()" />
          <scope doc="Returns the {@link #itemId} of this component.  If an&#xA;{@link #itemId} was not assigned through configuration the&#xA;id is returned using {@link #getId}." ilk="function" line="1165" lineend="1167" name="getItemId" returns="String" signature="getItemId()" />
          <scope doc="Try to focus this component." ilk="function" line="1175" lineend="1187" name="focus" returns="Ext.Component" signature="focus(selectText, delay)">
            <variable citdl="Boolean" doc="(optional) If applicable, true to also select the text in this component" ilk="argument" name="selectText" />
            <variable citdl="Boolean/Number" doc="(optional) Delay the focus this number of milliseconds (true for 10 milliseconds)" ilk="argument" name="delay" />
          </scope>
          <scope ilk="function" line="1190" lineend="1195" name="blur" returns="this" signature="blur()" />
          <scope doc="Disable this component and fire the &apos;disable&apos; event." ilk="function" line="1201" lineend="1210" name="disable" returns="Ext.Component" signature="disable(silent)">
            <variable ilk="argument" name="silent" />
          </scope>
          <scope ilk="function" line="1213" lineend="1216" name="onDisable" signature="onDisable()" />
          <scope doc="Enable this component and fire the &apos;enable&apos; event." ilk="function" line="1222" lineend="1229" name="enable" returns="Ext.Component" signature="enable()" />
          <scope ilk="function" line="1232" lineend="1235" name="onEnable" signature="onEnable()" />
          <scope doc="Convenience function for setting disabled/enabled by boolean." ilk="function" line="1242" lineend="1244" name="setDisabled" returns="Ext.Component" signature="setDisabled(disabled)">
            <variable citdl="Boolean" ilk="argument" name="disabled" />
          </scope>
          <scope doc="Show this component.  Listen to the &apos;{@link #beforeshow}&apos; event and return&#xA;false to cancel showing the component.  Fires the &apos;{@link #show}&apos;&#xA;event after showing the component." ilk="function" line="1252" lineend="1264" name="show" returns="Ext.Component" signature="show()" />
          <scope ilk="function" line="1267" lineend="1269" name="onShow" signature="onShow()" />
          <scope doc="Hide this component.  Listen to the &apos;{@link #beforehide}&apos; event and return&#xA;false to cancel hiding the component.  Fires the &apos;{@link #hide}&apos;&#xA;event after hiding the component. Note this method is called internally if&#xA;the component is configured to be {@link #hidden}." ilk="function" line="1278" lineend="1284" name="hide" returns="Ext.Component" signature="hide()" />
          <scope ilk="function" line="1287" lineend="1292" name="doHide" signature="doHide()" />
          <scope ilk="function" line="1295" lineend="1297" name="onHide" signature="onHide()" />
          <scope ilk="function" line="1300" lineend="1302" name="getVisibiltyEl" returns="this.hideParent" signature="getVisibiltyEl()" />
          <scope doc="Convenience function to hide or show this component by boolean." ilk="function" line="1309" lineend="1311" name="setVisible" returns="Ext.Component" signature="setVisible(visible)">
            <variable citdl="Boolean" doc="True to show, false to hide" ilk="argument" name="visible" />
          </scope>
          <scope doc="Returns true if this component is visible." ilk="function" line="1317" lineend="1319" name="isVisible" returns="Boolean" signature="isVisible()" />
          <scope doc="Clone the current component using the original config values passed into this instance by default." ilk="function" line="1327" lineend="1333" name="cloneConfig" returns="Ext.Component" signature="cloneConfig(overrides)">
            <variable citdl="Object" doc="A new config containing any properties to override in the cloned version.&#xA;An id property can be passed on this object, otherwise one will be generated to avoid duplicates." ilk="argument" name="overrides" />
            <variable attributes="__local__ private" citdl="overrides.id" line="1329" name="id" />
            <variable attributes="__local__ private" citdl="Ext.applyIf()" line="1330" name="cfg" />
          </scope>
          <scope doc="Gets the xtype for this component as registered with {@link Ext.ComponentMgr}. For a list of all&#xA;available xtypes, see the {@link Ext.Component} header. Example usage:&#xA;&#xA;var t = new Ext.form.TextField();&#xA;alert(t.getXType());  // alerts &apos;textfield&apos;" ilk="function" line="1344" lineend="1346" name="getXType" returns="String" signature="getXType()" />
          <scope doc="Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended&#xA;from the xtype (default) or whether it is directly of the xtype specified (shallow = true).&#xA;If using your own subclasses, be aware that a Component must register its own xtype&#xA;to participate in determination of inherited xtypes.&#xA;For a list of all available xtypes, see the {@link Ext.Component} header.&#xA;Example usage:&#xA;&#xA;var t = new Ext.form.TextField();&#xA;var isText = t.isXType(&apos;textfield&apos;);        // true&#xA;var isBoxSubclass = t.isXType(&apos;box&apos;);       // true, descended from BoxComponent&#xA;var isBoxInstance = t.isXType(&apos;box&apos;, true); // false, not a direct BoxComponent instance" ilk="function" line="1366" lineend="1375" name="isXType" returns="Boolean" signature="isXType(xtype, shallow)">
            <variable citdl="String" doc="The xtype to check for this Component" ilk="argument" name="xtype" />
            <variable citdl="Boolean" doc="(optional) False to check whether this Component is descended from the xtype (this is&#xA;the default), or true to check whether this Component is directly of the specified xtype." ilk="argument" name="shallow" />
          </scope>
          <scope doc="Returns this Component&apos;s xtype hierarchy as a slash-delimited string. For a list of all&#xA;available xtypes, see the {@link Ext.Component} header.&#xA;If using your own subclasses, be aware that a Component must register its own xtype&#xA;to participate in determination of inherited xtypes.&#xA;Example usage:&#xA;&#xA;var t = new Ext.form.TextField();&#xA;alert(t.getXTypes());  // alerts &apos;component/box/field/textfield&apos;" ilk="function" line="1389" lineend="1401" name="getXTypes" returns="String" signature="getXTypes()">
            <variable attributes="__local__ private" citdl="this.constructor" line="1390" name="tc" />
            <variable attributes="__local__ private" citdl="this" line="1392" name="sc" />
            <variable attributes="__local__ private" citdl="Array" line="1392" name="c" />
          </scope>
          <scope doc="Find a container above this component at any level by a custom function. If the passed function returns&#xA;true, the container will be returned." ilk="function" line="1409" lineend="1412" name="findParentBy" returns="Ext.Container" signature="findParentBy(fn)">
            <variable citdl="Function" doc="The custom function to call with the arguments (container, this component)." ilk="argument" name="fn" />
          </scope>
          <scope doc="Find a container above this component at any level by xtype or class" ilk="function" line="1419" lineend="1427" name="findParentByType" returns="Ext.Container" signature="findParentByType(xtype)">
            <variable citdl="String/Class" doc="The xtype string for a component, or the class of the component directly" ilk="argument" name="xtype" />
            <scope attributes="__local__ private" ilk="function" line="1421" lineend="1423" name="(anonymous)" returns="p.constructor" signature="(anonymous)()" />
            <scope attributes="__local__ private" ilk="function" line="1424" lineend="1426" name="(anonymous)" returns="p.constructor.xtype" signature="(anonymous)()" />
          </scope>
          <scope ilk="function" line="1429" lineend="1431" name="getDomPositionEl" returns="this.getPositionEl" signature="getDomPositionEl()" />
          <scope ilk="function" line="1434" lineend="1439" name="purgeListeners" signature="purgeListeners()" />
          <scope ilk="function" line="1442" lineend="1447" name="clearMons" signature="clearMons()">
            <scope attributes="__local__ private" ilk="function" line="1443" lineend="1445" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <variable citdl="Array" line="1446" name="mons" />
          <scope ilk="function" line="1450" lineend="1486" name="mon" signature="mon(item, ename, fn, scope, opt)">
            <variable ilk="argument" name="item" />
            <variable ilk="argument" name="ename" />
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="scope" />
            <variable ilk="argument" name="opt" />
            <variable attributes="__local__ private" line="1457" name="propRe" />
            <variable attributes="__local__ private" citdl="ename" line="1459" name="o" />
          </scope>
          <scope ilk="function" line="1489" lineend="1501" name="mun" returns="found" signature="mun(item, ename, fn, scope)">
            <variable ilk="argument" name="item" />
            <variable ilk="argument" name="ename" />
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="scope" />
            <variable attributes="__local__ private" citdl="Boolean" line="1490" name="found" />
            <variable attributes="__local__ private" citdl="this.mons[i]" line="1490" name="mon" />
          </scope>
          <scope doc="Returns the next component in the owning container" ilk="function" line="1507" lineend="1515" name="nextSibling" signature="nextSibling()">
            <variable attributes="__local__ private" citdl="this.ownerCt.items.indexOf()" line="1509" name="index" />
          </scope>
          <scope doc="Returns the previous component in the owning container" ilk="function" line="1521" lineend="1529" name="previousSibling" signature="previousSibling()">
            <variable attributes="__local__ private" citdl="this.ownerCt.items.indexOf()" line="1523" name="index" />
          </scope>
          <scope doc="Provides the link for Observable&apos;s fireEvent method to bubble up the ownership hierarchy." ilk="function" line="1535" lineend="1537" name="getBubbleTarget" returns="Ext.Container" signature="getBubbleTarget()" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: This is the base class for {@link Ext.QuickTip} and {@link Ext.Tooltip} that provides the basic layout and&#xA;positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned&#xA;tips that are displayed programmatically, or it can be extended to provide custom tip implementations." line="136" name="Tip" />
        <variable citdl="Object" doc="A class to provide basic animation and visual effects support.  Note: This class is automatically applied&#xA;to the {@link Ext.Element} interface when included, so all effects calls should be performed via {@link Ext.Element}.&#xA;Conversely, since the effects are not actually defined in {@link Ext.Element}, Ext.Fx must be&#xA;{@link Ext#enableFx included} in order for the Element effects to work.&#xA;&#xA;Method Chaining&#xA;It is important to note that although the Fx methods and many non-Fx Element methods support &quot;method chaining&quot; in that&#xA;they return the Element object itself as the method return value, it is not always possible to mix the two in a single&#xA;method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.&#xA;Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,&#xA;while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the&#xA;expected results and should be done with care.  Also see {@link #callback}.&#xA;&#xA;Anchor Options for Motion Effects&#xA;Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element&#xA;that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:&#xA;Value  Description&#xA;-----  -----------------------------&#xA;tl     The top left corner&#xA;t      The center of the top edge&#xA;tr     The top right corner&#xA;l      The center of the left edge&#xA;r      The center of the right edge&#xA;bl     The bottom left corner&#xA;b      The center of the bottom edge&#xA;br     The bottom right corner&#xA;Note: some Fx methods accept specific custom config parameters.  The options shown in the Config Options&#xA;section below are common options that can be passed to any Fx method unless otherwise noted." line="136" lineend="1107" name="Fx">
          <scope ilk="function" line="140" lineend="142" name="switchStatements" returns="fn.apply()" signature="switchStatements(key, fn, argHash)">
            <variable ilk="argument" name="key" />
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="argHash" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Slides the element into view.  An anchor point can be optionally passed to set the point of&#xA;origin for the slide effect.  This function automatically handles wrapping the element with&#xA;a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;&#xA;// default: slide the element in from the top&#xA;el.slideIn();&#xA;// custom: slide the element in from the right with a 2-second duration&#xA;el.slideIn(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideIn(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});" ilk="function" line="166" lineend="258" name="slideIn" returns="Ext.Element" signature="slideIn(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="180" name="me" />
            <variable attributes="__local__ private" line="180" name="b" />
            <variable attributes="__local__ private" line="180" name="pt" />
            <variable attributes="__local__ private" citdl="fly().switchStatements()" line="180" name="args" />
            <variable attributes="__local__ private" citdl="me.dom" line="180" name="dom" />
            <variable attributes="__local__ private" line="180" name="after" />
            <variable attributes="__local__ private" line="180" name="bh" />
            <variable attributes="__local__ private" citdl="dom.style" line="180" name="st" />
            <variable attributes="__local__ private" citdl="fly().fxWrap()" line="180" name="wrap" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="180" name="r" />
            <variable attributes="__local__ private" line="180" name="bw" />
            <variable attributes="__local__ private" citdl="fly().getXY()" line="180" name="xy" />
            <scope attributes="__local__ private" ilk="function" line="184" lineend="256" name="(anonymous)" signature="(anonymous)()">
              <variable citdl="Object" line="191" lineend="191" name="b">
                <variable citdl="dom.offsetHeight" line="191" name="height" />
                <variable citdl="dom.offsetWidth" line="191" name="width" />
                <variable citdl="xy[1]" line="191" name="y" />
                <variable citdl="xy[0]" line="191" name="x" />
                <variable citdl="b.x" line="192" name="right" />
                <variable citdl="b.y" line="193" name="bottom" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="205" lineend="210" name="after" signature="after()" />
              <variable citdl="Object" line="213" lineend="213" name="pt">
                <variable citdl="Array" line="213" name="to" />
              </variable>
              <variable citdl="Object" line="214" lineend="214" name="bw">
                <variable citdl="b.width" line="214" name="to" />
              </variable>
              <variable citdl="Object" line="215" lineend="215" name="bh">
                <variable citdl="b.height" line="215" name="to" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="217" lineend="234" name="argCalc" returns="ret" signature="argCalc(wrap, style, ww, wh, sXY, sXYval, s1, s2, w, h, p)">
                <variable ilk="argument" name="wrap" />
                <variable citdl="style[s2]" ilk="argument" name="style" />
                <variable ilk="argument" name="ww" />
                <variable ilk="argument" name="wh" />
                <variable ilk="argument" name="sXY" />
                <variable ilk="argument" name="sXYval" />
                <variable ilk="argument" name="s1" />
                <variable ilk="argument" name="s2" />
                <variable ilk="argument" name="w" />
                <variable ilk="argument" name="h" />
                <variable ilk="argument" name="p" />
                <variable attributes="__local__ private" citdl="Object" line="218" lineend="218" name="ret">
                  <variable citdl="w" line="225" name="width" />
                  <variable citdl="h" line="228" name="height" />
                  <variable citdl="p" line="231" name="points" />
                </variable>
              </scope>
            </scope>
          </scope>
          <scope doc="Slides the element out of view.  An anchor point can be optionally passed to set the end point&#xA;for the slide effect.  When the effect is completed, the element will be hidden (visibility =&#xA;&apos;hidden&apos;) but block elements will still take up space in the document.  The element must be removed&#xA;from the DOM using the &apos;remove&apos; config option if desired.  This function automatically handles&#xA;wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;&#xA;// default: slide the element out to the top&#xA;el.slideOut();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.slideOut(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideOut(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="286" lineend="360" name="slideOut" returns="Ext.Element" signature="slideOut(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="296" name="me" />
            <variable attributes="__local__ private" citdl="fly().switchStatements()" line="296" name="a" />
            <variable attributes="__local__ private" citdl="me.getXY()" line="296" name="xy" />
            <variable attributes="__local__ private" citdl="me.dom" line="296" name="dom" />
            <variable attributes="__local__ private" citdl="dom.style" line="296" name="st" />
            <variable attributes="__local__ private" citdl="Object" line="296" lineend="296" name="zero">
              <variable citdl="Number" line="296" name="to" />
            </variable>
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="296" name="r" />
            <variable attributes="__local__ private" citdl="fly().fxWrap()" line="296" name="wrap" />
            <variable attributes="__local__ private" line="296" name="b" />
            <scope attributes="__local__ private" ilk="function" line="300" lineend="358" name="(anonymous)" signature="(anonymous)()">
              <variable citdl="Object" line="304" lineend="304" name="b">
                <variable citdl="dom.offsetHeight" line="304" name="height" />
                <variable citdl="dom.offsetWidth" line="304" name="width" />
                <variable citdl="xy[1]" line="304" name="y" />
                <variable citdl="xy[0]" line="304" name="x" />
                <variable citdl="b.x" line="305" name="right" />
                <variable citdl="b.y" line="306" name="bottom" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="318" lineend="324" name="after" signature="after()" />
              <scope attributes="__local__ private" ilk="function" line="326" lineend="339" name="argCalc" returns="ret" signature="argCalc(style, s1, s2, p1, v1, p2, v2, p3, v3)">
                <variable citdl="style[s2]" ilk="argument" name="style" />
                <variable ilk="argument" name="s1" />
                <variable ilk="argument" name="s2" />
                <variable ilk="argument" name="p1" />
                <variable ilk="argument" name="v1" />
                <variable ilk="argument" name="p2" />
                <variable ilk="argument" name="v2" />
                <variable ilk="argument" name="p3" />
                <variable ilk="argument" name="v3" />
                <variable attributes="__local__ private" citdl="Object" line="327" lineend="327" name="ret" />
              </scope>
            </scope>
          </scope>
          <scope doc="Fades the element out while slowly expanding it in all directions.  When the effect is completed, the&#xA;element will be hidden (visibility = &apos;hidden&apos;) but block elements will still take up space in the document.&#xA;The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;&#xA;// default&#xA;el.puff();&#xA;// common config options shown with default values&#xA;el.puff({&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="382" lineend="424" name="puff" returns="Ext.Element" signature="puff(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="389" name="me" />
            <variable attributes="__local__ private" citdl="me.dom" line="389" name="dom" />
            <variable attributes="__local__ private" citdl="fly().getHeight()" line="389" name="height" />
            <variable attributes="__local__ private" citdl="fly().getWidth()" line="389" name="width" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="389" name="r" />
            <variable attributes="__local__ private" citdl="dom.style" line="389" name="st" />
            <scope attributes="__local__ private" ilk="function" line="391" lineend="422" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="400" lineend="408" name="after" signature="after()" />
            </scope>
          </scope>
          <scope doc="Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).&#xA;When the effect is completed, the element will be hidden (visibility = &apos;hidden&apos;) but block elements will still&#xA;take up space in the document. The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;&#xA;// default&#xA;el.switchOff();&#xA;// all config options shown with default values&#xA;el.switchOff({&#xA;easing: &apos;easeIn&apos;,&#xA;duration: .3,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="446" lineend="490" name="switchOff" returns="Ext.Element" signature="switchOff(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="451" name="me" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="451" name="r" />
            <variable attributes="__local__ private" citdl="dom.style" line="451" name="st" />
            <variable attributes="__local__ private" citdl="me.dom" line="451" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="453" lineend="488" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="460" lineend="467" name="after" signature="after()" />
              <scope attributes="__local__ private" ilk="function" line="474" lineend="487" name="(anonymous)" signature="(anonymous)()">
                <scope attributes="__local__ private" ilk="function" line="476" lineend="486" name="(anonymous)" signature="(anonymous)()" />
              </scope>
            </scope>
          </scope>
          <scope doc="Highlights the Element by setting a color (applies to the background-color by default, but can be&#xA;changed using the &quot;attr&quot; config option) and then fading back to the original color. If no original&#xA;color is available, you should provide the &quot;endColor&quot; config option which will be cleared after the animation.&#xA;Usage:&#xA;// default: highlight background to yellow&#xA;el.highlight();&#xA;// custom: highlight foreground text to blue for 2 seconds&#xA;el.highlight(&quot;0000ff&quot;, { attr: &apos;color&apos;, duration: 2 });&#xA;// common config options shown with default values&#xA;el.highlight(&quot;ffff9c&quot;, {&#xA;attr: &quot;background-color&quot;, //can be any valid CSS property (attribute) that supports a color value&#xA;endColor: (current color) or &quot;ffffff&quot;,&#xA;easing: &apos;easeIn&apos;,&#xA;duration: 1&#xA;});" ilk="function" line="516" lineend="542" name="highlight" returns="Ext.Element" signature="highlight(color, o)">
            <variable citdl="String" doc="(optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: &apos;ffff9c&apos;)" ilk="argument" name="color" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="521" name="me" />
            <variable attributes="__local__ private" citdl="Object" line="521" lineend="521" name="a" />
            <variable attributes="__local__ private" citdl="o.attr" line="521" name="attr" />
            <variable attributes="__local__ private" citdl="me.dom" line="521" name="dom" />
            <variable attributes="__local__ private" citdl="dom.style[attr]" line="522" name="restore" />
            <scope attributes="__local__ private" ilk="function" line="524" lineend="540" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="528" lineend="531" name="after" signature="after()" />
            </scope>
          </scope>
          <scope doc="Shows a ripple of exploding, attenuating borders to draw attention to an Element.&#xA;Usage:&#xA;// default: a single light blue ripple&#xA;el.frame();&#xA;// custom: 3 red ripples lasting 3 seconds total&#xA;el.frame(&quot;ff0000&quot;, 3, { duration: 3 });&#xA;// common config options shown with default values&#xA;el.frame(&quot;C3DAF9&quot;, 1, {&#xA;duration: 1 //duration of each individual ripple.&#xA;// Note: Easing is not configurable and will be ignored if included&#xA;});" ilk="function" line="565" lineend="629" name="frame" returns="Ext.Element" signature="frame(color, count, o)">
            <variable citdl="String" doc="(optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: &apos;C3DAF9&apos;)." ilk="argument" name="color" />
            <variable citdl="Number" doc="(optional) The number of ripples to display (defaults to 1)" ilk="argument" name="count" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="570" name="me" />
            <variable attributes="__local__ private" citdl="proxy.anim()" line="570" name="active" />
            <variable attributes="__local__ private" citdl="fly().createChild()" line="570" name="proxy" />
            <variable attributes="__local__ private" citdl="me.dom" line="570" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="572" lineend="627" name="(anonymous)" signature="(anonymous)()">
              <variable attributes="__local__ private" citdl="fly().getXY()" line="581" name="xy" />
              <variable attributes="__local__ private" citdl="Object" line="581" lineend="581" name="b">
                <variable citdl="xy[1]" line="581" name="y" />
                <variable citdl="xy[0]" line="581" name="x" />
                <variable citdl="dom.offsetHeight" line="581" name="height" />
                <variable citdl="dom.offsetWidth" line="581" name="width" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="582" lineend="592" name="queue" returns="proxy.queueFx()" signature="queue()" />
              <scope attributes="__local__ private" ilk="function" line="603" lineend="625" name="animFn" signature="animFn()">
                <variable attributes="__local__ private" citdl="Ext.isBorderBox" line="604" name="scale" />
              </scope>
            </scope>
          </scope>
          <scope doc="Creates a pause before any subsequent queued effects begin.  If there are&#xA;no effects queued after the pause it will have no effect.&#xA;Usage:&#xA;el.pause(1);" ilk="function" line="641" lineend="658" name="pause" returns="Ext.Element" signature="pause(seconds)">
            <variable citdl="Number" doc="The length of time to pause (in seconds)" ilk="argument" name="seconds" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="setTimeout()" line="643" name="t" />
            <variable attributes="__local__ private" citdl="this.dom" line="643" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="645" lineend="656" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="646" lineend="648" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Fade an element in (from transparent to opaque).  The ending opacity can be specified&#xA;using the {@link #endOpacity} config option.&#xA;Usage:&#xA;// default: fade in from opacity 0 to 100%&#xA;el.fadeIn();&#xA;// custom: fade in from opacity 0 to 75% over 2 seconds&#xA;el.fadeIn({ endOpacity: .75, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeIn({&#xA;endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});" ilk="function" line="681" lineend="700" name="fadeIn" returns="Ext.Element" signature="fadeIn(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="685" name="me" />
            <variable attributes="__local__ private" citdl="o.endOpacity" line="685" name="to" />
            <variable attributes="__local__ private" citdl="me.dom" line="685" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="687" lineend="698" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="692" lineend="697" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Fade an element out (from opaque to transparent).  The ending opacity can be specified&#xA;using the {@link #endOpacity} config option.  Note that IE may require&#xA;{@link #useDisplay}:true in order to redisplay correctly.&#xA;Usage:&#xA;// default: fade out from the element&apos;s current opacity to 0&#xA;el.fadeOut();&#xA;// custom: fade out from the element&apos;s current opacity to 25% over 2 seconds&#xA;el.fadeOut({ endOpacity: .25, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeOut({&#xA;endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="726" lineend="752" name="fadeOut" returns="Ext.Element" signature="fadeOut(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="731" name="me" />
            <variable attributes="__local__ private" citdl="o.endOpacity" line="731" name="to" />
            <variable attributes="__local__ private" citdl="dom.style" line="731" name="style" />
            <variable attributes="__local__ private" citdl="me.dom" line="731" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="733" lineend="750" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="740" lineend="749" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Animates the transition of an element&apos;s dimensions from a starting height/width&#xA;to an ending height/width.  This method is a convenience implementation of {@link shift}.&#xA;Usage:&#xA;// change height and width to 100x100 pixels&#xA;el.scale(100, 100);&#xA;// common config options shown with default values.  The height and width will default to&#xA;// the element&amp;#39;s existing values if passed as null.&#xA;el.scale(&#xA;[element&amp;#39;s width],&#xA;[element&amp;#39;s height], {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35" ilk="function" line="777" lineend="783" name="scale" returns="Ext.Element" signature="scale(w, h, o)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Animates the transition of any combination of an element&apos;s dimensions, xy position and/or opacity.&#xA;Any of these properties not specified in the config object will not be changed.  This effect&#xA;requires that at least one new dimension, position or opacity setting must be passed in on&#xA;the config object in order for the function to have any effect.&#xA;Usage:&#xA;// slide the element horizontally to x position 200 while changing the height and opacity&#xA;el.shift({ x: 200, height: 50, opacity: .8 });&#xA;// common config options shown with default values.&#xA;el.shift({&#xA;width: [element&amp;#39;s width],&#xA;height: [element&amp;#39;s height],&#xA;x: [element&amp;#39;s x position],&#xA;y: [element&amp;#39;s y position],&#xA;opacity: [element&amp;#39;s opacity],&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35&#xA;});" ilk="function" line="809" lineend="840" name="shift" returns="Ext.Element" signature="shift(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="812" lineend="812" name="a">
              <variable citdl="a.xy" line="826" name="points" />
            </variable>
            <variable attributes="__local__ private" citdl="this.dom" line="812" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="814" lineend="838" name="(anonymous)" signature="(anonymous)()">
              <variable citdl="Array" line="826" name="to" />
              <scope attributes="__local__ private" ilk="function" line="835" lineend="837" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Slides the element while fading it out of view.  An anchor point can be optionally passed to set the&#xA;ending point of the effect.&#xA;Usage:&#xA;&#xA;// default: slide the element downward while fading out&#xA;el.ghost();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.ghost(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.ghost(&apos;b&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="865" lineend="911" name="ghost" returns="Ext.Element" signature="ghost(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to bottom: &apos;b&apos;)" ilk="argument" name="anchor" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="870" name="me" />
            <variable attributes="__local__ private" citdl="Object" line="870" lineend="870" name="a">
              <variable citdl="Object" line="870" lineend="870" name="opacity">
                <variable citdl="Number" line="870" name="to" />
              </variable>
              <variable citdl="Object" line="870" lineend="870" name="points" />
            </variable>
            <variable attributes="__local__ private" citdl="me.dom" line="870" name="dom" />
            <variable attributes="__local__ private" citdl="dom.style" line="870" name="st" />
            <variable attributes="__local__ private" citdl="a.points" line="871" name="pt" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="872" name="r" />
            <variable attributes="__local__ private" citdl="fly().getWidth()" line="873" name="w" />
            <variable attributes="__local__ private" citdl="fly().getHeight()" line="874" name="h" />
            <scope attributes="__local__ private" ilk="function" line="878" lineend="909" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="884" lineend="891" name="after" signature="after()" />
            </scope>
          </scope>
          <scope doc="Ensures that all effects queued after syncFx is called on the element are&#xA;run concurrently.  This is the opposite of {@link #sequenceFx}." ilk="function" line="918" lineend="926" name="syncFx" returns="Ext.Element" signature="syncFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="919" name="me" />
          </scope>
          <scope doc="Ensures that all effects queued after sequenceFx is called on the element are&#xA;run in sequence.  This is the opposite of {@link #syncFx}." ilk="function" line="933" lineend="941" name="sequenceFx" returns="Ext.Element" signature="sequenceFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="934" name="me" />
          </scope>
          <scope ilk="function" line="944" lineend="949" name="nextFx" signature="nextFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="getQueue()[0]" line="945" name="ef" />
          </scope>
          <scope doc="Returns true if the element has any effects actively running or queued, else returns false." ilk="function" line="955" lineend="957" name="hasActiveFx" returns="Boolean" signature="hasActiveFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Stops any running effects and clears the element&apos;s internal effects queue if it contains&#xA;any additional effects that haven&apos;t started yet." ilk="function" line="964" lineend="979" name="stopFx" returns="Ext.Element" signature="stopFx(finish)">
            <variable ilk="argument" name="finish" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="966" name="me" />
            <variable attributes="__local__ private" citdl="me.dom.id" line="966" name="id" />
            <variable attributes="__local__ private" citdl="getQueue()[0]" line="968" name="cur" />
          </scope>
          <scope ilk="function" line="982" lineend="991" name="beforeFx" returns="Boolean" signature="beforeFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Returns true if the element is currently blocking so that no other effect can be queued&#xA;until this effect is finished, else returns false if blocking is not set.  This is commonly&#xA;used to ensure that an effect initiated by a user action runs to completion prior to the&#xA;same effect being restarted (e.g., firing only one effect even if the user clicks several times)." ilk="function" line="1000" lineend="1003" name="hasFxBlock" returns="Boolean" signature="hasFxBlock()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="getQueue()" line="1001" name="q" />
          </scope>
          <scope ilk="function" line="1006" lineend="1022" name="queueFx" returns="me" signature="queueFx(o, fn)">
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="fn" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="1007" name="me" />
            <variable attributes="__local__ private" citdl="me.beforeFx()" line="1011" name="run" />
          </scope>
          <scope ilk="function" line="1025" lineend="1048" name="fxWrap" returns="wrap" signature="fxWrap(pos, o, vis)">
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="vis" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="dom.parentNode.insertBefore()" line="1028" name="wrap" />
            <variable attributes="__local__ private" citdl="fly().getXY()" line="1028" name="wrapXY" />
            <variable attributes="__local__ private" citdl="this.dom" line="1028" name="dom" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="1033" name="div" />
          </scope>
          <scope ilk="function" line="1051" lineend="1059" name="fxUnwrap" signature="fxUnwrap(wrap, pos, o)">
            <variable ilk="argument" name="wrap" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="1052" name="dom" />
          </scope>
          <scope ilk="function" line="1062" lineend="1065" name="getFxRestore" signature="getFxRestore()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.style" line="1063" name="st" />
          </scope>
          <scope ilk="function" line="1068" lineend="1090" name="afterFx" signature="afterFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" line="1071" name="notConcurrent" />
            <variable attributes="__local__ private" citdl="dom.id" line="1071" name="id" />
            <variable attributes="__local__ private" citdl="this.dom" line="1071" name="dom" />
          </scope>
          <scope ilk="function" line="1093" lineend="1106" name="fxanim" returns="anim" signature="fxanim(args, opt, animType, defaultDur, defaultEase, cb)">
            <variable ilk="argument" name="args" />
            <variable citdl="opt" ilk="argument" name="opt" />
            <variable citdl="animType" ilk="argument" name="animType" />
            <variable ilk="argument" name="defaultDur" />
            <variable ilk="argument" name="defaultEase" />
            <variable ilk="argument" name="cb" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Ext.lib.Anim[animType]()" line="1103" name="anim" />
          </scope>
          <variable citdl="Ext.Fx.scale" line="1110" name="resize" />
        </variable>
        <variable citdl="Object" line="144" lineend="144" name="_timers" />
        <scope ilk="function" line="145" lineend="158" name="combine" returns="r" signature="combine()">
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="146" name="as" />
          <variable attributes="__local__ private" citdl="Array" line="146" name="r" />
          <variable attributes="__local__ private" citdl="as.length" line="146" name="l" />
          <variable attributes="__local__ private" citdl="as[i]" line="148" name="a" />
        </scope>
        <scope ilk="function" line="146" lineend="149" name="time" signature="time(name)">
          <variable citdl="name" ilk="argument" name="name" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Ext.ComponentMgr.registerType" doc="Shorthand for {@link Ext.ComponentMgr#registerType}" line="149" name="reg" />
        <scope ilk="function" line="151" lineend="160" name="timeEnd" returns="v" signature="timeEnd(name, printResults)">
          <variable citdl="name" ilk="argument" name="name" />
          <variable ilk="argument" name="printResults" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Date" line="152" name="t" />
          <variable attributes="__local__ private" citdl="String.format()" line="154" name="v" />
        </scope>
        <variable citdl="Ext.ComponentMgr.registerPlugin" doc="Shorthand for {@link Ext.ComponentMgr#registerPlugin}" line="158" name="preg" />
        <variable citdl="Ext.ComponentMgr.create" line="159" name="create" />
        <variable citdl="Ext.util.TaskRunner" doc="A static {@link Ext.util.TaskRunner} instance that can be used to start and stop arbitrary tasks.  See&#xA;{@link Ext.util.TaskRunner} for supported methods and task config properties.&#xA;&#xA;// Start a simple clock task that updates a div once per second&#xA;var task = {&#xA;run: function(){&#xA;Ext.fly(&apos;clock&apos;).update(new Date().format(&apos;g:i:s A&apos;));&#xA;interval: 1000 //1 second&#xA;Ext.TaskMgr.start(task);" line="174" name="TaskMgr" />
        <scope doc="Copies a set of named properties fom the source object to the destination object.&#xA;example:&#xA;ImageComponent = Ext.extend(Ext.BoxComponent, {&#xA;initComponent: function() {&#xA;this.autoEl = { tag: &apos;img&apos; };&#xA;MyComponent.superclass.initComponent.apply(this, arguments);&#xA;this.initialBox = Ext.copyTo({}, this.initialConfig, &apos;x,y,width,height&apos;);&#xA;});" ilk="function" line="177" lineend="187" name="copyTo" returns="Object" signature="copyTo(dest, source, names)">
          <variable citdl="source[name]" ilk="argument" name="dest" />
          <variable ilk="argument" name="source" />
          <variable citdl="names.split()" ilk="argument" name="names" />
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="181" lineend="185" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope classrefs="Ext.Template" ilk="class" line="180" lineend="244" name="XTemplate">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A template class that supports advanced functionality like autofilling arrays, conditional processing with&#xA;basic comparison operators, sub-templates, basic math function support, special built-in template variables,&#xA;inline code execution and more.  XTemplate also provides the templating mechanism built into {@link Ext.DataView}.&#xA;XTemplate supports many special tags and built-in operators that aren&apos;t defined as part of the API, but are&#xA;supported in the templates that can be created.  The following examples demonstrate all of the supported features.&#xA;This is the data object used for reference in each code example:&#xA;&#xA;var data = {&#xA;name: &apos;Jack Slocum&apos;,&#xA;title: &apos;Lead Developer&apos;,&#xA;company: &apos;Ext JS, LLC&apos;,&#xA;email: &apos;jack@extjs.com&apos;,&#xA;address: &apos;4 Red Bulls Drive&apos;,&#xA;city: &apos;Cleveland&apos;,&#xA;state: &apos;Ohio&apos;,&#xA;zip: &apos;44102&apos;,&#xA;drinks: [&apos;Red Bull&apos;, &apos;Coffee&apos;, &apos;Water&apos;],&#xA;kids: [{&#xA;name: &apos;Sara Grace&apos;,&#xA;age:3&#xA;},{&#xA;name: &apos;Zachary&apos;,&#xA;age:2&#xA;},{&#xA;name: &apos;John James&apos;,&#xA;age:0&#xA;&#xA;Auto filling of arraysThe tpl tag and the for operator are used&#xA;to process the provided data object. If for=&quot;.&quot; is specified, the data object provided&#xA;is examined. If the variable in for is an array, it will auto-fill, repeating the template&#xA;block inside the tpl tag for each item in the array:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;.&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object&#xA;&#xA;Scope switchingThe for property can be leveraged to access specified members&#xA;of the provided data object to populate the template:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Title: {title}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Company: {company}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;, // interrogate the kids property within the data&#xA;&apos;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&#xA;Access to parent object from within sub-template scopeWhen processing a sub-template, for example while&#xA;looping through a child array, you can access the parent object&apos;s members via the parent object:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Dad: {parent.name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Array item index and basic math support While processing an array, the special variable {#}&#xA;will provide the current array index + 1 (starts at 1, not 0). Templates also support the basic math operators&#xA;+ - * and / that can be applied directly on numeric data values:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // {#}: {name}&amp;lt;/p&gt;&apos;,  // In 5 Years: {age+5}&amp;lt;/p&gt;&apos;,  // Dad: {parent.name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Auto-rendering of flat arrays Flat arrays that contain values (and not objects) can be auto-rendered&#xA;using the special {.} variable inside a loop.  This variable will represent the value of&#xA;the array at the current index:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;{name}\&apos;s favorite beverages:&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;tpl for=&quot;drinks&quot;&gt;&apos;,&#xA;&apos;&amp;lt;div&gt; - {.}&amp;lt;/div&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Basic conditional logic Using the tpl tag and the if&#xA;operator you can provide conditional checks for deciding whether or not to render specific parts of the template.&#xA;Note that there is no else operator &amp;mdash; if needed, you should use two opposite if statements.&#xA;Properly-encoded attributes are required as seen in the following example:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Ability to execute arbitrary inline code In an XTemplate, anything between {[ ... ]}  is considered&#xA;code to be executed in the scope of the template. There are some special variables available in that code:&#xA;&#xA;values: The values in the current scope. If you are using scope changing sub-templates, you&#xA;can change what values is.&#xA;parent: The scope (values) of the ancestor template.&#xA;xindex: If you are in a looping template, the index of the loop you are in (1-based).&#xA;xcount: If you are in a looping template, the total length of the array you are looping.&#xA;fm: An alias for Ext.util.Format.&#xA;&#xA;This example demonstrates basic row striping using an inline code block and the xindex variable:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Company: {[values.company.toUpperCase() + &quot;, &quot; + values.title]}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;div class=&quot;{[xindex % 2 === 0 ? &quot;even&quot; : &quot;odd&quot;]}&quot;&gt;&apos;,&#xA;&apos;{name}&apos;,&#xA;&apos;&amp;lt;/div&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Template member functions One or more member functions can be defined directly on the config&#xA;object passed into the XTemplate constructor for more complex processing:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isGirl(name)&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Girl: {name} - {age}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isGirl(name) == false&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Boy: {name} - {age}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isBaby(age)&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;{name} is a baby!&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;, {&#xA;isGirl: function(name){&#xA;return name == &apos;Sara Grace&apos;;&#xA;isBaby: function(age){&#xA;return age" ilk="function" line="180" lineend="244" name="XTemplate" signature="XTemplate()">
            <variable citdl="XTemplate" name="this" />
            <variable attributes="__local__ private" citdl="String" line="197" name="RETURN" />
            <variable attributes="__local__ private" citdl="Number" line="197" name="id" />
            <variable attributes="__local__ private" line="197" name="re" />
            <variable attributes="__local__ private" line="197" name="nameRe" />
            <variable attributes="__local__ private" line="197" name="execRe" />
            <variable attributes="__local__ private" citdl="String" line="197" name="PARENT" />
            <variable attributes="__local__ private" citdl="Array" line="197" name="tpls" />
            <variable attributes="__local__ private" citdl="String" line="197" name="WITHVALUES" />
            <variable attributes="__local__ private" citdl="String" line="197" name="XINDEX" />
            <variable attributes="__local__ private" citdl="this" line="197" name="me" />
            <variable attributes="__local__ private" citdl="String" line="197" name="XCOUNT" />
            <variable attributes="__local__ private" line="197" name="m" />
            <variable attributes="__local__ private" line="197" name="ifRe" />
            <variable attributes="__local__ private" citdl="me.html" line="197" name="s" />
            <variable attributes="__local__ private" citdl="String" line="197" name="VALUES" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="208" name="m4" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="208" name="m3" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="208" name="m2" />
            <variable attributes="__local__ private" citdl="Function" line="208" name="exec" />
            <variable attributes="__local__ private" citdl="Function" line="208" name="fn" />
            <variable attributes="__local__ private" citdl="m2" line="208" name="name" />
            <variable attributes="__local__ private" citdl="m3" line="208" name="exp" />
            <scope attributes="__local__ private" ilk="function" line="239" lineend="241" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <variable line="247" name="re" />
          <variable line="249" name="codeRe" />
          <scope ilk="function" line="252" lineend="272" name="applySubTemplate" returns="t.compiled.call()" signature="applySubTemplate(id, values, parent, xindex, xcount)">
            <variable ilk="argument" name="id" />
            <variable ilk="argument" name="values" />
            <variable citdl="t.target" ilk="argument" name="parent" />
            <variable ilk="argument" name="xindex" />
            <variable ilk="argument" name="xcount" />
            <variable attributes="__local__ private" citdl="this" line="257" name="me" />
            <variable attributes="__local__ private" citdl="t.target" line="257" name="vs" />
            <variable attributes="__local__ private" citdl="Array" line="257" name="buf" />
            <variable attributes="__local__ private" citdl="me.tpls[id]" line="257" name="t" />
            <variable attributes="__local__ private" citdl="vs.length" line="257" name="len" />
          </scope>
          <scope ilk="function" line="275" lineend="329" name="compileTpl" returns="this" signature="compileTpl(tpl)">
            <variable ilk="argument" name="tpl" />
            <variable attributes="__local__ private" citdl="String" line="279" name="body" />
            <variable attributes="__local__ private" citdl="this.disableFormats" line="279" name="useF" />
            <variable attributes="__local__ private" citdl="Ext.util.Format" line="279" name="fm" />
            <variable attributes="__local__ private" citdl="Ext.isGecko" line="279" name="sep" />
            <scope attributes="__local__ private" ilk="function" line="281" lineend="310" name="fn" returns="String" signature="fn(m, name, format, args, math)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="name" />
              <variable citdl="String" ilk="argument" name="format" />
              <variable citdl="String" ilk="argument" name="args" />
              <variable ilk="argument" name="math" />
              <variable attributes="__local__ private" citdl="String" line="285" name="v" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="312" lineend="314" name="codeFn" returns="String" signature="codeFn(m, code)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="code" />
            </scope>
          </scope>
          <scope doc="Returns an HTML fragment of this template with the specified values applied." ilk="function" line="336" lineend="338" name="applyTemplate" returns="String" signature="applyTemplate(values)">
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          </scope>
          <scope doc="Compile the template to a function for optimized performance.  Recommended if the template will be used frequently." ilk="function" line="344" lineend="344" name="compile" returns="Function" signature="compile()" />
          <scope attributes="__static__" doc="STATIC: Creates a template from the passed element&apos;s value (display:none textarea, preferred) or innerHTML." ilk="function" line="376" lineend="379" name="from" returns="Ext.Template" signature="from(el)">
            <variable citdl="String/HTMLElement" doc="A DOM element or its id" ilk="argument" name="el" />
            <variable citdl="XTemplate" name="this" />
          </scope>
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized SplitButton that contains a menu of {@link Ext.menu.CheckItem} elements.  The button automatically&#xA;cycles through each menu item on click, raising the button&apos;s {@link #change} event (or calling the button&apos;s&#xA;{@link #changeHandler} function, if supplied) for the active menu item. Clicking on the arrow section of the&#xA;button displays the dropdown menu just like a normal SplitButton.  Example usage:&#xA;&#xA;var btn = new Ext.CycleButton({&#xA;showText: true,&#xA;prependText: &apos;View as &apos;,&#xA;items: [{&#xA;text:&apos;text only&apos;,&#xA;iconCls:&apos;view-text&apos;,&#xA;checked:true&#xA;},{&#xA;text:&apos;HTML&apos;,&#xA;iconCls:&apos;view-html&apos;&#xA;}],&#xA;changeHandler:function(btn, item){&#xA;Ext.Msg.alert(&apos;Change View&apos;, item.text);&#xA;});" line="187" name="CycleButton" />
        <variable citdl="Ext.Element.select" doc="Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods&#xA;to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or&#xA;{@link Ext.CompositeElementLite CompositeElementLite} object." line="197" name="select" />
        <scope doc="Attempts to destroy any objects passed to it by removing all event listeners, removing them from the&#xA;DOM (if applicable) and calling their destroy functions (if available).  This method is primarily&#xA;intended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of&#xA;{@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be&#xA;passed into this function in a single call as separate arguments." ilk="function" line="199" lineend="211" name="destroy" signature="destroy()">
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="200" lineend="210" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global&#xA;{@link Ext.QuickTips} instance.  See the QuickTips class header for additional usage details and examples." line="207" name="QuickTip" />
        <scope doc="Attempts to destroy and then remove a set of named properties of the passed object." ilk="function" line="219" lineend="224" name="destroyMembers" signature="destroyMembers(o, arg1, arg2, etc)">
          <variable citdl="Object" doc="The object (most likely a Component) who&apos;s properties you wish to destroy." ilk="argument" name="o" />
          <variable citdl="Mixed" doc="The name of the property to destroy and remove from the object." ilk="argument" name="arg1" />
          <variable ilk="argument" name="arg2" />
          <variable ilk="argument" name="etc" />
          <variable citdl="o" name="this" />
        </scope>
        <scope doc="Creates a copy of the passed Array with falsy values removed." ilk="function" line="231" lineend="239" name="clean" returns="Array" signature="clean(arr)">
          <variable citdl="Array/NodeList" doc="The Array from which to remove falsy values." ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="232" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="233" lineend="237" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope doc="Creates a copy of the passed Array, filtered to contain only unique values." ilk="function" line="246" lineend="257" name="unique" returns="Array" signature="unique(arr)">
          <variable citdl="Array" doc="The Array to filter" ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="248" lineend="248" name="collect" />
          <variable attributes="__local__ private" citdl="Array" line="248" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="250" lineend="255" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Object" line="259" name="layout">
          <scope classrefs="Object" ilk="class" line="18" lineend="214" name="ContainerLayout">
            <scope attributes="__ctor__" doc="The ContainerLayout class is the default layout manager delegated by {@link Ext.Container} to&#xA;render any child Components when no {@link Ext.Container#layout layout} is configured into&#xA;a {@link Ext.Container Container}. ContainerLayout provides the basic foundation for all other layout&#xA;classes in Ext. It simply renders all child Components into the Container, performing no sizing or&#xA;positioning services. To utilize a layout that provides sizing and positioning of child Components,&#xA;specify an appropriate {@link Ext.Container#layout layout}.&#xA;This class is intended to be extended or created via the {@link Ext.Container#layout layout}&#xA;configuration property.  See {@link Ext.Container#layout} for additional details." ilk="function" line="18" lineend="20" name="ContainerLayout" signature="ContainerLayout(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <variable citdl="Ext.Component" doc="An optional extra CSS class that will be added to the container. This can be useful for adding&#xA;customized styles to the container or any of its children using standard CSS rules. See&#xA;{@link Ext.Component}.{@link Ext.Component#ctCls ctCls} also.&#xA;Note: extraCls defaults to &apos;&apos; except for the following classes&#xA;which assign a value by default:&#xA;&#xA;{@link Ext.layout.AbsoluteLayout Absolute Layout} : &apos;x-abs-layout-item&apos;&#xA;{@link Ext.layout.Box Box Layout} : &apos;x-box-item&apos;&#xA;{@link Ext.layout.ColumnLayout Column Layout} : &apos;x-column&apos;&#xA;&#xA;To configure the above Classes with an extra CSS class append to the default.  For example,&#xA;for ColumnLayout:&#xA;extraCls: &apos;x-column custom-class&apos;&#xA;&#xA;&#xA;&#xA;*/// private" line="58" name="monitorResize" />
            <variable line="60" name="activeItem" />
            <scope ilk="function" line="63" lineend="67" name="layout" signature="layout()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="this.container.getLayoutTarget()" line="64" name="target" />
            </scope>
            <scope ilk="function" line="70" lineend="72" name="onLayout" signature="onLayout(ct, target)">
              <variable ilk="argument" name="ct" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="75" lineend="77" name="isValidParent" returns="target" signature="isValidParent(c, target)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="80" lineend="88" name="renderAll" signature="renderAll(ct, target)">
              <variable ilk="argument" name="ct" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="ct.items.items" line="81" name="items" />
              <variable attributes="__local__ private" citdl="items[i]" line="83" name="c" />
            </scope>
            <scope ilk="function" line="91" lineend="103" name="renderItem" signature="renderItem(c, position, target)">
              <variable ilk="argument" name="c" />
              <variable citdl="target.dom.childNodes[position]" ilk="argument" name="position" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="106" lineend="117" name="configureItem" signature="configureItem(c, position)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="position" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="c.getPositionEl" line="108" name="t" />
            </scope>
            <scope ilk="function" line="120" lineend="134" name="onResize" signature="onResize()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="this.container.bufferResize" line="124" name="b" />
            </scope>
            <variable citdl="Ext.util.DelayedTask" line="127" name="resizeTask" />
            <variable line="128" name="resizeBuffer" />
            <scope ilk="function" line="137" lineend="140" name="runLayout" signature="runLayout()">
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="143" lineend="158" name="setContainer" signature="setContainer(ct)">
              <variable ilk="argument" name="ct" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <variable citdl="ct" line="157" name="container" />
            <scope ilk="function" line="161" lineend="185" name="parseMargins" signature="parseMargins(v)">
              <variable citdl="v.toString()" ilk="argument" name="v" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="v.split()" line="165" name="ms" />
              <variable attributes="__local__ private" citdl="ms.length" line="166" name="len" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="196" lineend="206" name="(anonymous)" returns="t.compile()" signature="(anonymous)()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="Ext.Template" line="203" name="t" />
            </scope>
            <variable citdl="Ext.Template" doc="The {@link Template Ext.Template} used by Field rendering layout classes (such as&#xA;{@link Ext.layout.FormLayout}) to create the DOM structure of a fully wrapped,&#xA;labeled and styled form Field. A default Template is supplied, but this may be&#xA;overriden to create custom field structures. The template processes values returned from&#xA;{@link Ext.layout.FormLayout#getTemplateArgs}." line="206" name="fieldTpl" />
            <variable citdl="Ext.emptyFn" line="213" name="destroy" />
          </scope>
          <variable citdl="Object" line="28" name="MenuLayout" />
          <variable citdl="Ext.extend()" doc="This is a base class for layouts that contain a single item that automatically expands to fill the layout&apos;s&#xA;container.  This class is intended to be extended or created via the layout:&apos;fit&apos; {@link Ext.Container#layout}&#xA;config, and should generally not need to be created directly via the new keyword.&#xA;FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container&#xA;using FitLayout, simply set layout:&apos;fit&apos; on the container and add a single panel to it.  If the container has&#xA;multiple panels, only the first one will be displayed.  Example usage:&#xA;&#xA;var p = new Ext.Panel({&#xA;title: &apos;Fit Layout&apos;,&#xA;layout:&apos;fit&apos;,&#xA;items: {&#xA;title: &apos;Inner Panel&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;This is the inner panel content&amp;lt;/p&amp;gt;&apos;,&#xA;border: false&#xA;});" line="47" name="FitLayout" />
          <variable citdl="Ext.extend()" doc="This is a layout that inherits the anchoring of {@link Ext.layout.AnchorLayout} and adds the&#xA;ability for x/y positioning using the standard x and y component config options.&#xA;This class is intended to be extended or created via the {@link Ext.Container#layout layout}&#xA;configuration property.  See {@link Ext.Container#layout} for additional details.&#xA;Example usage:&#xA;&#xA;var form = new Ext.form.FormPanel({&#xA;title: &apos;Absolute Layout&apos;,&#xA;layout:&apos;absolute&apos;,&#xA;layoutConfig: {&#xA;// layout-specific configs go here&#xA;extraCls: &apos;x-abs-layout-item&apos;,&#xA;baseCls: &apos;x-plain&apos;,&#xA;url:&apos;save-form.php&apos;,&#xA;defaultType: &apos;textfield&apos;,&#xA;items: [{&#xA;x: 0,&#xA;y: 5,&#xA;xtype:&apos;label&apos;,&#xA;text: &apos;Send To:&apos;&#xA;},{&#xA;x: 60,&#xA;y: 0,&#xA;name: &apos;to&apos;,&#xA;anchor:&apos;100%&apos;  // anchor width by percentage&#xA;},{&#xA;x: 0,&#xA;y: 35,&#xA;xtype:&apos;label&apos;,&#xA;text: &apos;Subject:&apos;&#xA;},{&#xA;x: 60,&#xA;y: 30,&#xA;name: &apos;subject&apos;,&#xA;anchor: &apos;100%&apos;  // anchor width by percentage&#xA;},{&#xA;x:0,&#xA;y: 60,&#xA;xtype: &apos;textarea&apos;,&#xA;name: &apos;msg&apos;,&#xA;anchor: &apos;100% 100%&apos;  // anchor width and height&#xA;});" line="81" name="AbsoluteLayout" />
          <variable citdl="Ext.extend()" doc="Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly." line="107" name="BoxLayout" />
          <variable citdl="Ext.extend()" doc="This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be&#xA;visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.&#xA;This class is intended to be extended or created via the layout:&apos;card&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&#xA;The CardLayout&apos;s focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,&#xA;the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of&#xA;the next panel to display.  The layout itself does not provide a user interface for handling this navigation,&#xA;so that functionality must be provided by the developer.&#xA;In the following example, a simplistic wizard setup is demonstrated.  A button bar is added&#xA;to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a&#xA;common navigation routine -- for this example, the implementation of that routine has been ommitted since&#xA;it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a&#xA;completely different implementation.  For serious implementations, a better approach would be to extend&#xA;CardLayout to provide the custom functionality needed.  Example usage:&#xA;&#xA;var navHandler = function(direction){&#xA;// This routine could contain business logic required to manage the navigation steps.&#xA;// It would call setActiveItem as needed, manage navigation button state, handle any&#xA;// branching logic that might be required, handle alternate actions like cancellation&#xA;// or finalization, etc.  A complete wizard implementation could get pretty&#xA;// sophisticated depending on the complexity required, and should probably be&#xA;// done as a subclass of CardLayout in a real-world implementation.&#xA;var card = new Ext.Panel({&#xA;title: &apos;Example Wizard&apos;,&#xA;layout:&apos;card&apos;,&#xA;activeItem: 0, // make sure the active item is set on the container config!&#xA;bodyStyle: &apos;padding:15px&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;border:false&#xA;// just an example of one possible navigation scheme, using buttons&#xA;bbar: [&#xA;id: &apos;move-prev&apos;,&#xA;text: &apos;Back&apos;,&#xA;handler: navHandler.createDelegate(this, [-1]),&#xA;disabled: true&#xA;&apos;-&gt;&apos;, // greedy spacer so that the buttons are aligned to each side&#xA;id: &apos;move-next&apos;,&#xA;text: &apos;Next&apos;,&#xA;handler: navHandler.createDelegate(this, [1])&#xA;// the panels (or &quot;cards&quot;) within the layout&#xA;items: [{&#xA;id: &apos;card-0&apos;,&#xA;html: &apos;&amp;lt;h1&amp;gt;Welcome to the Wizard!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 1 of 3&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;id: &apos;card-1&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Step 2 of 3&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;id: &apos;card-2&apos;,&#xA;html: &apos;&amp;lt;h1&amp;gt;Congratulations!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 3 of 3 - Complete&amp;lt;/p&amp;gt;&apos;&#xA;});" line="126" name="CardLayout" />
          <variable citdl="Ext.extend()" doc="This is the layout style of choice for creating structural layouts in a multi-column format where the width of&#xA;each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.&#xA;This class is intended to be extended or created via the layout:&apos;column&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&#xA;ColumnLayout does not have any direct config options (other than inherited ones), but it does support a&#xA;specific config property of columnWidth that can be included in the config of any panel added to it.  The&#xA;layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.&#xA;If width or columnWidth is not specified for a given panel, its width will default to the panel&apos;s width (or auto).&#xA;The width property is always evaluated as pixels, and must be a number greater than or equal to 1.&#xA;The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and&#xA;less than 1 (e.g., .25).&#xA;The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the&#xA;set of contained panels.  During the first layout pass, all panels that either have a fixed width or none&#xA;specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second&#xA;pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on&#xA;the total remaining container width.  In other words, percentage width panels are designed to fill the space&#xA;left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns&#xA;with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your&#xA;layout may not render as expected.  Example usage:&#xA;&#xA;// All columns are percentages -- they must add up to 1&#xA;var p = new Ext.Panel({&#xA;title: &apos;Column Layout - Percentage Only&apos;,&#xA;layout:&apos;column&apos;,&#xA;items: [{&#xA;title: &apos;Column 1&apos;,&#xA;columnWidth: .25&#xA;},{&#xA;title: &apos;Column 2&apos;,&#xA;columnWidth: .6&#xA;},{&#xA;title: &apos;Column 3&apos;,&#xA;columnWidth: .15&#xA;});&#xA;// Mix of width and columnWidth -- all columnWidth values must add up&#xA;// to 1. The first column will take up exactly 120px, and the last two&#xA;// columns will fill the remaining container width.&#xA;var p = new Ext.Panel({&#xA;title: &apos;Column Layout - Mixed&apos;,&#xA;layout:&apos;column&apos;,&#xA;items: [{&#xA;title: &apos;Column 1&apos;,&#xA;width: 120&#xA;},{&#xA;title: &apos;Column 2&apos;,&#xA;columnWidth: .8&#xA;},{&#xA;title: &apos;Column 3&apos;,&#xA;columnWidth: .2&#xA;});" line="128" name="ColumnLayout" />
          <variable citdl="Ext.extend()" doc="This is a layout that contains multiple panels in an expandable accordion style such that only&#xA;one panel can be open at any given time.  Each panel has built-in support for expanding and collapsing.&#xA;This class is intended to be extended or created via the {@link Ext.Container#layout layout}&#xA;configuration property.  See {@link Ext.Container#layout} for additional details.&#xA;Example usage:&#xA;&#xA;var accordion = new Ext.Panel({&#xA;title: &apos;Accordion Layout&apos;,&#xA;layout:&apos;accordion&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;bodyStyle: &apos;padding:15px&apos;&#xA;layoutConfig: {&#xA;// layout-specific configs go here&#xA;titleCollapse: false,&#xA;animate: true,&#xA;activeOnTop: true&#xA;items: [{&#xA;title: &apos;Panel 1&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;title: &apos;Panel 2&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;title: &apos;Panel 3&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;});" line="173" name="AccordionLayout" />
          <variable citdl="Ext.layout.AccordionLayout" line="177" name="Accordion" />
          <variable citdl="Ext.extend()" doc="This layout allows you to easily render content into an HTML table.  The total number of columns can be&#xA;specified, and rowspan and colspan can be used to create complex layouts within the table.&#xA;This class is intended to be extended or created via the layout:&apos;table&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&#xA;Note that when creating a layout via config, the layout-specific config properties must be passed in via&#xA;the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  In the&#xA;case of TableLayout, the only valid layout config property is {@link #columns}.  However, the items added to a&#xA;TableLayout can supply the following table-specific config properties:&#xA;&#xA;rowspan Applied to the table cell containing the item.&#xA;colspan Applied to the table cell containing the item.&#xA;cellId An id applied to the table cell containing the item.&#xA;cellCls A CSS class name added to the table cell containing the item.&#xA;&#xA;The basic concept of building up a TableLayout is conceptually very similar to building up a standard&#xA;HTML table.  You simply add each panel (or &quot;cell&quot;) that you want to include along with any span attributes&#xA;specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.&#xA;Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the&#xA;total column count in the layoutConfig and start adding panels in their natural order from left to right,&#xA;top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,&#xA;how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add&#xA;up correctly in your overall layout or you&apos;ll end up with missing and/or extra cells!  Example usage:&#xA;&#xA;// This code will generate a layout table that is 3 columns by 2 rows&#xA;// with some spanning included.  The basic layout will be:&#xA;// +--------+-----------------+&#xA;// |   A    |   B             |&#xA;// |        |--------+--------|&#xA;// |        |   C    |   D    |&#xA;// +--------+--------+--------+&#xA;var table = new Ext.Panel({&#xA;title: &apos;Table Layout&apos;,&#xA;layout:&apos;table&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;bodyStyle:&apos;padding:20px&apos;&#xA;layoutConfig: {&#xA;// The total column count must be specified here&#xA;columns: 3&#xA;items: [{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell A content&amp;lt;/p&amp;gt;&apos;,&#xA;rowspan: 2&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell B content&amp;lt;/p&amp;gt;&apos;,&#xA;colspan: 2&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell C content&amp;lt;/p&amp;gt;&apos;,&#xA;cellCls: &apos;highlight&apos;&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell D content&amp;lt;/p&amp;gt;&apos;&#xA;});" line="192" name="TableLayout" />
          <variable citdl="Ext.extend()" doc="This is a layout that enables anchoring of contained elements relative to the container&apos;s dimensions.&#xA;If the container is resized, all anchored items are automatically rerendered according to their&#xA;{@link #anchor} rules.&#xA;This class is intended to be extended or created via the layout:&apos;anchor&apos; {@link Ext.Container#layout}&#xA;config, and should generally not need to be created directly via the new keyword.&#xA;AnchorLayout does not have any direct config options (other than inherited ones). By default,&#xA;AnchorLayout will calculate anchor measurements based on the size of the container itself. However, the&#xA;container using the AnchorLayout can supply an anchoring-specific config property of anchorSize.&#xA;If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating&#xA;anchor measurements based on it instead, allowing the container to be sized independently of the anchoring&#xA;logic if necessary.  For example:&#xA;&#xA;var viewport = new Ext.Viewport({&#xA;layout:&apos;anchor&apos;,&#xA;anchorSize: {width:800, height:600},&#xA;items:[{&#xA;title:&apos;Item 1&apos;,&#xA;html:&apos;Content 1&apos;,&#xA;width:800,&#xA;anchor:&apos;right 20%&apos;&#xA;},{&#xA;title:&apos;Item 2&apos;,&#xA;html:&apos;Content 2&apos;,&#xA;width:300,&#xA;anchor:&apos;50% 30%&apos;&#xA;},{&#xA;title:&apos;Item 3&apos;,&#xA;html:&apos;Content 3&apos;,&#xA;width:600,&#xA;anchor:&apos;-100 50%&apos;&#xA;});" line="199" name="AnchorLayout" />
          <variable citdl="Ext.extend()" doc="Layout manager implicitly used by Ext.Toolbar." line="251" name="ToolbarLayout" />
          <variable citdl="Object" line="259" name="BorderLayout">
            <scope classrefs="Object" ilk="class" line="235" lineend="869" name="Region">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a region of a {@link Ext.layout.BorderLayout BorderLayout} that acts as a subcontainer&#xA;within the layout.  Each region has its own {@link Ext.layout.ContainerLayout layout} that is&#xA;independent of other regions and the containing BorderLayout, and can be any of the&#xA;{@link Ext.layout.ContainerLayout valid Ext layout types}.&#xA;Region size is managed automatically and cannot be changed by the user -- for&#xA;{@link #split resizable regions}, see {@link Ext.layout.BorderLayout.SplitRegion}." ilk="function" line="235" lineend="255" name="Region" signature="Region(layout, config, pos)">
                <variable citdl="Layout" doc="The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region." ilk="argument" name="layout" />
                <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
                <variable ilk="argument" name="pos" />
                <variable citdl="Region" name="this" />
              </scope>
              <variable citdl="layout" line="237" name="layout" />
              <variable citdl="pos" line="238" name="position" />
              <variable citdl="Object" line="239" lineend="239" name="state">
                <variable citdl="Boolean" line="528" name="collapsed" />
              </variable>
              <variable citdl="this.layout.parseMargins()" line="241" name="margins" />
              <variable citdl="this.layout.parseMargins()" line="246" lineend="249" name="cmargins" />
              <variable citdl="Boolean" doc="When a collapsed region&apos;s bar is clicked, the region&apos;s panel will be displayed as a floated&#xA;panel that will close again once the user mouses out of that panel (or clicks out if&#xA;{@link #autoHide} = false).  Setting {@link #animFloat} = false will&#xA;prevent the open and close of these floated panels from being animated (defaults to true).&#xA;&#xA;&#xA;top: (top margin),&#xA;right: (right margin),&#xA;bottom: (bottom margin),&#xA;left: (left margin)&#xA;&#xA;&#xA;&#xA;top: (top margin),&#xA;right: (right margin),&#xA;bottom: (bottom margin),&#xA;left: (left margin)" line="342" name="collapsible" />
              <variable citdl="Boolean" doc="true to create a {@link Ext.layout.BorderLayout.SplitRegion SplitRegion} and&#xA;display a 5px wide {@link Ext.SplitBar} between this region and its neighbor, allowing the user to&#xA;resize the regions dynamically.  Defaults to false creating a&#xA;{@link Ext.layout.BorderLayout.Region Region}.&#xA;Notes:&#xA;this configuration option is ignored if region=&apos;center&apos;&#xA;when split == true, it is common to specify a&#xA;{@link Ext.SplitBar#minSize minSize} and {@link Ext.SplitBar#maxSize maxSize}&#xA;for the {@link Ext.BoxComponent BoxComponent} representing the region. These are not native&#xA;configs of {@link Ext.BoxComponent BoxComponent}, and are used only by this class.&#xA;if {@link #collapseMode} = &apos;mini&apos; requires split = true to reserve space&#xA;for the collapse tool" line="359" name="split" />
              <variable citdl="Boolean" doc="true to allow clicking a collapsed region&apos;s bar to display the region&apos;s panel floated&#xA;above the layout, false to force the user to fully expand a collapsed region by&#xA;clicking the expand button to see it again (defaults to true)." line="366" name="floatable" />
              <variable citdl="Number" doc="The minimum allowable width in pixels for this region (defaults to 50).&#xA;maxWidth may also be specified.&#xA;Note: setting the {@link Ext.SplitBar#minSize minSize} /&#xA;{@link Ext.SplitBar#maxSize maxSize} supersedes any specified&#xA;minWidth / maxWidth." line="375" name="minWidth" />
              <variable citdl="Number" doc="The minimum allowable height in pixels for this region (defaults to 50)&#xA;maxHeight may also be specified.&#xA;Note: setting the {@link Ext.SplitBar#minSize minSize} /&#xA;{@link Ext.SplitBar#maxSize maxSize} supersedes any specified&#xA;minHeight / maxHeight." line="384" name="minHeight" />
              <variable citdl="Object" line="387" lineend="387" name="defaultMargins">
                <variable citdl="Number" line="387" name="top" />
                <variable citdl="Number" line="387" name="right" />
                <variable citdl="Number" line="387" name="bottom" />
                <variable citdl="Number" line="387" name="left" />
              </variable>
              <variable citdl="Object" line="389" lineend="389" name="defaultNSCMargins">
                <variable citdl="Number" line="389" name="top" />
                <variable citdl="Number" line="389" name="right" />
                <variable citdl="Number" line="389" name="bottom" />
                <variable citdl="Number" line="389" name="left" />
              </variable>
              <variable citdl="Object" line="391" lineend="391" name="defaultEWCMargins">
                <variable citdl="Number" line="391" name="top" />
                <variable citdl="Number" line="391" name="right" />
                <variable citdl="Number" line="391" name="bottom" />
                <variable citdl="Number" line="391" name="left" />
              </variable>
              <variable citdl="Number" line="392" name="floatingZIndex" />
              <variable citdl="Boolean" doc="True if this region is collapsed. Read-only." line="399" name="isCollapsed" />
              <scope citdl="String" doc="This region&apos;s panel.  Read-only.&#xA;*/// private" ilk="function" line="418" lineend="449" name="render" signature="render(ct, p)">
                <variable ilk="argument" name="ct" />
                <variable ilk="argument" name="p" />
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.position" line="424" name="ps" />
                <variable attributes="__local__ private" citdl="p.getState" line="424" name="gs" />
              </scope>
              <variable citdl="p" line="419" name="panel" />
              <variable citdl="ct" line="421" name="targetEl" />
              <variable citdl="p.el" line="422" name="el" />
              <scope ilk="function" line="452" lineend="491" name="getCollapsedEl" returns="this.collapsedEl" signature="getCollapsedEl()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="Ext.Template" line="457" name="tt" />
                <variable attributes="__local__ private" citdl="this.toolTemplate.append()" line="480" name="t" />
              </scope>
              <variable citdl="this.targetEl.createChild()" line="465" name="collapsedEl" />
              <variable citdl="this.collapsedEl.createChild()" line="472" name="miniCollapsedEl" />
              <scope ilk="function" line="494" lineend="501" name="onExpandClick" signature="onExpandClick(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="504" lineend="506" name="onCollapseClick" signature="onCollapseClick(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="509" lineend="518" name="beforeCollapse" signature="beforeCollapse(p, animate)">
                <variable ilk="argument" name="p" />
                <variable ilk="argument" name="animate" />
                <variable citdl="Region" name="this" />
              </scope>
              <variable citdl="animate" line="510" name="lastAnim" />
              <scope ilk="function" line="521" lineend="530" name="onCollapse" signature="onCollapse(animate)">
                <variable ilk="argument" name="animate" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="533" lineend="544" name="beforeExpand" signature="beforeExpand(animate)">
                <variable ilk="argument" name="animate" />
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.getCollapsedEl()" line="534" name="c" />
              </scope>
              <scope ilk="function" line="547" lineend="556" name="onExpand" signature="onExpand()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="559" lineend="567" name="collapseClick" signature="collapseClick(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="570" lineend="576" name="onHide" signature="onHide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="579" lineend="585" name="onShow" signature="onShow()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="True if this region is currently visible, else false." ilk="function" line="591" lineend="593" name="isVisible" returns="Boolean" signature="isVisible()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the current margins for this region.  If the region is collapsed, the&#xA;{@link #cmargins} (collapsed margins) value will be returned, otherwise the&#xA;{@link #margins} value will be returned." ilk="function" line="602" lineend="604" name="getMargins" returns="Object" signature="getMargins()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the current size of this region.  If the region is collapsed, the size of the&#xA;collapsedEl will be returned, otherwise the size of the region&apos;s panel will be returned." ilk="function" line="612" lineend="614" name="getSize" returns="Object" signature="getSize()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Sets the specified panel as the container element for this region." ilk="function" line="620" lineend="622" name="setPanel" signature="setPanel(panel)">
                <variable citdl="Ext.Panel" doc="The new panel" ilk="argument" name="panel" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the minimum allowable width for this region." ilk="function" line="628" lineend="630" name="getMinWidth" returns="Number" signature="getMinWidth()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the minimum allowable height for this region." ilk="function" line="636" lineend="638" name="getMinHeight" returns="Number" signature="getMinHeight()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="641" lineend="645" name="applyLayoutCollapsed" signature="applyLayoutCollapsed(box)">
                <variable ilk="argument" name="box" />
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.getCollapsedEl()" line="642" name="ce" />
              </scope>
              <scope ilk="function" line="648" lineend="655" name="applyLayout" signature="applyLayout(box)">
                <variable ilk="argument" name="box" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="658" lineend="660" name="beforeSlide" signature="beforeSlide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="663" lineend="665" name="afterSlide" signature="afterSlide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="668" lineend="686" name="initAutoHide" signature="initAutoHide()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="Ext.util.DelayedTask" line="671" name="st" />
              </scope>
              <variable citdl="Object" line="672" lineend="682" name="autoHideHd">
                <scope ilk="function" line="673" lineend="677" name="mouseout" signature="mouseout(e)">
                  <variable ilk="argument" name="e" />
                  <variable citdl="autoHideHd" name="this" />
                </scope>
                <scope ilk="function" line="678" lineend="680" name="mouseover" signature="mouseover(e)">
                  <variable ilk="argument" name="e" />
                  <variable citdl="autoHideHd" name="this" />
                </scope>
                <variable citdl="this" line="681" name="scope" />
              </variable>
              <scope ilk="function" line="689" lineend="694" name="clearAutoHide" signature="clearAutoHide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="697" lineend="699" name="clearMonitor" signature="clearMonitor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="If this Region is {@link #floatable}, this method slides this Region into full visibility over the top&#xA;of the center Region where it floats until either {@link #slideIn} is called, or other regions of the layout&#xA;are clicked, or the mouse exits the Region." ilk="function" line="706" lineend="740" name="slideOut" signature="slideOut()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.panel.tools" line="711" name="ts" />
              </scope>
              <variable citdl="Boolean" line="710" name="isSlid" />
              <variable citdl="Array" line="721" name="restoreLT" />
              <scope ilk="function" line="743" lineend="756" name="afterSlideIn" signature="afterSlideIn()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.panel.tools" line="752" name="ts" />
              </scope>
              <scope doc="If this Region is {@link #floatable}, and this Region has been slid into floating visibility, then this method slides&#xA;this region back into its collapsed state." ilk="function" line="762" lineend="784" name="slideIn" signature="slideIn(cb)">
                <variable ilk="argument" name="cb" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="787" lineend="791" name="slideInIf" signature="slideInIf(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <variable citdl="Object" line="794" lineend="799" name="anchors">
                <variable citdl="String" line="795" name="west" />
                <variable citdl="String" line="796" name="east" />
                <variable citdl="String" line="797" name="north" />
                <variable citdl="String" line="798" name="south" />
              </variable>
              <variable citdl="Object" line="802" lineend="807" name="sanchors">
                <variable citdl="String" line="803" name="west" />
                <variable citdl="String" line="804" name="east" />
                <variable citdl="String" line="805" name="north" />
                <variable citdl="String" line="806" name="south" />
              </variable>
              <variable citdl="Object" line="810" lineend="815" name="canchors">
                <variable citdl="String" line="811" name="west" />
                <variable citdl="String" line="812" name="east" />
                <variable citdl="String" line="813" name="north" />
                <variable citdl="String" line="814" name="south" />
              </variable>
              <scope ilk="function" line="818" lineend="820" name="getAnchor" returns="this.anchors[this.position]" signature="getAnchor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="823" lineend="825" name="getCollapseAnchor" returns="this.canchors[this.position]" signature="getCollapseAnchor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="828" lineend="830" name="getSlideAnchor" returns="this.sanchors[this.position]" signature="getSlideAnchor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="833" lineend="849" name="getAlignAdj" returns="Array" signature="getAlignAdj()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.cmargins" line="834" name="cm" />
              </scope>
              <scope ilk="function" line="852" lineend="868" name="getExpandAdj" returns="Array" signature="getExpandAdj()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.collapsedEl" line="853" name="c" />
                <variable attributes="__local__ private" citdl="this.cmargins" line="853" name="cm" />
              </scope>
            </scope>
            <variable citdl="Object" line="259" name="SplitRegion">
              <variable citdl="Object" line="259" name="prototype">
                <variable citdl="String" line="290" name="splitTip" />
                <variable citdl="String" line="291" name="collapsibleSplitTip" />
              </variable>
            </variable>
            <scope classrefs="Ext.layout.BorderLayout.Region" ilk="class" line="884" lineend="888" name="SplitRegion">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a specialized type of {@link Ext.layout.BorderLayout.Region BorderLayout region} that&#xA;has a built-in {@link Ext.SplitBar} for user resizing of regions.  The movement of the split bar&#xA;is configurable to move either {@link #tickSize smooth or incrementally}." ilk="function" line="884" lineend="888" name="SplitRegion" signature="SplitRegion(layout, config, pos)">
                <variable citdl="Layout" doc="The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region." ilk="argument" name="layout" />
                <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
                <variable ilk="argument" name="pos" />
                <variable citdl="SplitRegion" name="this" />
              </scope>
              <variable citdl="this.applyFns[pos]" line="887" name="applyLayout" />
              <variable citdl="String" doc="The increment, in pixels by which to move this Region&apos;s {@link Ext.SplitBar SplitBar}.&#xA;By default, the {@link Ext.SplitBar SplitBar} moves smoothly." line="903" name="splitTip" />
              <variable citdl="String" doc="The tooltip to display when the user hovers over a&#xA;{@link Ext.layout.BorderLayout.Region#collapsible collapsible} region&apos;s split bar&#xA;(defaults to &quot;Drag to resize. Double click to hide.&quot;). Only applies if&#xA;{@link #useSplitTips} = true." line="911" name="collapsibleSplitTip" />
              <variable citdl="Boolean" doc="true to display a tooltip when the user hovers over a region&apos;s split bar&#xA;(defaults to false).  The tooltip text will be the value of either&#xA;{@link #splitTip} or {@link #collapsibleSplitTip} as appropriate." line="918" name="useSplitTips" />
              <variable citdl="Object" line="921" lineend="950" name="splitSettings">
                <variable citdl="Object" line="922" lineend="928" name="north">
                  <variable citdl="Ext.SplitBar.VERTICAL" line="923" name="orientation" />
                  <variable citdl="Ext.SplitBar.TOP" line="924" name="placement" />
                  <variable citdl="String" line="925" name="maxFn" />
                  <variable citdl="String" line="926" name="minProp" />
                  <variable citdl="String" line="927" name="maxProp" />
                </variable>
                <variable citdl="Object" line="929" lineend="935" name="south">
                  <variable citdl="Ext.SplitBar.VERTICAL" line="930" name="orientation" />
                  <variable citdl="Ext.SplitBar.BOTTOM" line="931" name="placement" />
                  <variable citdl="String" line="932" name="maxFn" />
                  <variable citdl="String" line="933" name="minProp" />
                  <variable citdl="String" line="934" name="maxProp" />
                </variable>
                <variable citdl="Object" line="936" lineend="942" name="east">
                  <variable citdl="Ext.SplitBar.HORIZONTAL" line="937" name="orientation" />
                  <variable citdl="Ext.SplitBar.RIGHT" line="938" name="placement" />
                  <variable citdl="String" line="939" name="maxFn" />
                  <variable citdl="String" line="940" name="minProp" />
                  <variable citdl="String" line="941" name="maxProp" />
                </variable>
                <variable citdl="Object" line="943" lineend="949" name="west">
                  <variable citdl="Ext.SplitBar.HORIZONTAL" line="944" name="orientation" />
                  <variable citdl="Ext.SplitBar.LEFT" line="945" name="placement" />
                  <variable citdl="String" line="946" name="maxFn" />
                  <variable citdl="String" line="947" name="minProp" />
                  <variable citdl="String" line="948" name="maxProp" />
                </variable>
              </variable>
              <variable citdl="Object" line="953" lineend="1002" name="applyFns">
                <scope ilk="function" line="954" lineend="965" name="west" returns="this.applyLayoutCollapsed()" signature="west(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="958" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="958" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetWidth" line="960" name="sw" />
                </scope>
                <scope ilk="function" line="966" lineend="977" name="east" returns="this.applyLayoutCollapsed()" signature="east(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="970" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="970" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetWidth" line="971" name="sw" />
                </scope>
                <scope ilk="function" line="978" lineend="989" name="north" returns="this.applyLayoutCollapsed()" signature="north(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="982" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="982" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetHeight" line="983" name="sh" />
                </scope>
                <scope ilk="function" line="990" lineend="1001" name="south" returns="this.applyLayoutCollapsed()" signature="south(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="994" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="994" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetHeight" line="995" name="sh" />
                </scope>
              </variable>
              <scope ilk="function" line="1005" lineend="1044" name="render" signature="render(ct, p)">
                <variable ilk="argument" name="ct" />
                <variable ilk="argument" name="p" />
                <variable attributes="__local__ private" citdl="this.position" line="1008" name="ps" />
                <variable attributes="__local__ private" citdl="this.splitSettings[ps]" line="1023" name="s" />
              </scope>
              <variable citdl="ct.createChild()" line="1013" name="splitEl" />
              <variable citdl="this.splitEl.createChild()" line="1018" name="miniSplitEl" />
              <variable citdl="Ext.SplitBar" line="1025" name="split" />
              <variable line="1031" name="useShim" />
              <variable citdl="this.maxSize" line="1032" name="maxSize" />
              <scope ilk="function" line="1047" lineend="1058" name="getSize" returns="s" signature="getSize()">
                <variable attributes="__local__ private" citdl="this.panel.getSize()" line="1051" name="s" />
              </scope>
              <scope ilk="function" line="1061" lineend="1065" name="getHMaxSize" returns="Math.min()" signature="getHMaxSize()">
                <variable attributes="__local__ private" citdl="this.maxSize" line="1062" name="cmax" />
                <variable attributes="__local__ private" citdl="this.layout.center" line="1063" name="center" />
              </scope>
              <scope ilk="function" line="1068" lineend="1072" name="getVMaxSize" returns="Math.min()" signature="getVMaxSize()">
                <variable attributes="__local__ private" citdl="this.maxSize" line="1069" name="cmax" />
                <variable attributes="__local__ private" citdl="this.layout.center" line="1070" name="center" />
              </scope>
              <scope ilk="function" line="1075" lineend="1088" name="onSplitMove" returns="Boolean" signature="onSplitMove(split, newSize)">
                <variable ilk="argument" name="split" />
                <variable ilk="argument" name="newSize" />
                <variable attributes="__local__ private" citdl="this.panel.getSize()" line="1076" name="s" />
              </scope>
              <variable citdl="newSize" line="1077" name="lastSplitSize" />
              <scope doc="Returns a reference to the split bar in use by this region." ilk="function" line="1094" lineend="1096" name="getSplitBar" returns="Ext.SplitBar" signature="getSplitBar()" />
              <scope ilk="function" line="1099" lineend="1105" name="destroy" signature="destroy()" />
            </scope>
          </variable>
          <variable citdl="Ext.extend()" doc="A layout that arranges items vertically" line="260" name="VBoxLayout" />
          <variable citdl="Ext.extend()" doc="This layout manager is specifically designed for rendering and managing child Components of&#xA;{@link Ext.form.FormPanel forms}. It is responsible for rendering the labels of&#xA;{@link Ext.form.Field Field}s.&#xA;&#xA;This layout manager is used when a Container is configured with the layout:&apos;form&apos;&#xA;{@link Ext.Container#layout layout} config option, and should generally not need to be created directly&#xA;via the new keyword. See {@link Ext.Container#layout} for additional details.&#xA;&#xA;In an application, it will usually be preferrable to use a {@link Ext.form.FormPanel FormPanel}&#xA;(which is configured with FormLayout as its layout class by default) since it also provides built-in&#xA;functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form.&#xA;&#xA;A {@link Ext.Container Container} using the FormLayout layout manager (e.g.&#xA;{@link Ext.form.FormPanel} or specifying layout:&apos;form&apos;) can also accept the following&#xA;layout-specific config properties:&#xA;{@link Ext.form.FormPanel#hideLabels hideLabels}&#xA;{@link Ext.form.FormPanel#labelAlign labelAlign}&#xA;{@link Ext.form.FormPanel#labelPad labelPad}&#xA;{@link Ext.form.FormPanel#labelSeparator labelSeparator}&#xA;{@link Ext.form.FormPanel#labelWidth labelWidth}&#xA;&#xA;&#xA;Any Component (including Fields) managed by FormLayout accepts the following as a config option:&#xA;&#xA;{@link Ext.Component#anchor anchor}&#xA;&#xA;&#xA;Any Component managed by FormLayout may be rendered as a form field (with an associated label) by&#xA;configuring it with a non-null {@link Ext.Component#fieldLabel fieldLabel}. Components configured&#xA;in this way may be configured with the following options which affect the way the FormLayout renders them:&#xA;&#xA;{@link Ext.Component#clearCls clearCls}&#xA;{@link Ext.Component#fieldLabel fieldLabel}&#xA;{@link Ext.Component#hideLabel hideLabel}&#xA;{@link Ext.Component#itemCls itemCls}&#xA;{@link Ext.Component#labelSeparator labelSeparator}&#xA;{@link Ext.Component#labelStyle labelStyle}&#xA;&#xA;&#xA;Example usage:&#xA;&#xA;// Required if showing validation messages&#xA;Ext.QuickTips.init();&#xA;// While you can create a basic Panel with layout:&apos;form&apos;, practically&#xA;// you should usually use a FormPanel to also get its form functionality&#xA;// since it already creates a FormLayout internally.&#xA;var form = new Ext.form.FormPanel({&#xA;title: &apos;Form Layout&apos;,&#xA;bodyStyle: &apos;padding:15px&apos;,&#xA;width: 350,&#xA;defaultType: &apos;textfield&apos;,&#xA;defaults: {&#xA;// applied to each contained item&#xA;width: 230,&#xA;msgTarget: &apos;side&apos;&#xA;items: [{&#xA;fieldLabel: &apos;First Name&apos;,&#xA;name: &apos;first&apos;,&#xA;allowBlank: false,&#xA;{@link Ext.Component#labelSeparator labelSeparator}: &apos;:&apos; // override labelSeparator layout config&#xA;},{&#xA;fieldLabel: &apos;Last Name&apos;,&#xA;name: &apos;last&apos;&#xA;},{&#xA;fieldLabel: &apos;Email&apos;,&#xA;name: &apos;email&apos;,&#xA;vtype:&apos;email&apos;&#xA;}, {&#xA;xtype: &apos;textarea&apos;,&#xA;hideLabel: true,     // override hideLabels layout config&#xA;name: &apos;msg&apos;,&#xA;anchor: &apos;100% -53&apos;&#xA;buttons: [&#xA;{text: &apos;Save&apos;},&#xA;{text: &apos;Cancel&apos;}&#xA;layoutConfig: {&#xA;{@link #labelSeparator}: &apos;~&apos; // superseded by assignment below&#xA;// config options applicable to container when layout=&apos;form&apos;:&#xA;hideLabels: false,&#xA;labelAlign: &apos;left&apos;,   // or &apos;right&apos; or &apos;top&apos;&#xA;{@link Ext.form.FormPanel#labelSeparator labelSeparator}: &apos;&gt;&gt;&apos;, // takes precedence over layoutConfig value&#xA;labelWidth: 65,       // defaults to 100&#xA;labelPad: 8           // defaults to 5, must specify labelWidth to be honored&#xA;});" line="264" name="FormLayout" />
          <variable citdl="Ext.extend()" doc="A layout that arranges items horizontally" line="415" name="HBoxLayout" />
        </variable>
        <scope doc="Recursively flattens into 1-d Array. Injects Arrays inline." ilk="function" line="264" lineend="277" name="flatten" returns="Array" signature="flatten(arr)">
          <variable citdl="Array" doc="The array to flatten" ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="265" name="worker" />
          <scope attributes="__local__ private" ilk="function" line="266" lineend="275" name="rFlatten" returns="worker" signature="rFlatten(a)">
            <variable ilk="argument" name="a" />
            <scope attributes="__local__ private" ilk="function" line="267" lineend="273" name="(anonymous)" signature="(anonymous)()" />
          </scope>
        </scope>
        <scope doc="Returns the minimum value in the Array." ilk="function" line="286" lineend="293" name="min" returns="ret" signature="min(arr, comp)">
          <variable citdl="{Array" doc="The Array from which to select the minimum value." ilk="argument" name="arr" />
          <variable citdl="Function" doc="(optional) a function to perform the comparision which determines minimization.&#xA;If omitted the &quot;" ilk="argument" name="comp" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="arr[0]" line="287" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="289" lineend="291" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Object" line="300" name="Button">
          <variable citdl="Ext.Template" line="300" name="buttonTemplate" />
        </variable>
        <scope doc="Returns the maximum value in the Array" ilk="function" line="302" lineend="309" name="max" returns="Object" signature="max(arr, comp)">
          <variable citdl="{Array" doc="The Array from which to select the maximum value." ilk="argument" name="arr" />
          <variable citdl="Function" doc="(optional) a function to perform the comparision which determines maximization.&#xA;If omitted the &quot;&gt;&quot; operator will be used. Note: gt = 1; eq = 0; lt = -1" ilk="argument" name="comp" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="arr[0]" line="303" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="305" lineend="307" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Object" line="311" name="SplitLayoutRegion">
          <variable citdl="Object" line="311" name="prototype">
            <variable citdl="String" line="309" name="splitTip" />
            <variable citdl="String" line="310" name="collapsibleSplitTip" />
          </variable>
        </variable>
        <scope doc="Calculates the mean of the Array" ilk="function" line="316" lineend="318" name="mean" returns="Number" signature="mean(arr)">
          <variable citdl="Array" doc="The Array to calculate the mean value of." ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
        </scope>
        <scope doc="Calculates the sum of the Array" ilk="function" line="325" lineend="331" name="sum" returns="Number" signature="sum(arr)">
          <variable citdl="Array" doc="The Array to calculate the sum value of." ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Number" line="326" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="327" lineend="329" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Standard form container.&#xA;&#xA;Layout&#xA;By default, FormPanel is configured with layout:&apos;form&apos; to use an {@link Ext.layout.FormLayout}&#xA;layout manager, which styles and renders fields and labels correctly. When nesting additional Containers&#xA;within a FormPanel, you should ensure that any descendant Containers which host input Fields use the&#xA;{@link Ext.layout.FormLayout} layout manager.&#xA;&#xA;BasicForm&#xA;Although not listed as configuration options of FormPanel, the FormPanel class accepts all&#xA;of the config options required to configure its internal {@link Ext.form.BasicForm} for:&#xA;&#xA;{@link Ext.form.BasicForm#fileUpload file uploads}&#xA;functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form&#xA;&#xA;&#xA;Note: If subclassing FormPanel, any configuration options for the BasicForm must be applied to&#xA;the initialConfig property of the FormPanel. Applying {@link Ext.form.BasicForm BasicForm}&#xA;configuration settings to this will not affect the BasicForm&apos;s configuration.&#xA;&#xA;Form Validation&#xA;For information on form validation see the following:&#xA;&#xA;{@link Ext.form.TextField}&#xA;{@link Ext.form.VTypes}&#xA;{@link Ext.form.BasicForm#doAction BasicForm.doAction clientValidation notes}&#xA;{@link Ext.form.FormPanel#monitorValid monitorValid}&#xA;&#xA;&#xA;Form Submission&#xA;By default, Ext Forms are submitted through Ajax, using {@link Ext.form.Action}. To enable normal browser&#xA;submission of the {@link Ext.form.BasicForm BasicForm} contained in this FormPanel, see the&#xA;{@link Ext.form.BasicForm#standardSubmit standardSubmit} option." line="331" name="FormPanel" />
        <variable citdl="Object" line="334" name="EventObjectImpl">
          <variable citdl="Object" line="334" name="prototype">
            <variable citdl="Number" line="127" name="BACKSPACE" />
            <variable citdl="Number" line="129" name="TAB" />
            <variable citdl="Number" line="131" name="NUM_CENTER" />
            <variable citdl="Number" line="133" name="ENTER" />
            <variable citdl="Number" line="135" name="RETURN" />
            <variable citdl="Number" line="137" name="SHIFT" />
            <variable citdl="Number" line="139" name="CTRL" />
            <variable citdl="Number" line="140" name="CONTROL" />
            <variable citdl="Number" line="142" name="ALT" />
            <variable citdl="Number" line="144" name="PAUSE" />
            <variable citdl="Number" line="146" name="CAPS_LOCK" />
            <variable citdl="Number" line="148" name="ESC" />
            <variable citdl="Number" line="150" name="SPACE" />
            <variable citdl="Number" line="152" name="PAGE_UP" />
            <variable citdl="Number" line="153" name="PAGEUP" />
            <variable citdl="Number" line="155" name="PAGE_DOWN" />
            <variable citdl="Number" line="156" name="PAGEDOWN" />
            <variable citdl="Number" line="158" name="END" />
            <variable citdl="Number" line="160" name="HOME" />
            <variable citdl="Number" line="162" name="LEFT" />
            <variable citdl="Number" line="164" name="UP" />
            <variable citdl="Number" line="166" name="RIGHT" />
            <variable citdl="Number" line="168" name="DOWN" />
            <variable citdl="Number" line="170" name="PRINT_SCREEN" />
            <variable citdl="Number" line="172" name="INSERT" />
            <variable citdl="Number" line="174" name="DELETE" />
            <variable citdl="Number" line="176" name="ZERO" />
            <variable citdl="Number" line="178" name="ONE" />
            <variable citdl="Number" line="180" name="TWO" />
            <variable citdl="Number" line="182" name="THREE" />
            <variable citdl="Number" line="184" name="FOUR" />
            <variable citdl="Number" line="186" name="FIVE" />
            <variable citdl="Number" line="188" name="SIX" />
            <variable citdl="Number" line="190" name="SEVEN" />
            <variable citdl="Number" line="192" name="EIGHT" />
            <variable citdl="Number" line="194" name="NINE" />
            <variable citdl="Number" line="196" name="A" />
            <variable citdl="Number" line="198" name="B" />
            <variable citdl="Number" line="200" name="C" />
            <variable citdl="Number" line="202" name="D" />
            <variable citdl="Number" line="204" name="E" />
            <variable citdl="Number" line="206" name="F" />
            <variable citdl="Number" line="208" name="G" />
            <variable citdl="Number" line="210" name="H" />
            <variable citdl="Number" line="212" name="I" />
            <variable citdl="Number" line="214" name="J" />
            <variable citdl="Number" line="216" name="K" />
            <variable citdl="Number" line="218" name="L" />
            <variable citdl="Number" line="220" name="M" />
            <variable citdl="Number" line="222" name="N" />
            <variable citdl="Number" line="224" name="O" />
            <variable citdl="Number" line="226" name="P" />
            <variable citdl="Number" line="228" name="Q" />
            <variable citdl="Number" line="230" name="R" />
            <variable citdl="Number" line="232" name="S" />
            <variable citdl="Number" line="234" name="T" />
            <variable citdl="Number" line="236" name="U" />
            <variable citdl="Number" line="238" name="V" />
            <variable citdl="Number" line="240" name="W" />
            <variable citdl="Number" line="242" name="X" />
            <variable citdl="Number" line="244" name="Y" />
            <variable citdl="Number" line="246" name="Z" />
            <variable citdl="Number" line="248" name="CONTEXT_MENU" />
            <variable citdl="Number" line="250" name="NUM_ZERO" />
            <variable citdl="Number" line="252" name="NUM_ONE" />
            <variable citdl="Number" line="254" name="NUM_TWO" />
            <variable citdl="Number" line="256" name="NUM_THREE" />
            <variable citdl="Number" line="258" name="NUM_FOUR" />
            <variable citdl="Number" line="260" name="NUM_FIVE" />
            <variable citdl="Number" line="262" name="NUM_SIX" />
            <variable citdl="Number" line="264" name="NUM_SEVEN" />
            <variable citdl="Number" line="266" name="NUM_EIGHT" />
            <variable citdl="Number" line="268" name="NUM_NINE" />
            <variable citdl="Number" line="270" name="NUM_MULTIPLY" />
            <variable citdl="Number" line="272" name="NUM_PLUS" />
            <variable citdl="Number" line="274" name="NUM_MINUS" />
            <variable citdl="Number" line="276" name="NUM_PERIOD" />
            <variable citdl="Number" line="278" name="NUM_DIVISION" />
            <variable citdl="Number" line="280" name="F1" />
            <variable citdl="Number" line="282" name="F2" />
            <variable citdl="Number" line="284" name="F3" />
            <variable citdl="Number" line="286" name="F4" />
            <variable citdl="Number" line="288" name="F5" />
            <variable citdl="Number" line="290" name="F6" />
            <variable citdl="Number" line="292" name="F7" />
            <variable citdl="Number" line="294" name="F8" />
            <variable citdl="Number" line="296" name="F9" />
            <variable citdl="Number" line="298" name="F10" />
            <variable citdl="Number" line="300" name="F11" />
            <variable citdl="Number" line="302" name="F12" />
            <scope ilk="function" line="305" lineend="312" name="isNavKeyPress" signature="isNavKeyPress()">
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="307" name="me" />
              <variable attributes="__local__ private" citdl="this.normalizeKey()" line="307" name="k" />
            </scope>
            <scope ilk="function" line="314" lineend="321" name="isSpecialKey" signature="isSpecialKey()">
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this.normalizeKey()" line="315" name="k" />
            </scope>
            <scope ilk="function" line="323" lineend="325" name="getPoint" returns="Ext.lib.Point" signature="getPoint()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Returns true if the control, meta, shift or alt key was pressed during this event." ilk="function" line="331" lineend="333" name="hasModifier" returns="Boolean" signature="hasModifier()">
              <variable citdl="prototype" name="this" />
            </scope>
          </variable>
        </variable>
        <scope classrefs="Ext.Container" ilk="class" line="348" lineend="360" name="Toolbar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Basic Toolbar class. Although the {@link Ext.Container#defaultType defaultType} for Toolbar&#xA;is {@link Ext.Button button}, Toolbar elements (child items for the Toolbar container) may&#xA;be virtually any type of Component. Toolbar elements can be created explicitly via their constructors,&#xA;or implicitly via their xtypes, and can be {@link #add}ed dynamically.&#xA;Some items have shortcut strings for creation:&#xA;&#xA;Shortcut  xtype          Class                  Description&#xA;&apos;-&gt;&apos;      &apos;tbfill&apos;       {@link Ext.Toolbar.Fill}       begin using the right-justified button container&#xA;&apos;-&apos;       &apos;tbseparator&apos;  {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items&#xA;&apos; &apos;       &apos;tbspacer&apos;     {@link Ext.Toolbar.Spacer}     add horiztonal space between elements&#xA;&#xA;&#xA;Example usage of various elements:&#xA;&#xA;var tb = new Ext.Toolbar({&#xA;renderTo: document.body,&#xA;width: 600,&#xA;height: 100,&#xA;items: [&#xA;// xtype: &apos;button&apos;, // default for Toolbars, same as &apos;tbbutton&apos;&#xA;text: &apos;Button&apos;&#xA;xtype: &apos;splitbutton&apos;, // same as &apos;tbsplitbutton&apos;&#xA;text: &apos;Split Button&apos;&#xA;// begin using the right-justified button container&#xA;&apos;-&gt;&apos;, // same as {xtype: &apos;tbfill&apos;}, // Ext.Toolbar.Fill&#xA;xtype: &apos;textfield&apos;,&#xA;name: &apos;field1&apos;,&#xA;emptyText: &apos;enter search term&apos;&#xA;// add a vertical separator bar between toolbar items&#xA;&apos;-&apos;, // same as {xtype: &apos;tbseparator&apos;} to create Ext.Toolbar.Separator&#xA;&apos;text 1&apos;, // same as {xtype: &apos;tbtext&apos;, text: &apos;text1&apos;} to create Ext.Toolbar.TextItem&#xA;{xtype: &apos;tbspacer&apos;},// same as &apos; &apos; to create Ext.Toolbar.Spacer&#xA;&apos;text 2&apos;,&#xA;{xtype: &apos;tbspacer&apos;, width: 50}, // add a 50px space&#xA;&apos;text 3&apos;&#xA;});&#xA;&#xA;Example adding a ComboBox within a menu of a button:&#xA;&#xA;// ComboBox creation&#xA;var combo = new Ext.form.ComboBox({&#xA;store: new Ext.data.ArrayStore({&#xA;autoDestroy: true,&#xA;fields: [&apos;initials&apos;, &apos;fullname&apos;],&#xA;data : [&#xA;[&apos;FF&apos;, &apos;Fred Flintstone&apos;],&#xA;[&apos;BR&apos;, &apos;Barney Rubble&apos;]&#xA;}),&#xA;displayField: &apos;fullname&apos;,&#xA;typeAhead: true,&#xA;mode: &apos;local&apos;,&#xA;forceSelection: true,&#xA;triggerAction: &apos;all&apos;,&#xA;emptyText: &apos;Select a name...&apos;,&#xA;selectOnFocus: true,&#xA;width: 135,&#xA;getListParent: function() {&#xA;return this.el.up(&apos;.x-menu&apos;);&#xA;iconCls: &apos;no-icon&apos; //use iconCls if placing within menu to shift to right side of menu&#xA;});&#xA;// put ComboBox in a Menu&#xA;var menu = new Ext.menu.Menu({&#xA;id: &apos;mainMenu&apos;,&#xA;items: [&#xA;combo // A Field in a Menu&#xA;});&#xA;// add a Button with the menu&#xA;tb.add({&#xA;text:&apos;Button w/ Menu&apos;,&#xA;menu: menu  // assign menu by instance&#xA;});&#xA;tb.doLayout();" ilk="function" line="348" lineend="360" name="Toolbar" signature="Toolbar(config)">
            <variable citdl="Object/Array" doc="A config object or an array of buttons to {@link #add}" ilk="argument" name="config" />
            <variable citdl="Toolbar" name="this" />
          </scope>
        </scope>
        <scope doc="Partitions the set into two sets: a true set and a false set.&#xA;Example:&#xA;Example2:&#xA;&#xA;// Example 1:&#xA;Ext.partition([true, false, true, true, false]); // [[true, true, true], [false, false]]&#xA;// Example 2:&#xA;Ext.partition(&#xA;Ext.query(&quot;p&quot;),&#xA;function(val){&#xA;return val.className == &quot;class1&quot;&#xA;// true are those paragraph elements with a className of &quot;class1&quot;,&#xA;// false set are those that do not have that className." ilk="function" line="356" lineend="362" name="partition" returns="Array" signature="partition(arr, truth)">
          <variable citdl="{Array" doc="The array to partition" ilk="argument" name="arr" />
          <variable citdl="Function" doc="(optional) a function to determine truth.  If this is omitted the element&#xA;itself must be able to be evaluated for its truthfulness." ilk="argument" name="truth" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="357" name="ret" />
        </scope>
        <variable citdl="Object" line="373" name="Direct">
          <scope classrefs="Object" ilk="class" line="7" lineend="15" name="Event">
            <scope attributes="__ctor__" ilk="function" line="7" lineend="9" name="Event" signature="Event(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="Boolean" line="11" name="status" />
            <scope ilk="function" line="12" lineend="14" name="getData" returns="this.data" signature="getData()">
              <variable citdl="Event" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="14" lineend="32" name="Transaction">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Supporting Class for Ext.Direct (not intended to be used directly)." ilk="function" line="14" lineend="18" name="Transaction" signature="Transaction(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="Transaction" name="this" />
            </scope>
            <variable line="16" name="tid" />
            <variable citdl="Number" line="17" name="retryCount" />
            <scope ilk="function" line="20" lineend="22" name="send" signature="send()">
              <variable citdl="Transaction" name="this" />
            </scope>
            <scope ilk="function" line="24" lineend="27" name="retry" signature="retry()">
              <variable citdl="Transaction" name="this" />
            </scope>
            <scope ilk="function" line="29" lineend="31" name="getProvider" returns="this.provider" signature="getProvider()">
              <variable citdl="Transaction" name="this" />
            </scope>
          </scope>
          <variable citdl="Ext.extend()" line="22" name="RemotingEvent" />
          <variable citdl="Ext.extend()" line="27" name="ExceptionEvent" />
          <variable citdl="Object" line="29" lineend="33" name="eventTypes">
            <variable citdl="Ext.Direct.RemotingEvent" line="30" name="rpc" />
            <variable citdl="Ext.Direct.Event" line="31" name="event" />
            <variable citdl="Ext.Direct.ExceptionEvent" line="32" name="exception" />
          </variable>
          <variable citdl="Number" line="234" name="TID" />
          <variable citdl="Object" line="373" lineend="235" name="PROVIDERS">
            <variable citdl="Ext.direct.PollingProvider" line="151" name="polling" />
            <variable citdl="Ext.direct.RemotingProvider" line="373" name="remoting" />
          </variable>
        </variable>
        <scope doc="Invokes a method on each item in an Array.&#xA;&#xA;// Example:&#xA;Ext.invoke(Ext.query(&quot;p&quot;), &quot;getAttribute&quot;, &quot;id&quot;);&#xA;// [el1.getAttribute(&quot;id&quot;), el2.getAttribute(&quot;id&quot;), ..., elN.getAttribute(&quot;id&quot;)]" ilk="function" line="376" lineend="387" name="invoke" returns="Array" signature="invoke(arr, methodName)">
          <variable citdl="{Array" doc="The Array of items to invoke the method on." ilk="argument" name="arr" />
          <variable citdl="String" doc="The method name to invoke." ilk="argument" name="methodName" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="378" name="args" />
          <variable attributes="__local__ private" citdl="Array" line="378" name="ret" />
        </scope>
        <variable citdl="Ext.extend()" doc="Slider which supports vertical or horizontal orientation, keyboard adjustments,&#xA;configurable snapping, axis clicking and animation. Can be added as an item to&#xA;any container. Example usage:&#xA;new Ext.Slider({&#xA;renderTo: Ext.getBody(),&#xA;width: 200,&#xA;value: 50,&#xA;increment: 10,&#xA;minValue: 0,&#xA;maxValue: 100&#xA;});" line="389" name="Slider" />
        <scope doc="Plucks the value of a property from each item in the Array&#xA;&#xA;// Example:&#xA;Ext.pluck(Ext.query(&quot;p&quot;), &quot;className&quot;); // [el1.className, el2.className, ..., elN.className]" ilk="function" line="399" lineend="405" name="pluck" returns="Array" signature="pluck(arr, prop)">
          <variable citdl="{Array" doc="The Array of items to pluck the value from." ilk="argument" name="arr" />
          <variable citdl="String" doc="The property name to pluck from each element." ilk="argument" name="prop" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="400" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="401" lineend="403" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Object" line="406" lineend="1083" name="TabPanel">
          <scope ilk="function" line="1076" lineend="1100" name="AccessStack" signature="AccessStack()">
            <variable citdl="TabPanel" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="1077" name="items" />
          </scope>
        </variable>
        <scope doc="Zips N sets together.&#xA;&#xA;// Example 1:&#xA;Ext.zip([1,2,3],[4,5,6]); // [[1,4],[2,5],[3,6]]&#xA;// Example 2:&#xA;Ext.zip(&#xA;[ &quot;+&quot;, &quot;-&quot;, &quot;+&quot;],&#xA;[  12,  10,  22],&#xA;[  43,  15,  96],&#xA;function(a, b, c){&#xA;return &quot;$&quot; + a + &quot;&quot; + b + &quot;.&quot; + c&#xA;); // [&quot;$+12.43&quot;, &quot;$-10.15&quot;, &quot;$+22.96&quot;]" ilk="function" line="426" lineend="444" name="zip" returns="Array" signature="zip()">
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="427" lineend="427" name="(anonymous)" signature="(anonymous)()" />
          <variable attributes="__local__ private" citdl="Ext.partition()" line="431" name="parts" />
          <variable attributes="__local__ private" citdl="parts[0]" line="431" name="arrs" />
          <variable attributes="__local__ private" citdl="Ext.max()" line="431" name="len" />
          <variable attributes="__local__ private" citdl="parts[1][0]" line="431" name="fn" />
          <variable attributes="__local__ private" citdl="Array" line="431" name="ret" />
        </scope>
        <scope doc="This is shorthand reference to {@link Ext.ComponentMgr#get}.&#xA;Looks up an existing {@link Ext.Component Component} by {@link Ext.Component#id id}" ilk="function" line="453" lineend="455" name="getCmp" returns="Ext.ComponentMgr.get()" signature="getCmp(id)">
          <variable citdl="String" doc="The component {@link Ext.Component#id id}" ilk="argument" name="id" />
          <variable citdl="o" name="this" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides AJAX-style update capabilities for Element objects.  Updater can be used to {@link #update}&#xA;an {@link Ext.Element} once, or you can use {@link #startAutoRefresh} to set up an auto-updating&#xA;{@link Ext.Element Element} on a specific interval.&#xA;Usage:&#xA;&#xA;var el = Ext.get(&quot;foo&quot;); // Get Ext.Element object&#xA;var mgr = el.getUpdater();&#xA;mgr.update({&#xA;url: &quot;http://myserver.com/index.php&quot;,&#xA;params: {&#xA;param1: &quot;foo&quot;,&#xA;param2: &quot;bar&quot;&#xA;});&#xA;...&#xA;mgr.formUpdate(&quot;myFormId&quot;, &quot;http://myserver.com/index.php&quot;);&#xA;&#xA;// or directly (returns the same Updater instance)&#xA;var mgr = new Ext.Updater(&quot;myElementId&quot;);&#xA;mgr.startAutoRefresh(60, &quot;http://myserver.com/index.php&quot;);&#xA;mgr.on(&quot;update&quot;, myFcnNeedsToKnow);&#xA;&#xA;// short handed call directly from the element object&#xA;Ext.get(&quot;foo&quot;).load({&#xA;url: &quot;bar.php&quot;,&#xA;scripts: true,&#xA;params: &quot;param1=foo&amp;amp;param2=bar&quot;,&#xA;text: &quot;Loading Foo...&quot;&#xA;});" line="458" name="Updater" />
        <variable citdl="Boolean" doc="By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,&#xA;you may want to set this to true." line="462" name="useShims" />
        <scope doc="Returns the type of object that is passed in. If the object passed in is null or undefined it&#xA;return false otherwise it returns one of the following values:&#xA;string: If the object passed is a string&#xA;number: If the object passed is a number&#xA;boolean: If the object passed is a boolean value&#xA;date: If the object passed is a Date object&#xA;function: If the object passed is a function reference&#xA;object: If the object passed is an object&#xA;array: If the object passed is an array&#xA;regexp: If the object passed is a regular expression&#xA;element: If the object passed is a DOM Element&#xA;nodelist: If the object passed is a DOM NodeList&#xA;textnode: If the object passed is a DOM text node and contains something other than whitespace&#xA;whitespace: If the object passed is a DOM text node and contains only whitespace" ilk="function" line="484" lineend="509" name="type" returns="String" signature="type(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" line="491" name="t" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A standard tooltip implementation for providing additional information when hovering over a target element." line="492" name="ToolTip" />
        <scope ilk="function" line="511" lineend="513" name="intercept" signature="intercept(o, name, fn, scope)">
          <variable citdl="o[name].createInterceptor()" ilk="argument" name="o" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="scope" />
          <variable citdl="o" name="this" />
        </scope>
        <scope ilk="function" line="516" lineend="524" name="callback" signature="callback(cb, scope, args, delay)">
          <variable ilk="argument" name="cb" />
          <variable ilk="argument" name="scope" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="delay" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Ext.data.Connection" doc="The global Ajax request class that provides a simple way to make Ajax requests&#xA;with maximum flexibility.&#xA;Since Ext.Ajax is a singleton, you can set common properties/events for it once&#xA;and override them at the request function level only if necessary.&#xA;Common Properties you may want to set are:&#xA;{@link #method}&#xA;{@link #extraParams}&#xA;{@link #url}&#xA;&#xA;&#xA;// Default headers to pass in every request&#xA;Ext.Ajax.defaultHeaders = {&#xA;&apos;Powered-By&apos;: &apos;Ext&apos;&#xA;&#xA;&#xA;Common Events you may want to set are:&#xA;{@link Ext.data.Connection#beforerequest beforerequest}&#xA;{@link Ext.data.Connection#requestcomplete requestcomplete}&#xA;{@link Ext.data.Connection#requestexception requestexception}&#xA;&#xA;&#xA;// Example: show a spinner during all Ajax requests&#xA;Ext.Ajax.on(&apos;beforerequest&apos;, this.showSpinner, this);&#xA;Ext.Ajax.on(&apos;requestcomplete&apos;, this.hideSpinner, this);&#xA;Ext.Ajax.on(&apos;requestexception&apos;, this.hideSpinner, this);&#xA;&#xA;&#xA;An example request:&#xA;&#xA;// Basic request&#xA;Ext.Ajax.{@link Ext.data.Connection#request request}({&#xA;url: &apos;foo.php&apos;,&#xA;success: someFn,&#xA;failure: otherFn,&#xA;headers: {&#xA;&apos;my-header&apos;: &apos;foo&apos;&#xA;params: { foo: &apos;bar&apos; }&#xA;});&#xA;// Simple ajax form submission&#xA;Ext.Ajax.{@link Ext.data.Connection#request request}({&#xA;form: &apos;some-form&apos;,&#xA;params: &apos;foo=bar&apos;&#xA;});" line="575" name="Ajax" />
        <variable citdl="Ext.MessageBox" doc="Shorthand for {@link Ext.MessageBox}" line="626" name="Msg" />
        <variable citdl="Object" line="707" lineend="761" name="ButtonToggleMgr">
          <scope ilk="function" line="722" lineend="732" name="register" signature="register(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="726" name="g" />
          </scope>
          <scope ilk="function" line="734" lineend="743" name="unregister" signature="unregister(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="738" name="g" />
          </scope>
          <scope doc="Gets the pressed button in the passed group or null" ilk="function" line="750" lineend="760" name="getPressed" signature="getPressed(group)">
            <variable citdl="String" ilk="argument" name="group" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[group]" line="751" name="g" />
          </scope>
        </variable>
        <variable citdl="Ext.form.BasicForm" line="735" name="BasicForm" />
        <variable citdl="Ext.DomQuery.select" doc="Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Ext.DomQuery#select}" line="826" name="query" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized panel intended for use as an application window.  Windows are floated, {@link #resizable}, and&#xA;{@link #draggable} by default.  Windows can be {@link #maximizable maximized} to fill the viewport,&#xA;restored to their prior size, and can be {@link #minimize}d.&#xA;Windows can also be linked to a {@link Ext.WindowGroup} or managed by the {@link Ext.WindowMgr} to provide&#xA;grouping, activation, to front, to back and other application-specific behavior.&#xA;By default, Windows will be rendered to document.body. To {@link #constrain} a Window to another element&#xA;specify {@link Ext.Component#renderTo renderTo}.&#xA;Note: By default, the {@link #closable close} header tool destroys the Window resulting in&#xA;destruction of any child Components. This makes the Window object, and all its descendants unusable. To enable&#xA;re-use of a Window, use {@link #closeAction closeAction: &apos;hide&apos;}." line="906" name="Window" />
        <variable citdl="El.get" doc="Retrieves Ext.Element objects.&#xA;This method does not retrieve {@link Ext.Component Component}s. This method&#xA;retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by&#xA;its ID, use {@link Ext.ComponentMgr#get}.&#xA;Uses simple caching to consistently return the same object. Automatically fixes if an&#xA;object was recreated with the same id via AJAX or DOM.&#xA;Shorthand of {@link Ext.Element#get}" line="912" name="get" />
        <variable citdl="El.fly" doc="Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -&#xA;the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}&#xA;Use this to make one-time references to DOM elements which are not going to be accessed again either by&#xA;application code, or by Ext&apos;s classes. If accessing an element which will be processed regularly, then {@link Ext#get}&#xA;will be more appropriate to take advantage of the caching provided by the Ext.Element class." line="927" name="fly" />
      </variable>
      <variable citdl="Object" line="39" lineend="1286" name="Date">
        <scope ilk="function" line="44" lineend="46" name="getShortMonthName" returns="Date.monthNames[month].substring()" signature="getShortMonthName(month)">
          <variable ilk="argument" name="month" />
          <variable citdl="Date" name="this" />
        </scope>
        <variable citdl="Array" line="57" name="shortMonthNames" />
        <scope ilk="function" line="63" lineend="65" name="getMonthNumber" returns="Date.monthNumbers[name.substring(0,1).toUpperCase()+name.substring(1,3).toLowerCase()]" signature="getMonthNumber(name)">
          <variable ilk="argument" name="name" />
          <variable citdl="Date" name="this" />
        </scope>
        <scope ilk="function" line="77" lineend="79" name="getShortDayName" returns="Date.dayNames[day].substring()" signature="getShortDayName(day)">
          <variable ilk="argument" name="day" />
          <variable citdl="Date" name="this" />
        </scope>
        <variable citdl="Array" line="89" name="shortDayNames" />
        <variable attributes="__static__" citdl="Boolean" doc="STATIC: Global flag which determines if strict date parsing should be used.&#xA;Strict date parsing will not roll-over invalid dates, which is the&#xA;default behaviour of javascript Date objects.&#xA;(see {@link #parseDate} for more information)&#xA;Defaults to false." line="131" name="useStrict" />
        <scope ilk="function" line="146" lineend="162" name="formatCodeToRegex" returns="p" signature="formatCodeToRegex(character, currentGroup)">
          <variable ilk="argument" name="character" />
          <variable ilk="argument" name="currentGroup" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.parseCodes[character]" line="148" name="p" />
        </scope>
        <variable citdl="Number" line="158" name="g" />
        <variable line="159" name="c" />
        <variable citdl="Ext.escapeRe()" line="160" name="s" />
        <variable attributes="__static__" citdl="Object" doc="STATIC: An object hash in which each property is a date parsing function. The property name is the&#xA;format string which that function parses.&#xA;This object is automatically populated with date parsing functions as&#xA;date formats are requested for Ext standard formatting strings.&#xA;Custom parsing functions may be inserted into this object, keyed by a name which from then on&#xA;may be used as a format string to {@link #parseDate}.&#xA;Example:&#xA;Date.parseFunctions[&apos;x-date-format&apos;] = myDateParser;&#xA;A parsing function should return a Date object, and is passed the following parameters:&#xA;date : StringThe date string to parse.&#xA;strict : BooleanTrue to validate date strings while parsing&#xA;(i.e. prevent javascript Date &quot;rollover&quot;) (The default must be false).&#xA;Invalid date strings should return null when parsed.&#xA;&#xA;To enable Dates to also be formatted according to that format, a corresponding&#xA;formatting function must be placed into the {@link #formatFunctions} property." line="190" lineend="198" name="parseFunctions">
          <scope ilk="function" line="191" lineend="197" name="M$" returns="r" signature="M$(input, strict)">
            <variable ilk="argument" name="input" />
            <variable ilk="argument" name="strict" />
            <variable citdl="parseFunctions" name="this" />
            <variable attributes="__local__ private" citdl="RegExp" line="194" name="re" />
            <variable attributes="__local__ private" line="195" name="r" />
          </scope>
        </variable>
        <variable citdl="Array" line="199" name="parseRegexes" />
        <variable attributes="__static__" citdl="Object" doc="STATIC: An object hash in which each property is a date formatting function. The property name is the&#xA;format string which corresponds to the produced formatted date string.&#xA;This object is automatically populated with date formatting functions as&#xA;date formats are requested for Ext standard formatting strings.&#xA;Custom formatting functions may be inserted into this object, keyed by a name which from then on&#xA;may be used as a format string to {@link #format}. Example:&#xA;Date.formatFunctions[&apos;x-date-format&apos;] = myDateFormatter;&#xA;A formatting function should return a string repesentation of the passed Date object:&#xA;date : DateThe Date to format.&#xA;&#xA;To enable date strings to also be parsed according to that format, a corresponding&#xA;parsing function must be placed into the {@link #parseFunctions} property." line="219" lineend="224" name="formatFunctions">
          <scope ilk="function" line="220" lineend="223" name="M$" returns="String" signature="M$()">
            <variable citdl="formatFunctions" name="this" />
          </scope>
        </variable>
        <variable citdl="Number" line="226" name="y2kYear" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="233" name="MILLI" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="240" name="SECOND" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="247" name="MINUTE" />
        <variable citdl="String" line="253" name="HOUR" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="260" name="DAY" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="267" name="MONTH" />
        <variable attributes="__static__" citdl="String" doc="STATIC: Date interval constant" line="274" name="YEAR" />
        <variable attributes="__static__" citdl="Object" doc="STATIC: An object hash containing default date values used during date parsing.&#xA;The following properties are available:&#xA;y : NumberThe default year value. (defaults to undefined)&#xA;m : NumberThe default 1-based month value. (defaults to undefined)&#xA;d : NumberThe default day value. (defaults to undefined)&#xA;h : NumberThe default hour value. (defaults to undefined)&#xA;i : NumberThe default minute value. (defaults to undefined)&#xA;s : NumberThe default second value. (defaults to undefined)&#xA;ms : NumberThe default millisecond value. (defaults to undefined)&#xA;&#xA;Override these properties to customize the default date values used by the {@link #parseDate} method.&#xA;Note: In countries which experience Daylight Saving Time (i.e. DST), the h, i, s&#xA;and ms properties may coincide with the exact time in which DST takes effect.&#xA;It is the responsiblity of the developer to account for this.&#xA;Example Usage:&#xA;&#xA;// set default day value to the first day of the month&#xA;Date.defaults.d = 1;&#xA;// parse a February date string containing only year and month values.&#xA;// setting the default day value to 1 prevents weird date rollover issues&#xA;// when attempting to parse the following date string on, for example, March 31st 2009.&#xA;Date.parseDate(&apos;2009-02&apos;, &apos;Y-m&apos;); // returns a Date object representing February 1st 2009" line="305" lineend="305" name="defaults" />
        <variable attributes="__static__" citdl="Array" doc="STATIC: An array of textual day names.&#xA;Override these values for international dates.&#xA;Example:&#xA;&#xA;Date.dayNames = [&#xA;&apos;SundayInYourLang&apos;,&#xA;&apos;MondayInYourLang&apos;,&#xA;..." line="322" name="dayNames" />
        <variable attributes="__static__" citdl="Array" doc="STATIC: An array of textual month names.&#xA;Override these values for international dates.&#xA;Example:&#xA;&#xA;Date.monthNames = [&#xA;&apos;JanInYourLang&apos;,&#xA;&apos;FebInYourLang&apos;,&#xA;..." line="346" name="monthNames" />
        <variable attributes="__static__" citdl="Object" doc="STATIC: An object hash of zero-based javascript month numbers (with short month names as keys. note: keys are case-sensitive).&#xA;Override these values for international dates.&#xA;Example:&#xA;&#xA;Date.monthNumbers = {&#xA;&apos;ShortJanNameInYourLang&apos;:0,&#xA;&apos;ShortFebNameInYourLang&apos;:1,&#xA;..." line="374" lineend="61" name="monthNumbers">
          <variable citdl="Number" line="50" name="1" />
          <variable citdl="Number" line="51" name="2" />
          <variable citdl="Number" line="52" name="3" />
          <variable citdl="Number" line="53" name="4" />
          <variable citdl="Number" line="54" name="5" />
          <variable citdl="Number" line="55" name="6" />
          <variable citdl="Number" line="56" name="&#193;&#8364;" />
          <variable citdl="Number" line="56" name="7" />
          <variable citdl="Number" line="56" name="Gen" />
          <variable citdl="Number" line="56" name="Sty" />
          <variable citdl="Number" line="57" name="8" />
          <variable citdl="Number" line="57" name="&#161;&#376;" />
          <variable citdl="Number" line="57" name="Lut" />
          <variable citdl="Number" line="58" name="&#193;&#213;&#8364;" />
          <variable citdl="Number" line="58" name="9" />
          <variable citdl="Number" line="59" name="10" />
          <variable citdl="Number" line="59" name="&#224;&#193;&#194;" />
          <variable citdl="Number" line="59" name="Kwi" />
          <variable citdl="Number" line="60" name="M&#225;r" />
          <variable citdl="Number" line="60" name="&#376;&#8364;" />
          <variable citdl="Number" line="60" name="11" />
          <variable citdl="Number" line="60" name="Mag" />
          <variable citdl="Number" line="60" name="Maj" />
          <variable citdl="Number" line="61" name="Giu" />
          <variable citdl="Number" line="61" name="12" />
          <variable citdl="Number" line="61" name="&#193;pr" />
          <variable citdl="Number" line="61" name="&#193;&#212;&#194;" />
          <variable citdl="Number" line="61" name="Fev" />
          <variable citdl="Number" line="61" name="Cze" />
          <variable citdl="Number" line="62" name="M&#225;j" />
          <variable citdl="Number" line="62" name="Sau" />
          <variable citdl="Number" line="62" name="&#161;&#8364;" />
          <variable citdl="Number" line="62" name="Lug" />
          <variable citdl="Number" line="62" name="Lip" />
          <variable citdl="Number" line="63" name="Vas" />
          <variable citdl="Number" line="63" name="J&#250;n" />
          <variable citdl="Number" line="63" name="Ago" />
          <variable citdl="Number" line="63" name="&#202;&#8364;" />
          <variable citdl="Number" line="63" name="Abr" />
          <variable citdl="Number" line="63" name="Sie" />
          <variable citdl="Number" line="64" name="Wrz" />
          <variable citdl="Number" line="64" name="J&#250;l" />
          <variable citdl="Number" line="64" name="Set" />
          <variable citdl="Number" line="64" name="Kov" />
          <variable citdl="Number" line="64" name="&#161;&#194;" />
          <variable citdl="Number" line="65" name="Bal" />
          <variable citdl="Number" line="65" name="&#181;&#8364;" />
          <variable citdl="Number" line="65" name="Pa&#378;" />
          <variable citdl="Number" line="65" name="Ott" />
          <variable citdl="Number" line="66" name="&#376;&#194;" />
          <variable citdl="Number" line="66" name="Sze" />
          <variable citdl="Number" line="66" name="Geg" />
          <variable citdl="Number" line="66" name="Lis" />
          <variable citdl="Number" line="67" name="Okt" />
          <variable citdl="Number" line="67" name="Bir" />
          <variable citdl="Number" line="67" name="Dic" />
          <variable citdl="Number" line="67" name="&#382;&#8364;" />
          <variable citdl="Number" line="67" name="Mei" />
          <variable citdl="Number" line="67" name="Gru" />
          <variable citdl="Number" line="68" name="Lie" />
          <variable citdl="Number" line="69" name="Rgp" />
          <variable citdl="Number" line="69" name="Out" />
          <variable citdl="Number" line="70" name="Rgs" />
          <variable citdl="Number" line="70" name="Agu" />
          <variable citdl="Number" line="70" name="Janvier" />
          <variable citdl="Number" line="70" name="&#1071;&#1085;&#1074;" />
          <variable citdl="Number" line="71" name="Spa" />
          <variable citdl="Number" line="71" name="&#1060;&#1077;&#1074;" />
          <variable citdl="Number" line="71" name="Dez" />
          <variable citdl="Number" line="71" name="F&#233;vrier" />
          <variable citdl="Number" line="72" name="Mars" />
          <variable citdl="Number" line="72" name="&#1052;&#1072;&#1088;" />
          <variable citdl="Number" line="72" name="Lap" />
          <variable citdl="Number" line="73" name="Grd" />
          <variable citdl="Number" line="73" name="Avril" />
          <variable citdl="Number" line="73" name="&#1040;&#1087;&#1088;" />
          <variable citdl="Number" line="74" name="Mai" />
          <variable citdl="Number" line="74" name="&#1052;&#1072;&#1081;" />
          <variable citdl="Number" line="74" name="Des" />
          <variable citdl="Number" line="75" name="Juin" />
          <variable citdl="Number" line="75" name="&#1048;&#1102;&#1085;" />
          <variable citdl="Number" line="76" name="Juillet" />
          <variable citdl="Number" line="76" name="&#1048;&#1102;&#1083;" />
          <variable citdl="Number" line="77" name="Ao&#251;t" />
          <variable citdl="Number" line="77" name="&#1040;&#1074;&#1075;" />
          <variable citdl="Number" line="78" name="&#1057;&#1077;&#1085;" />
          <variable citdl="Number" line="78" name="Septembre" />
          <variable citdl="Number" line="79" name="&#1054;&#1082;&#1090;" />
          <variable citdl="Number" line="79" name="Octobre" />
          <variable citdl="Number" line="80" name="&#1053;&#1086;&#1103;" />
          <variable citdl="Number" line="80" name="Novembre" />
          <variable citdl="Number" line="81" name="&#1044;&#1077;&#1082;" />
          <variable citdl="Number" line="81" name="D&#233;cembre" />
          <variable citdl="Number" line="375" name="Jan" />
          <variable citdl="Number" line="376" name="Feb" />
          <variable citdl="Number" line="377" name="Mar" />
          <variable citdl="Number" line="378" name="Apr" />
          <variable citdl="Number" line="379" name="May" />
          <variable citdl="Number" line="380" name="Jun" />
          <variable citdl="Number" line="381" name="Jul" />
          <variable citdl="Number" line="382" name="Aug" />
          <variable citdl="Number" line="383" name="Sep" />
          <variable citdl="Number" line="384" name="Oct" />
          <variable citdl="Number" line="385" name="Nov" />
          <variable citdl="Number" line="386" name="Dec" />
        </variable>
        <variable attributes="__static__" citdl="Object" doc="STATIC: The base format-code to formatting-function hashmap used by the {@link #format} method.&#xA;Formatting functions are strings (or functions which return strings) which&#xA;will return the appropriate value when evaluated in the context of the Date object&#xA;from which the {@link #format} method is called.&#xA;Add to / override these mappings for custom date formatting.&#xA;Note: Date.format() treats characters as literals if an appropriate mapping cannot be found.&#xA;Example:&#xA;&#xA;Date.formatCodes.x = &quot;String.leftPad(this.getDate(), 2, &apos;0&apos;)&quot;;&#xA;(new Date()).format(&quot;X&quot;); // returns the current day of the month" line="438" lineend="494" name="formatCodes">
          <variable citdl="String" line="439" name="d" />
          <variable citdl="String" line="440" name="D" />
          <variable citdl="String" line="441" name="j" />
          <variable citdl="String" line="442" name="l" />
          <variable citdl="String" line="443" name="N" />
          <variable citdl="String" line="444" name="S" />
          <variable citdl="String" line="445" name="w" />
          <variable citdl="String" line="446" name="z" />
          <variable citdl="String" line="447" name="W" />
          <variable citdl="String" line="448" name="F" />
          <variable citdl="String" line="449" name="m" />
          <variable citdl="String" line="450" name="M" />
          <variable citdl="String" line="451" name="n" />
          <variable citdl="String" line="452" name="t" />
          <variable citdl="String" line="453" name="L" />
          <variable citdl="String" line="454" name="o" />
          <variable citdl="String" line="455" name="Y" />
          <variable citdl="String" line="456" name="y" />
          <variable citdl="String" line="457" name="a" />
          <variable citdl="String" line="458" name="A" />
          <variable citdl="String" line="459" name="g" />
          <variable citdl="String" line="460" name="G" />
          <variable citdl="String" line="461" name="h" />
          <variable citdl="String" line="462" name="H" />
          <variable citdl="String" line="463" name="i" />
          <variable citdl="String" line="464" name="s" />
          <variable citdl="String" line="465" name="u" />
          <variable citdl="String" line="466" name="O" />
          <variable citdl="String" line="467" name="P" />
          <variable citdl="String" line="468" name="T" />
          <variable citdl="String" line="469" name="Z" />
          <scope ilk="function" line="471" lineend="477" name="c" returns="code.join()" signature="c()">
            <variable citdl="formatCodes" name="this" />
            <variable attributes="__local__ private" citdl="c.charAt()" line="473" name="e" />
          </scope>
          <variable citdl="String" line="493" name="U" />
        </variable>
        <scope attributes="__static__" doc="STATIC: Checks if the passed Date parameters will cause a javascript Date &quot;rollover&quot;." ilk="function" line="508" lineend="524" name="isValid" returns="Boolean" signature="isValid(y, m, d, h, i, s, ms)">
          <variable ilk="argument" name="y" />
          <variable ilk="argument" name="m" />
          <variable ilk="argument" name="d" />
          <variable citdl="h" ilk="argument" name="h" />
          <variable citdl="i" ilk="argument" name="i" />
          <variable citdl="s" ilk="argument" name="s" />
          <variable citdl="ms" ilk="argument" name="ms" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date" line="515" name="dt" />
        </scope>
        <scope attributes="__static__" doc="STATIC: Parses the passed string using the specified date format.&#xA;Note that this function expects normal calendar dates, meaning that months are 1-based (i.e. 1 = January).&#xA;The {@link #defaults} hash will be used for any date value (i.e. year, month, day, hour, minute, second or millisecond)&#xA;which cannot be found in the passed string. If a corresponding default date value has not been specified in the {@link #defaults} hash,&#xA;the current date&apos;s year, month, day or DST-adjusted zero-hour time value will be used instead.&#xA;Keep in mind that the input date string must precisely match the specified format string&#xA;in order for the parse operation to be successful (failed parse operations return a null value).&#xA;Example:&#xA;//dt = Fri May 25 2007 (current date)&#xA;var dt = new Date();&#xA;//dt = Thu May 25 2006 (today&amp;#39;s month/day in 2006)&#xA;dt = Date.parseDate(&quot;2006&quot;, &quot;Y&quot;);&#xA;//dt = Sun Jan 15 2006 (all date parts specified)&#xA;dt = Date.parseDate(&quot;2006-01-15&quot;, &quot;Y-m-d&quot;);&#xA;//dt = Sun Jan 15 2006 15:20:01&#xA;dt = Date.parseDate(&quot;2006-01-15 3:20:01 PM&quot;, &quot;Y-m-d g:i:s A&quot;);&#xA;// attempt to parse Sun Feb 29 2006 03:20:01 in strict mode&#xA;dt = Date.parseDate(&quot;2006-02-29 03:20:01&quot;, &quot;Y-m-d H:i:s&quot;, true); // returns null&#xA;(defaults to false). Invalid date strings will return null when parsed." ilk="function" line="557" lineend="563" name="parseDate" returns="Date" signature="parseDate(input, format, strict)">
          <variable citdl="String" doc="The raw date string." ilk="argument" name="input" />
          <variable citdl="String" doc="The expected date string format." ilk="argument" name="format" />
          <variable citdl="Boolean" doc="(optional) True to validate date strings while parsing (i.e. prevents javascript Date &quot;rollover&quot;)" ilk="argument" name="strict" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.parseFunctions" line="558" name="p" />
        </scope>
        <scope ilk="function" line="566" lineend="576" name="getFormatCode" returns="f" signature="getFormatCode(character)">
          <variable ilk="argument" name="character" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="Date.formatCodes[character]" line="567" name="f" />
        </scope>
        <scope ilk="function" line="579" lineend="596" name="createFormat" signature="createFormat(format)">
          <variable ilk="argument" name="format" />
          <variable citdl="Date" name="this" />
          <variable attributes="__local__ private" citdl="String" line="582" name="ch" />
          <variable attributes="__local__ private" citdl="Array" line="582" name="code" />
          <variable attributes="__local__ private" citdl="Boolean" line="582" name="special" />
        </scope>
        <variable line="599" name="createParser" />
        <scope doc="Returns the number of milliseconds between this date and date&#xA;@param {Date} date (optional) Defaults to now&#xA;@return {Number} The diff in milliseconds&#xA;@member Date getElapsed" ilk="function" line="649" lineend="651" name="getElapsed" returns="Math.abs()" signature="getElapsed(date)">
          <variable ilk="argument" name="date" />
          <variable citdl="Date" name="this" />
        </scope>
        <variable citdl="Object" line="690" lineend="923" name="parseCodes">
          <variable citdl="Object" line="697" lineend="701" name="d">
            <variable citdl="Number" line="698" name="g" />
            <variable citdl="String" line="699" name="c" />
            <variable citdl="String" line="700" name="s" />
          </variable>
          <variable citdl="Object" line="702" lineend="706" name="j">
            <variable citdl="Number" line="703" name="g" />
            <variable citdl="String" line="704" name="c" />
            <variable citdl="String" line="705" name="s" />
          </variable>
          <scope ilk="function" line="707" lineend="714" name="D" signature="D()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <scope ilk="function" line="715" lineend="721" name="l" signature="l()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="722" lineend="726" name="N">
            <variable citdl="Number" line="723" name="g" />
            <variable line="724" name="c" />
            <variable citdl="String" line="725" name="s" />
          </variable>
          <variable citdl="Object" line="727" lineend="731" name="S">
            <variable citdl="Number" line="728" name="g" />
            <variable line="729" name="c" />
            <variable citdl="String" line="730" name="s" />
          </variable>
          <variable citdl="Object" line="732" lineend="736" name="w">
            <variable citdl="Number" line="733" name="g" />
            <variable line="734" name="c" />
            <variable citdl="String" line="735" name="s" />
          </variable>
          <variable citdl="Object" line="737" lineend="741" name="z">
            <variable citdl="Number" line="738" name="g" />
            <variable citdl="String" line="739" name="c" />
            <variable citdl="String" line="740" name="s" />
          </variable>
          <variable citdl="Object" line="742" lineend="746" name="W">
            <variable citdl="Number" line="743" name="g" />
            <variable line="744" name="c" />
            <variable citdl="String" line="745" name="s" />
          </variable>
          <scope ilk="function" line="747" lineend="753" name="F" signature="F()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <scope ilk="function" line="754" lineend="759" name="M" returns="Ext.applyIf()" signature="M()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="760" lineend="764" name="m">
            <variable citdl="Number" line="761" name="g" />
            <variable citdl="String" line="762" name="c" />
            <variable citdl="String" line="763" name="s" />
          </variable>
          <variable citdl="Object" line="765" lineend="769" name="n">
            <variable citdl="Number" line="766" name="g" />
            <variable citdl="String" line="767" name="c" />
            <variable citdl="String" line="768" name="s" />
          </variable>
          <variable citdl="Object" line="770" lineend="774" name="t">
            <variable citdl="Number" line="771" name="g" />
            <variable line="772" name="c" />
            <variable citdl="String" line="773" name="s" />
          </variable>
          <variable citdl="Object" line="775" lineend="779" name="L">
            <variable citdl="Number" line="776" name="g" />
            <variable line="777" name="c" />
            <variable citdl="String" line="778" name="s" />
          </variable>
          <scope ilk="function" line="780" lineend="782" name="o" returns="$f()" signature="o()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="783" lineend="787" name="Y">
            <variable citdl="Number" line="784" name="g" />
            <variable citdl="String" line="785" name="c" />
            <variable citdl="String" line="786" name="s" />
          </variable>
          <variable citdl="Object" line="788" lineend="793" name="y">
            <variable citdl="Number" line="789" name="g" />
            <variable citdl="String" line="790" name="c" />
            <variable citdl="String" line="792" name="s" />
          </variable>
          <variable citdl="Object" line="794" lineend="800" name="a">
            <variable citdl="Number" line="795" name="g" />
            <variable citdl="String" line="796" name="c" />
            <variable citdl="String" line="799" name="s" />
          </variable>
          <variable citdl="Object" line="801" lineend="807" name="A">
            <variable citdl="Number" line="802" name="g" />
            <variable citdl="String" line="803" name="c" />
            <variable citdl="String" line="806" name="s" />
          </variable>
          <scope ilk="function" line="808" lineend="810" name="g" returns="$f()" signature="g()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="811" lineend="815" name="G">
            <variable citdl="Number" line="812" name="g" />
            <variable citdl="String" line="813" name="c" />
            <variable citdl="String" line="814" name="s" />
          </variable>
          <scope ilk="function" line="816" lineend="818" name="h" returns="$f()" signature="h()">
            <variable citdl="parseCodes" name="this" />
          </scope>
          <variable citdl="Object" line="819" lineend="823" name="H">
            <variable citdl="Number" line="820" name="g" />
            <variable citdl="String" line="821" name="c" />
            <variable citdl="String" line="822" name="s" />
          </variable>
          <variable citdl="Object" line="824" lineend="828" name="i">
            <variable citdl="Number" line="825" name="g" />
            <variable citdl="String" line="826" name="c" />
            <variable citdl="String" line="827" name="s" />
          </variable>
          <variable citdl="Object" line="829" lineend="833" name="s">
            <variable citdl="Number" line="830" name="g" />
            <variable citdl="String" line="831" name="c" />
            <variable citdl="String" line="832" name="s" />
          </variable>
          <variable citdl="Object" line="834" lineend="838" name="u">
            <variable citdl="Number" line="835" name="g" />
            <variable citdl="String" line="836" name="c" />
            <variable citdl="String" line="837" name="s" />
          </variable>
          <variable citdl="Object" line="839" lineend="849" name="O">
            <variable citdl="Number" line="840" name="g" />
            <variable citdl="Array" line="842" name="c" />
            <variable citdl="String" line="848" name="s" />
          </variable>
          <variable citdl="Object" line="850" lineend="860" name="P">
            <variable citdl="Number" line="851" name="g" />
            <variable citdl="Array" line="853" name="c" />
            <variable citdl="String" line="859" name="s" />
          </variable>
          <variable citdl="Object" line="861" lineend="865" name="T">
            <variable citdl="Number" line="862" name="g" />
            <variable line="863" name="c" />
            <variable citdl="String" line="864" name="s" />
          </variable>
          <variable citdl="Object" line="866" lineend="871" name="Z">
            <variable citdl="Number" line="867" name="g" />
            <variable citdl="String" line="868" name="c" />
            <variable citdl="String" line="870" name="s" />
          </variable>
          <scope ilk="function" line="872" lineend="917" name="c" signature="c()">
            <variable citdl="parseCodes" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="881" name="arr" />
            <variable attributes="__local__ private" citdl="Array" line="881" name="calc" />
          </scope>
          <variable citdl="String" line="881" name="c" />
          <variable citdl="Object" line="918" lineend="922" name="U">
            <variable citdl="Number" line="919" name="g" />
            <variable citdl="String" line="920" name="c" />
            <variable citdl="String" line="921" name="s" />
          </variable>
        </variable>
        <variable citdl="Object" line="1243" name="prototype">
          <scope ilk="function" line="930" lineend="935" name="dateFormat" returns="Date.formatFunctions[format].call()" signature="dateFormat(format)">
            <variable ilk="argument" name="format" />
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Get the timezone abbreviation of the current date (equivalent to the format specifier &apos;T&apos;).&#xA;&#xA;Note: The date string returned by the javascript Date object&apos;s toString() method varies&#xA;between browsers (e.g. FF vs IE) and system region settings (e.g. IE in Asia vs IE in America).&#xA;For a given date string e.g. &quot;Thu Oct 25 2007 22:55:35 GMT+0800 (Malay Peninsula Standard Time)&quot;,&#xA;getTimezone() first tries to get the timezone abbreviation from between a pair of parentheses&#xA;(which may or may not be present), failing which it proceeds to get the timezone abbreviation&#xA;from the GMT offset portion of the date string." ilk="function" line="948" lineend="962" name="getTimezone" returns="String" signature="getTimezone()">
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Get the offset from GMT of the current date (equivalent to the format specifier &apos;O&apos;)." ilk="function" line="969" lineend="974" name="getGMTOffset" returns="String" signature="getGMTOffset(colon)">
            <variable citdl="Boolean" doc="(optional) true to separate the hours and minutes with a colon (defaults to false)." ilk="argument" name="colon" />
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Get the numeric day number of the year, adjusted for leap year." ilk="function" line="980" lineend="990" name="getDayOfYear" returns="Number" signature="getDayOfYear()">
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="Number" line="984" name="i" />
            <variable attributes="__local__ private" citdl="Number" line="984" name="num" />
            <variable attributes="__local__ private" citdl="this.getMonth()" line="984" name="m" />
            <variable attributes="__local__ private" citdl="this.clone()" line="984" name="d" />
          </scope>
          <variable doc="Get the numeric ISO-8601 week number of the year.&#xA;(equivalent to the format specifier &apos;W&apos;, but without a leading zero)." line="997" name="getWeekOfYear" />
          <scope doc="Checks if the current date falls within a leap year." ilk="function" line="1015" lineend="1018" name="isLeapYear" returns="Boolean" signature="isLeapYear()">
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this.getFullYear()" line="1016" name="year" />
          </scope>
          <scope doc="Get the first day of the current month, adjusted for leap year.  The returned value&#xA;is the numeric day index within the week (0-6) which can be used in conjunction with&#xA;the {@link #monthNames} array to retrieve the textual day name.&#xA;Example:&#xA;&#xA;var dt = new Date(&apos;1/10/2007&apos;);&#xA;document.write(Date.dayNames[dt.getFirstDayOfMonth()]); //output: &apos;Monday&apos;" ilk="function" line="1031" lineend="1034" name="getFirstDayOfMonth" returns="Number" signature="getFirstDayOfMonth()">
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" line="1032" name="day" />
          </scope>
          <scope doc="Get the last day of the current month, adjusted for leap year.  The returned value&#xA;is the numeric day index within the week (0-6) which can be used in conjunction with&#xA;the {@link #monthNames} array to retrieve the textual day name.&#xA;Example:&#xA;&#xA;var dt = new Date(&apos;1/10/2007&apos;);&#xA;document.write(Date.dayNames[dt.getLastDayOfMonth()]); //output: &apos;Wednesday&apos;" ilk="function" line="1047" lineend="1049" name="getLastDayOfMonth" returns="Number" signature="getLastDayOfMonth()">
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Get the date of the first day of the month in which this date resides." ilk="function" line="1056" lineend="1058" name="getFirstDateOfMonth" returns="Date" signature="getFirstDateOfMonth()">
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Get the date of the last day of the month in which this date resides." ilk="function" line="1064" lineend="1066" name="getLastDateOfMonth" returns="Date" signature="getLastDateOfMonth()">
            <variable citdl="prototype" name="this" />
          </scope>
          <variable doc="Get the number of days in the current month, adjusted for leap year." line="1072" name="getDaysInMonth" />
          <scope doc="Get the English ordinal suffix of the current day (equivalent to the format specifier &apos;S&apos;)." ilk="function" line="1086" lineend="1101" name="getSuffix" returns="String" signature="getSuffix()">
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Creates and returns a new Date instance with the exact same date value as the called instance.&#xA;Dates are copied and passed by reference, so if a copied date variable is modified later, the original&#xA;variable will also be changed.  When the intention is to create a new variable that will not&#xA;modify the original instance, you should create a clone.&#xA;&#xA;Example of correctly cloning a date:&#xA;&#xA;//wrong way:&#xA;var orig = new Date(&apos;10/1/2006&apos;);&#xA;var copy = orig;&#xA;copy.setDate(5);&#xA;document.write(orig);  //returns &apos;Thu Oct 05 2006&apos;!&#xA;//correct way:&#xA;var orig = new Date(&apos;10/1/2006&apos;);&#xA;var copy = orig.clone();&#xA;copy.setDate(5);&#xA;document.write(orig);  //returns &apos;Thu Oct 01 2006&apos;" ilk="function" line="1125" lineend="1127" name="clone" returns="Date" signature="clone()">
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Checks if the current date is affected by Daylight Saving Time (DST)." ilk="function" line="1133" lineend="1137" name="isDST" returns="Boolean" signature="isDST()">
            <variable citdl="prototype" name="this" />
          </scope>
          <scope doc="Attempts to clear all time information from this Date by setting the time to midnight of the same day,&#xA;automatically adjusting for Daylight Saving Time (DST) where applicable.&#xA;(note: DST timezone information for the browser&apos;s host operating system is assumed to be up-to-date)" ilk="function" line="1146" lineend="1172" name="clearTime" returns="Date" signature="clearTime(clone)">
            <variable citdl="Boolean" doc="true to create a clone of this date, clear the time and return it (defaults to false)." ilk="argument" name="clone" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this.getDate()" line="1152" name="d" />
          </scope>
          <scope doc="Provides a convenient method for performing basic date arithmetic. This method&#xA;does not modify the Date instance being called - it creates and returns&#xA;a new Date instance containing the resulting date value.&#xA;&#xA;Examples:&#xA;&#xA;// Basic usage:&#xA;var dt = new Date(&apos;10/29/2006&apos;).add(Date.DAY, 5);&#xA;document.write(dt); //returns &apos;Fri Nov 03 2006 00:00:00&apos;&#xA;// Negative values will be subtracted:&#xA;var dt2 = new Date(&apos;10/1/2006&apos;).add(Date.DAY, -5);&#xA;document.write(dt2); //returns &apos;Tue Sep 26 2006 00:00:00&apos;&#xA;// You can even chain several calls together in one line:&#xA;var dt3 = new Date(&apos;10/1/2006&apos;).add(Date.DAY, 5).add(Date.HOUR, 8).add(Date.MINUTE, -30);&#xA;document.write(dt3); //returns &apos;Fri Oct 06 2006 07:30:00&apos;" ilk="function" line="1198" lineend="1231" name="add" returns="Date" signature="add(interval, value)">
            <variable citdl="String" doc="A valid date interval enum value." ilk="argument" name="interval" />
            <variable citdl="Number" doc="The amount to add to the current date." ilk="argument" name="value" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this.clone()" line="1199" name="d" />
            <variable attributes="__local__ private" citdl="this.getDate()" line="1219" name="day" />
          </scope>
          <scope doc="Checks if this date falls on or between the given start and end dates." ilk="function" line="1239" lineend="1242" name="between" returns="Boolean" signature="between(start, end)">
            <variable citdl="Date" doc="Start date" ilk="argument" name="start" />
            <variable citdl="Date" doc="End date" ilk="argument" name="end" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this.getTime()" line="1240" name="t" />
          </scope>
          <variable citdl="Date.prototype.setMonth" line="1258" name="_xMonth" />
          <variable citdl="Date.prototype.setDate" line="1259" name="_xDate" />
          <scope ilk="function" line="1263" lineend="1275" name="setMonth" returns="this._xMonth()" signature="setMonth(num)">
            <variable ilk="argument" name="num" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" line="1267" name="month" />
            <variable attributes="__local__ private" citdl="Math.ceil()" line="1267" name="back_year" />
            <variable attributes="__local__ private" citdl="Math.ceil()" line="1267" name="n" />
          </scope>
          <scope ilk="function" line="1280" lineend="1284" name="setDate" returns="this.setTime()" signature="setDate(d)">
            <variable ilk="argument" name="d" />
            <variable citdl="prototype" name="this" />
          </scope>
        </variable>
      </variable>
      <variable citdl="Object" line="43" name="params">
        <variable citdl="this.returnJson" line="16" name="encode" />
      </variable>
      <scope attributes="__local__ private" ilk="function" line="43" lineend="45" name="(anonymous)" signature="(anonymous)()" />
      <scope attributes="__local__ private" ilk="function" line="46" lineend="701" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="function" line="50" lineend="62" name="isIterable" signature="isIterable(v)">
          <variable ilk="argument" name="v" />
        </scope>
        <variable attributes="__local__ private" citdl="Object.prototype.toString" line="50" name="toString" />
        <variable attributes="__local__ private" citdl="Number" line="50" name="idSeed" />
        <variable attributes="__local__ private" citdl="navigator.userAgent.toLowerCase()" line="63" name="ua" />
        <scope attributes="__local__ private" ilk="function" line="64" lineend="66" name="check" returns="r.test()" signature="check(r)">
          <variable ilk="argument" name="r" />
        </scope>
        <variable attributes="__local__ private" citdl="document" line="67" name="DOC" />
        <variable attributes="__local__ private" citdl="DOC.compatMode" line="68" name="isStrict" />
        <variable attributes="__local__ private" citdl="check()" line="69" name="isOpera" />
        <variable attributes="__local__ private" citdl="check()" line="70" name="isChrome" />
        <variable attributes="__local__ private" citdl="check()" line="71" name="isWebKit" />
        <variable attributes="__local__ private" line="72" name="isSafari" />
        <variable attributes="__local__ private" citdl="isSafari" line="73" name="isSafari2" />
        <variable attributes="__local__ private" citdl="isSafari" line="74" name="isSafari3" />
        <variable attributes="__local__ private" citdl="isSafari" line="75" name="isSafari4" />
        <variable attributes="__local__ private" line="76" name="isIE" />
        <variable attributes="__local__ private" citdl="isIE" line="77" name="isIE7" />
        <variable attributes="__local__ private" citdl="isIE" line="78" name="isIE8" />
        <variable attributes="__local__ private" citdl="isIE" line="79" name="isIE6" />
        <variable attributes="__local__ private" line="80" name="isGecko" />
        <variable attributes="__local__ private" citdl="isGecko" line="81" name="isGecko2" />
        <variable attributes="__local__ private" citdl="isGecko" line="82" name="isGecko3" />
        <variable attributes="__local__ private" citdl="isIE" line="83" name="isBorderBox" />
        <variable attributes="__local__ private" citdl="check()" line="84" name="isWindows" />
        <variable attributes="__local__ private" citdl="check()" line="85" name="isMac" />
        <variable attributes="__local__ private" citdl="check()" line="86" name="isAir" />
        <variable attributes="__local__ private" citdl="check()" line="87" name="isLinux" />
        <variable attributes="__local__ private" line="88" name="isSecure" />
      </scope>
      <scope classrefs="Object" ilk="class" line="47" lineend="164" name="Template">
        <scope doc="Returns an HTML fragment of this template with the specified values applied." ilk="function" line="53" lineend="61" name="applyTemplate" returns="String" signature="applyTemplate(values)">
          <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          <variable citdl="Template" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="54" name="me" />
        </scope>
        <scope doc="Sets the HTML used as the template and optionally compiles it." ilk="function" line="69" lineend="74" name="set" returns="Ext.Template" signature="set(html, compile)">
          <variable citdl="String" ilk="argument" name="html" />
          <variable citdl="Boolean" doc="(optional) True to compile the template (defaults to undefined)" ilk="argument" name="compile" />
          <variable citdl="Template" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="70" name="me" />
        </scope>
        <variable citdl="RegExp" doc="The regular expression used to match template variables" line="81" name="re" />
        <scope doc="Compiles the template into an internal function, eliminating the RegEx overhead." ilk="function" line="87" lineend="100" name="compile" returns="Ext.Template" signature="compile()">
          <variable citdl="Template" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="89" name="me" />
          <variable attributes="__local__ private" citdl="Ext.isGecko" line="89" name="sep" />
          <scope attributes="__local__ private" ilk="function" line="91" lineend="94" name="fn" returns="String" signature="fn(m, name)">
            <variable ilk="argument" name="m" />
            <variable citdl="String" ilk="argument" name="name" />
          </scope>
        </scope>
        <scope doc="Applies the supplied values to the template and inserts the new node(s) as the first child of el." ilk="function" line="109" lineend="111" name="insertFirst" returns="HTMLElement/Ext.Element" signature="insertFirst(el, values, returnElement)">
          <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
          <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
          <variable citdl="Template" name="this" />
        </scope>
        <scope doc="Applies the supplied values to the template and inserts the new node(s) before el." ilk="function" line="120" lineend="122" name="insertBefore" returns="HTMLElement/Ext.Element" signature="insertBefore(el, values, returnElement)">
          <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
          <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
          <variable citdl="Template" name="this" />
        </scope>
        <scope doc="Applies the supplied values to the template and inserts the new node(s) after el." ilk="function" line="131" lineend="133" name="insertAfter" returns="HTMLElement/Ext.Element" signature="insertAfter(el, values, returnElement)">
          <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
          <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
          <variable citdl="Template" name="this" />
        </scope>
        <scope doc="Applies the supplied values to the template and appends the new node(s) to el." ilk="function" line="142" lineend="144" name="append" returns="HTMLElement/Ext.Element" signature="append(el, values, returnElement)">
          <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
          <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
          <variable citdl="Template" name="this" />
        </scope>
        <scope ilk="function" line="146" lineend="150" name="doInsert" returns="returnEl" signature="doInsert(where, el, values, returnEl)">
          <variable ilk="argument" name="where" />
          <variable citdl="Ext.getDom()" ilk="argument" name="el" />
          <variable ilk="argument" name="values" />
          <variable ilk="argument" name="returnEl" />
          <variable citdl="Template" name="this" />
          <variable attributes="__local__ private" citdl="Ext.DomHelper.insertHtml()" line="148" name="newNode" />
        </scope>
        <scope doc="Applies the supplied values to the template and overwrites the content of el with the new node(s)." ilk="function" line="159" lineend="163" name="overwrite" returns="HTMLElement/Ext.Element" signature="overwrite(el, values, returnElement)">
          <variable citdl="Mixed" doc="The context element" ilk="argument" name="el" />
          <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          <variable citdl="Boolean" doc="(optional) true to return a Ext.Element (defaults to undefined)" ilk="argument" name="returnElement" />
          <variable citdl="Template" name="this" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="47" lineend="458" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="String" line="50" name="FAILURE" />
        <variable attributes="__local__ private" citdl="String" line="50" name="BEFOREUPDATE" />
        <variable attributes="__local__ private" citdl="String" line="50" name="UPDATE" />
        <scope attributes="__local__ private" ilk="function" line="53" lineend="68" name="processSuccess" signature="processSuccess(response)">
          <variable ilk="argument" name="response" />
          <variable attributes="__local__ private" citdl="this" line="54" name="me" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="71" lineend="76" name="updateComplete" signature="updateComplete(response, type, success)">
          <variable ilk="argument" name="response" />
          <variable ilk="argument" name="type" />
          <variable ilk="argument" name="success" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="79" lineend="81" name="processFailure" signature="processFailure(response)">
          <variable ilk="argument" name="response" />
        </scope>
      </scope>
      <variable citdl="Object" line="50" name="textNode">
        <variable citdl="String" line="50" name="innerHTML" />
      </variable>
      <variable citdl="Object" line="58" name="checkbox">
        <variable citdl="state" line="58" name="disabled" />
        <variable citdl="checked" line="246" name="defaultChecked" />
      </variable>
      <variable citdl="Object" line="60" name="ddel">
        <variable citdl="this.grid.getDragDropText()" line="60" name="innerHTML" />
      </variable>
      <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: As the amount of records increases, the time required for the browser to render&#xA;them increases. Paging is used to reduce the amount of data exchanged with the client.&#xA;Note: if there are more records/rows than can be viewed in the available screen area, vertical&#xA;scrollbars will be added.&#xA;Paging is typically handled on the server side (see exception below). The client sends&#xA;parameters to the server side, which the server needs to interpret and then respond with the&#xA;approprate data.&#xA;Ext.PagingToolbar is a specialized toolbar that is bound to a {@link Ext.data.Store}&#xA;and provides automatic paging control. This Component {@link Ext.data.Store#load load}s blocks&#xA;of data into the {@link #store} by passing {@link Ext.data.Store#paramNames paramNames} used for&#xA;paging criteria.&#xA;PagingToolbar is typically used as one of the Grid&apos;s toolbars:&#xA;&#xA;Ext.QuickTips.init(); // to display button quicktips&#xA;var myStore = new Ext.data.Store({&#xA;...&#xA;});&#xA;var myPageSize = 25;  // server script should only send back 25 items&#xA;var grid = new Ext.grid.GridPanel({&#xA;...&#xA;store: myStore,&#xA;bbar: new Ext.PagingToolbar({&#xA;{@link #store}: myStore,       // grid and PagingToolbar using same store&#xA;{@link #displayInfo}: true,&#xA;{@link #pageSize}: myPageSize,&#xA;{@link #prependButtons}: true,&#xA;items: [&#xA;&apos;text 1&apos;&#xA;});&#xA;&#xA;&#xA;To use paging, pass the paging requirements to the server when the store is first loaded.&#xA;&#xA;store.load({&#xA;params: {&#xA;start: 0,          // specify params for the first page load if using paging&#xA;limit: myPageSize,&#xA;foo:   &apos;bar&apos;&#xA;});&#xA;&#xA;Paging with Local Data&#xA;Paging can also be accomplished with local data using extensions:&#xA;&#xA;Ext.ux.data.PagingStore&#xA;Paging Memory Proxy (examples/ux/PagingMemoryProxy.js)" ilk="function" line="67" lineend="501" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Ext.Toolbar" line="69" name="T" />
      </scope>
      <variable citdl="Object" line="72" name="top">
        <variable citdl="Object" line="72" name="location">
          <variable citdl="token" line="72" name="hash" />
        </variable>
      </variable>
      <variable citdl="Object" line="72" lineend="23" name="Ext">
        <variable citdl="Object" line="7" lineend="7" name="debug">
          <variable citdl="Ext.extend()" line="228" name="ScriptsPanel" />
          <variable citdl="Ext.extend()" line="249" name="LogPanel" />
          <variable citdl="Ext.extend()" line="395" name="DomTree" />
          <variable citdl="Ext.extend()" line="417" name="ComponentNodeUI" />
          <variable citdl="Ext.extend()" line="504" name="ComponentInspector" />
          <variable citdl="Ext.extend()" line="572" name="ComponentInfoPanel" />
          <variable citdl="Ext.extend()" line="623" name="ColumnNodeUI" />
          <variable citdl="Ext.extend()" line="733" name="ObjectInspector" />
          <variable citdl="Ext.extend()" line="786" name="StoreInspector" />
          <variable line="789" name="HtmlNode" />
          <variable citdl="String" line="795" name="n" />
          <variable citdl="String" line="795" name="v" />
        </variable>
        <variable citdl="Object" line="11" lineend="20" name="FlashEventProxy">
          <scope ilk="function" line="12" lineend="19" name="onEvent" signature="onEvent(id, e)">
            <variable ilk="argument" name="id" />
            <variable ilk="argument" name="e" />
            <variable citdl="FlashEventProxy" name="this" />
            <variable attributes="__local__ private" citdl="Ext.getCmp()" line="13" name="fp" />
          </scope>
        </variable>
        <scope doc="Framework-wide error-handler.  Developers can override this method to provide&#xA;custom exception-handling.  Framework errors will often extend from the base&#xA;Ext.Error class." ilk="function" line="13" lineend="15" name="handleError" signature="handleError(e)">
          <variable citdl="Object/Error" doc="The thrown exception object." ilk="argument" name="e" />
          <variable citdl="o" name="this" />
        </scope>
        <scope ilk="class" line="13" lineend="33" name="WindowGroup">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: An object that represents a group of {@link Ext.Window} instances and provides z-order management&#xA;and window activation behavior." ilk="function" line="13" lineend="177" name="WindowGroup" signature="WindowGroup()">
            <variable citdl="WindowGroup" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="14" lineend="14" name="list" />
            <variable attributes="__local__ private" citdl="Array" line="15" name="accessList" />
            <variable attributes="__local__ private" citdl="win" line="16" name="front" />
            <scope attributes="__local__ private" ilk="function" line="19" lineend="21" name="sortWindows" signature="sortWindows(d1, d2)">
              <variable ilk="argument" name="d1" />
              <variable ilk="argument" name="d2" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="24" lineend="37" name="orderWindows" signature="orderWindows()">
              <variable attributes="__local__ private" citdl="accessList" line="25" name="a" />
              <variable attributes="__local__ private" citdl="a.length" line="25" name="len" />
              <variable attributes="__local__ private" citdl="a[0].manager.zseed" line="28" name="seed" />
              <variable attributes="__local__ private" citdl="a[i]" line="30" name="win" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="40" lineend="50" name="setActiveWin" signature="setActiveWin(win)">
              <variable ilk="argument" name="win" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="53" lineend="62" name="activateLast" signature="activateLast()" />
          </scope>
        </scope>
        <scope ilk="class" line="14" lineend="30" name="EventManager">
          <scope attributes="__ctor__" doc="Registers event handlers that want to receive a normalized EventObject instead of the standard browser event and provides&#xA;several useful events directly.&#xA;See {@link Ext.EventObject} for more details on normalized event objects." ilk="function" line="14" lineend="334" name="EventManager" returns="pub" signature="EventManager()">
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="Ext.util.Event" line="24" name="docReadyEvent" />
            <variable attributes="__local__ private" citdl="String" line="24" name="IEDEFERED" />
            <variable attributes="__local__ private" citdl="Ext.lib.Event" line="24" name="E" />
            <variable attributes="__local__ private" citdl="Ext.lib.Dom" line="24" name="D" />
            <variable attributes="__local__ private" citdl="Boolean" line="24" name="docReadyState" />
            <variable attributes="__local__ private" citdl="document" line="24" name="DOC" />
            <variable attributes="__local__ private" citdl="Object" line="24" lineend="24" name="elHash" />
            <variable attributes="__local__ private" citdl="window" line="24" name="WINDOW" />
            <variable attributes="__local__ private" citdl="String" line="24" name="DOMCONTENTLOADED" />
            <variable attributes="__local__ private" citdl="setInterval()" line="24" name="docReadyProcId" />
            <variable attributes="__local__ private" line="25" name="propRe" />
            <scope attributes="__local__ private" ilk="function" line="28" lineend="47" name="addListener" signature="addListener(el, ename, fn, wrap, scope)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="ename" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="wrap" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="Ext.id()" line="30" name="id" />
              <variable attributes="__local__ private" citdl="elHash[id]" line="30" name="es" />
              <variable attributes="__local__ private" citdl="Array" line="38" name="args" />
              <scope attributes="__local__ private" ilk="function" line="40" lineend="42" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="49" lineend="70" name="fireDocReady" signature="fireDocReady()">
              <variable attributes="__local__ private" citdl="DOC.getElementById()" line="59" name="defer" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="72" lineend="94" name="initDocReady" signature="initDocReady()">
              <variable attributes="__local__ private" citdl="String" line="73" name="COMPLETE" />
              <scope attributes="__local__ private" ilk="function" line="86" lineend="90" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="96" lineend="103" name="createTargeted" signature="createTargeted(h, o)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="Ext.toArray()" line="98" name="args" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="105" lineend="111" name="createBuffered" signature="createBuffered(h, o)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="Ext.util.DelayedTask" line="106" name="task" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="113" lineend="118" name="createSingle" signature="createSingle(h, el, ename, fn, scope)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="ename" />
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="120" lineend="128" name="createDelayed" signature="createDelayed(h, o)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="o" />
              <scope attributes="__local__ private" ilk="function" line="124" lineend="126" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="130" lineend="184" name="listen" returns="h" signature="listen(element, ename, opt, fn, scope)">
              <variable ilk="argument" name="element" />
              <variable ilk="argument" name="ename" />
              <variable ilk="argument" name="opt" />
              <variable citdl="fn" ilk="argument" name="fn" />
              <variable citdl="scope" ilk="argument" name="scope" />
              <variable attributes="__local__ private" line="131" name="o" />
              <variable attributes="__local__ private" citdl="Ext.getDom()" line="132" name="el" />
              <scope attributes="__local__ private" ilk="function" line="140" lineend="168" name="h" signature="h(e)">
                <variable citdl="e.browserEvent" ilk="argument" name="e" />
                <variable attributes="__local__ private" citdl="e.target" line="146" name="t" />
              </scope>
              <variable citdl="createTargeted()" line="170" name="h" />
            </scope>
            <variable attributes="__local__ private" citdl="Object" line="186" lineend="308" name="pub">
              <scope doc="Appends an event handler to an element.  The shorthand version {@link #on} is equivalent.  Typically you will&#xA;use {@link Ext.Element#addListener} directly on an Element in favor of calling this version." ilk="function" line="217" lineend="235" name="addListener" signature="addListener(element, eventName, fn, scope, options)">
                <variable ilk="argument" name="element" />
                <variable citdl="String" doc="The type of event to listen for" ilk="argument" name="eventName" />
                <variable ilk="argument" name="fn" />
                <variable citdl="Object" doc="(optional) The scope (this reference) in which the handler function is executed. Defaults to the Element." ilk="argument" name="scope" />
                <variable citdl="Object" doc="(optional) An object containing handler configuration properties.&#xA;This may contain any of the following properties:&#xA;scope : ObjectThe scope (this reference) in which the handler function is executed. Defaults to the Element.&#xA;delegate : StringA simple selector to filter the target or look for a descendant of the target&#xA;stopEvent : BooleanTrue to stop the event. That is stop propagation, and prevent the default action.&#xA;preventDefault : BooleanTrue to prevent the default action&#xA;stopPropagation : BooleanTrue to prevent event propagation&#xA;normalized : BooleanFalse to pass a browser event to the handler function instead of an Ext.EventObject&#xA;delay : NumberThe number of milliseconds to delay the invocation of the handler after te event fires.&#xA;single : BooleanTrue to add a handler to handle just the next firing of the event, and then remove itself.&#xA;buffer : NumberCauses the handler to be scheduled to run in an {@link Ext.util.DelayedTask} delayed&#xA;by the specified number of milliseconds. If the event fires again within that time, the original&#xA;handler is not invoked, but the new handler is scheduled in its place.&#xA;target : ElementOnly call the handler if the event was fired on the target Element, not if the event was bubbled up from a child node.&#xA;See {@link Ext.Element#addListener} for examples of how to use these options." ilk="argument" name="options" />
                <variable citdl="pub" name="this" />
                <variable attributes="__local__ private" line="219" name="e" />
                <variable attributes="__local__ private" citdl="o[e]" line="219" name="val" />
                <variable attributes="__local__ private" citdl="eventName" line="219" name="o" />
              </scope>
              <scope doc="Removes an event handler from an element.  The shorthand version {@link #un} is equivalent.  Typically&#xA;you will use {@link Ext.Element#removeListener} directly on an Element in favor of calling this version." ilk="function" line="244" lineend="265" name="removeListener" signature="removeListener(element, eventName, fn, scope)">
                <variable ilk="argument" name="element" />
                <variable citdl="String" doc="The type of event" ilk="argument" name="eventName" />
                <variable citdl="Function" doc="The handler function to remove" ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable citdl="pub" name="this" />
                <variable attributes="__local__ private" line="247" name="wrap" />
                <variable attributes="__local__ private" citdl="Ext.getDom()" line="247" name="el" />
                <variable attributes="__local__ private" citdl="Ext.id()" line="247" name="id" />
              </scope>
              <scope doc="Removes all event handers from an element.  Typically you will use {@link Ext.Element#removeAllListeners}&#xA;directly on an Element in favor of calling this version." ilk="function" line="272" lineend="285" name="removeAll" signature="removeAll(el)">
                <variable citdl="String/HTMLElement" doc="The id or html element from which to remove the event" ilk="argument" name="el" />
                <variable citdl="pub" name="this" />
                <variable attributes="__local__ private" line="275" name="ename" />
                <variable attributes="__local__ private" citdl="Ext.id()" line="275" name="id" />
                <variable attributes="__local__ private" citdl="elHash[id]" line="275" name="es" />
                <scope attributes="__local__ private" ilk="function" line="279" lineend="281" name="(anonymous)" signature="(anonymous)()" />
              </scope>
              <scope doc="Fires when the document is ready (before onload and before images are loaded). Can be&#xA;accessed shorthanded as Ext.onReady()." ilk="function" line="294" lineend="305" name="onDocumentReady" signature="onDocumentReady(fn, scope, options)">
                <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
                <variable citdl="Object" doc="(optional) An object that becomes the scope of the handler" ilk="argument" name="scope" />
                <variable citdl="Boolean" doc="(optional) An object containing standard {@link #addListener} options" ilk="argument" name="options" />
                <variable citdl="pub" name="this" />
              </scope>
              <variable citdl="elHash" line="307" name="elHash" />
              <variable citdl="pub.addListener" doc="Appends an event handler to an element.  Shorthand for {@link #addListener}." line="320" name="on" />
              <variable citdl="pub.removeListener" doc="Removes an event handler from an element.  Shorthand for {@link #removeListener}." line="330" name="un" />
              <variable citdl="Ext.util.Event" line="332" name="stoppedMouseDownEvent" />
            </variable>
          </scope>
        </scope>
        <variable citdl="Object" line="14" name="dd">
          <scope classrefs="Ext.util.Observable" ilk="class" line="11" lineend="57" name="DragTracker">
            <scope attributes="__ctor__" ilk="function" line="11" lineend="57" name="DragTracker" signature="DragTracker(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DragTracker" name="this" />
            </scope>
            <variable citdl="Ext.lib.Region" line="52" name="dragRegion" />
            <variable citdl="Boolean" doc="Defaults to false." line="64" name="active" />
            <variable citdl="Number" doc="Defaults to 5." line="69" name="tolerance" />
            <variable citdl="Boolean" doc="Defaults to false. Specify true to defer trigger start by 1000 ms.&#xA;Specify a Number for the number of milliseconds to defer trigger start." line="75" name="autoStart" />
            <scope ilk="function" line="77" lineend="81" name="initEl" signature="initEl(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <variable citdl="Ext.get()" line="78" name="el" />
            <scope ilk="function" line="83" lineend="85" name="destroy" signature="destroy()" />
            <scope ilk="function" line="87" lineend="102" name="onMouseDown" signature="onMouseDown(e, target)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="target" />
              <variable attributes="__local__ private" citdl="Ext.getDoc()" line="94" name="doc" />
            </scope>
            <variable citdl="this.lastXY" line="89" name="startXY" />
            <variable citdl="e.getXY()" line="89" name="lastXY" />
            <variable citdl="this.delegate" line="90" name="dragTarget" />
            <variable citdl="this.triggerStart.defer()" line="99" name="timer" />
            <scope ilk="function" line="104" lineend="125" name="onMouseMove" signature="onMouseMove(e, target)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="target" />
              <variable attributes="__local__ private" citdl="this.startXY" line="113" name="s" />
              <variable attributes="__local__ private" citdl="e.getXY()" line="113" name="xy" />
            </scope>
            <scope ilk="function" line="127" lineend="142" name="onMouseUp" signature="onMouseUp(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.getDoc()" line="128" name="doc" />
              <variable attributes="__local__ private" citdl="this.active" line="134" name="wasActive" />
            </scope>
            <scope ilk="function" line="144" lineend="149" name="triggerStart" signature="triggerStart(isTimer)">
              <variable ilk="argument" name="isTimer" />
            </scope>
            <scope ilk="function" line="151" lineend="156" name="clearStart" signature="clearStart()" />
            <scope ilk="function" line="158" lineend="161" name="stopSelect" returns="Boolean" signature="stopSelect(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="163" lineend="165" name="onBeforeStart" signature="onBeforeStart(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="167" lineend="169" name="onStart" signature="onStart(xy)">
              <variable ilk="argument" name="xy" />
            </scope>
            <scope ilk="function" line="171" lineend="173" name="onDrag" signature="onDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="175" lineend="177" name="onEnd" signature="onEnd(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="179" lineend="181" name="getDragTarget" returns="this.dragTarget" signature="getDragTarget()" />
            <scope ilk="function" line="183" lineend="185" name="getDragCt" returns="this.el" signature="getDragCt()" />
            <scope ilk="function" line="187" lineend="190" name="getXY" returns="constrain" signature="getXY(constrain)">
              <variable ilk="argument" name="constrain" />
            </scope>
            <scope ilk="function" line="192" lineend="196" name="getOffset" returns="Array" signature="getOffset(constrain)">
              <variable ilk="argument" name="constrain" />
              <variable attributes="__local__ private" citdl="this.getXY()" line="193" name="xy" />
              <variable attributes="__local__ private" citdl="this.startXY" line="194" name="s" />
            </scope>
            <variable citdl="Object" line="198" lineend="216" name="constrainModes">
              <scope ilk="function" line="199" lineend="215" name="point" returns="Array" signature="point(xy)">
                <variable ilk="argument" name="xy" />
                <variable citdl="constrainModes" name="this" />
                <variable attributes="__local__ private" citdl="this.dragRegion" line="205" name="dr" />
              </scope>
              <variable citdl="this.getDragCt().getRegion()" line="202" name="elRegion" />
            </variable>
          </scope>
          <scope ilk="class" line="13" lineend="21" name="Registry">
            <variable citdl="Object" line="13" lineend="126" name="Registry">
              <scope doc="Resgister a drag drop element&#xA;&#xA;Value      Description&#xA;---------  ------------------------------------------&#xA;handles    Array of DOM nodes that trigger dragging&#xA;for the element being registered&#xA;isHandle   True if the element passed in triggers&#xA;dragging itself, else false" ilk="function" line="47" lineend="63" name="register" signature="register(el, data)">
                <variable citdl="document.getElementById()" ilk="argument" name="el" />
                <variable citdl="Object" doc="(optional) An custom data object that will be passed between the elements that are involved&#xA;in drag drop operations.  You can populate this object with any arbitrary properties that your own code&#xA;knows how to interpret, plus there are some specific properties known to the Registry that should be&#xA;populated in the data object (if applicable):" ilk="argument" name="data" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="data.handles" line="58" name="hs" />
              </scope>
              <scope doc="Unregister a drag drop element" ilk="function" line="69" lineend="81" name="unregister" signature="unregister(el)">
                <variable ilk="argument" name="el" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="getId()" line="70" name="id" />
                <variable attributes="__local__ private" citdl="elements[id]" line="71" name="data" />
                <variable attributes="__local__ private" citdl="data.handles" line="75" name="hs" />
              </scope>
              <scope doc="Returns the handle registered for a DOM Node by id" ilk="function" line="88" lineend="93" name="getHandle" returns="Object" signature="getHandle(id)">
                <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
                <variable citdl="Registry" name="this" />
              </scope>
              <scope doc="Returns the handle that is registered for the DOM node that is the target of the event" ilk="function" line="100" lineend="103" name="getHandleFromEvent" returns="Object" signature="getHandleFromEvent(e)">
                <variable citdl="Event" doc="The event" ilk="argument" name="e" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="101" name="t" />
              </scope>
              <scope doc="Returns a custom data object that is registered for a DOM node by id" ilk="function" line="110" lineend="115" name="getTarget" returns="Object" signature="getTarget(id)">
                <variable citdl="String/HTMLElement" doc="The DOM node or id to look up" ilk="argument" name="id" />
                <variable citdl="Registry" name="this" />
              </scope>
              <scope doc="Returns a custom data object that is registered for the DOM node that is the target of the event" ilk="function" line="122" lineend="125" name="getTargetFromEvent" returns="Object" signature="getTargetFromEvent(e)">
                <variable citdl="Event" doc="The event" ilk="argument" name="e" />
                <variable citdl="Registry" name="this" />
                <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="123" name="t" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Object" ilk="class" line="14" lineend="171" name="StatusProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A specialized drag proxy that supports a drop status icon, {@link Ext.Layer} styles and auto-repair.  This is the&#xA;default drag proxy used by all Ext.dd components." ilk="function" line="14" lineend="28" name="StatusProxy" signature="StatusProxy(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="this.id" line="16" name="id" />
            <variable citdl="Ext.Layer" line="25" name="el" />
            <variable citdl="Ext.get()" line="26" name="ghost" />
            <variable citdl="this.dropNotAllowed" line="27" name="dropStatus" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is allowed (defaults to &quot;x-dd-drop-ok&quot;)." line="35" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class to apply to the status element when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="40" name="dropNotAllowed" />
            <scope doc="Updates the proxy&apos;s visual element to indicate the status of whether or not drop is allowed&#xA;over the current target element." ilk="function" line="47" lineend="53" name="setStatus" signature="setStatus(cssClass)">
              <variable citdl="String" doc="The css class for the new drop status indicator image" ilk="argument" name="cssClass" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Resets the status indicator to the default dropNotAllowed value" ilk="function" line="59" lineend="65" name="reset" signature="reset(clearGhost)">
              <variable citdl="Boolean" doc="True to also remove all content from the ghost, false to preserve it" ilk="argument" name="clearGhost" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Updates the contents of the ghost element" ilk="function" line="72" lineend="84" name="update" signature="update(html)">
              <variable citdl="String/HTMLElement" doc="The html that will replace the current innerHTML of the ghost element, or a&#xA;DOM node to append as the child of the ghost element (in which case the innerHTML will be cleared first)." ilk="argument" name="html" />
              <variable citdl="StatusProxy" name="this" />
              <variable attributes="__local__ private" citdl="this.ghost.dom.firstChild" line="80" name="el" />
            </scope>
            <scope doc="Returns the underlying proxy {@link Ext.Layer}" ilk="function" line="90" lineend="92" name="getEl" returns="Ext.Layer" signature="getEl()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Returns the ghost element" ilk="function" line="98" lineend="100" name="getGhost" returns="Ext.Element" signature="getGhost()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Hides the proxy" ilk="function" line="106" lineend="111" name="hide" signature="hide(clear)">
              <variable citdl="Boolean" doc="True to reset the status and clear the ghost contents, false to preserve them" ilk="argument" name="clear" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Stops the repair animation if it&apos;s currently running" ilk="function" line="116" lineend="120" name="stop" signature="stop()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Displays this proxy" ilk="function" line="125" lineend="127" name="show" signature="show()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Force the Layer to sync its shadow and shim positions to the element" ilk="function" line="132" lineend="134" name="sync" signature="sync()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <scope doc="Causes the proxy to return to its position of origin via an animation.  Should be called after an&#xA;invalid drop operation by the item being dragged." ilk="function" line="143" lineend="160" name="repair" signature="repair(xy, callback, scope)">
              <variable citdl="Array" doc="The XY position of the element ([x, y])" ilk="argument" name="xy" />
              <variable citdl="Function" doc="The function to call after the repair is complete" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to execute the callback" ilk="argument" name="scope" />
              <variable citdl="StatusProxy" name="this" />
            </scope>
            <variable citdl="callback" line="144" name="callback" />
            <variable citdl="scope" line="145" name="scope" />
            <variable citdl="this.el.shift()" line="156" name="anim" />
            <scope ilk="function" line="163" lineend="170" name="afterRepair" signature="afterRepair()">
              <variable citdl="StatusProxy" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="15" lineend="109" name="PanelProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom drag proxy implementation specific to {@link Ext.Panel}s. This class is primarily used internally&#xA;for the Panel&apos;s drag drop implementation, and should never need to be created directly." ilk="function" line="15" lineend="19" name="PanelProxy" signature="PanelProxy(panel, config)">
              <variable doc="The {@link Ext.Panel} to proxy for" ilk="argument" name="panel" />
              <variable doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <variable citdl="panel" line="16" name="panel" />
            <variable citdl="this.panel.id" line="17" name="id" />
            <variable citdl="Boolean" doc="false to drag with no proxy (defaults to true)." line="26" name="insertProxy" />
            <variable citdl="Ext.emptyFn" line="29" name="setStatus" />
            <variable citdl="Ext.emptyFn" line="30" name="reset" />
            <variable citdl="Ext.emptyFn" line="31" name="update" />
            <variable citdl="Ext.emptyFn" line="32" name="stop" />
            <variable citdl="Ext.emptyFn" line="33" name="sync" />
            <scope doc="Gets the proxy&apos;s element" ilk="function" line="39" lineend="41" name="getEl" returns="Element" signature="getEl()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Gets the proxy&apos;s ghost element" ilk="function" line="47" lineend="49" name="getGhost" returns="Element" signature="getGhost()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Gets the proxy&apos;s element" ilk="function" line="55" lineend="57" name="getProxy" returns="Element" signature="getProxy()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Hides the proxy" ilk="function" line="62" lineend="72" name="hide" signature="hide()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Shows the proxy" ilk="function" line="77" lineend="87" name="show" signature="show()">
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <variable citdl="this.panel.createGhost()" line="79" name="ghost" />
            <variable citdl="this.panel.el.insertSibling()" line="82" name="proxy" />
            <scope ilk="function" line="90" lineend="95" name="repair" signature="repair(xy, callback, scope)">
              <variable ilk="argument" name="xy" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
            <scope doc="Moves the proxy to a different position in the DOM.  This is typically called while dragging the Panel&#xA;to keep the proxy sync&apos;d to the Panel&apos;s location." ilk="function" line="104" lineend="108" name="moveProxy" signature="moveProxy(parentNode, before)">
              <variable citdl="HTMLElement" doc="The proxy&apos;s parent DOM node" ilk="argument" name="parentNode" />
              <variable citdl="HTMLElement" doc="(optional) The sibling node before which the proxy should be inserted (defaults&#xA;to the parent&apos;s last child if not specified)" ilk="argument" name="before" />
              <variable citdl="PanelProxy" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DDProxy" ilk="class" line="15" lineend="30" name="DragSource">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element draggable." ilk="function" line="15" lineend="30" name="DragSource" signature="DragSource(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragSource" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="16" name="el" />
            <variable citdl="Object" line="18" lineend="18" name="dragData" />
            <variable citdl="Ext.dd.StatusProxy" line="24" name="proxy" />
            <variable citdl="Boolean" line="29" name="dragging" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to undefined)." line="42" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class returned to the drag source when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="47" name="dropNotAllowed" />
            <scope doc="Returns the data object associated with this drag source" ilk="function" line="53" lineend="55" name="getDragData" returns="Object" signature="getDragData(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="58" lineend="81" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="Ext.dd.DragDropMgr.getDDById()" line="59" name="target" />
              <variable attributes="__local__ private" citdl="target.notifyEnter()" line="63" name="status" />
            </scope>
            <variable citdl="target" line="60" name="cachedTarget" />
            <scope doc="An empty function by default, but provided so that you can perform a custom action&#xA;before the dragged item enters the drop target and optionally cancel the onDragEnter." ilk="function" line="91" lineend="93" name="beforeDragEnter" returns="Boolean" signature="beforeDragEnter(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="96" lineend="99" name="alignElWithMouse" signature="alignElWithMouse()" />
            <scope ilk="function" line="102" lineend="122" name="onDragOver" signature="onDragOver(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.cachedTarget" line="103" name="target" />
              <variable attributes="__local__ private" citdl="target.notifyOver()" line="106" name="status" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action&#xA;while the dragged item is over the drop target and optionally cancel the onDragOver." ilk="function" line="132" lineend="134" name="beforeDragOver" returns="Boolean" signature="beforeDragOver(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="137" lineend="157" name="onDragOut" signature="onDragOut(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.cachedTarget" line="138" name="target" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action before the dragged&#xA;item is dragged out of the target without dropping, and optionally cancel the onDragOut." ilk="function" line="167" lineend="169" name="beforeDragOut" returns="Boolean" signature="beforeDragOut(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="172" lineend="198" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.cachedTarget" line="173" name="target" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action before the dragged&#xA;item is dropped onto the target and optionally cancel the onDragDrop." ilk="function" line="208" lineend="210" name="beforeDragDrop" returns="Boolean" signature="beforeDragDrop(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="213" lineend="226" name="onValidDrop" signature="onValidDrop(target, e, id)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="229" lineend="231" name="getRepairXY" returns="this.el.getXY()" signature="getRepairXY(e, data)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="234" lineend="254" name="onInvalidDrop" signature="onInvalidDrop(target, e, id)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <variable line="240" name="cacheTarget" />
            <scope ilk="function" line="257" lineend="262" name="afterRepair" signature="afterRepair()" />
            <scope doc="An empty function by default, but provided so that you can perform a custom action after an invalid&#xA;drop has occurred." ilk="function" line="272" lineend="274" name="beforeInvalidDrop" returns="Boolean" signature="beforeInvalidDrop(target, e, id)">
              <variable citdl="Ext.dd.DragDrop" doc="The drop target" ilk="argument" name="target" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
              <variable citdl="String" doc="The id of the dragged element" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="277" lineend="287" name="handleMouseDown" signature="handleMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.getDragData()" line="281" name="data" />
            </scope>
            <scope doc="An empty function by default, but provided so that you can perform a custom action before the initial&#xA;drag event begins and optionally cancel it." ilk="function" line="296" lineend="298" name="onBeforeDrag" returns="Boolean" signature="onBeforeDrag(data, e)">
              <variable citdl="Object" doc="An object containing arbitrary data to be shared with drop targets" ilk="argument" name="data" />
              <variable citdl="Event" doc="The event object" ilk="argument" name="e" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="An empty function by default, but provided so that you can perform a custom action once the initial&#xA;drag event has begun.  The drag cannot be canceled from this function." line="306" name="onStartDrag" />
            <scope ilk="function" line="309" lineend="315" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" line="318" lineend="324" name="onInitDrag" returns="Boolean" signature="onInitDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable attributes="__local__ private" citdl="this.el.dom.cloneNode()" line="319" name="clone" />
            </scope>
            <scope doc="Returns the drag source&apos;s underlying {@link Ext.dd.StatusProxy}" ilk="function" line="330" lineend="332" name="getProxy" returns="Ext.dd.StatusProxy" signature="getProxy()" />
            <scope doc="Hides the drag source&apos;s {@link Ext.dd.StatusProxy}" ilk="function" line="337" lineend="341" name="hideProxy" signature="hideProxy()" />
            <scope ilk="function" line="344" lineend="346" name="triggerCacheRefresh" signature="triggerCacheRefresh()" />
            <scope ilk="function" line="349" lineend="350" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="353" lineend="355" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="358" lineend="359" name="onEndDrag" signature="onEndDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="362" lineend="364" name="autoOffset" signature="autoOffset(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DDTarget" ilk="class" line="16" lineend="28" name="DropTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple class that provides the basic implementation needed to make any element a drop target that can have&#xA;draggable items dropped onto it.  The drop has no effect until an implementation of notifyDrop is provided." ilk="function" line="16" lineend="28" name="DropTarget" signature="DropTarget(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropTarget" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="17" name="el" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to undefined)." line="44" name="dropAllowed" />
            <variable citdl="String" doc="The CSS class returned to the drag source when drop is not allowed (defaults to &quot;x-dd-drop-nodrop&quot;)." line="49" name="dropNotAllowed" />
            <variable citdl="Boolean" line="52" name="isTarget" />
            <variable citdl="Boolean" line="55" name="isNotifyTarget" />
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source is now over the&#xA;target.  This default implementation adds the CSS class specified by overClass (if any) to the drop element&#xA;and returns the dropAllowed config value.  This method should be overridden if drop validation is required." ilk="function" line="67" lineend="72" name="notifyEnter" returns="String" signature="notifyEnter(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the target.&#xA;This method will be called on every mouse movement while the drag source is over the drop target.&#xA;This default implementation simply returns the dropAllowed config value." ilk="function" line="84" lineend="86" name="notifyOver" returns="String" signature="notifyOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the source has been dragged&#xA;out of the target without dropping.  This default implementation simply removes the CSS class specified by&#xA;overClass (if any) from the drop element." ilk="function" line="96" lineend="100" name="notifyOut" signature="notifyOut(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop target that the dragged item has&#xA;been dropped on it.  This method has no default implementation and returns false, so you must provide an&#xA;implementation that does something to process the drop event and returns true so that the drag source&apos;s&#xA;repair action does not run." ilk="function" line="112" lineend="114" name="notifyDrop" returns="Boolean" signature="notifyDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
          </scope>
          <scope ilk="class" line="27" lineend="41" name="ScrollManager">
            <variable citdl="Object" line="27" lineend="200" name="ScrollManager">
              <scope doc="Registers new overflow element(s) to auto scroll" ilk="function" line="126" lineend="135" name="register" signature="register(el)">
                <variable citdl="Mixed/Array" doc="The id of or the element to be scrolled or an array of either" ilk="argument" name="el" />
                <variable citdl="ScrollManager" name="this" />
              </scope>
              <scope doc="Unregisters overflow element(s) so they are no longer scrolled" ilk="function" line="141" lineend="150" name="unregister" signature="unregister(el)">
                <variable citdl="Mixed/Array" doc="The id of or the element to be removed or an array of either" ilk="argument" name="el" />
                <variable citdl="ScrollManager" name="this" />
              </scope>
              <variable citdl="Number" doc="The number of pixels from the top or bottom edge of a container the pointer needs to be to&#xA;trigger scrolling (defaults to 25)" line="157" name="vthresh" />
              <variable citdl="Number" doc="The number of pixels from the right or left edge of a container the pointer needs to be to&#xA;trigger scrolling (defaults to 25)" line="163" name="hthresh" />
              <variable citdl="Number" doc="The number of pixels to scroll in each scroll increment (defaults to 50)" line="169" name="increment" />
              <variable citdl="Number" doc="The frequency of scrolls in milliseconds (defaults to 500)" line="175" name="frequency" />
              <variable citdl="Boolean" doc="True to animate the scroll (defaults to true)" line="181" name="animate" />
              <variable citdl="Number" doc="The animation duration in seconds -&#xA;MUST BE less than Ext.dd.ScrollManager.frequency! (defaults to .4)" line="188" name="animDuration" />
              <scope doc="Manually trigger a cache refresh." ilk="function" line="193" lineend="199" name="refreshCache" signature="refreshCache()">
                <variable citdl="ScrollManager" name="this" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Object" ilk="class" line="64" lineend="1180" name="DragDrop">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines the interface and base operation of items that that can be&#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver and onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&#xA;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with&#xA;other DragDrop objects.&#xA;handle element(s): The drag operation only occurs if the element that&#xA;was clicked matches a handle element.  By default this is the linked&#xA;element, but there are times that you will want only a portion of the&#xA;linked element to initiate the drag operation, and the setHandleElId()&#xA;method provides a way to define this.&#xA;drag element: this represents the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link Ext.dd.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link Ext.dd.DDProxy}.&#xA;&#xA;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any&#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&#xA;dd = new Ext.dd.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&#xA;Since none of the event handlers have been implemented, nothing would&#xA;actually happen if you were to run the code above.  Normally you would&#xA;override this class or one of the default implementations, but you can&#xA;also override the methods you want on an instance of the class...&#xA;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}" ilk="function" line="64" lineend="68" name="DragDrop" signature="DragDrop(id, sGroup, config)">
              <variable citdl="String" doc="of the element that is linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DragDrop:&#xA;padding, isTarget, maintainOffset, primaryButtonOnly" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="String" doc="Set to false to enable a DragDrop object to fire drag events while dragging&#xA;over its own Element. Defaults to true - DragDrop objects do not by default&#xA;fire drag events to themselves." line="88" name="id" />
            <variable citdl="Object" doc="Configuration attributes passed into the constructor" line="95" name="config" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The id of the element that will be dragged.  By default this is same&#xA;as the linked element , but could be changed to another element. Ex:&#xA;Ext.dd.DDProxy" line="105" name="dragElId" />
            <variable attributes="private" citdl="String" doc="PRIVATE: The ID of the element that initiates the drag operation.  By default&#xA;this is the linked element, but could be changed to be a child of this&#xA;element.  This lets us do things like only starting the drag when the&#xA;header element within the linked html element is clicked." line="116" name="handleElId" />
            <variable citdl="Object" doc="An object who&apos;s property names identify HTML tags to be considered invalid as drag handles.&#xA;A non-null property value identifies the tag as invalid. Defaults to the&#xA;following value which prevents drag operations from being initiated by &amp;lt;a&gt; elements:&#xA;A: &quot;A&quot;" line="128" lineend="628" name="invalidHandleTypes">
              <variable citdl="String" line="628" name="A" />
            </variable>
            <variable citdl="Object" doc="An object who&apos;s property names identify the IDs of elements to be considered invalid as drag handles.&#xA;A non-null property value identifies the ID as invalid. For example, to prevent&#xA;dragging from being initiated on element ID &quot;foo&quot;, use:&#xA;foo: true" line="140" lineend="629" name="invalidHandleIds" />
            <variable citdl="Array" doc="An Array of CSS class names for elements to be considered in valid as drag handles." line="147" name="invalidHandleClasses" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="156" name="startPageX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The linked element&apos;s absolute X position at the time the drag was&#xA;started" line="165" name="startPageY" />
            <variable citdl="true, &apos;group2&apos;:true" doc="The group defines a logical collection of DragDrop objects that are&#xA;related.  Instances only get events when interacting with other&#xA;DragDrop object in the same group.  This lets us define multiple&#xA;groups using a single DragDrop subclass if we want." line="175" lineend="606" name="groups" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Individual drag/drop instances can be locked.  This will prevent&#xA;onmousedown start drag." line="184" name="locked" />
            <scope doc="Lock this instance" ilk="function" line="190" lineend="190" name="lock" signature="lock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="When set to true, other DD objects in cooperating DDGroups do not receive&#xA;notification events when this DD object is dragged over them. Defaults to false." line="198" name="moveOnly" />
            <scope doc="Unlock this instace" ilk="function" line="204" lineend="204" name="unlock" signature="unlock()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Boolean" doc="By default, all instances can be a drop target.  This can be disabled by&#xA;setting isTarget to false." line="212" name="isTarget" />
            <variable citdl="Array" doc="The padding configured for this drag and drop object for calculating&#xA;the drop zone intersection with this object." line="220" name="padding" />
            <variable attributes="private" citdl="Ext.getDom()" doc="PRIVATE: Cached reference to the linked element" line="227" name="_domRef" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Internal typeof flag" line="234" name="__ygDragDrop" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when horizontal contraints are applied" line="242" name="constrainX" />
            <variable attributes="private" citdl="Boolean" doc="PRIVATE: Set to true when vertical contraints are applied" line="250" name="constrainY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The left constraint" line="258" name="minX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The right constraint" line="266" name="maxX" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The up constraint" line="275" name="minY" />
            <variable attributes="private" citdl="Number" doc="PRIVATE: The down constraint" line="283" name="maxY" />
            <variable citdl="Boolean" doc="Maintain offsets when we resetconstraints.  Set to true when you want&#xA;the position of the element relative to its parent to stay the same&#xA;when the page changes" line="293" name="maintainOffset" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;horizontal graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="302" name="xTicks" />
            <variable citdl="Array" doc="Array of pixel locations the element will snap to if we specified a&#xA;vertical graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." line="311" name="yTicks" />
            <variable citdl="Boolean" doc="By default the drag and drop instance will only respond to the primary&#xA;button click (left button for a right-handed mouse).  Set to true to&#xA;allow drag and drop to start with any mouse click that is propogated&#xA;by the browser" line="321" name="primaryButtonOnly" />
            <variable citdl="Boolean" doc="The availabe property is false until the linked dom element is accessible." line="328" name="available" />
            <variable citdl="Boolean" doc="By default, drags can only be initiated if the mousedown occurs in the&#xA;region the linked element is.  This is done in part to work around a&#xA;bug in some browsers that mis-report the mousedown if the previous&#xA;mouseup happened outside of the window.  This property is set to true&#xA;if outer handles are defined." line="341" name="hasOuterHandles" />
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the startDrag event" ilk="function" line="348" lineend="348" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called after a drag/drop object is clicked&#xA;and the drag or mousedown time thresholds have beeen met." ilk="function" line="357" lineend="357" name="startDrag" signature="startDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDrag event" ilk="function" line="364" lineend="364" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called during the onMouseMove event while dragging an&#xA;object." ilk="function" line="372" lineend="372" name="onDrag" signature="onDrag(e)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element fist begins hovering over&#xA;another DragDrop obj" ilk="function" line="383" lineend="383" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of one or more&#xA;dragdrop items being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOver event" ilk="function" line="390" lineend="390" name="b4DragOver" signature="b4DragOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this element is hovering over another&#xA;DragDrop obj" ilk="function" line="401" lineend="401" name="onDragOver" signature="onDragOver(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of dd items&#xA;being hovered over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragOut event" ilk="function" line="408" lineend="408" name="b4DragOut" signature="b4DragOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when we are no longer hovering over an element" ilk="function" line="418" lineend="418" name="onDragOut" signature="onDragOut(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was hovering over.  In INTERSECT mode, an array of dd items&#xA;that the mouse is no longer over." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the onDragDrop event" ilk="function" line="425" lineend="425" name="b4DragDrop" signature="b4DragDrop(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on another DragDrop&#xA;obj" ilk="function" line="436" lineend="436" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="{String" doc="In POINT mode, the element&#xA;id this was dropped on.  In INTERSECT mode, an array of dd items this&#xA;was dropped on." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on an area with no&#xA;drop target" ilk="function" line="444" lineend="444" name="onInvalidDrop" signature="onInvalidDrop(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code that executes immediately before the endDrag event" ilk="function" line="451" lineend="451" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Fired when we are done dragging the object" ilk="function" line="458" lineend="458" name="endDrag" signature="endDrag(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Code executed immediately before the onMouseDown event" ilk="function" line="466" lineend="466" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mousedown" ilk="function" line="473" lineend="473" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Event handler that fires when a drag/drop obj gets a mouseup" ilk="function" line="480" lineend="480" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Override the onAvailable method to do what is needed after the initial&#xA;position was determined." ilk="function" line="487" lineend="488" name="onAvailable" signature="onAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Object" doc="Provides default constraint padding to &quot;constrainTo&quot; elements (defaults to {left: 0, right:0, top:0, bottom:0})." line="494" lineend="494" name="defaultPadding">
              <variable citdl="Number" line="494" name="top" />
              <variable citdl="Number" line="494" name="right" />
              <variable citdl="Number" line="494" name="bottom" />
              <variable citdl="Number" line="494" name="left" />
            </variable>
            <scope doc="Initializes the drag drop object&apos;s constraints to restrict movement to a certain element.&#xA;&#xA;Usage:&#xA;var dd = new Ext.dd.DDProxy(&quot;dragDiv1&quot;, &quot;proxytest&quot;,&#xA;{ dragElId: &quot;existingProxyDiv&quot; });&#xA;dd.startDrag = function(){&#xA;this.constrainTo(&quot;parent-id&quot;);&#xA;Or you can initalize it using the {@link Ext.Element} object:&#xA;Ext.get(&quot;dragDiv1&quot;).initDDProxy(&quot;proxytest&quot;, {dragElId: &quot;existingProxyDiv&quot;}, {&#xA;startDrag : function(){&#xA;this.constrainTo(&quot;parent-id&quot;);&#xA;});" ilk="function" line="521" lineend="550" name="constrainTo" signature="constrainTo(constrainTo, pad, inContent)">
              <variable citdl="Mixed" doc="The element to constrain to." ilk="argument" name="constrainTo" />
              <variable citdl="Object/Number" doc="(optional) Pad provides a way to specify &quot;padding&quot; of the constraints,&#xA;and can be either a number for symmetrical padding (4 would be equal to {left:4, right:4, top:4, bottom:4}) or&#xA;an object containing the sides to pad. For example: {right:10, bottom:10}" ilk="argument" name="pad" />
              <variable citdl="Boolean" doc="(optional) Constrain the draggable in the content box of the element (inside padding and borders)" ilk="argument" name="inContent" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get().getBox()" line="526" name="b" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="527" name="ce" />
              <variable attributes="__local__ private" citdl="ce.getScroll()" line="528" name="s" />
              <variable attributes="__local__ private" citdl="Object" line="529" lineend="534" name="c">
                <variable citdl="s.top" line="531" name="y" />
                <variable citdl="s.left" line="531" name="x" />
                <variable citdl="Ext.lib.Dom.getViewHeight()" line="531" name="height" />
                <variable citdl="Ext.lib.Dom.getViewWidth()" line="531" name="width" />
              </variable>
              <variable attributes="__local__ private" citdl="ce.dom" line="529" name="cd" />
              <variable attributes="__local__ private" citdl="ce.getXY()" line="533" name="xy" />
              <variable attributes="__local__ private" citdl="b.y" line="538" name="topSpace" />
              <variable attributes="__local__ private" citdl="b.x" line="539" name="leftSpace" />
            </scope>
            <scope doc="Returns a reference to the linked element" ilk="function" line="557" lineend="563" name="getEl" returns="HTMLElement" signature="getEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns a reference to the actual element to drag.  By default this is&#xA;the same as the html element, but it can be assigned to another&#xA;element. An example of this can be found in Ext.dd.DDProxy" ilk="function" line="572" lineend="574" name="getDragEl" returns="HTMLElement" signature="getDragEl()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Sets up the DragDrop object.  Must be called in the constructor of any&#xA;Ext.dd.DragDrop subclass" ilk="function" line="584" lineend="588" name="init" signature="init(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Initializes Targeting functionality only... the object does not&#xA;get a mousedown handler." ilk="function" line="598" lineend="635" name="initTarget" signature="initTarget(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="configuration attributes" ilk="argument" name="config" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="Ext.dd.DDM" line="604" name="DDM" />
            <scope doc="Applies the configuration parameters that were passed into the constructor.&#xA;This is supposed to happen at each level through the inheritance chain.  So&#xA;a DDProxy implentation will execute apply config on DDProxy, DD, and&#xA;DragDrop in order to get all of the parameters that are available in&#xA;each object." ilk="function" line="645" lineend="654" name="applyConfig" signature="applyConfig()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Executed when the linked element is available" ilk="function" line="661" lineend="665" name="handleOnAvailable" signature="handleOnAvailable()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Configures the padding for the target zone in px.  Effectively expands&#xA;(or reduces) the virtual object size for targeting calculations.&#xA;Supports css-style shorthand; if only one parameter is passed, all sides&#xA;will have that padding, and if only two are passed, the top and bottom&#xA;will have the first param, the left and right the second." ilk="function" line="679" lineend="688" name="setPadding" signature="setPadding(iTop, iRight, iBot, iLeft)">
              <variable citdl="Number" doc="Top pad" ilk="argument" name="iTop" />
              <variable citdl="Number" doc="Right pad" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="Bot pad" ilk="argument" name="iBot" />
              <variable citdl="Number" doc="Left pad" ilk="argument" name="iLeft" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Stores the initial placement of the linked element." ilk="function" line="696" lineend="716" name="setInitPosition" signature="setInitPosition(diffX, diffY)">
              <variable citdl="Number" doc="the X offset, default 0" ilk="argument" name="diffX" />
              <variable citdl="Number" doc="the Y offset, default 0" ilk="argument" name="diffY" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="697" name="el" />
              <variable attributes="__local__ private" citdl="diffX" line="703" name="dx" />
              <variable attributes="__local__ private" citdl="diffY" line="704" name="dy" />
              <variable attributes="__local__ private" citdl="Dom.getXY()" line="706" name="p" />
            </scope>
            <variable citdl="p[0]" line="708" name="initPageX" />
            <variable citdl="p[1]" line="709" name="initPageY" />
            <variable citdl="p[0]" line="711" name="lastPageX" />
            <variable citdl="p[1]" line="712" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Sets the start position of the element.  This is set when the obj&#xA;is initialized, the reset when a drag is started." ilk="function" line="725" lineend="731" name="setStartPosition" signature="setStartPosition(pos)">
              <variable doc="current position (from previous lookup)" ilk="argument" name="pos" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="pos" line="726" name="p" />
            </scope>
            <variable line="727" name="deltaSetXY" />
            <scope doc="Add this instance to a group of related drag/drop objects.  All&#xA;instances belong to at least one group, and can belong to as many&#xA;groups as needed." ilk="function" line="740" lineend="743" name="addToGroup" signature="addToGroup(sGroup)">
              <variable citdl="String" doc="the name of the group" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove&apos;s this instance from the supplied interaction group" ilk="function" line="750" lineend="756" name="removeFromGroup" signature="removeFromGroup(sGroup)">
              <variable citdl="String" doc="The group to drop" ilk="argument" name="sGroup" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify that an element other than the linked element&#xA;will be moved with the cursor during a drag" ilk="function" line="764" lineend="766" name="setDragElId" signature="setDragElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to specify a child of the linked element that should be&#xA;used to initiate the drag operation.  An example of this would be if&#xA;you have a content div with text and links.  Clicking anywhere in the&#xA;content area would normally start the drag operation.  Use this method&#xA;to specify that an element inside of the content div is the element&#xA;that starts the drag operation." ilk="function" line="779" lineend="785" name="setHandleElId" signature="setHandleElId(id)">
              <variable citdl="String" doc="the id of the element that will be used to&#xA;initiate the drag." ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Allows you to set an element outside of the linked element as a drag&#xA;handle" ilk="function" line="793" lineend="802" name="setOuterHandleElId" signature="setOuterHandleElId(id)">
              <variable doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Remove all drag and drop hooks for this element" ilk="function" line="808" lineend="813" name="unreg" signature="unreg()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope ilk="function" line="815" lineend="817" name="destroy" signature="destroy()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Returns true if this instance is locked, or the drag drop mgr is locked&#xA;(meaning that all drag/drop is disabled on the page.)" ilk="function" line="826" lineend="828" name="isLocked" returns="Boolean" signature="isLocked()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Fired when this object is clicked" ilk="function" line="837" lineend="868" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="Ext.dd.DragDrop" doc="the clicked dd object (this dd obj)" ilk="argument" name="oDD" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Ext.lib.Point" line="848" name="pt" />
            </scope>
            <scope ilk="function" line="870" lineend="875" name="clickValidator" signature="clickValidator(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="871" name="target" />
            </scope>
            <scope doc="Allows you to specify a tag name that should not start a drag operation&#xA;when clicked.  This is designed to facilitate embedding links within a&#xA;drag handle that do something other than start the drag." ilk="function" line="884" lineend="887" name="addInvalidHandleType" signature="addInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to exclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="885" name="type" />
            </scope>
            <scope doc="Lets you to specify an element id for a child of a drag handle&#xA;that should not initiate a drag" ilk="function" line="895" lineend="900" name="addInvalidHandleId" signature="addInvalidHandleId(id)">
              <variable citdl="String" doc="the element id of the element you wish to ignore" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Lets you specify a css class of elements that will not initiate a drag" ilk="function" line="907" lineend="909" name="addInvalidHandleClass" signature="addInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the elements you wish to ignore" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an excluded tag name set by addInvalidHandleType" ilk="function" line="916" lineend="920" name="removeInvalidHandleType" signature="removeInvalidHandleType(tagName)">
              <variable citdl="String" doc="the type of element to unexclude" ilk="argument" name="tagName" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="tagName.toUpperCase()" line="917" name="type" />
            </scope>
            <scope doc="Unsets an invalid handle id" ilk="function" line="927" lineend="932" name="removeInvalidHandleId" signature="removeInvalidHandleId(id)">
              <variable citdl="String" doc="the id of the element to re-enable" ilk="argument" name="id" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Unsets an invalid css class" ilk="function" line="940" lineend="946" name="removeInvalidHandleClass" signature="removeInvalidHandleClass(cssClass)">
              <variable citdl="String" doc="the class of the element(s) you wish to&#xA;re-enable" ilk="argument" name="cssClass" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Checks the tag exclusion list to see if this click should be ignored" ilk="function" line="954" lineend="974" name="isValidHandleChild" returns="Boolean" signature="isValidHandleChild(node)">
              <variable citdl="HTMLElement" doc="the HTMLElement to evaluate" ilk="argument" name="node" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Boolean" line="956" name="valid" />
              <variable attributes="__local__ private" citdl="node.nodeName.toUpperCase()" line="958" name="nodeName" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Create the array of horizontal tick marks if an interval was specified&#xA;in setXConstraint()." ilk="function" line="982" lineend="1003" name="setXTicks" signature="setXTicks(iStartX, iTickSize)">
              <variable ilk="argument" name="iStartX" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="986" lineend="986" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="984" name="xTickSize" />
            <scope attributes="private" doc="PRIVATE: Create the array of vertical tick marks if an interval was specified in&#xA;setYConstraint()." ilk="function" line="1011" lineend="1032" name="setYTicks" signature="setYTicks(iStartY, iTickSize)">
              <variable ilk="argument" name="iStartY" />
              <variable ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="1015" lineend="1015" name="tickMap" />
            </scope>
            <variable citdl="iTickSize" line="1013" name="yTickSize" />
            <scope doc="By default, the element can be dragged any place on the screen.  Use&#xA;this method to limit the horizontal travel of the element.  Pass in&#xA;0,0 for the parameters if you want to lock the drag to the y axis." ilk="function" line="1046" lineend="1055" name="setXConstraint" signature="setXConstraint(iLeft, iRight, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move to the left" ilk="argument" name="iLeft" />
              <variable citdl="Number" doc="the number of pixels the element can move to the&#xA;right" ilk="argument" name="iRight" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element&#xA;should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iLeft" line="1047" name="leftConstraint" />
            <variable citdl="iRight" line="1048" name="rightConstraint" />
            <scope doc="Clears any constraints applied to this instance.  Also clears ticks&#xA;since they can&apos;t exist independent of a constraint at this time." ilk="function" line="1062" lineend="1066" name="clearConstraints" signature="clearConstraints()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="Clears any tick interval defined for this instance" ilk="function" line="1072" lineend="1077" name="clearTicks" signature="clearTicks()">
              <variable citdl="DragDrop" name="this" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Set&#xA;this to limit the vertical travel of the element.  Pass in 0,0 for the&#xA;parameters if you want to lock the drag to the x axis." ilk="function" line="1089" lineend="1099" name="setYConstraint" signature="setYConstraint(iUp, iDown, iTickSize)">
              <variable citdl="Number" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="Number" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="Number" doc="optional parameter for specifying that the&#xA;element should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
              <variable citdl="DragDrop" name="this" />
            </scope>
            <variable citdl="iUp" line="1090" name="topConstraint" />
            <variable citdl="iDown" line="1091" name="bottomConstraint" />
            <scope doc="resetConstraints must be called if you manually reposition a dd element." ilk="function" line="1106" lineend="1133" name="resetConstraints" signature="resetConstraints()">
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" line="1112" name="dx" />
              <variable attributes="__local__ private" line="1113" name="dy" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Normally the drag element is moved pixel by pixel, but we can specify&#xA;that it move a number of pixels at a time.  This method resolves the&#xA;location when we have it set up like this." ilk="function" line="1145" lineend="1169" name="getTick" returns="Number" signature="getTick(val, tickArray)">
              <variable citdl="Number" doc="where we want to place the object" ilk="argument" name="val" />
              <variable citdl="Array" doc="sorted array of valid points" ilk="argument" name="tickArray" />
              <variable citdl="DragDrop" name="this" />
              <variable attributes="__local__ private" citdl="i" line="1157" name="next" />
              <variable attributes="__local__ private" citdl="val" line="1159" name="diff1" />
              <variable attributes="__local__ private" citdl="tickArray[next]" line="1160" name="diff2" />
            </scope>
            <scope doc="toString method" ilk="function" line="1176" lineend="1178" name="toString" returns="String" signature="toString()">
              <variable citdl="DragDrop" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DragSource" ilk="class" line="65" lineend="70" name="DragZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that allows dragging of multiple child source nodes.&#xA;This class does not move the drag target nodes, but a proxy element which may contain&#xA;any DOM structure you wish. The DOM element to show in the proxy is provided by either a&#xA;provided implementation of {@link #getDragData}, or by registered draggables registered with {@link Ext.dd.Registry}&#xA;If you wish to provide draggability for an arbitrary number of DOM nodes, each of which represent some&#xA;application object (For example nodes in a {@link Ext.DataView DataView}) then use of this class&#xA;is the most efficient way to &quot;activate&quot; those nodes.&#xA;By default, this class requires that draggable child nodes are registered with {@link Ext.dd.Registry}.&#xA;However a simpler way to allow a DragZone to manage any number of draggable elements is to configure&#xA;the DragZone with  an implementation of the {@link #getDragData} method which interrogates the passed&#xA;mouse event to see if it has taken place within an element, or class of elements. This is easily done&#xA;by using the event&apos;s {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a&#xA;{@link Ext.DomQuery} selector. For example, to make the nodes of a DataView draggable, use the following&#xA;technique. Knowledge of the use of the DataView is required:&#xA;myDataView.on(&apos;render&apos;, function() {&#xA;myDataView.dragZone = new Ext.dd.DragZone(myDataView.getEl(), {&#xA;//      On receipt of a mousedown event, see if it is within a DataView node.&#xA;//      Return a drag data object if so.&#xA;getDragData: function(e) {&#xA;//          Use the DataView&apos;s own itemSelector (a mandatory property) to&#xA;//          test if the mousedown is within one of the DataView&apos;s nodes.&#xA;var sourceEl = e.getTarget(myDataView.itemSelector, 10);&#xA;//          If the mousedown is within a DataView node, clone the node to produce&#xA;//          a ddel element for use by the drag proxy. Also add application data&#xA;//          to the returned data object.&#xA;if (sourceEl) {&#xA;d = sourceEl.cloneNode(true);&#xA;d.id = Ext.id();&#xA;return {&#xA;ddel: d,&#xA;sourceEl: sourceEl,&#xA;repairXY: Ext.fly(sourceEl).getXY(),&#xA;sourceStore: myDataView.store,&#xA;draggedRecord: v.getRecord(sourceEl)&#xA;//      Provide coordinates for the proxy to slide back to on failed drag.&#xA;//      This is the original XY coordinates of the draggable element captured&#xA;//      in the getDragData method.&#xA;getRepairXY: function() {&#xA;return this.dragData.repairXY;&#xA;});&#xA;});&#xA;See the {@link Ext.dd.DropZone DropZone} documentation for details about building a DropZone which&#xA;cooperates with this DragZone." ilk="function" line="65" lineend="70" name="DragZone" signature="DragZone(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DragZone" name="this" />
            </scope>
            <scope citdl="Object" doc="This property contains the data representing the dragged object. This data is set up by the implementation&#xA;of the {@link #getDragData} method. It must contain a ddel property, but can contain&#xA;any other data according to the application&apos;s needs." ilk="function" line="97" lineend="99" name="getDragData" returns="Object" signature="getDragData(e)">
              <variable citdl="EventObject" doc="The mouse down event" ilk="argument" name="e" />
            </scope>
            <scope doc="Called once drag threshold has been reached to initialize the proxy element. By default, it clones the&#xA;this.dragData.ddel" ilk="function" line="108" lineend="112" name="onInitDrag" returns="Boolean" signature="onInitDrag(x, y)">
              <variable citdl="Number" doc="The x position of the click on the dragged object" ilk="argument" name="x" />
              <variable citdl="Number" doc="The y position of the click on the dragged object" ilk="argument" name="y" />
            </scope>
            <scope doc="Called after a repair of an invalid drop. By default, highlights this.dragData.ddel" ilk="function" line="117" lineend="122" name="afterRepair" signature="afterRepair()" />
            <variable citdl="Boolean" line="121" name="dragging" />
            <scope doc="Called before a repair of an invalid drop to get the XY to animate to. By default returns&#xA;the XY of this.dragData.ddel" ilk="function" line="130" lineend="132" name="getRepairXY" returns="Array" signature="getRepairXY(e)">
              <variable citdl="EventObject" doc="The mouse up event" ilk="argument" name="e" />
            </scope>
          </scope>
          <scope classrefs="Ext.dd.DropTarget" ilk="class" line="70" lineend="72" name="DropZone">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides a container DD instance that allows dropping on multiple child target nodes.&#xA;By default, this class requires that child nodes accepting drop are registered with {@link Ext.dd.Registry}.&#xA;However a simpler way to allow a DropZone to manage any number of target elements is to configure the&#xA;DropZone with an implementation of {@link #getTargetFromEvent} which interrogates the passed&#xA;mouse event to see if it has taken place within an element, or class of elements. This is easily done&#xA;by using the event&apos;s {@link Ext.EventObject#getTarget getTarget} method to identify a node based on a&#xA;{@link Ext.DomQuery} selector.&#xA;Once the DropZone has detected through calling getTargetFromEvent, that the mouse is over&#xA;a drop target, that target is passed as the first parameter to {@link #onNodeEnter}, {@link #onNodeOver},&#xA;{@link #onNodeOut}, {@link #onNodeDrop}. You may configure the instance of DropZone with implementations&#xA;of these methods to provide application-specific behaviour for these events to update both&#xA;application state, and UI state.&#xA;For example to make a GridPanel a cooperating target with the example illustrated in&#xA;{@link Ext.dd.DragZone DragZone}, the following technique might be used:&#xA;myGridPanel.on(&apos;render&apos;, function() {&#xA;myGridPanel.dropZone = new Ext.dd.DropZone(myGridPanel.getView().scroller, {&#xA;//      If the mouse is over a grid row, return that node. This is&#xA;//      provided as the &quot;target&quot; parameter in all &quot;onNodeXXXX&quot; node event handling functions&#xA;getTargetFromEvent: function(e) {&#xA;return e.getTarget(myGridPanel.getView().rowSelector);&#xA;//      On entry into a target node, highlight that node.&#xA;onNodeEnter : function(target, dd, e, data){&#xA;Ext.fly(target).addClass(&apos;my-row-highlight-class&apos;);&#xA;//      On exit from a target node, unhighlight that node.&#xA;onNodeOut : function(target, dd, e, data){&#xA;Ext.fly(target).removeClass(&apos;my-row-highlight-class&apos;);&#xA;//      While over a target node, return the default drop allowed class which&#xA;//      places a &quot;tick&quot; icon into the drag proxy.&#xA;onNodeOver : function(target, dd, e, data){&#xA;return Ext.dd.DropZone.prototype.dropAllowed;&#xA;//      On node drop we can interrogate the target to find the underlying&#xA;//      application object that is the real target of the dragged data.&#xA;//      In this case, it is a Record in the GridPanel&apos;s Store.&#xA;//      We can use the data set up by the DragZone&apos;s getDragData method to read&#xA;//      any data we decided to attach in the DragZone&apos;s getDragData method.&#xA;onNodeDrop : function(target, dd, e, data){&#xA;var rowIndex = myGridPanel.getView().findRowIndex(target);&#xA;var r = myGridPanel.getStore().getAt(rowIndex);&#xA;Ext.Msg.alert(&apos;Drop gesture&apos;, &apos;Dropped Record id &apos; + data.draggedRecord.id +&#xA;&apos; on Record id &apos; + r.id);&#xA;return true;&#xA;});&#xA;See the {@link Ext.dd.DragZone DragZone} documentation for details about building a DragZone which&#xA;cooperates with this DropZone." ilk="function" line="70" lineend="72" name="DropZone" signature="DropZone(el, config)">
              <variable citdl="Mixed" doc="The container element" ilk="argument" name="el" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="DropZone" name="this" />
            </scope>
            <scope doc="Returns a custom data object associated with the DOM node that is the target of the event.  By default&#xA;this looks up the event target in the {@link Ext.dd.Registry}, although you can override this method to&#xA;provide your own custom lookup." ilk="function" line="82" lineend="84" name="getTargetFromEvent" returns="Object" signature="getTargetFromEvent(e)">
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has entered a drop node&#xA;that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.&#xA;This method has no default implementation and should be overridden to provide&#xA;node-specific processing if necessary." ilk="function" line="97" lineend="99" name="onNodeEnter" signature="onNodeEnter(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called while the DropZone determines that a {@link Ext.dd.DragSource} is over a drop node&#xA;that has either been registered or detected by a configured implementation of {@link #getTargetFromEvent}.&#xA;The default implementation returns this.dropNotAllowed, so it should be&#xA;overridden to provide the proper feedback." ilk="function" line="114" lineend="116" name="onNodeOver" returns="String" signature="onNodeOver(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dragged out of&#xA;the drop node without dropping.  This method has no default implementation and should be overridden to provide&#xA;node-specific processing if necessary." ilk="function" line="128" lineend="130" name="onNodeOut" signature="onNodeOut(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped onto&#xA;the drop node.  The default implementation returns false, so it should be overridden to provide the&#xA;appropriate processing of the drop event and return true so that the drag source&apos;s repair action does not run." ilk="function" line="143" lineend="145" name="onNodeDrop" returns="Boolean" signature="onNodeDrop(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called while the DropZone determines that a {@link Ext.dd.DragSource} is being dragged over it,&#xA;but not over any of its registered drop nodes.  The default implementation returns this.dropNotAllowed, so&#xA;it should be overridden to provide the proper feedback if necessary." ilk="function" line="157" lineend="159" name="onContainerOver" returns="String" signature="onContainerOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="Called when the DropZone determines that a {@link Ext.dd.DragSource} has been dropped on it,&#xA;but not on any of its registered drop nodes.  The default implementation returns false, so it should be&#xA;overridden to provide the appropriate processing of the drop event if you need the drop zone itself to&#xA;be able to accept drops.  It should return true when valid so that the drag source&apos;s repair action does not run." ilk="function" line="171" lineend="173" name="onContainerDrop" returns="Boolean" signature="onContainerDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source is now over&#xA;the zone.  The default implementation returns this.dropNotAllowed and expects that only registered drop&#xA;nodes can process drag drop operations, so if you need the drop zone itself to be able to process drops&#xA;you should override this method and provide a custom implementation." ilk="function" line="186" lineend="188" name="notifyEnter" returns="String" signature="notifyEnter(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls continuously while it is being dragged over the drop zone.&#xA;This method will be called on every mouse movement while the drag source is over the drop zone.&#xA;It will call {@link #onNodeOver} while the drag source is over a registered node, and will also automatically&#xA;delegate to the appropriate node-specific methods as necessary when the drag source enters and exits&#xA;registered nodes ({@link #onNodeEnter}, {@link #onNodeOut}). If the drag source is not currently over a&#xA;registered node, it will call {@link #onContainerOver}." ilk="function" line="203" lineend="220" name="notifyOver" returns="String" signature="notifyOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getTargetFromEvent()" line="204" name="n" />
            </scope>
            <variable citdl="n" line="208" name="lastOverNode" />
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the source has been dragged&#xA;out of the zone without dropping.  If the drag source is currently over a registered node, the notification&#xA;will be delegated to {@link #onNodeOut} for node-specific handling, otherwise it will be ignored." ilk="function" line="230" lineend="235" name="notifyOut" signature="notifyOut(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag zone" ilk="argument" name="data" />
            </scope>
            <scope doc="The function a {@link Ext.dd.DragSource} calls once to notify this drop zone that the dragged item has&#xA;been dropped on it.  The drag zone will look up the target node based on the event passed in, and if there&#xA;is a node registered for that event, it will delegate to {@link #onNodeDrop} for node-specific handling,&#xA;otherwise it will call {@link #onContainerDrop}." ilk="function" line="247" lineend="256" name="notifyDrop" returns="Boolean" signature="notifyDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable citdl="Event" doc="The event" ilk="argument" name="e" />
              <variable citdl="Object" doc="An object containing arbitrary data supplied by the drag source" ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getTargetFromEvent()" line="252" name="n" />
            </scope>
            <scope ilk="function" line="259" lineend="261" name="triggerCacheRefresh" signature="triggerCacheRefresh()" />
          </scope>
          <scope ilk="class" line="1203" lineend="1218" name="DragDropMgr">
            <variable citdl="Object" line="1203" lineend="2470" name="DragDropMgr">
              <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Two dimensional Array of registered DragDrop objects.  The first&#xA;dimension is the DragDrop item group, the second the DragDrop&#xA;object." line="1218" lineend="2213" name="ids" />
              <variable attributes="private __static__" citdl="String" doc="PRIVATE STATIC: Array of element ids defined as drag handles.  Used to determine&#xA;if the element that generated the mousedown event is actually the&#xA;handle and not the html element itself." line="1229" lineend="1229" name="handleIds" />
              <variable attributes="private __static__" citdl="DragDrop" doc="PRIVATE STATIC: the DragDrop object that is currently being dragged&#xA;**/" line="1238" name="dragCurrent" />
              <variable attributes="private __static__" citdl="Array" doc="PRIVATE STATIC: the DragDrop object(s) that are being hovered over" line="1247" lineend="1781" name="dragOvers" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the X distance between the cursor and the object being dragged" line="1256" name="deltaX" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: the Y distance between the cursor and the object being dragged" line="1265" name="deltaY" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should prevent the default behavior of the&#xA;events we define. By default this is true, but this can be set to&#xA;false if you need the default behavior (not recommended)" line="1275" name="preventDefault" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Flag to determine if we should stop the propagation of the events&#xA;we generate. This is true by default but you may want to set it to&#xA;false if the html element contains other features that require the&#xA;mouse click." line="1286" name="stopPropagation" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Internal flag that is set to true when drag and drop has been&#xA;intialized" line="1295" name="initialized" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: All drag and drop can be disabled." line="1303" name="locked" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Called the first time an element is registered." ilk="function" line="1311" lineend="1313" name="init" signature="init()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="__static__" citdl="Number" doc="STATIC: In point mode, drag and drop interaction is defined by the&#xA;location of the cursor during the drag/drop" line="1322" name="POINT" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: In intersect mode, drag and drop interaction is defined by the&#xA;overlap of two or more drag and drop objects." line="1331" name="INTERSECT" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The current drag and drop mode.  Default: POINT" line="1339" name="mode" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Runs method on all drag and drop objects" ilk="function" line="1347" lineend="1357" name="_execOnAll" signature="_execOnAll(sMethod, args)">
                <variable ilk="argument" name="sMethod" />
                <variable ilk="argument" name="args" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1350" name="oDD" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Drag and drop initialization.  Sets up the global event handlers" ilk="function" line="1365" lineend="1376" name="_onLoad" signature="_onLoad()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Reset constraints on all drag and drop objs" ilk="function" line="1384" lineend="1386" name="_onResize" signature="_onResize(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Lock all drag and drop functionality" ilk="function" line="1393" lineend="1393" name="lock" signature="lock()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Unlock all drag and drop functionality" ilk="function" line="1400" lineend="1400" name="unlock" signature="unlock()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Is drag and drop locked?" ilk="function" line="1408" lineend="1408" name="isLocked" returns="Boolean" signature="isLocked()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Location cache that is set for all drag drop objects when a drag is&#xA;initiated, cleared when the drag is finished." line="1417" lineend="1417" name="locationCache" />
              <variable attributes="__static__" citdl="Boolean" doc="STATIC: Set useCache to false if you want to force object the lookup of each&#xA;drag and drop linked element constantly during a drag." line="1426" name="useCache" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The number of pixels that the mouse needs to move after the&#xA;mousedown before the drag is initiated.  Default=3;" line="1435" name="clickPixelThresh" />
              <variable attributes="__static__" citdl="Number" doc="STATIC: The number of milliseconds after the mousedown event to initiate the&#xA;drag if we don&apos;t get a mouseup event. Default=1000" line="1444" name="clickTimeThresh" />
              <variable attributes="private __static__" citdl="Boolean" doc="PRIVATE STATIC: Flag that indicates that either the drag pixel threshold or the&#xA;mousdown time threshold has been met" line="1454" name="dragThreshMet" />
              <variable attributes="private __static__" citdl="Object" doc="PRIVATE STATIC: Timeout used for the click time threshold" line="1463" name="clickTimeout" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The X position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1473" name="startX" />
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: The Y position of the mousedown event stored for later use when a&#xA;drag threshold is met." line="1483" name="startY" />
              <scope attributes="__static__" doc="STATIC: Each DragDrop instance must be registered with the DragDropMgr.&#xA;This is executed in DragDrop.init()" ilk="function" line="1493" lineend="1500" name="regDragDrop" signature="regDragDrop(oDD, sGroup)">
                <variable citdl="DragDrop" doc="the DragDrop object to register" ilk="argument" name="oDD" />
                <variable citdl="String" doc="the name of the group this element belongs to" ilk="argument" name="sGroup" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Removes the supplied dd instance from the supplied group. Executed&#xA;by DragDrop.removeFromGroup, so don&apos;t call this function directly." ilk="function" line="1509" lineend="1518" name="removeDDFromGroup" signature="removeDDFromGroup(oDD, sGroup)">
                <variable ilk="argument" name="oDD" />
                <variable ilk="argument" name="sGroup" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup]" line="1514" name="obj" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Unregisters a drag and drop item.  This is executed in&#xA;DragDrop.unreg, use that method instead of calling this directly." ilk="function" line="1527" lineend="1534" name="_remove" signature="_remove(oDD)">
                <variable ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Each DragDrop handle element must be registered.  This is done&#xA;automatically when executing DragDrop.setHandleElId()" ilk="function" line="1545" lineend="1550" name="regHandle" signature="regHandle(sDDId, sHandleId)">
                <variable citdl="String" doc="the DragDrop id this element is a handle for" ilk="argument" name="sDDId" />
                <variable citdl="String" doc="the id of the element that is the drag&#xA;handle" ilk="argument" name="sHandleId" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop item." ilk="function" line="1561" lineend="1563" name="isDragDrop" returns="Boolean" signature="isDragDrop(id)">
                <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the drag and drop instances that are in all groups the&#xA;passed in instance belongs to." ilk="function" line="1574" lineend="1589" name="getRelated" returns="Array" signature="getRelated(p_oDD, bTargetsOnly)">
                <variable citdl="DragDrop" doc="the obj to get related data for" ilk="argument" name="p_oDD" />
                <variable citdl="Boolean" doc="if true, only return targetable objs" ilk="argument" name="bTargetsOnly" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="1575" name="oDDs" />
                <variable attributes="__local__ private" citdl="this.ids[i][j]" line="1578" name="dd" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns true if the specified dd target is a legal target for&#xA;the specifice drag obj" ilk="function" line="1601" lineend="1610" name="isLegalTarget" returns="Boolean" signature="isLegalTarget(oDD, oTargetDD)">
                <variable ilk="argument" name="oDD" />
                <variable ilk="argument" name="oTargetDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.getRelated()" line="1602" name="targets" />
              </scope>
              <scope attributes="__static__" doc="STATIC: My goal is to be able to transparently determine if an object is&#xA;typeof DragDrop, and the exact subclass of DragDrop.  typeof&#xA;returns &quot;object&quot;, oDD.constructor.toString() always returns&#xA;&quot;DragDrop&quot; and not the name of the subclass.  So for now it just&#xA;evaluates a well-known variable in DragDrop." ilk="function" line="1623" lineend="1625" name="isTypeOfDD" returns="Boolean" signature="isTypeOfDD(oDD)">
                <variable ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility function to determine if a given element has been&#xA;registered as a drag drop handle for the given Drag Drop object." ilk="function" line="1636" lineend="1639" name="isHandle" returns="Boolean" signature="isHandle(sDDId, sHandleId)">
                <variable ilk="argument" name="sDDId" />
                <variable ilk="argument" name="sHandleId" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns the DragDrop instance for a given id" ilk="function" line="1648" lineend="1655" name="getDDById" returns="DragDrop" signature="getDDById(id)">
                <variable citdl="String" doc="the id of the DragDrop object" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Fired after a registered DragDrop object gets the mousedown event.&#xA;Sets up the events required to track the object being dragged" ilk="function" line="1666" lineend="1696" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable doc="the DragDrop object being dragged" ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="oDD.getEl()" line="1679" name="el" />
                <scope attributes="__local__ private" ilk="function" line="1691" lineend="1694" name="(anonymous)" signature="(anonymous)()">
                  <variable attributes="__local__ private" citdl="Ext.dd.DDM" line="1692" name="DDM" />
                </scope>
              </scope>
              <variable citdl="e.getTarget()" line="1676" name="currentTarget" />
              <scope attributes="__static__" doc="STATIC: Fired when either the drag pixel threshol or the mousedown hold&#xA;time threshold has been met." ilk="function" line="1706" lineend="1713" name="startDrag" signature="startDrag(x, y)">
                <variable citdl="Number" doc="the X position of the original mousedown" ilk="argument" name="x" />
                <variable citdl="Number" doc="the Y position of the original mousedown" ilk="argument" name="y" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mouseup event.  Will be invoked&#xA;from the context of the document." ilk="function" line="1723" lineend="1742" name="handleMouseUp" signature="handleMouseUp(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Utility to stop event propagation and event default, if these&#xA;features are turned on." ilk="function" line="1751" lineend="1759" name="stopEvent" signature="stopEvent(e)">
                <variable citdl="Event" doc="the event as returned by this.getEvent()" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to clean up event handlers after the drag&#xA;operation is complete" ilk="function" line="1769" lineend="1782" name="stopDrag" signature="stopDrag(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Internal function to handle the mousemove event.  Will be invoked&#xA;from the context of the html element." ilk="function" line="1798" lineend="1830" name="handleMouseMove" returns="Boolean" signature="handleMouseMove(e)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Math.abs()" line="1811" name="diffX" />
                <variable attributes="__local__ private" citdl="Math.abs()" line="1812" name="diffY" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Iterates over all of the DragDrop elements to find ones we are&#xA;hovering over or dropping on" ilk="function" line="1841" lineend="1966" name="fireEvents" signature="fireEvents(e, isDrop)">
                <variable citdl="Event" doc="the event" ilk="argument" name="e" />
                <variable citdl="Boolean" doc="is this a drop op or a mouseover op?" ilk="argument" name="isDrop" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.dragCurrent" line="1842" name="dc" />
                <variable attributes="__local__ private" citdl="e.getPoint()" line="1850" name="pt" />
                <variable attributes="__local__ private" citdl="Array" line="1853" name="oldOvers" />
                <variable attributes="__local__ private" citdl="Array" line="1855" name="outEvts" />
                <variable attributes="__local__ private" citdl="Array" line="1856" name="overEvts" />
                <variable attributes="__local__ private" citdl="Array" line="1857" name="dropEvts" />
                <variable attributes="__local__ private" citdl="Array" line="1858" name="enterEvts" />
                <variable attributes="__local__ private" citdl="this.dragOvers[i]" line="1864" name="ddo" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="1885" name="oDD" />
                <variable attributes="__local__ private" citdl="Number" line="1935" name="len" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Helper function for getting the best match from the list of drag&#xA;and drop objects returned by the drag and drop events when we are&#xA;in INTERSECT mode.  It returns either the first object that the&#xA;cursor is over, or the object that has the greatest overlap with&#xA;the dragged element." ilk="function" line="1980" lineend="2013" name="getBestMatch" returns="DragDrop" signature="getBestMatch(dds)">
                <variable citdl="Array" doc="The array of drag and drop objects&#xA;targeted" ilk="argument" name="dds" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="dds[0]" line="1981" name="winner" />
                <variable attributes="__local__ private" citdl="dds.length" line="1988" name="len" />
                <variable attributes="__local__ private" citdl="dds[i]" line="1995" name="dd" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Refreshes the cache of the top-left and bottom-right points of the&#xA;drag and drop objects in the specified group(s).  This is in the&#xA;format that is stored in the drag and drop instance, so typical&#xA;usage is:&#xA;&#xA;Ext.dd.DragDropMgr.refreshCache(ddinstance.groups);&#xA;&#xA;Alternatively:&#xA;&#xA;Ext.dd.DragDropMgr.refreshCache({group1:true, group2:true});" ilk="function" line="2033" lineend="2055" name="refreshCache" signature="refreshCache(groups)">
                <variable citdl="Object" doc="an associative array of groups to refresh" ilk="argument" name="groups" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.ids[sGroup][i]" line="2039" name="oDD" />
                <variable attributes="__local__ private" citdl="this.getLocation()" line="2043" name="loc" />
              </scope>
              <scope attributes="__static__" doc="STATIC: This checks to make sure an element exists and is in the DOM.  The&#xA;main purpose is to handle cases where innerHTML is used to remove&#xA;drag and drop objects from the DOM.  IE provides an &apos;unspecified&#xA;error&apos; when trying to access the offsetParent of such an element" ilk="function" line="2067" lineend="2083" name="verifyEl" returns="Boolean" signature="verifyEl(el)">
                <variable citdl="HTMLElement" doc="the element to check" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="el.offsetParent" line="2069" name="parent" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Returns a Region object containing the drag and drop element&apos;s position&#xA;and size, including the padding configured for it" ilk="function" line="2096" lineend="2122" name="getLocation" returns="Ext.lib.Region" signature="getLocation(oDD)">
                <variable citdl="DragDrop" doc="the drag and drop object to get the&#xA;location for" ilk="argument" name="oDD" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="oDD.getEl()" line="2101" name="el" />
                <variable attributes="__local__ private" citdl="y1" line="2101" name="y2" />
                <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2101" name="pos" />
                <variable attributes="__local__ private" citdl="x1" line="2101" name="l" />
                <variable attributes="__local__ private" citdl="pos[1]" line="2101" name="y1" />
                <variable attributes="__local__ private" citdl="x2" line="2101" name="r" />
                <variable attributes="__local__ private" citdl="y1" line="2101" name="t" />
                <variable attributes="__local__ private" citdl="x1" line="2101" name="x2" />
                <variable attributes="__local__ private" citdl="pos[0]" line="2101" name="x1" />
                <variable attributes="__local__ private" citdl="y2" line="2101" name="b" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Checks the cursor location to see if it over the target" ilk="function" line="2133" lineend="2181" name="isOverTarget" returns="Boolean" signature="isOverTarget(pt, oTarget, intersect)">
                <variable citdl="Ext.lib.Point" doc="The point to evaluate" ilk="argument" name="pt" />
                <variable citdl="DragDrop" doc="the DragDrop object we are inspecting" ilk="argument" name="oTarget" />
                <variable ilk="argument" name="intersect" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.locationCache[oTarget.id]" line="2135" name="loc" />
                <variable attributes="__local__ private" citdl="this.dragCurrent" line="2153" name="dc" />
                <variable attributes="__local__ private" citdl="dc.getTargetCoord()" line="2165" name="pos" />
                <variable attributes="__local__ private" citdl="dc.getDragEl()" line="2167" name="el" />
                <variable attributes="__local__ private" citdl="Ext.lib.Region" line="2171" name="curRegion" />
                <variable attributes="__local__ private" citdl="curRegion.intersect()" line="2173" name="overlap" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: unload event handler" ilk="function" line="2189" lineend="2191" name="_onUnload" signature="_onUnload(e, me)">
                <variable ilk="argument" name="e" />
                <variable ilk="argument" name="me" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Cleans up the drag and drop events and objects." ilk="function" line="2199" lineend="2214" name="unregAll" signature="unregAll()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable citdl="Object" line="2212" lineend="2222" name="elementCache" />
              <scope attributes="deprecated private __static__ deprecated" doc="DEPRECATED PRIVATE STATIC: Get the wrapper for the DOM element specified" ilk="function" line="2233" lineend="2240" name="getElWrapper" returns="Ext.dd.DDM.ElementWrapper" signature="getElWrapper(id)">
                <variable citdl="String" doc="the id of the element to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="this.elementCache[id]" line="2234" name="oWrapper" />
              </scope>
              <scope attributes="deprecated __static__ deprecated" doc="DEPRECATED STATIC: Returns the actual DOM element" ilk="function" line="2250" lineend="2252" name="getElement" returns="Object" signature="getElement(id)">
                <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="deprecated __static__ deprecated" doc="DEPRECATED STATIC: Returns the style property for the DOM element (i.e.,&#xA;document.getElById(id).style)" ilk="function" line="2263" lineend="2266" name="getCss" returns="Object" signature="getCss(id)">
                <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Ext.getDom()" line="2264" name="el" />
              </scope>
              <scope ilk="class" line="2275" lineend="2291" name="ElementWrapper">
                <scope attributes="__ctor__ deprecated private deprecated" doc="DEPRECATED PRIVATE: Inner class for cached elements" ilk="function" line="2275" lineend="2291" name="ElementWrapper" signature="ElementWrapper(el)">
                  <variable ilk="argument" name="el" />
                  <variable citdl="ElementWrapper" name="this" />
                </scope>
                <variable citdl="el" doc="The element" line="2280" name="el" />
                <variable citdl="this.el" doc="The element id" line="2285" name="id" />
                <variable citdl="this.el" doc="A reference to the style property" line="2290" name="css" />
              </scope>
              <scope attributes="deprecated __static__ deprecated" doc="DEPRECATED STATIC: Returns the X position of an html element" ilk="function" line="2302" lineend="2304" name="getPosX" returns="Number" signature="getPosX(el)">
                <variable doc="the element for which to get the position" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="deprecated __static__ deprecated" doc="DEPRECATED STATIC: Returns the Y position of an html element" ilk="function" line="2314" lineend="2316" name="getPosY" returns="Number" signature="getPosY(el)">
                <variable doc="the element for which to get the position" ilk="argument" name="el" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Swap two nodes.  In IE, we use the native method, for others we&#xA;emulate the IE behavior" ilk="function" line="2326" lineend="2342" name="swapNode" signature="swapNode(n1, n2)">
                <variable doc="the first node to swap" ilk="argument" name="n1" />
                <variable doc="the other node to swap" ilk="argument" name="n2" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="n2.parentNode" line="2330" name="p" />
                <variable attributes="__local__ private" citdl="n2.nextSibling" line="2331" name="s" />
              </scope>
              <scope attributes="private __static__" doc="PRIVATE STATIC: Returns the current scroll position" ilk="function" line="2350" lineend="2362" name="getScroll" signature="getScroll()">
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="document.body" line="2351" name="db" />
                <variable attributes="__local__ private" citdl="dde.scrollTop" line="2351" name="t" />
                <variable attributes="__local__ private" citdl="document.documentElement" line="2351" name="dde" />
                <variable attributes="__local__ private" citdl="dde.scrollLeft" line="2351" name="l" />
              </scope>
              <scope attributes="deprecated __static__ deprecated" doc="DEPRECATED STATIC: Returns the specified element style property" ilk="function" line="2373" lineend="2375" name="getStyle" returns="String" signature="getStyle(el, styleProp)">
                <variable citdl="HTMLElement" doc="the element" ilk="argument" name="el" />
                <variable citdl="String" doc="the style property" ilk="argument" name="styleProp" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Gets the scrollTop" ilk="function" line="2383" lineend="2383" name="getScrollTop" returns="Number" signature="getScrollTop()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Gets the scrollLeft" ilk="function" line="2391" lineend="2391" name="getScrollLeft" returns="Number" signature="getScrollLeft()">
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Sets the x/y position of an element to the location of the&#xA;target element." ilk="function" line="2401" lineend="2404" name="moveToEl" signature="moveToEl(moveEl, targetEl)">
                <variable citdl="HTMLElement" doc="The element to move" ilk="argument" name="moveEl" />
                <variable citdl="HTMLElement" doc="The position reference element" ilk="argument" name="targetEl" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2402" name="aCoord" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Numeric array sort function" ilk="function" line="2411" lineend="2411" name="numericSort" signature="numericSort(a, b)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="b" />
                <variable citdl="DragDropMgr" name="this" />
              </scope>
              <variable attributes="private __static__" citdl="Number" doc="PRIVATE STATIC: Internal counter" line="2419" name="_timeoutCount" />
              <scope attributes="private __static__" doc="PRIVATE STATIC: Trying to make the load order less important.  Without this we get&#xA;an error if this file is loaded before the Event Utility." ilk="function" line="2428" lineend="2441" name="_addListeners" signature="_addListeners()">
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="Ext.dd.DDM" line="2429" name="DDM" />
              </scope>
              <scope attributes="__static__" doc="STATIC: Recursively searches the immediate parent and all child nodes for&#xA;the handle element in order to determine wheter or not it was&#xA;clicked." ilk="function" line="2451" lineend="2468" name="handleWasClicked" returns="Boolean" signature="handleWasClicked(node, id)">
                <variable doc="the html element to inspect" ilk="argument" name="node" />
                <variable ilk="argument" name="id" />
                <variable citdl="DragDropMgr" name="this" />
                <variable attributes="__local__ private" citdl="node.parentNode" line="2456" name="p" />
              </scope>
            </variable>
          </scope>
          <variable citdl="Ext.dd.DragDropMgr" line="2475" name="DDM" />
          <scope classrefs="Ext.dd.DragDrop" ilk="class" line="2492" lineend="2496" name="DD">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation where the linked element follows the&#xA;mouse cursor during a drag." ilk="function" line="2492" lineend="2496" name="DD" signature="DD(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DD:&#xA;scroll" ilk="argument" name="config" />
              <variable citdl="DD" name="this" />
            </scope>
            <variable citdl="Boolean" doc="When set to true, the utility automatically tries to scroll the browser&#xA;window when a drag and drop element is dragged near the viewport boundary.&#xA;Defaults to true." line="2507" name="scroll" />
            <scope doc="Sets the pointer offset to the distance between the linked element&apos;s top&#xA;left corner and the location the element was clicked" ilk="function" line="2516" lineend="2520" name="autoOffset" signature="autoOffset(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="iPageX" line="2517" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2518" name="y" />
            </scope>
            <scope doc="Sets the pointer offset.  You can call this directly to force the&#xA;offset to be in a particular location (e.g., pass in 0,0 to set it&#xA;to the center of the object)" ilk="function" line="2530" lineend="2533" name="setDelta" signature="setDelta(iDeltaX, iDeltaY)">
              <variable citdl="Number" doc="the distance from the left" ilk="argument" name="iDeltaX" />
              <variable citdl="Number" doc="the distance from the top" ilk="argument" name="iDeltaY" />
            </scope>
            <variable citdl="iDeltaX" line="2531" name="deltaX" />
            <variable citdl="iDeltaY" line="2532" name="deltaY" />
            <scope doc="Sets the drag element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2544" lineend="2550" name="setDragElPos" signature="setDragElPos(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2548" name="el" />
            </scope>
            <scope doc="Sets the element to the location of the mousedown or click event,&#xA;maintaining the cursor location relative to the location on the element&#xA;that was clicked.  Override this if you want to place the element in a&#xA;location other than where the cursor is." ilk="function" line="2562" lineend="2578" name="alignElWithMouse" returns="oCoord" signature="alignElWithMouse(el, iPageX, iPageY)">
              <variable citdl="HTMLElement" doc="the element to move" ilk="argument" name="el" />
              <variable citdl="Number" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getTargetCoord()" line="2563" name="oCoord" />
              <variable attributes="__local__ private" citdl="el.dom" line="2564" name="fly" />
              <variable attributes="__local__ private" citdl="Array" line="2566" name="aCoord" />
              <variable attributes="__local__ private" citdl="fly.getLeft()" line="2568" name="newLeft" />
              <variable attributes="__local__ private" citdl="fly.getTop()" line="2569" name="newTop" />
            </scope>
            <variable citdl="Array" line="2570" name="deltaSetXY" />
            <scope doc="Saves the most recent position so that we can reset the constraints and&#xA;tick marks on-demand.  We need to know this so that we can calculate the&#xA;number of pixels the element is offset from its original position." ilk="function" line="2590" lineend="2599" name="cachePosition" signature="cachePosition(iPageX, iPageY)">
              <variable doc="the current x position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageX" />
              <variable doc="the current y position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getXY()" line="2595" name="aCoord" />
            </scope>
            <variable citdl="iPageX" line="2592" name="lastPageX" />
            <variable citdl="iPageY" line="2593" name="lastPageY" />
            <scope attributes="private" doc="PRIVATE: Auto-scroll the window if the dragged object has been moved beyond the&#xA;visible window boundary." ilk="function" line="2611" lineend="2674" name="autoScroll" signature="autoScroll(x, y, h, w)">
              <variable citdl="Number" doc="the drag element&apos;s x position" ilk="argument" name="x" />
              <variable citdl="Number" doc="the drag element&apos;s y position" ilk="argument" name="y" />
              <variable citdl="Number" doc="the height of the drag element" ilk="argument" name="h" />
              <variable citdl="Number" doc="the width of the drag element" ilk="argument" name="w" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewHeight()" line="2615" name="clientH" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewWidth()" line="2618" name="clientW" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollTop()" line="2621" name="st" />
              <variable attributes="__local__ private" citdl="this.DDM.getScrollLeft()" line="2624" name="sl" />
              <variable attributes="__local__ private" citdl="h" line="2627" name="bot" />
              <variable attributes="__local__ private" citdl="w" line="2630" name="right" />
              <variable attributes="__local__ private" line="2635" name="toBot" />
              <variable attributes="__local__ private" line="2638" name="toRight" />
              <variable attributes="__local__ private" citdl="Number" line="2643" name="thresh" />
              <variable attributes="__local__ private" line="2648" name="scrAmt" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Finds the location the element should be placed if we want to move&#xA;it to where the mouse location less the click offset would place us." ilk="function" line="2685" lineend="2706" name="getTargetCoord" signature="getTargetCoord(iPageX, iPageY)">
              <variable citdl="Number" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="iPageX" line="2688" name="x" />
              <variable attributes="__local__ private" citdl="iPageY" line="2689" name="y" />
            </scope>
            <scope doc="Sets up config options specific to this class. Overrides&#xA;Ext.dd.DragDrop, but all versions of this method through the&#xA;inheritance chain are called" ilk="function" line="2713" lineend="2716" name="applyConfig" signature="applyConfig()" />
            <scope doc="Event that fires prior to the onMouseDown event.  Overrides&#xA;Ext.dd.DragDrop." ilk="function" line="2722" lineend="2726" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Event that fires prior to the onDrag event.  Overrides&#xA;Ext.dd.DragDrop." ilk="function" line="2732" lineend="2735" name="b4Drag" signature="b4Drag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2737" lineend="2739" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="Ext.dd.DD" ilk="class" line="2788" lineend="2793" name="DDProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="function" line="2788" lineend="2793" name="DDProxy" signature="DDProxy(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDProxy in addition to those in DragDrop:&#xA;resizeFrame, centerFrame, dragElId" ilk="argument" name="config" />
              <variable citdl="DDProxy" name="this" />
            </scope>
            <variable attributes="__static__" citdl="String" doc="STATIC: The default drag frame div id" line="2801" name="dragElId" />
            <variable citdl="Boolean" doc="By default we resize the drag frame to be the same size as the element&#xA;we want to drag (this is to get the frame effect).  We can turn it off&#xA;if we want a different behavior." line="2812" name="resizeFrame" />
            <variable citdl="Boolean" doc="By default the frame is positioned exactly where the drag element is, so&#xA;we use the cursor offset provided by Ext.dd.DD.  Another option that works only if&#xA;you do not have constraints on the obj is to have the drag frame centered&#xA;around the cursor.  Set centerFrame to true for this effect." line="2822" name="centerFrame" />
            <scope doc="Creates the proxy element if it does not yet exist" ilk="function" line="2828" lineend="2855" name="createFrame" signature="createFrame()">
              <variable attributes="__local__ private" citdl="this" line="2829" name="self" />
              <variable attributes="__local__ private" citdl="document.body" line="2830" name="body" />
              <scope attributes="__local__ private" ilk="function" line="2833" lineend="2833" name="(anonymous)" signature="(anonymous)()" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2837" name="div" />
              <variable attributes="__local__ private" citdl="div.style" line="2842" name="s" />
            </scope>
            <scope doc="Initialization for the drag frame element.  Must be called in the&#xA;constructor of all subclasses" ilk="function" line="2862" lineend="2864" name="initFrame" signature="initFrame()" />
            <scope ilk="function" line="2866" lineend="2872" name="applyConfig" signature="applyConfig()" />
            <scope attributes="private" doc="PRIVATE: Resizes the drag frame to the dimensions of the clicked object, positions&#xA;it over the object, and finally displays it" ilk="function" line="2882" lineend="2897" name="showFrame" signature="showFrame(iPageX, iPageY)">
              <variable citdl="Number" doc="X click position" ilk="argument" name="iPageX" />
              <variable citdl="Number" doc="Y click position" ilk="argument" name="iPageY" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2883" name="el" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2884" name="dragEl" />
              <variable attributes="__local__ private" citdl="dragEl.style" line="2885" name="s" />
            </scope>
            <scope attributes="private" doc="PRIVATE: The proxy is automatically resized to the dimensions of the linked&#xA;element when a drag is initiated, unless resizeFrame is set to false" ilk="function" line="2905" lineend="2910" name="_resizeProxy" signature="_resizeProxy()">
              <variable attributes="__local__ private" citdl="this.getEl()" line="2907" name="el" />
            </scope>
            <scope ilk="function" line="2913" lineend="2918" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getPageX()" line="2914" name="x" />
              <variable attributes="__local__ private" citdl="e.getPageY()" line="2915" name="y" />
            </scope>
            <scope ilk="function" line="2921" lineend="2924" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" line="2927" lineend="2929" name="b4EndDrag" signature="b4EndDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="2934" lineend="2951" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.getEl()" line="2936" name="lel" />
              <variable attributes="__local__ private" citdl="this.getDragEl()" line="2937" name="del" />
            </scope>
            <scope ilk="function" line="2953" lineend="2955" name="beforeMove" signature="beforeMove()" />
            <scope ilk="function" line="2957" lineend="2959" name="afterDrag" signature="afterDrag()" />
            <scope ilk="function" line="2961" lineend="2963" name="toString" signature="toString()" />
          </scope>
          <scope classrefs="Ext.dd.DragDrop" ilk="class" line="2981" lineend="2985" name="DDTarget">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A DragDrop implementation that does not move, but can be a drop&#xA;target.  You would get the same result by simply omitting implementation&#xA;for the event callbacks, but this way we reduce the processing cost of the&#xA;event listener and the callbacks." ilk="function" line="2981" lineend="2985" name="DDTarget" signature="DDTarget(id, sGroup, config)">
              <variable citdl="String" doc="the id of the element that is a drop target" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="Object" doc="an object containing configurable attributes&#xA;Valid properties for DDTarget in addition to those in&#xA;DragDrop:&#xA;none" ilk="argument" name="config" />
              <variable citdl="DDTarget" name="this" />
            </scope>
            <scope ilk="function" line="2989" lineend="2991" name="toString" signature="toString()" />
          </scope>
        </variable>
        <variable citdl="Object" line="14" name="tree">
          <scope classrefs="Object" ilk="class" line="7" lineend="169" name="TreeEventModel">
            <scope attributes="__ctor__" ilk="function" line="7" lineend="10" name="TreeEventModel" signature="TreeEventModel(tree)">
              <variable ilk="argument" name="tree" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="tree" line="8" name="tree" />
            <scope ilk="function" line="13" lineend="22" name="initEvents" signature="initEvents()">
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="this.tree.getTreeEl()" line="14" name="el" />
            </scope>
            <scope ilk="function" line="24" lineend="33" name="getNode" signature="getNode(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" line="25" name="t" />
              <variable attributes="__local__ private" citdl="Ext.fly().getAttribute()" line="27" name="id" />
            </scope>
            <scope ilk="function" line="35" lineend="41" name="getNodeTarget" returns="t" signature="getNodeTarget(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="36" name="t" />
            </scope>
            <scope ilk="function" line="43" lineend="57" name="delegateOut" signature="delegateOut(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
              <variable attributes="__local__ private" citdl="this.getNode()" line="48" name="n" />
            </scope>
            <scope ilk="function" line="59" lineend="78" name="delegateOver" signature="delegateOver(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="65" name="trackingDoc" />
            <variable citdl="this.getNode()" line="72" name="lastEcOver" />
            <scope ilk="function" line="80" lineend="87" name="trackExit" signature="trackExit(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="89" lineend="103" name="delegateClick" signature="delegateClick(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="105" lineend="109" name="delegateDblClick" signature="delegateDblClick(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="111" lineend="115" name="delegateContextMenu" signature="delegateContextMenu(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="117" lineend="119" name="onNodeClick" signature="onNodeClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="121" lineend="124" name="onNodeOver" signature="onNodeOver(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="Node" line="122" name="lastOverNode" />
            <scope ilk="function" line="126" lineend="128" name="onNodeOut" signature="onNodeOut(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="130" lineend="132" name="onIconOver" signature="onIconOver(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="134" lineend="136" name="onIconOut" signature="onIconOut(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="138" lineend="140" name="onIconClick" signature="onIconClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="142" lineend="144" name="onCheckboxClick" signature="onCheckboxClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="146" lineend="148" name="onNodeDblClick" signature="onNodeDblClick(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="150" lineend="152" name="onNodeContextMenu" signature="onNodeContextMenu(e, node)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="154" lineend="160" name="beforeEvent" returns="Boolean" signature="beforeEvent(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <scope ilk="function" line="162" lineend="164" name="disable" signature="disable()">
              <variable citdl="TreeEventModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="163" name="disabled" />
            <scope ilk="function" line="166" lineend="168" name="enable" signature="enable()">
              <variable citdl="TreeEventModel" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="12" lineend="36" name="DefaultSelectionModel">
            <scope attributes="__ctor__" doc="The default single selection for a TreePanel." ilk="function" line="12" lineend="36" name="DefaultSelectionModel" signature="DefaultSelectionModel(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DefaultSelectionModel" name="this" />
            </scope>
            <scope ilk="function" line="39" lineend="43" name="init" signature="init(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <variable citdl="tree" line="40" name="tree" />
            <scope ilk="function" line="45" lineend="47" name="onNodeClick" signature="onNodeClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Select a node." ilk="function" line="54" lineend="67" name="select" returns="TreeNode" signature="select(node)">
              <variable citdl="TreeNode" doc="The node to select" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.selNode" line="55" name="last" />
            </scope>
            <variable citdl="Node" line="62" name="selNode" />
            <scope doc="Deselect a node." ilk="function" line="73" lineend="77" name="unselect" signature="unselect(node)">
              <variable citdl="TreeNode" doc="The node to unselect" ilk="argument" name="node" />
            </scope>
            <scope doc="Clear all selections" ilk="function" line="82" lineend="90" name="clearSelections" returns="n" signature="clearSelections()">
              <variable attributes="__local__ private" citdl="this.selNode" line="83" name="n" />
            </scope>
            <scope doc="Get the selected node" ilk="function" line="96" lineend="98" name="getSelectedNode" returns="TreeNode" signature="getSelectedNode()" />
            <scope doc="Returns true if the node is selected" ilk="function" line="105" lineend="107" name="isSelected" returns="Boolean" signature="isSelected(node)">
              <variable citdl="TreeNode" doc="The node to check" ilk="argument" name="node" />
            </scope>
            <scope doc="Selects the node above the selected node in the tree, intelligently walking the nodes" ilk="function" line="113" lineend="133" name="selectPrevious" signature="selectPrevious()">
              <variable attributes="__local__ private" citdl="this.selNode" line="114" name="s" />
              <variable attributes="__local__ private" citdl="s.previousSibling" line="118" name="ps" />
              <variable attributes="__local__ private" citdl="ps.lastChild" line="123" name="lc" />
            </scope>
            <scope doc="Selects the node above the selected node in the tree, intelligently walking the nodes" ilk="function" line="139" lineend="159" name="selectNext" signature="selectNext()">
              <variable attributes="__local__ private" citdl="this.selNode" line="140" name="s" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree().selModel.select()" line="149" name="newS" />
              <scope attributes="__local__ private" ilk="function" line="150" lineend="155" name="(anonymous)" returns="Boolean" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="161" lineend="197" name="onKeyDown" signature="onKeyDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.selNode" line="162" name="s" />
              <variable attributes="__local__ private" citdl="this" line="164" name="sm" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="168" name="k" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="13" lineend="114" name="TreeFilter">
            <scope attributes="__ctor__" doc="Note this class is experimental and doesn&apos;t update the indent (lines) or expand collapse icons of the nodes" ilk="function" line="13" lineend="17" name="TreeFilter" signature="TreeFilter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="config" />
              <variable citdl="TreeFilter" name="this" />
            </scope>
            <variable citdl="tree" line="14" name="tree" />
            <variable citdl="Object" line="15" lineend="112" name="filtered" />
            <variable citdl="Boolean" line="20" name="clearBlank" />
            <variable citdl="Boolean" line="21" name="reverse" />
            <variable citdl="Boolean" line="22" name="autoClear" />
            <variable citdl="Boolean" line="23" name="remove" />
            <scope doc="Filter the data by a specific attribute." ilk="function" line="32" lineend="54" name="filter" signature="filter(value, attr, startNode)">
              <variable citdl="String/RegExp" doc="Either string that the attribute value&#xA;should start with or a RegExp to test against the attribute" ilk="argument" name="value" />
              <variable citdl="String" doc="(optional) The attribute passed in your node&apos;s attributes collection. Defaults to &quot;text&quot;." ilk="argument" name="attr" />
              <variable citdl="TreeNode" doc="(optional) The node to start the filter at." ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" line="34" name="f" />
              <variable attributes="__local__ private" citdl="value.length" line="36" name="vlen" />
              <scope attributes="__local__ private" ilk="function" line="47" lineend="49" name="f" returns="value.test()" signature="f(n)">
                <variable ilk="argument" name="n" />
              </scope>
            </scope>
            <scope doc="Filter by a function. The passed function will be called with each&#xA;node in the tree (or from the startNode). If the function returns true, the node is kept&#xA;otherwise it is filtered. If a node is filtered, its children are also filtered." ilk="function" line="63" lineend="95" name="filterBy" signature="filterBy(fn, scope, startNode)">
              <variable citdl="Function" doc="The filter function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to the current node)" ilk="argument" name="scope" />
              <variable citdl="startNode" ilk="argument" name="startNode" />
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.reverse" line="68" name="rv" />
              <variable attributes="__local__ private" citdl="this.filtered" line="68" name="af" />
              <scope attributes="__local__ private" ilk="function" line="69" lineend="83" name="f" returns="Boolean" signature="f(n)">
                <variable ilk="argument" name="n" />
                <variable attributes="__local__ private" citdl="fn.call()" line="76" name="m" />
              </scope>
              <variable attributes="__local__ private" citdl="af[id]" line="88" name="n" />
            </scope>
            <scope doc="Clears the current filter. Note: with the &quot;remove&quot; option&#xA;set a filter cannot be cleared." ilk="function" line="101" lineend="113" name="clear" signature="clear()">
              <variable citdl="TreeFilter" name="this" />
              <variable attributes="__local__ private" citdl="this.tree" line="102" name="t" />
              <variable attributes="__local__ private" citdl="this.filtered" line="103" name="af" />
              <variable attributes="__local__ private" citdl="af[id]" line="106" name="n" />
            </scope>
          </scope>
          <scope classrefs="Ext.tree.TreeNode" ilk="class" line="14" lineend="34" name="AsyncTreeNode">
            <scope attributes="__ctor__" ilk="function" line="14" lineend="34" name="AsyncTreeNode" signature="AsyncTreeNode(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="AsyncTreeNode" name="this" />
            </scope>
            <variable citdl="config" line="15" name="loaded" />
            <variable citdl="Boolean" line="16" name="loading" />
            <scope ilk="function" line="36" lineend="61" name="expand" signature="expand(deep, anim, callback, scope)">
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="anim" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="setInterval()" line="38" name="timer" />
              <scope attributes="__local__ private" ilk="function" line="39" lineend="44" name="f" signature="f()" />
              <variable attributes="__local__ private" citdl="this.loader" line="54" name="loader" />
            </scope>
            <scope doc="Returns true if this node is currently loading" ilk="function" line="67" lineend="69" name="isLoading" returns="Boolean" signature="isLoading()" />
            <scope ilk="function" line="71" lineend="77" name="loadComplete" signature="loadComplete(deep, anim, callback, scope)">
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="anim" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
            </scope>
            <scope doc="Returns true if this node has been loaded" ilk="function" line="83" lineend="85" name="isLoaded" returns="Boolean" signature="isLoaded()" />
            <scope ilk="function" line="87" lineend="93" name="hasChildNodes" returns="Ext.tree.AsyncTreeNode.superclass.hasChildNodes.call()" signature="hasChildNodes()" />
            <scope doc="Trigger a reload for this node" ilk="function" line="100" lineend="111" name="reload" signature="reload(callback, scope)">
              <variable citdl="Function" ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
            </scope>
            <variable citdl="Boolean" line="105" name="childrenRendered" />
            <variable citdl="Boolean" line="108" name="expanded" />
          </scope>
          <scope classrefs="Ext.dd.DragZone" ilk="class" line="15" lineend="82" name="TreeDragZone">
            <scope attributes="__ctor__" ilk="function" line="15" lineend="23" name="TreeDragZone" signature="TreeDragZone(tree, config)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="config" />
              <variable citdl="TreeDragZone" name="this" />
            </scope>
            <variable citdl="Ext.tree.TreePanel" doc="The TreePanel for this drag zone" line="22" name="tree" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to &apos;TreeDD&apos;)." line="31" name="ddGroup" />
            <scope ilk="function" line="34" lineend="37" name="onBeforeDrag" returns="n" signature="onBeforeDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="data.node" line="35" name="n" />
            </scope>
            <scope ilk="function" line="40" lineend="47" name="onInitDrag" signature="onInitDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.dragData" line="41" name="data" />
            </scope>
            <scope ilk="function" line="50" lineend="52" name="getRepairXY" returns="data.node.ui.getDDRepairXY()" signature="getRepairXY(e, data)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="55" lineend="58" name="onEndDrag" signature="onEndDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="61" lineend="64" name="onValidDrop" signature="onValidDrop(dd, e, id)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="67" lineend="72" name="beforeInvalidDrop" signature="beforeInvalidDrop(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.tree.getSelectionModel()" line="69" name="sm" />
            </scope>
            <scope ilk="function" line="75" lineend="80" name="afterRepair" signature="afterRepair()" />
            <variable citdl="Boolean" line="79" name="dragging" />
          </scope>
          <scope classrefs="Ext.dd.DropZone" ilk="class" line="16" lineend="321" name="TreeDropZone">
            <scope attributes="__ctor__" ilk="function" line="16" lineend="50" name="TreeDropZone" signature="TreeDropZone(tree, config)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="config" />
              <variable citdl="TreeDropZone" name="this" />
            </scope>
            <variable citdl="config.allowParentInsert" doc="Allow inserting a dragged node between an expanded parent node and its first child that will become a&#xA;sibling of the parent when dropped (defaults to false)" line="22" name="allowParentInsert" />
            <variable citdl="config.allowContainerDrop" doc="True if drops on the tree container (outside of a specific tree node) are allowed (defaults to false)" line="27" name="allowContainerDrop" />
            <variable citdl="config.appendOnly" doc="True if the tree should only allow append drops (use for trees which are sorted, defaults to false)" line="32" name="appendOnly" />
            <variable citdl="Ext.tree.TreePanel" doc="The TreePanel for this drop zone" line="40" name="tree" />
            <variable citdl="Ext.tree.TreePanel" doc="Arbitrary data that can be associated with this tree and will be included in the event object that gets&#xA;passed to any nodedragover event handler (defaults to {})" line="47" lineend="47" name="dragOverData" />
            <variable citdl="String" line="49" name="lastInsertClass" />
            <variable citdl="String" doc="A named drag drop group to which this object belongs.  If a group is specified, then this object will only&#xA;interact with other drag drop objects in the same group (defaults to &apos;TreeDD&apos;)." line="58" name="ddGroup" />
            <variable citdl="Number" doc="The delay in milliseconds to wait before expanding a target tree node while dragging a droppable node&#xA;over the target (defaults to 1000)" line="65" name="expandDelay" />
            <scope ilk="function" line="68" lineend="72" name="expandNode" signature="expandNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="75" lineend="77" name="queueExpand" signature="queueExpand(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <variable citdl="this.expandNode.defer()" line="76" name="expandProcId" />
            <scope ilk="function" line="80" lineend="85" name="cancelExpand" signature="cancelExpand()" />
            <scope ilk="function" line="88" lineend="117" name="isValidDropPoint" returns="overEvent.cancel" signature="isValidDropPoint(n, pt, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="pt" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="n.node" line="90" name="targetNode" />
              <variable attributes="__local__ private" citdl="data.node" line="91" name="dropNode" />
              <variable attributes="__local__ private" citdl="this.dragOverData" line="106" name="overEvent" />
              <variable attributes="__local__ private" citdl="this.tree.fireEvent()" line="115" name="result" />
            </scope>
            <scope ilk="function" line="120" lineend="144" name="getDropPoint" returns="String" signature="getDropPoint(e, n, dd)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable attributes="__local__ private" citdl="n.node" line="121" name="tn" />
              <variable attributes="__local__ private" citdl="n.ddel" line="125" name="dragEl" />
              <variable attributes="__local__ private" citdl="t" line="126" name="b" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getY()" line="126" name="t" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getPageY()" line="127" name="y" />
              <variable attributes="__local__ private" citdl="tn.allowChildren" line="128" name="noAppend" />
              <variable attributes="__local__ private" citdl="Boolean" line="132" name="noBelow" />
              <variable attributes="__local__ private" line="136" name="q" />
            </scope>
            <scope ilk="function" line="147" lineend="149" name="onNodeEnter" signature="onNodeEnter(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="151" lineend="156" name="onContainerOver" returns="this.dropNotAllowed" signature="onContainerOver(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="159" lineend="193" name="onNodeOver" returns="returnCls" signature="onNodeOver(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getDropPoint()" line="160" name="pt" />
              <variable attributes="__local__ private" citdl="n.node" line="161" name="node" />
              <variable attributes="__local__ private" citdl="this.dropNotAllowed" line="171" name="returnCls" />
              <variable attributes="__local__ private" citdl="n.ddel" line="174" name="el" />
              <variable attributes="__local__ private" citdl="String" line="175" name="cls" />
            </scope>
            <scope ilk="function" line="196" lineend="199" name="onNodeOut" signature="onNodeOut(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="202" lineend="213" name="onNodeDrop" returns="this.processDrop()" signature="onNodeDrop(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.getDropPoint()" line="203" name="point" />
              <variable attributes="__local__ private" citdl="n.node" line="204" name="targetNode" />
              <variable attributes="__local__ private" citdl="data.node" line="211" name="dropNode" />
            </scope>
            <scope ilk="function" line="215" lineend="223" name="onContainerDrop" returns="Boolean" signature="onContainerDrop(dd, e, data)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="this.tree.getRootNode()" line="217" name="targetNode" />
              <variable attributes="__local__ private" citdl="data.node" line="219" name="dropNode" />
            </scope>
            <scope ilk="function" line="226" lineend="253" name="processDrop" returns="Boolean" signature="processDrop(target, data, point, dd, e, dropNode)">
              <variable citdl="dropEvent.target" ilk="argument" name="target" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="point" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="dropNode" />
              <variable attributes="__local__ private" citdl="Object" line="227" lineend="237" name="dropEvent">
                <variable citdl="this.tree" line="228" name="tree" />
                <variable citdl="target" line="229" name="target" />
                <variable citdl="data" line="230" name="data" />
                <variable citdl="point" line="231" name="point" />
                <variable citdl="dd" line="232" name="source" />
                <variable citdl="e" line="233" name="rawEvent" />
                <variable citdl="dropNode" line="234" name="dropNode" />
                <variable line="235" name="cancel" />
                <variable citdl="Boolean" line="236" name="dropStatus" />
              </variable>
              <variable attributes="__local__ private" citdl="this.tree.fireEvent()" line="238" name="retval" />
              <scope attributes="__local__ private" ilk="function" line="246" lineend="248" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="256" lineend="278" name="completeDrop" signature="completeDrop(de)">
              <variable ilk="argument" name="de" />
              <variable attributes="__local__ private" citdl="de.point" line="257" name="p" />
              <variable attributes="__local__ private" citdl="de.dropNode" line="257" name="ns" />
              <variable attributes="__local__ private" citdl="de.target" line="257" name="t" />
              <variable attributes="__local__ private" citdl="ns[i]" line="261" name="n" />
            </scope>
            <scope ilk="function" line="281" lineend="287" name="afterNodeMoved" signature="afterNodeMoved(dd, data, e, targetNode, dropNode)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="targetNode" />
              <variable ilk="argument" name="dropNode" />
            </scope>
            <scope ilk="function" line="290" lineend="292" name="getTree" returns="this.tree" signature="getTree()" />
            <scope ilk="function" line="295" lineend="304" name="removeDropIndicators" signature="removeDropIndicators(n)">
              <variable ilk="argument" name="n" />
              <variable attributes="__local__ private" citdl="n.ddel" line="297" name="el" />
            </scope>
            <scope ilk="function" line="307" lineend="310" name="beforeDragDrop" returns="Boolean" signature="beforeDragDrop(target, e, id)">
              <variable ilk="argument" name="target" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="313" lineend="318" name="afterRepair" signature="afterRepair(data)">
              <variable ilk="argument" name="data" />
            </scope>
          </scope>
          <scope classrefs="Ext.Editor" ilk="class" line="18" lineend="30" name="TreeEditor">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides editor functionality for inline tree node editing.  Any valid {@link Ext.form.Field} subclass can be used&#xA;as the editor field." ilk="function" line="18" lineend="30" name="TreeEditor" signature="TreeEditor(tree, fc, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="fc" ilk="argument" name="fc" />
              <variable citdl="Object" doc="(optional) A TreeEditor config object" ilk="argument" name="config" />
              <variable citdl="TreeEditor" name="this" />
              <variable attributes="__local__ private" citdl="fc.events" line="20" name="field" />
            </scope>
            <variable citdl="tree" line="23" name="tree" />
            <variable citdl="String" doc="The position to align to (see {@link Ext.Element#alignTo} for more details, defaults to &quot;l-l&quot;)." line="37" name="alignment" />
            <variable citdl="Boolean" line="39" name="autoSize" />
            <variable citdl="Boolean" doc="True to hide the bound element while the editor is displayed (defaults to false)" line="44" name="hideEl" />
            <variable citdl="String" doc="CSS class to apply to the editor (defaults to &quot;x-small-editor x-tree-editor&quot;)" line="49" name="cls" />
            <variable citdl="Boolean" doc="True to shim the editor if selects/iframes could be displayed beneath it (defaults to false)" line="54" name="shim" />
            <variable citdl="String" line="56" name="shadow" />
            <variable citdl="Number" doc="The maximum width in pixels of the editor field (defaults to 250).  Note that if the maxWidth would exceed&#xA;the containing tree element&apos;s size, it will be automatically limited for you to the container width, taking&#xA;scroll and client offsets into account prior to each edit." line="63" name="maxWidth" />
            <variable citdl="Number" doc="editing on the current node (defaults to 350).  If two clicks occur on the same node within this time span,&#xA;the editor for the node will display, otherwise it will be processed as a regular click." line="69" name="editDelay" />
            <scope ilk="function" line="71" lineend="78" name="initEditor" signature="initEditor(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <scope ilk="function" line="81" lineend="90" name="fitToTree" signature="fitToTree(ed, el)">
              <variable ilk="argument" name="ed" />
              <variable ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="this.tree.getTreeEl().dom" line="82" name="td" />
              <variable attributes="__local__ private" citdl="el.dom" line="82" name="nd" />
              <variable attributes="__local__ private" citdl="Math.min()" line="88" name="w" />
            </scope>
            <scope doc="Edit the text of the passed {@link Ext.tree.TreeNode TreeNode}." ilk="function" line="96" lineend="115" name="triggerEdit" returns="Boolean" signature="triggerEdit(node, defer)">
              <variable citdl="Ext.tree.TreeNode" doc="The TreeNode to edit. The TreeNode must be {@link Ext.tree.TreeNode#editable editable}." ilk="argument" name="node" />
              <variable ilk="argument" name="defer" />
              <variable attributes="__local__ private" citdl="node.text" line="108" name="value" />
            </scope>
            <variable citdl="Ext.tree.TreeNode" doc="The {@link Ext.tree.TreeNode TreeNode} this editor is bound to. Read-only." line="104" name="editNode" />
            <variable citdl="this.startEdit.defer()" line="112" name="autoEditTimer" />
            <scope ilk="function" line="118" lineend="120" name="bindScroll" signature="bindScroll()" />
            <scope ilk="function" line="123" lineend="129" name="beforeNodeClick" returns="this.triggerEdit()" signature="beforeNodeClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="131" lineend="133" name="onNodeDblClick" signature="onNodeDblClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="136" lineend="139" name="updateNode" signature="updateNode(ed, value)">
              <variable ilk="argument" name="ed" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="142" lineend="147" name="onHide" signature="onHide()" />
            <scope ilk="function" line="150" lineend="159" name="onSpecialKey" signature="onSpecialKey(field, e)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="151" name="k" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="20" lineend="611" name="TreeNodeUI">
            <scope attributes="__ctor__" doc="This class provides the default UI implementation for Ext TreeNodes.&#xA;The TreeNode UI implementation is separate from the&#xA;tree implementation, and allows customizing of the appearance of&#xA;tree nodes.&#xA;&#xA;If you are customizing the Tree&apos;s user interface, you&#xA;may need to extend this class, but you should never need to instantiate this class.&#xA;&#xA;This class provides access to the user interface components of an Ext TreeNode, through&#xA;{@link Ext.tree.TreeNode#getUI}" ilk="function" line="20" lineend="27" name="TreeNodeUI" signature="TreeNodeUI(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Node" line="21" name="node" />
            <variable citdl="Boolean" line="22" name="rendered" />
            <variable citdl="Boolean" line="23" name="animating" />
            <variable citdl="Boolean" line="24" name="wasLeaf" />
            <variable citdl="String" line="25" name="ecc" />
            <variable citdl="Ext.BLANK_IMAGE_URL" line="26" name="emptyIcon" />
            <scope ilk="function" line="31" lineend="35" name="removeChild" signature="removeChild(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="38" lineend="40" name="beforeLoad" signature="beforeLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="43" lineend="45" name="afterLoad" signature="afterLoad()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="48" lineend="52" name="onTextChange" signature="onTextChange(node, text, oldText)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="text" />
              <variable ilk="argument" name="oldText" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="55" lineend="65" name="onDisableChange" signature="onDisableChange(node, state)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="state" line="56" name="disabled" />
            <scope ilk="function" line="68" lineend="76" name="onSelectedChange" signature="onSelectedChange(state)">
              <variable ilk="argument" name="state" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="79" lineend="96" name="onMove" signature="onMove(tree, node, oldParent, newParent, index, refNode)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="oldParent" />
              <variable ilk="argument" name="newParent" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="refNode" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="newParent.ui.getContainer()" line="82" name="targetNode" />
              <variable attributes="__local__ private" citdl="refNode" line="88" name="insertBefore" />
            </scope>
            <variable citdl="buf.join()" line="80" name="childIndent" />
            <variable citdl="document.createElement()" line="84" name="holder" />
            <scope doc="Adds one or more CSS classes to the node&apos;s UI element.&#xA;Duplicate classes are automatically filtered out." ilk="function" line="103" lineend="107" name="addClass" signature="addClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Removes one or more CSS classes from the node&apos;s UI element." ilk="function" line="113" lineend="117" name="removeClass" signature="removeClass(cls)">
              <variable ilk="argument" name="cls" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="120" lineend="125" name="remove" signature="remove()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="128" lineend="130" name="fireEvent" returns="this.node.fireEvent.apply()" signature="fireEvent()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="133" lineend="154" name="initEvents" signature="initEvents()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="145" name="ot" />
              <variable attributes="__local__ private" citdl="ot.enableDD" line="146" name="dd" />
            </scope>
            <scope ilk="function" line="157" lineend="159" name="getDDHandles" returns="Array" signature="getDDHandles()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Hides this node." ilk="function" line="164" lineend="169" name="hide" signature="hide()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Shows this node." ilk="function" line="174" lineend="179" name="show" signature="show()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="182" lineend="188" name="onContextMenu" signature="onContextMenu(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="191" lineend="217" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="e.getTarget()" line="197" name="a" />
            </scope>
            <scope ilk="function" line="220" lineend="232" name="onDblClick" signature="onDblClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="234" lineend="236" name="onOver" signature="onOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="238" lineend="240" name="onOut" signature="onOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="243" lineend="249" name="onCheckChange" signature="onCheckChange()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox.checked" line="244" name="checked" />
            </scope>
            <scope ilk="function" line="252" lineend="256" name="ecClick" signature="ecClick(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="259" lineend="261" name="startDrop" signature="startDrop()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <variable citdl="Boolean" line="260" name="dropping" />
            <scope ilk="function" line="264" lineend="268" name="endDrop" signature="endDrop()">
              <variable citdl="TreeNodeUI" name="this" />
              <scope attributes="__local__ private" ilk="function" line="265" lineend="267" name="(anonymous)" signature="(anonymous)()">
                <variable citdl="Boolean" line="266" name="dropping" />
              </scope>
            </scope>
            <scope ilk="function" line="271" lineend="274" name="expand" signature="expand()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="277" lineend="289" name="focus" signature="focus()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree().getTreeEl().dom" line="283" name="noscroll" />
              <variable attributes="__local__ private" citdl="noscroll.scrollLeft" line="284" name="l" />
            </scope>
            <scope doc="Sets the checked status of the tree node to the passed value, or, if no value was passed,&#xA;toggles the checked status. If the node was rendered with no checkbox, this has no effect." ilk="function" line="296" lineend="302" name="toggleCheck" signature="toggleCheck(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.checkbox" line="297" name="cb" />
            </scope>
            <scope ilk="function" line="305" lineend="309" name="blur" signature="blur()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="312" lineend="332" name="animExpand" signature="animExpand(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="313" name="ct" />
            </scope>
            <scope ilk="function" line="335" lineend="341" name="highlight" signature="highlight()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node.getOwnerTree()" line="336" name="tree" />
            </scope>
            <scope ilk="function" line="344" lineend="347" name="collapse" signature="collapse()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="350" lineend="366" name="animCollapse" signature="animCollapse(callback)">
              <variable ilk="argument" name="callback" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Ext.get()" line="351" name="ct" />
            </scope>
            <scope ilk="function" line="369" lineend="371" name="getContainer" returns="this.ctNode" signature="getContainer()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="374" lineend="376" name="getEl" returns="this.wrap" signature="getEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="379" lineend="381" name="appendDDGhost" signature="appendDDGhost(ghostNode)">
              <variable ilk="argument" name="ghostNode" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="384" lineend="386" name="getDDRepairXY" returns="Ext.lib.Dom.getXY()" signature="getDDRepairXY()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="389" lineend="391" name="onRender" signature="onRender()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="394" lineend="429" name="render" signature="render(bulkRender)">
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="n.attributes" line="395" name="a" />
              <variable attributes="__local__ private" citdl="this.node" line="395" name="n" />
              <variable attributes="__local__ private" citdl="n.parentNode" line="396" name="targetNode" />
            </scope>
            <scope ilk="function" line="432" lineend="471" name="renderElements" signature="renderElements(n, a, targetNode, bulkRender)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="a" />
              <variable ilk="argument" name="targetNode" />
              <variable ilk="argument" name="bulkRender" />
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" line="436" name="cb" />
              <variable attributes="__local__ private" citdl="a.href" line="438" name="href" />
              <variable attributes="__local__ private" citdl="Array" line="447" name="buf" />
              <variable attributes="__local__ private" line="449" name="nel" />
              <variable attributes="__local__ private" citdl="this.elNode.childNodes" line="458" name="cs" />
              <variable attributes="__local__ private" citdl="Number" line="462" name="index" />
            </scope>
            <variable citdl="n.parentNode" line="434" name="indentMarkup" />
            <variable citdl="Ext.DomHelper.insertHtml()" line="451" name="wrap" />
            <variable citdl="this.wrap.childNodes[0]" line="456" name="elNode" />
            <variable citdl="this.wrap.childNodes[1]" line="457" name="ctNode" />
            <variable citdl="cs[0]" line="459" name="indentNode" />
            <variable citdl="cs[1]" line="460" name="ecNode" />
            <variable citdl="cs[2]" line="461" name="iconNode" />
            <variable citdl="cs[3]" line="464" name="checkbox" />
            <variable citdl="cs[index]" line="469" name="anchor" />
            <variable citdl="cs[index].firstChild" line="470" name="textNode" />
            <scope doc="Returns the &amp;lt;a&gt; element that provides focus for the node&apos;s UI." ilk="function" line="477" lineend="479" name="getAnchor" returns="HTMLElement" signature="getAnchor()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the text node." ilk="function" line="485" lineend="487" name="getTextEl" returns="HtmlNode" signature="getTextEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the icon &amp;lt;img&gt; element." ilk="function" line="493" lineend="495" name="getIconEl" returns="HTMLElement" signature="getIconEl()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope doc="Returns the checked status of the node. If the node was rendered with no&#xA;checkbox, it returns false." ilk="function" line="502" lineend="504" name="isChecked" returns="Boolean" signature="isChecked()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="507" lineend="544" name="updateExpandIcon" signature="updateExpandIcon()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="this.node" line="509" name="n" />
              <variable attributes="__local__ private" citdl="String" line="509" name="c2" />
              <variable attributes="__local__ private" citdl="String" line="509" name="c1" />
              <variable attributes="__local__ private" citdl="n.isLast()" line="510" name="cls" />
              <variable attributes="__local__ private" citdl="n.hasChildNodes()" line="511" name="hasChild" />
              <variable attributes="__local__ private" citdl="String" line="538" name="ecc" />
            </scope>
            <variable citdl="c2" line="528" name="c2" />
            <variable citdl="c1" line="528" name="c1" />
            <scope ilk="function" line="547" lineend="551" name="onIdChange" signature="onIdChange(id)">
              <variable ilk="argument" name="id" />
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
            <scope ilk="function" line="554" lineend="571" name="getChildIndent" returns="this.childIndent" signature="getChildIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="556" name="buf" />
              <variable attributes="__local__ private" citdl="this.node" line="557" name="p" />
            </scope>
            <scope ilk="function" line="574" lineend="587" name="renderIndent" signature="renderIndent()">
              <variable citdl="TreeNodeUI" name="this" />
              <variable attributes="__local__ private" citdl="String" line="576" name="indent" />
              <variable attributes="__local__ private" citdl="this.node.parentNode" line="577" name="p" />
            </scope>
            <scope ilk="function" line="589" lineend="610" name="destroy" signature="destroy()">
              <variable citdl="TreeNodeUI" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="26" lineend="106" name="TreeSorter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides sorting of nodes in a {@link Ext.tree.TreePanel}.  The TreeSorter automatically monitors events on the&#xA;associated TreePanel that might affect the tree&apos;s sort order (beforechildrenrendered, append, insert and textchange).&#xA;Example usage:&#xA;&#xA;new Ext.tree.TreeSorter(myTree, {&#xA;folderSort: true,&#xA;dir: &quot;desc&quot;,&#xA;sortType: function(node) {&#xA;// sort by a custom, typed attribute:&#xA;return parseInt(node.id, 10);&#xA;});" ilk="function" line="26" lineend="83" name="TreeSorter" signature="TreeSorter(tree, config)">
              <variable citdl="TreePanel" ilk="argument" name="tree" />
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="this.dir" line="57" name="dsc" />
              <variable attributes="__local__ private" citdl="this.property" line="58" name="p" />
              <variable attributes="__local__ private" citdl="this.sortType" line="59" name="sortType" />
              <variable attributes="__local__ private" citdl="this.folderSort" line="60" name="fs" />
              <variable attributes="__local__ private" citdl="this.caseSensitive" line="61" name="cs" />
              <variable attributes="__local__ private" citdl="this.leafAttr" line="62" name="leafAttr" />
            </scope>
            <variable attributes="__local__ private" line="61" name="caseSensitive" />
            <scope ilk="function" line="64" lineend="82" name="sortFn" returns="Number" signature="sortFn(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="sortType" line="73" name="v1" />
              <variable attributes="__local__ private" citdl="sortType" line="74" name="v2" />
            </scope>
            <scope ilk="function" line="86" lineend="88" name="doSort" signature="doSort(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="90" lineend="92" name="compareNodes" signature="compareNodes(n1, n2)">
              <variable ilk="argument" name="n1" />
              <variable ilk="argument" name="n2" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="94" lineend="98" name="updateSort" signature="updateSort(tree, node)">
              <variable ilk="argument" name="tree" />
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
            </scope>
            <scope ilk="function" line="100" lineend="105" name="updateSortParent" signature="updateSortParent(node)">
              <variable ilk="argument" name="node" />
              <variable citdl="TreeSorter" name="this" />
              <variable attributes="__local__ private" citdl="node.parentNode" line="101" name="p" />
            </scope>
          </scope>
          <scope classrefs="Ext.data.Node" ilk="class" line="36" lineend="159" name="TreeNode">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: is to use the cls or iconCls attributes and add the icon via a CSS background image." ilk="function" line="36" lineend="159" name="TreeNode" signature="TreeNode(attributes)">
              <variable citdl="Object/String" doc="The attributes/config for the node or just a string with the text for the node" ilk="argument" name="attributes" />
              <variable citdl="TreeNode" name="this" />
              <variable attributes="__local__ private" citdl="this.attributes.uiProvider" line="152" name="uiClass" />
            </scope>
            <variable citdl="Boolean" line="41" name="childrenRendered" />
            <variable citdl="Boolean" line="42" name="rendered" />
            <variable citdl="attributes.expanded" line="44" name="expanded" />
            <variable citdl="attributes.isTarget" line="45" name="isTarget" />
            <variable citdl="attributes.draggable" line="46" name="draggable" />
            <variable citdl="attributes.allowChildren" line="47" name="allowChildren" />
            <variable citdl="String" doc="Read-only. The text for this node. To change it use setText()." line="53" name="text" />
            <variable citdl="Boolean" doc="True if this node is disabled." line="58" name="disabled" />
            <variable citdl="Boolean" doc="True if this node is hidden." line="63" name="hidden" />
            <variable citdl="TreeNodeUI" doc="Read-only. The UI for this node" line="158" name="ui" />
            <variable citdl="Boolean" line="161" name="preventHScroll" />
            <scope doc="Returns true if this node is expanded" ilk="function" line="166" lineend="168" name="isExpanded" returns="Boolean" signature="isExpanded()" />
            <scope doc="Returns the UI object for this node." ilk="function" line="176" lineend="178" name="getUI" returns="TreeNodeUI" signature="getUI()" />
            <scope ilk="function" line="180" lineend="183" name="getLoader" returns="this.loader" signature="getLoader()">
              <variable attributes="__local__ private" line="181" name="owner" />
            </scope>
            <scope ilk="function" line="186" lineend="195" name="setFirstChild" signature="setFirstChild(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.firstChild" line="187" name="of" />
            </scope>
            <scope ilk="function" line="198" lineend="207" name="setLastChild" signature="setLastChild(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.lastChild" line="199" name="ol" />
            </scope>
            <scope ilk="function" line="211" lineend="221" name="appendChild" returns="Node" signature="appendChild(n)">
              <variable citdl="this.getLoader().createNode()" ilk="argument" name="n" />
              <variable attributes="__local__ private" citdl="Ext.tree.TreeNode.superclass.appendChild.call()" line="215" name="node" />
            </scope>
            <scope ilk="function" line="224" lineend="240" name="removeChild" returns="Node" signature="removeChild(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="243" lineend="253" name="insertBefore" returns="newNode" signature="insertBefore(node, refNode)">
              <variable citdl="this.getLoader().createNode()" ilk="argument" name="node" />
              <variable ilk="argument" name="refNode" />
              <variable attributes="__local__ private" citdl="Ext.tree.TreeNode.superclass.insertBefore.call()" line="247" name="newNode" />
            </scope>
            <scope doc="Sets the text for this node" ilk="function" line="259" lineend="267" name="setText" signature="setText(text)">
              <variable citdl="String" ilk="argument" name="text" />
              <variable attributes="__local__ private" citdl="this.text" line="260" name="oldText" />
            </scope>
            <scope doc="Triggers selection of this node" ilk="function" line="272" lineend="274" name="select" signature="select()" />
            <scope doc="Triggers deselection of this node" ilk="function" line="279" lineend="281" name="unselect" signature="unselect()" />
            <scope doc="Returns true if this node is selected" ilk="function" line="287" lineend="289" name="isSelected" returns="Boolean" signature="isSelected()" />
            <scope doc="Expand this node." ilk="function" line="300" lineend="329" name="expand" signature="expand(deep, anim, callback, scope)">
              <variable citdl="Boolean" doc="(optional) True to expand all children as well" ilk="argument" name="deep" />
              <variable citdl="Boolean" doc="(optional) false to cancel the default animation" ilk="argument" name="anim" />
              <variable citdl="Function" doc="(optional) A callback to be called when&#xA;expanding this node completes (does not wait for deep expand to complete).&#xA;Called with 1 parameter, this node." ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
              <scope attributes="__local__ private" ilk="function" line="310" lineend="316" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="331" lineend="335" name="runCallback" signature="runCallback(cb, scope, args)">
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" line="337" lineend="339" name="isHiddenRoot" returns="this.isRoot" signature="isHiddenRoot()" />
            <scope doc="Collapse this node." ilk="function" line="350" lineend="379" name="collapse" signature="collapse(deep, anim, callback, scope)">
              <variable citdl="Boolean" doc="(optional) True to collapse all children as well" ilk="argument" name="deep" />
              <variable citdl="Boolean" doc="(optional) false to cancel the default animation" ilk="argument" name="anim" />
              <variable citdl="Function" doc="(optional) A callback to be called when&#xA;expanding this node completes (does not wait for deep expand to complete).&#xA;Called with 1 parameter, this node." ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
              <scope attributes="__local__ private" ilk="function" line="357" lineend="363" name="(anonymous)" signature="(anonymous)()" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="374" name="cs" />
            </scope>
            <scope ilk="function" line="382" lineend="386" name="delayedExpand" signature="delayedExpand(delay)">
              <variable ilk="argument" name="delay" />
            </scope>
            <variable citdl="this.expand.defer()" line="384" name="expandProcId" />
            <scope ilk="function" line="389" lineend="394" name="cancelExpand" signature="cancelExpand()" />
            <scope doc="Toggles expanded/collapsed state of the node" ilk="function" line="399" lineend="405" name="toggle" signature="toggle()" />
            <scope doc="Ensures all parent nodes are expanded, and if necessary, scrolls&#xA;the node into view." ilk="function" line="413" lineend="420" name="ensureVisible" signature="ensureVisible(callback, scope)">
              <variable citdl="Function" doc="(optional) A function to call when the node has been made visible." ilk="argument" name="callback" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the callback." ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree()" line="414" name="tree" />
              <scope attributes="__local__ private" ilk="function" line="415" lineend="419" name="(anonymous)" signature="(anonymous)()">
                <variable attributes="__local__ private" citdl="tree.getNodeById()" line="416" name="node" />
              </scope>
            </scope>
            <scope doc="Expand all child nodes" ilk="function" line="426" lineend="431" name="expandChildNodes" signature="expandChildNodes(deep)">
              <variable citdl="Boolean" doc="(optional) true if the child nodes should also expand their child nodes" ilk="argument" name="deep" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="427" name="cs" />
            </scope>
            <scope doc="Collapse all child nodes" ilk="function" line="437" lineend="442" name="collapseChildNodes" signature="collapseChildNodes(deep)">
              <variable citdl="Boolean" doc="(optional) true if the child nodes should also collapse their child nodes" ilk="argument" name="deep" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="438" name="cs" />
            </scope>
            <scope doc="Disables this node" ilk="function" line="447" lineend="454" name="disable" signature="disable()" />
            <scope doc="Enables this node" ilk="function" line="459" lineend="465" name="enable" signature="enable()" />
            <scope ilk="function" line="468" lineend="477" name="renderChildren" signature="renderChildren(suppressEvent)">
              <variable ilk="argument" name="suppressEvent" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="472" name="cs" />
            </scope>
            <scope ilk="function" line="480" lineend="488" name="sort" signature="sort(fn, scope)">
              <variable ilk="argument" name="fn" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="483" name="cs" />
            </scope>
            <scope ilk="function" line="491" lineend="502" name="render" signature="render(bulkRender)">
              <variable ilk="argument" name="bulkRender" />
            </scope>
            <scope ilk="function" line="505" lineend="516" name="renderIndent" signature="renderIndent(deep, refresh)">
              <variable ilk="argument" name="deep" />
              <variable ilk="argument" name="refresh" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="511" name="cs" />
            </scope>
            <scope ilk="function" line="518" lineend="520" name="beginUpdate" signature="beginUpdate()" />
            <scope ilk="function" line="522" lineend="526" name="endUpdate" signature="endUpdate()" />
            <scope ilk="function" line="528" lineend="538" name="destroy" signature="destroy()" />
            <variable line="533" name="childNodes" />
            <scope ilk="function" line="541" lineend="543" name="onIdChange" signature="onIdChange(id)">
              <variable ilk="argument" name="id" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="46" lineend="80" name="TreeLoader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A TreeLoader provides for lazy loading of an {@link Ext.tree.TreeNode}&apos;s child&#xA;nodes from a specified URL. The response must be a JavaScript Array definition&#xA;whose elements are node definition objects. e.g.:&#xA;&#xA;id: 1,&#xA;text: &apos;A leaf Node&apos;,&#xA;leaf: true&#xA;},{&#xA;id: 2,&#xA;text: &apos;A folder Node&apos;,&#xA;children: [{&#xA;id: 3,&#xA;text: &apos;A child Node&apos;,&#xA;leaf: true&#xA;&#xA;A server request is sent, and child nodes are loaded only when a node is expanded.&#xA;The loading node&apos;s id is passed to the server under the parameter name &quot;node&quot; to&#xA;enable the server to produce the correct child nodes.&#xA;&#xA;To pass extra parameters, an event handler may be attached to the &quot;beforeload&quot;&#xA;event, and the parameters specified in the TreeLoader&apos;s baseParams property:&#xA;&#xA;myTreeLoader.on(&quot;beforeload&quot;, function(treeLoader, node) {&#xA;this.baseParams.category = node.attributes.category;&#xA;}, this);&#xA;This would pass an HTTP parameter called &quot;category&quot; to the server containing&#xA;the value of the Node&apos;s &quot;category&quot; attribute." ilk="function" line="46" lineend="80" name="TreeLoader" signature="TreeLoader(config)">
              <variable citdl="Object" doc="A config object containing config properties." ilk="argument" name="config" />
              <variable citdl="TreeLoader" name="this" />
            </scope>
            <variable citdl="Object" line="47" lineend="47" name="baseParams" />
            <variable citdl="Object" doc="specifies an array of node definition objects representing the child nodes&#xA;to be loaded." line="113" lineend="113" name="uiProviders" />
            <variable citdl="Boolean" doc="child nodes before loading." line="119" name="clearOnLoad" />
            <variable doc="A list of params to be executed&#xA;server side.  Specify the params in the order in which they must be executed on the server-side&#xA;as either (1) an Array of String values, or (2) a String of params delimited by either whitespace,&#xA;comma, or pipe. For example,&#xA;any of the following would be acceptable:&#xA;paramOrder: [&apos;param1&apos;,&apos;param2&apos;,&apos;param3&apos;]&#xA;paramOrder: &apos;param1 param2 param3&apos;&#xA;paramOrder: &apos;param1,param2,param3&apos;&#xA;paramOrder: &apos;param1|param2|param&apos;" line="134" name="paramOrder" />
            <variable citdl="Boolean" doc="Send parameters as a collection of named arguments (defaults to false). Providing a&#xA;{@link #paramOrder} nullifies this configuration." line="141" name="paramsAsHash" />
            <variable doc="Function to call when executing a request." line="147" name="directFn" />
            <scope doc="Load an {@link Ext.tree.TreeNode} from the URL specified in the constructor.&#xA;This is called automatically when a node is expanded, but may be used to reload&#xA;a node (or append new children if the {@link #clearOnLoad} option is false.)" ilk="function" line="157" lineend="168" name="load" signature="load(node, callback, scope)">
              <variable citdl="Ext.tree.TreeNode" ilk="argument" name="node" />
              <variable citdl="Function" ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
            </scope>
            <scope ilk="function" line="170" lineend="186" name="doPreload" returns="Boolean" signature="doPreload(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="node.attributes.children" line="173" name="cs" />
              <variable attributes="__local__ private" citdl="node.appendChild()" line="176" name="cn" />
            </scope>
            <scope ilk="function" line="188" lineend="211" name="getParams" returns="buf.join()" signature="getParams(node)">
              <variable ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.baseParams" line="189" name="bp" />
              <variable attributes="__local__ private" citdl="Array" line="189" name="buf" />
            </scope>
            <scope ilk="function" line="213" lineend="235" name="requestData" signature="requestData(node, callback, scope)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.getParams()" line="216" name="args" />
            </scope>
            <variable citdl="Ext.Ajax.request()" line="228" name="transId" />
            <scope ilk="function" line="237" lineend="249" name="processDirectResponse" signature="processDirectResponse(result, response, args)">
              <variable ilk="argument" name="result" />
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" line="252" lineend="256" name="runCallback" signature="runCallback(cb, scope, args)">
              <variable ilk="argument" name="cb" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="args" />
            </scope>
            <scope ilk="function" line="258" lineend="260" name="isLoading" signature="isLoading()" />
            <scope ilk="function" line="262" lineend="266" name="abort" signature="abort()" />
            <scope doc="Override this function for custom TreeNode node implementation, or to&#xA;modify the attributes at creation time.&#xA;Example:&#xA;new Ext.tree.TreePanel({&#xA;...&#xA;new Ext.tree.TreeLoader({&#xA;url: &apos;dataUrl&apos;,&#xA;createNode: function(attr) {&#xA;//          Allow consolidation consignments to have&#xA;//          consignments dropped into them.&#xA;if (attr.isConsolidation) {&#xA;attr.iconCls = &apos;x-consol&apos;,&#xA;attr.allowDrop = true;&#xA;return Ext.tree.TreeLoader.prototype.call(this, attr);&#xA;}),&#xA;...&#xA;});" ilk="function" line="291" lineend="309" name="createNode" returns="attr.leaf" signature="createNode(attr)">
              <variable citdl="Object" doc="The attributes from which to create the new node." ilk="argument" name="attr" />
            </scope>
            <scope ilk="function" line="311" lineend="327" name="processResponse" signature="processResponse(response, node, callback, scope)">
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="response.responseText" line="312" name="json" />
              <variable attributes="__local__ private" citdl="response.responseData" line="314" name="o" />
              <variable attributes="__local__ private" citdl="this.createNode()" line="317" name="n" />
            </scope>
            <scope ilk="function" line="329" lineend="334" name="handleResponse" signature="handleResponse(response)">
              <variable ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.argument" line="331" name="a" />
            </scope>
            <scope ilk="function" line="336" lineend="341" name="handleFailure" signature="handleFailure(response)">
              <variable ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.argument" line="338" name="a" />
            </scope>
          </scope>
          <variable citdl="Object" line="114" name="TreePanel">
            <variable citdl="Object" line="114" lineend="916" name="nodeTypes">
              <variable citdl="Ext.tree.AsyncTreeNode" line="114" name="async" />
              <variable citdl="Ext.tree.TreeNode" line="546" name="node" />
            </variable>
          </variable>
          <scope classrefs="Ext.util.Observable" ilk="class" line="205" lineend="219" name="MultiSelectionModel">
            <scope attributes="__ctor__" doc="Multi selection for a TreePanel." ilk="function" line="205" lineend="219" name="MultiSelectionModel" signature="MultiSelectionModel(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="MultiSelectionModel" name="this" />
            </scope>
            <variable citdl="Array" line="206" name="selNodes" />
            <variable citdl="Object" line="207" lineend="207" name="selMap" />
            <scope ilk="function" line="222" lineend="226" name="init" signature="init(tree)">
              <variable ilk="argument" name="tree" />
            </scope>
            <variable citdl="tree" line="223" name="tree" />
            <scope ilk="function" line="228" lineend="234" name="onNodeClick" signature="onNodeClick(node, e)">
              <variable ilk="argument" name="node" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Select a node." ilk="function" line="243" lineend="257" name="select" returns="TreeNode" signature="select(node, e, keepExisting)">
              <variable citdl="TreeNode" doc="The node to select" ilk="argument" name="node" />
              <variable citdl="EventObject" doc="(optional) An event associated with the selection" ilk="argument" name="e" />
              <variable citdl="Boolean" doc="True to retain existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <variable citdl="Node" line="248" name="lastSelNode" />
            <scope doc="Deselect a node." ilk="function" line="263" lineend="274" name="unselect" signature="unselect(node)">
              <variable citdl="TreeNode" doc="The node to unselect" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.selNodes" line="266" name="sn" />
              <variable attributes="__local__ private" citdl="sn.indexOf()" line="267" name="index" />
            </scope>
            <scope doc="Clear all selections" ilk="function" line="279" lineend="291" name="clearSelections" signature="clearSelections(suppressEvent)">
              <variable ilk="argument" name="suppressEvent" />
              <variable attributes="__local__ private" citdl="this.selNodes" line="280" name="sn" />
            </scope>
            <scope doc="Returns true if the node is selected" ilk="function" line="298" lineend="300" name="isSelected" returns="Boolean" signature="isSelected(node)">
              <variable citdl="TreeNode" doc="The node to check" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns an array of the selected nodes" ilk="function" line="306" lineend="308" name="getSelectedNodes" returns="Array" signature="getSelectedNodes()" />
            <variable citdl="Ext.tree.DefaultSelectionModel.prototype.onKeyDown" line="310" name="onKeyDown" />
            <variable citdl="Ext.tree.DefaultSelectionModel.prototype.selectNext" line="312" name="selectNext" />
            <variable citdl="Ext.tree.DefaultSelectionModel.prototype.selectPrevious" line="314" name="selectPrevious" />
          </scope>
          <variable citdl="Ext.extend()" doc="This class provides the default UI implementation for root Ext TreeNodes.&#xA;The RootTreeNode UI implementation allows customizing the appearance of the root tree node.&#xA;&#xA;If you are customizing the Tree&apos;s user interface, you&#xA;may need to extend this class, but you should never need to instantiate this class." line="633" name="RootTreeNodeUI" />
        </variable>
        <scope classrefs="Ext.Component" ilk="class" line="16" lineend="25" name="Editor">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A base editor field that handles displaying/hiding on demand and has some built-in sizing and event handling logic." ilk="function" line="16" lineend="25" name="Editor" signature="Editor(field, config)">
            <variable ilk="argument" name="field" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Editor" name="this" />
          </scope>
          <variable citdl="Ext.create()" line="18" name="field" />
          <variable citdl="String" doc="The Field object (or descendant) or config object for field" line="61" name="value" />
          <variable citdl="String" doc="The position to align to (see {@link Ext.Element#alignTo} for more details, defaults to &quot;c-c?&quot;)." line="66" name="alignment" />
          <variable citdl="String" doc="for bottom-right shadow (defaults to &quot;frame&quot;)" line="71" name="shadow" />
          <variable citdl="Boolean" line="75" name="constrain" />
          <variable citdl="Boolean" line="79" name="swallowKeys" />
          <variable citdl="Boolean" line="83" name="completeOnEnter" />
          <variable citdl="Boolean" line="87" name="cancelOnEsc" />
          <variable citdl="Boolean" line="91" name="updateEl" />
          <scope ilk="function" line="93" lineend="148" name="initComponent" signature="initComponent()" />
          <scope ilk="function" line="151" lineend="182" name="onRender" signature="onRender(ct, position)">
            <variable ilk="argument" name="ct" />
            <variable ilk="argument" name="position" />
          </scope>
          <variable citdl="Ext.Layer" line="160" name="el" />
          <scope ilk="function" line="185" lineend="198" name="onSpecialKey" signature="onSpecialKey(field, e)">
            <variable ilk="argument" name="field" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="e.getKey()" line="186" name="key" />
          </scope>
          <scope doc="Starts the editing process and shows the editor." ilk="function" line="206" lineend="224" name="startEdit" signature="startEdit(el, value)">
            <variable citdl="Mixed" doc="The element to edit" ilk="argument" name="el" />
            <variable citdl="String" doc="(optional) A value to initialize the editor with. If a value is not provided, it defaults&#xA;to the innerHTML of el." ilk="argument" name="value" />
            <variable attributes="__local__ private" citdl="value" line="211" name="v" />
          </scope>
          <variable citdl="Ext.get()" line="210" name="boundEl" />
          <variable citdl="v" line="218" name="startValue" />
          <variable citdl="Boolean" line="222" name="editing" />
          <scope ilk="function" line="227" lineend="241" name="doAutoSize" signature="doAutoSize()">
            <variable attributes="__local__ private" citdl="this.boundEl.getSize()" line="229" name="sz" />
          </scope>
          <scope doc="Sets the height and width of this editor." ilk="function" line="248" lineend="258" name="setSize" signature="setSize(w, h)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
          </scope>
          <scope doc="Realigns the editor to the bound field based on the current alignment config value." ilk="function" line="263" lineend="265" name="realign" signature="realign()" />
          <scope doc="Ends the editing process, persists the changed value to the underlying field, and hides the editor." ilk="function" line="271" lineend="294" name="completeEdit" signature="completeEdit(remainVisible)">
            <variable citdl="Boolean" doc="Override the default behavior and keep the editor visible after edit (defaults to false)" ilk="argument" name="remainVisible" />
            <variable attributes="__local__ private" citdl="this.getValue()" line="275" name="v" />
          </scope>
          <scope ilk="function" line="297" lineend="310" name="onShow" signature="onShow()" />
          <variable citdl="Boolean" line="304" name="fixIEFocus" />
          <scope ilk="function" line="312" lineend="316" name="deferredFocus" signature="deferredFocus()" />
          <scope doc="Cancels the editing process and hides the editor without persisting any changes.  The field value will be&#xA;reverted to the original starting value." ilk="function" line="324" lineend="331" name="cancelEdit" signature="cancelEdit(remainVisible)">
            <variable citdl="Boolean" doc="Override the default behavior and keep the editor visible after&#xA;cancel (defaults to false)" ilk="argument" name="remainVisible" />
            <variable attributes="__local__ private" citdl="this.getValue()" line="326" name="v" />
          </scope>
          <scope ilk="function" line="334" lineend="339" name="hideEdit" signature="hideEdit(remainVisible)">
            <variable ilk="argument" name="remainVisible" />
          </scope>
          <scope ilk="function" line="342" lineend="346" name="onBlur" signature="onBlur()" />
          <scope ilk="function" line="349" lineend="362" name="onHide" signature="onHide()" />
          <scope doc="Sets the data value of the editor" ilk="function" line="368" lineend="370" name="setValue" signature="setValue(v)">
            <variable ilk="argument" name="v" />
          </scope>
          <scope doc="Gets the data value of the editor" ilk="function" line="376" lineend="378" name="getValue" returns="Mixed" signature="getValue()" />
          <scope ilk="function" line="380" lineend="383" name="beforeDestroy" signature="beforeDestroy()" />
        </scope>
        <scope classrefs="Object" ilk="class" line="16" lineend="170" name="Shadow">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple class that can provide a shadow effect for any element.  Note that the element MUST be absolutely positioned,&#xA;and the shadow does not provide any shimming.  This should be used only in simple cases -- for more advanced&#xA;functionality that can also provide the same shadow effect, see the {@link Ext.Layer} class." ilk="function" line="16" lineend="66" name="Shadow" signature="Shadow(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="21" lineend="21" name="a">
              <variable citdl="Number" line="21" name="h" />
              <variable citdl="Number" line="25" name="w" />
              <variable citdl="a.t" line="26" name="l" />
              <variable citdl="o" line="26" name="t" />
            </variable>
            <variable attributes="__local__ private" citdl="this.offset" line="21" name="o" />
            <variable attributes="__local__ private" citdl="Math.floor()" line="22" name="rad" />
          </scope>
          <variable citdl="this.defaultMode" line="19" name="mode" />
          <variable citdl="a" line="65" name="adjusts" />
          <variable citdl="Number" doc="The shadow display mode.  Supports the following options:&#xA;sides : Shadow displays on both sides and bottom only&#xA;frame : Shadow displays equally on all four sides&#xA;drop : Traditional bottom-right drop shadow" line="81" name="offset" />
          <variable citdl="String" line="84" name="defaultMode" />
          <scope doc="Displays the shadow under the target element" ilk="function" line="90" lineend="109" name="show" signature="show(target)">
            <variable citdl="Ext.get()" ilk="argument" name="target" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="Ext.Shadow.Pool.pull()" line="93" name="el" />
          <scope doc="Returns true if the shadow is visible, else false" ilk="function" line="114" lineend="116" name="isVisible" returns="this.el" signature="isVisible()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Direct alignment when values are already available. Show must be called at least once before&#xA;calling this method to ensure it is initialized." ilk="function" line="126" lineend="147" name="realign" signature="realign(l, t, w, h)">
            <variable ilk="argument" name="l" />
            <variable ilk="argument" name="t" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable citdl="Shadow" name="this" />
            <variable attributes="__local__ private" citdl="this.adjusts" line="130" name="a" />
            <variable attributes="__local__ private" citdl="this.el.dom" line="130" name="d" />
            <variable attributes="__local__ private" citdl="d.style" line="130" name="s" />
            <variable attributes="__local__ private" citdl="Number" line="131" name="iea" />
            <variable attributes="__local__ private" citdl="sh" line="134" name="shs" />
            <variable attributes="__local__ private" line="134" name="sw" />
            <variable attributes="__local__ private" line="134" name="sh" />
            <variable attributes="__local__ private" citdl="sw" line="134" name="sws" />
            <variable attributes="__local__ private" citdl="d.childNodes" line="139" name="cn" />
            <variable attributes="__local__ private" citdl="Math.max()" line="140" name="sww" />
          </scope>
          <scope doc="Hides this shadow" ilk="function" line="152" lineend="158" name="hide" signature="hide()">
            <variable citdl="Shadow" name="this" />
          </scope>
          <scope doc="Adjust the z-index of this shadow" ilk="function" line="164" lineend="169" name="setZIndex" signature="setZIndex(z)">
            <variable ilk="argument" name="z" />
            <variable citdl="Shadow" name="this" />
          </scope>
          <variable citdl="z" line="165" name="zIndex" />
          <variable citdl="Object" line="173" lineend="191" name="Pool">
            <scope ilk="function" line="179" lineend="186" name="pull" returns="sh" signature="pull()">
              <variable citdl="Pool" name="this" />
              <variable attributes="__local__ private" citdl="p.shift()" line="180" name="sh" />
            </scope>
            <scope ilk="function" line="188" lineend="190" name="push" signature="push(sh)">
              <variable ilk="argument" name="sh" />
              <variable citdl="Pool" name="this" />
            </scope>
          </variable>
        </scope>
        <variable citdl="Object" line="16" name="menu">
          <scope ilk="class" line="12" lineend="17" name="MenuMgr">
            <variable citdl="Object" line="12" lineend="210" name="MenuMgr">
              <scope doc="Hides all menus that are currently visible" ilk="function" line="107" lineend="109" name="hideAll" signature="hideAll()">
                <variable citdl="MenuMgr" name="this" />
              </scope>
              <scope ilk="function" line="112" lineend="129" name="register" signature="register(menu)">
                <variable ilk="argument" name="menu" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menu.group" line="121" name="g" />
              </scope>
              <scope doc="Returns a {@link Ext.menu.Menu} object" ilk="function" line="137" lineend="150" name="get" returns="Ext.menu.Menu" signature="get(menu)">
                <variable citdl="String/Object" doc="The string menu id, an existing menu object reference, or a Menu config that will&#xA;be used to generate and return a new Menu instance." ilk="argument" name="menu" />
                <variable citdl="MenuMgr" name="this" />
              </scope>
              <scope ilk="function" line="153" lineend="164" name="unregister" signature="unregister(menu)">
                <variable ilk="argument" name="menu" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menu.group" line="159" name="g" />
              </scope>
              <scope ilk="function" line="167" lineend="176" name="registerCheckable" signature="registerCheckable(menuItem)">
                <variable ilk="argument" name="menuItem" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menuItem.group" line="168" name="g" />
              </scope>
              <scope ilk="function" line="179" lineend="185" name="unregisterCheckable" signature="unregisterCheckable(menuItem)">
                <variable ilk="argument" name="menuItem" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="menuItem.group" line="180" name="g" />
              </scope>
              <scope ilk="function" line="187" lineend="197" name="getCheckedItem" signature="getCheckedItem(groupId)">
                <variable ilk="argument" name="groupId" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="groups[groupId]" line="188" name="g" />
              </scope>
              <scope ilk="function" line="199" lineend="209" name="setCheckedItem" signature="setCheckedItem(groupId, itemId)">
                <variable ilk="argument" name="groupId" />
                <variable ilk="argument" name="itemId" />
                <variable citdl="MenuMgr" name="this" />
                <variable attributes="__local__ private" citdl="groups[groupId]" line="200" name="g" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Ext.menu.Item" ilk="class" line="16" lineend="45" name="CheckItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a menu item that contains a checkbox by default, but can also be part of a radio group." ilk="function" line="16" lineend="45" name="CheckItem" signature="CheckItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="CheckItem" name="this" />
            </scope>
            <variable citdl="String" doc="All check items with the same group name will automatically be grouped into a single-select&#xA;radio button group (defaults to &apos;&apos;)" line="55" name="itemCls" />
            <variable citdl="String" line="59" name="groupClass" />
            <variable citdl="Boolean" doc="if this checkbox is part of a radio group (group = true) only the last item in the group that is&#xA;initialized with checked = true will be rendered as checked." line="66" name="checked" />
            <variable citdl="String" line="69" name="ctype" />
            <scope ilk="function" line="72" lineend="81" name="onRender" signature="onRender(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope ilk="function" line="84" lineend="87" name="destroy" signature="destroy()" />
            <scope doc="Set the checked state of this item" ilk="function" line="94" lineend="104" name="setChecked" signature="setChecked(state, suppressEvent)">
              <variable ilk="argument" name="state" />
              <variable citdl="Boolean" doc="(optional) True to prevent the checkchange event from firing (defaults to false)" ilk="argument" name="suppressEvent" />
            </scope>
            <scope ilk="function" line="107" lineend="112" name="handleClick" signature="handleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
          </scope>
          <scope classrefs="Ext.menu.BaseItem" ilk="class" line="16" lineend="18" name="Separator">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a separator bar to a menu, used to divide logical groups of menu items. Generally you will&#xA;add one of these by using &quot;-&quot; in you call to add() or in your items config rather than creating one directly." ilk="function" line="16" lineend="18" name="Separator" signature="Separator(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Separator" name="this" />
            </scope>
            <variable citdl="String" line="24" name="itemCls" />
            <variable citdl="Boolean" line="28" name="hideOnClick" />
            <variable citdl="String" line="34" name="activeClass" />
            <scope ilk="function" line="37" lineend="44" name="onRender" signature="onRender(li)">
              <variable ilk="argument" name="li" />
              <variable attributes="__local__ private" citdl="document.createElement()" line="38" name="s" />
            </scope>
            <variable citdl="s" line="41" name="el" />
          </scope>
          <scope classrefs="Ext.menu.BaseItem" ilk="class" line="17" lineend="22" name="TextItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Adds a static text string to a menu, usually used as either a heading or group separator." ilk="function" line="17" lineend="22" name="TextItem" signature="TextItem(cfg)">
              <variable ilk="argument" name="cfg" />
              <variable citdl="TextItem" name="this" />
            </scope>
            <variable citdl="Boolean" line="31" name="hideOnClick" />
            <variable citdl="String" line="35" name="itemCls" />
            <scope ilk="function" line="38" lineend="44" name="onRender" signature="onRender()">
              <variable attributes="__local__ private" citdl="document.createElement()" line="39" name="s" />
            </scope>
            <variable citdl="s" line="42" name="el" />
          </scope>
          <scope classrefs="Ext.Component" ilk="class" line="17" lineend="45" name="BaseItem">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The base class for all items that render into menus.  BaseItem provides default rendering, activated state&#xA;management and base configuration options shared by all menu components." ilk="function" line="17" lineend="45" name="BaseItem" signature="BaseItem(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BaseItem" name="this" />
            </scope>
            <variable citdl="Ext.menu.Menu" doc="The parent Menu of this Item." line="68" name="canActivate" />
            <variable citdl="String" line="72" name="activeClass" />
            <variable citdl="Boolean" line="76" name="hideOnClick" />
            <variable citdl="Number" line="80" name="clickHideDelay" />
            <variable citdl="String" line="83" name="ctype" />
            <variable citdl="String" line="86" name="actionMode" />
            <scope ilk="function" line="89" lineend="99" name="onRender" signature="onRender(container, position)">
              <variable ilk="argument" name="container" />
              <variable ilk="argument" name="position" />
            </scope>
            <variable citdl="this.ownerCt" line="92" name="parentMenu" />
            <scope doc="Sets the function that will handle click events for this item (equivalent to passing in the {@link #handler}&#xA;config property).  If an existing handler is already registered, it will be unregistered for you." ilk="function" line="107" lineend="112" name="setHandler" signature="setHandler(handler, scope)">
              <variable citdl="Function" doc="The function that should be called on click" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The scope that should be passed to the handler" ilk="argument" name="scope" />
            </scope>
            <scope ilk="function" line="115" lineend="122" name="onClick" signature="onClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="125" lineend="134" name="activate" returns="Boolean" signature="activate()">
              <variable attributes="__local__ private" citdl="this.container" line="129" name="li" />
            </scope>
            <variable citdl="li.getRegion().adjust()" line="131" name="region" />
            <scope ilk="function" line="137" lineend="140" name="deactivate" signature="deactivate()" />
            <scope ilk="function" line="143" lineend="145" name="shouldDeactivate" signature="shouldDeactivate(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="148" lineend="152" name="handleClick" signature="handleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <variable citdl="Ext.emptyFn" line="155" name="expandMenu" />
            <variable citdl="Ext.emptyFn" line="158" name="hideMenu" />
          </scope>
          <scope classrefs="Ext.menu.BaseItem" ilk="class" line="18" lineend="23" name="Item">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A base class for all menu items that require menu-related functionality (like sub-menus) and are not static&#xA;display items.  Item extends the base functionality of {@link Ext.menu.BaseItem} by adding menu-specific&#xA;activation and click handling." ilk="function" line="18" lineend="23" name="Item" signature="Item(config)">
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="Item" name="this" />
            </scope>
            <variable citdl="Ext.menu.MenuMgr.get()" line="21" name="menu" />
            <variable citdl="Ext.menu.Menu" doc="The submenu associated with this Item if one was configured." line="54" name="itemCls" />
            <variable citdl="Boolean" line="58" name="canActivate" />
            <variable citdl="Number" line="62" name="showDelay" />
            <variable citdl="Number" line="64" name="hideDelay" />
            <variable citdl="String" line="67" name="ctype" />
            <scope ilk="function" line="70" lineend="88" name="onRender" signature="onRender(container, position)">
              <variable ilk="argument" name="container" />
              <variable ilk="argument" name="position" />
              <scope ilk="class" line="81" lineend="82" name="Item" />
              <variable attributes="__local__ private" citdl="this.getTemplateArgs()" line="83" name="a" />
            </scope>
            <variable citdl="Ext.menu.Item.prototype.itemTpl" line="81" name="itemTpl" />
            <variable citdl="position" line="84" name="el" />
            <variable citdl="this.el.child()" line="85" name="iconEl" />
            <variable citdl="this.el.child()" line="86" name="textEl" />
            <scope ilk="function" line="90" lineend="100" name="getTemplateArgs" signature="getTemplateArgs()" />
            <scope doc="Sets the text to display in this menu item" ilk="function" line="106" lineend="112" name="setText" signature="setText(text)">
              <variable citdl="String" doc="The text to display" ilk="argument" name="text" />
            </scope>
            <variable citdl="String" line="107" name="text" />
            <scope doc="Sets the CSS class to apply to the item&apos;s icon element" ilk="function" line="118" lineend="124" name="setIconClass" signature="setIconClass(cls)">
              <variable citdl="String" doc="The CSS class to apply" ilk="argument" name="cls" />
              <variable attributes="__local__ private" citdl="this.iconCls" line="119" name="oldCls" />
            </scope>
            <variable citdl="cls" line="120" name="iconCls" />
            <scope ilk="function" line="127" lineend="132" name="beforeDestroy" signature="beforeDestroy()" />
            <scope ilk="function" line="135" lineend="140" name="handleClick" signature="handleClick(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="143" lineend="151" name="activate" returns="Boolean" signature="activate(autoExpand)">
              <variable ilk="argument" name="autoExpand" />
            </scope>
            <scope ilk="function" line="154" lineend="162" name="shouldDeactivate" returns="Boolean" signature="shouldDeactivate(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="165" lineend="168" name="deactivate" signature="deactivate()" />
            <scope ilk="function" line="171" lineend="181" name="expandMenu" signature="expandMenu(autoActivate)">
              <variable ilk="argument" name="autoActivate" />
            </scope>
            <variable citdl="this.deferExpand.defer()" line="176" name="showTimer" />
            <scope ilk="function" line="184" lineend="190" name="deferExpand" signature="deferExpand(autoActivate)">
              <variable ilk="argument" name="autoActivate" />
            </scope>
            <scope ilk="function" line="193" lineend="199" name="hideMenu" signature="hideMenu()" />
            <variable citdl="this.deferHide.defer()" line="197" name="hideTimer" />
            <scope ilk="function" line="202" lineend="209" name="deferHide" signature="deferHide()" />
          </scope>
          <variable citdl="Ext.extend()" doc="A menu containing a {@link Ext.ColorPalette} Component." line="71" name="ColorMenu" />
          <variable citdl="Ext.extend()" doc="A menu containing a {@link Ext.DatePicker} Component." line="89" name="DateMenu" />
          <variable citdl="Ext.extend()" doc="A menu object.  This is the container to which you may add menu items.  Menu can also serve as a base class&#xA;when you want a specialized menu based off of another component (like {@link Ext.menu.DateMenu} for example).&#xA;Menus may contain either {@link Ext.menu.Item menu items}, or general {@link Ext.Component Component}s.&#xA;To make a contained general {@link Ext.Component Component} line up with other {@link Ext.menu.Item menu items}&#xA;specify iconCls: &apos;no-icon&apos;.  This reserves a space for an icon, and indents the Component in line&#xA;with the other menu items.  See {@link Ext.form.ComboBox}.{@link Ext.form.ComboBox#getListParent getListParent}&#xA;for an example.&#xA;By default, Menus are absolutely positioned, floating Components. By configuring a Menu with&#xA;{@link #floating}:false, a Menu may be used as child of a Container." line="663" name="Menu" />
          <variable citdl="Ext.extend()" line="733" name="MenuNav" />
        </variable>
        <variable citdl="Object" line="16" name="UpdateManager">
          <variable citdl="Object" line="16" name="defaults">
            <variable citdl="String" line="16" name="indicatorText" />
          </variable>
        </variable>
        <variable citdl="Object" line="19" lineend="19" name="DataView" />
        <variable citdl="Object" line="19" lineend="17" name="View" />
        <scope ilk="class" line="22" lineend="34" name="ComponentMgr">
          <variable citdl="Object" line="22" lineend="138" name="ComponentMgr">
            <scope doc="Registers a component." ilk="function" line="32" lineend="34" name="register" signature="register(c)">
              <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Unregisters a component." ilk="function" line="40" lineend="42" name="unregister" signature="unregister(c)">
              <variable citdl="Ext.Component" doc="The component" ilk="argument" name="c" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Returns a component by {@link Ext.Component#id id}.&#xA;For additional details see {@link Ext.util.MixedCollection#get}." ilk="function" line="51" lineend="53" name="get" returns="all.get()" signature="get(id)">
              <variable citdl="String" doc="The component {@link Ext.Component#id id}" ilk="argument" name="id" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Registers a function that will be called when a specified component is added to ComponentMgr" ilk="function" line="61" lineend="68" name="onAvailable" signature="onAvailable(id, fn, scope)">
              <variable citdl="String" doc="The component {@link Ext.Component#id id}" ilk="argument" name="id" />
              <variable citdl="Function" doc="The callback function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The scope of the callback" ilk="argument" name="scope" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <variable citdl="MixedCollection" doc="The MixedCollection used internally for the component cache. An example usage may be subscribing to&#xA;events on the MixedCollection to monitor addition or removal.  Read-only." line="75" name="all" />
            <scope doc="Checks if a Component type is registered." ilk="function" line="82" lineend="84" name="isRegistered" returns="Boolean" signature="isRegistered(xtype)">
              <variable citdl="Ext.Component" doc="The mnemonic string by which the Component class may be looked up" ilk="argument" name="xtype" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Registers a new Component constructor, keyed by a new&#xA;{@link Ext.Component#xtype}.&#xA;Use this method (or its alias {@link Ext#reg Ext.reg}) to register new&#xA;subclasses of {@link Ext.Component} so that lazy instantiation may be used when specifying&#xA;child Components.&#xA;see {@link Ext.Container#items}" ilk="function" line="96" lineend="99" name="registerType" signature="registerType(xtype, cls)">
              <variable citdl="String" doc="The mnemonic string by which the Component class may be looked up." ilk="argument" name="xtype" />
              <variable citdl="Constructor" doc="The new Component class." ilk="argument" name="cls" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Creates a new Component from the specified config object using the&#xA;config object&apos;s {@link Ext.component#xtype xtype} to determine the class to instantiate." ilk="function" line="109" lineend="111" name="create" returns="Ext.Component" signature="create(config, defaultType)">
              <variable citdl="Object" doc="A configuration object for the Component you wish to create." ilk="argument" name="config" />
              <variable citdl="Constructor" doc="The constructor to provide the default Component type if&#xA;the config object does not contain a xtype. (Optional if the config contains a xtype)." ilk="argument" name="defaultType" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Registers a new Plugin constructor, keyed by a new&#xA;{@link Ext.Component#ptype}.&#xA;Use this method (or its alias {@link Ext#preg Ext.preg}) to register new&#xA;plugins for {@link Ext.Component}s so that lazy instantiation may be used when specifying&#xA;Plugins." ilk="function" line="122" lineend="125" name="registerPlugin" signature="registerPlugin(ptype, cls)">
              <variable citdl="String" doc="The mnemonic string by which the Plugin class may be looked up." ilk="argument" name="ptype" />
              <variable citdl="Constructor" doc="The new Plugin class." ilk="argument" name="cls" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
            <scope doc="Creates a new Plugin from the specified config object using the&#xA;config object&apos;s {@link Ext.component#ptype ptype} to determine the class to instantiate." ilk="function" line="135" lineend="137" name="createPlugin" returns="Ext.Component" signature="createPlugin(config, defaultType)">
              <variable citdl="Object" doc="A configuration object for the Plugin you wish to create." ilk="argument" name="config" />
              <variable citdl="Constructor" doc="The constructor to provide the default Plugin type if&#xA;the config object does not contain a ptype. (Optional if the config contains a ptype)." ilk="argument" name="defaultType" />
              <variable citdl="ComponentMgr" name="this" />
            </scope>
          </variable>
        </scope>
        <variable citdl="Object" line="22" name="state">
          <scope classrefs="Ext.util.Observable" ilk="class" line="13" lineend="24" name="Provider">
            <scope attributes="__ctor__" doc="Abstract base class for state provider implementations. This class provides methods&#xA;for encoding and decoding typed variables including dates and defines the&#xA;Provider interface." ilk="function" line="13" lineend="24" name="Provider" signature="Provider()">
              <variable citdl="Provider" name="this" />
            </scope>
            <variable citdl="Object" line="22" lineend="22" name="state" />
            <scope doc="Returns the current value for a key" ilk="function" line="32" lineend="35" name="get" returns="Mixed" signature="get(name, defaultValue)">
              <variable citdl="String" doc="The key name" ilk="argument" name="name" />
              <variable citdl="Mixed" doc="A default value to return if the key&apos;s value is not found" ilk="argument" name="defaultValue" />
            </scope>
            <variable citdl="this.state[name]" line="34" name="defaultValue" />
            <scope doc="Clears a value from the state" ilk="function" line="41" lineend="44" name="clear" signature="clear(name)">
              <variable citdl="String" doc="The key name" ilk="argument" name="name" />
            </scope>
            <scope doc="Sets the value for a key" ilk="function" line="51" lineend="54" name="set" signature="set(name, value)">
              <variable citdl="String" doc="The key name" ilk="argument" name="name" />
              <variable citdl="Mixed" doc="The value to set" ilk="argument" name="value" />
            </scope>
            <scope doc="Decodes a string previously encoded with {@link #encodeValue}." ilk="function" line="61" lineend="92" name="decodeValue" returns="Mixed" signature="decodeValue(cookie)">
              <variable ilk="argument" name="cookie" />
              <variable attributes="__local__ private" line="62" name="re" />
              <variable attributes="__local__ private" citdl="re.exec()" line="63" name="matches" />
              <variable attributes="__local__ private" citdl="matches[1]" line="65" name="type" />
              <variable attributes="__local__ private" citdl="matches[2]" line="66" name="v" />
              <variable attributes="__local__ private" citdl="Array" line="75" lineend="82" name="all" />
              <variable attributes="__local__ private" citdl="v.split()" line="76" name="values" />
              <variable attributes="__local__ private" citdl="values[i].split()" line="85" name="kv" />
            </scope>
            <scope doc="Encodes a value including type information.  Decode with {@link #decodeValue}." ilk="function" line="99" lineend="126" name="encodeValue" returns="String" signature="encodeValue(v)">
              <variable ilk="argument" name="v" />
              <variable attributes="__local__ private" citdl="String" line="100" name="enc" />
              <variable attributes="__local__ private" citdl="String" line="108" name="flat" />
            </scope>
          </scope>
          <scope ilk="class" line="22" lineend="32" name="Manager">
            <variable citdl="Object" line="22" lineend="68" name="Manager">
              <scope doc="Configures the default state provider for your application" ilk="function" line="30" lineend="32" name="setProvider" signature="setProvider(stateProvider)">
                <variable citdl="Provider" doc="The state provider to set" ilk="argument" name="stateProvider" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Returns the current value for a key" ilk="function" line="40" lineend="42" name="get" returns="Mixed" signature="get(key, defaultValue)">
                <variable ilk="argument" name="key" />
                <variable citdl="Mixed" doc="The default value to return if the key lookup does not match" ilk="argument" name="defaultValue" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Sets the value for a key" ilk="function" line="49" lineend="51" name="set" signature="set(key, value)">
                <variable ilk="argument" name="key" />
                <variable citdl="Mixed" doc="The state data" ilk="argument" name="value" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Clears a value from the state" ilk="function" line="57" lineend="59" name="clear" signature="clear(key)">
                <variable ilk="argument" name="key" />
                <variable citdl="Manager" name="this" />
              </scope>
              <scope doc="Gets the currently configured state provider" ilk="function" line="65" lineend="67" name="getProvider" returns="Provider" signature="getProvider()">
                <variable citdl="Manager" name="this" />
              </scope>
            </variable>
          </scope>
          <scope classrefs="Ext.state.Provider" ilk="class" line="32" lineend="40" name="CookieProvider">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The default Provider implementation which saves state via cookies.&#xA;Usage:&#xA;var cp = new Ext.state.CookieProvider({&#xA;path: &quot;/cgi-bin/&quot;,&#xA;expires: new Date(new Date().getTime()+(1000*60*60*24*30)), //30 days&#xA;domain: &quot;extjs.com&quot;&#xA;});&#xA;Ext.state.Manager.setProvider(cp);" ilk="function" line="32" lineend="40" name="CookieProvider" signature="CookieProvider(config)">
              <variable citdl="Object" doc="The configuration object" ilk="argument" name="config" />
              <variable citdl="CookieProvider" name="this" />
            </scope>
            <variable citdl="String" line="34" name="path" />
            <variable citdl="Date" line="35" name="expires" />
            <variable line="36" name="domain" />
            <variable citdl="Boolean" line="37" name="secure" />
            <variable citdl="this.readCookies()" line="39" name="state" />
            <scope ilk="function" line="44" lineend="51" name="set" signature="set(name, value)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="54" lineend="57" name="clear" signature="clear(name)">
              <variable ilk="argument" name="name" />
            </scope>
            <scope ilk="function" line="60" lineend="73" name="readCookies" returns="cookies" signature="readCookies()">
              <variable attributes="__local__ private" citdl="Object" line="61" lineend="61" name="cookies" />
              <variable attributes="__local__ private" citdl="document.cookie" line="62" name="c" />
              <variable attributes="__local__ private" line="63" name="re" />
              <variable attributes="__local__ private" line="64" name="matches" />
              <variable attributes="__local__ private" citdl="matches[1]" line="66" name="name" />
              <variable attributes="__local__ private" citdl="matches[2]" line="67" name="value" />
            </scope>
            <scope ilk="function" line="76" lineend="82" name="setCookie" signature="setCookie(name, value)">
              <variable ilk="argument" name="name" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="85" lineend="90" name="clearCookie" signature="clearCookie(name)">
              <variable ilk="argument" name="name" />
            </scope>
          </scope>
        </variable>
        <variable citdl="String" doc="The version of the framework" line="22" name="version" />
        <variable citdl="Object" line="23" name="grid">
          <scope classrefs="Ext.dd.DDProxy" ilk="class" line="9" name="SplitDragZone">
            <scope attributes="__ctor__" ilk="function" line="9" lineend="20" name="SplitDragZone" signature="SplitDragZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="SplitDragZone" name="this" />
            </scope>
            <variable citdl="grid" line="10" name="grid" />
            <variable citdl="grid.getView()" line="11" name="view" />
            <variable citdl="this.view.resizeProxy" line="12" name="proxy" />
            <variable citdl="Boolean" line="19" name="scroll" />
            <variable citdl="Ext.Element.fly" line="22" name="fly" />
            <scope ilk="function" line="24" lineend="36" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnWidth()" line="27" name="w" />
              <variable attributes="__local__ private" citdl="Math.max()" line="28" name="minw" />
            </scope>
            <variable citdl="x" line="32" name="minX" />
            <variable citdl="x" line="33" name="maxX" />
            <variable citdl="x" line="34" name="startPos" />
            <scope ilk="function" line="39" lineend="50" name="handleMouseDown" signature="handleMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.EventObject.setEvent()" line="40" name="ev" />
              <variable attributes="__local__ private" citdl="this.fly()" line="41" name="t" />
            </scope>
            <variable citdl="this.view.getCellIndex()" line="43" name="cellIndex" />
            <variable citdl="t.dom" line="44" name="split" />
            <variable citdl="this.grid.colModel" line="45" name="cm" />
            <scope ilk="function" line="52" lineend="57" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Math.max()" line="54" name="endX" />
              <variable attributes="__local__ private" citdl="endX" line="55" name="diff" />
            </scope>
            <scope ilk="function" line="59" lineend="61" name="autoOffset" signature="autoOffset()" />
          </scope>
          <scope classrefs="Ext.Editor" ilk="class" line="9" name="GridEditor">
            <scope attributes="__ctor__" ilk="function" line="9" lineend="12" name="GridEditor" signature="GridEditor(field, config)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="config" />
              <variable citdl="GridEditor" name="this" />
            </scope>
            <variable citdl="String" line="15" name="alignment" />
            <variable citdl="String" line="16" name="autoSize" />
            <variable citdl="Boolean" line="17" name="hideEl" />
            <variable citdl="String" line="18" name="cls" />
            <variable citdl="Boolean" line="19" name="shim" />
            <variable citdl="Boolean" line="20" name="shadow" />
          </scope>
          <scope classrefs="Ext.dd.DragZone" ilk="class" line="9" lineend="63" name="HeaderDragZone">
            <scope attributes="__ctor__" ilk="function" line="9" lineend="19" name="HeaderDragZone" signature="HeaderDragZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="HeaderDragZone" name="this" />
            </scope>
            <variable citdl="grid" line="10" name="grid" />
            <variable citdl="grid.getView()" line="11" name="view" />
            <variable citdl="String" line="12" name="ddGroup" />
            <variable citdl="Boolean" line="18" name="scroll" />
            <variable citdl="Number" line="21" name="maxDragWidth" />
            <scope ilk="function" line="22" lineend="29" name="getDragData" returns="Boolean" signature="getDragData(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="23" name="t" />
              <variable attributes="__local__ private" citdl="this.view.findHeaderCell()" line="24" name="h" />
            </scope>
            <scope ilk="function" line="31" lineend="38" name="onInitDrag" returns="Boolean" signature="onInitDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.dragData.ddel.cloneNode()" line="33" name="clone" />
            </scope>
            <scope ilk="function" line="40" lineend="45" name="afterValidDrop" signature="afterValidDrop()">
              <variable attributes="__local__ private" citdl="this.view" line="41" name="v" />
              <scope attributes="__local__ private" ilk="function" line="42" lineend="44" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="47" lineend="52" name="afterInvalidDrop" signature="afterInvalidDrop()">
              <variable attributes="__local__ private" citdl="this.view" line="48" name="v" />
              <scope attributes="__local__ private" ilk="function" line="49" lineend="51" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="14" lineend="281" name="Column">
            <scope attributes="__ctor__" doc="This class encapsulates column configuration data to be used in the initialization of a&#xA;{@link Ext.grid.ColumnModel ColumnModel}.&#xA;While subclasses are provided to render data in different ways, this class renders a passed&#xA;data field unchanged and is usually used for textual columns." ilk="function" line="14" lineend="31" name="Column" signature="Column(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Column" name="this" />
            </scope>
            <variable citdl="Ext.util.Format[this.renderer]" line="18" name="renderer" />
            <variable citdl="this.renderer.scope" line="20" name="scope" />
            <variable line="26" name="id" />
            <variable citdl="Ext.create()" line="29" name="editor" />
            <variable citdl="Number" line="33" name="AUTO_ID" />
            <variable citdl="Boolean" doc="{@link #editor}.  Set to false to initially disable editing on this column.&#xA;The initial configuration may be dynamically altered using&#xA;{@link Ext.grid.ColumnModel}.{@link Ext.grid.ColumnModel#setEditable setEditable()}.&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;fn: this.gridRenderer,&#xA;scope: this&#xA;var companyColumn = {&#xA;header: &apos;Company Name&apos;,&#xA;dataIndex: &apos;company&apos;,&#xA;renderer: function(value, metaData, record, rowIndex, colIndex, store) {&#xA;// provide the logic depending on business rules&#xA;// name of your own choosing to manipulate the cell depending upon&#xA;// the data in the underlying Record object.&#xA;if (value == &apos;whatever&apos;) {&#xA;//metaData.css : String : A CSS class name to add to the TD element of the cell.&#xA;//metaData.attr : String : An html attribute definition string to apply to&#xA;//                         the data container element within the table&#xA;//                         cell (e.g. &apos;style=&quot;color:red;&quot;&apos;).&#xA;metaData.css = &apos;name-of-css-class-you-will-define&apos;;&#xA;return value;&#xA;&#xA;&#xA;&#xA;&#xA;var grid = new Ext.grid.GridPanel({&#xA;...&#xA;columns: [{&#xA;header: &apos;Last Updated&apos;,&#xA;dataIndex: &apos;lastChange&apos;,&#xA;width: 85,&#xA;sortable: true,&#xA;//renderer: Ext.util.Format.dateRenderer(&apos;m/d/Y&apos;),&#xA;xtype: &apos;datecolumn&apos;, // use xtype instead of renderer&#xA;format: &apos;M/d/Y&apos; // configuration property for {@link Ext.grid.DateColumn}&#xA;}, {&#xA;...&#xA;});&#xA;&#xA;*/// private. Used by ColumnModel to avoid reprocessing" line="230" name="isColumn" />
            <scope citdl="Function" doc="Optional. A function which returns displayable data when passed the following parameters:&#xA;&#xA;value : ObjectThe data value for the cell.&#xA;metadata : ObjectAn object in which you may set the following attributes:&#xA;css : StringA CSS class name to add to the cell&apos;s TD element.&#xA;attr : StringAn HTML attribute definition string to apply to the data container&#xA;element within the table cell (e.g. &apos;style=&quot;color:red;&quot;&apos;).&#xA;record : Ext.data.recordThe {@link Ext.data.Record} from which the data was&#xA;extracted.&#xA;rowIndex : NumberRow index&#xA;colIndex : NumberColumn index&#xA;store : Ext.data.StoreThe {@link Ext.data.Store} object from which the Record&#xA;was extracted." ilk="function" line="249" lineend="254" name="renderer" returns="value" signature="renderer(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope ilk="function" line="257" lineend="259" name="getEditor" returns="this.editable" signature="getEditor(rowIndex)">
              <variable ilk="argument" name="rowIndex" />
              <variable citdl="Column" name="this" />
            </scope>
            <scope doc="Returns the {@link Ext.Editor editor} defined for this column that was created to wrap the {@link Ext.form.Field Field}&#xA;used to edit the cell." ilk="function" line="267" lineend="280" name="getCellEditor" returns="Ext.Editor" signature="getCellEditor(rowIndex)">
              <variable citdl="Number" doc="The row index" ilk="argument" name="rowIndex" />
              <variable citdl="Column" name="this" />
              <variable attributes="__local__ private" citdl="this.getEditor()" line="268" name="editor" />
            </scope>
            <variable citdl="Object" line="400" lineend="406" name="types">
              <variable citdl="Ext.grid.Column" line="401" name="gridcolumn" />
              <variable citdl="Ext.grid.BooleanColumn" line="402" name="booleancolumn" />
              <variable citdl="Ext.grid.NumberColumn" line="403" name="numbercolumn" />
              <variable citdl="Ext.grid.DateColumn" line="404" name="datecolumn" />
              <variable citdl="Ext.grid.TemplateColumn" line="405" name="templatecolumn" />
            </variable>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="14" lineend="17" name="AbstractSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Abstract base class for grid SelectionModels.  It provides the interface that should be&#xA;implemented by descendant classes.  This class should not be directly instantiated." ilk="function" line="14" lineend="17" name="AbstractSelectionModel" signature="AbstractSelectionModel()">
              <variable citdl="AbstractSelectionModel" name="this" />
            </scope>
            <variable citdl="Boolean" line="15" name="locked" />
            <scope citdl="Object" doc="The GridPanel for which this SelectionModel is handling selection. Read-only.&#xA;*//** @ignore Called by the grid automatically. Do not call directly. */" ilk="function" line="27" lineend="30" name="init" signature="init(grid)">
              <variable ilk="argument" name="grid" />
            </scope>
            <variable citdl="grid" line="28" name="grid" />
            <scope doc="Locks the selections." ilk="function" line="35" lineend="37" name="lock" signature="lock()" />
            <scope doc="Unlocks the selections." ilk="function" line="42" lineend="44" name="unlock" signature="unlock()" />
            <scope doc="Returns true if the selections are locked." ilk="function" line="50" lineend="52" name="isLocked" returns="Boolean" signature="isLocked()" />
            <scope ilk="function" line="54" lineend="56" name="destroy" signature="destroy()" />
          </scope>
          <scope classrefs="Ext.grid.AbstractSelectionModel" ilk="class" line="17" lineend="62" name="RowSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The default SelectionModel used by {@link Ext.grid.GridPanel}.&#xA;It supports multiple selections and keyboard selection/navigation. The objects stored&#xA;as selections and returned by {@link #getSelected}, and {@link #getSelections} are&#xA;the {@link Ext.data.Record Record}s which provide the data for the selected rows." ilk="function" line="17" lineend="62" name="RowSelectionModel" signature="RowSelectionModel(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="RowSelectionModel" name="this" />
              <scope attributes="__local__ private" ilk="function" line="19" lineend="21" name="(anonymous)" returns="o.id" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="21" name="selections" />
            <variable citdl="Boolean" line="23" name="last" />
            <variable citdl="Boolean" line="24" name="lastActive" />
            <variable citdl="Boolean" doc="true to allow selection of only one row at a time (defaults to false&#xA;allowing multiple selections)" line="70" name="singleSelect" />
            <scope doc="false to turn off moving the editor to the next row down when the enter key is pressed&#xA;or the next row up when shift + enter keys are pressed.&#xA;*/// private" ilk="function" line="78" lineend="127" name="initEvents" signature="initEvents()">
              <variable attributes="__local__ private" citdl="this.grid.view" line="123" name="view" />
            </scope>
            <variable citdl="Ext.KeyNav" line="121" name="rowNav" />
            <scope ilk="function" line="130" lineend="143" name="onRefresh" signature="onRefresh()">
              <variable attributes="__local__ private" line="131" name="index" />
              <variable attributes="__local__ private" citdl="this.grid.store" line="131" name="ds" />
              <variable attributes="__local__ private" citdl="this.getSelections()" line="132" name="s" />
              <variable attributes="__local__ private" citdl="s[i]" line="135" name="r" />
            </scope>
            <scope ilk="function" line="146" lineend="150" name="onRemove" signature="onRemove(v, index, r)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="r" />
            </scope>
            <scope ilk="function" line="153" lineend="157" name="onRowUpdated" signature="onRowUpdated(v, index, r)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="r" />
            </scope>
            <scope doc="Select records." ilk="function" line="164" lineend="172" name="selectRecords" signature="selectRecords(records, keepExisting)">
              <variable citdl="Array" doc="The records to select" ilk="argument" name="records" />
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
              <variable attributes="__local__ private" citdl="this.grid.store" line="168" name="ds" />
            </scope>
            <scope doc="Gets the number of selected rows." ilk="function" line="178" lineend="180" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Selects the first row in the grid." ilk="function" line="185" lineend="187" name="selectFirstRow" signature="selectFirstRow()" />
            <scope doc="Select the last row." ilk="function" line="193" lineend="195" name="selectLastRow" signature="selectLastRow(keepExisting)">
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Selects the row immediately following the last selected row." ilk="function" line="202" lineend="209" name="selectNext" returns="Boolean" signature="selectNext(keepExisting)">
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Selects the row that precedes the last selected row." ilk="function" line="216" lineend="223" name="selectPrevious" returns="Boolean" signature="selectPrevious(keepExisting)">
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Returns true if there is a next record to select" ilk="function" line="229" lineend="231" name="hasNext" returns="Boolean" signature="hasNext()" />
            <scope doc="Returns true if there is a previous record to select" ilk="function" line="237" lineend="239" name="hasPrevious" returns="Boolean" signature="hasPrevious()" />
            <scope doc="Returns the selected records" ilk="function" line="246" lineend="248" name="getSelections" returns="Array" signature="getSelections()" />
            <scope doc="Returns the first selected record." ilk="function" line="254" lineend="256" name="getSelected" returns="Record" signature="getSelected()" />
            <scope doc="Calls the passed function with each selection. If the function returns&#xA;false, iteration is stopped and this function returns&#xA;false. Otherwise it returns true." ilk="function" line="266" lineend="274" name="each" returns="Boolean" signature="each(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.getSelections()" line="267" name="s" />
            </scope>
            <scope doc="Clears all selections if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}." ilk="function" line="282" lineend="297" name="clearSelections" signature="clearSelections(fast)">
              <variable citdl="Boolean" doc="(optional) true to bypass the&#xA;conditional checks and events described in {@link #deselectRow}." ilk="argument" name="fast" />
              <variable attributes="__local__ private" citdl="this.grid.store" line="287" name="ds" />
              <variable attributes="__local__ private" citdl="this.selections" line="288" name="s" />
              <scope attributes="__local__ private" ilk="function" line="289" lineend="291" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Selects all rows if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}." ilk="function" line="304" lineend="312" name="selectAll" signature="selectAll()" />
            <scope doc="Returns true if there is a selection." ilk="function" line="318" lineend="320" name="hasSelection" returns="Boolean" signature="hasSelection()" />
            <scope doc="Returns true if the specified row is selected." ilk="function" line="327" lineend="330" name="isSelected" returns="Boolean" signature="isSelected(index)">
              <variable citdl="Number/Record" doc="The record or index of the record to check" ilk="argument" name="index" />
              <variable attributes="__local__ private" line="328" name="r" />
            </scope>
            <scope doc="Returns true if the specified record id is selected." ilk="function" line="337" lineend="339" name="isIdSelected" returns="Boolean" signature="isIdSelected(id)">
              <variable citdl="String" doc="The id of record to check" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="342" lineend="361" name="handleMouseDown" signature="handleMouseDown(g, rowIndex, e)">
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="rowIndex" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.grid.getView()" line="346" name="view" />
              <variable attributes="__local__ private" citdl="this.last" line="348" name="last" />
              <variable attributes="__local__ private" citdl="this.isSelected()" line="353" name="isSelected" />
            </scope>
            <scope doc="Selects multiple rows." ilk="function" line="369" lineend="376" name="selectRows" signature="selectRows(rows, keepExisting)">
              <variable citdl="Array" doc="Array of the indexes of the row to select" ilk="argument" name="rows" />
              <variable citdl="Boolean" doc="(optional) true to keep&#xA;existing selections (defaults to false)" ilk="argument" name="keepExisting" />
            </scope>
            <scope doc="Selects a range of rows if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.&#xA;All rows in between startRow and endRow are also selected." ilk="function" line="386" lineend="403" name="selectRange" signature="selectRange(startRow, endRow, keepExisting)">
              <variable citdl="Number" doc="The index of the first row in the range" ilk="argument" name="startRow" />
              <variable citdl="Number" doc="The index of the last row in the range" ilk="argument" name="endRow" />
              <variable citdl="Boolean" doc="(optional) True to retain existing selections" ilk="argument" name="keepExisting" />
              <variable attributes="__local__ private" line="387" name="i" />
            </scope>
            <scope doc="Deselects a range of rows if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is not locked}.&#xA;All rows in between startRow and endRow are also deselected." ilk="function" line="412" lineend="419" name="deselectRange" signature="deselectRange(startRow, endRow, preventViewNotify)">
              <variable citdl="Number" doc="The index of the first row in the range" ilk="argument" name="startRow" />
              <variable citdl="Number" doc="The index of the last row in the range" ilk="argument" name="endRow" />
              <variable ilk="argument" name="preventViewNotify" />
            </scope>
            <scope doc="Selects a row.  Before selecting a row, checks if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is locked} and fires the&#xA;{@link #beforerowselect} event.  If these checks are satisfied the row&#xA;will be selected and followed up by  firing the {@link #rowselect} and&#xA;{@link #selectionchange} events." ilk="function" line="432" lineend="449" name="selectRow" signature="selectRow(index, keepExisting, preventViewNotify)">
              <variable ilk="argument" name="index" />
              <variable citdl="Boolean" doc="(optional) true to keep existing selections" ilk="argument" name="keepExisting" />
              <variable citdl="Boolean" doc="(optional) Specify true to&#xA;prevent notifying the view (disables updating the selected appearance)" ilk="argument" name="preventViewNotify" />
              <variable attributes="__local__ private" citdl="this.grid.store.getAt()" line="436" name="r" />
            </scope>
            <scope doc="Deselects a row.  Before deselecting a row, checks if the selection model&#xA;{@link Ext.grid.AbstractSelectionModel#isLocked is locked}.&#xA;If this check is satisfied the row will be deselected and followed up by&#xA;firing the {@link #rowdeselect} and {@link #selectionchange} events." ilk="function" line="460" lineend="479" name="deselectRow" signature="deselectRow(index, preventViewNotify)">
              <variable ilk="argument" name="index" />
              <variable citdl="Boolean" doc="(optional) Specify true to&#xA;prevent notifying the view (disables updating the selected appearance)" ilk="argument" name="preventViewNotify" />
              <variable attributes="__local__ private" citdl="this.grid.store.getAt()" line="470" name="r" />
            </scope>
            <scope ilk="function" line="482" lineend="486" name="restoreLast" signature="restoreLast()" />
            <scope ilk="function" line="489" lineend="491" name="acceptsNav" signature="acceptsNav(row, col, cm)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="cm" />
            </scope>
            <scope ilk="function" line="494" lineend="521" name="onEditorKey" signature="onEditorKey(field, e)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="g.activeEditor" line="495" name="ed" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="495" name="k" />
              <variable attributes="__local__ private" citdl="g.walkCells()" line="495" name="newCell" />
              <variable attributes="__local__ private" citdl="this.grid" line="495" name="g" />
              <variable attributes="__local__ private" citdl="e.shiftKey" line="496" name="shift" />
            </scope>
            <scope ilk="function" line="523" lineend="529" name="destroy" signature="destroy()" />
          </scope>
          <scope classrefs="Ext.dd.DragZone" ilk="class" line="17" lineend="24" name="GridDragZone">
            <scope attributes="__ctor__" doc="A customized implementation of a {@link Ext.dd.DragZone DragZone} which provides default implementations of two of the&#xA;template methods of DragZone to enable dragging of the selected rows of a GridPanel.&#xA;A cooperating {@link Ext.dd.DropZone DropZone} must be created who&apos;s template method implementations of&#xA;{@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},&#xA;{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} are able&#xA;to process the {@link #getDragData data} which is provided." ilk="function" line="17" lineend="24" name="GridDragZone" signature="GridDragZone(grid, config)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="config" />
              <variable citdl="GridDragZone" name="this" />
            </scope>
            <variable citdl="grid.getView()" line="18" name="view" />
            <variable citdl="Boolean" line="20" name="scroll" />
            <variable citdl="grid" line="21" name="grid" />
            <variable citdl="document.createElement()" line="22" name="ddel" />
            <variable citdl="String" line="27" name="ddGroup" />
            <scope doc="The provided implementation of the getDragData method which collects the data to be dragged from the GridPanel on mousedown.&#xA;This data is available for processing in the {@link Ext.dd.DropZone#onNodeEnter onNodeEnter}, {@link Ext.dd.DropZone#onNodeOver onNodeOver},&#xA;{@link Ext.dd.DropZone#onNodeOut onNodeOut} and {@link Ext.dd.DropZone#onNodeDrop onNodeDrop} methods of a cooperating {@link Ext.dd.DropZone DropZone}.&#xA;The data object contains the following properties:&#xA;grid : Ext.Grid.GridPanelThe GridPanel from which the data is being dragged.&#xA;ddel : htmlElementAn htmlElement which provides the &quot;picture&quot; of the data being dragged.&#xA;rowIndex : NumberThe index of the row which receieved the mousedown gesture which triggered the drag.&#xA;selections : ArrayAn Array of the selected Records which are being dragged from the GridPanel." ilk="function" line="40" lineend="51" name="getDragData" returns="Boolean" signature="getDragData(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="41" name="t" />
              <variable attributes="__local__ private" citdl="this.view.findRowIndex()" line="42" name="rowIndex" />
              <variable attributes="__local__ private" citdl="this.grid.selModel" line="44" name="sm" />
            </scope>
            <scope doc="The provided implementation of the onInitDrag method. Sets the innerHTML of the drag proxy which provides the &quot;picture&quot;&#xA;of the data being dragged.&#xA;The innerHTML data is found by calling the owning GridPanel&apos;s {@link Ext.grid.GridPanel#getDragDropText getDragDropText}." ilk="function" line="58" lineend="63" name="onInitDrag" signature="onInitDrag(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.dragData" line="59" name="data" />
            </scope>
            <scope doc="An empty immplementation. Implement this to provide behaviour after a repair of an invalid drop. An implementation might highlight&#xA;the selected rows to show that they have not been dragged." ilk="function" line="69" lineend="71" name="afterRepair" signature="afterRepair()" />
            <variable citdl="Boolean" line="70" name="dragging" />
            <scope doc="An empty implementation. Implement this to provide coordinates for the drag proxy to slide back to after an invalid drop.&#xA;Called before a repair of an invalid drop to get the XY to animate to." ilk="function" line="79" lineend="81" name="getRepairXY" returns="Array" signature="getRepairXY(e, data)">
              <variable citdl="EventObject" doc="The mouse up event" ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="83" lineend="85" name="onEndDrag" signature="onEndDrag(data, e)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="87" lineend="90" name="onValidDrop" signature="onValidDrop(dd, e, id)">
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="92" lineend="94" name="beforeInvalidDrop" signature="beforeInvalidDrop(e, id)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="id" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="18" lineend="76" name="GridView">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class encapsulates the user interface of an {@link Ext.grid.GridPanel}.&#xA;Methods of this class may be used to access user interface elements to enable&#xA;special display effects. Do not change the DOM structure of the user interface.&#xA;This class does not provide ways to manipulate the underlying data. The data&#xA;model of a Grid is held in an {@link Ext.data.Store}." ilk="function" line="18" lineend="76" name="GridView" signature="GridView(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="GridView" name="this" />
            </scope>
            <variable citdl="Ext.grid.GridDragZone" doc="Override this function to apply custom CSS classes to rows during rendering.  You can also supply custom&#xA;parameters to the row template for the current row to customize how it is rendered using the rowParams&#xA;parameter.  This function should return the CSS class name (or empty string &apos;&apos; for none) that will be added&#xA;to the row&apos;s wrapping div.  To apply multiple class names, simply return them space-delimited within the string&#xA;(e.g., &apos;my-class another-class&apos;). Example usage:&#xA;viewConfig: {&#xA;forceFit: true,&#xA;showPreview: true, // custom property&#xA;enableRowBody: true, // required to create a second, full-width row to show expanded Record data&#xA;getRowClass: function(record, rowIndex, rp, ds){ // rp = rowParams&#xA;if(this.showPreview){&#xA;rp.body = &apos;&amp;lt;p&gt;&apos;+record.data.excerpt+&apos;&amp;lt;/p&gt;&apos;;&#xA;return &apos;x-grid3-row-expanded&apos;;&#xA;return &apos;x-grid3-row-collapsed&apos;;&#xA;&#xA;&#xA;&#xA;&#xA;this.mainBody.update(&apos;&amp;lt;div class=&quot;x-grid-empty&quot;&gt;&apos; + this.emptyText + &apos;&amp;lt;/div&gt;&apos;);" line="153" name="deferEmptyText" />
            <variable citdl="Number" doc="(defaults to 19 pixels)." line="158" name="scrollOffset" />
            <variable citdl="Boolean" doc="Defaults to false.  Specify true to have the column widths re-proportioned&#xA;when the grid is initially rendered.  The&#xA;{@link Ext.grid.Column#width initially configured width} of each column will be adjusted&#xA;to fit the grid width and prevent horizontal scrolling. If columns are later resized (manually&#xA;or programmatically), the other columns in the grid will not be resized to fit the grid width.&#xA;See {@link #forceFit} also." line="168" name="autoFill" />
            <variable citdl="Boolean" doc="Defaults to false.  Specify true to have the column widths re-proportioned&#xA;at all times.  The {@link Ext.grid.Column#width initially configured width} of each&#xA;column will be adjusted to fit the grid width and prevent horizontal scrolling. If columns are&#xA;later resized (manually or programmatically), the other columns in the grid will be resized&#xA;to fit the grid width. See {@link #autoFill} also." line="177" name="forceFit" />
            <variable citdl="Array" line="181" name="sortClasses" />
            <variable citdl="String" line="185" name="sortAscText" />
            <variable citdl="String" line="189" name="sortDescText" />
            <variable citdl="String" line="193" name="columnsText" />
            <variable citdl="String" doc="example overriding the default styling:&#xA;.x-grid3-row-selected {background-color: yellow;}&#xA;Note that this only controls the row, and will not do anything for the text inside it.  To style inner&#xA;facets (like text) use something like:&#xA;.x-grid3-row-selected .x-grid3-cell-inner {&#xA;color: #FFCC00;" line="210" name="selectedRowClass" />
            <variable citdl="Number" line="213" name="borderWidth" />
            <variable citdl="String" line="214" name="tdClass" />
            <variable citdl="String" line="215" name="hdCls" />
            <variable citdl="Boolean" line="216" name="markDirty" />
            <variable citdl="Number" line="221" name="cellSelectorDepth" />
            <variable citdl="Number" line="225" name="rowSelectorDepth" />
            <variable citdl="String" line="230" name="cellSelector" />
            <variable citdl="String" line="234" name="rowSelector" />
            <variable citdl="String" line="237" name="firstRowCls" />
            <variable citdl="String" line="238" name="lastRowCls" />
            <variable line="239" name="rowClsRe" />
            <scope ilk="function" line="244" lineend="306" name="initTemplates" signature="initTemplates()">
              <variable attributes="__local__ private" citdl="this.templates" line="245" name="ts" />
              <variable attributes="__local__ private" citdl="ts[k]" line="297" name="t" />
            </scope>
            <variable citdl="ts" line="304" name="templates" />
            <variable citdl="RegExp" line="305" name="colRe" />
            <scope ilk="function" line="309" lineend="315" name="fly" returns="this._flyweight" signature="fly(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <variable citdl="Ext.Element.Flyweight" line="311" name="_flyweight" />
            <scope ilk="function" line="318" lineend="320" name="getEditorParent" returns="this.scroller.dom" signature="getEditorParent()" />
            <scope ilk="function" line="323" lineend="356" name="initElements" signature="initElements()">
              <variable attributes="__local__ private" citdl="Ext.Element" line="324" name="E" />
              <variable attributes="__local__ private" citdl="this.grid.getGridEl().dom.firstChild" line="326" name="el" />
              <variable attributes="__local__ private" citdl="el.childNodes" line="327" name="cs" />
            </scope>
            <variable citdl="E" line="329" name="el" />
            <variable citdl="E" line="331" name="mainWrap" />
            <variable citdl="E" line="332" name="mainHd" />
            <variable citdl="this.mainHd.dom.firstChild" line="338" name="innerHd" />
            <variable citdl="E" line="339" name="scroller" />
            <variable citdl="Ext.Element" doc="Read-only. The GridView&apos;s body Element which encapsulates all rows in the Grid.&#xA;This {@link Ext.Element Element} is only available after the GridPanel has been rendered." line="349" name="mainBody" />
            <variable citdl="E" line="351" name="focusEl" />
            <variable citdl="E" line="354" name="resizeMarker" />
            <variable citdl="E" line="355" name="resizeProxy" />
            <scope ilk="function" line="359" lineend="361" name="getRows" returns="this.hasRows()" signature="getRows()" />
            <scope ilk="function" line="366" lineend="371" name="findCell" returns="this.fly().findParent()" signature="findCell(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <scope doc="Return the index of the grid column which contains the passed element.&#xA;See also {@link #findRowIndex}" ilk="function" line="379" lineend="385" name="findCellIndex" returns="Boolean" signature="findCellIndex(el, requiredCls)">
              <variable citdl="Element" doc="The target element" ilk="argument" name="el" />
              <variable ilk="argument" name="requiredCls" />
              <variable attributes="__local__ private" citdl="this.findCell()" line="380" name="cell" />
            </scope>
            <scope ilk="function" line="388" lineend="396" name="getCellIndex" returns="Boolean" signature="getCellIndex(el)">
              <variable ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="el.className.match()" line="390" name="m" />
            </scope>
            <scope ilk="function" line="399" lineend="402" name="findHeaderCell" returns="cell" signature="findHeaderCell(el)">
              <variable ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="this.findCell()" line="400" name="cell" />
            </scope>
            <scope ilk="function" line="405" lineend="407" name="findHeaderIndex" returns="this.findCellIndex()" signature="findHeaderIndex(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <scope doc="Return the HtmlElement representing the grid row which contains the passed element." ilk="function" line="414" lineend="419" name="findRow" returns="this.fly().findParent()" signature="findRow(el)">
              <variable citdl="Element" doc="The target element" ilk="argument" name="el" />
            </scope>
            <scope doc="Return the index of the grid row which contains the passed element.&#xA;See also {@link #findCellIndex}" ilk="function" line="427" lineend="430" name="findRowIndex" returns="r" signature="findRowIndex(el)">
              <variable citdl="Element" doc="The target element" ilk="argument" name="el" />
              <variable attributes="__local__ private" citdl="this.findRow()" line="428" name="r" />
            </scope>
            <scope doc="Return the &amp;lt;div&gt; HtmlElement which represents a Grid row for the specified index." ilk="function" line="439" lineend="441" name="getRow" returns="HTMLElement" signature="getRow(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope doc="Returns the grid&apos;s &amp;lt;td&gt; HtmlElement at the specified coordinates." ilk="function" line="449" lineend="451" name="getCell" returns="HTMLElement" signature="getCell(row, col)">
              <variable citdl="Number" doc="The row index in which to find the cell." ilk="argument" name="row" />
              <variable citdl="Number" doc="The column index of the cell." ilk="argument" name="col" />
            </scope>
            <scope doc="Return the &amp;lt;td&gt; HtmlElement which represents the Grid&apos;s header cell for the specified column index." ilk="function" line="458" lineend="460" name="getHeaderCell" returns="HTMLElement" signature="getHeaderCell(index)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="465" lineend="470" name="addRowClass" signature="addRowClass(row, cls)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="cls" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="466" name="r" />
            </scope>
            <scope ilk="function" line="473" lineend="478" name="removeRowClass" signature="removeRowClass(row, cls)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="cls" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="474" name="r" />
            </scope>
            <scope ilk="function" line="481" lineend="484" name="removeRow" signature="removeRow(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="487" lineend="493" name="removeRows" signature="removeRows(firstRow, lastRow)">
              <variable ilk="argument" name="firstRow" />
              <variable ilk="argument" name="lastRow" />
              <variable attributes="__local__ private" citdl="this.mainBody.dom" line="488" name="bd" />
            </scope>
            <scope ilk="function" line="498" lineend="501" name="getScrollState" signature="getScrollState()">
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="499" name="sb" />
            </scope>
            <scope ilk="function" line="504" lineend="508" name="restoreScroll" signature="restoreScroll(state)">
              <variable ilk="argument" name="state" />
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="505" name="sb" />
            </scope>
            <scope doc="Scrolls the grid to the top" ilk="function" line="513" lineend="516" name="scrollToTop" signature="scrollToTop()" />
            <scope ilk="function" line="519" lineend="523" name="syncScroll" signature="syncScroll()">
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="521" name="mb" />
            </scope>
            <scope ilk="function" line="526" lineend="530" name="syncHeaderScroll" signature="syncHeaderScroll()">
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="527" name="mb" />
            </scope>
            <scope ilk="function" line="533" lineend="537" name="updateSortIcon" signature="updateSortIcon(col, dir)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="dir" />
              <variable attributes="__local__ private" citdl="this.sortClasses" line="534" name="sc" />
              <variable attributes="__local__ private" citdl="this.mainHd.select().removeClass()" line="535" name="hds" />
            </scope>
            <scope ilk="function" line="540" lineend="571" name="updateAllColumnWidths" signature="updateAllColumnWidths()">
              <variable attributes="__local__ private" line="545" name="i" />
              <variable attributes="__local__ private" citdl="this.getTotalWidth()" line="545" name="tw" />
              <variable attributes="__local__ private" line="545" name="len" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnCount()" line="545" name="clen" />
              <variable attributes="__local__ private" citdl="Array" line="545" name="ws" />
              <variable attributes="__local__ private" citdl="this.getHeaderCell()" line="553" name="hd" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="557" name="ns" />
              <variable attributes="__local__ private" citdl="row.firstChild.rows[0]" line="557" name="trow" />
              <variable attributes="__local__ private" citdl="ns[i]" line="557" name="row" />
            </scope>
            <scope ilk="function" line="574" lineend="594" name="updateColumnWidth" signature="updateColumnWidth(col, width)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="width" />
              <variable attributes="__local__ private" citdl="this.getColumnWidth()" line="575" name="w" />
              <variable attributes="__local__ private" citdl="this.getTotalWidth()" line="576" name="tw" />
              <variable attributes="__local__ private" citdl="this.getHeaderCell()" line="580" name="hd" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="583" name="ns" />
              <variable attributes="__local__ private" citdl="ns[i]" line="583" name="row" />
            </scope>
            <scope ilk="function" line="597" lineend="620" name="updateColumnHidden" signature="updateColumnHidden(col, hidden)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hidden" />
              <variable attributes="__local__ private" citdl="this.getTotalWidth()" line="598" name="tw" />
              <variable attributes="__local__ private" citdl="hidden" line="602" name="display" />
              <variable attributes="__local__ private" citdl="this.getHeaderCell()" line="604" name="hd" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="607" name="ns" />
              <variable attributes="__local__ private" citdl="ns[i]" line="607" name="row" />
            </scope>
            <scope ilk="function" line="623" lineend="662" name="doRender" returns="buf.join()" signature="doRender(cs, rs, ds, startRow, colCount, stripe)">
              <variable ilk="argument" name="cs" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="startRow" />
              <variable ilk="argument" name="colCount" />
              <variable ilk="argument" name="stripe" />
              <variable attributes="__local__ private" citdl="ts.row" line="624" name="rt" />
              <variable attributes="__local__ private" citdl="colCount" line="624" name="last" />
              <variable attributes="__local__ private" citdl="this.templates" line="624" name="ts" />
              <variable attributes="__local__ private" citdl="ts.cell" line="624" name="ct" />
              <variable attributes="__local__ private" citdl="String" line="625" name="tstyle" />
              <variable attributes="__local__ private" citdl="cs[i]" line="627" name="c" />
              <variable attributes="__local__ private" citdl="Array" line="627" name="cb" />
              <variable attributes="__local__ private" citdl="Object" line="627" lineend="627" name="p">
                <variable citdl="c.id" line="633" name="id" />
                <variable citdl="i" line="634" name="css" />
                <variable citdl="p.cellAttr" line="635" name="attr" />
                <variable citdl="String" line="635" name="cellAttr" />
                <variable citdl="c.renderer()" line="636" name="value" />
                <variable citdl="c.style" line="637" name="style" />
              </variable>
              <variable attributes="__local__ private" citdl="rs[j]" line="627" name="r" />
              <variable attributes="__local__ private" citdl="Object" line="627" lineend="627" name="rp">
                <variable citdl="tstyle" line="627" name="tstyle" />
                <variable citdl="colCount" line="653" name="cols" />
                <variable citdl="alt.join()" line="657" name="alt" />
                <variable citdl="cb.join()" line="658" name="cells" />
              </variable>
              <variable attributes="__local__ private" citdl="Array" line="627" name="buf" />
              <variable attributes="__local__ private" line="630" name="rowIndex" />
              <variable attributes="__local__ private" citdl="Array" line="646" name="alt" />
            </scope>
            <scope ilk="function" line="665" lineend="684" name="processRows" signature="processRows(startRow, skipStripe)">
              <variable citdl="startRow" ilk="argument" name="startRow" />
              <variable citdl="skipStripe" ilk="argument" name="skipStripe" />
              <variable attributes="__local__ private" citdl="this.getRows()" line="669" name="rows" />
            </scope>
            <scope ilk="function" line="686" lineend="696" name="afterRender" signature="afterRender()" />
            <scope ilk="function" line="699" lineend="777" name="renderUI" signature="renderUI()">
              <variable attributes="__local__ private" citdl="this.renderHeaders()" line="701" name="header" />
              <variable attributes="__local__ private" citdl="this.templates.body.apply()" line="702" name="body" />
              <variable attributes="__local__ private" citdl="this.templates.master.apply()" line="710" name="html" />
              <variable attributes="__local__ private" citdl="this.grid" line="712" name="g" />
            </scope>
            <variable citdl="Ext.grid.GridView.SplitDragZone" line="729" name="splitZone" />
            <variable citdl="Ext.grid.GridView.ColumnDragZone" line="733" name="columnDrag" />
            <variable citdl="Ext.grid.HeaderDropZone" line="734" name="columnDrop" />
            <variable citdl="Ext.menu.Menu" line="738" name="hmenu" />
            <variable citdl="Ext.menu.Menu" line="744" name="colMenu" />
            <variable citdl="Ext.grid.GridDragZone" line="772" name="dragZone" />
            <scope ilk="function" line="780" lineend="819" name="layout" signature="layout()">
              <variable attributes="__local__ private" citdl="this.grid" line="784" name="g" />
              <variable attributes="__local__ private" citdl="g.getGridEl()" line="785" name="c" />
              <variable attributes="__local__ private" citdl="c.getSize()" line="786" name="csize" />
              <variable attributes="__local__ private" citdl="csize.width" line="787" name="vw" />
              <variable attributes="__local__ private" citdl="this.mainHd.getHeight()" line="801" name="hdHeight" />
              <variable attributes="__local__ private" citdl="csize.height" line="802" name="vh" />
            </scope>
            <variable citdl="vw" line="812" name="lastViewWidth" />
            <scope ilk="function" line="823" lineend="825" name="onLayout" signature="onLayout(vw, vh)">
              <variable ilk="argument" name="vw" />
              <variable ilk="argument" name="vh" />
            </scope>
            <scope ilk="function" line="827" lineend="829" name="onColumnWidthUpdated" signature="onColumnWidthUpdated(col, w, tw)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="w" />
              <variable ilk="argument" name="tw" />
            </scope>
            <scope ilk="function" line="831" lineend="833" name="onAllColumnWidthsUpdated" signature="onAllColumnWidthsUpdated(ws, tw)">
              <variable ilk="argument" name="ws" />
              <variable ilk="argument" name="tw" />
            </scope>
            <scope ilk="function" line="835" lineend="837" name="onColumnHiddenUpdated" signature="onColumnHiddenUpdated(col, hidden, tw)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hidden" />
              <variable ilk="argument" name="tw" />
            </scope>
            <scope ilk="function" line="839" lineend="841" name="updateColumnText" signature="updateColumnText(col, text)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope ilk="function" line="843" lineend="845" name="afterMove" signature="afterMove(colIndex)">
              <variable ilk="argument" name="colIndex" />
            </scope>
            <scope ilk="function" line="849" lineend="855" name="init" signature="init(grid)">
              <variable ilk="argument" name="grid" />
            </scope>
            <variable citdl="grid" line="850" name="grid" />
            <scope ilk="function" line="858" lineend="860" name="getColumnId" returns="this.cm.getColumnId()" signature="getColumnId(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="863" lineend="865" name="getOffsetWidth" signature="getOffsetWidth()" />
            <scope ilk="function" line="868" lineend="891" name="renderHeaders" returns="ts.header.apply()" signature="renderHeaders()">
              <variable attributes="__local__ private" citdl="this.cm" line="873" name="cm" />
              <variable attributes="__local__ private" citdl="Array" line="873" name="cb" />
              <variable attributes="__local__ private" citdl="this.templates" line="873" name="ts" />
              <variable attributes="__local__ private" citdl="Object" line="873" lineend="873" name="p">
                <variable citdl="cm.getColumnId()" line="878" name="id" />
                <variable citdl="cm.getColumnHeader()" line="879" name="value" />
                <variable citdl="this.getColumnStyle()" line="880" name="style" />
                <variable citdl="this.getColumnTooltip()" line="881" name="tooltip" />
                <variable citdl="i" line="882" name="css" />
                <variable citdl="String" line="884" name="istyle" />
              </variable>
              <variable attributes="__local__ private" citdl="ts.hcell" line="873" name="ct" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="874" name="len" />
              <variable attributes="__local__ private" citdl="len" line="875" name="last" />
            </scope>
            <scope ilk="function" line="894" lineend="904" name="getColumnTooltip" returns="String" signature="getColumnTooltip(i)">
              <variable ilk="argument" name="i" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnTooltip()" line="895" name="tt" />
            </scope>
            <scope ilk="function" line="907" lineend="909" name="beforeUpdate" signature="beforeUpdate()" />
            <scope ilk="function" line="912" lineend="916" name="updateHeaders" signature="updateHeaders()" />
            <scope doc="Focuses the specified row." ilk="function" line="922" lineend="924" name="focusRow" signature="focusRow(row)">
              <variable citdl="Number" doc="The row index" ilk="argument" name="row" />
            </scope>
            <scope doc="Focuses the specified cell." ilk="function" line="931" lineend="938" name="focusCell" signature="focusCell(row, col, hscroll)">
              <variable citdl="Number" doc="The row index" ilk="argument" name="row" />
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
            </scope>
            <scope ilk="function" line="940" lineend="964" name="resolveCell" signature="resolveCell(row, col, hscroll)">
              <variable citdl="row.rowIndex" ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
              <variable attributes="__local__ private" citdl="this.getCell()" line="955" name="cellEl" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="955" name="rowEl" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="955" name="colCount" />
              <variable attributes="__local__ private" citdl="this.cm" line="955" name="cm" />
            </scope>
            <scope ilk="function" line="966" lineend="972" name="getResolvedXY" returns="c" signature="getResolvedXY(resolved)">
              <variable ilk="argument" name="resolved" />
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="970" name="s" />
              <variable attributes="__local__ private" citdl="resolved.row" line="970" name="r" />
              <variable attributes="__local__ private" citdl="resolved.cell" line="970" name="c" />
            </scope>
            <scope ilk="function" line="974" lineend="981" name="syncFocusEl" signature="syncFocusEl(row, col, hscroll)">
              <variable citdl="Math.min()" ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
              <variable attributes="__local__ private" citdl="row" line="975" name="xy" />
            </scope>
            <scope ilk="function" line="983" lineend="1028" name="ensureVisible" returns="this.getResolvedXY()" signature="ensureVisible(row, col, hscroll)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hscroll" />
              <variable attributes="__local__ private" citdl="this.resolveCell()" line="984" name="resolved" />
              <variable attributes="__local__ private" citdl="resolved.cell" line="994" name="cellEl" />
              <variable attributes="__local__ private" citdl="this.scroller.dom" line="994" name="c" />
              <variable attributes="__local__ private" citdl="this.el.dom" line="994" name="stop" />
              <variable attributes="__local__ private" citdl="rowEl" line="994" name="p" />
              <variable attributes="__local__ private" citdl="resolved.row" line="994" name="rowEl" />
              <variable attributes="__local__ private" citdl="Number" line="994" name="ctop" />
              <variable attributes="__local__ private" citdl="c.clientHeight" line="1004" name="ch" />
              <variable attributes="__local__ private" citdl="stop" line="1004" name="sbot" />
              <variable attributes="__local__ private" citdl="ctop" line="1004" name="cbot" />
              <variable attributes="__local__ private" citdl="parseInt()" line="1016" name="cleft" />
              <variable attributes="__local__ private" citdl="cleft" line="1017" name="cright" />
              <variable attributes="__local__ private" citdl="parseInt()" line="1019" name="sleft" />
              <variable attributes="__local__ private" citdl="sleft" line="1020" name="sright" />
            </scope>
            <scope ilk="function" line="1031" lineend="1062" name="insertRows" signature="insertRows(dm, firstRow, lastRow, isUpdate)">
              <variable ilk="argument" name="dm" />
              <variable ilk="argument" name="firstRow" />
              <variable ilk="argument" name="lastRow" />
              <variable ilk="argument" name="isUpdate" />
              <variable attributes="__local__ private" citdl="dm.getCount()" line="1032" name="last" />
              <variable attributes="__local__ private" citdl="this.renderRows()" line="1040" name="html" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="1040" name="before" />
              <variable attributes="__local__ private" citdl="this.getRow()" line="1047" name="r" />
            </scope>
            <scope ilk="function" line="1065" lineend="1076" name="deleteRows" signature="deleteRows(dm, firstRow, lastRow)">
              <variable ilk="argument" name="dm" />
              <variable ilk="argument" name="firstRow" />
              <variable ilk="argument" name="lastRow" />
            </scope>
            <scope ilk="function" line="1079" lineend="1090" name="getColumnStyle" returns="style" signature="getColumnStyle(col, isHeader)">
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="isHeader" />
              <variable attributes="__local__ private" line="1080" name="style" />
              <variable attributes="__local__ private" citdl="this.cm.config[col].align" line="1085" name="align" />
            </scope>
            <scope ilk="function" line="1093" lineend="1099" name="getColumnWidth" returns="w" signature="getColumnWidth(col)">
              <variable ilk="argument" name="col" />
              <variable attributes="__local__ private" citdl="this.cm.getColumnWidth()" line="1094" name="w" />
            </scope>
            <scope ilk="function" line="1102" lineend="1104" name="getTotalWidth" returns="this.cm.getTotalWidth()" signature="getTotalWidth()" />
            <scope ilk="function" line="1107" lineend="1160" name="fitColumns" returns="Boolean" signature="fitColumns(preventRefresh, onlyExpand, omitColumn)">
              <variable ilk="argument" name="preventRefresh" />
              <variable ilk="argument" name="onlyExpand" />
              <variable ilk="argument" name="omitColumn" />
              <variable attributes="__local__ private" citdl="this.cm" line="1108" name="cm" />
              <variable attributes="__local__ private" citdl="cols.pop()" line="1108" name="i" />
              <variable attributes="__local__ private" citdl="cm.getTotalWidth()" line="1109" name="tw" />
              <variable attributes="__local__ private" citdl="this.grid.getGridEl().getWidth()" line="1110" name="aw" />
              <variable attributes="__local__ private" citdl="aw" line="1115" name="extra" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1121" name="vc" />
              <variable attributes="__local__ private" citdl="vc" line="1122" name="ac" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1127" name="colCount" />
              <variable attributes="__local__ private" citdl="Array" line="1128" name="cols" />
              <variable attributes="__local__ private" citdl="Number" line="1129" name="extraCol" />
              <variable attributes="__local__ private" citdl="Number" line="1130" name="width" />
              <variable attributes="__local__ private" citdl="cm.getColumnWidth()" line="1131" name="w" />
              <variable attributes="__local__ private" line="1141" name="frac" />
              <variable attributes="__local__ private" citdl="ac" line="1149" name="adjustCol" />
            </scope>
            <scope ilk="function" line="1163" lineend="1180" name="autoExpand" signature="autoExpand(preventUpdate)">
              <variable ilk="argument" name="preventUpdate" />
              <variable attributes="__local__ private" citdl="this.grid" line="1164" name="g" />
              <variable attributes="__local__ private" citdl="this.cm" line="1164" name="cm" />
              <variable attributes="__local__ private" citdl="cm.getTotalWidth()" line="1166" name="tw" />
              <variable attributes="__local__ private" citdl="this.grid.getGridEl().getWidth()" line="1167" name="aw" />
              <variable attributes="__local__ private" citdl="cm.getIndexById()" line="1169" name="ci" />
              <variable attributes="__local__ private" citdl="cm.getColumnWidth()" line="1170" name="currentWidth" />
              <variable attributes="__local__ private" citdl="Math.min()" line="1171" name="cw" />
            </scope>
            <scope ilk="function" line="1183" lineend="1196" name="getColumnData" returns="cs" signature="getColumnData()">
              <variable attributes="__local__ private" citdl="Array" line="1185" name="cs" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1185" name="colCount" />
              <variable attributes="__local__ private" citdl="this.cm" line="1185" name="cm" />
              <variable attributes="__local__ private" citdl="cm.getDataIndex()" line="1187" name="name" />
            </scope>
            <scope ilk="function" line="1199" lineend="1217" name="renderRows" returns="this.doRender()" signature="renderRows(startRow, endRow)">
              <variable citdl="startRow" ilk="argument" name="startRow" />
              <variable ilk="argument" name="endRow" />
              <variable attributes="__local__ private" citdl="this.grid" line="1201" name="g" />
              <variable attributes="__local__ private" citdl="g.colModel" line="1201" name="cm" />
              <variable attributes="__local__ private" citdl="g.stripeRows" line="1201" name="stripe" />
              <variable attributes="__local__ private" citdl="g.store" line="1201" name="ds" />
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1202" name="colCount" />
              <variable attributes="__local__ private" citdl="this.getColumnData()" line="1208" name="cs" />
              <variable attributes="__local__ private" citdl="ds.getRange()" line="1214" name="rs" />
            </scope>
            <scope ilk="function" line="1220" lineend="1223" name="renderBody" returns="this.templates.body.apply()" signature="renderBody()">
              <variable attributes="__local__ private" citdl="this.renderRows()" line="1221" name="markup" />
            </scope>
            <scope ilk="function" line="1226" lineend="1244" name="refreshRow" signature="refreshRow(record)">
              <variable citdl="ds.getAt()" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="record" line="1227" name="index" />
              <variable attributes="__local__ private" citdl="this.ds" line="1227" name="ds" />
            </scope>
            <scope doc="Refreshs the grid UI" ilk="function" line="1250" lineend="1264" name="refresh" signature="refresh(headersToo)">
              <variable citdl="Boolean" doc="(optional) True to also refresh the headers" ilk="argument" name="headersToo" />
              <variable attributes="__local__ private" citdl="this.renderBody()" line="1254" name="result" />
            </scope>
            <scope ilk="function" line="1267" lineend="1271" name="applyEmptyText" signature="applyEmptyText()" />
            <scope ilk="function" line="1274" lineend="1288" name="updateHeaderSortState" signature="updateHeaderSortState()">
              <variable attributes="__local__ private" citdl="this.ds.getSortState()" line="1275" name="state" />
              <variable attributes="__local__ private" citdl="this.cm.findColumnIndex()" line="1283" name="sortColumn" />
              <variable attributes="__local__ private" citdl="state.direction" line="1285" name="sortDir" />
            </scope>
            <variable citdl="state" line="1282" name="sortState" />
            <scope ilk="function" line="1291" lineend="1337" name="destroy" signature="destroy()">
              <variable attributes="__local__ private" citdl="Ext.dd.DDM.ids[&apos;gridHeader&apos;+this.grid.getGridEl().id]" line="1303" name="dds" />
              <variable attributes="__local__ private" citdl="dds[dd].dragElId" line="1307" name="elid" />
            </scope>
            <scope ilk="function" line="1340" lineend="1342" name="onDenyColumnHide" signature="onDenyColumnHide()" />
            <scope ilk="function" line="1345" lineend="1363" name="render" signature="render()">
              <variable attributes="__local__ private" citdl="this.grid.ownerCt" line="1347" name="ct" />
              <scope attributes="__local__ private" ilk="function" line="1349" lineend="1352" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="1367" lineend="1411" name="initData" signature="initData(ds, cm)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="cm" />
            </scope>
            <variable citdl="ds" line="1390" name="ds" />
            <variable citdl="cm" line="1410" name="cm" />
            <scope ilk="function" line="1414" lineend="1418" name="onDataChange" signature="onDataChange()" />
            <scope ilk="function" line="1421" lineend="1424" name="onClear" signature="onClear()" />
            <scope ilk="function" line="1427" lineend="1429" name="onUpdate" signature="onUpdate(ds, record)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="1432" lineend="1434" name="onAdd" signature="onAdd(ds, records, index)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="records" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="1437" lineend="1447" name="onRemove" signature="onRemove(ds, record, index, isUpdate)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="isUpdate" />
            </scope>
            <scope ilk="function" line="1450" lineend="1452" name="onLoad" signature="onLoad()" />
            <scope ilk="function" line="1455" lineend="1457" name="onColWidthChange" signature="onColWidthChange(cm, col, width)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="width" />
            </scope>
            <scope ilk="function" line="1460" lineend="1462" name="onHeaderChange" signature="onHeaderChange(cm, col, text)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="text" />
            </scope>
            <scope ilk="function" line="1465" lineend="1467" name="onHiddenChange" signature="onHiddenChange(cm, col, hidden)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="hidden" />
            </scope>
            <scope ilk="function" line="1470" lineend="1477" name="onColumnMove" signature="onColumnMove(cm, oldIndex, newIndex)">
              <variable ilk="argument" name="cm" />
              <variable ilk="argument" name="oldIndex" />
              <variable ilk="argument" name="newIndex" />
              <variable attributes="__local__ private" citdl="this.getScrollState()" line="1472" name="s" />
            </scope>
            <variable line="1471" name="indexMap" />
            <scope ilk="function" line="1480" lineend="1484" name="onColConfigChange" signature="onColConfigChange()" />
            <scope ilk="function" line="1488" lineend="1490" name="initUI" signature="initUI(grid)">
              <variable ilk="argument" name="grid" />
            </scope>
            <scope ilk="function" line="1493" lineend="1494" name="initEvents" signature="initEvents()" />
            <scope ilk="function" line="1497" lineend="1503" name="onHeaderClick" signature="onHeaderClick(g, index)">
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="1506" lineend="1511" name="onRowOver" signature="onRowOver(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" line="1507" name="row" />
            </scope>
            <scope ilk="function" line="1514" lineend="1519" name="onRowOut" signature="onRowOut(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" line="1515" name="row" />
            </scope>
            <scope ilk="function" line="1522" lineend="1524" name="handleWheel" signature="handleWheel(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="1527" lineend="1529" name="onRowSelect" signature="onRowSelect(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="1532" lineend="1534" name="onRowDeselect" signature="onRowDeselect(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="1537" lineend="1542" name="onCellSelect" signature="onCellSelect(row, col)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable attributes="__local__ private" citdl="this.getCell()" line="1538" name="cell" />
            </scope>
            <scope ilk="function" line="1545" lineend="1550" name="onCellDeselect" signature="onCellDeselect(row, col)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable attributes="__local__ private" citdl="this.getCell()" line="1546" name="cell" />
            </scope>
            <scope ilk="function" line="1553" lineend="1567" name="onColumnSplitterMoved" signature="onColumnSplitterMoved(i, w)">
              <variable ilk="argument" name="i" />
              <variable ilk="argument" name="w" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="1555" name="cm" />
            </scope>
            <variable citdl="Boolean" line="1554" name="userResized" />
            <scope ilk="function" line="1570" lineend="1591" name="handleHdMenuClick" returns="Boolean" signature="handleHdMenuClick(item)">
              <variable ilk="argument" name="item" />
              <variable attributes="__local__ private" citdl="this.hdCtxIndex" line="1571" name="index" />
              <variable attributes="__local__ private" citdl="this.ds" line="1572" name="ds" />
              <variable attributes="__local__ private" citdl="this.cm" line="1572" name="cm" />
            </scope>
            <scope ilk="function" line="1594" lineend="1596" name="isHideableColumn" signature="isHideableColumn(c)">
              <variable ilk="argument" name="c" />
            </scope>
            <scope ilk="function" line="1599" lineend="1613" name="beforeColMenuShow" signature="beforeColMenuShow()">
              <variable attributes="__local__ private" citdl="cm.getColumnCount()" line="1600" name="colCount" />
              <variable attributes="__local__ private" citdl="this.cm" line="1600" name="cm" />
            </scope>
            <scope ilk="function" line="1616" lineend="1631" name="handleHdDown" signature="handleHdDown(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.findHeaderCell()" line="1619" name="hd" />
              <variable attributes="__local__ private" citdl="this.getCellIndex()" line="1621" name="index" />
              <variable attributes="__local__ private" citdl="this.cm" line="1623" name="cm" />
              <variable attributes="__local__ private" citdl="this.hmenu.items" line="1623" name="ms" />
              <scope attributes="__local__ private" ilk="function" line="1626" lineend="1628" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="index" line="1622" name="hdCtxIndex" />
            <scope ilk="function" line="1634" lineend="1649" name="handleHdOver" signature="handleHdOver(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.findHeaderCell()" line="1635" name="hd" />
              <variable attributes="__local__ private" citdl="this.fly()" line="1639" name="fly" />
            </scope>
            <variable citdl="hd" line="1637" name="activeHd" />
            <variable citdl="this.getCellIndex()" line="1638" name="activeHdIndex" />
            <variable citdl="fly.getRegion()" line="1640" name="activeHdRegion" />
            <variable citdl="fly.child()" line="1643" name="activeHdBtn" />
            <scope ilk="function" line="1652" lineend="1666" name="handleHdMove" signature="handleHdMove(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.splitHandleWidth" line="1654" name="hw" />
              <variable attributes="__local__ private" citdl="this.activeHdRegion" line="1655" name="r" />
              <variable attributes="__local__ private" citdl="e.getPageX()" line="1656" name="x" />
              <variable attributes="__local__ private" citdl="this.activeHd.style" line="1657" name="ss" />
            </scope>
            <scope ilk="function" line="1669" lineend="1676" name="handleHdOut" signature="handleHdOut(e, t)">
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="t" />
              <variable attributes="__local__ private" citdl="this.findHeaderCell()" line="1670" name="hd" />
            </scope>
            <scope ilk="function" line="1679" lineend="1682" name="hasRows" returns="fc" signature="hasRows()">
              <variable attributes="__local__ private" citdl="this.mainBody.dom.firstChild" line="1680" name="fc" />
            </scope>
            <scope ilk="function" line="1685" lineend="1687" name="bind" signature="bind(d, c)">
              <variable ilk="argument" name="d" />
              <variable ilk="argument" name="c" />
            </scope>
            <variable citdl="Object" line="1776" name="SplitDragZone" />
          </scope>
          <scope classrefs="Ext.grid.AbstractSelectionModel" ilk="class" line="20" lineend="57" name="CellSelectionModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This class provides the basic implementation for single cell selection in a grid.&#xA;The object stored as the selection contains the following properties:&#xA;&#xA;cell : see {@link #getSelectedCell}&#xA;record : Ext.data.record The {@link Ext.data.Record Record}&#xA;which provides the data for the row containing the selection" ilk="function" line="20" lineend="57" name="CellSelectionModel" signature="CellSelectionModel(config)">
              <variable citdl="Object" doc="The object containing the configuration of this model." ilk="argument" name="config" />
              <variable citdl="CellSelectionModel" name="this" />
            </scope>
            <scope ilk="function" line="62" lineend="73" name="initEvents" signature="initEvents()">
              <variable attributes="__local__ private" citdl="this.grid.view" line="65" name="view" />
            </scope>
            <scope ilk="function" line="76" lineend="78" name="beforeEdit" signature="beforeEdit(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="81" lineend="85" name="onRowUpdated" signature="onRowUpdated(v, index, r)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="r" />
            </scope>
            <scope ilk="function" line="88" lineend="90" name="onViewChange" signature="onViewChange()" />
            <scope doc="Returns an array containing the row and column indexes of the currently selected cell&#xA;(e.g., [0, 0]), or null if none selected. The array has elements:&#xA;&#xA;rowIndex : NumberThe index of the selected row&#xA;cellIndex : NumberThe index of the selected cell.&#xA;Due to possible column reordering, the cellIndex should not be used as an&#xA;index into the Record&apos;s data. Instead, use the cellIndex to determine the name&#xA;of the selected cell and use the field name to retrieve the data value from the record:&#xA;// get name&#xA;var fieldName = grid.getColumnModel().getDataIndex(cellIndex);&#xA;// get data value based on name&#xA;var data = record.get(fieldName);" ilk="function" line="109" lineend="111" name="getSelectedCell" returns="Array" signature="getSelectedCell()" />
            <scope doc="If anything is selected, clears all selections and fires the selectionchange event." ilk="function" line="118" lineend="127" name="clearSelections" signature="clearSelections(preventNotify)">
              <variable citdl="Boolean" doc="true to prevent the gridview from&#xA;being notified about the change." ilk="argument" name="preventNotify" />
              <variable attributes="__local__ private" citdl="this.selection" line="119" name="s" />
            </scope>
            <variable citdl="Object" line="124" lineend="165" name="selection">
              <variable citdl="r" line="163" name="record" />
              <variable citdl="Array" line="164" name="cell" />
            </variable>
            <scope doc="Returns true if there is a selection." ilk="function" line="133" lineend="135" name="hasSelection" returns="Boolean" signature="hasSelection()" />
            <scope ilk="function" line="138" lineend="143" name="handleMouseDown" signature="handleMouseDown(g, row, cell, e)">
              <variable ilk="argument" name="g" />
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="cell" />
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Selects a cell.  Before selecting a cell, fires the&#xA;{@link #beforecellselect} event.  If this check is satisfied the cell&#xA;will be selected and followed up by  firing the {@link #cellselect} and&#xA;{@link #selectionchange} events." ilk="function" line="158" lineend="176" name="select" signature="select(rowIndex, colIndex, preventViewNotify, preventFocus, r)">
              <variable citdl="Number" doc="The index of the row to select" ilk="argument" name="rowIndex" />
              <variable citdl="Number" doc="The index of the column to select" ilk="argument" name="colIndex" />
              <variable citdl="Boolean" doc="(optional) Specify true to&#xA;prevent notifying the view (disables updating the selected appearance)" ilk="argument" name="preventViewNotify" />
              <variable citdl="Boolean" doc="(optional) Whether to prevent the cell at&#xA;the specified rowIndex / colIndex from being focused." ilk="argument" name="preventFocus" />
              <variable citdl="Ext.data.Record" doc="(optional) The record to select" ilk="argument" name="r" />
              <variable attributes="__local__ private" citdl="this.grid.getView()" line="167" name="v" />
            </scope>
            <scope ilk="function" line="179" lineend="181" name="isSelectable" signature="isSelectable(rowIndex, colIndex, cm)">
              <variable ilk="argument" name="rowIndex" />
              <variable ilk="argument" name="colIndex" />
              <variable ilk="argument" name="cm" />
            </scope>
            <scope ilk="function" line="184" lineend="236" name="handleKeyDown" signature="handleKeyDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="this.grid" line="188" name="g" />
              <variable attributes="__local__ private" citdl="this.selection" line="188" name="s" />
              <variable attributes="__local__ private" citdl="g.walkCells()" line="191" name="cell" />
              <variable attributes="__local__ private" citdl="this" line="197" name="sm" />
              <scope attributes="__local__ private" ilk="function" line="198" lineend="200" name="walk" returns="g.walkCells()" signature="walk(row, col, step)">
                <variable ilk="argument" name="row" />
                <variable ilk="argument" name="col" />
                <variable ilk="argument" name="step" />
              </scope>
              <variable attributes="__local__ private" citdl="s.cell[1]" line="201" name="c" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="201" name="k" />
              <variable attributes="__local__ private" citdl="s.cell[0]" line="201" name="r" />
              <variable attributes="__local__ private" citdl="walk()" line="202" name="newCell" />
            </scope>
            <scope ilk="function" line="238" lineend="240" name="acceptsNav" signature="acceptsNav(row, col, cm)">
              <variable ilk="argument" name="row" />
              <variable ilk="argument" name="col" />
              <variable ilk="argument" name="cm" />
            </scope>
            <scope ilk="function" line="242" lineend="261" name="onEditorKey" signature="onEditorKey(field, e)">
              <variable ilk="argument" name="field" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="g.activeEditor" line="243" name="ed" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="243" name="k" />
              <variable attributes="__local__ private" citdl="g.walkCells()" line="243" name="newCell" />
              <variable attributes="__local__ private" citdl="this.grid" line="243" name="g" />
            </scope>
          </scope>
          <variable citdl="Object" line="23" lineend="23" name="GridPanel" />
          <scope classrefs="Object" ilk="class" line="24" lineend="61" name="RowNumberer">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a utility class that can be passed into a {@link Ext.grid.ColumnModel} as a column config that provides&#xA;an automatic row numbering column.&#xA;Usage:&#xA;// This is a typical column config with the first column providing row numbers&#xA;var colModel = new Ext.grid.ColumnModel([&#xA;new Ext.grid.RowNumberer(),&#xA;{header: &quot;Name&quot;, width: 80, sortable: true},&#xA;{header: &quot;Code&quot;, width: 50, sortable: true},&#xA;{header: &quot;Description&quot;, width: 200, sortable: true}&#xA;]);" ilk="function" line="24" lineend="29" name="RowNumberer" signature="RowNumberer(config)">
              <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
              <variable citdl="RowNumberer" name="this" />
            </scope>
            <variable citdl="this.renderer.createDelegate()" line="27" name="renderer" />
            <variable citdl="String" doc="number column (defaults to &apos;&apos;)." line="36" name="header" />
            <variable citdl="Number" line="40" name="width" />
            <variable citdl="Boolean" line="45" name="sortable" />
            <variable citdl="Boolean" line="48" name="fixed" />
            <variable citdl="Boolean" line="49" name="menuDisabled" />
            <variable citdl="String" line="50" name="dataIndex" />
            <variable citdl="String" line="51" name="id" />
            <variable line="52" name="rowspan" />
            <scope ilk="function" line="55" lineend="60" name="renderer" returns="rowIndex" signature="renderer(v, p, record, rowIndex)">
              <variable ilk="argument" name="v" />
              <variable ilk="argument" name="p" />
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="rowIndex" />
              <variable citdl="RowNumberer" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="25" name="Grid" />
          <variable attributes="__ctor__" citdl="Ext.data.Record.create()" doc="CONSTRUCTOR: A specific {@link Ext.data.Record} type that represents a name/value pair and is made to work with the&#xA;{@link Ext.grid.PropertyGrid}.  Typically, PropertyRecords do not need to be created directly as they can be&#xA;created implicitly by simply using the appropriate data configs either via the {@link Ext.grid.PropertyGrid#source}&#xA;config property or by calling {@link Ext.grid.PropertyGrid#setSource}.  However, if the need arises, these records&#xA;can also be created explicitly as shwon below.  Example usage:&#xA;&#xA;var rec = new Ext.grid.PropertyRecord({&#xA;name: &apos;Birthday&apos;,&#xA;value: new Date(Date.parse(&apos;05/26/1972&apos;))&#xA;});&#xA;// Add record to an already populated grid&#xA;grid.store.addSorted(rec);" line="28" name="PropertyRecord" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="41" lineend="51" name="PropertyStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom wrapper for the {@link Ext.grid.PropertyGrid}&apos;s {@link Ext.data.Store}. This class handles the mapping&#xA;between the custom data source objects supported by the grid and the {@link Ext.grid.PropertyRecord} format&#xA;required for compatibility with the underlying store. Generally this class should not need to be used directly --&#xA;the grid&apos;s data should be accessed from the underlying store via the {@link #store} property." ilk="function" line="41" lineend="51" name="PropertyStore" signature="PropertyStore(grid, source)">
              <variable citdl="Ext.grid.Grid" doc="The grid this store will be bound to" ilk="argument" name="grid" />
              <variable citdl="Object" doc="The source data config object" ilk="argument" name="source" />
              <variable citdl="PropertyStore" name="this" />
            </scope>
            <variable citdl="grid" line="42" name="grid" />
            <variable citdl="Ext.data.Store" line="45" name="store" />
            <scope ilk="function" line="54" lineend="64" name="setSource" signature="setSource(o)">
              <variable ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="Array" line="57" name="data" />
            </scope>
            <variable citdl="o" line="55" name="source" />
            <scope ilk="function" line="67" lineend="79" name="onUpdate" signature="onUpdate(ds, record, type)">
              <variable ilk="argument" name="ds" />
              <variable ilk="argument" name="record" />
              <variable ilk="argument" name="type" />
              <variable attributes="__local__ private" citdl="record.data.value" line="69" name="v" />
              <variable attributes="__local__ private" citdl="record.modified.value" line="70" name="oldValue" />
            </scope>
            <scope ilk="function" line="82" lineend="84" name="getProperty" returns="this.store.getAt()" signature="getProperty(row)">
              <variable ilk="argument" name="row" />
            </scope>
            <scope ilk="function" line="87" lineend="92" name="isEditableValue" signature="isEditableValue(val)">
              <variable ilk="argument" name="val" />
            </scope>
            <scope ilk="function" line="95" lineend="98" name="setValue" signature="setValue(prop, value)">
              <variable ilk="argument" name="prop" />
              <variable ilk="argument" name="value" />
            </scope>
            <scope ilk="function" line="101" lineend="103" name="getSource" returns="this.source" signature="getSource()" />
          </scope>
          <scope classrefs="Ext.dd.DropZone" ilk="class" line="57" lineend="75" name="HeaderDropZone">
            <scope attributes="__ctor__" ilk="function" line="57" lineend="75" name="HeaderDropZone" signature="HeaderDropZone(grid, hd, hd2)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable ilk="argument" name="hd2" />
              <variable citdl="HeaderDropZone" name="this" />
            </scope>
            <variable citdl="grid" line="58" name="grid" />
            <variable citdl="grid.getView()" line="59" name="view" />
            <variable citdl="Ext.DomHelper.append()" line="63" name="proxyTop" />
            <variable citdl="Ext.DomHelper.append()" line="66" name="proxyBottom" />
            <variable citdl="String" line="71" name="ddGroup" />
            <variable citdl="Array" line="77" name="proxyOffsets" />
            <variable citdl="Ext.Element.fly" line="78" name="fly" />
            <scope ilk="function" line="80" lineend="86" name="getTargetFromEvent" returns="this.view.getHeaderCell()" signature="getTargetFromEvent(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getTarget()" line="81" name="t" />
              <variable attributes="__local__ private" citdl="this.view.findCellIndex()" line="82" name="cindex" />
            </scope>
            <scope ilk="function" line="88" lineend="98" name="nextVisible" signature="nextVisible(h)">
              <variable citdl="h.nextSibling" ilk="argument" name="h" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="89" name="cm" />
              <variable attributes="__local__ private" citdl="this.view" line="89" name="v" />
            </scope>
            <scope ilk="function" line="100" lineend="110" name="prevVisible" signature="prevVisible(h)">
              <variable citdl="h.prevSibling" ilk="argument" name="h" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="101" name="cm" />
              <variable attributes="__local__ private" citdl="this.view" line="101" name="v" />
            </scope>
            <scope ilk="function" line="112" lineend="137" name="positionIndicator" returns="pt" signature="positionIndicator(h, n, e)">
              <variable ilk="argument" name="h" />
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getPageX()" line="113" name="x" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getRegion()" line="114" name="r" />
              <variable attributes="__local__ private" citdl="r.right" line="115" name="px" />
              <variable attributes="__local__ private" citdl="r.top" line="115" name="py" />
              <variable attributes="__local__ private" citdl="String" line="115" name="pt" />
            </scope>
            <variable citdl="this.view.mainHd.getHeight()" line="132" name="bottomOffset" />
            <scope ilk="function" line="139" lineend="143" name="onNodeEnter" signature="onNodeEnter(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="145" lineend="155" name="onNodeOver" returns="result" signature="onNodeOver(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="Boolean" line="146" name="result" />
            </scope>
            <scope ilk="function" line="157" lineend="160" name="onNodeOut" signature="onNodeOut(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="162" lineend="182" name="onNodeDrop" returns="Boolean" signature="onNodeDrop(n, dd, e, data)">
              <variable ilk="argument" name="n" />
              <variable ilk="argument" name="dd" />
              <variable ilk="argument" name="e" />
              <variable ilk="argument" name="data" />
              <variable attributes="__local__ private" citdl="data.header" line="163" name="h" />
              <variable attributes="__local__ private" citdl="this.grid.colModel" line="165" name="cm" />
              <variable attributes="__local__ private" citdl="Ext.lib.Event.getPageX()" line="166" name="x" />
              <variable attributes="__local__ private" citdl="Ext.lib.Dom.getRegion()" line="167" name="r" />
              <variable attributes="__local__ private" line="168" name="pt" />
              <variable attributes="__local__ private" citdl="this.view.getCellIndex()" line="169" name="oldIndex" />
              <variable attributes="__local__ private" citdl="this.view.getCellIndex()" line="170" name="newIndex" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="91" lineend="149" name="ColumnModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: After the data has been read into the client side cache ({@link Ext.data.Store Store}),&#xA;the ColumnModel is used to configure how and what parts of that data will be displayed in the&#xA;vertical slices (columns) of the grid. The Ext.grid.ColumnModel Class is the default implementation&#xA;of a ColumnModel used by implentations of {@link Ext.grid.GridPanel GridPanel}.&#xA;Data is mapped into the store&apos;s records and then indexed into the ColumnModel using the&#xA;{@link Ext.grid.Column#dataIndex dataIndex}:&#xA;&#xA;{data source} == mapping ==&gt; {data store} == {@link Ext.grid.Column#dataIndex dataIndex} ==&gt; {ColumnModel}&#xA;&#xA;Each {@link Ext.grid.Column Column} in the grid&apos;s ColumnModel is configured with a&#xA;{@link Ext.grid.Column#dataIndex dataIndex} to specify how the data within&#xA;each record in the store is indexed into the ColumnModel.&#xA;There are two ways to initialize the ColumnModel class:&#xA;Initialization Method 1: an Array&#xA;var colModel = new Ext.grid.ColumnModel([&#xA;{ header: &quot;Ticker&quot;, width: 60, sortable: true},&#xA;{ header: &quot;Company Name&quot;, width: 150, sortable: true, id: &apos;company&apos;},&#xA;{ header: &quot;Market Cap.&quot;, width: 100, sortable: true},&#xA;{ header: &quot;$ Sales&quot;, width: 100, sortable: true, renderer: money},&#xA;{ header: &quot;Employees&quot;, width: 100, sortable: true, resizable: false}&#xA;]);&#xA;The ColumnModel may be initialized with an Array of {@link Ext.grid.Column} column configuration&#xA;objects to define the initial layout / display of the columns in the Grid. The order of each&#xA;{@link Ext.grid.Column} column configuration object within the specified Array defines the initial&#xA;order of the column display.  A Column&apos;s display may be initially hidden using the&#xA;{@link Ext.grid.Column#hidden hidden} config property (and then shown using the column&#xA;header menu).  Field&apos;s that are not included in the ColumnModel will not be displayable at all.&#xA;How each column in the grid correlates (maps) to the {@link Ext.data.Record} field in the&#xA;{@link Ext.data.Store Store} the column draws its data from is configured through the&#xA;{@link Ext.grid.Column#dataIndex dataIndex}.  If the&#xA;{@link Ext.grid.Column#dataIndex dataIndex} is not explicitly defined (as shown in the&#xA;example above) it will use the column configuration&apos;s index in the Array as the index.&#xA;See {@link Ext.grid.Column} for additional configuration options for each column.&#xA;Initialization Method 2: an Object&#xA;In order to use configuration options from Ext.grid.ColumnModel, an Object may be used to&#xA;initialize the ColumnModel.  The column configuration Array will be specified in the {@link #columns}&#xA;config property. The {@link #defaults} config property can be used to apply defaults&#xA;for all columns, e.g.:&#xA;var colModel = new Ext.grid.ColumnModel({&#xA;columns: [&#xA;{ header: &quot;Ticker&quot;, width: 60, menuDisabled: false},&#xA;{ header: &quot;Company Name&quot;, width: 150, id: &apos;company&apos;},&#xA;{ header: &quot;Market Cap.&quot;},&#xA;{ header: &quot;$ Sales&quot;, renderer: money},&#xA;{ header: &quot;Employees&quot;, resizable: false}&#xA;defaults: {&#xA;sortable: true,&#xA;menuDisabled: true,&#xA;width: 100&#xA;listeners: {&#xA;{@link #hiddenchange}: function(cm, colIndex, hidden) {&#xA;saveConfig(colIndex, hidden);&#xA;});&#xA;In both examples above, the ability to apply a CSS class to all cells in a column (including the&#xA;header) is demonstrated through the use of the {@link Ext.grid.Column#id id} config&#xA;option. This column could be styled by including the following css:&#xA;//add this css *after* the core css is loaded&#xA;.x-grid3-td-company {&#xA;color: red; // entire column will have red font&#xA;// modify the header row only, adding an icon to the column header&#xA;.x-grid3-hd-company {&#xA;background: transparent&#xA;url(../../resources/images/icons/silk/building.png)&#xA;no-repeat 3px 3px ! important;&#xA;padding-left:20px;&#xA;Note that the &quot;Company Name&quot; column could be specified as the&#xA;{@link Ext.grid.GridPanel}.{@link Ext.grid.GridPanel#autoExpandColumn autoExpandColumn}." ilk="function" line="91" lineend="149" name="ColumnModel" signature="ColumnModel(config)">
              <variable citdl="Mixed" doc="Specify either an Array of {@link Ext.grid.Column} configuration objects or specify&#xA;a configuration Object (see introductory section discussion utilizing Initialization Method 2 above)." ilk="argument" name="config" />
              <variable citdl="ColumnModel" name="this" />
            </scope>
            <variable citdl="Number" doc="specified (defaults to 100).  This property shall preferably be configured through the&#xA;{@link #defaults} config property." line="156" name="defaultWidth" />
            <variable citdl="Boolean" doc="sortable specified (defaults to false).  This property shall preferably be configured&#xA;through the {@link #defaults} config property." line="162" name="defaultSortable" />
            <scope doc="{@link Ext.grid.Column} are the options which may appear in the object literal for each&#xA;individual column definition." ilk="function" line="179" lineend="181" name="getColumnId" returns="String" signature="getColumnId(index)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="index" />
            </scope>
            <scope ilk="function" line="183" lineend="185" name="getColumnAt" returns="this.config[index]" signature="getColumnAt(index)">
              <variable ilk="argument" name="index" />
            </scope>
            <scope doc="Reconfigures this column model according to the passed Array of column definition objects.&#xA;For a description of the individual properties of a column definition object, see the&#xA;Config Options.&#xA;Causes the {@link #configchange} event to be fired. A {@link Ext.grid.GridPanel GridPanel}&#xA;using this ColumnModel will listen for this event and refresh its UI automatically." ilk="function" line="197" lineend="230" name="setConfig" signature="setConfig(config, initial)">
              <variable citdl="Array" doc="Array of Column definition objects." ilk="argument" name="config" />
              <variable citdl="Boolean" doc="Specify true to bypass cleanup which deletes the totalWidth&#xA;and destroys existing editors." ilk="argument" name="initial" />
              <variable attributes="__local__ private" line="198" name="i" />
              <variable attributes="__local__ private" citdl="this.config[i]" line="198" name="c" />
              <variable attributes="__local__ private" line="198" name="len" />
              <variable attributes="__local__ private" citdl="Ext.grid.Column.types[c.xtype||&apos;gridcolumn&apos;]" line="221" name="cls" />
            </scope>
            <variable citdl="Ext.apply()" line="213" name="defaults" />
            <variable citdl="config" line="215" name="config" />
            <variable citdl="Object" line="216" lineend="216" name="lookup" />
            <scope doc="Returns the column for a specified id." ilk="function" line="237" lineend="239" name="getColumnById" returns="Object" signature="getColumnById(id)">
              <variable citdl="String" doc="The column id" ilk="argument" name="id" />
            </scope>
            <scope doc="Returns the index for a specified column id." ilk="function" line="246" lineend="253" name="getIndexById" returns="Number" signature="getIndexById(id)">
              <variable citdl="String" doc="The column id" ilk="argument" name="id" />
            </scope>
            <scope doc="Moves a column from one position to another." ilk="function" line="260" lineend="266" name="moveColumn" signature="moveColumn(oldIndex, newIndex)">
              <variable citdl="Number" doc="The index of the column to move." ilk="argument" name="oldIndex" />
              <variable citdl="Number" doc="The position at which to reinsert the coolumn." ilk="argument" name="newIndex" />
              <variable attributes="__local__ private" citdl="this.config[oldIndex]" line="261" name="c" />
            </scope>
            <variable line="264" name="dataMap" />
            <scope doc="Returns the number of columns." ilk="function" line="273" lineend="284" name="getColumnCount" returns="Number" signature="getColumnCount(visibleOnly)">
              <variable citdl="Boolean" doc="Optional. Pass as true to only include visible columns." ilk="argument" name="visibleOnly" />
              <variable attributes="__local__ private" citdl="Number" line="275" name="c" />
            </scope>
            <scope doc="Returns the column configs that return true by the passed function that is called&#xA;with (columnConfig, index)&#xA;// returns an array of column config objects for all hidden columns&#xA;var columns = grid.getColumnModel().getColumnsBy(function(c){&#xA;return c.hidden;&#xA;});" ilk="function" line="299" lineend="308" name="getColumnsBy" returns="Array" signature="getColumnsBy(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="Array" line="300" name="r" />
              <variable attributes="__local__ private" citdl="this.config[i]" line="302" name="c" />
            </scope>
            <scope doc="Returns true if the specified column is sortable." ilk="function" line="315" lineend="317" name="isSortable" returns="Boolean" signature="isSortable(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Returns true if the specified column menu is disabled." ilk="function" line="324" lineend="326" name="isMenuDisabled" returns="Boolean" signature="isMenuDisabled(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Returns the rendering (formatting) function defined for the column." ilk="function" line="333" lineend="338" name="getRenderer" returns="Function" signature="getRenderer(col)">
              <variable citdl="Number" doc="The column index." ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the rendering (formatting) function for a column.  See {@link Ext.util.Format} for some&#xA;default formatting functions." ilk="function" line="357" lineend="359" name="setRenderer" signature="setRenderer(col, fn)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Function" doc="The function to use to process the cell&apos;s raw data&#xA;to return HTML markup for the grid view. The render function is called with&#xA;the following parameters:&#xA;value : ObjectThe data value for the cell.&#xA;metadata : ObjectAn object in which you may set the following attributes:&#xA;css : StringA CSS class name to add to the cell&apos;s TD element.&#xA;attr : StringAn HTML attribute definition string to apply to the data container element within the table cell&#xA;(e.g. &apos;style=&quot;color:red;&quot;&apos;).&#xA;record : Ext.data.recordThe {@link Ext.data.Record} from which the data was extracted.&#xA;rowIndex : NumberRow index&#xA;colIndex : NumberColumn index&#xA;store : Ext.data.StoreThe {@link Ext.data.Store} object from which the Record was extracted." ilk="argument" name="fn" />
            </scope>
            <scope doc="Returns the width for the specified column." ilk="function" line="366" lineend="368" name="getColumnWidth" returns="Number" signature="getColumnWidth(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the width for a column." ilk="function" line="377" lineend="383" name="setColumnWidth" signature="setColumnWidth(col, width, suppressEvent)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Number" doc="The new width" ilk="argument" name="width" />
              <variable citdl="Boolean" doc="True to suppress firing the {@link #widthchange}&#xA;event. Defaults to false." ilk="argument" name="suppressEvent" />
            </scope>
            <variable citdl="Number" line="379" name="totalWidth" />
            <scope doc="Returns the total width of all columns." ilk="function" line="390" lineend="400" name="getTotalWidth" returns="Number" signature="getTotalWidth(includeHidden)">
              <variable citdl="Boolean" doc="True to include hidden column widths" ilk="argument" name="includeHidden" />
            </scope>
            <scope doc="Returns the header for the specified column." ilk="function" line="407" lineend="409" name="getColumnHeader" returns="String" signature="getColumnHeader(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the header for a column." ilk="function" line="416" lineend="419" name="setColumnHeader" signature="setColumnHeader(col, header)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="String" doc="The new header" ilk="argument" name="header" />
            </scope>
            <scope doc="Returns the tooltip for the specified column." ilk="function" line="426" lineend="428" name="getColumnTooltip" returns="String" signature="getColumnTooltip(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the tooltip for a column." ilk="function" line="434" lineend="436" name="setColumnTooltip" signature="setColumnTooltip(col, tooltip)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="String" doc="The new tooltip" ilk="argument" name="tooltip" />
            </scope>
            <scope doc="Returns the dataIndex for the specified column.&#xA;// Get field name for the column&#xA;var fieldName = grid.getColumnModel().getDataIndex(columnIndex);" ilk="function" line="447" lineend="449" name="getDataIndex" returns="String" signature="getDataIndex(col)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
            </scope>
            <scope doc="Sets the dataIndex for a column." ilk="function" line="456" lineend="458" name="setDataIndex" signature="setDataIndex(col, dataIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="String" doc="The new dataIndex" ilk="argument" name="dataIndex" />
            </scope>
            <scope doc="Finds the index of the first matching column for the given dataIndex." ilk="function" line="465" lineend="473" name="findColumnIndex" returns="Number" signature="findColumnIndex(dataIndex)">
              <variable ilk="argument" name="dataIndex" />
              <variable attributes="__local__ private" citdl="this.config" line="466" name="c" />
            </scope>
            <scope doc="Returns true if the cell is editable.&#xA;var store = new Ext.data.Store({...});&#xA;var colModel = new Ext.grid.ColumnModel({&#xA;columns: [...],&#xA;isCellEditable: function(col, row) {&#xA;var record = store.getAt(row);&#xA;if (record.get(&apos;readonly&apos;)) { // replace with your condition&#xA;return false;&#xA;return Ext.grid.ColumnModel.prototype.isCellEditable.call(this, col, row);&#xA;});&#xA;var grid = new Ext.grid.GridPanel({&#xA;store: store,&#xA;colModel: colModel,&#xA;...&#xA;});" ilk="function" line="499" lineend="501" name="isCellEditable" returns="Boolean" signature="isCellEditable(colIndex, rowIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
              <variable citdl="Number" doc="The row index" ilk="argument" name="rowIndex" />
            </scope>
            <scope doc="Returns the editor defined for the cell/column." ilk="function" line="510" lineend="512" name="getCellEditor" returns="Ext.Editor" signature="getCellEditor(colIndex, rowIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
              <variable citdl="Number" doc="The row index" ilk="argument" name="rowIndex" />
            </scope>
            <scope doc="Sets if a column is editable." ilk="function" line="519" lineend="521" name="setEditable" signature="setEditable(col, editable)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Boolean" doc="True if the column is editable" ilk="argument" name="editable" />
            </scope>
            <scope doc="Returns true if the column is hidden." ilk="function" line="529" lineend="531" name="isHidden" returns="Boolean" signature="isHidden(colIndex)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
            </scope>
            <scope doc="Returns true if the column width cannot be changed" ilk="function" line="537" lineend="539" name="isFixed" returns="this.config[colIndex].fixed" signature="isFixed(colIndex)">
              <variable ilk="argument" name="colIndex" />
            </scope>
            <scope doc="Returns true if the column can be resized" ilk="function" line="545" lineend="547" name="isResizable" returns="Boolean" signature="isResizable(colIndex)">
              <variable ilk="argument" name="colIndex" />
            </scope>
            <scope doc="Sets if a column is hidden.&#xA;myGrid.getColumnModel().setHidden(0, true); // hide column 0 (0 = the first column)." ilk="function" line="556" lineend="563" name="setHidden" signature="setHidden(colIndex, hidden)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="colIndex" />
              <variable citdl="Boolean" doc="True if the column is hidden" ilk="argument" name="hidden" />
              <variable attributes="__local__ private" citdl="this.config[colIndex]" line="557" name="c" />
            </scope>
            <scope doc="Sets the editor for a column and destroys the prior editor." ilk="function" line="570" lineend="573" name="setEditor" signature="setEditor(col, editor)">
              <variable citdl="Number" doc="The column index" ilk="argument" name="col" />
              <variable citdl="Object" doc="The editor object" ilk="argument" name="editor" />
            </scope>
            <scope doc="Destroys this column model by purging any event listeners, and removing any editors." ilk="function" line="578" lineend="583" name="destroy" signature="destroy()" />
            <scope ilk="function" line="587" lineend="592" name="defaultRenderer" returns="value" signature="defaultRenderer(value)">
              <variable ilk="argument" name="value" />
              <variable citdl="ColumnModel" name="this" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A custom selection model that renders a column of checkboxes that can be toggled to select or deselect rows." line="103" name="CheckboxSelectionModel" />
          <scope classrefs="Ext.grid.ColumnModel" ilk="class" line="114" lineend="135" name="PropertyColumnModel">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A custom column model for the {@link Ext.grid.PropertyGrid}.  Generally it should not need to be used directly." ilk="function" line="114" lineend="142" name="PropertyColumnModel" signature="PropertyColumnModel(grid, store)">
              <variable citdl="Ext.grid.Grid" doc="The grid this store will be bound to" ilk="argument" name="grid" />
              <variable ilk="argument" name="store" />
              <variable citdl="PropertyColumnModel" name="this" />
              <variable attributes="__local__ private" citdl="Ext.grid" line="116" name="g" />
              <variable attributes="__local__ private" citdl="Ext.form" line="116" name="f" />
              <variable attributes="__local__ private" citdl="f.Field" line="133" name="bfield" />
            </scope>
            <variable citdl="grid" line="118" name="grid" />
            <variable citdl="store" line="123" name="store" />
            <variable citdl="Object" line="134" lineend="139" name="editors">
              <variable citdl="g.GridEditor" line="135" name="date" />
              <variable citdl="g.GridEditor" line="136" name="string" />
              <variable citdl="g.GridEditor" line="137" name="number" />
              <variable citdl="g.GridEditor" line="138" name="boolean" />
            </variable>
            <variable citdl="this.renderCell.createDelegate()" line="140" name="renderCellDelegate" />
            <variable citdl="this.renderProp.createDelegate()" line="141" name="renderPropDelegate" />
            <variable citdl="String" line="146" name="nameText" />
            <variable citdl="String" line="147" name="valueText" />
            <variable citdl="String" line="148" name="dateFormat" />
            <scope ilk="function" line="151" lineend="153" name="renderDate" returns="dateVal.dateFormat()" signature="renderDate(dateVal)">
              <variable ilk="argument" name="dateVal" />
            </scope>
            <scope ilk="function" line="156" lineend="158" name="renderBool" returns="bVal" signature="renderBool(bVal)">
              <variable ilk="argument" name="bVal" />
            </scope>
            <scope ilk="function" line="161" lineend="163" name="isCellEditable" returns="colIndex" signature="isCellEditable(colIndex, rowIndex)">
              <variable ilk="argument" name="colIndex" />
              <variable ilk="argument" name="rowIndex" />
            </scope>
            <scope ilk="function" line="166" lineend="169" name="getRenderer" returns="col" signature="getRenderer(col)">
              <variable ilk="argument" name="col" />
            </scope>
            <scope ilk="function" line="172" lineend="174" name="renderProp" returns="this.getPropertyName()" signature="renderProp(v)">
              <variable ilk="argument" name="v" />
            </scope>
            <scope ilk="function" line="177" lineend="185" name="renderCell" returns="Ext.util.Format.htmlEncode()" signature="renderCell(val)">
              <variable ilk="argument" name="val" />
              <variable attributes="__local__ private" citdl="val" line="178" name="rv" />
            </scope>
            <scope ilk="function" line="188" lineend="191" name="getPropertyName" returns="pn" signature="getPropertyName(name)">
              <variable ilk="argument" name="name" />
              <variable attributes="__local__ private" citdl="this.grid.propertyNames" line="189" name="pn" />
            </scope>
            <scope ilk="function" line="194" lineend="210" name="getCellEditor" returns="this.editors.string" signature="getCellEditor(colIndex, rowIndex)">
              <variable ilk="argument" name="colIndex" />
              <variable ilk="argument" name="rowIndex" />
              <variable attributes="__local__ private" citdl="this.store.getProperty()" line="197" name="p" />
              <variable attributes="__local__ private" citdl="p.data.value" line="197" name="val" />
              <variable attributes="__local__ private" citdl="p.data.name" line="197" name="n" />
            </scope>
            <scope ilk="function" line="213" lineend="218" name="destroy" signature="destroy()" />
          </scope>
          <variable citdl="Object" line="244" name="GridView">
            <scope classrefs="Ext.grid.HeaderDragZone" ilk="class" line="186" name="ColumnDragZone">
              <scope attributes="__ctor__" ilk="function" line="186" lineend="189" name="ColumnDragZone" signature="ColumnDragZone(grid, hd)">
                <variable ilk="argument" name="grid" />
                <variable ilk="argument" name="hd" />
                <variable citdl="ColumnDragZone" name="this" />
              </scope>
              <scope ilk="function" line="192" lineend="194" name="handleMouseDown" signature="handleMouseDown(e)">
                <variable ilk="argument" name="e" />
              </scope>
              <scope ilk="function" line="196" lineend="198" name="callHandleMouseDown" signature="callHandleMouseDown(e)">
                <variable ilk="argument" name="e" />
              </scope>
            </scope>
            <variable citdl="Object" line="244" name="prototype">
              <variable citdl="String" line="238" name="lockText" />
              <variable citdl="String" line="239" name="unlockText" />
              <variable citdl="String" line="266" name="sortAscText" />
              <variable citdl="String" line="267" name="sortDescText" />
              <variable citdl="String" line="268" name="columnsText" />
            </variable>
            <scope ilk="function" line="1693" lineend="1704" name="SplitDragZone" signature="SplitDragZone(grid, hd)">
              <variable ilk="argument" name="grid" />
              <variable ilk="argument" name="hd" />
              <variable citdl="GridView" name="this" />
            </scope>
            <variable citdl="grid" line="1694" name="grid" />
            <variable citdl="grid.getView()" line="1695" name="view" />
            <variable citdl="this.view.resizeMarker" line="1696" name="marker" />
            <variable citdl="this.view.resizeProxy" line="1697" name="proxy" />
            <variable citdl="Boolean" line="1702" name="scroll" />
            <variable citdl="this.view.splitHandleWidth" line="1703" name="hw" />
          </variable>
          <variable citdl="Object" line="252" name="PropertyColumnModel">
            <variable citdl="Object" line="252" name="prototype">
              <variable citdl="String" line="282" name="nameText" />
              <variable citdl="String" line="283" name="valueText" />
              <variable citdl="String" line="284" name="dateFormat" />
            </variable>
          </variable>
          <variable citdl="Object" line="280" name="GroupingView">
            <variable citdl="Object" line="280" name="prototype">
              <variable citdl="String" line="274" name="emptyGroupText" />
              <variable citdl="String" line="275" name="groupByText" />
              <variable citdl="String" line="276" name="showGroupsText" />
            </variable>
            <variable citdl="Number" line="517" name="GROUP_ID" />
          </variable>
          <variable citdl="Ext.extend()" line="290" name="EditorGridPanel" />
          <variable citdl="Object" line="297" name="BooleanColumn">
            <variable citdl="Object" line="297" name="prototype">
              <variable citdl="String" line="290" name="trueText" />
              <variable citdl="String" line="291" name="falseText" />
              <variable citdl="String" line="292" name="undefinedText" />
            </variable>
          </variable>
          <variable citdl="Object" line="303" name="NumberColumn">
            <variable citdl="Object" line="303" name="prototype">
              <variable citdl="String" line="299" name="format" />
            </variable>
          </variable>
          <variable citdl="Object" line="309" name="DateColumn">
            <variable citdl="Object" line="309" name="prototype">
              <variable citdl="String" line="305" name="format" />
            </variable>
          </variable>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized grid implementation intended to mimic the traditional property grid as typically seen in&#xA;development IDEs.  Each row in the grid represents a property of some object, and the data is stored&#xA;as a set of name/value pairs in {@link Ext.grid.PropertyRecord}s.  Example usage:&#xA;&#xA;var grid = new Ext.grid.PropertyGrid({&#xA;title: &apos;Properties Grid&apos;,&#xA;autoHeight: true,&#xA;width: 300,&#xA;renderTo: &apos;grid-ct&apos;,&#xA;source: {&#xA;&quot;(name)&quot;: &quot;My Object&quot;,&#xA;&quot;Created&quot;: new Date(Date.parse(&apos;10/15/2006&apos;)),&#xA;&quot;Available&quot;: false,&#xA;&quot;Version&quot;: .01,&#xA;&quot;Description&quot;: &quot;A test object&quot;&#xA;});" line="369" name="PropertyGrid" />
          <variable citdl="Ext.extend()" doc="A Column definition class which renders a value by processing a {@link Ext.data.Record Record}&apos;s&#xA;{@link Ext.data.Record#data data} using a {@link #tpl configured} {@link Ext.XTemplate XTemplate}.&#xA;See the {@link Ext.grid.ColumnModel#xtype xtype} config option of {@link Ext.grid.ColumnModel} for more&#xA;details." line="383" name="TemplateColumn" />
        </variable>
        <scope classrefs="Object" ilk="class" line="24" lineend="139" name="CompositeElementLite">
          <scope attributes="__ctor__" doc="Flyweight composite class. Reuses the same Ext.Element for element operations.&#xA;var els = Ext.select(&quot;#some-el div.some-class&quot;);&#xA;// or select directly from an existing element&#xA;var el = Ext.get(&apos;some-el&apos;);&#xA;el.select(&apos;div.some-class&apos;);&#xA;els.setWidth(100); // all elements become 100 width&#xA;els.hide(true); // all elements fade out and hide&#xA;// or&#xA;els.setWidth(100).hide(true);&#xA;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element&#xA;actions will be performed on all the elements in this collection." ilk="function" line="24" lineend="28" name="CompositeElementLite" signature="CompositeElementLite(els, root)">
            <variable ilk="argument" name="els" />
            <variable ilk="argument" name="root" />
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <variable citdl="Array" line="25" name="elements" />
          <variable citdl="Ext.Element.Flyweight" line="27" name="el" />
          <variable citdl="Boolean" line="31" name="isComposite" />
          <scope doc="Returns the number of elements in this composite" ilk="function" line="36" lineend="38" name="getCount" returns="this.elements.length" signature="getCount()">
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <scope ilk="function" line="39" lineend="51" name="add" returns="this" signature="add(els)">
            <variable ilk="argument" name="els" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="44" name="yels" />
            <scope attributes="__local__ private" ilk="function" line="45" lineend="47" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope ilk="function" line="52" lineend="60" name="invoke" returns="this" signature="invoke(fn, args)">
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="args" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this.elements" line="54" name="els" />
            <variable attributes="__local__ private" citdl="this.el" line="54" name="el" />
            <scope attributes="__local__ private" ilk="function" line="55" lineend="58" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Returns a flyweight Element of the dom element object at the specified index" ilk="function" line="66" lineend="73" name="item" returns="Ext.Element" signature="item(index)">
            <variable citdl="Number" ilk="argument" name="index" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this" line="67" name="me" />
          </scope>
          <scope ilk="function" line="76" lineend="81" name="addListener" returns="this" signature="addListener(eventName, handler, scope, opt)">
            <variable ilk="argument" name="eventName" />
            <variable ilk="argument" name="handler" />
            <variable ilk="argument" name="scope" />
            <variable ilk="argument" name="opt" />
            <variable citdl="CompositeElementLite" name="this" />
            <scope attributes="__local__ private" ilk="function" line="77" lineend="79" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Calls the passed function passing (el, this, index) for each element in this composite. The element&#xA;passed is the flyweight (shared) Ext.Element instance, so if you require a&#xA;a reference to the dom node, use el.dom." ilk="function" line="90" lineend="99" name="each" returns="CompositeElement" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The this object (defaults to the element)" ilk="argument" name="scope" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="this" line="92" name="me" />
            <variable attributes="__local__ private" citdl="me.el" line="92" name="el" />
          </scope>
          <variable citdl="Object" line="102" name="prototype">
            <scope ilk="function" line="11" lineend="23" name="addElements" returns="this" signature="addElements(els, root)">
              <variable citdl="Ext.Element.selectorFunction()" ilk="argument" name="els" />
              <variable ilk="argument" name="root" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this.elements" line="18" name="yels" />
              <scope attributes="__local__ private" ilk="function" line="19" lineend="21" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Clears this composite and adds the elements returned by the passed selector." ilk="function" line="30" lineend="34" name="fill" returns="CompositeElement" signature="fill(els)">
              <variable citdl="String/Array" doc="A string CSS selector, an array of elements or an element" ilk="argument" name="els" />
              <variable citdl="prototype" name="this" />
            </scope>
            <variable citdl="Array" line="31" name="elements" />
            <scope doc="Returns the first Element" ilk="function" line="40" lineend="42" name="first" returns="Ext.Element" signature="first()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Returns the last Element" ilk="function" line="48" lineend="50" name="last" returns="Ext.Element" signature="last()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Returns true if this composite contains the passed element" ilk="function" line="57" lineend="59" name="contains" returns="this.indexOf()" signature="contains(el)">
              <variable citdl="Mixed" doc="The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection." ilk="argument" name="el" />
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Filters this composite to only elements that match the passed selector." ilk="function" line="66" lineend="75" name="filter" returns="CompositeElement" signature="filter(selector)">
              <variable citdl="String" doc="A string CSS selector" ilk="argument" name="selector" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="Array" line="67" name="els" />
              <scope attributes="__local__ private" ilk="function" line="68" lineend="72" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Removes the specified element(s)." ilk="function" line="84" lineend="101" name="removeElement" returns="CompositeElement" signature="removeElement(keys, removeDom)">
              <variable ilk="argument" name="keys" />
              <variable citdl="Boolean" doc="(optional) True to also remove the element from the document" ilk="argument" name="removeDom" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="87" name="me" />
              <variable attributes="__local__ private" citdl="this.elements" line="87" name="els" />
              <variable attributes="__local__ private" line="87" name="el" />
              <scope attributes="__local__ private" ilk="function" line="88" lineend="99" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </variable>
          <scope doc="Find the index of the passed element within the composite collection." ilk="function" line="106" lineend="108" name="indexOf" returns="this.elements.indexOf()" signature="indexOf(el)">
            <variable citdl="Mixed" doc="The id of an element, or an Ext.Element, or an HtmlElement to find within the composite collection." ilk="argument" name="el" />
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <scope doc="Replaces the specified element with the passed element." ilk="function" line="118" lineend="131" name="replaceElement" returns="CompositeElement" signature="replaceElement(el, replacement, domReplace)">
            <variable citdl="Mixed" doc="The id of an element, the Element itself, the index of the element in this composite&#xA;to replace." ilk="argument" name="el" />
            <variable citdl="Mixed" doc="The id of an element or the Element itself." ilk="argument" name="replacement" />
            <variable citdl="Boolean" doc="(Optional) True to remove and replace the element in the document too." ilk="argument" name="domReplace" />
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" line="120" name="index" />
            <variable attributes="__local__ private" citdl="this.elements[index]" line="120" name="d" />
          </scope>
          <scope doc="Removes all elements." ilk="function" line="136" lineend="138" name="clear" signature="clear()">
            <variable citdl="CompositeElementLite" name="this" />
          </scope>
          <scope attributes="__local__ private" ilk="function" line="143" lineend="158" name="(anonymous)" signature="(anonymous)()">
            <variable citdl="CompositeElementLite" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element.prototype" line="146" name="ElProto" />
            <variable attributes="__local__ private" citdl="Ext.CompositeElementLite.prototype" line="146" name="CelProto" />
            <variable attributes="__local__ private" line="146" name="fnName" />
            <scope attributes="__local__ private" ilk="function" line="150" lineend="154" name="(anonymous)" returns="this.invoke()" signature="(anonymous)(fnName)">
              <variable ilk="argument" name="fnName" />
            </scope>
          </scope>
        </scope>
        <scope classrefs="Object" ilk="class" line="24" lineend="27" name="LoadMask">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A simple utility class for generically masking elements while loading data.  If the {@link #store}&#xA;config option is specified, the masking will be automatically synchronized with the store&apos;s loading&#xA;process and the mask element will be cached for reuse.  For all other elements, this mask will replace the&#xA;element&apos;s Updater load indicator and will be destroyed after the initial load.&#xA;Example usage:&#xA;&#xA;// Basic mask:&#xA;var myMask = new Ext.LoadMask(Ext.getBody(), {msg:&quot;Please wait...&quot;});&#xA;myMask.show();" ilk="function" line="24" lineend="40" name="LoadMask" signature="LoadMask(el, config)">
            <variable citdl="Mixed" doc="The element or DOM node, or its id" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="LoadMask" name="this" />
            <variable attributes="__local__ private" citdl="this.el.getUpdater()" line="33" name="um" />
          </scope>
          <variable citdl="Ext.get()" line="25" name="el" />
          <variable citdl="Ext.value()" line="31" name="removeMask" />
          <variable citdl="String" doc="Optional Store to which the mask is bound. The mask is displayed when a load request is issued, and&#xA;hidden on either load sucess, or load fail." line="57" name="msg" />
          <variable citdl="String" doc="The CSS class to apply to the loading message element (defaults to &quot;x-mask-loading&quot;)" line="62" name="msgCls" />
          <variable citdl="Boolean" doc="Read-only. True if the mask is currently disabled so that it will not be displayed (defaults to false)" line="68" name="disabled" />
          <scope doc="Disables the mask to prevent it from being displayed" ilk="function" line="73" lineend="75" name="disable" signature="disable()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="Enables the mask so that it can be displayed" ilk="function" line="80" lineend="82" name="enable" signature="enable()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope ilk="function" line="85" lineend="87" name="onLoad" signature="onLoad()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope ilk="function" line="90" lineend="94" name="onBeforeLoad" signature="onBeforeLoad()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="Show this LoadMask over the configured Element." ilk="function" line="99" lineend="101" name="show" signature="show()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope doc="Hide this LoadMask." ilk="function" line="106" lineend="108" name="hide" signature="hide()">
            <variable citdl="LoadMask" name="this" />
          </scope>
          <scope ilk="function" line="111" lineend="122" name="destroy" signature="destroy()">
            <variable citdl="LoadMask" name="this" />
            <variable attributes="__local__ private" citdl="this.el.getUpdater()" line="117" name="um" />
          </scope>
        </scope>
        <scope classrefs="Ext.Component" ilk="class" line="25" lineend="40" name="ColorPalette">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Simple color palette class for choosing colors.  The palette can be rendered to any container.&#xA;Here&apos;s an example of typical usage:&#xA;&#xA;var cp = new Ext.ColorPalette({value:&apos;993300&apos;});  // initial selected color&#xA;cp.render(&apos;my-div&apos;);&#xA;cp.on(&apos;select&apos;, function(palette, selColor){&#xA;// do something with selColor&#xA;});" ilk="function" line="25" lineend="40" name="ColorPalette" signature="ColorPalette(config)">
            <variable citdl="Object" doc="The config object" ilk="argument" name="config" />
            <variable citdl="ColorPalette" name="this" />
          </scope>
          <variable citdl="String" doc="The CSS class to apply to the containing element (defaults to &quot;x-color-palette&quot;)" line="49" name="itemCls" />
          <variable citdl="color" doc="The initial color to highlight (should be a valid 6-digit color hex code without the # symbol).  Note that&#xA;the hex codes are case-sensitive." line="55" name="value" />
          <variable citdl="String" line="56" name="clickEvent" />
          <variable citdl="String" line="58" name="ctype" />
          <variable citdl="Boolean" line="63" name="allowReselect" />
          <variable citdl="Array" doc="An array of 6-digit color hex code strings (without the # symbol).  This array can contain any number&#xA;of colors, and each hex code should be unique.  The width of the palette is controlled via CSS by adjusting&#xA;the width property of the &apos;x-color-palette&apos; class (or assigning a custom class), so you can balance the number&#xA;of colors with the width setting until the box is symmetrical.&#xA;You can override individual colors if needed:&#xA;&#xA;var cp = new Ext.ColorPalette();&#xA;cp.colors[0] = &quot;FF0000&quot;;  // change the first box to red&#xA;Or you can provide a custom array of your own for complete control:&#xA;var cp = new Ext.ColorPalette();&#xA;cp.colors = [&quot;000000&quot;, &quot;993300&quot;, &quot;333300&quot;];" line="84" name="colors" />
          <scope ilk="function" line="92" lineend="106" name="onRender" signature="onRender(container, position)">
            <variable ilk="argument" name="container" />
            <variable ilk="argument" name="position" />
            <variable attributes="__local__ private" citdl="this.tpl" line="95" name="t" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="96" name="el" />
          </scope>
          <variable citdl="Ext.get()" line="101" name="el" />
          <scope ilk="function" line="109" lineend="116" name="afterRender" signature="afterRender()">
            <variable attributes="__local__ private" citdl="this.value" line="112" name="s" />
          </scope>
          <scope ilk="function" line="119" lineend="125" name="handleClick" signature="handleClick(e, t)">
            <variable ilk="argument" name="e" />
            <variable ilk="argument" name="t" />
            <variable attributes="__local__ private" citdl="t.className.match()[1]" line="122" name="c" />
          </scope>
          <scope doc="Selects the specified color in the palette (fires the {@link #select} event)" ilk="function" line="131" lineend="142" name="select" signature="select(color)">
            <variable citdl="String" doc="A valid 6-digit color hex code (# will be stripped if included)" ilk="argument" name="color" />
            <variable attributes="__local__ private" citdl="this.el" line="134" name="el" />
          </scope>
        </scope>
        <variable citdl="Object" line="27" lineend="25" name="TabPanelItem" />
        <scope citdl="Function" doc="A reusable empty function" ilk="function" line="28" lineend="28" name="emptyFn" signature="emptyFn()">
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Ext.CompositeElementLite" ilk="class" line="28" lineend="31" name="CompositeElement">
          <scope attributes="__ctor__" doc="Standard composite class. Creates a Ext.Element for every element in the collection.&#xA;&#xA;NOTE: Although they are not listed, this class supports all of the set/update methods of Ext.Element. All Ext.Element&#xA;actions will be performed on all the elements in this collection.&#xA;&#xA;All methods return this and can be chained.&#xA;var els = Ext.select(&quot;#some-el div.some-class&quot;, true);&#xA;// or select directly from an existing element&#xA;var el = Ext.get(&apos;some-el&apos;);&#xA;el.select(&apos;div.some-class&apos;, true);&#xA;els.setWidth(100); // all elements become 100 width&#xA;els.hide(true); // all elements fade out and hide&#xA;// or&#xA;els.setWidth(100).hide(true);" ilk="function" line="28" lineend="31" name="CompositeElement" signature="CompositeElement(els, root)">
            <variable ilk="argument" name="els" />
            <variable ilk="argument" name="root" />
            <variable citdl="CompositeElement" name="this" />
          </scope>
          <variable citdl="Array" line="29" name="elements" />
          <scope ilk="function" line="34" lineend="39" name="invoke" returns="this" signature="invoke(fn, args)">
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="args" />
            <scope attributes="__local__ private" ilk="function" line="35" lineend="37" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Adds elements to this composite." ilk="function" line="46" lineend="58" name="add" returns="CompositeElement" signature="add(els, root)">
            <variable citdl="String/Array" doc="A string CSS selector, an array of elements or an element" ilk="argument" name="els" />
            <variable ilk="argument" name="root" />
            <variable attributes="__local__ private" citdl="this.elements" line="53" name="yels" />
            <scope attributes="__local__ private" ilk="function" line="54" lineend="56" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Returns the Element object at the specified index" ilk="function" line="65" lineend="67" name="item" returns="Ext.Element" signature="item(index)">
            <variable citdl="Number" ilk="argument" name="index" />
          </scope>
          <scope ilk="function" line="70" lineend="72" name="indexOf" returns="this.elements.indexOf()" signature="indexOf(el)">
            <variable ilk="argument" name="el" />
          </scope>
          <scope ilk="function" line="74" lineend="85" name="filter" returns="me" signature="filter(selector)">
            <variable ilk="argument" name="selector" />
            <variable attributes="__local__ private" citdl="this" line="76" name="me" />
            <variable attributes="__local__ private" citdl="Array" line="76" name="out" />
            <scope attributes="__local__ private" ilk="function" line="78" lineend="82" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Calls the passed function passing (el, this, index) for each element in this composite." ilk="function" line="93" lineend="98" name="each" returns="CompositeElement" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The this object (defaults to the element)" ilk="argument" name="scope" />
          </scope>
        </scope>
        <scope classrefs="Ext.Element" ilk="class" line="28" lineend="466" name="Layer">
          <scope attributes="__ctor__" ilk="function" line="28" lineend="63" name="Layer" signature="Layer(config, existingEl)">
            <variable citdl="config" ilk="argument" name="config" />
            <variable ilk="argument" name="existingEl" />
            <variable citdl="Layer" name="this" />
            <variable attributes="__local__ private" citdl="Ext.DomHelper" line="30" name="dh" />
            <variable attributes="__local__ private" citdl="cp" line="31" name="pel" />
            <variable attributes="__local__ private" citdl="config.parentEl" line="31" name="cp" />
            <variable attributes="__local__ private" citdl="config.dh" line="36" name="o" />
          </scope>
          <variable citdl="String" line="36" name="tag" />
          <variable citdl="String" line="36" name="cls" />
          <variable citdl="config.constrain" line="42" name="constrain" />
          <variable citdl="config.zindex" line="49" name="zindex" />
          <variable citdl="config.shadowOffset" line="52" name="shadowOffset" />
          <variable citdl="Ext.Shadow" line="56" name="shadow" />
          <variable citdl="config.shim" line="60" name="useShim" />
          <variable citdl="config.useDisplay" line="61" name="useDisplay" />
          <scope ilk="function" line="72" lineend="74" name="getZIndex" returns="this.zindex" signature="getZIndex()" />
          <scope ilk="function" line="76" lineend="97" name="getShim" returns="shim" signature="getShim()">
            <variable attributes="__local__ private" citdl="shims.shift()" line="83" name="shim" />
            <variable attributes="__local__ private" citdl="this.dom.parentNode" line="90" name="pn" />
          </scope>
          <variable citdl="shim" line="95" name="shim" />
          <variable citdl="HTMLElement" doc="The DOM element" line="96" name="dom" />
          <scope ilk="function" line="99" lineend="105" name="hideShim" signature="hideShim()" />
          <variable citdl="String" doc="The DOM element ID" line="102" name="id" />
          <scope ilk="function" line="107" lineend="114" name="disableShadow" signature="disableShadow()" />
          <variable citdl="Boolean" line="109" name="shadowDisabled" />
          <variable citdl="this.shadowOffset" line="111" name="lastShadowOffset" />
          <scope ilk="function" line="116" lineend="125" name="enableShadow" signature="enableShadow(show)">
            <variable ilk="argument" name="show" />
          </scope>
          <scope ilk="function" line="130" lineend="167" name="sync" signature="sync(doShow)">
            <variable ilk="argument" name="doShow" />
            <variable attributes="__local__ private" citdl="this.shadow" line="131" name="sw" />
            <variable attributes="__local__ private" citdl="this.getShim()" line="133" name="sh" />
            <variable attributes="__local__ private" citdl="this.getHeight()" line="136" name="h" />
            <variable attributes="__local__ private" citdl="this.getWidth()" line="136" name="w" />
            <variable attributes="__local__ private" citdl="this.getLeft()" line="139" name="l" />
            <variable attributes="__local__ private" citdl="this.getTop()" line="139" name="t" />
            <variable attributes="__local__ private" citdl="sw.adjusts" line="152" name="a" />
            <variable attributes="__local__ private" citdl="sh.dom.style" line="152" name="s" />
          </scope>
          <scope ilk="function" line="170" lineend="178" name="destroy" signature="destroy()" />
          <scope ilk="function" line="180" lineend="182" name="remove" signature="remove()" />
          <scope ilk="function" line="185" lineend="187" name="beginUpdate" signature="beginUpdate()" />
          <variable citdl="Boolean" line="186" name="updating" />
          <scope ilk="function" line="190" lineend="193" name="endUpdate" signature="endUpdate()" />
          <scope ilk="function" line="196" lineend="201" name="hideUnders" signature="hideUnders(negOffset)">
            <variable ilk="argument" name="negOffset" />
          </scope>
          <scope ilk="function" line="204" lineend="248" name="constrainXY" returns="this" signature="constrainXY()">
            <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewHeight()" line="207" name="vh" />
            <variable attributes="__local__ private" citdl="Ext.lib.Dom.getViewWidth()" line="207" name="vw" />
            <variable attributes="__local__ private" citdl="Ext.getDoc().getScroll()" line="208" name="s" />
            <variable attributes="__local__ private" citdl="this.getXY()" line="210" name="xy" />
            <variable attributes="__local__ private" citdl="xy[1]" line="211" name="y" />
            <variable attributes="__local__ private" citdl="xy[0]" line="211" name="x" />
            <variable attributes="__local__ private" citdl="this.shadowOffset" line="212" name="so" />
            <variable attributes="__local__ private" citdl="this.dom.offsetHeight" line="213" name="h" />
            <variable attributes="__local__ private" citdl="this.dom.offsetWidth" line="213" name="w" />
            <variable attributes="__local__ private" citdl="Boolean" line="215" name="moved" />
            <variable attributes="__local__ private" citdl="this.avoidY" line="236" name="ay" />
          </scope>
          <scope ilk="function" line="250" lineend="252" name="isVisible" returns="this.visible" signature="isVisible()" />
          <scope ilk="function" line="255" lineend="264" name="showAction" signature="showAction()" />
          <variable citdl="Boolean" line="256" name="visible" />
          <scope ilk="function" line="267" lineend="274" name="hideAction" signature="hideAction()" />
          <scope ilk="function" line="277" lineend="310" name="setVisible" returns="this" signature="setVisible(v, a, d, c, e)">
            <variable ilk="argument" name="v" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="c" line="293" name="cb" />
            <scope attributes="__local__ private" ilk="function" line="295" lineend="300" name="cb" signature="cb()" />
          </scope>
          <scope ilk="function" line="312" lineend="315" name="storeXY" signature="storeXY(xy)">
            <variable ilk="argument" name="xy" />
          </scope>
          <variable citdl="xy" line="314" name="lastXY" />
          <scope ilk="function" line="317" lineend="320" name="storeLeftTop" signature="storeLeftTop(left, top)">
            <variable ilk="argument" name="left" />
            <variable ilk="argument" name="top" />
          </scope>
          <variable citdl="Array" line="319" name="lastLT" />
          <scope ilk="function" line="323" lineend="326" name="beforeFx" returns="Ext.Layer.superclass.beforeFx.apply()" signature="beforeFx()" />
          <scope ilk="function" line="329" lineend="332" name="afterFx" signature="afterFx()" />
          <scope ilk="function" line="335" lineend="339" name="beforeAction" signature="beforeAction()" />
          <scope ilk="function" line="342" lineend="347" name="setLeft" returns="this" signature="setLeft(left)">
            <variable ilk="argument" name="left" />
          </scope>
          <scope ilk="function" line="349" lineend="354" name="setTop" returns="this" signature="setTop(top)">
            <variable ilk="argument" name="top" />
          </scope>
          <scope ilk="function" line="356" lineend="361" name="setLeftTop" returns="this" signature="setLeftTop(left, top)">
            <variable ilk="argument" name="left" />
            <variable ilk="argument" name="top" />
          </scope>
          <scope ilk="function" line="363" lineend="373" name="setXY" returns="this" signature="setXY(xy, a, d, c, e)">
            <variable ilk="argument" name="xy" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="367" name="cb" />
          </scope>
          <scope ilk="function" line="376" lineend="385" name="createCB" signature="createCB(c)">
            <variable ilk="argument" name="c" />
            <variable attributes="__local__ private" citdl="this" line="377" name="el" />
          </scope>
          <scope ilk="function" line="388" lineend="391" name="setX" returns="this" signature="setX(x, a, d, c, e)">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope ilk="function" line="394" lineend="397" name="setY" returns="this" signature="setY(y, a, d, c, e)">
            <variable ilk="argument" name="y" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
          </scope>
          <scope ilk="function" line="400" lineend="408" name="setSize" returns="this" signature="setSize(w, h, a, d, c, e)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="402" name="cb" />
          </scope>
          <scope ilk="function" line="411" lineend="419" name="setWidth" returns="this" signature="setWidth(w, a, d, c, e)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="413" name="cb" />
          </scope>
          <scope ilk="function" line="422" lineend="430" name="setHeight" returns="this" signature="setHeight(h, a, d, c, e)">
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="424" name="cb" />
          </scope>
          <scope ilk="function" line="433" lineend="445" name="setBounds" returns="this" signature="setBounds(x, y, w, h, a, d, c, e)">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="y" />
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="a" />
            <variable ilk="argument" name="d" />
            <variable ilk="argument" name="c" />
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="this.createCB()" line="435" name="cb" />
          </scope>
          <scope doc="Sets the z-index of this layer and adjusts any shadow and shim z-indexes. The layer z-index is automatically&#xA;incremented by two more than the value passed in so that it always shows above any shadow or shim (the shadow&#xA;element, if any, will be assigned z-index + 1, and the shim element, if any, will be assigned the unmodified z-index)." ilk="function" line="454" lineend="464" name="setZIndex" returns="this" signature="setZIndex(zindex)">
            <variable citdl="Number" doc="The new z-index to set" ilk="argument" name="zindex" />
          </scope>
        </scope>
        <scope classrefs="Ext.util.Observable" ilk="class" line="31" lineend="139" name="SplitBar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Creates draggable splitter bar functionality from two elements (element to be dragged and element to be resized).&#xA;&#xA;Usage:&#xA;&#xA;var split = new Ext.SplitBar(&quot;elementToDrag&quot;, &quot;elementToSize&quot;,&#xA;Ext.SplitBar.HORIZONTAL, Ext.SplitBar.LEFT);&#xA;split.setAdapter(new Ext.SplitBar.AbsoluteLayoutAdapter(&quot;container&quot;));&#xA;split.minSize = 100;&#xA;split.maxSize = 600;&#xA;split.animate = true;&#xA;split.on(&apos;moved&apos;, splitterMoved);&#xA;Ext.SplitBar.TOP or Ext.SplitBar.BOTTOM for vertical. (By default, this is determined automatically by the initial&#xA;position of the SplitBar)." ilk="function" line="31" lineend="139" name="SplitBar" signature="SplitBar(dragElement, resizingElement, orientation, placement, existingProxy)">
            <variable citdl="Mixed" doc="The element to be dragged and act as the SplitBar." ilk="argument" name="dragElement" />
            <variable citdl="Mixed" doc="The element to be resized based on where the SplitBar element is dragged" ilk="argument" name="resizingElement" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)" ilk="argument" name="orientation" />
            <variable citdl="Number" doc="(optional) Either Ext.SplitBar.LEFT or Ext.SplitBar.RIGHT for horizontal or" ilk="argument" name="placement" />
            <variable ilk="argument" name="existingProxy" />
            <variable citdl="SplitBar" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="34" name="el" />
          <variable citdl="Ext.get()" line="37" name="resizingEl" />
          <variable attributes="private" citdl="Number" doc="PRIVATE: The orientation of the split. Either Ext.SplitBar.HORIZONTAL or Ext.SplitBar.VERTICAL. (Defaults to HORIZONTAL)&#xA;Note: If this is changed after creating the SplitBar, the placement property must be manually updated" line="45" name="orientation" />
          <variable citdl="Number" doc="The increment, in pixels by which to move this SplitBar. When undefined, the SplitBar moves smoothly." line="56" name="minSize" />
          <variable citdl="Number" doc="The maximum size of the resizing element. (Defaults to 2000)" line="62" name="maxSize" />
          <variable citdl="Boolean" doc="Whether to animate the transition to the new size" line="68" name="animate" />
          <variable citdl="Boolean" doc="Whether to create a transparent shim that overlays the page when dragging, enables dragging across iframes." line="74" name="useShim" />
          <variable line="77" name="shim" />
          <variable citdl="Ext.SplitBar.createProxy()" line="81" name="proxy" />
          <variable citdl="Ext.dd.DDProxy" line="86" name="dd" />
          <variable citdl="Object" line="95" lineend="95" name="dragSpecs" />
          <variable attributes="private" citdl="Ext.SplitBar.BasicLayoutAdapter" line="100" name="adapter" />
          <variable citdl="placement" line="105" name="placement" />
          <scope ilk="function" line="142" lineend="174" name="onStartProxyDrag" signature="onStartProxyDrag(x, y)">
            <variable ilk="argument" name="x" />
            <variable ilk="argument" name="y" />
            <variable attributes="__local__ private" citdl="this.adapter.getElementSize()" line="149" name="size" />
            <variable attributes="__local__ private" citdl="size" line="152" name="c1" />
            <variable attributes="__local__ private" citdl="Math.max()" line="153" name="c2" />
          </scope>
          <variable citdl="Ext.DomHelper.append()" line="144" name="overlay" />
          <variable citdl="this.getMinimumSize()" line="150" name="activeMinSize" />
          <variable citdl="this.getMaximumSize()" line="151" name="activeMaxSize" />
          <scope attributes="private" ilk="function" line="179" lineend="208" name="onEndProxyDrag" signature="onEndProxyDrag(e)">
            <variable ilk="argument" name="e" />
            <variable attributes="__local__ private" citdl="Ext.lib.Event.getXY()" line="181" name="endPoint" />
            <variable attributes="__local__ private" citdl="this.dragSpecs.startSize" line="186" name="newSize" />
          </scope>
          <scope doc="Get the adapter this SplitBar uses" ilk="function" line="214" lineend="216" name="getAdapter" returns="this.adapter" signature="getAdapter()" />
          <scope doc="Set the adapter this SplitBar uses" ilk="function" line="222" lineend="225" name="setAdapter" signature="setAdapter(adapter)">
            <variable citdl="Object" doc="A SplitBar adapter object" ilk="argument" name="adapter" />
          </scope>
          <scope doc="Gets the minimum size for the resizing element" ilk="function" line="231" lineend="233" name="getMinimumSize" returns="Number" signature="getMinimumSize()" />
          <scope doc="Sets the minimum size for the resizing element" ilk="function" line="239" lineend="241" name="setMinimumSize" signature="setMinimumSize(minSize)">
            <variable citdl="Number" doc="The minimum size" ilk="argument" name="minSize" />
          </scope>
          <scope doc="Gets the maximum size for the resizing element" ilk="function" line="247" lineend="249" name="getMaximumSize" returns="Number" signature="getMaximumSize()" />
          <scope doc="Sets the maximum size for the resizing element" ilk="function" line="255" lineend="257" name="setMaximumSize" signature="setMaximumSize(maxSize)">
            <variable citdl="Number" doc="The maximum size" ilk="argument" name="maxSize" />
          </scope>
          <scope doc="Sets the initialize size for the resizing element" ilk="function" line="263" lineend="268" name="setCurrentSize" signature="setCurrentSize(size)">
            <variable citdl="Number" doc="The initial size" ilk="argument" name="size" />
            <variable attributes="__local__ private" citdl="this.animate" line="264" name="oldAnimate" />
          </scope>
          <scope doc="Destroy this splitbar." ilk="function" line="274" lineend="281" name="destroy" signature="destroy(removeEl)">
            <variable citdl="Boolean" doc="True to remove the element" ilk="argument" name="removeEl" />
          </scope>
          <scope attributes="private" ilk="function" line="287" lineend="294" name="createProxy" returns="proxy.dom" signature="createProxy(dir)">
            <variable ilk="argument" name="dir" />
            <variable citdl="SplitBar" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="288" name="proxy" />
            <variable attributes="__local__ private" citdl="String" line="290" name="cls" />
          </scope>
          <scope classrefs="Object" ilk="class" line="301" lineend="349" name="BasicLayoutAdapter">
            <scope attributes="__ctor__" doc="Default Adapter. It assumes the splitter and resizing element are not positioned&#xA;elements and only gets/sets the width of the element. Generally used for table based layouts." ilk="function" line="301" lineend="302" name="BasicLayoutAdapter" signature="BasicLayoutAdapter()">
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="306" lineend="308" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called before drag operations to get the current size of the resizing element." ilk="function" line="313" lineend="319" name="getElementSize" returns="s.resizingEl.getHeight()" signature="getElementSize(s)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
            <scope doc="Called after drag operations to set the size of the resizing element." ilk="function" line="327" lineend="348" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable citdl="Ext.SplitBar" doc="The SplitBar using this adapter" ilk="argument" name="s" />
              <variable citdl="Number" doc="The new size to set" ilk="argument" name="newSize" />
              <variable citdl="Function" doc="A function to be invoked when resizing is complete" ilk="argument" name="onComplete" />
              <variable citdl="BasicLayoutAdapter" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.SplitBar.BasicLayoutAdapter&#xA;Adapter that  moves the splitter element to align with the resized sizing element.&#xA;Used with an absolute positioned SplitBar. Object" doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="class" line="359" lineend="394" name="AbsoluteLayoutAdapter">
            <scope attributes="__ctor__" doc="*@class Ext.SplitBar.AbsoluteLayoutAdapter" ilk="function" line="359" lineend="362" name="AbsoluteLayoutAdapter" signature="AbsoluteLayoutAdapter(container)">
              <variable citdl="Mixed" doc="The container that wraps around the absolute positioned content. If it&apos;s&#xA;document.body, make sure you assign an id to the body element." ilk="argument" name="container" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="365" lineend="367" name="init" signature="init(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="369" lineend="371" name="getElementSize" returns="this.basic.getElementSize()" signature="getElementSize(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="373" lineend="375" name="setElementSize" signature="setElementSize(s, newSize, onComplete)">
              <variable ilk="argument" name="s" />
              <variable ilk="argument" name="newSize" />
              <variable ilk="argument" name="onComplete" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
            </scope>
            <scope ilk="function" line="377" lineend="393" name="moveSplitter" signature="moveSplitter(s)">
              <variable ilk="argument" name="s" />
              <variable citdl="AbsoluteLayoutAdapter" name="this" />
              <variable attributes="__local__ private" citdl="Ext.SplitBar" line="378" name="yes" />
            </scope>
          </scope>
          <variable citdl="Ext.SplitBar.BasicLayoutAdapter" line="360" name="basic" />
          <variable citdl="Ext.get()" line="361" name="container" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a vertical SplitBar" line="401" name="VERTICAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Orientation constant - Create a horizontal SplitBar" line="408" name="HORIZONTAL" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the left of the splitter element" line="415" name="LEFT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is to the right of the splitter element" line="422" name="RIGHT" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned above the splitter element" line="429" name="TOP" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Placement constant - The resizing element is positioned under splitter element" line="436" name="BOTTOM" />
        </scope>
        <variable citdl="Object" line="31" name="form">
          <scope classrefs="Object" ilk="class" line="20" lineend="254" name="Action">
            <scope attributes="__ctor__" doc="The subclasses of this class provide actions to perform upon {@link Ext.form.BasicForm Form}s.&#xA;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;the Form needs to perform an action such as submit or load. The Configuration options&#xA;listed for this class are set through the Form&apos;s action methods: {@link Ext.form.BasicForm#submit submit},&#xA;{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}&#xA;The instance of Action which performed the action is passed to the success&#xA;and failure callbacks of the Form&apos;s action methods ({@link Ext.form.BasicForm#submit submit},&#xA;{@link Ext.form.BasicForm#load load} and {@link Ext.form.BasicForm#doAction doAction}),&#xA;and to the {@link Ext.form.BasicForm#actioncomplete actioncomplete} and&#xA;{@link Ext.form.BasicForm#actionfailed actionfailed} event handlers." ilk="function" line="20" lineend="23" name="Action" signature="Action(form, options)">
              <variable ilk="argument" name="form" />
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="form" line="21" name="form" />
            <variable citdl="options" line="22" name="options" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when client side validation of the Form fails&#xA;thus aborting a submit action. Client side validation is performed unless&#xA;{@link #clientValidation} is explicitly set to false." line="32" name="CLIENT_INVALID" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when server side processing fails and the {@link #result}&apos;s&#xA;success property is set to false.&#xA;In the case of a form submission, field-specific error messages may be returned in the&#xA;{@link #result}&apos;s errors property." line="41" name="SERVER_INVALID" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when a communication error happens when attempting&#xA;to send a request to the remote server. The {@link #response} may be examined to&#xA;provide further information." line="49" name="CONNECT_FAILURE" />
            <variable attributes="__static__" citdl="String" doc="STATIC: Failure type returned when the response&apos;s success&#xA;property is set to false, or no field values are returned in the response&apos;s&#xA;data property." line="57" name="LOAD_FAILURE" />
            <variable citdl="String" doc="{@link Ext.form.BasicForm.reset reset} on Action success. If specified, this happens&#xA;before the {@link #success} callback is called and before the Form&apos;s&#xA;{@link Ext.form.BasicForm.actioncomplete actioncomplete} event fires." line="121" name="type" />
            <scope citdl="Object" doc="The type of failure detected will be one of these: {@link #CLIENT_INVALID},&#xA;{@link #SERVER_INVALID}, {@link #CONNECT_FAILURE}, or {@link #LOAD_FAILURE}.  Usage:&#xA;&#xA;var fp = new Ext.form.FormPanel({&#xA;...&#xA;buttons: [{&#xA;text: &apos;Save&apos;,&#xA;formBind: true,&#xA;handler: function(){&#xA;if(fp.getForm().isValid()){&#xA;fp.getForm().submit({&#xA;url: &apos;form-submit.php&apos;,&#xA;waitMsg: &apos;Submitting your data...&apos;,&#xA;success: function(form, action){&#xA;// server responded with success = true&#xA;var result = action.{@link #result};&#xA;failure: function(form, action){&#xA;if (action.{@link #failureType} === Ext.form.Action.{@link #CONNECT_FAILURE}) {&#xA;Ext.Msg.alert(&apos;Error&apos;,&#xA;&apos;Status:&apos;+action.{@link #response}.status+&apos;: &apos;+&#xA;action.{@link #response}.statusText);&#xA;if (action.failureType === Ext.form.Action.{@link #SERVER_INVALID}){&#xA;// server responded with success = false&#xA;Ext.Msg.alert(&apos;Invalid&apos;, action.{@link #result}.errormsg);&#xA;});&#xA;},{&#xA;text: &apos;Reset&apos;,&#xA;handler: function(){&#xA;fp.getForm().reset();&#xA;&#xA;*/// interface method" ilk="function" line="177" lineend="179" name="run" signature="run(options)">
              <variable ilk="argument" name="options" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="182" lineend="184" name="success" signature="success(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="187" lineend="189" name="handleResponse" signature="handleResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="192" lineend="196" name="failure" signature="failure(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="response" line="193" name="response" />
            <variable citdl="Ext.form.Action.CONNECT_FAILURE" line="194" name="failureType" />
            <scope ilk="function" line="201" lineend="208" name="processResponse" returns="this.result" signature="processResponse(response)">
              <variable ilk="argument" name="response" />
              <variable citdl="Action" name="this" />
            </scope>
            <variable citdl="this.handleResponse()" line="206" name="result" />
            <scope ilk="function" line="211" lineend="220" name="getUrl" returns="url" signature="getUrl(appendParams)">
              <variable ilk="argument" name="appendParams" />
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.options.url" line="212" name="url" />
              <variable attributes="__local__ private" citdl="this.getParams()" line="214" name="p" />
            </scope>
            <scope ilk="function" line="223" lineend="225" name="getMethod" signature="getMethod()">
              <variable citdl="Action" name="this" />
            </scope>
            <scope ilk="function" line="228" lineend="241" name="getParams" returns="p" signature="getParams()">
              <variable citdl="Action" name="this" />
              <variable attributes="__local__ private" citdl="this.form.baseParams" line="229" name="bp" />
              <variable attributes="__local__ private" citdl="this.options.params" line="230" name="p" />
            </scope>
            <scope ilk="function" line="244" lineend="253" name="createCallback" signature="createCallback(opts)">
              <variable citdl="opts" ilk="argument" name="opts" />
              <variable citdl="Action" name="this" />
            </scope>
            <scope classrefs="Ext.form.Action" ilk="class" line="312" lineend="314" name="Submit">
              <scope attributes="__ctor__" doc="A class which handles submission of data from {@link Ext.form.BasicForm Form}s&#xA;and processes the returned response.&#xA;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;{@link Ext.form.BasicForm#submit submit}ting.&#xA;Response Packet Criteria&#xA;A response packet may contain:&#xA;&#xA;success property : Boolean&#xA;The success property is required.&#xA;errors property : Object&#xA;The errors property,&#xA;which is optional, contains error messages for invalid fields.&#xA;&#xA;JSON Packets&#xA;By default, response packets are assumed to be JSON, so a typical response&#xA;packet may look like this:&#xA;success: false,&#xA;errors: {&#xA;clientCode: &quot;Client not found&quot;,&#xA;portOfLoading: &quot;This field must not be null&quot;&#xA;Other data may be placed into the response for processing by the {@link Ext.form.BasicForm}&apos;s callback&#xA;or event handler methods. The object decoded from this JSON is available in the&#xA;{@link Ext.form.Action#result result} property.&#xA;Alternatively, if an {@link #errorReader} is specified as an {@link Ext.data.XmlReader XmlReader}:&#xA;errorReader: new Ext.data.XmlReader({&#xA;record : &apos;field&apos;,&#xA;success: &apos;@success&apos;&#xA;}, [&#xA;&apos;id&apos;, &apos;msg&apos;&#xA;then the results may be sent back in XML format:&#xA;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&#xA;&amp;lt;message success=&quot;false&quot;&amp;gt;&#xA;&amp;lt;errors&amp;gt;&#xA;&amp;lt;field&amp;gt;&#xA;&amp;lt;id&amp;gt;clientCode&amp;lt;/id&amp;gt;&#xA;&amp;lt;msg&amp;gt;&amp;lt;![CDATA[Code not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;&#xA;&amp;lt;/field&amp;gt;&#xA;&amp;lt;field&amp;gt;&#xA;&amp;lt;id&amp;gt;portOfLoading&amp;lt;/id&amp;gt;&#xA;&amp;lt;msg&amp;gt;&amp;lt;![CDATA[Port not found. &amp;lt;br /&amp;gt;&amp;lt;i&amp;gt;This is a test validation message from the server &amp;lt;/i&amp;gt;]]&amp;gt;&amp;lt;/msg&amp;gt;&#xA;&amp;lt;/field&amp;gt;&#xA;&amp;lt;/errors&amp;gt;&#xA;&amp;lt;/message&amp;gt;&#xA;Other elements may be placed into the response XML for processing by the {@link Ext.form.BasicForm}&apos;s callback&#xA;or event handler methods. The XML document is available in the {@link #errorReader}&apos;s {@link Ext.data.XmlReader#xmlData xmlData} property." ilk="function" line="312" lineend="314" name="Submit" signature="Submit(form, options)">
                <variable ilk="argument" name="form" />
                <variable ilk="argument" name="options" />
                <variable citdl="Submit" name="this" />
              </scope>
              <variable citdl="String" doc="no need for an errorReader.&#xA;A Reader which reads a single record from the returned data. The DataReader&apos;s&#xA;success property specifies how submission success is determined. The Record&apos;s&#xA;data provides the error messages to apply to any invalid form Fields." line="330" name="type" />
              <scope ilk="function" line="333" lineend="350" name="run" signature="run()">
                <variable attributes="__local__ private" citdl="this.options" line="334" name="o" />
                <variable attributes="__local__ private" citdl="this.getMethod()" line="335" name="method" />
                <variable attributes="__local__ private" citdl="method" line="336" name="isGet" />
              </scope>
              <variable citdl="Ext.form.Action.CLIENT_INVALID" line="347" name="failureType" />
              <scope ilk="function" line="353" lineend="364" name="success" signature="success(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.processResponse()" line="354" name="result" />
              </scope>
              <scope ilk="function" line="367" lineend="386" name="handleResponse" returns="Ext.decode()" signature="handleResponse(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.form.errorReader.read()" line="369" name="rs" />
                <variable attributes="__local__ private" citdl="Array" line="370" name="errors" />
                <variable attributes="__local__ private" citdl="rs.records[i]" line="373" name="r" />
              </scope>
            </scope>
            <scope classrefs="Ext.form.Action" ilk="class" line="448" lineend="451" name="Load">
              <scope attributes="__ctor__" doc="A class which handles loading of data from a server into the Fields of an {@link Ext.form.BasicForm}.&#xA;Instances of this class are only created by a {@link Ext.form.BasicForm Form} when&#xA;{@link Ext.form.BasicForm#load load}ing.&#xA;Response Packet Criteria&#xA;A response packet must contain:&#xA;&#xA;success property : Boolean&#xA;data property : Object&#xA;The data property contains the values of Fields to load.&#xA;The individual value object for each Field is passed to the Field&apos;s&#xA;{@link Ext.form.Field#setValue setValue} method.&#xA;&#xA;JSON Packets&#xA;By default, response packets are assumed to be JSON, so for the following form load call:&#xA;var myFormPanel = new Ext.form.FormPanel({&#xA;title: &apos;Client and routing info&apos;,&#xA;items: [{&#xA;fieldLabel: &apos;Client&apos;,&#xA;name: &apos;clientName&apos;&#xA;}, {&#xA;fieldLabel: &apos;Port of loading&apos;,&#xA;name: &apos;portOfLoading&apos;&#xA;}, {&#xA;fieldLabel: &apos;Port of discharge&apos;,&#xA;name: &apos;portOfDischarge&apos;&#xA;});&#xA;myFormPanel.{@link Ext.form.FormPanel#getForm getForm}().{@link Ext.form.BasicForm#load load}({&#xA;url: &apos;/getRoutingInfo.php&apos;,&#xA;params: {&#xA;consignmentRef: myConsignmentRef&#xA;failure: function(form, action() {&#xA;Ext.Msg.alert(&quot;Load failed&quot;, action.result.errorMessage);&#xA;});&#xA;a success response packet may look like this:&#xA;success: true,&#xA;data: {&#xA;clientName: &quot;Fred. Olsen Lines&quot;,&#xA;portOfLoading: &quot;FXT&quot;,&#xA;portOfDischarge: &quot;OSL&quot;&#xA;while a failure response packet may look like this:&#xA;success: false,&#xA;errorMessage: &quot;Consignment reference not found&quot;&#xA;Other data may be placed into the response for processing the {@link Ext.form.BasicForm Form}&apos;s&#xA;callback or event handler methods. The object decoded from this JSON is available in the&#xA;{@link Ext.form.Action#result result} property." ilk="function" line="448" lineend="451" name="Load" signature="Load(form, options)">
                <variable ilk="argument" name="form" />
                <variable ilk="argument" name="options" />
                <variable citdl="Load" name="this" />
              </scope>
              <variable citdl="this.form.reader" line="450" name="reader" />
              <variable citdl="String" line="455" name="type" />
              <scope ilk="function" line="458" lineend="466" name="run" signature="run()" />
              <scope ilk="function" line="469" lineend="479" name="success" signature="success(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.processResponse()" line="470" name="result" />
              </scope>
              <variable citdl="Ext.form.Action.LOAD_FAILURE" line="472" name="failureType" />
              <scope ilk="function" line="482" lineend="492" name="handleResponse" returns="Ext.decode()" signature="handleResponse(response)">
                <variable ilk="argument" name="response" />
                <variable attributes="__local__ private" citdl="this.form.reader.read()" line="484" name="rs" />
                <variable attributes="__local__ private" citdl="rs.records" line="485" name="data" />
              </scope>
            </scope>
            <variable citdl="Ext.extend()" doc="Provides Ext.direct support for loading form data. This example illustrates usage&#xA;of Ext.Direct to load a submit a form through Ext.Direct.&#xA;&#xA;var myFormPanel = new Ext.form.FormPanel({&#xA;// configs for FormPanel&#xA;title: &apos;Basic Information&apos;,&#xA;border: false,&#xA;padding: 10,&#xA;buttons:[{&#xA;text: &apos;Submit&apos;,&#xA;handler: function(){&#xA;basicInfo.getForm().submit({&#xA;params: {&#xA;uid: 5&#xA;});&#xA;}],&#xA;// configs apply to child items&#xA;defaults: {anchor: &apos;100%&apos;},&#xA;defaultType: &apos;textfield&apos;,&#xA;items: [&#xA;// form fields go here&#xA;// configs for BasicForm&#xA;api: {&#xA;load: Profile.getBasicInfo,&#xA;// The server-side must mark the submit handler as a &apos;formHandler&apos;&#xA;submit: Profile.updateBasicInfo&#xA;paramOrder: [&apos;uid&apos;]&#xA;});&#xA;// load the form&#xA;myFormPanel.getForm().load({&#xA;params: {&#xA;uid: 5&#xA;});" line="577" name="DirectLoad" />
            <variable citdl="Ext.extend()" doc="Provides Ext.direct support for submitting form data.&#xA;See {@link Ext.form.Action.DirectLoad}." line="618" name="DirectSubmit" />
            <variable citdl="Object" line="621" lineend="626" name="ACTION_TYPES">
              <variable citdl="Ext.form.Action.Load" line="622" name="load" />
              <variable citdl="Ext.form.Action.Submit" line="623" name="submit" />
              <variable citdl="Ext.form.Action.DirectLoad" line="624" name="directload" />
              <variable citdl="Ext.form.Action.DirectSubmit" line="625" name="directsubmit" />
            </variable>
          </scope>
          <variable citdl="Object" line="31" lineend="136" name="Field">
            <variable citdl="Object" line="607" lineend="639" name="msgFx">
              <variable citdl="Object" line="608" lineend="616" name="normal">
                <scope ilk="function" line="609" lineend="611" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="normal" name="this" />
                </scope>
                <scope ilk="function" line="613" lineend="615" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="normal" name="this" />
                </scope>
              </variable>
              <variable citdl="Object" line="618" lineend="626" name="slide">
                <scope ilk="function" line="619" lineend="621" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slide" name="this" />
                </scope>
                <scope ilk="function" line="623" lineend="625" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slide" name="this" />
                </scope>
              </variable>
              <variable citdl="Object" line="628" lineend="638" name="slideRight">
                <scope ilk="function" line="629" lineend="633" name="show" signature="show(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slideRight" name="this" />
                </scope>
                <scope ilk="function" line="635" lineend="637" name="hide" signature="hide(msgEl, f)">
                  <variable ilk="argument" name="msgEl" />
                  <variable ilk="argument" name="f" />
                  <variable citdl="slideRight" name="this" />
                </scope>
              </variable>
            </variable>
          </variable>
          <scope classrefs="Ext.util.Observable" ilk="class" line="37" lineend="265" name="BasicForm">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Encapsulates the DOM &amp;lt;form&gt; element at the heart of the {@link Ext.form.FormPanel FormPanel} class, and provides&#xA;input field management, validation, submission, and form loading services.&#xA;By default, Ext Forms are submitted through Ajax, using an instance of {@link Ext.form.Action.Submit}.&#xA;To enable normal browser submission of an Ext Form, use the {@link #standardSubmit} config option.&#xA;File Uploads&#xA;{@link #fileUpload File uploads} are not performed using Ajax submission, that&#xA;is they are not performed using XMLHttpRequests. Instead the form is submitted in the standard&#xA;manner with the DOM &amp;lt;form&gt; element temporarily modified to have its&#xA;target set to refer&#xA;to a dynamically generated, hidden &amp;lt;iframe&gt; which is inserted into the document&#xA;but removed after the return data has been gathered.&#xA;The server response is parsed by the browser to create the document for the IFRAME. If the&#xA;server is using JSON to send the return object, then the&#xA;Content-Type header&#xA;must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.&#xA;Characters which are significant to an HTML parser must be sent as HTML entities, so encode&#xA;&quot;&amp;lt;&quot; as &quot;&amp;amp;lt;&quot;, &quot;&amp;amp;&quot; as &quot;&amp;amp;amp;&quot; etc.&#xA;The response text is retrieved from the document, and a fake XMLHttpRequest object&#xA;is created containing a responseText property in order to conform to the&#xA;requirements of event handlers and callbacks.&#xA;Be aware that file upload packets are sent with the content type multipart/form&#xA;and some server technologies (notably JEE) may require some custom processing in order to&#xA;retrieve parameter names and parameter values from the packet content." ilk="function" line="37" lineend="78" name="BasicForm" signature="BasicForm(el, config)">
              <variable citdl="Mixed" doc="The form element or its id" ilk="argument" name="el" />
              <variable citdl="Object" doc="Configuration options" ilk="argument" name="config" />
              <variable citdl="BasicForm" name="this" />
              <scope attributes="__local__ private" ilk="function" line="47" lineend="49" name="(anonymous)" returns="o.itemId" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="49" name="items" />
            <variable citdl="Number" doc="The request method to use (GET or POST) for form actions if one isn&apos;t supplied in the action options.&#xA;records: recordArray" line="144" name="timeout" />
            <variable doc="with {@link Ext.form.Action.DirectLoad} and {@link Ext.form.Action.DirectSubmit}.&#xA;Methods which have been imported by Ext.Direct can be specified here to load and submit&#xA;forms.&#xA;Such as the following:&#xA;api: {&#xA;load: App.ss.MyProfile.load,&#xA;submit: App.ss.MyProfile.submit&#xA;Load actions can use {@link #paramOrder} or {@link #paramsAsHash}&#xA;to customize how the load method is invoked.&#xA;Submit actions will always use a standard form submit. The formHandler configuration must&#xA;be set on the associated server-side method which has been imported by Ext.Direct&#xA;paramOrder: [&apos;param1&apos;,&apos;param2&apos;,&apos;param3&apos;]&#xA;paramOrder: &apos;param1 param2 param3&apos;&#xA;paramOrder: &apos;param1,param2,param3&apos;&#xA;paramOrder: &apos;param1|param2|param&apos;" line="177" name="paramOrder" />
            <variable citdl="Boolean" doc="load configuration. Send parameters as a collection of named&#xA;arguments (defaults to false). Providing a&#xA;{@link #paramOrder} nullifies this configuration." line="185" name="paramsAsHash" />
            <variable line="189" name="activeAction" />
            <variable citdl="Boolean" doc="or {@link #setValues}() data instead of when the form was first created.  Defaults to false." line="195" name="trackResetOnLoad" />
            <scope citdl="Mixed" doc="form submissions. (defaults to false)&#xA;Note: When using standardSubmit, the options to {@link #submit} are ignored because Ext&apos;s&#xA;Ajax infrastracture is bypassed. To pass extra parameters (baseParams and params), you will need to&#xA;create hidden fields within the form.&#xA;The url config option is also bypassed, so set the action as well:&#xA;&#xA;PANEL.getForm().getEl().dom.action = &apos;URL&apos;&#xA;&#xA;An example encapsulating the above:&#xA;&#xA;new Ext.FormPanel({&#xA;standardSubmit: true,&#xA;baseParams: {&#xA;foo: &apos;bar&apos;&#xA;url: &apos;myProcess.php&apos;,&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;name: &apos;userName&apos;&#xA;}],&#xA;buttons: [{&#xA;text: &apos;Save&apos;,&#xA;handler: function(){&#xA;var O = this.ownerCt;&#xA;if (O.getForm().isValid()) {&#xA;if (O.url)&#xA;O.getForm().getEl().dom.action = O.url;&#xA;if (O.baseParams) {&#xA;for (i in O.baseParams) {&#xA;O.add({&#xA;xtype: &apos;hidden&apos;,&#xA;name: i,&#xA;value: O.baseParams[i]&#xA;O.doLayout();&#xA;O.getForm().submit();&#xA;});&#xA;&#xA;By default wait messages are displayed with Ext.MessageBox.wait. You can target a specific&#xA;element by passing it or its id or mask the form itself by passing in true.&#xA;*/// private" ilk="function" line="251" lineend="258" name="initEl" signature="initEl(el)">
              <variable ilk="argument" name="el" />
            </scope>
            <variable citdl="Ext.get()" line="252" name="el" />
            <variable citdl="this.el.id" line="253" name="id" />
            <scope doc="Get the HTML form Element" ilk="function" line="264" lineend="266" name="getEl" returns="this.el" signature="getEl()" />
            <scope ilk="function" line="269" lineend="271" name="onSubmit" signature="onSubmit(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="274" lineend="283" name="destroy" signature="destroy()">
              <scope attributes="__local__ private" ilk="function" line="275" lineend="277" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Returns true if client-side validation on the form is successful." ilk="function" line="289" lineend="297" name="isValid" returns="valid" signature="isValid()">
              <variable attributes="__local__ private" citdl="Boolean" line="290" name="valid" />
              <scope attributes="__local__ private" ilk="function" line="291" lineend="295" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Returns true if any fields in this form have changed from their original values.&#xA;Note that if this BasicForm was configured with {@link #trackResetOnLoad} then the&#xA;Fields&apos; original values are updated when the values are loaded by {@link #setValues}&#xA;or {@link #loadRecord}." ilk="function" line="306" lineend="315" name="isDirty" returns="dirty" signature="isDirty()">
              <variable attributes="__local__ private" citdl="Boolean" line="307" name="dirty" />
              <scope attributes="__local__ private" ilk="function" line="308" lineend="313" name="(anonymous)" returns="Boolean" signature="(anonymous)()" />
            </scope>
            <scope doc="Performs a predefined action ({@link Ext.form.Action.Submit} or&#xA;{@link Ext.form.Action.Load}) or a custom extension of {@link Ext.form.Action}&#xA;to perform application-specific processing." ilk="function" line="376" lineend="385" name="doAction" returns="BasicForm" signature="doAction(action, options)">
              <variable citdl="Ext.form.Action.ACTION_TYPES" ilk="argument" name="action" />
              <variable citdl="Object" doc="(optional) The options to pass to the {@link Ext.form.Action}.&#xA;All of the config options listed below are supported by both the&#xA;{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}&#xA;actions unless otherwise noted (custom actions could also accept&#xA;other config options):&#xA;url : StringThe url for the action (defaults&#xA;to the form&apos;s {@link #url}.)&#xA;method : StringThe form method to use (defaults&#xA;to the form&apos;s method, or POST if not defined)&#xA;params : String/ObjectThe params to pass&#xA;(defaults to the form&apos;s baseParams, or none if not defined)&#xA;Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.&#xA;headers : ObjectRequest headers to set for the action&#xA;(defaults to the form&apos;s default headers)&#xA;success : FunctionThe callback that will&#xA;be invoked after a successful response (see top of&#xA;{@link Ext.form.Action.Submit submit} and {@link Ext.form.Action.Load load}&#xA;for a description of what constitutes a successful response).&#xA;The function is passed the following parameters:&#xA;form : Ext.form.BasicFormThe form that requested the action&#xA;action : The {@link Ext.form.Action Action} object which performed the operation.&#xA;The action object contains these properties of interest:&#xA;{@link Ext.form.Action#response response}&#xA;{@link Ext.form.Action#result result} : interrogate for custom postprocessing&#xA;{@link Ext.form.Action#type type}&#xA;failure : FunctionThe callback that will be invoked after a&#xA;failed transaction attempt. The function is passed the following parameters:&#xA;form : The {@link Ext.form.BasicForm} that requested the action.&#xA;action : The {@link Ext.form.Action Action} object which performed the operation.&#xA;The action object contains these properties of interest:&#xA;{@link Ext.form.Action#failureType failureType}&#xA;{@link Ext.form.Action#response response}&#xA;{@link Ext.form.Action#result result} : interrogate for custom postprocessing&#xA;{@link Ext.form.Action#type type}&#xA;scope : ObjectThe scope in which to call the&#xA;callback functions (The this reference for the callback functions).&#xA;clientValidation : BooleanSubmit Action only.&#xA;Determines whether a Form&apos;s fields are validated in a final call to&#xA;{@link Ext.form.BasicForm#isValid isValid} prior to submission. Set to false&#xA;to prevent this. If undefined, pre-submission field validation is performed." ilk="argument" name="options" />
            </scope>
            <scope doc="Shortcut to {@link #doAction do} a {@link Ext.form.Action.Submit submit action}.&#xA;myFormPanel.getForm().submit({&#xA;clientValidation: true,&#xA;url: &apos;updateConsignment.php&apos;,&#xA;params: {&#xA;newStatus: &apos;delivered&apos;&#xA;success: function(form, action) {&#xA;Ext.Msg.alert(&apos;Success&apos;, action.result.msg);&#xA;failure: function(form, action) {&#xA;switch (action.failureType) {&#xA;case Ext.form.Action.CLIENT_INVALID:&#xA;Ext.Msg.alert(&apos;Failure&apos;, &apos;Form fields may not be submitted with invalid values&apos;);&#xA;break;&#xA;case Ext.form.Action.CONNECT_FAILURE:&#xA;Ext.Msg.alert(&apos;Failure&apos;, &apos;Ajax communication failed&apos;);&#xA;break;&#xA;case Ext.form.Action.SERVER_INVALID:&#xA;Ext.Msg.alert(&apos;Failure&apos;, action.result.msg);&#xA;});&#xA;&quot;success&quot;:true, // note this is Boolean, not string&#xA;&quot;msg&quot;:&quot;Consignment updated&quot;&#xA;&quot;success&quot;:false, // note this is Boolean, not string&#xA;&quot;msg&quot;:&quot;You do not have permission to perform this operation&quot;" ilk="function" line="429" lineend="440" name="submit" returns="BasicForm" signature="submit(options)">
              <variable citdl="Object" doc="The options to pass to the action (see {@link #doAction} for details).&#xA;Note: this is ignored when using the {@link #standardSubmit} option.&#xA;The following code:&#xA;would process the following server response for a successful submission:&#xA;and the following server response for a failed submission:" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="this.isValid()" line="431" name="v" />
              <variable attributes="__local__ private" citdl="String.format()" line="437" name="submitAction" />
            </scope>
            <scope doc="Shortcut to {@link #doAction do} a {@link Ext.form.Action.Load load action}." ilk="function" line="447" lineend="451" name="load" returns="BasicForm" signature="load(options)">
              <variable citdl="Object" doc="The options to pass to the action (see {@link #doAction} for details)" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="String.format()" line="448" name="loadAction" />
            </scope>
            <scope doc="Persists the values in this form into the passed {@link Ext.data.Record} object in a beginEdit/endEdit block." ilk="function" line="458" lineend="469" name="updateRecord" returns="BasicForm" signature="updateRecord(record)">
              <variable citdl="Record" doc="The record to edit" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="record.fields" line="460" name="fs" />
              <scope attributes="__local__ private" ilk="function" line="461" lineend="466" name="(anonymous)" signature="(anonymous)()">
                <variable attributes="__local__ private" citdl="this.findField()" line="462" name="field" />
              </scope>
            </scope>
            <scope doc="Loads an {@link Ext.data.Record} into this form by calling {@link #setValues} with the&#xA;{@link Ext.data.Record#data record data}.&#xA;See also {@link #trackResetOnLoad}." ilk="function" line="478" lineend="481" name="loadRecord" returns="BasicForm" signature="loadRecord(record)">
              <variable citdl="Record" doc="The record to load" ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="484" lineend="496" name="beforeAction" signature="beforeAction(action)">
              <variable ilk="argument" name="action" />
              <variable attributes="__local__ private" citdl="action.options" line="485" name="o" />
            </scope>
            <variable citdl="Ext.get()" line="490" name="waitMsgTarget" />
            <scope ilk="function" line="499" lineend="522" name="afterAction" signature="afterAction(action, success)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="success" />
              <variable attributes="__local__ private" citdl="action.options" line="501" name="o" />
            </scope>
            <scope doc="Find a {@link Ext.form.Field} in this form." ilk="function" line="530" lineend="541" name="findField" returns="field" signature="findField(id)">
              <variable citdl="String" doc="The value to search for (specify either a {@link Ext.Component#id id},&#xA;{@link Ext.grid.Column#dataIndex dataIndex}, {@link Ext.form.Field#getName name or hiddenName})." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.items.get()" line="531" name="field" />
              <scope attributes="__local__ private" ilk="function" line="533" lineend="538" name="(anonymous)" returns="Boolean" signature="(anonymous)()" />
            </scope>
            <scope doc="Mark fields in this form invalid in bulk." ilk="function" line="549" lineend="567" name="markInvalid" returns="BasicForm" signature="markInvalid(errors)">
              <variable citdl="Array/Object" doc="Either an array in the form [{id:&apos;fieldId&apos;, msg:&apos;The message&apos;},...] or an object hash of {id: msg, id2: msg2}" ilk="argument" name="errors" />
              <variable attributes="__local__ private" citdl="errors[i]" line="552" name="fieldError" />
              <variable attributes="__local__ private" citdl="this.findField()" line="553" name="f" />
              <variable attributes="__local__ private" line="559" name="field" />
              <variable attributes="__local__ private" line="559" name="id" />
            </scope>
            <scope doc="Set values for fields in this form in bulk.&#xA;[{id:&apos;clientName&apos;, value:&apos;Fred. Olsen Lines&apos;},&#xA;{id:&apos;portOfLoading&apos;, value:&apos;FXT&apos;},&#xA;{id:&apos;portOfDischarge&apos;, value:&apos;OSL&apos;} ]&#xA;clientName: &apos;Fred. Olsen Lines&apos;,&#xA;portOfLoading: &apos;FXT&apos;,&#xA;portOfDischarge: &apos;OSL&apos;" ilk="function" line="583" lineend="607" name="setValues" returns="BasicForm" signature="setValues(values)">
              <variable citdl="Array/Object" doc="Either an array in the form:&#xA;or an object hash of the form:" ilk="argument" name="values" />
              <variable attributes="__local__ private" citdl="values[i]" line="586" name="v" />
              <variable attributes="__local__ private" citdl="this.findField()" line="587" name="f" />
              <variable attributes="__local__ private" line="596" name="field" />
              <variable attributes="__local__ private" line="596" name="id" />
            </scope>
            <scope doc="Returns the fields in this form as an object with key/value pairs as they would be submitted using a standard form submit.&#xA;If multiple fields exist with the same name they are returned as an array.&#xA;Note: The values are collected from all enabled HTML input elements within the form, not from&#xA;the Ext Field objects. This means that all returned values are Strings (or Arrays of Strings) and that the&#xA;value can potentially be the emptyText of a field." ilk="function" line="618" lineend="624" name="getValues" returns="String/Object" signature="getValues(asString)">
              <variable citdl="Boolean" doc="(optional) Pass true to return the values as a string. (defaults to false, returning an Object)" ilk="argument" name="asString" />
              <variable attributes="__local__ private" citdl="Ext.lib.Ajax.serializeForm()" line="619" name="fs" />
            </scope>
            <scope ilk="function" line="626" lineend="632" name="getFieldValues" returns="o" signature="getFieldValues()">
              <variable attributes="__local__ private" citdl="Object" line="627" lineend="627" name="o" />
              <scope attributes="__local__ private" ilk="function" line="628" lineend="630" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Clears all invalid messages in this form." ilk="function" line="638" lineend="643" name="clearInvalid" returns="BasicForm" signature="clearInvalid()">
              <scope attributes="__local__ private" ilk="function" line="639" lineend="641" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Resets this form." ilk="function" line="649" lineend="654" name="reset" returns="BasicForm" signature="reset()">
              <scope attributes="__local__ private" ilk="function" line="650" lineend="652" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Add Ext.form Components to this form&apos;s Collection. This does not result in rendering of&#xA;the passed Component, it just enables the form to validate Fields, and distribute values to&#xA;Fields.&#xA;You will not usually call this function. In order to be rendered, a Field must be added&#xA;to a {@link Ext.Container Container}, usually an {@link Ext.form.FormPanel FormPanel}.&#xA;The FormPanel to which the field is added takes care of adding the Field to the BasicForm&apos;s&#xA;collection." ilk="function" line="669" lineend="672" name="add" returns="BasicForm" signature="add()" />
            <scope doc="Removes a field from the items collection (does NOT remove its markup)." ilk="function" line="680" lineend="683" name="remove" returns="BasicForm" signature="remove(field)">
              <variable citdl="Field" ilk="argument" name="field" />
            </scope>
            <scope doc="Calls {@link Ext#apply} for all fields in this form with the passed object." ilk="function" line="704" lineend="709" name="applyToFields" returns="BasicForm" signature="applyToFields(o)">
              <variable ilk="argument" name="o" />
              <scope attributes="__local__ private" ilk="function" line="705" lineend="707" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Calls {@link Ext#applyIf} for all field in this form with the passed object." ilk="function" line="716" lineend="721" name="applyIfToFields" returns="BasicForm" signature="applyIfToFields(o)">
              <variable ilk="argument" name="o" />
              <scope attributes="__local__ private" ilk="function" line="717" lineend="719" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope ilk="function" line="723" lineend="731" name="callFieldMethod" returns="this" signature="callFieldMethod(fnName, args)">
              <variable ilk="argument" name="fnName" />
              <variable citdl="args" ilk="argument" name="args" />
              <scope attributes="__local__ private" ilk="function" line="725" lineend="729" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A basic hidden field for storing hidden values in forms that need to be passed in the form submit." line="38" name="Hidden" />
          <scope ilk="class" line="41" lineend="63" name="VTypes">
            <variable citdl="Object" line="41" lineend="134" name="VTypes">
              <scope doc="The function used to validate email addresses.  Note that this is a very basic validation -- complete&#xA;validation per the email RFC specifications is very complex and beyond the scope of this class, although&#xA;this function can be overridden if a more comprehensive validation scheme is desired.  See the validation&#xA;section of the Wikipedia article on email addresses&#xA;for additional information.  This implementation is intended to validate the following emails:&#xA;&apos;barney@example.de&apos;, &apos;barney.rubble@example.com&apos;, &apos;barney-rubble@example.coop&apos;, &apos;barney+rubble@example.com&apos;&#xA;." ilk="function" line="61" lineend="63" name="email" returns="Boolean" signature="email(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the email validation function returns false.  Defaults to:&#xA;&apos;This field should be an e-mail address in the format &quot;user@example.com&quot;&apos;" line="69" name="emailText" />
              <variable citdl="RegExp" doc="The keystroke filter mask to be applied on email input.  See the {@link #email} method for&#xA;information about more complex email validation. Defaults to:&#xA;/[a-z0-9_\.\-@]/i" line="76" name="emailMask" />
              <scope doc="The function used to validate URLs" ilk="function" line="83" lineend="85" name="url" returns="Boolean" signature="url(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the url validation function returns false.  Defaults to:&#xA;&apos;This field should be a URL in the format &quot;http:/&apos;+&apos;/www.example.com&quot;&apos;" line="91" name="urlText" />
              <scope doc="The function used to validate alpha values" ilk="function" line="98" lineend="100" name="alpha" returns="Boolean" signature="alpha(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the alpha validation function returns false.  Defaults to:&#xA;&apos;This field should only contain letters and _&apos;" line="106" name="alphaText" />
              <variable citdl="RegExp" doc="The keystroke filter mask to be applied on alpha input.  Defaults to:&#xA;/[a-z_]/i" line="112" name="alphaMask" />
              <scope doc="The function used to validate alphanumeric values" ilk="function" line="119" lineend="121" name="alphanum" returns="Boolean" signature="alphanum(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="VTypes" name="this" />
              </scope>
              <variable citdl="String" doc="The error text to display when the alphanumeric validation function returns false.  Defaults to:&#xA;&apos;This field should only contain letters, numbers and _&apos;" line="127" name="alphanumText" />
            </variable>
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Basic Label field." line="62" name="Label" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Single radio field.  Same as Checkbox, but provided as a convenience for automatically setting the input type.&#xA;Radio grouping is handled automatically by the browser if you give each radio in a group the same name." line="80" name="Radio" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A display-only text field which is not validated and not submitted." line="96" name="DisplayField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Multiline text field.  Can be used as a direct replacement for traditional textarea fields, plus adds&#xA;support for auto-sizing." line="116" name="TextArea" />
          <variable citdl="Object" line="121" name="TextField">
            <variable citdl="Object" line="121" name="prototype">
              <variable citdl="String" line="140" name="minLengthText" />
              <variable citdl="String" line="141" name="maxLengthText" />
              <variable citdl="String" line="142" name="blankText" />
              <variable citdl="String" line="143" name="regexText" />
              <variable line="144" name="emptyText" />
            </variable>
          </variable>
          <variable citdl="Object" line="129" name="NumberField">
            <variable citdl="Object" line="129" name="prototype">
              <variable citdl="String" line="150" name="decimalSeparator" />
              <variable citdl="Number" line="151" name="decimalPrecision" />
              <variable citdl="String" line="152" name="minText" />
              <variable citdl="String" line="153" name="maxText" />
              <variable citdl="String" line="154" name="nanText" />
            </variable>
          </variable>
          <variable citdl="Object" line="140" name="DateField">
            <variable citdl="Object" line="140" name="prototype">
              <variable citdl="String" line="160" name="disabledDaysText" />
              <variable citdl="String" line="161" name="disabledDatesText" />
              <variable citdl="String" line="162" name="minText" />
              <variable citdl="String" line="163" name="maxText" />
              <variable citdl="String" line="164" name="invalidText" />
              <variable citdl="String" line="165" name="format" />
              <variable citdl="String" line="166" name="altFormats" />
            </variable>
          </variable>
          <variable citdl="Object" line="147" name="ComboBox">
            <variable citdl="Object" line="147" name="prototype">
              <variable citdl="String" line="172" name="loadingText" />
              <variable line="173" name="valueNotFoundText" />
            </variable>
          </variable>
          <variable citdl="Object" line="156" name="VTypes">
            <variable citdl="String" line="179" name="emailText" />
            <variable citdl="String" line="180" name="urlText" />
            <variable citdl="String" line="181" name="alphaText" />
            <variable citdl="String" line="182" name="alphanumText" />
          </variable>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Single checkbox field.  Can be used as a direct replacement for traditional checkbox fields." line="176" name="Checkbox" />
          <variable citdl="Object" line="234" name="HtmlEditor">
            <variable citdl="Object" line="234" name="prototype">
              <variable citdl="String" line="188" name="createLinkText" />
              <variable citdl="Object" line="189" lineend="260" name="buttonTips">
                <variable citdl="Object" line="190" lineend="194" name="bold">
                  <variable citdl="String" line="191" name="title" />
                  <variable citdl="String" line="192" name="text" />
                  <variable citdl="String" line="193" name="cls" />
                </variable>
                <variable citdl="Object" line="195" lineend="199" name="italic">
                  <variable citdl="String" line="196" name="title" />
                  <variable citdl="String" line="197" name="text" />
                  <variable citdl="String" line="198" name="cls" />
                </variable>
                <variable citdl="Object" line="200" lineend="204" name="underline">
                  <variable citdl="String" line="201" name="title" />
                  <variable citdl="String" line="202" name="text" />
                  <variable citdl="String" line="203" name="cls" />
                </variable>
                <variable citdl="Object" line="205" lineend="209" name="increasefontsize">
                  <variable citdl="String" line="206" name="title" />
                  <variable citdl="String" line="207" name="text" />
                  <variable citdl="String" line="208" name="cls" />
                </variable>
                <variable citdl="Object" line="210" lineend="214" name="decreasefontsize">
                  <variable citdl="String" line="211" name="title" />
                  <variable citdl="String" line="212" name="text" />
                  <variable citdl="String" line="213" name="cls" />
                </variable>
                <variable citdl="Object" line="215" lineend="219" name="backcolor">
                  <variable citdl="String" line="216" name="title" />
                  <variable citdl="String" line="217" name="text" />
                  <variable citdl="String" line="218" name="cls" />
                </variable>
                <variable citdl="Object" line="220" lineend="224" name="forecolor">
                  <variable citdl="String" line="221" name="title" />
                  <variable citdl="String" line="222" name="text" />
                  <variable citdl="String" line="223" name="cls" />
                </variable>
                <variable citdl="Object" line="225" lineend="229" name="justifyleft">
                  <variable citdl="String" line="226" name="title" />
                  <variable citdl="String" line="227" name="text" />
                  <variable citdl="String" line="228" name="cls" />
                </variable>
                <variable citdl="Object" line="230" lineend="234" name="justifycenter">
                  <variable citdl="String" line="231" name="title" />
                  <variable citdl="String" line="232" name="text" />
                  <variable citdl="String" line="233" name="cls" />
                </variable>
                <variable citdl="Object" line="235" lineend="239" name="justifyright">
                  <variable citdl="String" line="236" name="title" />
                  <variable citdl="String" line="237" name="text" />
                  <variable citdl="String" line="238" name="cls" />
                </variable>
                <variable citdl="Object" line="240" lineend="244" name="insertunorderedlist">
                  <variable citdl="String" line="241" name="title" />
                  <variable citdl="String" line="242" name="text" />
                  <variable citdl="String" line="243" name="cls" />
                </variable>
                <variable citdl="Object" line="245" lineend="249" name="insertorderedlist">
                  <variable citdl="String" line="246" name="title" />
                  <variable citdl="String" line="247" name="text" />
                  <variable citdl="String" line="248" name="cls" />
                </variable>
                <variable citdl="Object" line="250" lineend="254" name="createlink">
                  <variable citdl="String" line="251" name="title" />
                  <variable citdl="String" line="252" name="text" />
                  <variable citdl="String" line="253" name="cls" />
                </variable>
                <variable citdl="Object" line="255" lineend="259" name="sourceedit">
                  <variable citdl="String" line="256" name="title" />
                  <variable citdl="String" line="257" name="text" />
                  <variable citdl="String" line="258" name="cls" />
                </variable>
              </variable>
            </variable>
          </variable>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides a convenient wrapper for TextFields that adds a clickable trigger button (looks like a combobox by default).&#xA;The trigger has no default action, so you must assign a function to implement the trigger click handler by&#xA;overriding {@link #onTriggerClick}. You can create a TriggerField directly, as it renders exactly like a combobox&#xA;for which you can provide a custom implementation.  For example:&#xA;&#xA;var trigger = new Ext.form.TriggerField();&#xA;trigger.onTriggerClick = myTriggerFn;&#xA;trigger.applyToMarkup(&apos;my-field&apos;);&#xA;&#xA;However, in general you will most likely want to use TriggerField as the base class for a reusable component.&#xA;{@link Ext.form.DateField} and {@link Ext.form.ComboBox} are perfect examples of this." line="238" name="TriggerField" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Standard container used for grouping items within a {@link Ext.form.FormPanel form}.&#xA;&#xA;var form = new Ext.FormPanel({&#xA;title: &apos;Simple Form with FieldSets&apos;,&#xA;labelWidth: 75, // label settings here cascade unless overridden&#xA;url: &apos;save-form.php&apos;,&#xA;frame:true,&#xA;bodyStyle:&apos;padding:5px 5px 0&apos;,&#xA;width: 700,&#xA;renderTo: document.body,&#xA;layout:&apos;column&apos;, // arrange items in columns&#xA;defaults: {      // defaults applied to items&#xA;layout: &apos;form&apos;,&#xA;border: false,&#xA;bodyStyle: &apos;padding:4px&apos;&#xA;items: [{&#xA;// Fieldset in Column 1&#xA;xtype:&apos;fieldset&apos;,&#xA;columnWidth: 0.5,&#xA;title: &apos;Fieldset 1&apos;,&#xA;collapsible: true,&#xA;autoHeight:true,&#xA;defaults: {&#xA;anchor: &apos;-20&apos; // leave room for error icon&#xA;defaultType: &apos;textfield&apos;,&#xA;items :[{&#xA;fieldLabel: &apos;Field 1&apos;&#xA;}, {&#xA;fieldLabel: &apos;Field 2&apos;&#xA;}, {&#xA;fieldLabel: &apos;Field 3&apos;&#xA;},{&#xA;// Fieldset in Column 2 - Panel inside&#xA;xtype:&apos;fieldset&apos;,&#xA;title: &apos;Show Panel&apos;, // title, header, or checkboxToggle creates fieldset header&#xA;autoHeight:true,&#xA;columnWidth: 0.5,&#xA;checkboxToggle: true,&#xA;collapsed: true, // fieldset initially collapsed&#xA;layout:&apos;anchor&apos;,&#xA;items :[{&#xA;xtype: &apos;panel&apos;,&#xA;anchor: &apos;100%&apos;,&#xA;title: &apos;Panel inside a fieldset&apos;,&#xA;frame: true,&#xA;height: 100&#xA;});" line="304" name="FieldSet" />
          <variable citdl="Object" line="305" name="TimeField">
            <variable citdl="Object" line="305" name="prototype">
              <variable citdl="String" line="297" name="minText" />
              <variable citdl="String" line="298" name="maxText" />
              <variable citdl="String" line="299" name="invalidText" />
              <variable citdl="String" line="300" name="format" />
              <variable citdl="String" line="301" name="altFormats" />
            </variable>
          </variable>
          <variable citdl="Object" line="311" name="CheckboxGroup">
            <variable citdl="Object" line="311" name="prototype">
              <variable citdl="String" line="308" name="blankText" />
            </variable>
          </variable>
          <variable citdl="Object" line="317" name="RadioGroup">
            <variable citdl="Object" line="317" name="prototype">
              <variable citdl="String" line="314" name="blankText" />
            </variable>
          </variable>
          <variable citdl="Ext.extend()" doc="TwinTriggerField is not a public class to be used directly.  It is meant as an abstract base class&#xA;to be extended by an implementing class.  For an example of implementing this class, see the custom&#xA;SearchField implementation here:&#xA;http://extjs.com/deploy/ext/examples/form/custom.html" line="327" name="TwinTriggerField" />
          <variable citdl="Ext.FormPanel" line="334" name="FormPanel" />
          <variable citdl="Object" line="528" lineend="604" name="MessageTargets">
            <variable citdl="Object" line="529" lineend="542" name="qtip">
              <scope ilk="function" line="530" lineend="537" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="qtip" name="this" />
              </scope>
              <scope ilk="function" line="538" lineend="541" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="qtip" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="543" lineend="551" name="title">
              <scope ilk="function" line="544" lineend="547" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="title" name="this" />
              </scope>
              <scope ilk="function" line="548" lineend="550" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="title" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="552" lineend="575" name="under">
              <scope ilk="function" line="553" lineend="566" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="under" name="this" />
                <variable attributes="__local__ private" citdl="field.getErrorCt()" line="556" name="elp" />
              </scope>
              <scope ilk="function" line="567" lineend="574" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="under" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" line="576" lineend="603" name="side">
              <scope ilk="function" line="577" lineend="592" name="mark" signature="mark(field, msg)">
                <variable ilk="argument" name="field" />
                <variable ilk="argument" name="msg" />
                <variable citdl="side" name="this" />
                <variable attributes="__local__ private" citdl="field.getErrorCt()" line="580" name="elp" />
              </scope>
              <scope ilk="function" line="593" lineend="602" name="clear" signature="clear(field)">
                <variable ilk="argument" name="field" />
                <variable citdl="side" name="this" />
              </scope>
            </variable>
          </variable>
        </variable>
        <scope classrefs="Object" ilk="class" line="32" lineend="161" name="KeyNav">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides a convenient wrapper for normalized keyboard navigation.  KeyNav allows you to bind&#xA;navigation keys to function calls that will get called when the keys are pressed, providing an easy&#xA;way to implement custom navigation schemes for any UI component.&#xA;The following are all of the possible keys that can be implemented: enter, left, right, up, down, tab, esc,&#xA;pageUp, pageDown, del, home, end.  Usage:&#xA;var nav = new Ext.KeyNav(&quot;my-element&quot;, {&#xA;&quot;left&quot; : function(e){&#xA;this.moveLeft(e.ctrlKey);&#xA;&quot;right&quot; : function(e){&#xA;this.moveRight(e.ctrlKey);&#xA;&quot;enter&quot; : function(e){&#xA;this.save();&#xA;scope : this&#xA;});" ilk="function" line="32" lineend="39" name="KeyNav" signature="KeyNav(el, config)">
            <variable citdl="Mixed" doc="The element to bind to" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config" ilk="argument" name="config" />
            <variable citdl="KeyNav" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="33" name="el" />
          <variable citdl="Boolean" line="36" name="disabled" />
          <variable citdl="String" doc="The method to call on the {@link Ext.EventObject} after this KeyNav intercepts a key.  Valid values are&#xA;{@link Ext.EventObject#stopEvent}, {@link Ext.EventObject#preventDefault} and&#xA;{@link Ext.EventObject#stopPropagation} (defaults to &apos;stopEvent&apos;)" line="53" name="defaultEventAction" />
          <variable citdl="Boolean" doc="Handle the keydown event instead of keypress (defaults to false).  KeyNav automatically does this for IE since&#xA;IE does not propagate special keys on keypress, but setting this to true will force other browsers to also&#xA;handle keydown instead of keypress." line="60" name="forceKeyDown" />
          <scope ilk="function" line="63" lineend="69" name="prepareEvent" signature="prepareEvent(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyNav" name="this" />
            <variable attributes="__local__ private" citdl="e.getKey()" line="64" name="k" />
            <variable attributes="__local__ private" citdl="this.keyToHandler[k]" line="65" name="h" />
          </scope>
          <scope ilk="function" line="72" lineend="80" name="relay" signature="relay(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyNav" name="this" />
            <variable attributes="__local__ private" citdl="e.getKey()" line="73" name="k" />
            <variable attributes="__local__ private" citdl="this.keyToHandler[k]" line="74" name="h" />
          </scope>
          <scope ilk="function" line="83" lineend="85" name="doRelay" returns="h.call()" signature="doRelay(e, h, hname)">
            <variable ilk="argument" name="e" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="hname" />
            <variable citdl="KeyNav" name="this" />
          </scope>
          <variable citdl="Boolean" line="88" name="enter" />
          <variable citdl="Boolean" line="89" name="left" />
          <variable citdl="Boolean" line="90" name="right" />
          <variable citdl="Boolean" line="91" name="up" />
          <variable citdl="Boolean" line="92" name="down" />
          <variable citdl="Boolean" line="93" name="tab" />
          <variable citdl="Boolean" line="94" name="esc" />
          <variable citdl="Boolean" line="95" name="pageUp" />
          <variable citdl="Boolean" line="96" name="pageDown" />
          <variable citdl="Boolean" line="97" name="del" />
          <variable citdl="Boolean" line="98" name="home" />
          <variable citdl="Boolean" line="99" name="end" />
          <variable citdl="Object" line="102" lineend="115" name="keyToHandler" />
          <scope doc="Enable this KeyNav" ilk="function" line="120" lineend="132" name="enable" signature="enable()">
            <variable citdl="KeyNav" name="this" />
          </scope>
          <scope doc="Disable this KeyNav" ilk="function" line="137" lineend="147" name="disable" signature="disable()">
            <variable citdl="KeyNav" name="this" />
          </scope>
          <scope doc="Convenience function for setting disabled/enabled by boolean." ilk="function" line="153" lineend="155" name="setDisabled" signature="setDisabled(disabled)">
            <variable citdl="Boolean" ilk="argument" name="disabled" />
            <variable citdl="KeyNav" name="this" />
          </scope>
          <scope ilk="function" line="158" lineend="160" name="isKeydown" returns="this.forceKeyDown" signature="isKeydown()">
            <variable citdl="KeyNav" name="this" />
          </scope>
        </scope>
        <scope doc="Copies all the properties of config to obj." ilk="function" line="33" lineend="44" name="apply" returns="Object" signature="apply(o, c, defaults)">
          <variable citdl="c[p]" ilk="argument" name="o" />
          <variable ilk="argument" name="c" />
          <variable citdl="Object" doc="A different object that will also be applied for default values" ilk="argument" name="defaults" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Object" line="35" lineend="34" name="LoadMask" />
        <variable citdl="String" doc="URL to a 1x1 transparent gif image used by Ext to create inline icons with CSS background images.&#xA;In older versions of IE, this defaults to &quot;http://extjs.com/s.gif&quot; and you should change this to a URL on your server.&#xA;For other browsers it uses an inline data URL." line="36" name="BLANK_IMAGE_URL" />
        <variable citdl="Object" line="37" name="util">
          <scope ilk="class" line="12" lineend="29" name="Format">
            <variable citdl="Object" line="12" lineend="355" name="Format">
              <scope doc="Truncate a string and add an ellipsis (&apos;...&apos;) to the end if it exceeds the specified length" ilk="function" line="22" lineend="37" name="ellipsis" returns="String" signature="ellipsis(value, len, word)">
                <variable citdl="String" doc="The string to truncate" ilk="argument" name="value" />
                <variable ilk="argument" name="len" />
                <variable citdl="Boolean" doc="True to try to find a common work break" ilk="argument" name="word" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="value.substr()" line="25" name="vs" />
                <variable attributes="__local__ private" citdl="Math.max()" line="26" name="index" />
              </scope>
              <scope doc="Checks a reference and converts it to empty string if it is undefined" ilk="function" line="44" lineend="46" name="undef" returns="Mixed" signature="undef(value)">
                <variable citdl="Mixed" doc="Reference to check" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Checks a reference and converts it to the default value if it&apos;s empty" ilk="function" line="54" lineend="56" name="defaultValue" returns="String" signature="defaultValue(value, defaultValue)">
                <variable citdl="Mixed" doc="Reference to check" ilk="argument" name="value" />
                <variable citdl="String" doc="The value to insert of it&apos;s undefined (defaults to &quot;&quot;)" ilk="argument" name="defaultValue" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Convert certain characters (&amp;, , and &apos;) to their HTML character equivalents for literal display in web pages." ilk="function" line="63" lineend="65" name="htmlEncode" returns="String" signature="htmlEncode(value)">
                <variable citdl="String" doc="The string to encode" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Convert certain characters (&amp;, , and &apos;) from their HTML character equivalents." ilk="function" line="72" lineend="74" name="htmlDecode" returns="String" signature="htmlDecode(value)">
                <variable citdl="String" doc="The string to decode" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Trims any whitespace from either side of a string" ilk="function" line="81" lineend="83" name="trim" returns="String" signature="trim(value)">
                <variable citdl="String" doc="The text to trim" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Returns a substring from within an original string" ilk="function" line="92" lineend="94" name="substr" returns="String" signature="substr(value, start, length)">
                <variable citdl="String" doc="The original text" ilk="argument" name="value" />
                <variable citdl="Number" doc="The start index of the substring" ilk="argument" name="start" />
                <variable citdl="Number" doc="The length of the substring" ilk="argument" name="length" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts a string to all lower case letters" ilk="function" line="101" lineend="103" name="lowercase" returns="String" signature="lowercase(value)">
                <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts a string to all upper case letters" ilk="function" line="110" lineend="112" name="uppercase" returns="String" signature="uppercase(value)">
                <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts the first character only of a string to upper case" ilk="function" line="119" lineend="121" name="capitalize" returns="String" signature="capitalize(value)">
                <variable citdl="String" doc="The text to convert" ilk="argument" name="value" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope ilk="function" line="124" lineend="132" name="call" returns="eval().call()" signature="call(value, fn)">
                <variable ilk="argument" name="value" />
                <variable ilk="argument" name="fn" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="126" name="args" />
              </scope>
              <scope doc="Format a number as US currency" ilk="function" line="139" lineend="155" name="usMoney" returns="String" signature="usMoney(v)">
                <variable citdl="whole" ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="v.split()" line="143" name="ps" />
                <variable attributes="__local__ private" citdl="ps[0]" line="144" name="whole" />
                <variable attributes="__local__ private" citdl="ps[1]" line="145" name="sub" />
                <variable attributes="__local__ private" line="146" name="r" />
              </scope>
              <scope doc="Parse a value into a formatted date using the specified format pattern." ilk="function" line="163" lineend="171" name="date" returns="String" signature="date(v, format)">
                <variable citdl="Date" ilk="argument" name="v" />
                <variable citdl="String" doc="(optional) Any valid date format string (defaults to &apos;m/d/Y&apos;)" ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Returns a date rendering function that can be reused to apply a date format multiple times efficiently" ilk="function" line="178" lineend="182" name="dateRenderer" returns="Function" signature="dateRenderer(format)">
                <variable citdl="String" doc="Any valid date format string" ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
              </scope>
              <variable line="185" name="stripTagsRE" />
              <scope doc="Strips all HTML tags" ilk="function" line="192" lineend="194" name="stripTags" returns="String" signature="stripTags(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
              </scope>
              <variable line="196" name="stripScriptsRe" />
              <scope doc="Strips all script tags" ilk="function" line="203" lineend="205" name="stripScripts" returns="String" signature="stripScripts(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Simple format for a file size (xxx bytes, xxx KB, xxx MB)" ilk="function" line="212" lineend="220" name="fileSize" returns="String" signature="fileSize(size)">
                <variable citdl="Number/String" doc="The numeric value to format" ilk="argument" name="size" />
                <variable citdl="Format" name="this" />
              </scope>
              <variable doc="It does simple math for use in a template, for example:&#xA;var tpl = new Ext.Template(&apos;{value} * 10 = {value:math(&quot;* 10&quot;)}&apos;);" line="228" name="math" />
              <scope doc="Rounds the passed number to the required decimal precision." ilk="function" line="244" lineend="251" name="round" returns="Number" signature="round(value, precision)">
                <variable citdl="Number/String" doc="The numeric value to round." ilk="argument" name="value" />
                <variable citdl="Number" doc="The number of decimal places to which to round the first parameter&apos;s value." ilk="argument" name="precision" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="Number()" line="245" name="result" />
              </scope>
              <scope doc="Formats the number according to the format string.&#xA;examples (123456.789):&#xA;&#xA;0 - (123456) show only digits, no precision&#xA;0.00 - (123456.78) show only digits, 2 precision&#xA;0.0000 - (123456.7890) show only digits, 4 precision&#xA;0,000 - (123,456) show comma and digits, no precision&#xA;0,000.00 - (123,456.78) show comma and digits, 2 precision&#xA;0,0.00 - (123,456.78) shortcut method, show comma and digits, 2 precision&#xA;To reverse the grouping (,) and decimal (.) for international numbers, add /i to the end.&#xA;For example: 0.000,00/i" ilk="function" line="270" lineend="322" name="number" returns="String" signature="number(v, format)">
                <variable citdl="Number" doc="The number to format." ilk="argument" name="v" />
                <variable citdl="String" doc="The way you would like to format this text." ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
                <variable attributes="__local__ private" citdl="v" line="281" name="neg" />
                <variable attributes="__local__ private" citdl="String" line="281" name="comma" />
                <variable attributes="__local__ private" citdl="Boolean" line="281" name="i18n" />
                <variable attributes="__local__ private" citdl="String" line="281" name="dec" />
                <variable attributes="__local__ private" citdl="format.indexOf()" line="292" name="hasComma" />
                <variable attributes="__local__ private" citdl="fnum.split()" line="292" name="psplit" />
                <variable attributes="__local__ private" citdl="v.toString()" line="302" name="fnum" />
                <variable attributes="__local__ private" citdl="cnum.length" line="306" name="j" />
                <variable attributes="__local__ private" citdl="Math.floor()" line="306" name="m" />
                <variable attributes="__local__ private" citdl="cnum.length" line="306" name="n" />
                <variable attributes="__local__ private" citdl="Array" line="306" name="parr" />
                <variable attributes="__local__ private" citdl="psplit[0]" line="306" name="cnum" />
              </scope>
              <scope doc="Returns a number rendering function that can be reused to apply a number format multiple times efficiently" ilk="function" line="329" lineend="333" name="numberRenderer" returns="Function" signature="numberRenderer(format)">
                <variable citdl="String" doc="Any valid number format string for {@link #number}" ilk="argument" name="format" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Selectively do a plural form of a word based on a numeric value. For example, in a template,&#xA;{commentCount:plural(&quot;Comment&quot;)}  would result in &quot;1 Comment&quot; if commentCount was 1 or would be &quot;x Comments&quot;&#xA;if the value is 0 or greater than 1." ilk="function" line="343" lineend="345" name="plural" returns="v" signature="plural(v, s, p)">
                <variable ilk="argument" name="v" />
                <variable ilk="argument" name="s" />
                <variable ilk="argument" name="p" />
                <variable citdl="Format" name="this" />
              </scope>
              <scope doc="Converts newline characters to the HTML tag &amp;lt;br/&gt;" ilk="function" line="352" lineend="354" name="nl2br" returns="String" signature="nl2br(v)">
                <variable ilk="argument" name="v" />
                <variable citdl="Format" name="this" />
              </scope>
            </variable>
          </scope>
          <scope ilk="class" line="12" lineend="34" name="CSS">
            <variable citdl="Object" line="12" lineend="160" name="CSS">
              <scope doc="Creates a stylesheet from a text blob of rules.&#xA;These rules will be wrapped in a STYLE tag and appended to the HEAD of the document." ilk="function" line="27" lineend="50" name="createStyleSheet" returns="StyleSheet" signature="createStyleSheet(cssText, id)">
                <variable citdl="String" doc="The text containing the css rules" ilk="argument" name="cssText" />
                <variable citdl="String" doc="An id to add to the stylesheet for later removal" ilk="argument" name="id" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="rules.styleSheet" line="28" name="ss" />
                <variable attributes="__local__ private" citdl="doc.getElementsByTagName()[0]" line="29" name="head" />
                <variable attributes="__local__ private" citdl="doc.createElement()" line="30" name="rules" />
              </scope>
              <scope doc="Removes a style or link tag by id" ilk="function" line="56" lineend="61" name="removeStyleSheet" signature="removeStyleSheet(id)">
                <variable citdl="String" doc="The id of the tag" ilk="argument" name="id" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="doc.getElementById()" line="57" name="existing" />
              </scope>
              <scope doc="Dynamically swaps an existing stylesheet reference for a new one" ilk="function" line="68" lineend="76" name="swapStyleSheet" signature="swapStyleSheet(id, url)">
                <variable citdl="String" doc="The id of an existing link tag to remove" ilk="argument" name="id" />
                <variable citdl="String" doc="The href of the new stylesheet to include" ilk="argument" name="url" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="doc.createElement()" line="70" name="ss" />
              </scope>
              <scope doc="Refresh the rule cache if you have dynamically added stylesheets" ilk="function" line="82" lineend="84" name="refreshCache" returns="Object" signature="refreshCache()">
                <variable citdl="CSS" name="this" />
              </scope>
              <scope ilk="function" line="87" lineend="97" name="cacheStyleSheet" signature="cacheStyleSheet(ss)">
                <variable ilk="argument" name="ss" />
                <variable citdl="CSS" name="this" />
                <variable citdl="Object" line="89" lineend="89" name="rules" />
                <variable attributes="__local__ private" citdl="ss.cssRules" line="92" name="ssRules" />
              </scope>
              <scope doc="Gets all css rules for the document" ilk="function" line="104" lineend="115" name="getRules" returns="Object" signature="getRules(refreshCache)">
                <variable citdl="Boolean" doc="true to refresh the internal cache" ilk="argument" name="refreshCache" />
                <variable citdl="CSS" name="this" />
                <variable citdl="Object" line="106" lineend="106" name="rules" />
                <variable attributes="__local__ private" citdl="doc.styleSheets" line="107" name="ds" />
              </scope>
              <scope doc="Gets an an individual CSS rule by selector(s)" ilk="function" line="123" lineend="134" name="getRule" returns="CSSRule" signature="getRule(selector, refreshCache)">
                <variable citdl="String/Array" doc="The CSS selector or an array of selectors to try. The first selector that is found is returned." ilk="argument" name="selector" />
                <variable citdl="Boolean" doc="true to refresh the internal cache if you have recently updated any rules or added styles dynamically" ilk="argument" name="refreshCache" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="this.getRules()" line="124" name="rs" />
              </scope>
              <scope doc="Updates a rule property" ilk="function" line="144" lineend="159" name="updateRule" returns="Boolean" signature="updateRule(selector, property, value)">
                <variable citdl="String/Array" doc="If it&apos;s an array it tries each selector until it finds one. Stops immediately once one is found." ilk="argument" name="selector" />
                <variable citdl="String" doc="The css property" ilk="argument" name="property" />
                <variable citdl="String" doc="The new value for the property" ilk="argument" name="value" />
                <variable citdl="CSS" name="this" />
                <variable attributes="__local__ private" citdl="this.getRule()" line="146" name="rule" />
              </scope>
            </variable>
          </scope>
          <variable citdl="Object" doc="Utility class for managing and interacting with cookies." line="12" lineend="96" name="Cookies">
            <scope doc="Create a cookie with the specified name and value. Additional settings&#xA;for the cookie may be optionally specified (for example: expiration,&#xA;access restriction, SSL)." ilk="function" line="35" lineend="43" name="set" signature="set(name, value)">
              <variable citdl="Object" ilk="argument" name="name" />
              <variable citdl="Object" ilk="argument" name="value" />
              <variable citdl="Cookies" name="this" />
              <variable attributes="__local__ private" citdl="arguments" line="36" name="argv" />
              <variable attributes="__local__ private" citdl="arguments.length" line="37" name="argc" />
              <variable attributes="__local__ private" line="38" name="expires" />
              <variable attributes="__local__ private" line="39" name="path" />
              <variable attributes="__local__ private" line="40" name="domain" />
              <variable attributes="__local__ private" line="41" name="secure" />
            </scope>
            <scope doc="Retrieves cookies that are accessible by the current page. If a cookie&#xA;does not exist, get() returns null.  The following&#xA;example retrieves the cookie called &quot;valid&quot; and stores the String value&#xA;in the variable validStatus.&#xA;&#xA;var validStatus = Ext.util.Cookies.get(&quot;valid&quot;);" ilk="function" line="57" lineend="74" name="get" returns="Mixed" signature="get(name)">
              <variable citdl="Object" doc="The name of the cookie to get" ilk="argument" name="name" />
              <variable citdl="Cookies" name="this" />
              <variable attributes="__local__ private" citdl="name" line="58" name="arg" />
              <variable attributes="__local__ private" citdl="arg.length" line="59" name="alen" />
              <variable attributes="__local__ private" citdl="document.cookie.length" line="60" name="clen" />
              <variable attributes="__local__ private" citdl="Number" line="61" name="i" />
              <variable attributes="__local__ private" citdl="Number" line="62" name="j" />
            </scope>
            <scope doc="Removes a cookie with the provided name from the browser&#xA;if found." ilk="function" line="81" lineend="85" name="clear" signature="clear(name)">
              <variable citdl="Object" doc="The name of the cookie to remove" ilk="argument" name="name" />
              <variable citdl="Cookies" name="this" />
            </scope>
            <scope attributes="private" ilk="function" line="89" lineend="95" name="getCookieVal" returns="unescape()" signature="getCookieVal(offset)">
              <variable ilk="argument" name="offset" />
              <variable citdl="Cookies" name="this" />
              <variable attributes="__local__ private" citdl="document.cookie.indexOf()" line="90" name="endstr" />
            </scope>
          </variable>
          <scope ilk="class" line="14" lineend="29" name="TextMetrics">
            <variable citdl="Object" line="14" lineend="46" name="TextMetrics">
              <scope doc="Measures the size of the specified text" ilk="function" line="26" lineend="33" name="measure" returns="Object" signature="measure(el, text, fixedWidth)">
                <variable citdl="String/HTMLElement" doc="The element, dom node or id from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="argument" name="el" />
                <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
                <variable citdl="TextMetrics" name="this" />
              </scope>
              <scope doc="Return a unique TextMetrics instance that can be bound directly to an element and reused.  This reduces&#xA;the overhead of multiple calls to initialize the style properties on each measurement." ilk="function" line="43" lineend="45" name="createInstance" returns="Ext.util.TextMetrics.Instance" signature="createInstance(el, fixedWidth)">
                <variable citdl="String/HTMLElement" doc="The element, dom node or id that the instance will be bound to" ilk="argument" name="el" />
                <variable citdl="Number" doc="(optional) If the text will be multiline, you have to set a fixed width&#xA;in order to accurately measure the text height" ilk="argument" name="fixedWidth" />
                <variable citdl="TextMetrics" name="this" />
              </scope>
            </variable>
            <scope ilk="function" line="49" lineend="117" name="Instance" returns="instance" signature="Instance(bindTo, fixedWidth)">
              <variable ilk="argument" name="bindTo" />
              <variable ilk="argument" name="fixedWidth" />
              <variable citdl="TextMetrics" name="this" />
              <variable attributes="__local__ private" citdl="Ext.Element" line="50" name="ml" />
              <variable attributes="__local__ private" citdl="Object" line="60" lineend="112" name="instance">
                <scope doc="Returns the size of the specified text based on the internal element&apos;s style and width properties" ilk="function" line="66" lineend="71" name="getSize" returns="Object" signature="getSize(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                  <variable attributes="__local__ private" citdl="ml.getSize()" line="68" name="s" />
                </scope>
                <scope doc="Binds this TextMetrics instance to an element from which to copy existing CSS styles&#xA;that can affect the size of the rendered text" ilk="function" line="78" lineend="82" name="bind" signature="bind(el)">
                  <variable citdl="String/HTMLElement" doc="The element, dom node or id" ilk="argument" name="el" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Sets a fixed width on the internal measurement element.  If the text will be multiline, you have&#xA;to set a fixed width in order to accurately measure the text height." ilk="function" line="89" lineend="91" name="setFixedWidth" signature="setFixedWidth(width)">
                  <variable citdl="Number" doc="The width to set on the element" ilk="argument" name="width" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured width of the specified text" ilk="function" line="98" lineend="101" name="getWidth" returns="Number" signature="getWidth(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
                <scope doc="Returns the measured height of the specified text.  For multiline text, be sure to call&#xA;{@link #setFixedWidth} if necessary." ilk="function" line="109" lineend="111" name="getHeight" returns="Number" signature="getHeight(text)">
                  <variable citdl="String" doc="The text to measure" ilk="argument" name="text" />
                  <variable citdl="instance" name="this" />
                </scope>
              </variable>
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="19" lineend="60" name="MixedCollection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: A Collection class that maintains both numeric indexes and keys and exposes events." ilk="function" line="19" lineend="60" name="MixedCollection" signature="MixedCollection(allowFunctions, keyFn)">
              <variable citdl="Boolean" doc="True if the addAll function should add function references to the&#xA;collection (defaults to false)" ilk="argument" name="allowFunctions" />
              <variable citdl="Function" doc="A function that can accept an item of the type(s) stored in this MixedCollection&#xA;and return the key value for that item.  This is used when available to look up the key on items that&#xA;were passed without an explicit key parameter to a MixedCollection method.  Passing this parameter is&#xA;equivalent to providing an implementation for the {@link #getKey} method." ilk="argument" name="keyFn" />
              <variable citdl="MixedCollection" name="this" />
            </scope>
            <variable citdl="Array" line="20" name="items" />
            <variable citdl="Object" line="21" lineend="21" name="map" />
            <variable citdl="Array" line="22" name="keys" />
            <variable citdl="Number" line="23" name="length" />
            <variable citdl="allowFunctions" line="55" name="allowFunctions" />
            <variable citdl="keyFn" line="57" name="getKey" />
            <scope doc="Adds an item to the collection. Fires the {@link #add} event when complete." ilk="function" line="75" lineend="92" name="add" returns="Object" signature="add(key, o)">
              <variable citdl="String" doc="The key to associate with the item, or the new item.&#xA;If you supplied a {@link #getKey} implementation for this MixedCollection, or if the key&#xA;of your stored items is in a property called id, then the MixedCollection&#xA;will be able to derive the key for the new item. In this case just pass the new item in&#xA;this parameter." ilk="argument" name="key" />
              <variable citdl="Object" doc="The item to add." ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this.map[key]" line="81" name="old" />
            </scope>
            <scope doc="MixedCollection has a generic way to fetch keys if you implement getKey.  The default implementation&#xA;simply returns item.id but you can provide your own implementation&#xA;to return a different value as in the following examples:&#xA;// normal way&#xA;var mc = new Ext.util.MixedCollection();&#xA;mc.add(someEl.dom.id, someEl);&#xA;mc.add(otherEl.dom.id, otherEl);&#xA;//and so on&#xA;// using getKey&#xA;var mc = new Ext.util.MixedCollection();&#xA;mc.getKey = function(el){&#xA;return el.dom.id;&#xA;mc.add(someEl);&#xA;mc.add(otherEl);&#xA;// or via the constructor&#xA;var mc = new Ext.util.MixedCollection(false, function(el){&#xA;return el.dom.id;&#xA;});&#xA;mc.add(someEl);&#xA;mc.add(otherEl);" ilk="function" line="123" lineend="125" name="getKey" returns="Object" signature="getKey(o)">
              <variable ilk="argument" name="o" />
            </scope>
            <scope doc="Replaces an item in the collection. Fires the {@link #replace} event when complete." ilk="function" line="138" lineend="152" name="replace" returns="Object" signature="replace(key, o)">
              <variable citdl="String" doc="The key associated with the item to replace, or the replacement item.&#xA;If you supplied a {@link #getKey} implementation for this MixedCollection, or if the key&#xA;of your stored items is in a property called id, then the MixedCollection&#xA;will be able to derive the key of the replacement item. If you want to replace an item&#xA;with one having the same key value, then just pass the replacement item in this parameter." ilk="argument" name="key" />
              <variable citdl="Object" doc="o (optional) If the first parameter passed was a key, the item to associate&#xA;with that key." ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this.map[key]" line="143" name="old" />
              <variable attributes="__local__ private" citdl="this.indexOfKey()" line="147" name="index" />
            </scope>
            <scope doc="Adds all elements of an Array or an Object to the collection." ilk="function" line="159" lineend="172" name="addAll" signature="addAll(objs)">
              <variable citdl="Object/Array" doc="An Object containing properties which will be added to the collection, or&#xA;an Array of values, each of which are added to the collection." ilk="argument" name="objs" />
              <variable attributes="__local__ private" citdl="arguments.length" line="161" name="args" />
            </scope>
            <scope doc="Executes the specified function once for every item in the collection, passing the following arguments:&#xA;&#xA;item : MixedThe collection item&#xA;index : NumberThe item&apos;s index&#xA;length : NumberThe total number of items in the collection&#xA;&#xA;The function should return a boolean value. Returning false from the function will stop the iteration." ilk="function" line="185" lineend="192" name="each" signature="each(fn, scope)">
              <variable citdl="Function" doc="The function to execute for each item." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the function." ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="Array" line="186" name="items" />
            </scope>
            <scope doc="Executes the specified function once for every key in the collection, passing each&#xA;key, and its associated item as the first two parameters." ilk="function" line="200" lineend="204" name="eachKey" signature="eachKey(fn, scope)">
              <variable citdl="Function" doc="The function to execute for each item." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the function." ilk="argument" name="scope" />
            </scope>
            <scope doc="Returns the first item in the collection which elicits a true return value from the&#xA;passed selection function." ilk="function" line="213" lineend="220" name="find" returns="Object" signature="find(fn, scope)">
              <variable citdl="Function" doc="The selection function to execute for each item." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to execute the function." ilk="argument" name="scope" />
            </scope>
            <scope doc="Inserts an item at the specified index in the collection. Fires the {@link #add} event when complete." ilk="function" line="229" lineend="250" name="insert" returns="Object" signature="insert(index, key, o)">
              <variable citdl="Number" doc="The index to insert the item at." ilk="argument" name="index" />
              <variable citdl="String" doc="The key to associate with the new item, or the item itself." ilk="argument" name="key" />
              <variable citdl="Object" doc="(optional) If the second parameter was a key, the new item." ilk="argument" name="o" />
            </scope>
            <scope doc="Remove an item from the collection." ilk="function" line="257" lineend="259" name="remove" returns="Object" signature="remove(o)">
              <variable citdl="Object" doc="The item to remove." ilk="argument" name="o" />
            </scope>
            <scope doc="Remove an item from a specified index in the collection. Fires the {@link #remove} event when complete." ilk="function" line="266" lineend="280" name="removeAt" returns="Object" signature="removeAt(index)">
              <variable citdl="Number" doc="The index within the collection of the item to remove." ilk="argument" name="index" />
              <variable attributes="__local__ private" citdl="this.items[index]" line="269" name="o" />
              <variable attributes="__local__ private" citdl="this.keys[index]" line="271" name="key" />
            </scope>
            <scope doc="Removed an item associated with the passed key fom the collection." ilk="function" line="287" lineend="289" name="removeKey" returns="Object" signature="removeKey(key)">
              <variable citdl="String" doc="The key of the item to remove." ilk="argument" name="key" />
            </scope>
            <scope doc="Returns the number of items in the collection." ilk="function" line="295" lineend="297" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Returns index within the collection of the passed Object." ilk="function" line="304" lineend="306" name="indexOf" returns="Number" signature="indexOf(o)">
              <variable citdl="Object" doc="The item to find the index of." ilk="argument" name="o" />
            </scope>
            <scope doc="Returns index within the collection of the passed key." ilk="function" line="313" lineend="315" name="indexOfKey" returns="Number" signature="indexOfKey(key)">
              <variable citdl="String" doc="The key to find the index of." ilk="argument" name="key" />
            </scope>
            <scope doc="Returns the item associated with the passed key OR index. Key has priority over index.  This is the equivalent&#xA;of calling {@link #key} first, then if nothing matched calling {@link #itemAt}." ilk="function" line="324" lineend="328" name="item" returns="Object" signature="item(key)">
              <variable citdl="String/Number" doc="The key or index of the item." ilk="argument" name="key" />
              <variable attributes="__local__ private" citdl="mk" line="326" name="item" />
              <variable attributes="__local__ private" citdl="this.map[key]" line="326" name="mk" />
            </scope>
            <scope doc="Returns the item at the specified index." ilk="function" line="335" lineend="337" name="itemAt" returns="Object" signature="itemAt(index)">
              <variable citdl="Number" doc="The index of the item." ilk="argument" name="index" />
            </scope>
            <scope doc="Returns the item associated with the passed key." ilk="function" line="344" lineend="346" name="key" returns="Object" signature="key(key)">
              <variable citdl="String/Number" doc="The key of the item." ilk="argument" name="key" />
            </scope>
            <scope doc="Returns true if the collection contains the passed Object as an item." ilk="function" line="353" lineend="355" name="contains" returns="Boolean" signature="contains(o)">
              <variable citdl="Object" doc="The Object to look for in the collection." ilk="argument" name="o" />
            </scope>
            <scope doc="Returns true if the collection contains the passed Object as a key." ilk="function" line="362" lineend="364" name="containsKey" returns="Boolean" signature="containsKey(key)">
              <variable citdl="String" doc="The key to look for in the collection." ilk="argument" name="key" />
            </scope>
            <scope doc="Removes all items from the collection.  Fires the {@link #clear} event when complete." ilk="function" line="369" lineend="375" name="clear" signature="clear()" />
            <scope doc="Returns the first item in the collection." ilk="function" line="381" lineend="383" name="first" returns="Object" signature="first()" />
            <scope doc="Returns the last item in the collection." ilk="function" line="389" lineend="391" name="last" returns="Object" signature="last()" />
            <scope ilk="function" line="394" lineend="418" name="_sort" returns="a" signature="_sort(property, dir, fn)">
              <variable ilk="argument" name="property" />
              <variable ilk="argument" name="dir" />
              <variable citdl="fn" ilk="argument" name="fn" />
              <variable attributes="__local__ private" citdl="Array" line="398" name="c" />
              <variable attributes="__local__ private" line="398" name="i" />
              <variable attributes="__local__ private" citdl="this.items" line="398" name="items" />
              <variable attributes="__local__ private" citdl="this.keys" line="398" name="k" />
              <variable citdl="Object" line="398" name="String()">
                <variable attributes="__local__ private" line="398" name="toUpperCase()" />
              </variable>
              <variable attributes="__local__ private" line="398" name="len" />
              <variable attributes="__local__ private" citdl="String().toUpperCase()" line="398" name="dsc" />
            </scope>
            <scope doc="Sorts this collection with the passed comparison function" ilk="function" line="425" lineend="427" name="sort" signature="sort(dir, fn)">
              <variable ilk="argument" name="dir" />
              <variable citdl="Function" doc="(optional) comparison function" ilk="argument" name="fn" />
            </scope>
            <scope doc="Sorts this collection by keys" ilk="function" line="434" lineend="439" name="keySort" signature="keySort(dir, fn)">
              <variable ilk="argument" name="dir" />
              <variable citdl="Function" doc="(optional) a comparison function (defaults to case insensitive string)" ilk="argument" name="fn" />
            </scope>
            <scope doc="Returns a range of items in this collection" ilk="function" line="447" lineend="465" name="getRange" returns="Array" signature="getRange(start, end)">
              <variable citdl="start" ilk="argument" name="start" />
              <variable citdl="Math.min()" ilk="argument" name="end" />
              <variable attributes="__local__ private" citdl="this.items" line="448" name="items" />
              <variable attributes="__local__ private" line="454" name="i" />
              <variable attributes="__local__ private" citdl="Array" line="454" name="r" />
            </scope>
            <scope doc="Filter the objects in this collection by a specific property.&#xA;Returns a new collection that has been filtered." ilk="function" line="477" lineend="485" name="filter" returns="MixedCollection" signature="filter(property, value, anyMatch, caseSensitive)">
              <variable citdl="String" doc="A property on your objects" ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either string that the property values&#xA;should start with or a RegExp to test against the property" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="(optional) True to match any part of the string, not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison (defaults to False)." ilk="argument" name="caseSensitive" />
              <scope attributes="__local__ private" ilk="function" line="482" lineend="484" name="(anonymous)" returns="o" signature="(anonymous)()" />
            </scope>
            <scope doc="Filter by a function. Returns a new collection that has been filtered.&#xA;The passed function will be called with each object in the collection.&#xA;If the function returns true, the value is included otherwise it is filtered." ilk="function" line="495" lineend="505" name="filterBy" returns="MixedCollection" signature="filterBy(fn, scope)">
              <variable citdl="Function" doc="The function to be called, it will receive the args o (the object), k (the key)" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="Ext.util.MixedCollection" line="496" name="r" />
              <variable attributes="__local__ private" citdl="this.keys" line="498" name="k" />
              <variable attributes="__local__ private" citdl="this.items" line="498" name="it" />
            </scope>
            <scope doc="Finds the index of the first matching object in this collection by a specific property/value." ilk="function" line="517" lineend="525" name="findIndex" returns="Number" signature="findIndex(property, value, start, anyMatch, caseSensitive)">
              <variable citdl="String" doc="The name of a property on your objects." ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="A string that the property values&#xA;should start with or a RegExp to test against the property." ilk="argument" name="value" />
              <variable citdl="Number" doc="(optional) The index to start searching at (defaults to 0)." ilk="argument" name="start" />
              <variable citdl="Boolean" doc="(optional) True to match any part of the string, not just the beginning." ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison." ilk="argument" name="caseSensitive" />
              <scope attributes="__local__ private" ilk="function" line="522" lineend="524" name="(anonymous)" returns="o" signature="(anonymous)()" />
            </scope>
            <scope doc="Find the index of the first matching object in this collection by a function.&#xA;If the function returns true it is considered a match." ilk="function" line="535" lineend="543" name="findIndexBy" returns="Number" signature="findIndexBy(fn, scope, start)">
              <variable citdl="Function" doc="The function to be called, it will receive the args o (the object), k (the key)." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)." ilk="argument" name="scope" />
              <variable citdl="Number" doc="(optional) The index to start searching at (defaults to 0)." ilk="argument" name="start" />
              <variable attributes="__local__ private" citdl="this.keys" line="536" name="k" />
              <variable attributes="__local__ private" citdl="this.items" line="536" name="it" />
            </scope>
            <scope ilk="function" line="546" lineend="552" name="createValueMatcher" returns="value" signature="createValueMatcher(value, anyMatch, caseSensitive)">
              <variable citdl="RegExp" ilk="argument" name="value" />
              <variable ilk="argument" name="anyMatch" />
              <variable ilk="argument" name="caseSensitive" />
            </scope>
            <scope doc="Creates a shallow copy of this collection" ilk="function" line="558" lineend="566" name="clone" returns="MixedCollection" signature="clone()">
              <variable attributes="__local__ private" citdl="Ext.util.MixedCollection" line="559" name="r" />
              <variable attributes="__local__ private" citdl="this.keys" line="560" name="k" />
              <variable attributes="__local__ private" citdl="this.items" line="560" name="it" />
            </scope>
          </scope>
          <scope ilk="class" line="35" lineend="66" name="DelayedTask">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The DelayedTask class provides a convenient way to &quot;buffer&quot; the execution of a method,&#xA;performing setTimeout where a new timeout cancels the old timeout. When called, the&#xA;task will wait the specified time period before executing. If durng that time period,&#xA;the task is called again, the original call will be cancelled. This continues so that&#xA;the function is only called a single time for each iteration.&#xA;This method is especially useful for things like detecting whether a user has finished&#xA;typing in a text field. An example would be performing validation on a keypress. You can&#xA;use this class to buffer the keypress events for a certain number of milliseconds, and&#xA;perform only if they stop for that amount of time.  Usage:&#xA;var task = new Ext.util.DelayedTask(function(){&#xA;alert(Ext.getDom(&apos;myInputField&apos;).value.length);&#xA;});&#xA;// Wait 500ms before calling our function. If the user presses another key&#xA;// during that 500ms, it will be cancelled and we&apos;ll wait another 500ms.&#xA;Ext.get(&apos;myInputField&apos;).on(&apos;keypress&apos;, function(){&#xA;task.{@link #delay}(500);&#xA;});&#xA;&#xA;Note that we are using a DelayedTask here to illustrate a point. The configuration&#xA;option buffer for {@link Ext.util.Observable#addListener addListener/on} will&#xA;also setup a delayed task for you to buffer events." ilk="function" line="35" lineend="68" name="DelayedTask" signature="DelayedTask(fn, scope, args)">
              <variable citdl="Function" doc="(optional) The default function to timeout" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The default scope of that timeout" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The default Array of arguments" ilk="argument" name="args" />
              <variable citdl="DelayedTask" name="this" />
              <scope attributes="__local__ private" ilk="function" line="38" lineend="42" name="call" signature="call()" />
              <variable attributes="__local__ private" citdl="this" line="38" name="me" />
              <variable attributes="__local__ private" citdl="setInterval()" line="38" name="id" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" doc="@class Ext.util.ClickRepeater&#xA;@extends Ext.util.Observable&#xA;A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the&#xA;mouse is pressed. The interval between firings may be specified in the config but&#xA;defaults to 20 milliseconds.&#xA;Optionally, a CSS class may be applied to the element during the time it is pressed.&#xA;@cfg {Mixed} el The element to act as a button.&#xA;@cfg {Number} delay The initial delay before the repeating event begins firing.&#xA;Similar to an autorepeat key delay.&#xA;@cfg {Number} interval The interval between firings of the &quot;click&quot; event. Default 20 ms.&#xA;@cfg {String} pressClass A CSS class name to be applied to the element while pressed.&#xA;@cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.&#xA;&quot;interval&quot; and &quot;delay&quot; are ignored.&#xA;@cfg {Boolean} preventDefault True to prevent the default click event&#xA;@cfg {Boolean} stopDefault True to stop the default click event&#xA;@history&#xA;2007-02-02 jvs Original code contributed by Nige &quot;Animal&quot; White&#xA;2007-02-02 jvs Renamed to ClickRepeater&#xA;2007-02-03 jvs Modifications for FF Mac and Safari&#xA;@constructor&#xA;@param {Mixed} el The element to listen on&#xA;@param {Object} config" ilk="class" line="37" lineend="90" name="ClickRepeater">
            <scope attributes="__ctor__" doc="@class Ext.util.ClickRepeater&#xA;@extends Ext.util.Observable&#xA;A wrapper class which can be applied to any element. Fires a &quot;click&quot; event while the&#xA;mouse is pressed. The interval between firings may be specified in the config but&#xA;defaults to 20 milliseconds.&#xA;Optionally, a CSS class may be applied to the element during the time it is pressed.&#xA;@cfg {Mixed} el The element to act as a button.&#xA;@cfg {Number} delay The initial delay before the repeating event begins firing.&#xA;Similar to an autorepeat key delay.&#xA;@cfg {Number} interval The interval between firings of the &quot;click&quot; event. Default 20 ms.&#xA;@cfg {String} pressClass A CSS class name to be applied to the element while pressed.&#xA;@cfg {Boolean} accelerate True if autorepeating should start slowly and accelerate.&#xA;&quot;interval&quot; and &quot;delay&quot; are ignored.&#xA;@cfg {Boolean} preventDefault True to prevent the default click event&#xA;@cfg {Boolean} stopDefault True to stop the default click event&#xA;@history&#xA;2007-02-02 jvs Original code contributed by Nige &quot;Animal&quot; White&#xA;2007-02-02 jvs Renamed to ClickRepeater&#xA;2007-02-03 jvs Modifications for FF Mac and Safari&#xA;@constructor&#xA;@param {Mixed} el The element to listen on&#xA;@param {Object} config" ilk="function" line="37" lineend="75" name="ClickRepeater" signature="ClickRepeater(el, config)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="config" />
              <variable citdl="ClickRepeater" name="this" />
            </scope>
            <variable citdl="Ext.get()" line="38" name="el" />
            <variable citdl="Boolean" line="65" name="disabled" />
            <variable citdl="Number" line="78" name="interval" />
            <variable citdl="Number" line="79" name="delay" />
            <variable citdl="Boolean" line="80" name="preventDefault" />
            <variable citdl="Boolean" line="81" name="stopDefault" />
            <variable citdl="Number" line="82" name="timer" />
            <scope doc="Enables the repeater and allows events to fire." ilk="function" line="87" lineend="95" name="enable" signature="enable()" />
            <scope doc="Disables the repeater and stops events from firing." ilk="function" line="100" lineend="110" name="disable" signature="disable(force)">
              <variable ilk="argument" name="force" />
            </scope>
            <scope doc="Convenience function for setting disabled/enabled by boolean." ilk="function" line="116" lineend="118" name="setDisabled" signature="setDisabled(disabled)">
              <variable citdl="Boolean" ilk="argument" name="disabled" />
            </scope>
            <scope ilk="function" line="120" lineend="127" name="eventOptions" signature="eventOptions(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="130" lineend="134" name="destroy" signature="destroy()" />
            <scope ilk="function" line="137" lineend="156" name="handleMouseDown" signature="handleMouseDown()" />
            <variable citdl="Date" line="143" name="mousedownTime" />
            <scope ilk="function" line="159" lineend="167" name="click" signature="click()" />
            <scope ilk="function" line="169" lineend="171" name="easeOutExpo" signature="easeOutExpo(t, b, c, d)">
              <variable ilk="argument" name="t" />
              <variable ilk="argument" name="b" />
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="d" />
            </scope>
            <scope ilk="function" line="174" lineend="180" name="handleMouseOut" signature="handleMouseOut()" />
            <scope ilk="function" line="183" lineend="189" name="handleMouseReturn" signature="handleMouseReturn()" />
            <scope ilk="function" line="192" lineend="199" name="handleMouseUp" signature="handleMouseUp()" />
          </scope>
          <scope ilk="class" line="39" lineend="58" name="TaskRunner">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Provides the ability to execute one or more arbitrary tasks in a multithreaded&#xA;manner.  Generally, you can use the singleton {@link Ext.TaskMgr} instead, but&#xA;if needed, you can create separate instances of TaskRunner.  Any number of&#xA;separate tasks can be started at any time and will run independently of each&#xA;other. Example usage:&#xA;&#xA;// Start a simple clock task that updates a div once per second&#xA;var updateClock = function(){&#xA;Ext.fly(&apos;clock&apos;).update(new Date().format(&apos;g:i:s A&apos;));&#xA;var task = {&#xA;run: updateClock,&#xA;interval: 1000 //1 second&#xA;var runner = new Ext.util.TaskRunner();&#xA;runner.start(task);&#xA;// equivalent using TaskMgr&#xA;Ext.TaskMgr.start({&#xA;run: updateClock,&#xA;interval: 1000&#xA;});&#xA;&#xA;Also see {@link Ext.util.DelayedTask}." ilk="function" line="39" lineend="155" name="TaskRunner" signature="TaskRunner(interval)">
              <variable citdl="Number" doc="(optional) The minimum precision in milliseconds supported by this TaskRunner instance&#xA;(defaults to 10)" ilk="argument" name="interval" />
              <variable citdl="TaskRunner" name="this" />
              <scope attributes="__local__ private" ilk="function" line="47" lineend="51" name="stopThread" signature="stopThread()" />
              <variable attributes="__local__ private" citdl="Boolean" line="47" name="running" />
              <variable attributes="__local__ private" citdl="Array" line="47" name="tasks" />
              <variable attributes="__local__ private" citdl="Number" line="47" name="id" />
              <variable attributes="__local__ private" citdl="Array" line="47" name="removeQueue" />
              <scope attributes="__local__ private" ilk="function" line="54" lineend="59" name="startThread" signature="startThread()" />
              <scope attributes="__local__ private" ilk="function" line="62" lineend="67" name="removeTask" signature="removeTask(t)">
                <variable ilk="argument" name="t" />
              </scope>
              <scope attributes="__local__ private" ilk="function" line="70" lineend="99" name="runTasks" signature="runTasks()">
                <variable attributes="__local__ private" citdl="removeQueue.length" line="72" name="rqLen" />
                <variable attributes="__local__ private" citdl="Date" line="72" name="now" />
              </scope>
            </scope>
            <scope doc="Starts a new task." ilk="function" line="121" lineend="128" name="start" returns="Object" signature="start(task)">
              <variable citdl="Object" doc="A config object that supports the following properties:&#xA;run : FunctionThe function to execute each time the task is run. The&#xA;function will be called at each interval and passed the args argument if specified.  If a&#xA;particular scope is required, be sure to specify it using the scope argument.&#xA;interval : NumberThe frequency in milliseconds with which the task&#xA;should be executed.&#xA;args : Array(optional) An array of arguments to be passed to the function&#xA;specified by run.&#xA;scope : Object(optional) The scope (this reference) in which to execute the&#xA;run function. Defaults to the task config object.&#xA;duration : Number(optional) The length of time in milliseconds to execute&#xA;the task before stopping automatically (defaults to indefinite).&#xA;repeat : Number(optional) The number of times to execute the task before&#xA;stopping automatically (defaults to indefinite)." ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope doc="Stops an existing running task." ilk="function" line="136" lineend="139" name="stop" returns="Object" signature="stop(task)">
              <variable citdl="Object" doc="The task to stop" ilk="argument" name="task" />
              <variable citdl="TaskRunner" name="this" />
            </scope>
            <scope doc="Stops all tasks that are currently running." ilk="function" line="145" lineend="154" name="stopAll" signature="stopAll()">
              <variable citdl="TaskRunner" name="this" />
            </scope>
          </scope>
          <variable citdl="Object" line="73" name="Format">
            <scope ilk="function" line="93" lineend="97" name="date" returns="v.dateFormat()" signature="date(v, format)">
              <variable citdl="Date" ilk="argument" name="v" />
              <variable ilk="argument" name="format" />
              <variable citdl="Format" name="this" />
            </scope>
            <scope ilk="function" line="103" lineend="119" name="brMoney" returns="String" signature="brMoney(v)">
              <variable citdl="whole" ilk="argument" name="v" />
              <variable citdl="Format" name="this" />
              <variable attributes="__local__ private" citdl="v.split()" line="107" name="ps" />
              <variable attributes="__local__ private" citdl="ps[0]" line="108" name="whole" />
              <variable attributes="__local__ private" citdl="ps[1]" line="109" name="sub" />
              <variable attributes="__local__ private" line="110" name="r" />
            </scope>
          </variable>
          <variable citdl="Object" line="142" name="Observable">
            <variable citdl="Object" line="142" name="prototype">
              <scope ilk="function" line="72" lineend="77" name="beforeMethod" signature="beforeMethod(method, fn, scope)">
                <variable ilk="argument" name="method" />
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable citdl="prototype" name="this" />
              </scope>
              <scope ilk="function" line="80" lineend="85" name="afterMethod" signature="afterMethod(method, fn, scope)">
                <variable ilk="argument" name="method" />
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable citdl="prototype" name="this" />
              </scope>
              <scope ilk="function" line="87" lineend="104" name="removeMethodListener" signature="removeMethodListener(method, fn, scope)">
                <variable ilk="argument" name="method" />
                <variable ilk="argument" name="fn" />
                <variable ilk="argument" name="scope" />
                <variable citdl="prototype" name="this" />
                <variable attributes="__local__ private" citdl="Boolean" line="88" name="found" />
                <variable attributes="__local__ private" citdl="getMethodEvent.call()" line="88" name="e" />
              </scope>
              <scope doc="Relays selected events from the specified Observable as if the events were fired by this." ilk="function" line="111" lineend="122" name="relayEvents" signature="relayEvents(o, events)">
                <variable citdl="Object" doc="The Observable whose events this object is to relay." ilk="argument" name="o" />
                <variable citdl="Array" doc="Array of event names to relay." ilk="argument" name="events" />
                <variable citdl="prototype" name="this" />
                <variable attributes="__local__ private" citdl="this" line="112" name="me" />
                <scope attributes="__local__ private" ilk="function" line="113" lineend="117" name="createHandler" returns="me.fireEvent.apply()" signature="createHandler(ename)">
                  <variable ilk="argument" name="ename" />
                </scope>
                <scope attributes="__local__ private" ilk="function" line="118" lineend="121" name="(anonymous)" signature="(anonymous)()" />
              </scope>
              <scope doc="Used to enable bubbling of events" ilk="function" line="128" lineend="140" name="enableBubble" signature="enableBubble(events)">
                <variable citdl="Object" ilk="argument" name="events" />
                <variable citdl="prototype" name="this" />
                <variable attributes="__local__ private" citdl="this" line="129" name="me" />
                <scope attributes="__local__ private" ilk="function" line="131" lineend="139" name="(anonymous)" signature="(anonymous)()">
                  <variable attributes="__local__ private" citdl="me.events[ename]" line="133" name="ce" />
                </scope>
              </scope>
            </variable>
            <scope attributes="__static__" doc="STATIC: Sets observability on the passed class constructor.&#xA;This makes any event fired on any instance of the passed class also fire a single event through&#xA;the class allowing for central handling of events on many instances at once.&#xA;Usage:&#xA;Ext.util.Observable.observeClass(Ext.data.Connection);&#xA;Ext.data.Connection.on(&apos;beforerequest&apos;, function(con, options) {&#xA;console.log(&quot;Ajax request made to &quot; + options.url);&#xA;});" ilk="function" line="172" lineend="178" name="observeClass" signature="observeClass(c)">
              <variable citdl="Function" doc="The class constructor to make observable." ilk="argument" name="c" />
              <variable citdl="Observable" name="this" />
            </scope>
          </variable>
          <variable doc="Modified version of Douglas Crockford&quot;s json.js that doesn&quot;t&#xA;mess with the Object prototype&#xA;http://www.json.org/js.html" line="157" name="JSON" />
        </variable>
        <scope ilk="class" line="38" lineend="49" name="MessageBox">
          <variable citdl="Object" line="38" lineend="620" name="MessageBox">
            <scope doc="Returns a reference to the underlying {@link Ext.Window} element" ilk="function" line="101" lineend="165" name="getDialog" returns="Ext.Window" signature="getDialog(titleText)">
              <variable ilk="argument" name="titleText" />
              <variable citdl="MessageBox" name="this" />
              <variable citdl="Object" line="129" lineend="129" name="buttons">
                <variable citdl="dlg.addButton()" line="132" name="ok" />
                <variable citdl="dlg.addButton()" line="133" name="yes" />
                <variable citdl="dlg.addButton()" line="134" name="no" />
                <variable citdl="dlg.addButton()" line="135" name="cancel" />
              </variable>
              <variable attributes="__local__ private" citdl="this.buttonText" line="130" name="bt" />
              <variable attributes="__local__ private" citdl="bodyEl.dom.childNodes[1]" line="144" name="contentEl" />
              <scope attributes="__local__ private" ilk="function" line="148" lineend="156" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Updates the message box body text" ilk="function" line="173" lineend="202" name="updateText" returns="Ext.MessageBox" signature="updateText(text)">
              <variable citdl="String" doc="(optional) Replaces the message box element&apos;s innerHTML with the specified string (defaults to&#xA;the XHTML-compliant non-breaking space character &apos;&amp;amp;#160;&apos;)" ilk="argument" name="text" />
              <variable citdl="MessageBox" name="this" />
              <variable attributes="__local__ private" citdl="iconCls" line="179" name="iw" />
              <variable attributes="__local__ private" citdl="msgEl.getWidth()" line="180" name="mw" />
              <variable attributes="__local__ private" citdl="dlg.getFrameWidth()" line="181" name="fw" />
              <variable attributes="__local__ private" citdl="dlg.body.getFrameWidth()" line="182" name="bw" />
              <variable attributes="__local__ private" citdl="Math.max()" line="189" name="w" />
            </scope>
            <scope doc="Updates a progress-style message box&apos;s text and progress bar. Only relevant on message boxes&#xA;initiated via {@link Ext.MessageBox#progress} or {@link Ext.MessageBox#wait},&#xA;or by calling {@link Ext.MessageBox#show} with progress: true." ilk="function" line="214" lineend="220" name="updateProgress" returns="Ext.MessageBox" signature="updateProgress(value, progressText, msg)">
              <variable citdl="Number" doc="Any number between 0 and 1 (e.g., .5, defaults to 0)" ilk="argument" name="value" />
              <variable citdl="String" doc="The progress text to display inside the progress bar (defaults to &apos;&apos;)" ilk="argument" name="progressText" />
              <variable citdl="String" doc="The message box&apos;s body text is replaced with the specified string (defaults to undefined&#xA;so that any existing body text will not get overwritten by default unless a new value is passed in)" ilk="argument" name="msg" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Returns true if the message box is currently displayed" ilk="function" line="226" lineend="228" name="isVisible" returns="Boolean" signature="isVisible()">
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Hides the message box if it is displayed" ilk="function" line="234" lineend="246" name="hide" returns="Ext.MessageBox" signature="hide()">
              <variable citdl="MessageBox" name="this" />
              <variable attributes="__local__ private" citdl="dlg" line="235" name="proxy" />
            </scope>
            <scope doc="Displays a new message box, or reinitializes an existing message box, based on the config options&#xA;passed in. All display functions (e.g. prompt, alert, etc.) on MessageBox call this function internally,&#xA;although those calls are basic shortcuts and do not support all of the config options allowed here.&#xA;&#xA;&#xA;&#xA;&#xA;Ext.Msg.show({&#xA;title: &apos;Address&apos;,&#xA;msg: &apos;Please enter your address:&apos;,&#xA;width: 300,&#xA;buttons: Ext.MessageBox.OKCANCEL,&#xA;multiline: true,&#xA;fn: saveAddress,&#xA;animEl: &apos;addAddressBtn&apos;,&#xA;icon: Ext.MessageBox.INFO&#xA;});" ilk="function" line="317" lineend="391" name="show" returns="Ext.MessageBox" signature="show(options)">
              <variable ilk="argument" name="options" />
              <variable citdl="MessageBox" name="this" />
              <variable attributes="__local__ private" citdl="this.getDialog()" line="322" name="d" />
              <variable attributes="__local__ private" line="325" name="allowClose" />
              <variable attributes="__local__ private" citdl="opt.buttons" line="348" name="bs" />
              <variable attributes="__local__ private" citdl="buttons[&quot;ok&quot;]" line="349" name="db" />
              <scope attributes="__local__ private" ilk="function" line="370" lineend="383" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Adds the specified icon to the dialog.  By default, the class &apos;ext-mb-icon&apos; is applied for default&#xA;styling, and the class passed in is expected to supply the background image url. Pass in empty string (&apos;&apos;)&#xA;to clear any existing icon.  The following built-in icon classes are supported, but you can also pass&#xA;in a custom class name:&#xA;&#xA;Ext.MessageBox.INFO&#xA;Ext.MessageBox.WARNING&#xA;Ext.MessageBox.QUESTION&#xA;Ext.MessageBox.ERROR" ilk="function" line="407" lineend="419" name="setIcon" returns="Ext.MessageBox" signature="setIcon(icon)">
              <variable citdl="String" doc="A CSS classname specifying the icon&apos;s background image url, or empty string to clear the icon" ilk="argument" name="icon" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a message box with a progress bar.  This message box has no buttons and is not closeable by&#xA;the user.  You are responsible for updating the progress bar as needed via {@link Ext.MessageBox#updateProgress}&#xA;and closing the message box when the process is complete." ilk="function" line="430" lineend="441" name="progress" returns="Ext.MessageBox" signature="progress(title, msg, progressText)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="String" doc="(optional) The text to display inside the progress bar (defaults to &apos;&apos;)" ilk="argument" name="progressText" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a message box with an infinitely auto-updating progress bar.  This can be used to block user&#xA;interaction while waiting for a long-running process to complete that does not have defined intervals.&#xA;You are responsible for closing the message box when the process is complete." ilk="function" line="452" lineend="464" name="wait" returns="Ext.MessageBox" signature="wait(msg, title, config)">
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="String" doc="(optional) The title bar text" ilk="argument" name="title" />
              <variable citdl="Object" doc="(optional) A {@link Ext.ProgressBar#waitConfig} object" ilk="argument" name="config" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a standard read-only message box with an OK button (comparable to the basic JavaScript alert prompt).&#xA;If a callback function is passed it will be called after the user clicks the button, and the&#xA;id of the button that was clicked will be passed as the only parameter to the callback&#xA;(could also be the top-right close button)." ilk="function" line="477" lineend="486" name="alert" returns="Ext.MessageBox" signature="alert(title, msg, fn, scope)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a confirmation message box with Yes and No buttons (comparable to JavaScript&apos;s confirm).&#xA;If a callback function is passed it will be called after the user clicks either button,&#xA;and the id of the button that was clicked will be passed as the only parameter to the callback&#xA;(could also be the top-right close button)." ilk="function" line="499" lineend="509" name="confirm" returns="Ext.MessageBox" signature="confirm(title, msg, fn, scope)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <scope doc="Displays a message box with OK and Cancel buttons prompting the user to enter some text (comparable to JavaScript&apos;s prompt).&#xA;The prompt can be a single-line or multi-line textbox.  If a callback function is passed it will be called after the user&#xA;clicks either button, and the id of the button that was clicked (could also be the top-right&#xA;close button) and the text that was entered will be passed as the two parameters to the callback." ilk="function" line="525" lineend="538" name="prompt" returns="Ext.MessageBox" signature="prompt(title, msg, fn, scope, multiline, value)">
              <variable citdl="String" doc="The title bar text" ilk="argument" name="title" />
              <variable citdl="String" doc="The message box body text" ilk="argument" name="msg" />
              <variable citdl="Function" doc="(optional) The callback function invoked after the message box is closed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the callback function" ilk="argument" name="scope" />
              <variable citdl="Boolean/Number" doc="(optional) True to create a multiline textbox using the defaultTextHeight&#xA;property, or the height in pixels to create the textbox (defaults to false / single-line)" ilk="argument" name="multiline" />
              <variable citdl="String" doc="(optional) Default value of the text input element (defaults to &apos;&apos;)" ilk="argument" name="value" />
              <variable citdl="MessageBox" name="this" />
            </scope>
            <variable citdl="Object" doc="Button config that displays a single OK button" line="544" lineend="544" name="OK">
              <variable citdl="Boolean" line="544" name="ok" />
            </variable>
            <variable citdl="Object" doc="Button config that displays a single Cancel button" line="549" lineend="549" name="CANCEL">
              <variable citdl="Boolean" line="549" name="cancel" />
            </variable>
            <variable citdl="Object" doc="Button config that displays OK and Cancel buttons" line="554" lineend="554" name="OKCANCEL">
              <variable citdl="Boolean" line="554" name="cancel" />
              <variable citdl="Boolean" line="554" name="ok" />
            </variable>
            <variable citdl="Object" doc="Button config that displays Yes and No buttons" line="559" lineend="559" name="YESNO">
              <variable citdl="Boolean" line="559" name="yes" />
              <variable citdl="Boolean" line="559" name="no" />
            </variable>
            <variable citdl="Object" doc="Button config that displays Yes, No and Cancel buttons" line="564" lineend="564" name="YESNOCANCEL">
              <variable citdl="Boolean" line="564" name="cancel" />
              <variable citdl="Boolean" line="564" name="yes" />
              <variable citdl="Boolean" line="564" name="no" />
            </variable>
            <variable citdl="String" doc="The CSS class that provides the INFO icon image" line="569" name="INFO" />
            <variable citdl="String" doc="The CSS class that provides the WARNING icon image" line="574" name="WARNING" />
            <variable citdl="String" doc="The CSS class that provides the QUESTION icon image" line="579" name="QUESTION" />
            <variable citdl="String" doc="The CSS class that provides the ERROR icon image" line="584" name="ERROR" />
            <variable citdl="Number" doc="The default height in pixels of the message box&apos;s multiline textarea if displayed (defaults to 75)" line="590" name="defaultTextHeight" />
            <variable citdl="Number" doc="The maximum width in pixels of the message box (defaults to 600)" line="595" name="maxWidth" />
            <variable citdl="Number" doc="The minimum width in pixels of the message box (defaults to 110)" line="600" name="minWidth" />
            <variable citdl="Number" doc="The minimum width in pixels of the message box if it is a progress-style dialog.  This is useful&#xA;for setting a different minimum width than text-only dialogs may need (defaults to 250)" line="606" name="minProgressWidth" />
            <variable citdl="Object" doc="An object containing the default button text strings that can be overriden for localized language support.&#xA;Supported properties are: ok, cancel, yes and no.  Generally you should include a locale-specific&#xA;resource file for handling language support across the framework.&#xA;Customize the default text like so: Ext.MessageBox.buttonText.yes = &quot;oui&quot;; //french" line="614" lineend="619" name="buttonText">
              <variable citdl="String" line="615" name="ok" />
              <variable citdl="String" line="616" name="cancel" />
              <variable citdl="String" line="617" name="yes" />
              <variable citdl="String" line="618" name="no" />
            </variable>
          </variable>
        </scope>
        <scope ilk="function" line="40" lineend="42" name="extendX" returns="Ext.extend()" signature="extendX(supr, fn)">
          <variable ilk="argument" name="supr" />
          <variable ilk="argument" name="fn" />
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Ext.util.Observable" ilk="class" line="47" lineend="170" name="Resizable">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Applies drag handles to an element to make it resizable. The drag handles are inserted into the element&#xA;and positioned absolute. Some elements, such as a textarea or image, don&apos;t support this. To overcome that, you can wrap&#xA;the textarea in a div and set &apos;resizeChild&apos; to true (or to the id of the element), or set wrap:true in your config and&#xA;the element will be wrapped for you automatically.&#xA;Here is the list of valid resize handles:&#xA;&#xA;Value   Description&#xA;------  -------------------&#xA;&apos;n&apos;     north&#xA;&apos;s&apos;     south&#xA;&apos;e&apos;     east&#xA;&apos;w&apos;     west&#xA;&apos;nw&apos;    northwest&#xA;&apos;sw&apos;    southwest&#xA;&apos;se&apos;    southeast&#xA;&apos;ne&apos;    northeast&#xA;&apos;all&apos;   all&#xA;Here&apos;s an example showing the creation of a typical Resizable:&#xA;&#xA;var resizer = new Ext.Resizable(&apos;element-id&apos;, {&#xA;handles: &apos;all&apos;,&#xA;minWidth: 200,&#xA;minHeight: 100,&#xA;maxWidth: 500,&#xA;maxHeight: 400,&#xA;pinned: true&#xA;});&#xA;resizer.on(&apos;resize&apos;, myHandler);&#xA;To hide a particular handle, set its display to none in CSS, or through script:&#xA;resizer.east.setDisplayed(false);" ilk="function" line="47" lineend="170" name="Resizable" signature="Resizable(el, config)">
            <variable citdl="Mixed" doc="The id or element to resize" ilk="argument" name="el" />
            <variable citdl="Object" doc="configuration options" ilk="argument" name="config" />
            <variable citdl="Resizable" name="this" />
            <variable attributes="__local__ private" citdl="config.resizeChild.getSize()" line="58" name="csize" />
            <variable attributes="__local__ private" citdl="this.el.getStyle()" line="84" name="position" />
            <variable attributes="__local__ private" citdl="this.handles.split()" line="97" name="hs" />
            <variable attributes="__local__ private" citdl="Ext.Resizable.positions" line="98" name="ps" />
            <variable attributes="__local__ private" citdl="ps[hs[i]]" line="101" name="pos" />
            <variable attributes="__local__ private" citdl="this.resizeChild" line="123" name="rc" />
            <variable attributes="__local__ private" citdl="this.west" line="124" name="hw" />
            <variable attributes="__local__ private" citdl="this.north" line="124" name="hn" />
            <variable attributes="__local__ private" citdl="this.east" line="124" name="he" />
          </scope>
          <variable citdl="Ext.get()" line="48" name="el" />
          <variable citdl="Ext.Element." doc="The proxy Element that is resized in place of the real Element during the resize operation.&#xA;This may be queried using {@link Ext.Element#getBox} to provide the new area to resize to.&#xA;Read only." line="73" name="proxy" />
          <variable citdl="Boolean" line="80" name="disableTrackOver" />
          <variable citdl="String" line="89" name="handles" />
          <variable citdl="this.southeast" line="106" name="corner" />
          <variable citdl="Boolean" line="109" name="updateBox" />
          <variable line="112" name="activeHandle" />
          <variable citdl="Ext.get()" line="116" name="resizeChild" />
          <variable citdl="Array" line="131" name="adjustments" />
          <variable citdl="this.dynamic" line="137" name="dd" />
          <variable citdl="Object" line="706" lineend="708" name="positions">
            <variable citdl="String" line="707" name="e" />
            <variable citdl="String" line="707" name="sw" />
            <variable citdl="String" line="707" name="ne" />
            <variable citdl="String" line="707" name="n" />
            <variable citdl="String" line="707" name="s" />
            <variable citdl="String" line="707" name="w" />
            <variable citdl="String" line="707" name="se" />
            <variable citdl="String" line="707" name="nw" />
          </variable>
          <scope classrefs="Object" ilk="class" line="711" lineend="760" name="Handle">
            <scope attributes="__ctor__" ilk="function" line="711" lineend="735" name="Handle" signature="Handle(rz, pos, disableTrackOver, transparent)">
              <variable ilk="argument" name="rz" />
              <variable ilk="argument" name="pos" />
              <variable ilk="argument" name="disableTrackOver" />
              <variable ilk="argument" name="transparent" />
              <variable citdl="Handle" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomHelper.createTemplate()" line="716" name="tpl" />
            </scope>
            <variable citdl="pos" line="720" name="position" />
            <variable citdl="rz" line="721" name="rz" />
            <variable citdl="this.tpl.append()" line="722" name="el" />
            <scope ilk="function" line="740" lineend="742" name="afterResize" signature="afterResize(rz)">
              <variable ilk="argument" name="rz" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="744" lineend="746" name="onMouseDown" signature="onMouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="748" lineend="750" name="onMouseOver" signature="onMouseOver(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="752" lineend="754" name="onMouseOut" signature="onMouseOut(e)">
              <variable ilk="argument" name="e" />
              <variable citdl="Handle" name="this" />
            </scope>
            <scope ilk="function" line="756" lineend="759" name="destroy" signature="destroy()">
              <variable citdl="Handle" name="this" />
            </scope>
          </scope>
        </scope>
        <variable citdl="Object" line="47" lineend="185" name="Template">
          <variable citdl="Object" line="114" name="prototype">
            <scope doc="Returns an HTML fragment of this template with the specified values applied." ilk="function" line="17" lineend="51" name="applyTemplate" returns="String" signature="applyTemplate(values)">
              <variable citdl="Object/Array" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="21" name="me" />
              <variable attributes="__local__ private" citdl="me.disableFormats" line="21" name="useF" />
              <variable attributes="__local__ private" citdl="me" line="21" name="tpl" />
              <variable attributes="__local__ private" citdl="Ext.util.Format" line="21" name="fm" />
              <scope attributes="__local__ private" ilk="function" line="26" lineend="49" name="fn" returns="values[name]" signature="fn(m, name, format, args)">
                <variable ilk="argument" name="m" />
                <variable ilk="argument" name="name" />
                <variable ilk="argument" name="format" />
                <variable citdl="Array" ilk="argument" name="args" />
                <variable attributes="__local__ private" line="35" name="re" />
              </scope>
            </scope>
            <variable citdl="Boolean" doc="true to disable format functions (defaults to false)" line="58" name="disableFormats" />
            <variable citdl="RegExp" doc="The regular expression used to match template variables" line="66" name="re" />
            <scope doc="Compiles the template into an internal function, eliminating the RegEx overhead." ilk="function" line="73" lineend="108" name="compile" returns="Ext.Template" signature="compile()">
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="78" name="me" />
              <variable attributes="__local__ private" citdl="me.disableFormats" line="78" name="useF" />
              <variable attributes="__local__ private" citdl="String" line="78" name="body" />
              <variable attributes="__local__ private" citdl="Ext.util.Format" line="78" name="fm" />
              <variable attributes="__local__ private" citdl="Ext.isGecko" line="78" name="sep" />
              <scope attributes="__local__ private" ilk="function" line="80" lineend="93" name="fn" returns="String" signature="fn(m, name, format, args)">
                <variable ilk="argument" name="m" />
                <variable ilk="argument" name="name" />
                <variable citdl="String" ilk="argument" name="format" />
                <variable citdl="String" ilk="argument" name="args" />
              </scope>
            </scope>
            <scope ilk="function" line="111" lineend="113" name="call" returns="this[fnName]()" signature="call(fnName, value, allValues)">
              <variable ilk="argument" name="fnName" />
              <variable ilk="argument" name="value" />
              <variable ilk="argument" name="allValues" />
              <variable citdl="prototype" name="this" />
            </scope>
          </variable>
          <scope attributes="__static__" doc="STATIC: Creates a template from the passed element&apos;s value (display:none textarea, preferred) or innerHTML." ilk="function" line="182" lineend="185" name="from" returns="Ext.Template" signature="from(el, config)">
            <variable citdl="String/HTMLElement" doc="A DOM element or its id" ilk="argument" name="el" />
            <variable citdl="Object" doc="A configuration object" ilk="argument" name="config" />
            <variable citdl="Template" name="this" />
          </scope>
        </variable>
        <scope doc="Returns the current HTML document object as an {@link Ext.Element}." ilk="function" line="48" lineend="50" name="getDoc" returns="Ext.get()" signature="getDoc()">
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Error" ilk="class" line="49" lineend="52" name="Error">
          <scope attributes="__ctor__" doc="A base error class. Future implementations are intended to provide more&#xA;robust error handling throughout the framework (in the debug build only)&#xA;to check for common errors and problems. The messages issued by this class&#xA;will aid error checking. Error checks will be automatically removed in the&#xA;production build so that performance is not negatively impacted.&#xA;Some sample messages currently implemented:&#xA;&quot;DataProxy attempted to execute an API-action but found an undefined&#xA;url / function. Please review your Proxy url/api-configuration.&quot;&#xA;&#xA;&quot;Could not locate your &quot;root&quot; property in your server response.&#xA;Please review your JsonReader config to ensure the config-property&#xA;&quot;root&quot; matches the property your server-response.  See the JsonReader&#xA;docs for additional assistance.&quot;&#xA;&#xA;An example of the code used for generating error messages:&#xA;try {&#xA;generateError({&#xA;foo: &apos;bar&apos;&#xA;});&#xA;catch (e) {&#xA;console.error(e);&#xA;function generateError(data) {&#xA;throw new Ext.Error(&apos;foo-error&apos;, data);" ilk="function" line="49" lineend="52" name="Error" signature="Error(message)">
            <variable citdl="String" ilk="argument" name="message" />
            <variable citdl="Error" name="this" />
          </scope>
          <variable line="51" name="message" />
          <variable citdl="Object" line="80" name="prototype">
            <variable citdl="Object" line="56" lineend="56" name="lang" />
            <variable citdl="String" line="58" name="name" />
            <scope doc="getName" ilk="function" line="63" lineend="65" name="getName" returns="String" signature="getName()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="getMessage" ilk="function" line="70" lineend="72" name="getMessage" returns="String" signature="getMessage()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="toJson" ilk="function" line="77" lineend="79" name="toJson" returns="String" signature="toJson()">
              <variable citdl="prototype" name="this" />
            </scope>
          </variable>
        </scope>
        <scope classrefs="Object" ilk="class" line="53" lineend="242" name="KeyMap">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Handles mapping keys to actions for an element. One key map can be used for multiple actions.&#xA;The constructor accepts the same config object as defined by {@link #addBinding}.&#xA;If you bind a callback function to a KeyMap, anytime the KeyMap handles an expected key&#xA;combination it will call the function with this signature (if the match is a multi-key&#xA;combination the callback will still be called only once): (String key, Ext.EventObject e)&#xA;A KeyMap can also handle a string representation of keys.&#xA;Usage:&#xA;// map one key by key code&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, {&#xA;key: 13, // or Ext.EventObject.ENTER&#xA;fn: myHandler,&#xA;scope: myObject&#xA;});&#xA;// map multiple keys to one action by string&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, {&#xA;key: &quot;a\r\n\t&quot;,&#xA;fn: myHandler,&#xA;scope: myObject&#xA;});&#xA;// map multiple keys to multiple actions by strings and array of codes&#xA;var map = new Ext.KeyMap(&quot;my-element&quot;, [&#xA;key: [10,13],&#xA;fn: function(){ alert(&quot;Return was pressed&quot;); }&#xA;}, {&#xA;key: &quot;abc&quot;,&#xA;fn: function(){ alert(&apos;a, b or c was pressed&apos;); }&#xA;}, {&#xA;key: &quot;\t&quot;,&#xA;ctrl:true,&#xA;shift:true,&#xA;fn: function(){ alert(&apos;Control + shift + tab was pressed.&apos;); }&#xA;]);&#xA;Note: A KeyMap starts enabled" ilk="function" line="53" lineend="61" name="KeyMap" signature="KeyMap(el, config, eventName)">
            <variable citdl="Mixed" doc="The element to bind to" ilk="argument" name="el" />
            <variable citdl="Object" doc="The config (see {@link #addBinding})" ilk="argument" name="config" />
            <variable citdl="String" doc="(optional) The event to bind to (defaults to &quot;keydown&quot;)" ilk="argument" name="eventName" />
            <variable citdl="KeyMap" name="this" />
          </scope>
          <variable citdl="Ext.get()" line="54" name="el" />
          <variable citdl="eventName" line="55" name="eventName" />
          <variable citdl="Array" line="56" name="bindings" />
          <variable citdl="Boolean" doc="True to stop the event from bubbling and prevent the default browser action if the&#xA;key was handled by the KeyMap (defaults to false)" line="69" name="stopEvent" />
          <scope doc="Add a new binding to this KeyMap. The following config object properties are supported:&#xA;&#xA;Property    Type             Description&#xA;----------  ---------------  ----------------------------------------------------------------------&#xA;key         String/Array     A single keycode or an array of keycodes to handle&#xA;shift       Boolean          True to handle key only when shift is pressed, False to handle the key only when shift is not pressed (defaults to undefined)&#xA;ctrl        Boolean          True to handle key only when ctrl is pressed, False to handle the key only when ctrl is not pressed (defaults to undefined)&#xA;alt         Boolean          True to handle key only when alt is pressed, False to handle the key only when alt is not pressed (defaults to undefined)&#xA;handler     Function         The function to call when KeyMap finds the expected key combination&#xA;fn          Function         Alias of handler (for backwards-compatibility)&#xA;scope       Object           The scope of the callback function&#xA;stopEvent   Boolean          True to stop the event from bubbling and prevent the default browser action if the key was handled by the KeyMap (defaults to false)&#xA;&#xA;Usage:&#xA;&#xA;// Create a KeyMap&#xA;var map = new Ext.KeyMap(document, {&#xA;key: Ext.EventObject.ENTER,&#xA;fn: handleKey,&#xA;scope: this&#xA;});&#xA;//Add a new binding to the existing KeyMap later&#xA;map.addBinding({&#xA;key: &apos;abc&apos;,&#xA;shift: true,&#xA;fn: handleKey,&#xA;scope: this&#xA;});" ilk="function" line="105" lineend="154" name="addBinding" signature="addBinding(config)">
            <variable citdl="Object/Array" doc="A single KeyMap config or an array of configs" ilk="argument" name="config" />
            <variable citdl="KeyMap" name="this" />
            <scope attributes="__local__ private" ilk="function" line="107" lineend="109" name="(anonymous)" signature="(anonymous)()" />
            <variable attributes="__local__ private" citdl="config.scope" line="114" name="scope" />
            <variable attributes="__local__ private" citdl="config.key" line="114" name="keyCode" />
            <variable attributes="__local__ private" citdl="config.fn" line="114" name="fn" />
            <variable attributes="__local__ private" citdl="Array" line="121" name="ks" />
            <variable attributes="__local__ private" citdl="keyCode.toUpperCase()" line="122" name="keyString" />
            <variable attributes="__local__ private" citdl="Ext.isArray()" line="128" name="keyArray" />
            <scope attributes="__local__ private" ilk="function" line="130" lineend="152" name="handler" signature="handler(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getKey()" line="132" name="k" />
            </scope>
          </scope>
          <scope ilk="function" line="157" lineend="167" name="checkModifiers" returns="Boolean" signature="checkModifiers(config, e)">
            <variable ilk="argument" name="config" />
            <variable ilk="argument" name="e" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="158" name="keys" />
            <variable attributes="__local__ private" citdl="keys[i]" line="158" name="key" />
            <variable attributes="__local__ private" citdl="config[key]" line="158" name="val" />
          </scope>
          <scope doc="Shorthand for adding a single key listener" ilk="function" line="177" lineend="195" name="on" signature="on(key, fn, scope)">
            <variable citdl="Number/Array/Object" doc="Either the numeric key code, array of key codes or an object with the&#xA;following options:&#xA;{key: (number or array), shift: (true/false), ctrl: (true/false), alt: (true/false)}" ilk="argument" name="key" />
            <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
            <variable citdl="Object" doc="(optional) The scope of the function" ilk="argument" name="scope" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="key.shift" line="178" name="shift" />
            <variable attributes="__local__ private" citdl="key.alt" line="178" name="alt" />
            <variable attributes="__local__ private" citdl="key.key" line="178" name="keyCode" />
            <variable attributes="__local__ private" citdl="key.ctrl" line="178" name="ctrl" />
          </scope>
          <scope ilk="function" line="198" lineend="205" name="handleKeyDown" signature="handleKeyDown(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="KeyMap" name="this" />
            <variable attributes="__local__ private" citdl="this.bindings" line="200" name="b" />
          </scope>
          <scope doc="Returns true if this KeyMap is enabled" ilk="function" line="211" lineend="213" name="isEnabled" returns="Boolean" signature="isEnabled()">
            <variable citdl="KeyMap" name="this" />
          </scope>
          <scope doc="Enables this KeyMap" ilk="function" line="218" lineend="223" name="enable" signature="enable()">
            <variable citdl="KeyMap" name="this" />
          </scope>
          <variable citdl="Boolean" line="221" name="enabled" />
          <scope doc="Disable this KeyMap" ilk="function" line="228" lineend="233" name="disable" signature="disable()">
            <variable citdl="KeyMap" name="this" />
          </scope>
          <scope doc="Convenience function for setting disabled/enabled by boolean." ilk="function" line="239" lineend="241" name="setDisabled" signature="setDisabled(disabled)">
            <variable citdl="Boolean" ilk="argument" name="disabled" />
            <variable citdl="KeyMap" name="this" />
          </scope>
        </scope>
        <variable citdl="Boolean" line="56" name="enableFx" />
        <scope doc="Returns true if the passed object is a JavaScript date object, otherwise false." ilk="function" line="57" lineend="59" name="isDate" returns="Boolean" signature="isDate(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="o" name="this" />
        </scope>
        <scope classrefs="Object" ilk="class" line="60" lineend="252" name="Action">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: An Action is a piece of reusable functionality that can be abstracted out of any particular component so that it&#xA;can be usefully shared among multiple components.  Actions let you share handlers, configuration options and UI&#xA;updates across any components that support the Action interface (primarily {@link Ext.Toolbar}, {@link Ext.Button}&#xA;and {@link Ext.menu.Menu} components).&#xA;Aside from supporting the config object interface, any component that needs to use Actions must also support&#xA;the following method list, as these will be called as needed by the Action class: setText(string), setIconCls(string),&#xA;setDisabled(boolean), setVisible(boolean) and setHandler(function).&#xA;Example usage:&#xA;&#xA;// Define the shared action.  Each component below will have the same&#xA;// display text and icon, and will display the same message on click.&#xA;var action = new Ext.Action({&#xA;{@link #text}: &apos;Do something&apos;,&#xA;{@link #handler}: function(){&#xA;Ext.Msg.alert(&apos;Click&apos;, &apos;You did something.&apos;);&#xA;{@link #iconCls}: &apos;do-something&apos;,&#xA;{@link #itemId}: &apos;myAction&apos;&#xA;});&#xA;var panel = new Ext.Panel({&#xA;title: &apos;Actions&apos;,&#xA;width: 500,&#xA;height: 300,&#xA;tbar: [&#xA;// Add the action directly to a toolbar as a menu button&#xA;action,&#xA;text: &apos;Action Menu&apos;,&#xA;// Add the action to a menu as a text item&#xA;menu: [action]&#xA;items: [&#xA;// Add the action to the panel body as a standard button&#xA;new Ext.Button(action)&#xA;renderTo: Ext.getBody()&#xA;});&#xA;// Change the text for all components using the action&#xA;action.setText(&apos;Something else&apos;);&#xA;// Reference an action through a container using the itemId&#xA;var btn = panel.getComponent(&apos;myAction&apos;);&#xA;var aRef = btn.baseAction;&#xA;aRef.setText(&apos;New text&apos;);" ilk="function" line="60" lineend="64" name="Action" signature="Action(config)">
            <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
            <variable citdl="Action" name="this" />
          </scope>
          <variable citdl="config" line="61" name="initialConfig" />
          <variable citdl="config.itemId" line="62" name="itemId" />
          <variable citdl="Array" line="63" name="items" />
          <variable citdl="Boolean" doc="The CSS class selector that specifies a background image to be used as the header icon for&#xA;all components using this action (defaults to &apos;&apos;).&#xA;An example of specifying a custom icon class would be something like:&#xA;&#xA;// specify the property in the config for the class:&#xA;...&#xA;iconCls: &apos;do-something&apos;&#xA;// css class that specifies background image to be used as the icon image:&#xA;.do-something { background-image: url(../images/my-icon.gif) 0 6px no-repeat !important; }&#xA;*/// private" line="103" name="isAction" />
          <scope doc="Sets the text to be displayed by all components using this action." ilk="function" line="109" lineend="112" name="setText" signature="setText(text)">
            <variable citdl="String" doc="The text to display" ilk="argument" name="text" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Gets the text currently displayed by all components using this action." ilk="function" line="117" lineend="119" name="getText" returns="this.initialConfig.text" signature="getText()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the icon CSS class for all components using this action.  The class should supply&#xA;a background image that will be used as the icon image." ilk="function" line="126" lineend="129" name="setIconClass" signature="setIconClass(cls)">
            <variable citdl="String" doc="The CSS class supplying the icon image" ilk="argument" name="cls" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Gets the icon CSS class currently used by all components using this action." ilk="function" line="134" lineend="136" name="getIconClass" returns="this.initialConfig.iconCls" signature="getIconClass()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the disabled state of all components using this action.  Shortcut method&#xA;for {@link #enable} and {@link #disable}." ilk="function" line="143" lineend="146" name="setDisabled" signature="setDisabled(v)">
            <variable ilk="argument" name="v" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Enables all components using this action." ilk="function" line="151" lineend="153" name="enable" signature="enable()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Disables all components using this action." ilk="function" line="158" lineend="160" name="disable" signature="disable()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Returns true if the components using this action are currently disabled, else returns false." ilk="function" line="165" lineend="167" name="isDisabled" returns="this.initialConfig.disabled" signature="isDisabled()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the hidden state of all components using this action.  Shortcut method&#xA;for {@link #hide} and {@link #show}." ilk="function" line="174" lineend="177" name="setHidden" signature="setHidden(v)">
            <variable ilk="argument" name="v" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Shows all components using this action." ilk="function" line="182" lineend="184" name="show" signature="show()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Hides all components using this action." ilk="function" line="189" lineend="191" name="hide" signature="hide()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Returns true if the components using this action are currently hidden, else returns false." ilk="function" line="196" lineend="198" name="isHidden" returns="this.initialConfig.hidden" signature="isHidden()">
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Sets the function that will be called by each component using this action when its primary event is triggered." ilk="function" line="206" lineend="210" name="setHandler" signature="setHandler(fn, scope)">
            <variable citdl="Function" doc="The function that will be invoked by the action&apos;s components.  The function&#xA;will be called with no arguments." ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope in which the function will execute" ilk="argument" name="scope" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Executes the specified function once for each component currently tied to this action.  The function passed&#xA;in should accept a single argument that will be an object that supports the basic Action config/method interface." ilk="function" line="218" lineend="220" name="each" signature="each(fn, scope)">
            <variable citdl="Function" doc="The function to execute for each component" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope in which the function will execute" ilk="argument" name="scope" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope ilk="function" line="223" lineend="228" name="callEach" signature="callEach(fnName, args)">
            <variable ilk="argument" name="fnName" />
            <variable ilk="argument" name="args" />
            <variable citdl="Action" name="this" />
            <variable attributes="__local__ private" citdl="this.items" line="224" name="cs" />
          </scope>
          <scope ilk="function" line="231" lineend="234" name="addComponent" signature="addComponent(comp)">
            <variable ilk="argument" name="comp" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope ilk="function" line="237" lineend="239" name="removeComponent" signature="removeComponent(comp)">
            <variable ilk="argument" name="comp" />
            <variable citdl="Action" name="this" />
          </scope>
          <scope doc="Executes this action manually using the handler function specified in the original config object&#xA;or the handler function set with {@link #setHandler}.  Any arguments passed to this&#xA;function will be passed on to the handler function." ilk="function" line="249" lineend="251" name="execute" signature="execute()">
            <variable citdl="Action" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="64" name="MessageBox">
          <variable citdl="Object" line="64" lineend="89" name="buttonText">
            <variable citdl="String" line="65" name="ok" />
            <variable citdl="String" line="66" name="cancel" />
            <variable citdl="String" line="67" name="yes" />
            <variable citdl="String" line="68" name="no" />
          </variable>
        </variable>
        <scope doc="Utility method for validating that a value is numeric, returning the specified default value if it is not." ilk="function" line="67" lineend="70" name="num" returns="Number" signature="num(v, defaultValue)">
          <variable citdl="Number()" ilk="argument" name="v" />
          <variable citdl="Number" doc="The value to return if the original value is non-numeric" ilk="argument" name="defaultValue" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Object" line="70" name="ListView">
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Supporting Class for Ext.ListView." line="70" name="Sorter" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Supporting Class for Ext.ListView." line="123" name="ColumnResizer" />
        </variable>
        <scope ilk="class" line="72" lineend="101" name="DomQuery">
          <variable citdl="Object" line="72" lineend="815" name="DomQuery">
            <scope ilk="function" line="386" lineend="388" name="getStyle" returns="Ext.fly().getStyle()" signature="getStyle(el, name)">
              <variable ilk="argument" name="el" />
              <variable ilk="argument" name="name" />
              <variable citdl="DomQuery" name="this" />
            </scope>
            <scope doc="Compiles a selector/xpath query into a reusable function. The returned function&#xA;takes one parameter &quot;root&quot; (optional), which is the context node from where the query should start." ilk="function" line="396" lineend="467" name="compile" returns="Function" signature="compile(path, type)">
              <variable citdl="path.substr()" ilk="argument" name="path" />
              <variable citdl="String" doc="(optional) Either &quot;select&quot; (the default) or &quot;simple&quot; for a simple selector match" ilk="argument" name="type" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="q.match()" line="405" name="lmode" />
              <variable attributes="__local__ private" line="405" name="mm" />
              <variable attributes="__local__ private" citdl="path" line="405" name="q" />
              <variable attributes="__local__ private" citdl="tk.length" line="405" name="tklen" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.matchers" line="405" name="tk" />
              <variable attributes="__local__ private" citdl="q" line="405" name="lq" />
              <variable attributes="__local__ private" citdl="Array" line="405" name="fn" />
              <variable attributes="__local__ private" line="405" name="mode" />
              <variable attributes="__local__ private" citdl="q.match()" line="418" name="tm" />
              <variable attributes="__local__ private" citdl="Boolean" line="441" name="matched" />
              <variable attributes="__local__ private" citdl="tk[j]" line="443" name="t" />
              <variable attributes="__local__ private" citdl="q.match()" line="444" name="m" />
            </scope>
            <scope doc="Selects a group of elements." ilk="function" line="476" lineend="502" name="select" returns="Array" signature="select(path, root, type)">
              <variable ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable ilk="argument" name="type" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="path.split()" line="484" name="paths" />
              <variable attributes="__local__ private" citdl="Array" line="484" name="results" />
              <variable attributes="__local__ private" citdl="paths[i].replace()" line="486" name="p" />
              <variable attributes="__local__ private" citdl="cache[p]()" line="493" name="result" />
            </scope>
            <scope doc="Selects a single element." ilk="function" line="510" lineend="512" name="selectNode" returns="Element" signature="selectNode(path, root)">
              <variable ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable citdl="DomQuery" name="this" />
            </scope>
            <scope doc="Selects the value of a node, optionally replacing null with the defaultValue." ilk="function" line="521" lineend="531" name="selectValue" returns="String" signature="selectValue(path, root, defaultValue)">
              <variable citdl="path.replace()" ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable citdl="String" ilk="argument" name="defaultValue" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" line="527" name="v" />
              <variable attributes="__local__ private" citdl="valueCache[path]()" line="527" name="n" />
            </scope>
            <scope doc="Selects the value of a node, parsing integers and floats. Returns the defaultValue, or 0 if none is specified." ilk="function" line="540" lineend="543" name="selectNumber" returns="Number" signature="selectNumber(path, root, defaultValue)">
              <variable ilk="argument" name="path" />
              <variable citdl="Node" doc="(optional) The start of the query (defaults to document)." ilk="argument" name="root" />
              <variable citdl="Number" ilk="argument" name="defaultValue" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.selectValue()" line="541" name="v" />
            </scope>
            <scope doc="Returns true if the passed element(s) match the passed simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="551" lineend="558" name="is" returns="Boolean" signature="is(el, ss)">
              <variable citdl="String/HTMLElement/Array" doc="An element id, element or array of elements" ilk="argument" name="el" />
              <variable ilk="argument" name="ss" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="Ext.isArray()" line="556" name="isArray" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery.filter()" line="556" name="result" />
            </scope>
            <scope doc="Filters an array of elements to only include matches of a simple selector (e.g. div.some-class or span:first-child)" ilk="function" line="569" lineend="576" name="filter" returns="Array" signature="filter(els, ss, nonMatches)">
              <variable ilk="argument" name="els" />
              <variable citdl="ss.replace()" ilk="argument" name="ss" />
              <variable citdl="Boolean" doc="If true, it returns the elements that DON&apos;T match&#xA;the selector instead of the ones that match" ilk="argument" name="nonMatches" />
              <variable citdl="DomQuery" name="this" />
              <variable attributes="__local__ private" citdl="simpleCache[ss]()" line="574" name="result" />
            </scope>
            <variable citdl="Array" doc="Collection of matching regular expressions and code snippets." line="581" name="matchers" />
            <variable line="582" name="re" />
            <variable citdl="String" line="583" name="select" />
            <variable citdl="Object" doc="Collection of operator comparison functions. The default operators are =, !=, ^=, $=, *=, %=, |= and ~=.&#xA;New operators can be added as long as the match the format c= where c is any character other than space, &amp;gt; &amp;lt;." line="603" lineend="628" name="operators">
              <scope ilk="function" line="604" lineend="606" name="=" returns="a" signature="=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="607" lineend="609" name="!=" returns="a" signature="!=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="610" lineend="612" name="^=" returns="a" signature="^=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="613" lineend="615" name="$=" returns="a" signature="$=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="616" lineend="618" name="*=" returns="a" signature="*=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="619" lineend="621" name="%=" signature="%=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="622" lineend="624" name="|=" returns="a" signature="|=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
              <scope ilk="function" line="625" lineend="627" name="~=" returns="a" signature="~=(a, v)">
                <variable ilk="argument" name="a" />
                <variable ilk="argument" name="v" />
                <variable citdl="operators" name="this" />
              </scope>
            </variable>
            <variable citdl="Object" doc="Collection of &quot;pseudo class&quot; processors. Each processor is passed the current nodeset (array)&#xA;and the argument (if any) supplied in the selector." line="634" lineend="814" name="pseudos">
              <scope ilk="function" line="635" lineend="644" name="first-child" returns="r" signature="first-child(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="636" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="636" name="ri" />
                <variable attributes="__local__ private" line="636" name="n" />
              </scope>
              <scope ilk="function" line="646" lineend="655" name="last-child" returns="r" signature="last-child(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="647" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="647" name="ri" />
                <variable attributes="__local__ private" line="647" name="n" />
              </scope>
              <scope ilk="function" line="657" lineend="682" name="nth-child" returns="r" signature="nth-child(c, a)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="a" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" line="660" name="f" />
                <variable attributes="__local__ private" citdl="nthRe.exec()" line="660" name="m" />
                <variable attributes="__local__ private" citdl="m[2]" line="660" name="l" />
                <variable attributes="__local__ private" citdl="Array" line="660" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="660" name="ri" />
                <variable attributes="__local__ private" citdl="n.parentNode" line="662" name="pn" />
                <variable attributes="__local__ private" citdl="Number" line="664" name="j" />
              </scope>
              <scope ilk="function" line="684" lineend="692" name="only-child" returns="r" signature="only-child(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="685" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="685" name="ri" />
              </scope>
              <scope ilk="function" line="694" lineend="710" name="empty" returns="r" signature="empty(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="695" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="695" name="ri" />
                <variable attributes="__local__ private" line="697" name="cn" />
                <variable attributes="__local__ private" citdl="Number" line="697" name="j" />
                <variable attributes="__local__ private" citdl="Boolean" line="697" name="empty" />
                <variable attributes="__local__ private" citdl="ci.childNodes" line="697" name="cns" />
              </scope>
              <scope ilk="function" line="712" lineend="720" name="contains" returns="r" signature="contains(c, v)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="v" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="713" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="713" name="ri" />
              </scope>
              <scope ilk="function" line="722" lineend="730" name="nodeValue" returns="r" signature="nodeValue(c, v)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="v" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="723" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="723" name="ri" />
              </scope>
              <scope ilk="function" line="732" lineend="740" name="checked" returns="r" signature="checked(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Array" line="733" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="733" name="ri" />
              </scope>
              <scope ilk="function" line="742" lineend="744" name="not" returns="Ext.DomQuery.filter()" signature="not(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="746" lineend="758" name="any" returns="r" signature="any(c, selectors)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="selectors" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="selectors.split()" line="748" name="ss" />
                <variable attributes="__local__ private" line="748" name="s" />
                <variable attributes="__local__ private" citdl="Array" line="748" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="748" name="ri" />
              </scope>
              <scope ilk="function" line="760" lineend="762" name="odd" returns="this[&quot;nth-child&quot;]()" signature="odd(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="764" lineend="766" name="even" returns="this[&quot;nth-child&quot;]()" signature="even(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="768" lineend="770" name="nth" returns="c[a-1]" signature="nth(c, a)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="a" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="772" lineend="774" name="first" returns="c[0]" signature="first(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="776" lineend="778" name="last" returns="c[c.length-1]" signature="last(c)">
                <variable ilk="argument" name="c" />
                <variable citdl="pseudos" name="this" />
              </scope>
              <scope ilk="function" line="780" lineend="789" name="has" returns="r" signature="has(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Ext.DomQuery.select" line="782" name="s" />
                <variable attributes="__local__ private" citdl="Array" line="782" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="782" name="ri" />
              </scope>
              <scope ilk="function" line="791" lineend="801" name="next" returns="r" signature="next(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="793" name="is" />
                <variable attributes="__local__ private" citdl="Array" line="793" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="793" name="ri" />
                <variable attributes="__local__ private" citdl="next()" line="795" name="n" />
              </scope>
              <scope ilk="function" line="803" lineend="813" name="prev" returns="r" signature="prev(c, ss)">
                <variable ilk="argument" name="c" />
                <variable ilk="argument" name="ss" />
                <variable citdl="pseudos" name="this" />
                <variable attributes="__local__ private" citdl="Ext.DomQuery.is" line="805" name="is" />
                <variable attributes="__local__ private" citdl="Array" line="805" name="r" />
                <variable attributes="__local__ private" citdl="Number" line="805" name="ri" />
                <variable attributes="__local__ private" citdl="prev()" line="807" name="n" />
              </scope>
            </variable>
          </variable>
        </scope>
        <variable citdl="Ext.apply()" doc="The default global group of stores." line="72" name="StoreMgr" />
        <scope ilk="class" line="75" lineend="87" name="QuickTips">
          <variable citdl="Object" line="75" lineend="158" name="QuickTips">
            <scope doc="Initialize the global QuickTips instance and prepare any quick tips." ilk="function" line="82" lineend="95" name="init" signature="init(autoRender)">
              <variable citdl="Boolean" doc="True to render the QuickTips container immediately to preload images. (Defaults to true)" ilk="argument" name="autoRender" />
              <variable citdl="QuickTips" name="this" />
              <scope attributes="__local__ private" ilk="function" line="85" lineend="87" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Enable quick tips globally." ilk="function" line="100" lineend="107" name="enable" signature="enable()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Disable quick tips globally." ilk="function" line="112" lineend="117" name="disable" signature="disable()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Returns true if quick tips are enabled, else false." ilk="function" line="123" lineend="125" name="isEnabled" returns="Boolean" signature="isEnabled()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Gets the global QuickTips instance." ilk="function" line="130" lineend="132" name="getQuickTip" returns="tip" signature="getQuickTip()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Configures a new quick tip instance and assigns it to a target element.  See&#xA;{@link Ext.QuickTip#register} for details." ilk="function" line="139" lineend="141" name="register" signature="register()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Removes any registered quick tip from the target element and destroys it." ilk="function" line="147" lineend="149" name="unregister" signature="unregister()">
              <variable citdl="QuickTips" name="this" />
            </scope>
            <scope doc="Alias of {@link #register}." ilk="function" line="155" lineend="157" name="tips" signature="tips()">
              <variable citdl="QuickTips" name="this" />
            </scope>
          </variable>
        </scope>
        <scope ilk="class" line="79" lineend="192" name="Element">
          <variable citdl="String" doc="*/// special markup used throughout Ext when box wrapping elements" line="12" name="boxMarkup" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Visibility mode constant for use with {@link #setVisibilityMode}. Use visibility to hide element" line="15" name="VISIBILITY" />
          <variable attributes="__static__" citdl="Number" doc="STATIC: Visibility mode constant for use with {@link #setVisibilityMode}. Use display to hide element" line="21" name="DISPLAY" />
          <variable citdl="Object" line="52" name="prototype">
            <scope doc="Inserts (or creates) the passed element (or DomHelper config) as a sibling of this element" ilk="function" line="23" lineend="50" name="insertSibling" returns="Ext.Element" signature="insertSibling(el, where, returnDom)">
              <variable citdl="Mixed/Object/Array" doc="The id, element to insert or a DomHelper config to create and insert *or* an array of any of those." ilk="argument" name="el" />
              <variable citdl="String" doc="(optional) &apos;before&apos; or &apos;after&apos; defaults to before" ilk="argument" name="where" />
              <variable citdl="Boolean" doc="(optional) True to return the raw DOM element instead of Ext.Element" ilk="argument" name="returnDom" />
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="25" name="me" />
              <variable attributes="__local__ private" citdl="me.insertSibling()" line="25" name="rt" />
              <scope attributes="__local__ private" ilk="function" line="28" lineend="30" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </variable>
          <scope attributes="__ctor__" ilk="function" line="79" lineend="103" name="Element" returns="Ext.Element.cache[id]" signature="Element(element, forceNew)">
            <variable ilk="argument" name="element" />
            <variable ilk="argument" name="forceNew" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" line="80" name="dom" />
            <scope doc="Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods&#xA;to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or&#xA;{@link Ext.CompositeElementLite CompositeElementLite} object." ilk="function" line="175" lineend="185" name="select" returns="CompositeElementLite/CompositeElement" signature="select(selector, unique, root)">
              <variable citdl="String/Array" doc="The CSS selector or an array of elements" ilk="argument" name="selector" />
              <variable citdl="Boolean" doc="(optional) true to create a unique Ext.Element for each element (defaults to a shared flyweight object) Not supported in core" ilk="argument" name="unique" />
              <variable citdl="HTMLElement/String" doc="(optional) The root element of the query or id of the root" ilk="argument" name="root" />
              <variable attributes="__local__ private" citdl="Ext.Element.selectorFunction()" line="176" name="els" />
            </scope>
          </scope>
          <variable citdl="HTMLElement" doc="The DOM element" line="96" name="dom" />
          <variable citdl="String" doc="The DOM element ID" line="102" name="id" />
          <scope doc="Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods&#xA;to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or&#xA;{@link Ext.CompositeElementLite CompositeElementLite} object." ilk="function" line="112" lineend="123" name="select" returns="CompositeElementLite/CompositeElement" signature="select(selector, unique, root)">
            <variable citdl="String/Array" doc="The CSS selector or an array of elements" ilk="argument" name="selector" />
            <variable citdl="Boolean" doc="(optional) true to create a unique Ext.Element for each element (defaults to a shared flyweight object)" ilk="argument" name="unique" />
            <variable citdl="HTMLElement/String" doc="(optional) The root element of the query or id of the root" ilk="argument" name="root" />
            <variable citdl="Element" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element.selectorFunction()" line="113" name="els" />
          </scope>
          <variable citdl="Ext.DomQuery.select" line="161" name="selectorFunction" />
          <scope ilk="function" line="186" lineend="192" name="uncache" signature="uncache(el)">
            <variable ilk="argument" name="el" />
            <variable citdl="Element" name="this" />
          </scope>
        </scope>
        <variable citdl="Object" line="82" name="Container">
          <variable citdl="Object" line="82" lineend="893" name="LAYOUTS">
            <variable citdl="Ext.layout.FitLayout" line="48" name="fit" />
            <variable citdl="Ext.layout.AbsoluteLayout" line="82" name="absolute" />
            <variable citdl="Ext.layout.MenuLayout" line="93" name="menu" />
            <variable citdl="Ext.layout.CardLayout" line="127" name="card" />
            <variable citdl="Ext.layout.ColumnLayout" line="130" name="column" />
            <variable citdl="Ext.layout.AccordionLayout" line="174" name="accordion" />
            <variable citdl="Ext.layout.TableLayout" line="194" name="table" />
            <variable citdl="Ext.layout.AnchorLayout" line="200" name="anchor" />
            <variable citdl="Ext.layout.ContainerLayout" line="215" name="auto" />
            <variable citdl="Ext.layout.ToolbarLayout" line="253" name="toolbar" />
            <variable citdl="Ext.layout.VBoxLayout" line="262" name="vbox" />
            <variable citdl="Ext.layout.FormLayout" line="266" name="form" />
            <variable citdl="Ext.layout.HBoxLayout" line="417" name="hbox" />
            <variable citdl="Ext.layout.BorderLayout" line="1108" name="border" />
          </variable>
        </variable>
        <scope doc="Utility method for returning a default value if the passed value is empty.&#xA;The value is deemed to be empty if it is&#xA;null&#xA;undefined&#xA;an empty array&#xA;a zero length string (Unless the allowBlank parameter is true)" ilk="function" line="85" lineend="87" name="value" returns="Mixed" signature="value(v, defaultValue, allowBlank)">
          <variable ilk="argument" name="v" />
          <variable citdl="Mixed" doc="The value to return if the original value is empty" ilk="argument" name="defaultValue" />
          <variable citdl="Boolean" doc="(optional) true to allow zero length strings to qualify as non-empty (defaults to false)" ilk="argument" name="allowBlank" />
          <variable citdl="o" name="this" />
        </scope>
        <scope doc="Escapes the passed string for use in a regular expression" ilk="function" line="94" lineend="96" name="escapeRe" returns="String" signature="escapeRe(s)">
          <variable ilk="argument" name="s" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Object" line="97" name="DatePicker">
          <variable citdl="Object" line="97" name="prototype">
            <variable citdl="String" line="102" name="todayText" />
            <variable citdl="String" line="103" name="minText" />
            <variable citdl="String" line="104" name="maxText" />
            <variable citdl="String" line="105" name="disabledDaysText" />
            <variable citdl="String" line="106" name="disabledDatesText" />
            <variable citdl="Date.monthNames" line="107" name="monthNames" />
            <variable citdl="Date.dayNames" line="108" name="dayNames" />
            <variable citdl="String" line="109" name="nextText" />
            <variable citdl="String" line="110" name="prevText" />
            <variable citdl="String" line="111" name="monthYearText" />
            <variable citdl="String" line="112" name="todayTip" />
            <variable citdl="String" line="113" name="format" />
            <variable citdl="String" line="114" name="okText" />
            <variable citdl="String" line="115" name="cancelText" />
            <variable citdl="Number" line="116" name="startDay" />
          </variable>
        </variable>
        <scope ilk="function" line="98" lineend="100" name="sequence" signature="sequence(o, name, fn, scope)">
          <variable citdl="o[name].createSequence()" ilk="argument" name="o" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="scope" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Ext.extend()" doc="Container for a group of buttons. Example usage:&#xA;&#xA;var p = new Ext.Panel({&#xA;title: &apos;Panel with Button Group&apos;,&#xA;width: 300,&#xA;height:200,&#xA;renderTo: document.body,&#xA;html: &apos;whatever&apos;,&#xA;tbar: [{&#xA;xtype: &apos;buttongroup&apos;,&#xA;{@link #columns}: 3,&#xA;title: &apos;Clipboard&apos;,&#xA;items: [{&#xA;text: &apos;Paste&apos;,&#xA;scale: &apos;large&apos;,&#xA;rowspan: 3, iconCls: &apos;add&apos;,&#xA;iconAlign: &apos;top&apos;,&#xA;cls: &apos;x-btn-as-arrow&apos;&#xA;},{&#xA;xtype:&apos;splitbutton&apos;,&#xA;text: &apos;Menu Button&apos;,&#xA;scale: &apos;large&apos;,&#xA;rowspan: 3,&#xA;iconCls: &apos;add&apos;,&#xA;iconAlign: &apos;top&apos;,&#xA;arrowAlign:&apos;bottom&apos;,&#xA;menu: [{text: &apos;Menu Item 1&apos;}]&#xA;},{&#xA;xtype:&apos;splitbutton&apos;, text: &apos;Cut&apos;, iconCls: &apos;add16&apos;, menu: [{text: &apos;Cut Menu Item&apos;}]&#xA;},{&#xA;text: &apos;Copy&apos;, iconCls: &apos;add16&apos;&#xA;},{&#xA;text: &apos;Format&apos;, iconCls: &apos;add16&apos;&#xA;});" line="101" name="ButtonGroup" />
        <variable citdl="Object" line="102" name="data">
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="11" lineend="17" name="DirectProxy">
            <scope attributes="__ctor__" ilk="function" line="11" lineend="17" name="DirectProxy" signature="DirectProxy(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DirectProxy" name="this" />
            </scope>
            <variable doc="server side.  Specify the params in the order in which they must be executed on the server-side&#xA;as either (1) an Array of String values, or (2) a String of params delimited by either whitespace,&#xA;comma, or pipe. For example,&#xA;any of the following would be acceptable:&#xA;paramOrder: [&apos;param1&apos;,&apos;param2&apos;,&apos;param3&apos;]&#xA;paramOrder: &apos;param1 param2 param3&apos;&#xA;paramOrder: &apos;param1,param2,param3&apos;&#xA;paramOrder: &apos;param1|param2|param&apos;" line="32" name="paramOrder" />
            <variable citdl="Boolean" doc="Send parameters as a collection of named arguments (defaults to true). Providing a&#xA;{@link #paramOrder} nullifies this configuration." line="39" name="paramsAsHash" />
            <variable doc="Function to call when executing a request.  directFn is a simple alternative to defining the api configuration-parameter&#xA;for Store&apos;s which will not implement a full CRUD api." line="46" name="directFn" />
            <scope ilk="function" line="49" lineend="85" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, options)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="reader" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="Array" line="50" name="args" />
              <variable attributes="__local__ private" citdl="this.api[action]" line="51" name="directFn" />
              <variable attributes="__local__ private" citdl="Object" line="75" lineend="81" name="trans">
                <variable citdl="params" line="76" name="params" />
                <variable citdl="callback" line="77" name="callback" />
                <variable citdl="scope" line="78" name="scope" />
                <variable citdl="options" line="79" name="arg" />
                <variable citdl="reader" line="80" name="reader" />
              </variable>
            </scope>
            <scope ilk="function" line="88" lineend="105" name="createCallback" signature="createCallback(action, rs, trans)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="trans" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for read actions" ilk="function" line="113" lineend="128" name="onRead" signature="onRead(action, trans, result, res)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable ilk="argument" name="result" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable attributes="__local__ private" citdl="trans.reader.readRecords()" line="114" name="records" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for write actions" ilk="function" line="136" lineend="139" name="onWrite" signature="onWrite(action, trans, result, res, rs)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable ilk="argument" name="result" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable ilk="argument" name="rs" />
            </scope>
          </scope>
          <variable citdl="Object" doc="Defines the default sorting (casting?) comparison functions used when sorting data." line="13" lineend="91" name="SortTypes">
            <scope doc="Default sort that does nothing" ilk="function" line="19" lineend="21" name="none" returns="Mixed" signature="none(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <variable citdl="RegExp" doc="The regular expression used to strip tags" line="28" name="stripTagsRE" />
            <scope doc="Strips all HTML tags to sort on text only" ilk="function" line="35" lineend="37" name="asText" returns="String" signature="asText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Strips all HTML tags to sort on text only - Case insensitive" ilk="function" line="44" lineend="46" name="asUCText" returns="String" signature="asUCText(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Case insensitive string" ilk="function" line="53" lineend="55" name="asUCString" returns="String" signature="asUCString(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Date sorting" ilk="function" line="62" lineend="70" name="asDate" returns="Number" signature="asDate(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
            </scope>
            <scope doc="Float sorting" ilk="function" line="77" lineend="80" name="asFloat" returns="Number" signature="asFloat(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseFloat()" line="78" name="val" />
            </scope>
            <scope doc="Integer sorting" ilk="function" line="87" lineend="90" name="asInt" returns="Number" signature="asInt(s)">
              <variable citdl="Mixed" doc="The value being converted" ilk="argument" name="s" />
              <variable citdl="SortTypes" name="this" />
              <variable attributes="__local__ private" citdl="parseInt()" line="88" name="val" />
            </scope>
          </variable>
          <scope classrefs="Object" ilk="class" line="14" lineend="249" name="Field">
            <scope attributes="__ctor__" doc="This class encapsulates the field definition information specified in the field definition objects&#xA;passed to {@link Ext.data.Record#create}.&#xA;Developers do not need to instantiate this class. Instances are created by {@link Ext.data.Record.create}&#xA;and cached in the {@link Ext.data.Record#fields fields} property of the created Record constructor&apos;s prototype." ilk="function" line="14" lineend="101" name="Field" signature="Field(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Field" name="this" />
              <variable attributes="__local__ private" citdl="Ext.data.SortTypes" line="24" name="st" />
              <variable attributes="__local__ private" line="45" name="stripRe" />
              <variable attributes="__local__ private" citdl="this.dateFormat" line="50" name="dateFormat" />
              <variable attributes="__local__ private" line="50" name="cv" />
              <scope attributes="__local__ private" ilk="function" line="77" lineend="95" name="cv" returns="parsed" signature="cv(v)">
                <variable ilk="argument" name="v" />
                <variable attributes="__local__ private" citdl="Date.parse()" line="93" name="parsed" />
              </scope>
            </scope>
            <variable citdl="String" line="21" name="type" />
            <variable citdl="st[this.sortType]" line="27" name="sortType" />
            <variable citdl="cv" line="99" name="convert" />
            <variable doc="The name by which the field is referenced within the Record. This is referenced by, for example,&#xA;the dataIndex property in column definition objects passed to {@link Ext.grid.ColumnModel}.&#xA;Note: In the simplest case, if no properties other than name are required, a field&#xA;definition may consist of just a String for the field name.&#xA;&#xA;&#xA;&#xA;// example of convert function&#xA;function fullName(v, record){&#xA;return record.name.last + &apos;, &apos; + record.name.first;&#xA;function location(v, record){&#xA;return !record.city ? &apos;&apos; : (record.city + &apos;, &apos; + record.state);&#xA;var Dude = Ext.data.Record.create([&#xA;{name: &apos;fullname&apos;,  convert: fullName},&#xA;{name: &apos;firstname&apos;, mapping: &apos;name.first&apos;},&#xA;{name: &apos;lastname&apos;,  mapping: &apos;name.last&apos;},&#xA;{name: &apos;city&apos;, defaultValue: &apos;homeless&apos;},&#xA;&apos;state&apos;,&#xA;{name: &apos;location&apos;,  convert: location}&#xA;]);&#xA;// create the data store&#xA;var store = new Ext.data.Store({&#xA;reader: new Ext.data.JsonReader(&#xA;idProperty: &apos;key&apos;,&#xA;root: &apos;daRoot&apos;,&#xA;totalProperty: &apos;total&apos;&#xA;Dude  // recordType&#xA;});&#xA;var myData = [&#xA;{ key: 1,&#xA;name: { first: &apos;Fat&apos;,    last:  &apos;Albert&apos; }&#xA;// notice no city, state provided in data object&#xA;{ key: 2,&#xA;name: { first: &apos;Barney&apos;, last:  &apos;Rubble&apos; },&#xA;city: &apos;Bedrock&apos;, state: &apos;Stoneridge&apos;&#xA;{ key: 3,&#xA;name: { first: &apos;Cliff&apos;,  last:  &apos;Claven&apos; },&#xA;city: &apos;Boston&apos;,  state: &apos;MA&apos;" line="186" name="dateFormat" />
            <variable citdl="String" doc="(Optional) The default value used when a Record is being created by a {@link Ext.data.Reader Reader}&#xA;when the item referenced by the {@link Ext.data.Field#mapping mapping} does not exist in the data&#xA;object (i.e. undefined). (defaults to &quot;&quot;)" line="193" name="defaultValue" />
            <variable doc="(Optional) A path expression for use by the {@link Ext.data.DataReader} implementation&#xA;that is creating the {@link Ext.data.Record Record} to extract the Field value from the data object.&#xA;If the path expression is the same as the field name, the mapping may be omitted.&#xA;The form of the mapping expression depends on the Reader being used.&#xA;&#xA;{@link Ext.data.JsonReader}The mapping is a string containing the javascript&#xA;expression to reference the data from an element of the data item&apos;s {@link Ext.data.JsonReader#root root} Array. Defaults to the field name.&#xA;{@link Ext.data.XmlReader}The mapping is an {@link Ext.DomQuery} path to the data&#xA;item relative to the DOM element that represents the {@link Ext.data.XmlReader#record record}. Defaults to the field name.&#xA;{@link Ext.data.ArrayReader}The mapping is a number indicating the Array index&#xA;of the field&apos;s value. Defaults to the field specification&apos;s Array position.&#xA;&#xA;If a more complex value extraction strategy is required, then configure the Field with a {@link #convert}&#xA;function. This is passed the whole row object, and may interrogate it in whatever way is necessary in order to&#xA;return the desired data." line="212" name="mapping" />
            <variable citdl="String" doc="(Optional) Initial direction to sort (&quot;ASC&quot; or  &quot;DESC&quot;).  Defaults to&#xA;&quot;ASC&quot;." line="241" name="sortDir" />
            <variable citdl="Boolean" doc="(Optional) Used for validating a {@link Ext.data.Record record}, defaults to true.&#xA;An empty value here will cause {@link Ext.data.Record}.{@link Ext.data.Record#isValid isValid}&#xA;to evaluate to false." line="248" name="allowBlank" />
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="15" lineend="100" name="Tree">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Represents a tree data structure and bubbles all the events for its nodes. The nodes&#xA;in the tree have most standard DOM functionality." ilk="function" line="15" lineend="100" name="Tree" signature="Tree(root)">
              <variable citdl="Node" doc="(optional) The root node" ilk="argument" name="root" />
              <variable citdl="Tree" name="this" />
            </scope>
            <variable citdl="Object" line="16" lineend="16" name="nodeHash" />
            <variable citdl="Node" doc="The root node for this tree" line="21" name="root" />
            <variable citdl="String" doc="The token used to separate paths in node ids (defaults to &apos;/&apos;)." line="107" name="pathSeparator" />
            <scope ilk="function" line="110" lineend="112" name="proxyNodeEvent" returns="this.fireEvent.apply()" signature="proxyNodeEvent()" />
            <scope doc="Returns the root node for this tree." ilk="function" line="118" lineend="120" name="getRootNode" returns="Node" signature="getRootNode()" />
            <scope doc="Sets the root node for this tree." ilk="function" line="127" lineend="133" name="setRootNode" returns="Node" signature="setRootNode(node)">
              <variable citdl="Node" ilk="argument" name="node" />
            </scope>
            <scope doc="Gets a node in this tree by its id." ilk="function" line="140" lineend="142" name="getNodeById" returns="Node" signature="getNodeById(id)">
              <variable citdl="String" ilk="argument" name="id" />
            </scope>
            <scope ilk="function" line="145" lineend="147" name="registerNode" signature="registerNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="150" lineend="152" name="unregisterNode" signature="unregisterNode(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="154" lineend="156" name="toString" returns="String" signature="toString()" />
          </scope>
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="15" lineend="23" name="MemoryProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that simply passes the data specified in its constructor&#xA;to the Reader when its load method is called." ilk="function" line="15" lineend="23" name="MemoryProxy" signature="MemoryProxy(data)">
              <variable citdl="Object" doc="The data object which the Reader uses to construct a block of Ext.data.Records." ilk="argument" name="data" />
              <variable citdl="MemoryProxy" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="17" lineend="17" name="api" />
            </scope>
            <variable citdl="data" line="22" name="data" />
            <scope doc="Fires if an exception occurs in the Proxy during data loading. Note that this event is also relayed&#xA;through {@link Ext.data.Store}, so you can listen for it directly on any Store instance." ilk="function" line="53" lineend="68" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, arg)">
              <variable citdl="String" ilk="argument" name="action" />
              <variable citdl="Array" doc="If action is load, rs will be null" ilk="argument" name="rs" />
              <variable citdl="Object" doc="An object containing properties which are to be used as HTTP parameters&#xA;for the request to the remote server." ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" doc="The Reader object which converts the data&#xA;object into a block of Ext.data.Records." ilk="argument" name="reader" />
              <variable citdl="Function" doc="The function into which to pass the block of Ext.data.Records.&#xA;The function must be passed&#xA;The Record block object&#xA;The &quot;arg&quot; argument from the load function&#xA;A boolean success indicator" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to call the callback" ilk="argument" name="scope" />
              <variable citdl="Object" doc="An optional argument which is passed to the callback as its second parameter." ilk="argument" name="arg" />
              <variable attributes="__local__ private" citdl="reader.readRecords()" line="56" name="result" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="21" lineend="138" name="DataReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Abstract base class for reading structured data from a data source and converting&#xA;it into an object containing {@link Ext.data.Record} objects and metadata for use&#xA;by an {@link Ext.data.Store}.  This class is intended to be extended and should not&#xA;be created directly. For existing implementations, see {@link Ext.data.ArrayReader},&#xA;{@link Ext.data.JsonReader} and {@link Ext.data.XmlReader}." ilk="function" line="21" lineend="36" name="DataReader" signature="DataReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options (implementation-specific)." ilk="argument" name="meta" />
              <variable citdl="Array/Object" doc="Either an Array of {@link Ext.data.Field Field} definition objects (which&#xA;will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}&#xA;constructor created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <variable citdl="Mixed" doc="This DataReader&apos;s configured metadata as passed to the constructor." line="27" name="meta" />
            <variable citdl="Ext.isArray()" doc="Either an Array of {@link Ext.data.Field Field} definition objects (which&#xA;will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}&#xA;constructor created from {@link Ext.data.Record#create}." line="34" name="recordType" />
            <variable citdl="Ext.emptyFn" doc="Abstract method, overridden in {@link Ext.data.JsonReader}" line="43" name="buildExtractors" />
            <scope doc="Used for un-phantoming a record after a successful database insert.  Sets the records pk along with new data from server.&#xA;You must return at least the database pk using the idProperty defined in your DataReader configuration.  The incoming&#xA;data from server will be merged with the data in the local record.&#xA;In addition, you must return record-data from the server in the same order received.&#xA;Will perform a commit as well, un-marking dirty-fields.  Store&apos;s &quot;update&quot; event will be suppressed." ilk="function" line="54" lineend="86" name="realize" signature="realize(rs, data)">
              <variable ilk="argument" name="rs" />
              <variable citdl="Array" doc="The new record data to apply.  Must include the primary-key from database defined in idProperty field." ilk="argument" name="data" />
              <variable citdl="DataReader" name="this" />
              <variable attributes="__local__ private" citdl="this.extractValues()" line="79" name="values" />
            </scope>
            <scope doc="Used for updating a non-phantom or &quot;real&quot; record&apos;s data with fresh data from server after remote-save.&#xA;You must return a complete new record from the server.  If you don&apos;t, your local record&apos;s missing fields&#xA;will be populated with the default values specified in your Ext.data.Record.create specification.  Without a defaultValue,&#xA;local fields will be populated with empty string &quot;&quot;.  So return your entire record&apos;s data after both remote create and update.&#xA;In addition, you must return record-data from the server in the same order received.&#xA;Will perform a commit as well, un-marking dirty-fields.  Store&apos;s &quot;update&quot; event will be suppressed as the record receives&#xA;a fresh new data-hash." ilk="function" line="99" lineend="127" name="update" signature="update(rs, data)">
              <variable citdl="Array" ilk="argument" name="rs" />
              <variable citdl="Array" ilk="argument" name="data" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <scope doc="Returns true if the supplied data-hash looks and quacks like data.  Checks to see if it has a key&#xA;corresponding to idProperty defined in your DataReader config containing non-empty pk." ilk="function" line="135" lineend="137" name="isData" returns="Boolean" signature="isData(data)">
              <variable citdl="Object" ilk="argument" name="data" />
              <variable citdl="DataReader" name="this" />
            </scope>
            <variable citdl="Ext.extend()" doc="General error class for Ext.data.DataReader" line="151" name="Error" />
          </scope>
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="28" lineend="53" name="HttpProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of {@link Ext.data.DataProxy} that processes data requests within the same&#xA;domain of the originating page.&#xA;Note: this class cannot be used to retrieve data from a domain other&#xA;than the domain from which the running page was served. For cross-domain requests, use a&#xA;{@link Ext.data.ScriptTagProxy ScriptTagProxy}.&#xA;Be aware that to enable the browser to parse an XML document, the server must set&#xA;the Content-Type header in the HTTP response to &quot;text/xml&quot;." ilk="function" line="28" lineend="53" name="HttpProxy" signature="HttpProxy(conn)">
              <variable citdl="Object" doc="An {@link Ext.data.Connection} object, or options parameter to {@link Ext.Ajax#request}.&#xA;Note that if this HttpProxy is being used by a (@link Ext.data.Store Store}, then the&#xA;Store&apos;s call to {@link #load} will override any specified callback and params&#xA;options. In this case, use the Store&apos;s {@link Ext.data.Store#events events} to modify parameters,&#xA;or react to loading events. The Store&apos;s {@link Ext.data.Store#baseParams baseParams} may also be&#xA;used to pass parameters known at instantiation time.&#xA;If an options parameter is passed, the singleton {@link Ext.Ajax} object will be used to make&#xA;the request." ilk="argument" name="conn" />
              <variable citdl="HttpProxy" name="this" />
              <variable attributes="__local__ private" citdl="Ext.data.Api.actions" line="48" name="actions" />
            </scope>
            <variable citdl="conn" doc="The Connection object (Or options parameter to {@link Ext.Ajax#request}) which this HttpProxy&#xA;uses to make requests to the server. Properties of this object may be changed dynamically to&#xA;change the way data is requested." line="37" name="conn" />
            <variable line="45" name="useAjax" />
            <variable citdl="Object" line="49" lineend="49" name="activeRequest" />
            <scope doc="If set to true, a {@link Ext.data.Record#phantom non-phantom} record&apos;s&#xA;{@link Ext.data.Record#id id} will be appended to the url (defaults to false).&#xA;The url is built based upon the action being executed [load|create|save|destroy]&#xA;using the commensurate {@link #api} property, or if undefined default to the&#xA;configured {@link Ext.data.Store}.{@link Ext.data.Store#url url}.&#xA;Some MVC (e.g., Ruby on Rails, Merb and Django) support this style of segment based urls&#xA;where the segments in the URL follow the Model-View-Controller approach.&#xA;someSite.com/controller/action/id&#xA;&#xA;Where the segments in the url are typically:&#xA;The first segment : represents the controller class that should be invoked.&#xA;The second segment : represents the class function, or method, that should be called.&#xA;The third segment : represents the ID (a variable typically passed to the method).&#xA;&#xA;For example:&#xA;&#xA;api: {&#xA;load :    &apos;/controller/load&apos;,&#xA;create :  &apos;/controller/new&apos;,  // Server MUST return idProperty of new record&#xA;save :    &apos;/controller/update&apos;,&#xA;destroy : &apos;/controller/destroy_action&apos;&#xA;// Alternatively, one can use the object-form to specify each API-action&#xA;api: {&#xA;load: {url: &apos;read.php&apos;, method: &apos;GET&apos;},&#xA;create: &apos;create.php&apos;,&#xA;destroy: &apos;destroy.php&apos;,&#xA;save: &apos;update.php&apos;&#xA;Return the {@link Ext.data.Connection} object being used by this Proxy." ilk="function" line="95" lineend="97" name="getConnection" returns="Connection" signature="getConnection()" />
            <scope doc="Used for overriding the url used for a single request.  Designed to be called during a beforeaction event.  Calling setUrl&#xA;will override any urls set via the api configuration parameter.  Set the optional parameter makePermanent to set the url for&#xA;all subsequent requests.  If not set to makePermanent, the next request will use the same url or api configuration defined&#xA;in the initial proxy configuration." ilk="function" line="109" lineend="115" name="setUrl" signature="setUrl(url, makePermanent)">
              <variable citdl="String" ilk="argument" name="url" />
              <variable citdl="Boolean" doc="(Optional) [false]&#xA;(e.g.: beforeload, beforesave, etc)." ilk="argument" name="makePermanent" />
            </scope>
            <variable citdl="url" line="112" name="url" />
            <scope doc="HttpProxy implementation of DataProxy#doRequest" ilk="function" line="134" lineend="177" name="doRequest" signature="doRequest(action, rs, params, reader, cb, scope, arg)">
              <variable citdl="String" doc="The crud action type (create, read, update, destroy)" ilk="argument" name="action" />
              <variable citdl="Array" doc="If action is load, rs will be null" ilk="argument" name="rs" />
              <variable citdl="Object" doc="An object containing properties which are to be used as HTTP parameters&#xA;for the request to the remote server." ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" doc="The Reader object which converts the data&#xA;object into a block of Ext.data.Records." ilk="argument" name="reader" />
              <variable ilk="argument" name="cb" />
              <variable citdl="Object" doc="The scope in which to call the callback" ilk="argument" name="scope" />
              <variable citdl="Object" doc="An optional argument which is passed to the callback as its second parameter." ilk="argument" name="arg" />
              <variable attributes="__local__ private" citdl="Object" line="135" lineend="145" name="o">
                <variable line="136" name="method" />
                <variable citdl="Object" line="137" lineend="141" name="request">
                  <variable citdl="cb" line="138" name="callback" />
                  <variable citdl="scope" line="139" name="scope" />
                  <variable citdl="arg" line="140" name="arg" />
                </variable>
                <variable citdl="reader" line="142" name="reader" />
                <variable citdl="this.createCallback()" line="143" name="callback" />
                <variable citdl="this" line="144" name="scope" />
                <variable citdl="params" line="149" name="jsonData" />
                <variable citdl="params" line="151" name="params" />
              </variable>
            </scope>
            <scope attributes="private" doc="PRIVATE: Returns a callback function for a request.  Note a special case is made for the&#xA;read action vs all the others." ilk="function" line="186" lineend="204" name="createCallback" signature="createCallback(action, rs)">
              <variable citdl="String" doc="[create|update|delete|load]" ilk="argument" name="action" />
              <variable citdl="Array" doc="The Store-recordset being acted upon" ilk="argument" name="rs" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for read action" ilk="function" line="213" lineend="236" name="onRead" signature="onRead(action, o, response)">
              <variable citdl="String" doc="Action name as per {@link Ext.data.Api.actions#read}." ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="o" />
              <variable ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="o.reader.read()" line="214" name="result" />
              <variable attributes="__local__ private" citdl="o.reader.readResponse()" line="229" name="res" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for write actions" ilk="function" line="244" lineend="260" name="onWrite" signature="onWrite(action, o, response, rs)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="response" />
              <variable ilk="argument" name="rs" />
              <variable attributes="__local__ private" citdl="o.reader" line="245" name="reader" />
              <variable attributes="__local__ private" citdl="reader.readResponse()" line="246" name="res" />
            </scope>
            <scope ilk="function" line="263" lineend="275" name="destroy" signature="destroy()">
              <variable attributes="__local__ private" citdl="Ext.data.Api.actions" line="267" name="actions" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="34" lineend="400" name="Record">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Instances of this class encapsulate both Record definition information, and Record&#xA;value information for use in {@link Ext.data.Store} objects, or any code which needs&#xA;to access Records cached in an {@link Ext.data.Store} object.&#xA;Constructors for this class are generated by passing an Array of field definition objects to {@link #create}.&#xA;Instances are usually only created by {@link Ext.data.Reader} implementations when processing unformatted data&#xA;objects.&#xA;Note that an instance of a Record class may only belong to one {@link Ext.data.Store Store} at a time.&#xA;In order to copy data from one Store to another, use the {@link #copy} method to create an exact&#xA;copy of the Record, and insert the new instance into the other Store.&#xA;When serializing a Record for submission to the server, be aware that it contains many private&#xA;properties, and also a reference to its owning Store which in turn holds references to its Records.&#xA;This means that a whole Record may not be encoded using {@link Ext.util.JSON.encode}. Instead, use the&#xA;{@link #data} and {@link #id} properties.&#xA;Record objects generated by this constructor inherit all the methods of Ext.data.Record listed below." ilk="function" line="34" lineend="38" name="Record" signature="Record(data, id)">
              <variable citdl="Object" doc="(Optional) An object, the properties of which provide values for the new Record&apos;s&#xA;fields. If not specified the {@link Ext.data.Field#defaultValue defaultValue}&#xA;for each field will be assigned." ilk="argument" name="data" />
              <variable citdl="Object" doc="(Optional) The id of the Record. This id should be unique, and is used by the&#xA;{@link Ext.data.Store} object which owns the Record to index its collection of Records. If&#xA;an id is not specified a {@link #phantom} Record will be created&#xA;with an {@link #Record.id automatically generated id}." ilk="argument" name="id" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable line="36" name="id" />
            <variable citdl="data" line="37" name="data" />
            <scope attributes="__static__" doc="STATIC: Generate a constructor for a specific Record layout.&#xA;// create a Record constructor from a description of the fields&#xA;var TopicRecord = Ext.data.Record.create([ // creates a subclass of Ext.data.Record&#xA;{{@link Ext.data.Field#name name}: &apos;title&apos;, {@link Ext.data.Field#mapping mapping}: &apos;topic_title&apos;},&#xA;{name: &apos;author&apos;, mapping: &apos;username&apos;, allowBlank: false},&#xA;{name: &apos;totalPosts&apos;, mapping: &apos;topic_replies&apos;, type: &apos;int&apos;},&#xA;{name: &apos;lastPost&apos;, mapping: &apos;post_time&apos;, type: &apos;date&apos;},&#xA;{name: &apos;lastPoster&apos;, mapping: &apos;user2&apos;},&#xA;{name: &apos;excerpt&apos;, mapping: &apos;post_text&apos;, allowBlank: false},&#xA;// In the simplest case, if no properties other than name are required,&#xA;// a field definition may consist of just a String for the field name.&#xA;&apos;signature&apos;&#xA;]);&#xA;// create Record instance&#xA;var myNewRecord = new TopicRecord(&#xA;title: &apos;Do my job please&apos;,&#xA;author: &apos;noobie&apos;,&#xA;totalPosts: 1,&#xA;lastPost: new Date(),&#xA;lastPoster: &apos;Animal&apos;,&#xA;excerpt: &apos;No way dude!&apos;,&#xA;signature: &apos;&apos;&#xA;id // optionally specify the id of the record otherwise {@link #Record.id one is auto-assigned}&#xA;myStore.{@link Ext.data.Store#add add}(myNewRecord);" ilk="function" line="79" lineend="92" name="create" returns="Function" signature="create(o)">
              <variable citdl="Array" doc="An Array of {@link Ext.data.Field Field} definition objects.&#xA;The constructor generated by this method may be used to create new Record instances. The data&#xA;object must contain properties named after the {@link Ext.data.Field field}&#xA;{@link Ext.data.Field#name}s.  Example usage:" ilk="argument" name="o" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="Ext.extend()" line="80" name="f" />
              <variable attributes="__local__ private" citdl="f.prototype" line="81" name="p" />
              <scope attributes="__local__ private" ilk="function" line="82" lineend="84" name="(anonymous)" returns="field.name" signature="(anonymous)()" />
            </scope>
            <variable citdl="String" line="94" name="PREFIX" />
            <variable citdl="Number" line="95" name="AUTO_ID" />
            <variable citdl="String" line="96" name="EDIT" />
            <variable citdl="String" line="97" name="REJECT" />
            <variable citdl="String" line="98" name="COMMIT" />
            <scope doc="Generates a sequential id. This method is typically called when a record is {@link #create}d&#xA;and {@link #Record no id has been specified}. The returned id takes the form:&#xA;&amp;#123;PREFIX}-&amp;#123;AUTO_ID}.&#xA;PREFIX : StringExt.data.Record.PREFIX&#xA;(defaults to &apos;ext-record&apos;)&#xA;AUTO_ID : StringExt.data.Record.AUTO_ID&#xA;(defaults to 1 initially)" ilk="function" line="113" lineend="116" name="id" returns="String" signature="id(rec)">
              <variable citdl="Record" doc="The record being created.  The record does not exist, it&apos;s a {@link #phantom}." ilk="argument" name="rec" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="Boolean" doc="This property is stored in the Record definition&apos;s prototype&#xA;A MixedCollection containing the defined {@link Ext.data.Field Field}s for this Record.  Read-only." line="142" name="dirty" />
            <variable citdl="Boolean" line="143" name="editing" />
            <variable line="144" name="error" />
            <variable citdl="Object" doc="This object contains a key and value storing the original values of all modified&#xA;fields or is null if no fields have been modified." line="151" lineend="394" name="modified" />
            <variable citdl="Boolean" doc="false when the record does not yet exist in a server-side database (see&#xA;{@link #markDirty}).  Any record which has a real database pk set as its id property&#xA;is NOT a phantom -- it&apos;s real." line="159" name="phantom" />
            <scope ilk="function" line="162" lineend="169" name="join" signature="join(store)">
              <variable ilk="argument" name="store" />
              <variable citdl="Record" name="this" />
            </scope>
            <variable citdl="Ext.data.Store" doc="The {@link Ext.data.Store} to which this Record belongs." line="168" name="store" />
            <scope doc="Set the {@link Ext.data.Field#name named field} to the specified value.  For example:&#xA;&#xA;// record has a field named &apos;firstname&apos;&#xA;var Employee = Ext.data.Record.{@link #create}([&#xA;{name: &apos;firstname&apos;},&#xA;...&#xA;]);&#xA;// update the 2nd record in the store:&#xA;var rec = myStore.{@link Ext.data.Store#getAt getAt}(1);&#xA;// set the value (shows dirty flag):&#xA;rec.set(&apos;firstname&apos;, &apos;Betty&apos;);&#xA;// commit the change (removes dirty flag):&#xA;rec.{@link #commit}();&#xA;// update the record in the store, bypass setting dirty flag,&#xA;// and do not store the change in the {@link Ext.data.Store#getModifiedRecords modified records}&#xA;rec.{@link #data}[&apos;firstname&apos;] = &apos;Wilma&apos;); // updates record, but not the view&#xA;rec.{@link #commit}(); // updates the view&#xA;&#xA;Notes:&#xA;If the store has a writer and autoSave=true, each set()&#xA;will execute an XHR to the server.&#xA;Use {@link #beginEdit} to prevent the store&apos;s update&#xA;event firing while using set().&#xA;Use {@link #endEdit} to have the store&apos;s update&#xA;event fire." ilk="function" line="205" lineend="223" name="set" signature="set(name, value)">
              <variable citdl="String" doc="The {@link Ext.data.Field#name name of the field} to set." ilk="argument" name="name" />
              <variable citdl="Object" doc="The value to set the field to." ilk="argument" name="value" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" line="206" name="isObj" />
            </scope>
            <scope ilk="function" line="226" lineend="230" name="afterEdit" signature="afterEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope ilk="function" line="233" lineend="237" name="afterReject" signature="afterReject()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope ilk="function" line="240" lineend="244" name="afterCommit" signature="afterCommit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Get the value of the {@link Ext.data.Field#name named field}." ilk="function" line="251" lineend="253" name="get" returns="Object" signature="get(name)">
              <variable citdl="String" doc="The {@link Ext.data.Field#name name of the field} to get the value of." ilk="argument" name="name" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Begin an edit. While in edit mode, no events (e.g.. the update event)&#xA;are relayed to the containing store.&#xA;See also: {@link #endEdit} and {@link #cancelEdit}." ilk="function" line="260" lineend="263" name="beginEdit" signature="beginEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Cancels all changes made in the current edit operation." ilk="function" line="268" lineend="271" name="cancelEdit" signature="cancelEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="End an edit. If any data was modified, the containing store is notified&#xA;(ie, the store&apos;s update event will fire)." ilk="function" line="277" lineend="282" name="endEdit" signature="endEdit()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Rejects all changes made to the Record since either creation, or the last commit operation.&#xA;Modified fields are reverted to their original values.&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event&#xA;to have their code notified of reject operations." ilk="function" line="293" lineend="306" name="reject" signature="reject(silent)">
              <variable citdl="Boolean" doc="(optional) True to skip notification of the owning&#xA;store of the change (defaults to false)" ilk="argument" name="silent" />
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="this.modified" line="294" name="m" />
            </scope>
            <scope doc="Usually called by the {@link Ext.data.Store} which owns the Record.&#xA;Commits all changes made to the Record since either creation, or the last commit operation.&#xA;Developers should subscribe to the {@link Ext.data.Store#update} event&#xA;to have their code notified of commit operations." ilk="function" line="316" lineend="323" name="commit" signature="commit(silent)">
              <variable citdl="Boolean" doc="(optional) True to skip notification of the owning&#xA;store of the change (defaults to false)" ilk="argument" name="silent" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Gets a hash of only the fields that have been modified since this Record was created or commited." ilk="function" line="329" lineend="337" name="getChanges" returns="cs" signature="getChanges()">
              <variable citdl="Record" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="330" lineend="330" name="cs" />
              <variable attributes="__local__ private" citdl="this.modified" line="330" name="m" />
            </scope>
            <scope ilk="function" line="340" lineend="342" name="hasError" returns="this.error" signature="hasError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope ilk="function" line="345" lineend="347" name="clearError" signature="clearError()">
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Creates a copy of this Record." ilk="function" line="356" lineend="358" name="copy" returns="Record" signature="copy(newId)">
              <variable ilk="argument" name="newId" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="Returns true if the passed field name has been {@link #modified}&#xA;since the load or last commit." ilk="function" line="366" lineend="368" name="isModified" returns="Boolean" signature="isModified(fieldName)">
              <variable citdl="String" doc="{@link Ext.data.Field.{@link Ext.data.Field#name}" ilk="argument" name="fieldName" />
              <variable citdl="Record" name="this" />
            </scope>
            <scope doc="By default returns false if any {@link Ext.data.Field field} within the&#xA;record configured with {@link Ext.data.Field#allowBlank} = false returns&#xA;true from an {@link Ext}.{@link Ext#isEmpty isempty} test." ilk="function" line="376" lineend="380" name="isValid" returns="Boolean" signature="isValid()">
              <variable citdl="Record" name="this" />
              <scope attributes="__local__ private" ilk="function" line="377" lineend="379" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <scope doc="Marks this Record as {@link #dirty}.  This method&#xA;is used interally when adding {@link #phantom} records to a&#xA;{@link Ext.data.Store#writer writer enabled store}.&#xA;Marking a record {@link #dirty} causes the phantom to&#xA;be returned by {@link Ext.data.Store#getModifiedRecords} where it will&#xA;have a create action composed for it during {@link Ext.data.Store#save store save}&#xA;operations." ilk="function" line="391" lineend="399" name="markDirty" signature="markDirty()">
              <variable citdl="Record" name="this" />
              <scope attributes="__local__ private" ilk="function" line="396" lineend="398" name="(anonymous)" signature="(anonymous)()">
                <variable citdl="this.data[f.name]" line="397" name="modified" />
              </scope>
            </scope>
          </scope>
          <scope classrefs="Ext.data.Store" ilk="class" line="42" lineend="47" name="DirectStore">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Small helper class to create an {@link Ext.data.Store} configured with an&#xA;{@link Ext.data.DirectProxy} and {@link Ext.data.JsonReader} to make interacting&#xA;with an {@link Ext.Direct} Server-side {@link Ext.direct.Provider Provider} easier.&#xA;To create a different proxy/reader combination create a basic {@link Ext.data.Store}&#xA;configured as needed.&#xA;&#xA;*Note: Although they are not listed, this class inherits all of the config options of:&#xA;&#xA;{@link Ext.data.Store Store}&#xA;&#xA;&#xA;&#xA;{@link Ext.data.JsonReader JsonReader}&#xA;&#xA;{@link Ext.data.JsonReader#root root}&#xA;{@link Ext.data.JsonReader#idProperty idProperty}&#xA;{@link Ext.data.JsonReader#totalProperty totalProperty}&#xA;&#xA;&#xA;{@link Ext.data.DirectProxy DirectProxy}&#xA;&#xA;{@link Ext.data.DirectProxy#directFn directFn}&#xA;{@link Ext.data.DirectProxy#paramOrder paramOrder}&#xA;{@link Ext.data.DirectProxy#paramsAsHash paramsAsHash}" ilk="function" line="42" lineend="50" name="DirectStore" signature="DirectStore(c)">
              <variable ilk="argument" name="c" />
              <variable citdl="DirectStore" name="this" />
            </scope>
          </scope>
          <scope classrefs="Ext.util.Observable" ilk="class" line="43" lineend="240" name="DataProxy">
            <scope attributes="__ctor__" doc="Abstract base class for implementations which provide retrieval of unformatted data objects.&#xA;This class is intended to be extended and should not be created directly. For existing implementations,&#xA;see {@link Ext.data.DirectProxy}, {@link Ext.data.HttpProxy}, {@link Ext.data.ScriptTagProxy} and&#xA;{@link Ext.data.MemoryProxy}.&#xA;DataProxy implementations are usually used in conjunction with an implementation of {@link Ext.data.DataReader}&#xA;(of the appropriate type which knows how to parse the data object) to provide a block of&#xA;{@link Ext.data.Records} to an {@link Ext.data.Store}.&#xA;The parameter to a DataProxy constructor may be an {@link Ext.data.Connection} or can also be the&#xA;config object to an {@link Ext.data.Connection}.&#xA;Custom implementations must implement either the doRequest method (preferred) or the&#xA;load method (deprecated). See&#xA;{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#doRequest doRequest} or&#xA;{@link Ext.data.HttpProxy}.{@link Ext.data.HttpProxy#load load} for additional details.&#xA;Example 1&#xA;&#xA;proxy: new Ext.data.ScriptTagProxy({&#xA;{@link Ext.data.Connection#url url}: &apos;http://extjs.com/forum/topics-remote.php&apos;&#xA;}),&#xA;&#xA;Example 2&#xA;&#xA;proxy : new Ext.data.HttpProxy({&#xA;{@link Ext.data.Connection#method method}: &apos;GET&apos;,&#xA;{@link Ext.data.HttpProxy#prettyUrls prettyUrls}: false,&#xA;{@link Ext.data.Connection#url url}: &apos;local/default.php&apos;, // see options parameter for {@link Ext.Ajax#request}&#xA;{@link #api}: {&#xA;// all actions except the following will use above url&#xA;create  : &apos;local/new.php&apos;,&#xA;update  : &apos;local/update.php&apos;&#xA;})," ilk="function" line="43" lineend="240" name="DataProxy" signature="DataProxy(conn)">
              <variable citdl="conn" ilk="argument" name="conn" />
              <variable citdl="DataProxy" name="this" />
            </scope>
            <variable citdl="conn.api" line="52" name="api" />
            <variable citdl="conn.url" line="53" name="url" />
            <variable citdl="conn.listeners" line="55" name="listeners" />
            <variable citdl="conn.prettyUrls" line="58" name="prettyUrls" />
            <variable citdl="Boolean" doc="Defaults to false.  Set to true to operate in a RESTful manner.&#xA;Note: this parameter will automatically be set to true if the&#xA;{@link Ext.data.Store} it is plugged into is set to restful: true. If the&#xA;Store is RESTful, there is no need to set this option on the proxy.&#xA;RESTful implementations enable the serverside framework to automatically route&#xA;actions sent to one url based upon the HTTP method, for example:&#xA;&#xA;store: new Ext.data.Store({&#xA;restful: true,&#xA;proxy: new Ext.data.HttpProxy({url:&apos;/users&apos;}); // all requests sent to /users&#xA;...&#xA;&#xA;There is no {@link #api} specified in the configuration of the proxy,&#xA;all requests will be marshalled to a single RESTful url (/users) so the serverside&#xA;framework can inspect the HTTP Method and act accordingly:&#xA;&#xA;Method   url        action&#xA;POST     /users     create&#xA;GET      /users     read&#xA;PUT      /users/23  update&#xA;DESTROY  /users/23  delete" line="269" name="restful" />
            <scope doc="Redefines the Proxy&apos;s API or a single action of an API. Can be called with two method signatures.&#xA;If called with an object as the only parameter, the object should redefine the entire API, e.g.:&#xA;proxy.setApi({&#xA;read    : &apos;/users/read&apos;,&#xA;create  : &apos;/users/create&apos;,&#xA;update  : &apos;/users/update&apos;,&#xA;destroy : &apos;/users/destroy&apos;&#xA;});&#xA;If called with two parameters, the first parameter should be a string specifying the API action to&#xA;redefine and the second parameter should be the URL (or function if using DirectProxy) to call for that action, e.g.:&#xA;proxy.setApi(Ext.data.Api.actions.read, &apos;/users/new_load_url&apos;);" ilk="function" line="288" lineend="305" name="setApi" signature="setApi()">
              <variable attributes="__local__ private" citdl="Ext.data.Api.isValid()" line="290" name="valid" />
            </scope>
            <scope doc="Returns true if the specified action is defined as a unique action in the api-config.&#xA;request.  If all API-actions are routed to unique urls, the xaction parameter is unecessary.  However, if no api is defined&#xA;and all Proxy actions are routed to DataProxy#url, the server-side will require the xaction parameter to perform a switch to&#xA;the corresponding code for CRUD action." ilk="function" line="315" lineend="317" name="isApiAction" returns="Boolean" signature="isApiAction(action)">
              <variable ilk="argument" name="action" />
            </scope>
            <scope doc="All proxy actions are executed through this method.  Automatically fires the &quot;before&quot; + action event" ilk="function" line="329" lineend="340" name="request" signature="request(action, rs, params, reader, callback, scope, options)">
              <variable citdl="String" doc="Name of the action" ilk="argument" name="action" />
              <variable citdl="Array" doc="Will be null when action is &apos;load&apos;" ilk="argument" name="rs" />
              <variable citdl="Object" ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" ilk="argument" name="reader" />
              <variable citdl="Function" ilk="argument" name="callback" />
              <variable citdl="Object" doc="Scope with which to call the callback (defaults to the Proxy object)" ilk="argument" name="scope" />
              <variable citdl="Object" doc="Any options specified for the action (e.g. see {@link Ext.data.Store#load}." ilk="argument" name="options" />
            </scope>
            <variable attributes="deprecated deprecated" doc="DEPRECATED: Deprecated load method using old method signature. See {@doRequest} for preferred method." line="352" name="load" />
            <scope doc="(e.g.: {@link Ext.data.HttpProxy#doRequest HttpProxy.doRequest},&#xA;{@link Ext.data.DirectProxy#doRequest DirectProxy.doRequest})." ilk="function" line="359" lineend="364" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, options)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="reader" />
              <variable ilk="argument" name="callback" />
              <variable ilk="argument" name="scope" />
              <variable ilk="argument" name="options" />
            </scope>
            <scope attributes="private" doc="PRIVATE: buildUrl&#xA;Sets the appropriate url based upon the action being executed.  If restful is true, and only a single record is being acted upon,&#xA;url will be built Rails-style, as in &quot;/controller/action/32&quot;.  restful will aply iff the supplied record is an&#xA;instance of Ext.data.Record rather than an Array of them." ilk="function" line="376" lineend="397" name="buildUrl" returns="String" signature="buildUrl(action, record)">
              <variable citdl="String" doc="The api action being executed [read|create|update|destroy]" ilk="argument" name="action" />
              <variable citdl="record" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="m[1]" line="378" name="url" />
              <variable attributes="__local__ private" citdl="m[2]" line="383" name="format" />
              <variable attributes="__local__ private" citdl="url.match()" line="384" name="m" />
            </scope>
            <scope doc="Destroys the proxy by purging any event listeners and cancelling any active requests." ilk="function" line="402" lineend="404" name="destroy" signature="destroy()" />
            <variable citdl="Ext.extend()" doc="DataProxy Error extension.&#xA;constructor" line="421" name="Error" />
          </scope>
          <variable citdl="Ext.extend()" doc="DataWriter extension for writing an array or single {@link Ext.data.Record} object(s) in preparation for executing a remote CRUD action via XML." line="45" name="XmlWriter" />
          <scope classrefs="Ext.data.DataProxy" ilk="class" line="46" lineend="72" name="ScriptTagProxy">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: An implementation of Ext.data.DataProxy that reads a data object from a URL which may be in a domain&#xA;other than the originating domain of the running page.&#xA;&#xA;Note that if you are retrieving data from a page that is in a domain that is NOT the same as the originating domain&#xA;of the running page, you must use this class, rather than HttpProxy.&#xA;&#xA;The content passed back from a server resource requested by a ScriptTagProxy must be executable JavaScript&#xA;source code because it is used as the source inside a &amp;lt;script&gt; tag.&#xA;&#xA;In order for the browser to process the returned data, the server must wrap the data object&#xA;with a call to a callback function, the name of which is passed as a parameter by the ScriptTagProxy.&#xA;Below is a Java example for a servlet which returns data for either a ScriptTagProxy, or an HttpProxy&#xA;depending on whether the callback name was passed:&#xA;&#xA;&#xA;boolean scriptTag = false;&#xA;String cb = request.getParameter(&quot;callback&quot;);&#xA;if (cb != null) {&#xA;scriptTag = true;&#xA;response.setContentType(&quot;text/javascript&quot;);&#xA;} else {&#xA;response.setContentType(&quot;application/x-json&quot;);&#xA;Writer out = response.getWriter();&#xA;if (scriptTag) {&#xA;out.write(cb + &quot;(&quot;);&#xA;out.print(dataBlock.toJsonString());&#xA;if (scriptTag) {&#xA;out.write(&quot;);&quot;);" ilk="function" line="46" lineend="72" name="ScriptTagProxy" signature="ScriptTagProxy(config)">
              <variable citdl="Object" doc="A configuration object." ilk="argument" name="config" />
              <variable citdl="ScriptTagProxy" name="this" />
            </scope>
            <variable citdl="document.getElementsByTagName()[0]" line="51" name="head" />
            <variable citdl="Number" line="74" name="TRANS_ID" />
            <variable citdl="Number" line="83" name="timeout" />
            <variable citdl="String" doc="the server the name of the callback function set up by the load call to process the returned data object.&#xA;Defaults to &quot;callback&quot;.The server-side processing must read this parameter value, and generate&#xA;javascript output which calls this named function passing the data object as its only parameter." line="90" name="callbackParam" />
            <variable citdl="Boolean" doc="name to the request." line="95" name="nocache" />
            <scope doc="HttpProxy implementation of DataProxy#doRequest" ilk="function" line="114" lineend="154" name="doRequest" signature="doRequest(action, rs, params, reader, callback, scope, arg)">
              <variable citdl="String" ilk="argument" name="action" />
              <variable citdl="Array" doc="If action is read, rs will be null" ilk="argument" name="rs" />
              <variable citdl="Object" doc="An object containing properties which are to be used as HTTP parameters&#xA;for the request to the remote server." ilk="argument" name="params" />
              <variable citdl="Ext.data.DataReader" doc="The Reader object which converts the data&#xA;object into a block of Ext.data.Records." ilk="argument" name="reader" />
              <variable citdl="Function" doc="The function into which to pass the block of Ext.data.Records.&#xA;The function must be passed&#xA;The Record block object&#xA;The &quot;arg&quot; argument from the load function&#xA;A boolean success indicator" ilk="argument" name="callback" />
              <variable citdl="Object" doc="The scope in which to call the callback" ilk="argument" name="scope" />
              <variable citdl="Object" doc="An optional argument which is passed to the callback as its second parameter." ilk="argument" name="arg" />
              <variable attributes="__local__ private" citdl="Ext.urlEncode()" line="115" name="p" />
              <variable attributes="__local__ private" citdl="this.buildUrl()" line="117" name="url" />
              <variable attributes="__local__ private" line="126" name="transId" />
              <variable attributes="__local__ private" citdl="Object" line="127" lineend="138" name="trans">
                <variable citdl="transId" line="128" name="id" />
                <variable citdl="action" line="129" name="action" />
                <variable citdl="String" line="130" name="cb" />
                <variable citdl="String" line="131" name="scriptId" />
                <variable citdl="params" line="132" name="params" />
                <variable citdl="arg" line="133" name="arg" />
                <variable citdl="url" line="134" name="url" />
                <variable citdl="callback" line="135" name="callback" />
                <variable citdl="scope" line="136" name="scope" />
                <variable citdl="reader" line="137" name="reader" />
                <variable citdl="this.handleFailure.defer()" line="145" name="timeoutId" />
              </variable>
              <variable attributes="__local__ private" citdl="document.createElement()" line="147" name="script" />
            </scope>
            <variable citdl="trans" line="153" name="trans" />
            <scope ilk="function" line="157" lineend="168" name="createCallback" signature="createCallback(action, rs, trans)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="trans" />
              <variable attributes="__local__ private" citdl="this" line="158" name="self" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for read actions" ilk="function" line="176" lineend="197" name="onRead" signature="onRead(action, trans, res)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable attributes="__local__ private" citdl="trans.reader.readRecords()" line="177" name="result" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Callback for write actions" ilk="function" line="205" lineend="222" name="onWrite" signature="onWrite(action, trans, res, rs)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" doc="The request transaction object" ilk="argument" name="trans" />
              <variable citdl="Object" doc="The server response" ilk="argument" name="res" />
              <variable ilk="argument" name="rs" />
              <variable attributes="__local__ private" citdl="trans.reader" line="206" name="reader" />
            </scope>
            <scope ilk="function" line="225" lineend="227" name="isLoading" returns="this.trans" signature="isLoading()" />
            <scope doc="Abort the current server request." ilk="function" line="232" lineend="236" name="abort" signature="abort()" />
            <scope ilk="function" line="239" lineend="256" name="destroyTrans" signature="destroyTrans(trans, isLoaded)">
              <variable ilk="argument" name="trans" />
              <variable ilk="argument" name="isLoaded" />
              <scope attributes="__local__ private" ilk="function" line="249" lineend="254" name="window" signature="window()" />
              <variable line="250" name="window" />
            </scope>
            <scope ilk="function" line="259" lineend="272" name="handleFailure" signature="handleFailure(trans)">
              <variable ilk="argument" name="trans" />
            </scope>
            <scope ilk="function" line="275" lineend="278" name="destroy" signature="destroy()" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Small helper class to make creating {@link Ext.data.Store}s from JSON data easier.&#xA;A JsonStore will be automatically configured with a {@link Ext.data.JsonReader}.&#xA;A store configuration would be something like:&#xA;var store = new Ext.data.JsonStore({&#xA;// store configs&#xA;autoDestroy: true,&#xA;url: &apos;get-images.php&apos;,&#xA;storeId: &apos;myStore&apos;,&#xA;// reader configs&#xA;root: &apos;images&apos;,&#xA;idProperty: &apos;name&apos;,&#xA;fields: [&apos;name&apos;, &apos;url&apos;, {name:&apos;size&apos;, type: &apos;float&apos;}, {name:&apos;lastmod&apos;, type:&apos;date&apos;}]&#xA;});&#xA;&#xA;This store is configured to consume a returned object of the form:&#xA;images: [&#xA;{name: &apos;Image one&apos;, url:&apos;/GetImage.php?id=1&apos;, size:46.5, lastmod: new Date(2007, 10, 29)},&#xA;{name: &apos;Image Two&apos;, url:&apos;/GetImage.php?id=2&apos;, size:43.2, lastmod: new Date(2007, 10, 30)}&#xA;&#xA;An object literal of this form could also be used as the {@link #data} config option.&#xA;*Note: Although not listed here, this class accepts all of the configuration options of&#xA;{@link Ext.data.JsonReader JsonReader}." line="48" name="JsonStore" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="49" lineend="83" name="Connection">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The class encapsulates a connection to the page&apos;s originating domain, allowing requests to be made&#xA;either to a configured URL, or to a URL specified at request time.&#xA;Requests made by this class are asynchronous, and will return immediately. No data from&#xA;the server will be available to the statement immediately following the {@link #request} call.&#xA;To process returned data, use a&#xA;success callback&#xA;in the request options object,&#xA;or an {@link #requestcomplete event listener}.&#xA;File UploadsFile uploads are not performed using normal &quot;Ajax&quot; techniques, that&#xA;is they are not performed using XMLHttpRequests. Instead the form is submitted in the standard&#xA;manner with the DOM &amp;lt;form&gt; element temporarily modified to have its&#xA;target set to refer&#xA;to a dynamically generated, hidden &amp;lt;iframe&gt; which is inserted into the document&#xA;but removed after the return data has been gathered.&#xA;The server response is parsed by the browser to create the document for the IFRAME. If the&#xA;server is using JSON to send the return object, then the&#xA;Content-Type header&#xA;must be set to &quot;text/html&quot; in order to tell the browser to insert the text unchanged into the document body.&#xA;Characters which are significant to an HTML parser must be sent as HTML entities, so encode&#xA;&quot;&amp;lt;&quot; as &quot;&amp;amp;lt;&quot;, &quot;&amp;amp;&quot; as &quot;&amp;amp;amp;&quot; etc.&#xA;The response text is retrieved from the document, and a fake XMLHttpRequest object&#xA;is created containing a responseText property in order to conform to the&#xA;requirements of event handlers and callbacks.&#xA;Be aware that file upload packets are sent with the content type multipart/form&#xA;and some server technologies (notably JEE) may require some custom processing in order to&#xA;retrieve parameter names and parameter values from the packet content." ilk="function" line="49" lineend="83" name="Connection" signature="Connection(config)">
              <variable citdl="Object" doc="a configuration object." ilk="argument" name="config" />
              <variable citdl="Connection" name="this" />
            </scope>
            <variable citdl="Number" doc="The url config may be a function which returns the URL to use for the Ajax request. The scope&#xA;(this reference) of the function is the scope option passed to the {@link #request} method." line="237" name="timeout" />
            <variable citdl="Boolean" line="242" name="autoAbort" />
            <variable citdl="Boolean" line="248" name="disableCaching" />
            <variable citdl="String" doc="through a cache buster. Defaults to &apos;_dc&apos;" line="255" name="disableCachingParam" />
            <scope doc="Sends an HTTP request to a remote server.&#xA;Important: Ajax server requests are asynchronous, and this call will&#xA;return before the response has been received. Process any returned data&#xA;in a callback function.&#xA;&#xA;Ext.Ajax.request({&#xA;url: &apos;ajax_demo/sample.json&apos;,&#xA;success: function(response, opts) {&#xA;var obj = Ext.decode(response.responseText);&#xA;console.dir(obj);&#xA;failure: function(response, opts) {&#xA;console.log(&apos;server-side failure with status code &apos; + response.status);&#xA;});&#xA;&#xA;To execute a callback function in the correct scope, use the scope option." ilk="function" line="354" lineend="422" name="request" returns="Number" signature="request(o)">
              <variable ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="this" line="355" name="me" />
              <scope attributes="__local__ private" ilk="function" line="364" lineend="366" name="(anonymous)" signature="(anonymous)()" />
              <variable attributes="__local__ private" citdl="o.url" line="372" name="url" />
              <variable attributes="__local__ private" citdl="Object" line="372" lineend="377" name="cb">
                <variable citdl="handleResponse" line="372" name="success" />
                <variable citdl="handleFailure" line="373" name="failure" />
                <variable citdl="me" line="374" name="scope" />
                <variable citdl="Object" line="375" lineend="375" name="argument">
                  <variable citdl="o" line="375" name="options" />
                </variable>
                <variable citdl="o.timeout" line="376" name="timeout" />
              </variable>
              <variable attributes="__local__ private" citdl="o.params" line="372" name="p" />
              <variable attributes="__local__ private" citdl="o.method" line="372" name="method" />
              <variable attributes="__local__ private" line="378" name="form" />
              <variable attributes="__local__ private" citdl="Ext.lib.Ajax.serializeForm()" line="379" name="serForm" />
              <variable attributes="__local__ private" citdl="o.disableCachingParam" line="404" name="dcp" />
            </scope>
            <scope doc="Determine whether this object has a request outstanding." ilk="function" line="429" lineend="431" name="isLoading" returns="Boolean" signature="isLoading(transId)">
              <variable ilk="argument" name="transId" />
            </scope>
            <scope doc="Aborts any outstanding request." ilk="function" line="437" lineend="441" name="abort" signature="abort(transId)">
              <variable ilk="argument" name="transId" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="52" lineend="201" name="DataWriter">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Ext.data.DataWriter facilitates create, update, and destroy actions between&#xA;an Ext.data.Store and a server-side framework. A Writer enabled Store will&#xA;automatically manage the Ajax requests to perform CRUD actions on a Store.&#xA;Ext.data.DataWriter is an abstract base class which is intended to be extended&#xA;and should not be created directly. For existing implementations, see&#xA;{@link Ext.data.JsonWriter}.&#xA;Creating a writer is simple:&#xA;&#xA;var writer = new Ext.data.JsonWriter();&#xA;&#xA;The proxy for a writer enabled store can be configured with a simple url:&#xA;&#xA;// Create a standard HttpProxy instance.&#xA;var proxy = new Ext.data.HttpProxy({&#xA;url: &apos;app.php/users&apos;&#xA;});&#xA;&#xA;For finer grained control, the proxy may also be configured with an api:&#xA;&#xA;// Use the api specification&#xA;var proxy = new Ext.data.HttpProxy({&#xA;api: {&#xA;read    : &apos;app.php/users/read&apos;,&#xA;create  : &apos;app.php/users/create&apos;,&#xA;update  : &apos;app.php/users/update&apos;,&#xA;destroy : &apos;app.php/users/destroy&apos;&#xA;});&#xA;&#xA;Creating a Writer enabled store:&#xA;&#xA;var store = new Ext.data.Store({&#xA;proxy: proxy,&#xA;reader: reader,&#xA;writer: writer&#xA;});" ilk="function" line="52" lineend="59" name="DataWriter" signature="DataWriter(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="DataWriter" name="this" />
            </scope>
            <variable citdl="Boolean" doc="false by default.  Set true to have DataWriter return ALL fields of a modified&#xA;record -- not just those that changed.&#xA;false to have DataWriter only request modified fields from a record." line="69" name="writeAllFields" />
            <variable citdl="Boolean" doc="false by default.  Set true to have the DataWriter always write HTTP params as a list,&#xA;even when acting upon a single record." line="75" name="listful" />
            <scope ilk="function" line="84" lineend="86" name="write" signature="write(action, params, rs)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="params" />
              <variable ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="abstract method meant to be overridden by all DataWriter extensions.  It&apos;s the extension&apos;s job to apply the &quot;data&quot; to the &quot;params&quot;.&#xA;The data-object provided to render is populated with data according to the meta-info defined in the user&apos;s DataReader config," line="96" name="render" />
            <scope attributes="private" doc="PRIVATE: update" ilk="function" line="104" lineend="121" name="update" returns="params" signature="update(rs)">
              <variable citdl="Array" doc="Record(s) to write" ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="105" lineend="105" name="params" />
              <variable attributes="__local__ private" citdl="Array" line="108" name="data" />
              <variable attributes="__local__ private" citdl="Array" line="108" name="ids" />
              <scope attributes="__local__ private" ilk="function" line="109" lineend="112" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="(e.g.: {@link Ext.data.JsonWriter#saveRecord JsonWriter.saveRecord}" line="127" name="updateRecord" />
            <scope attributes="private" doc="PRIVATE: create" ilk="function" line="135" lineend="148" name="create" returns="params" signature="create(rs)">
              <variable citdl="Array" doc="Record(s) to write" ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="136" lineend="136" name="params" />
              <variable attributes="__local__ private" citdl="Array" line="138" name="data" />
              <scope attributes="__local__ private" ilk="function" line="139" lineend="141" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="(e.g.: {@link Ext.data.JsonWriter#createRecord JsonWriter.createRecord})" line="154" name="createRecord" />
            <scope attributes="private" doc="PRIVATE: destroy" ilk="function" line="162" lineend="175" name="destroy" returns="params" signature="destroy(rs)">
              <variable citdl="Array" doc="Record(s) to write" ilk="argument" name="rs" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="Object" line="163" lineend="163" name="params" />
              <variable attributes="__local__ private" citdl="Array" line="166" name="data" />
              <variable attributes="__local__ private" citdl="Array" line="166" name="ids" />
              <scope attributes="__local__ private" ilk="function" line="167" lineend="169" name="(anonymous)" signature="(anonymous)()" />
            </scope>
            <variable citdl="Ext.emptyFn" doc="(e.g.: {@link Ext.data.JsonWriter#destroyRecord JsonWriter.destroyRecord})" line="181" name="destroyRecord" />
            <scope attributes="private" doc="PRIVATE: Converts a Record to a hash" ilk="function" line="188" lineend="200" name="toHash" returns="data" signature="toHash(rec)">
              <variable ilk="argument" name="rec" />
              <variable citdl="DataWriter" name="this" />
              <variable attributes="__local__ private" citdl="rec.fields.map" line="190" name="map" />
              <variable attributes="__local__ private" citdl="Object" line="190" lineend="190" name="data" />
              <variable attributes="__local__ private" line="191" name="raw" />
              <variable attributes="__local__ private" line="192" name="m" />
            </scope>
          </scope>
          <scope classrefs="Ext.data.DataReader" ilk="class" line="57" lineend="60" name="XmlReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from an XML document&#xA;based on mappings in a provided {@link Ext.data.Record} constructor.&#xA;Note: that in order for the browser to parse a returned XML document, the Content-Type&#xA;header in the HTTP response must be set to &quot;text/xml&quot; or &quot;application/xml&quot;.&#xA;Example code:&#xA;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: &apos;name&apos;},     // &quot;mapping&quot; property not needed if it is the same as &quot;name&quot;&#xA;{name: &apos;occupation&apos;}                 // This field will use &quot;occupation&quot; as the mapping.&#xA;]);&#xA;var myReader = new Ext.data.XmlReader({&#xA;totalRecords: &quot;results&quot;, // The element which contains the total dataset size (optional)&#xA;record: &quot;row&quot;,           // The repeated element which contains row information&#xA;id: &quot;id&quot;                 // The element within the row that provides an ID for the record (optional)&#xA;}, Employee);&#xA;&#xA;This would consume an XML file like this:&#xA;&#xA;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xA;&amp;lt;dataset&gt;&#xA;&amp;lt;results&gt;2&amp;lt;/results&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;1&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Bill&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Gardener&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;row&gt;&#xA;&amp;lt;id&gt;2&amp;lt;/id&gt;&#xA;&amp;lt;name&gt;Ben&amp;lt;/name&gt;&#xA;&amp;lt;occupation&gt;Horticulturalist&amp;lt;/occupation&gt;&#xA;&amp;lt;/row&gt;&#xA;&amp;lt;/dataset&gt;" ilk="function" line="57" lineend="60" name="XmlReader" signature="XmlReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options" ilk="argument" name="meta" />
              <variable citdl="Object" doc="Either an Array of field definition objects as passed to&#xA;{@link Ext.data.Record#create}, or a Record constructor object created using {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="XmlReader" name="this" />
            </scope>
            <scope doc="This method is only used by a DataProxy which has retrieved data from a remote server." ilk="function" line="69" lineend="75" name="read" returns="Object" signature="read(response)">
              <variable citdl="Object" doc="The XHR object which contains the parsed XML document.  The response is expected&#xA;to contain a property called responseXML which refers to an XML document object." ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.responseXML" line="70" name="doc" />
            </scope>
            <variable citdl="String" line="72" name="message" />
            <scope doc="Create a data block containing Ext.data.Records from an XML document." ilk="function" line="83" lineend="124" name="readRecords" returns="Object" signature="readRecords(doc)">
              <variable citdl="Object" doc="A parsed XML document." ilk="argument" name="doc" />
              <variable attributes="__local__ private" citdl="doc.documentElement" line="89" name="root" />
              <variable attributes="__local__ private" citdl="Ext.DomQuery" line="90" name="q" />
              <variable attributes="__local__ private" citdl="this.recordType" line="91" name="recordType" />
              <variable attributes="__local__ private" citdl="recordType.prototype.fields" line="91" name="fields" />
              <variable attributes="__local__ private" citdl="this.meta.idPath" line="92" name="sid" />
              <variable attributes="__local__ private" citdl="Number" line="93" name="totalRecords" />
              <variable attributes="__local__ private" citdl="Boolean" line="93" name="success" />
              <variable attributes="__local__ private" citdl="q.selectValue()" line="99" name="sv" />
              <variable attributes="__local__ private" citdl="Array" line="102" name="records" />
              <variable attributes="__local__ private" citdl="q.select()" line="103" name="ns" />
              <variable attributes="__local__ private" citdl="ns[i]" line="105" name="n" />
              <variable attributes="__local__ private" citdl="Object" line="106" lineend="106" name="values" />
              <variable attributes="__local__ private" citdl="sid" line="107" name="id" />
              <variable attributes="__local__ private" citdl="fields.items[j]" line="109" name="f" />
              <variable attributes="__local__ private" citdl="q.selectValue()" line="110" name="v" />
              <variable attributes="__local__ private" citdl="recordType" line="114" name="record" />
            </scope>
            <variable citdl="XMLDocument" doc="After any data loads/reads, the raw XML Document is available for further custom processing." line="88" name="xmlData" />
            <variable citdl="Ext.emptyFn" line="127" name="readResponse" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Formerly known as &quot;SimpleStore&quot;.&#xA;Small helper class to make creating {@link Ext.data.Store}s from Array data easier.&#xA;An ArrayStore will be automatically configured with a {@link Ext.data.ArrayReader}.&#xA;A store configuration would be something like:&#xA;var store = new Ext.data.ArrayStore({&#xA;// store configs&#xA;autoDestroy: true,&#xA;storeId: &apos;myStore&apos;,&#xA;// reader configs&#xA;idIndex: 0,&#xA;fields: [&#xA;&apos;company&apos;,&#xA;{name: &apos;price&apos;, type: &apos;float&apos;},&#xA;{name: &apos;change&apos;, type: &apos;float&apos;},&#xA;{name: &apos;pctChange&apos;, type: &apos;float&apos;},&#xA;{name: &apos;lastChange&apos;, type: &apos;date&apos;, dateFormat: &apos;n/j h:ia&apos;}&#xA;});&#xA;&#xA;This store is configured to consume a returned object of the form:&#xA;var myData = [&#xA;[&apos;3m Co&apos;,71.72,0.02,0.03,&apos;9/1 12:00am&apos;],&#xA;[&apos;Alcoa Inc&apos;,29.01,0.42,1.47,&apos;9/1 12:00am&apos;],&#xA;[&apos;Boeing Co.&apos;,75.43,0.53,0.71,&apos;9/1 12:00am&apos;],&#xA;[&apos;Hewlett-Packard Co.&apos;,36.53,-0.03,-0.08,&apos;9/1 12:00am&apos;],&#xA;[&apos;Wal-Mart Stores, Inc.&apos;,45.45,0.73,1.63,&apos;9/1 12:00am&apos;]&#xA;&#xA;An object literal of this form could also be used as the {@link #data} config option.&#xA;*Note: Although not listed here, this class accepts all of the configuration options of&#xA;{@link Ext.data.ArrayReader ArrayReader}." line="65" name="ArrayStore" />
          <variable citdl="Ext.data.ArrayStore" line="69" name="SimpleStore" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Small helper class to make creating {@link Ext.data.Store}s from XML data easier.&#xA;A XmlStore will be automatically configured with a {@link Ext.data.XmlReader}.&#xA;A store configuration would be something like:&#xA;var store = new Ext.data.XmlStore({&#xA;// store configs&#xA;autoDestroy: true,&#xA;storeId: &apos;myStore&apos;,&#xA;url: &apos;sheldon.xml&apos;, // automatically configures a HttpProxy&#xA;// reader configs&#xA;record: &apos;Item&apos;, // records will have an &quot;Item&quot; tag&#xA;idPath: &apos;ASIN&apos;,&#xA;totalRecords: &apos;@TotalResults&apos;&#xA;fields: [&#xA;// set up the fields mapping into the xml doc&#xA;// The first needs mapping, the others are very basic&#xA;{name: &apos;Author&apos;, mapping: &apos;ItemAttributes &gt; Author&apos;},&#xA;&apos;Title&apos;, &apos;Manufacturer&apos;, &apos;ProductGroup&apos;&#xA;});&#xA;&#xA;This store is configured to consume a returned object of the form:&#xA;&amp;#60?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xA;&amp;#60ItemSearchResponse xmlns=&quot;http://webservices.amazon.com/AWSECommerceService/2009-05-15&quot;&gt;&#xA;&amp;#60Items&gt;&#xA;&amp;#60Request&gt;&#xA;&amp;#60IsValid&gt;True&amp;#60/IsValid&gt;&#xA;&amp;#60ItemSearchRequest&gt;&#xA;&amp;#60Author&gt;Sidney Sheldon&amp;#60/Author&gt;&#xA;&amp;#60SearchIndex&gt;Books&amp;#60/SearchIndex&gt;&#xA;&amp;#60/ItemSearchRequest&gt;&#xA;&amp;#60/Request&gt;&#xA;&amp;#60TotalResults&gt;203&amp;#60/TotalResults&gt;&#xA;&amp;#60TotalPages&gt;21&amp;#60/TotalPages&gt;&#xA;&amp;#60Item&gt;&#xA;&amp;#60ASIN&gt;0446355453&amp;#60/ASIN&gt;&#xA;&amp;#60DetailPageURL&gt;&#xA;http://www.amazon.com/&#xA;&amp;#60/DetailPageURL&gt;&#xA;&amp;#60ItemAttributes&gt;&#xA;&amp;#60Author&gt;Sidney Sheldon&amp;#60/Author&gt;&#xA;&amp;#60Manufacturer&gt;Warner Books&amp;#60/Manufacturer&gt;&#xA;&amp;#60ProductGroup&gt;Book&amp;#60/ProductGroup&gt;&#xA;&amp;#60Title&gt;Master of the Game&amp;#60/Title&gt;&#xA;&amp;#60/ItemAttributes&gt;&#xA;&amp;#60/Item&gt;&#xA;&amp;#60/Items&gt;&#xA;&amp;#60/ItemSearchResponse&gt;&#xA;&#xA;An object literal of this form could also be used as the {@link #data} config option.&#xA;Note: Although not listed here, this class accepts all of the configuration options of&#xA;{@link Ext.data.XmlReader XmlReader}." line="74" name="XmlStore" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="76" lineend="348" name="Store">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: The Store class encapsulates a client side cache of {@link Ext.data.Record Record}&#xA;objects which provide input data for Components such as the {@link Ext.grid.GridPanel GridPanel},&#xA;the {@link Ext.form.ComboBox ComboBox}, or the {@link Ext.DataView DataView}.&#xA;Retrieving Data&#xA;A Store object may access a data object using:&#xA;{@link #proxy configured implementation} of {@link Ext.data.DataProxy DataProxy}&#xA;{@link #data} to automatically pass in data&#xA;{@link #loadData} to manually pass in data&#xA;&#xA;Reading Data&#xA;A Store object has no inherent knowledge of the format of the data object (it could be&#xA;an Array, XML, or JSON). A Store object uses an appropriate {@link #reader configured implementation}&#xA;of a {@link Ext.data.DataReader DataReader} to create {@link Ext.data.Record Record} instances from the data&#xA;object.&#xA;Store Types&#xA;There are several implementations of Store available which are customized for use with&#xA;a specific DataReader implementation.  Here is an example using an ArrayStore which implicitly&#xA;creates a reader commensurate to an Array data object.&#xA;&#xA;var myStore = new Ext.data.ArrayStore({&#xA;fields: [&apos;fullname&apos;, &apos;first&apos;],&#xA;idIndex: 0 // id for each record will be the first element&#xA;});&#xA;&#xA;For custom implementations create a basic {@link Ext.data.Store} configured as needed:&#xA;&#xA;// create a {@link Ext.data.Record Record} constructor:&#xA;var rt = Ext.data.Record.create([&#xA;{name: &apos;fullname&apos;},&#xA;{name: &apos;first&apos;}&#xA;]);&#xA;var myStore = new Ext.data.Store({&#xA;// explicitly create reader&#xA;reader: new Ext.data.ArrayReader(&#xA;idIndex: 0  // id for each record will be the first element&#xA;rt // recordType&#xA;});&#xA;&#xA;Load some data into store (note the data object is an array which corresponds to the reader):&#xA;&#xA;var myData = [&#xA;[1, &apos;Fred Flintstone&apos;, &apos;Fred&apos;],  // note that id for the record is the first element&#xA;[2, &apos;Barney Rubble&apos;, &apos;Barney&apos;]&#xA;myStore.loadData(myData);&#xA;&#xA;Records are cached and made available through accessor functions.  An example of adding&#xA;a record to the store:&#xA;&#xA;var defaultData = {&#xA;fullname: &apos;Full Name&apos;,&#xA;first: &apos;First Name&apos;&#xA;var recId = 100; // provide unique id for the record&#xA;var r = new myStore.recordType(defaultData, ++recId); // create new record&#xA;myStore.{@link #insert}(0, r); // insert a new record into the store (also see {@link #add})" ilk="function" line="76" lineend="348" name="Store" signature="Store(config)">
              <variable citdl="Object" doc="A config object containing the objects needed for the Store to access data,&#xA;and read the data into Records." ilk="argument" name="config" />
              <variable citdl="Store" name="this" />
            </scope>
            <variable citdl="Ext.util.MixedCollection" line="77" name="data" />
            <variable citdl="Object" doc="See the {@link #baseParams corresponding configuration option}&#xA;for a description of this property.&#xA;To modify this property see {@link #setBaseParam}." line="87" lineend="87" name="baseParams" />
            <variable citdl="Array" line="90" name="removed" />
            <variable citdl="config.data" line="93" name="inlineData" />
            <variable citdl="Ext.data.HttpProxy" line="102" name="proxy" />
            <variable citdl="Boolean" line="107" name="batch" />
            <variable citdl="this.reader.recordType" line="113" name="recordType" />
            <variable citdl="Ext.util.MixedCollection" doc="A {@link Ext.util.MixedCollection MixedCollection} containing the defined {@link Ext.data.Field Field}s&#xA;for the {@link Ext.data.Record Records} stored in this Store. Read-only." line="196" name="fields" />
            <variable citdl="Array" line="198" name="modified" />
            <variable citdl="Object" line="324" lineend="324" name="sortToggle" />
            <variable citdl="this.id" line="334" name="storeId" />
            <variable doc="Note: if a (deprecated) {@link #id} is specified it will supersede the storeId&#xA;assignment.&#xA;&#xA;var writer = new {@link Ext.data.JsonWriter}({&#xA;encode: true,&#xA;writeAllFields: true // write all fields, not just those that changed&#xA;});&#xA;// Typical Store collecting the Proxy, Reader and Writer together.&#xA;var store = new Ext.data.Store({&#xA;storeId: &apos;user&apos;,&#xA;root: &apos;records&apos;,&#xA;proxy: proxy,&#xA;reader: reader,&#xA;writer: writer,     //" line="407" name="writer" />
            <variable citdl="Boolean" doc="An object containing properties which are to be sent as parameters&#xA;for every HTTP request.&#xA;Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.&#xA;Note: baseParams may be superseded by any params&#xA;specified in a {@link #load} request, see {@link #load}&#xA;for more details.&#xA;This property may be modified after creation using the {@link #setBaseParam}&#xA;method.&#xA;sortInfo: {&#xA;field: &apos;fieldName&apos;,&#xA;direction: &apos;ASC&apos; // or &apos;DESC&apos; (case sensitive for local sorting)" line="443" name="remoteSort" />
            <variable citdl="Boolean" doc="to is destroyed (defaults to false).&#xA;Note: this should be set to true when using stores that are bound to only 1 component." line="450" name="autoDestroy" />
            <variable citdl="Boolean" doc="the store is loaded or when a record is removed (defaults to false). See {@link #getModifiedRecords}&#xA;for the accessor method to retrieve the modified records." line="457" name="pruneModifiedRecords" />
            <variable citdl="o" doc="Contains the last options object used as the parameter to the {@link #load} method. See {@link #load}&#xA;for the details of what this may contain. This may be useful for accessing any params which were used&#xA;to load the current Record cache." line="465" name="lastOptions" />
            <variable citdl="Boolean" doc="Defaults to true causing the store to automatically {@link #save} records to&#xA;the server when a record is modified (ie: becomes &apos;dirty&apos;). Specify false to manually call {@link #save}&#xA;to send all modifiedRecords to the server.&#xA;Note: each CRUD action will be sent as a separate request." line="474" name="autoSave" />
            <variable citdl="Boolean" doc="Defaults to false.  Set to true to have the Store and the set&#xA;Proxy operate in a RESTful manner. The store will automatically generate GET, POST,&#xA;PUT and DELETE requests to the server. The HTTP method used for any given CRUD&#xA;action is described in {@link Ext.data.Api#restActions}.  For additional information&#xA;see {@link Ext.data.DataProxy#restful}.&#xA;Note: if {@link #restful}:true batch will&#xA;internally be set to false." line="497" name="restful" />
            <variable doc="An object containing properties which specify the names of the paging and&#xA;sorting parameters passed to remote servers when loading blocks of data. By default, this&#xA;object takes the following form:&#xA;start : &apos;start&apos;,  // The parameter name which specifies the start row&#xA;limit : &apos;limit&apos;,  // The parameter name which specifies number of rows to return&#xA;sort : &apos;sort&apos;,    // The parameter name which specifies the column to sort on&#xA;dir : &apos;dir&apos;       // The parameter name which specifies the sort direction&#xA;The server must produce the requested data block upon receipt of these parameter names.&#xA;If different parameter names are required, this property can be overriden using a configuration&#xA;property.&#xA;A {@link Ext.PagingToolbar PagingToolbar} bound to this Store uses this property to determine&#xA;the parameter names to use in its {@link #load requests}." line="517" name="paramNames" />
            <variable citdl="Object" doc="Provides the default values for the {@link #paramNames} property. To globally modify the parameters&#xA;for all stores, this object should be changed on the store prototype." line="524" lineend="529" name="defaultParamNames">
              <variable citdl="String" line="525" name="start" />
              <variable citdl="String" line="526" name="limit" />
              <variable citdl="String" line="527" name="sort" />
              <variable citdl="String" line="528" name="dir" />
            </variable>
            <scope doc="Destroys the store." ilk="function" line="534" lineend="542" name="destroy" signature="destroy()" />
            <variable citdl="this.writer" line="540" name="reader" />
            <scope doc="Add Records to the Store and fires the {@link #add} event.  To add Records&#xA;to the store from a remote source use {@link #load}({add:true}).&#xA;See also {@link #recordType} and {@link #insert}." ilk="function" line="551" lineend="565" name="add" signature="add(records)">
              <variable citdl="Array" doc="An Array of Ext.data.Record objects&#xA;to add to the cache. See {@link #recordType}." ilk="argument" name="records" />
              <variable attributes="__local__ private" citdl="this.data.length" line="559" name="index" />
            </scope>
            <scope doc="(Local sort only) Inserts the passed Record into the Store at the index where it&#xA;should go based on the current sort information." ilk="function" line="572" lineend="575" name="addSorted" signature="addSorted(record)">
              <variable citdl="Ext.data.Record" ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.findInsertIndex()" line="573" name="index" />
            </scope>
            <scope doc="Remove a Record from the Store and fires the {@link #remove} event." ilk="function" line="581" lineend="593" name="remove" signature="remove(record)">
              <variable citdl="Ext.data.Record" doc="The Ext.data.Record object to remove from the cache." ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.data.indexOf()" line="582" name="index" />
            </scope>
            <scope doc="Remove a Record from the Store at the specified index. Fires the {@link #remove} event." ilk="function" line="599" lineend="601" name="removeAt" signature="removeAt(index)">
              <variable citdl="Number" doc="The index of the record to remove." ilk="argument" name="index" />
            </scope>
            <scope doc="Remove all Records from the Store and fires the {@link #clear} event." ilk="function" line="606" lineend="615" name="removeAll" signature="removeAll()" />
            <scope doc="Inserts Records into the Store at the given index and fires the {@link #add} event.&#xA;See also {@link #add} and {@link #addSorted}." ilk="function" line="623" lineend="630" name="insert" signature="insert(index, records)">
              <variable citdl="Number" doc="The start index at which to insert the passed Records." ilk="argument" name="index" />
              <variable citdl="Array" doc="An Array of Ext.data.Record objects to add to the cache." ilk="argument" name="records" />
            </scope>
            <scope doc="Get the index within the cache of the passed Record." ilk="function" line="637" lineend="639" name="indexOf" returns="Number" signature="indexOf(record)">
              <variable citdl="Ext.data.Record" doc="The Ext.data.Record object to find." ilk="argument" name="record" />
            </scope>
            <scope doc="Get the index within the cache of the Record with the passed id." ilk="function" line="646" lineend="648" name="indexOfId" returns="Number" signature="indexOfId(id)">
              <variable citdl="String" doc="The id of the Record to find." ilk="argument" name="id" />
            </scope>
            <scope doc="Get the Record with the specified id." ilk="function" line="655" lineend="657" name="getById" returns="Ext.data.Record" signature="getById(id)">
              <variable citdl="String" doc="The id of the Record to find." ilk="argument" name="id" />
            </scope>
            <scope doc="Get the Record at the specified index." ilk="function" line="664" lineend="666" name="getAt" returns="Ext.data.Record" signature="getAt(index)">
              <variable citdl="Number" doc="The index of the Record to find." ilk="argument" name="index" />
            </scope>
            <scope doc="Returns a range of Records between specified indices." ilk="function" line="674" lineend="676" name="getRange" returns="Array" signature="getRange(start, end)">
              <variable ilk="argument" name="start" />
              <variable ilk="argument" name="end" />
            </scope>
            <scope ilk="function" line="679" lineend="684" name="storeOptions" signature="storeOptions(o)">
              <variable citdl="Ext.apply()" ilk="argument" name="o" />
            </scope>
            <scope doc="Loads the Record cache from the configured {@link #proxy} using the configured {@link #reader}.&#xA;Notes:&#xA;Important: loading is asynchronous! This call will return before the new data has been&#xA;loaded. To perform any post-processing where information from the load call is required, specify&#xA;the callback function to be called, or use a {@link Ext.util.Observable#listeners a &apos;load&apos; event handler}.&#xA;If using {@link Ext.PagingToolbar remote paging}, the first load call must specify the start and limit&#xA;properties in the options.params property to establish the initial position within the&#xA;dataset, and the number of Records to cache on each read from the Proxy.&#xA;If using {@link #remoteSort remote sorting}, the configured {@link #sortInfo}&#xA;will be automatically included with the posted parameters according to the specified&#xA;{@link #paramNames}." ilk="function" line="717" lineend="732" name="load" returns="Boolean" signature="load(options)">
              <variable citdl="Object" doc="An object containing properties which control loading options:&#xA;params :ObjectAn object containing properties to pass as HTTP&#xA;parameters to a remote data source. Note: params will override any&#xA;{@link #baseParams} of the same name.&#xA;Parameters are encoded as standard HTTP parameters using {@link Ext#urlEncode}.&#xA;callback : FunctionA function to be called after the Records&#xA;have been loaded. The callback is called after the load event and is passed the following arguments:&#xA;r : Ext.data.Record[]&#xA;options: Options object from the load call&#xA;success: Boolean success indicator&#xA;scope : ObjectScope with which to call the callback (defaults&#xA;to the Store object)&#xA;add : BooleanIndicator to append loaded records rather than&#xA;replace the current cache.  Note: see note for {@link #loadData}" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="this.paramNames" line="721" name="pn" />
            </scope>
            <scope attributes="private" doc="PRIVATE: updateRecord  Should not be used directly.  This method will be called automatically if a Writer is set.&#xA;Listens to &apos;update&apos; event." ilk="function" line="742" lineend="746" name="updateRecord" signature="updateRecord(store, record, action)">
              <variable citdl="Object" ilk="argument" name="store" />
              <variable citdl="Object" ilk="argument" name="record" />
              <variable citdl="Object" ilk="argument" name="action" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Should not be used directly.  Store#add will call this automatically if a Writer is set" ilk="function" line="755" lineend="765" name="createRecords" signature="createRecords(store, rs, index)">
              <variable citdl="Object" ilk="argument" name="store" />
              <variable citdl="Object" ilk="argument" name="rs" />
              <variable citdl="Object" ilk="argument" name="index" />
            </scope>
            <scope attributes="private" doc="PRIVATE: Destroys a record or records.  Should not be used directly.  It&apos;s called by Store#remove if a Writer is set." ilk="function" line="774" lineend="790" name="destroyRecord" signature="destroyRecord(store, record, index)">
              <variable ilk="argument" name="store" />
              <variable ilk="argument" name="record" />
              <variable citdl="Number" ilk="argument" name="index" />
            </scope>
            <scope attributes="private" doc="PRIVATE: This method should generally not be used directly.  This method is called internally&#xA;by {@link #load}, or if a Writer is set will be called automatically when {@link #add},&#xA;{@link #remove}, or {@link #update} events fire." ilk="function" line="802" lineend="844" name="execute" returns="doRequest" signature="execute(action, rs, options)">
              <variable citdl="String" doc="Action name (&apos;read&apos;, &apos;create&apos;, &apos;update&apos;, or &apos;destroy&apos;)" ilk="argument" name="action" />
              <variable citdl="Array" ilk="argument" name="rs" />
              <variable citdl="Object" ilk="argument" name="options" />
              <variable attributes="__local__ private" citdl="Boolean" line="814" name="doRequest" />
              <variable attributes="__local__ private" citdl="Ext.apply()" line="835" name="params" />
            </scope>
            <scope doc="Saves all pending changes to the store.  If the commensurate Ext.data.Api.actions action is not configured, then&#xA;the configured {@link #url} will be used.&#xA;&#xA;change            url&#xA;---------------   --------------------&#xA;removed records   Ext.data.Api.actions.destroy&#xA;phantom records   Ext.data.Api.actions.create&#xA;{@link #getModifiedRecords modified records}  Ext.data.Api.actions.update" ilk="function" line="859" lineend="897" name="save" returns="Boolean" signature="save()">
              <variable attributes="__local__ private" citdl="Array" line="870" name="rs" />
              <variable attributes="__local__ private" citdl="Array" line="876" name="phantoms" />
              <variable attributes="__local__ private" citdl="rs.splice().shift()" line="879" name="rec" />
            </scope>
            <scope ilk="function" line="900" lineend="915" name="doTransaction" signature="doTransaction(action, rs)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <scope attributes="__local__ private" ilk="function" line="901" lineend="907" name="transaction" signature="transaction(records)">
                <variable ilk="argument" name="records" />
              </scope>
            </scope>
            <scope ilk="function" line="919" lineend="929" name="createCallback" signature="createCallback(action, rs)">
              <variable ilk="argument" name="action" />
              <variable ilk="argument" name="rs" />
              <variable attributes="__local__ private" citdl="Ext.data.Api.actions" line="920" name="actions" />
            </scope>
            <scope ilk="function" line="933" lineend="941" name="clearModified" signature="clearModified(rs)">
              <variable ilk="argument" name="rs" />
            </scope>
            <scope ilk="function" line="944" lineend="956" name="reMap" signature="reMap(record)">
              <variable ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.data.keys.indexOf()" line="952" name="index" />
            </scope>
            <scope ilk="function" line="959" lineend="973" name="onCreateRecords" signature="onCreateRecords(success, rs, data)">
              <variable ilk="argument" name="success" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="976" lineend="988" name="onUpdateRecords" signature="onUpdateRecords(success, rs, data)">
              <variable ilk="argument" name="success" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="991" lineend="1004" name="onDestroyRecords" signature="onDestroyRecords(success, rs, data)">
              <variable ilk="argument" name="success" />
              <variable ilk="argument" name="rs" />
              <variable ilk="argument" name="data" />
            </scope>
            <scope ilk="function" line="1007" lineend="1010" name="handleException" signature="handleException(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope doc="Reloads the Record cache from the configured Proxy using the configured {@link Ext.data.Reader Reader} and&#xA;the options from the last load operation performed.&#xA;Note: see the Important note in {@link #load}." ilk="function" line="1020" lineend="1022" name="reload" signature="reload(options)">
              <variable citdl="Object" doc="(optional) An Object containing {@link #load loading options} which may&#xA;override the options used in the last {@link #load} operation. See {@link #load} for details (defaults to&#xA;null, in which case the {@link #lastOptions} are used)." ilk="argument" name="options" />
            </scope>
            <scope ilk="function" line="1026" lineend="1061" name="loadRecords" signature="loadRecords(o, options, success)">
              <variable ilk="argument" name="o" />
              <variable ilk="argument" name="options" />
              <variable ilk="argument" name="success" />
              <variable attributes="__local__ private" citdl="o.records" line="1036" name="r" />
              <variable attributes="__local__ private" citdl="o.totalRecords" line="1036" name="t" />
            </scope>
            <variable citdl="t" line="1050" name="totalLength" />
            <scope doc="Loads data from a passed data block and fires the {@link #load} event. A {@link Ext.data.Reader Reader}&#xA;which understands the format of the data must have been configured in the constructor." ilk="function" line="1075" lineend="1078" name="loadData" signature="loadData(o, append)">
              <variable ilk="argument" name="o" />
              <variable citdl="Boolean" doc="(Optional) true to append the new Records rather the default to replace&#xA;the existing cache.&#xA;Note: that Records in a Store are keyed by their {@link Ext.data.Record#id id}, so added Records&#xA;with ids which are already present in the Store will replace existing Records. Only Records with&#xA;new, unique ids will be added." ilk="argument" name="append" />
              <variable attributes="__local__ private" citdl="this.reader.readRecords()" line="1076" name="r" />
            </scope>
            <scope doc="Gets the number of cached records.&#xA;If using paging, this may not be the total size of the dataset. If the data object&#xA;used by the Reader contains the dataset size, then the {@link #getTotalCount} function returns&#xA;the dataset size.  Note: see the Important note in {@link #load}." ilk="function" line="1087" lineend="1089" name="getCount" returns="Number" signature="getCount()" />
            <scope doc="Gets the total number of records in the dataset as returned by the server.&#xA;If using paging, for this to be accurate, the data object used by the {@link #reader Reader}&#xA;must contain the dataset size. For remote data sources, the value for this property&#xA;(totalProperty for {@link Ext.data.JsonReader JsonReader},&#xA;totalRecords for {@link Ext.data.XmlReader XmlReader}) shall be returned by a query on the server.&#xA;Note: see the Important note in {@link #load}." ilk="function" line="1102" lineend="1104" name="getTotalCount" returns="Number" signature="getTotalCount()" />
            <scope doc="Returns an object describing the current sort state of this Store." ilk="function" line="1114" lineend="1116" name="getSortState" returns="Object" signature="getSortState()" />
            <scope ilk="function" line="1119" lineend="1124" name="applySort" signature="applySort()">
              <variable attributes="__local__ private" citdl="this.sortInfo" line="1121" name="s" />
              <variable attributes="__local__ private" citdl="s.field" line="1121" name="f" />
            </scope>
            <scope ilk="function" line="1127" lineend="1138" name="sortData" signature="sortData(f, direction)">
              <variable ilk="argument" name="f" />
              <variable citdl="direction" ilk="argument" name="direction" />
              <variable attributes="__local__ private" citdl="this.fields.get().sortType" line="1129" name="st" />
              <scope attributes="__local__ private" ilk="function" line="1130" lineend="1133" name="fn" returns="v1" signature="fn(r1, r2)">
                <variable ilk="argument" name="r1" />
                <variable ilk="argument" name="r2" />
                <variable attributes="__local__ private" citdl="st()" line="1131" name="v1" />
                <variable attributes="__local__ private" citdl="st()" line="1131" name="v2" />
              </scope>
            </scope>
            <scope doc="Sets the default sort column and order to be used by the next {@link #load} operation." ilk="function" line="1145" lineend="1149" name="setDefaultSort" signature="setDefaultSort(field, dir)">
              <variable ilk="argument" name="field" />
              <variable citdl="String" doc="(optional) The sort order, &apos;ASC&apos; or &apos;DESC&apos; (case-sensitive, defaults to &apos;ASC&apos;)" ilk="argument" name="dir" />
            </scope>
            <variable citdl="Object" line="1147" lineend="1174" name="sortInfo">
              <variable citdl="field" line="1147" name="field" />
              <variable citdl="dir" line="1147" name="direction" />
            </variable>
            <scope doc="Sort the Records.&#xA;If remote sorting is used, the sort is performed on the server, and the cache is reloaded. If local&#xA;sorting is used, the cache is sorted internally. See also {@link #remoteSort} and {@link #paramNames}." ilk="function" line="1158" lineend="1188" name="sort" returns="Boolean" signature="sort(fieldName, dir)">
              <variable citdl="String" doc="The name of the field to sort by." ilk="argument" name="fieldName" />
              <variable citdl="String" doc="(optional) The sort order, &apos;ASC&apos; or &apos;DESC&apos; (case-sensitive, defaults to &apos;ASC&apos;)" ilk="argument" name="dir" />
              <variable attributes="__local__ private" citdl="this.fields.get()" line="1159" name="f" />
              <variable attributes="__local__ private" line="1170" name="st" />
              <variable attributes="__local__ private" line="1171" name="si" />
            </scope>
            <scope doc="Calls the specified function for each of the {@link Ext.data.Record Records} in the cache." ilk="function" line="1196" lineend="1198" name="each" signature="each(fn, scope)">
              <variable citdl="Function" doc="The function to call. The {@link Ext.data.Record Record} is passed as the first parameter.&#xA;Returning false aborts and exits the iteration." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope in which to call the function (defaults to the {@link Ext.data.Record Record})." ilk="argument" name="scope" />
            </scope>
            <scope doc="Gets all {@link Ext.data.Record records} modified since the last commit.  Modified records are&#xA;persisted across load operations (e.g., during paging). Note: deleted records are not&#xA;included.  See also {@link #pruneModifiedRecords} and&#xA;{@link Ext.data.Record}{@link Ext.data.Record#markDirty markDirty}..&#xA;*{@link Ext.data.Record}{@link Ext.data.Record#modified modified}.." ilk="function" line="1209" lineend="1211" name="getModifiedRecords" returns="Array" signature="getModifiedRecords()" />
            <scope ilk="function" line="1214" lineend="1222" name="createFilterFn" returns="value.test()" signature="createFilterFn(property, value, anyMatch, caseSensitive)">
              <variable ilk="argument" name="property" />
              <variable citdl="this.data.createValueMatcher()" ilk="argument" name="value" />
              <variable ilk="argument" name="anyMatch" />
              <variable ilk="argument" name="caseSensitive" />
            </scope>
            <scope doc="Sums the value of property for each {@link Ext.data.Record record} between start&#xA;and end and returns the result." ilk="function" line="1232" lineend="1241" name="sum" returns="Number" signature="sum(property, start, end)">
              <variable citdl="String" doc="A field in each record" ilk="argument" name="property" />
              <variable citdl="Number" doc="(optional) The record index to start at (defaults to 0)" ilk="argument" name="start" />
              <variable citdl="Number" doc="(optional) The last record index to include (defaults to length - 1)" ilk="argument" name="end" />
              <variable attributes="__local__ private" citdl="Number" line="1233" name="v" />
              <variable attributes="__local__ private" citdl="this.data.items" line="1233" name="rs" />
            </scope>
            <scope doc="Filter the {@link Ext.data.Record records} by a specified property." ilk="function" line="1251" lineend="1254" name="filter" returns="fn" signature="filter(property, value, anyMatch, caseSensitive)">
              <variable ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either a string that the field should begin with, or a RegExp to test&#xA;against the field." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="(optional) true to match any part not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) true for case sensitive comparison" ilk="argument" name="caseSensitive" />
              <variable attributes="__local__ private" citdl="this.createFilterFn()" line="1252" name="fn" />
            </scope>
            <scope doc="Filter by a function. The specified function will be called for each&#xA;Record in this Store. If the function returns true the Record is included,&#xA;otherwise it is filtered out." ilk="function" line="1267" lineend="1271" name="filterBy" signature="filterBy(fn, scope)">
              <variable citdl="Function" doc="The function to be called. It will be passed the following parameters:&#xA;record : Ext.data.RecordThe {@link Ext.data.Record record}&#xA;to test for filtering. Access field values using {@link Ext.data.Record#get}.&#xA;id : ObjectThe ID of the Record passed." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
            </scope>
            <variable citdl="this.snapshot" line="1268" name="snapshot" />
            <scope doc="Query the records by a specified property." ilk="function" line="1282" lineend="1285" name="query" returns="MixedCollection" signature="query(property, value, anyMatch, caseSensitive)">
              <variable ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either a string that the field&#xA;should begin with, or a RegExp to test against the field." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="(optional) True to match any part not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison" ilk="argument" name="caseSensitive" />
              <variable attributes="__local__ private" citdl="this.createFilterFn()" line="1283" name="fn" />
            </scope>
            <scope doc="Query the cached records in this Store using a filtering function. The specified function&#xA;will be called with each record in this Store. If the function returns true the record is&#xA;included in the results.&#xA;&#xA;**/" ilk="function" line="1299" lineend="1302" name="queryBy" returns="MixedCollection" signature="queryBy(fn, scope)">
              <variable citdl="Function" doc="The function to be called. It will be passed the following parameters:&#xA;record : Ext.data.RecordThe {@link Ext.data.Record record}&#xA;to test for filtering. Access field values using {@link Ext.data.Record#get}.&#xA;id : ObjectThe ID of the Record passed." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.snapshot" line="1300" name="data" />
            </scope>
            <scope doc="Finds the index of the first matching record in this store by a specific property/value." ilk="function" line="1314" lineend="1317" name="find" returns="Number" signature="find(property, value, start, anyMatch, caseSensitive)">
              <variable citdl="String" doc="A property on your objects" ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="Either a string that the property value&#xA;should begin with, or a RegExp to test against the property." ilk="argument" name="value" />
              <variable ilk="argument" name="start" />
              <variable citdl="Boolean" doc="(optional) True to match any part of the string, not just the beginning" ilk="argument" name="anyMatch" />
              <variable citdl="Boolean" doc="(optional) True for case sensitive comparison" ilk="argument" name="caseSensitive" />
              <variable attributes="__local__ private" citdl="this.createFilterFn()" line="1315" name="fn" />
            </scope>
            <scope doc="Finds the index of the first matching record in this store by a specific property/value." ilk="function" line="1326" lineend="1330" name="findExact" returns="Number" signature="findExact(property, value, start)">
              <variable citdl="String" doc="A property on your objects" ilk="argument" name="property" />
              <variable citdl="String/RegExp" doc="The value to match against" ilk="argument" name="value" />
              <variable ilk="argument" name="start" />
              <scope attributes="__local__ private" ilk="function" line="1327" lineend="1329" name="(anonymous)" returns="rec.get()" signature="(anonymous)()" />
            </scope>
            <scope doc="Find the index of the first matching Record in this Store by a function.&#xA;If the function returns true it is considered a match." ilk="function" line="1344" lineend="1346" name="findBy" returns="Number" signature="findBy(fn, scope, start)">
              <variable citdl="Function" doc="The function to be called. It will be passed the following parameters:&#xA;record : Ext.data.RecordThe {@link Ext.data.Record record}&#xA;to test for filtering. Access field values using {@link Ext.data.Record#get}.&#xA;id : ObjectThe ID of the Record passed." ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to this)" ilk="argument" name="scope" />
              <variable ilk="argument" name="start" />
            </scope>
            <scope doc="Collects unique values for a particular dataIndex from this store.&#xA;**/" ilk="function" line="1355" lineend="1368" name="collect" returns="Array" signature="collect(dataIndex, allowNull, bypassFilter)">
              <variable citdl="String" doc="The property to collect" ilk="argument" name="dataIndex" />
              <variable citdl="Boolean" doc="(optional) Pass true to allow null, undefined or empty string values" ilk="argument" name="allowNull" />
              <variable citdl="Boolean" doc="(optional) Pass true to collect from all records, even ones which are filtered" ilk="argument" name="bypassFilter" />
              <variable attributes="__local__ private" line="1356" name="d" />
              <variable attributes="__local__ private" citdl="Array" line="1358" name="r" />
              <variable attributes="__local__ private" citdl="String()" line="1358" name="sv" />
              <variable attributes="__local__ private" citdl="Object" line="1358" lineend="1358" name="l" />
              <variable attributes="__local__ private" citdl="d[i].data[dataIndex]" line="1358" name="v" />
            </scope>
            <scope doc="Revert to a view of the Record cache with no filtering applied." ilk="function" line="1375" lineend="1383" name="clearFilter" signature="clearFilter(suppressEvent)">
              <variable citdl="Boolean" doc="If true the filter is cleared silently without firing the&#xA;{@link #datachanged} event." ilk="argument" name="suppressEvent" />
            </scope>
            <scope doc="Returns true if this store is currently filtered" ilk="function" line="1389" lineend="1391" name="isFiltered" returns="Boolean" signature="isFiltered()" />
            <scope ilk="function" line="1394" lineend="1399" name="afterEdit" signature="afterEdit(record)">
              <variable ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="1402" lineend="1405" name="afterReject" signature="afterReject(record)">
              <variable ilk="argument" name="record" />
            </scope>
            <scope ilk="function" line="1408" lineend="1411" name="afterCommit" signature="afterCommit(record)">
              <variable ilk="argument" name="record" />
            </scope>
            <scope doc="Commit all Records with {@link #getModifiedRecords outstanding changes}. To handle updates for changes,&#xA;subscribe to the Store&apos;s {@link #update update event}, and perform updating when the third parameter is&#xA;Ext.data.Record.COMMIT." ilk="function" line="1418" lineend="1424" name="commitChanges" signature="commitChanges()">
              <variable attributes="__local__ private" citdl="this.modified.slice()" line="1419" name="m" />
            </scope>
            <scope doc="{@link Ext.data.Record#reject Reject} outstanding changes on all {@link #getModifiedRecords modified records}." ilk="function" line="1429" lineend="1435" name="rejectChanges" signature="rejectChanges()">
              <variable attributes="__local__ private" citdl="this.modified.slice()" line="1430" name="m" />
            </scope>
            <scope ilk="function" line="1438" lineend="1449" name="onMetaChange" signature="onMetaChange(meta, rtype, o)">
              <variable ilk="argument" name="meta" />
              <variable ilk="argument" name="rtype" />
              <variable ilk="argument" name="o" />
            </scope>
            <scope ilk="function" line="1452" lineend="1461" name="findInsertIndex" returns="index" signature="findInsertIndex(record)">
              <variable ilk="argument" name="record" />
              <variable attributes="__local__ private" citdl="this.data.clone()" line="1454" name="data" />
              <variable attributes="__local__ private" citdl="this.data.indexOf()" line="1457" name="index" />
            </scope>
            <scope doc="Set the value for a property name in this store&apos;s {@link #baseParams}.  Usage:&#xA;myStore.setBaseParam(&apos;foo&apos;, {bar:3});&#xA;**/" ilk="function" line="1470" lineend="1473" name="setBaseParam" signature="setBaseParam(name, value)">
              <variable citdl="String" doc="Name of the property to assign" ilk="argument" name="name" />
              <variable citdl="Mixed" doc="Value to assign the named property" ilk="argument" name="value" />
            </scope>
            <variable citdl="Ext.extend()" doc="Store Error extension." line="1486" name="Error" />
          </scope>
          <variable citdl="Object" line="77" name="JsonWriter" />
          <scope classrefs="Ext.data.DataReader" ilk="class" line="102" lineend="113" name="JsonReader">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from a JSON response&#xA;based on mappings in a provided {@link Ext.data.Record} constructor.&#xA;Example code:&#xA;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;firstname&apos;},                  // map the Record&apos;s &quot;firstname&quot; field to the row object&apos;s key of the same name&#xA;{name: &apos;job&apos;, mapping: &apos;occupation&apos;}  // map the Record&apos;s &quot;job&quot; field to the row object&apos;s &quot;occupation&quot; key&#xA;]);&#xA;var myReader = new Ext.data.JsonReader(&#xA;{                             // The metadata property, with configuration options:&#xA;totalProperty: &quot;results&quot;, //   the property which contains the total dataset size (optional)&#xA;root: &quot;rows&quot;,             //   the property which contains an Array of record data objects&#xA;idProperty: &quot;id&quot;          //   the property within each row object that provides an ID for the record (optional)&#xA;Employee  // {@link Ext.data.Record} constructor that provides mapping for JSON object&#xA;This would consume a JSON data object of the form:&#xA;results: 2,  // Reader&apos;s configured totalProperty&#xA;rows: [      // Reader&apos;s configured root&#xA;{ id: 1, firstname: &apos;Bill&apos;, occupation: &apos;Gardener&apos; },         // a row object&#xA;{ id: 2, firstname: &apos;Ben&apos; , occupation: &apos;Horticulturalist&apos; }  // another row object&#xA;Automatic configuration using metaData&#xA;It is possible to change a JsonReader&apos;s metadata at any time by including a metaData&#xA;property in the JSON data object. If the JSON data object has a metaData property, a&#xA;{@link Ext.data.Store Store} object using this Reader will reconfigure itself to use the newly provided&#xA;field definition and fire its {@link Ext.data.Store#metachange metachange} event. The metachange event&#xA;handler may interrogate the metaData property to perform any configuration required.&#xA;Note that reconfiguring a Store potentially invalidates objects which may refer to Fields or Records&#xA;which no longer exist.&#xA;The metaData property in the JSON data object may contain:&#xA;&#xA;any of the configuration options for this class&#xA;a {@link Ext.data.Record#fields fields} property which the JsonReader will&#xA;use as an argument to the {@link Ext.data.Record#create data Record create method} in order to&#xA;configure the layout of the Records it will produce.&#xA;a {@link Ext.data.Store#sortInfo sortInfo} property which the JsonReader will&#xA;use to set the {@link Ext.data.Store}&apos;s {@link Ext.data.Store#sortInfo sortInfo} property&#xA;any user-defined properties needed&#xA;&#xA;To use this facility to send the same data as the example above (without having to code the creation&#xA;of the Record constructor), you would create the JsonReader like this:&#xA;var myReader = new Ext.data.JsonReader();&#xA;The first data packet from the server would configure the reader by containing a&#xA;metaData property and the data. For example, the JSON data object might take&#xA;the form:&#xA;metaData: {&#xA;idProperty: &apos;id&apos;,&#xA;root: &apos;rows&apos;,&#xA;totalProperty: &apos;results&apos;,&#xA;fields: [&#xA;{name: &apos;name&apos;},&#xA;{name: &apos;job&apos;, mapping: &apos;occupation&apos;}&#xA;sortInfo: {field: &apos;name&apos;, direction:&apos;ASC&apos;}, // used by store to set its sortInfo&#xA;foo: &apos;bar&apos; // custom property&#xA;results: 2,&#xA;rows: [ // an Array&#xA;{ &apos;id&apos;: 1, &apos;name&apos;: &apos;Bill&apos;, occupation: &apos;Gardener&apos; },&#xA;{ &apos;id&apos;: 2, &apos;name&apos;: &apos;Ben&apos;, occupation: &apos;Horticulturalist&apos; }" ilk="function" line="102" lineend="113" name="JsonReader" signature="JsonReader(meta, recordType)">
              <variable citdl="Object" doc="Metadata configuration options." ilk="argument" name="meta" />
              <variable citdl="Array/Object" doc="Either an Array of {@link Ext.data.Field Field} definition objects (which&#xA;will be passed to {@link Ext.data.Record#create}, or a {@link Ext.data.Record Record}&#xA;constructor created from {@link Ext.data.Record#create}." ilk="argument" name="recordType" />
              <variable citdl="JsonReader" name="this" />
            </scope>
            <scope citdl="Mixed" doc="This JsonReader&apos;s metadata as passed to the constructor, or as passed in&#xA;the last data packet&apos;s metaData property." ilk="function" line="127" lineend="134" name="read" returns="Object" signature="read(response)">
              <variable citdl="Object" doc="The XHR object which contains the JSON data in its responseText." ilk="argument" name="response" />
              <variable attributes="__local__ private" citdl="response.responseText" line="128" name="json" />
              <variable attributes="__local__ private" citdl="Ext.decode()" line="129" name="o" />
            </scope>
            <variable citdl="String" line="131" name="message" />
            <scope ilk="function" line="137" lineend="139" name="onMetaChange" signature="onMetaChange(meta, recordType, o)">
              <variable ilk="argument" name="meta" />
              <variable ilk="argument" name="recordType" />
              <variable ilk="argument" name="o" />
            </scope>
            <scope ilk="function" line="144" lineend="146" name="simpleAccess" returns="obj[subsc]" signature="simpleAccess(obj, subsc)">
              <variable ilk="argument" name="obj" />
              <variable ilk="argument" name="subsc" />
            </scope>
            <variable line="151" name="getJsonAccessor" />
            <scope doc="Create a data block containing Ext.data.Records from a JSON object." ilk="function" line="173" lineend="217" name="readRecords" returns="Object" signature="readRecords(o)">
              <variable citdl="Object" doc="An object which contains an Array of row objects in the property specified&#xA;in the config as &apos;root, and optionally a property, specified in the config as &apos;totalProperty&apos;&#xA;which contains the total size of the dataset." ilk="argument" name="o" />
              <variable attributes="__local__ private" citdl="Record.prototype.fields" line="187" name="f" />
              <variable attributes="__local__ private" citdl="this.recordType" line="187" name="Record" />
              <variable attributes="__local__ private" citdl="this.meta" line="187" name="s" />
              <variable attributes="__local__ private" citdl="parseInt()" line="187" name="v" />
              <variable attributes="__local__ private" citdl="f.items" line="187" name="fi" />
              <variable attributes="__local__ private" citdl="f.length" line="187" name="fl" />
              <variable attributes="__local__ private" citdl="root.length" line="191" name="c" />
              <variable attributes="__local__ private" citdl="Boolean" line="191" name="success" />
              <variable attributes="__local__ private" citdl="this.getRoot()" line="191" name="root" />
              <variable attributes="__local__ private" citdl="c" line="191" name="totalRecords" />
              <variable attributes="__local__ private" citdl="Array" line="205" name="records" />
              <variable attributes="__local__ private" citdl="root[i]" line="207" name="n" />
              <variable attributes="__local__ private" citdl="Record" line="208" name="record" />
            </scope>
            <variable citdl="Object" doc="After any data loads, the raw JSON data is available for further custom processing.  If no data is&#xA;loaded or there is a load exception this property will be undefined." line="179" name="jsonData" />
            <variable citdl="o.metaData" line="182" name="meta" />
            <variable citdl="Ext.data.Record.create()" line="183" name="recordType" />
            <scope ilk="class" line="220" lineend="250" name="buildExtractors">
              <scope attributes="__ctor__" ilk="function" line="220" lineend="250" name="buildExtractors" returns="p" signature="buildExtractors()">
                <variable citdl="buildExtractors" name="this" />
                <variable attributes="__local__ private" citdl="Record.prototype.fields" line="225" name="f" />
                <variable attributes="__local__ private" citdl="this.recordType" line="225" name="Record" />
                <variable attributes="__local__ private" citdl="this.meta" line="225" name="s" />
                <variable attributes="__local__ private" citdl="f.items" line="225" name="fi" />
                <variable attributes="__local__ private" citdl="f.length" line="225" name="fl" />
                <variable attributes="__local__ private" citdl="this.getJsonAccessor()" line="235" name="g" />
                <variable attributes="__local__ private" citdl="Array" line="243" name="ef" />
                <variable attributes="__local__ private" line="246" name="map" />
              </scope>
              <variable citdl="this.getJsonAccessor()" line="228" name="getTotal" />
              <variable citdl="this.getJsonAccessor()" line="231" name="getSuccess" />
              <variable citdl="s.root" line="233" name="getRoot" />
              <scope ilk="function" line="241" lineend="241" name="getId" signature="getId()">
                <variable citdl="buildExtractors" name="this" />
              </scope>
              <variable citdl="ef" line="249" name="ef" />
            </scope>
            <scope ilk="function" line="253" lineend="261" name="extractValues" returns="values" signature="extractValues(data, items, len)">
              <variable ilk="argument" name="data" />
              <variable ilk="argument" name="items" />
              <variable ilk="argument" name="len" />
              <variable attributes="__local__ private" citdl="Object" line="254" lineend="254" name="values" />
              <variable attributes="__local__ private" citdl="items[j]" line="254" name="f" />
              <variable attributes="__local__ private" citdl="this.ef[j]()" line="257" name="v" />
            </scope>
            <scope doc="Decode a json response from server." ilk="function" line="268" lineend="288" name="readResponse" returns="o" signature="readResponse(action, response)">
              <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
              <variable citdl="Object" ilk="argument" name="response" />
              <variable attributes="__local__ private" line="269" name="o" />
            </scope>
            <variable citdl="this.buildExtractors()" line="286" name="ef" />
            <variable citdl="Ext.extend()" doc="Error class for JsonReader" line="301" name="Error" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Data reader class to create an Array of {@link Ext.data.Record} objects from an Array.&#xA;Each element of that Array represents a row of data fields. The&#xA;fields are pulled into a Record object using as a subscript, the mapping property&#xA;of the field definition if it exists, or the field&apos;s ordinal position in the definition.&#xA;Example code:&#xA;&#xA;var Employee = Ext.data.Record.create([&#xA;{name: &apos;name&apos;, mapping: 1},         // &quot;mapping&quot; only needed if an &quot;id&quot; field is present which&#xA;{name: &apos;occupation&apos;, mapping: 2}    // precludes using the ordinal position as the index.&#xA;]);&#xA;var myReader = new Ext.data.ArrayReader({&#xA;{@link #idIndex}: 0&#xA;}, Employee);&#xA;This would consume an Array like this:&#xA;&#xA;[ [1, &apos;Bill&apos;, &apos;Gardener&apos;], [2, &apos;Ben&apos;, &apos;Horticulturalist&apos;] ]" line="102" name="ArrayReader" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized store implementation that provides for grouping records by one of the available fields. This&#xA;is usually used in conjunction with an {@link Ext.grid.GroupingView} to proved the data model for&#xA;a grouped GridPanel." line="138" name="GroupingStore" />
          <scope classrefs="Ext.util.Observable" ilk="class" line="167" lineend="191" name="Node">
            <scope attributes="__ctor__" ilk="function" line="167" lineend="292" name="Node" signature="Node(attributes)">
              <variable citdl="Object" doc="The attributes/config for the node" ilk="argument" name="attributes" />
              <variable citdl="Node" name="this" />
            </scope>
            <variable citdl="Object" doc="The attributes supplied for the node. You can use this property to access any custom attributes you supplied." line="172" name="attributes">
              <variable citdl="this.id" line="180" name="id" />
            </variable>
            <variable citdl="this.attributes.leaf" line="173" name="leaf" />
            <variable citdl="this.attributes.id" doc="The node id. @type String" line="177" name="id" />
            <variable citdl="Array" doc="All child nodes of this node. @type Array" line="185" name="childNodes" />
            <variable doc="The parent node for this node. @type Node" line="199" name="parentNode" />
            <variable doc="The first direct child node of this node, or null if this node has no child nodes. @type Node" line="203" name="firstChild" />
            <variable doc="The last direct child node of this node, or null if this node has no child nodes. @type Node" line="207" name="lastChild" />
            <variable doc="The node immediately preceding this node in the tree, or null if there is no sibling node. @type Node" line="211" name="previousSibling" />
            <variable doc="The node immediately following this node in the tree, or null if there is no sibling node. @type Node" line="215" name="nextSibling" />
            <variable citdl="this.attributes.listeners" line="290" name="listeners" />
            <scope ilk="function" line="296" lineend="309" name="fireEvent" returns="Boolean" signature="fireEvent(evtName)">
              <variable ilk="argument" name="evtName" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree()" line="302" name="ot" />
            </scope>
            <scope doc="Returns true if this node is a leaf" ilk="function" line="315" lineend="317" name="isLeaf" returns="Boolean" signature="isLeaf()" />
            <scope ilk="function" line="320" lineend="322" name="setFirstChild" signature="setFirstChild(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope ilk="function" line="325" lineend="327" name="setLastChild" signature="setLastChild(node)">
              <variable ilk="argument" name="node" />
            </scope>
            <scope doc="Returns true if this node is the last child of its parent" ilk="function" line="334" lineend="336" name="isLast" returns="Boolean" signature="isLast()" />
            <scope doc="Returns true if this node is the first child of its parent" ilk="function" line="342" lineend="344" name="isFirst" returns="Boolean" signature="isFirst()" />
            <scope doc="Returns true if this node has one or more child nodes, else false." ilk="function" line="350" lineend="352" name="hasChildNodes" returns="Boolean" signature="hasChildNodes()" />
            <scope doc="Returns true if this node has one or more child nodes, or if the expandable&#xA;node attribute is explicitly specified as true (see {@link #attributes}), otherwise returns false." ilk="function" line="359" lineend="361" name="isExpandable" returns="Boolean" signature="isExpandable()" />
            <scope doc="Insert node(s) as the last child node of this node." ilk="function" line="368" lineend="415" name="appendChild" returns="Node" signature="appendChild(node)">
              <variable citdl="Node/Array" doc="The node or Array of nodes to append" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="Boolean" line="369" name="multi" />
              <variable attributes="__local__ private" citdl="this.childNodes.length" line="384" name="index" />
              <variable attributes="__local__ private" citdl="node.parentNode" line="385" name="oldParent" />
              <variable attributes="__local__ private" citdl="this.childNodes[index-1]" line="399" name="ps" />
            </scope>
            <scope doc="Removes a child node from this node." ilk="function" line="422" lineend="457" name="removeChild" returns="Node" signature="removeChild(node)">
              <variable citdl="Node" doc="The node to remove" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.childNodes.indexOf()" line="423" name="index" />
            </scope>
            <scope doc="Inserts the first node before the second node in this nodes childNodes collection." ilk="function" line="465" lineend="513" name="insertBefore" returns="Node" signature="insertBefore(node, refNode)">
              <variable citdl="Node" doc="The node to insert" ilk="argument" name="node" />
              <variable citdl="Node" doc="The node to insert before (if null the node is appended)" ilk="argument" name="refNode" />
              <variable attributes="__local__ private" citdl="this.childNodes.indexOf()" line="477" name="index" />
              <variable attributes="__local__ private" citdl="node.parentNode" line="478" name="oldParent" />
              <variable attributes="__local__ private" citdl="index" line="479" name="refIndex" />
              <variable attributes="__local__ private" citdl="this.childNodes[refIndex-1]" line="498" name="ps" />
            </scope>
            <scope doc="Removes this node from its parent" ilk="function" line="519" lineend="522" name="remove" returns="Node" signature="remove()" />
            <scope doc="Returns the child node at the specified index." ilk="function" line="529" lineend="531" name="item" returns="Node" signature="item(index)">
              <variable citdl="Number" ilk="argument" name="index" />
            </scope>
            <scope doc="Replaces one child node in this node with another." ilk="function" line="539" lineend="544" name="replaceChild" returns="Node" signature="replaceChild(newChild, oldChild)">
              <variable citdl="Node" doc="The replacement node" ilk="argument" name="newChild" />
              <variable citdl="Node" doc="The node to replace" ilk="argument" name="oldChild" />
              <variable attributes="__local__ private" citdl="oldChild" line="540" name="s" />
            </scope>
            <scope doc="Returns the index of a child node" ilk="function" line="551" lineend="553" name="indexOf" returns="Number" signature="indexOf(child)">
              <variable ilk="argument" name="child" />
            </scope>
            <scope doc="Returns the tree this node is in." ilk="function" line="559" lineend="572" name="getOwnerTree" returns="Tree" signature="getOwnerTree()">
              <variable attributes="__local__ private" citdl="this" line="562" name="p" />
            </scope>
            <variable citdl="p.ownerTree" line="565" name="ownerTree" />
            <scope doc="Returns depth of this node (the root node has a depth of 0)" ilk="function" line="578" lineend="586" name="getDepth" returns="Number" signature="getDepth()">
              <variable attributes="__local__ private" citdl="Number" line="579" name="depth" />
              <variable attributes="__local__ private" citdl="this" line="580" name="p" />
            </scope>
            <scope ilk="function" line="589" lineend="604" name="setOwnerTree" signature="setOwnerTree(tree)">
              <variable ilk="argument" name="tree" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="596" name="cs" />
            </scope>
            <scope doc="Changes the id of this node." ilk="function" line="610" lineend="622" name="setId" signature="setId(id)">
              <variable citdl="String" doc="The new id for the node." ilk="argument" name="id" />
              <variable attributes="__local__ private" citdl="this.ownerTree" line="612" name="t" />
            </scope>
            <variable citdl="Ext.emptyFn" line="625" name="onIdChange" />
            <scope doc="Returns the path for this node. The path can be used to expand or select this node programmatically." ilk="function" line="632" lineend="642" name="getPath" returns="String" signature="getPath(attr)">
              <variable citdl="String" doc="(optional) The attr to use for the path (defaults to the node&apos;s id)" ilk="argument" name="attr" />
              <variable attributes="__local__ private" citdl="this.parentNode" line="634" name="p" />
              <variable attributes="__local__ private" citdl="Array" line="635" name="b" />
              <variable attributes="__local__ private" citdl="this.getOwnerTree().pathSeparator" line="640" name="sep" />
            </scope>
            <scope doc="Bubbles up the tree from this node, calling the specified function with each node. The scope (this) of&#xA;function call will be the scope provided or the current node. The arguments to the function&#xA;will be the args provided or the current node. If the function returns false at any point,&#xA;the bubble is stopped." ilk="function" line="653" lineend="661" name="bubble" signature="bubble(fn, scope, args)">
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to current node)" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The args to call the function with (default to passing the current node)" ilk="argument" name="args" />
              <variable attributes="__local__ private" citdl="this" line="654" name="p" />
            </scope>
            <scope doc="Cascades down the tree from this node, calling the specified function with each node. The scope (this) of&#xA;function call will be the scope provided or the current node. The arguments to the function&#xA;will be the args provided or the current node. If the function returns false at any point,&#xA;the cascade is stopped on that branch." ilk="function" line="672" lineend="679" name="cascade" signature="cascade(fn, scope, args)">
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to current node)" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The args to call the function with (default to passing the current node)" ilk="argument" name="args" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="674" name="cs" />
            </scope>
            <scope doc="Interates the child nodes of this node, calling the specified function with each node. The scope (this) of&#xA;function call will be the scope provided or the current node. The arguments to the function&#xA;will be the args provided or the current node. If the function returns false at any point,&#xA;the iteration stops." ilk="function" line="690" lineend="697" name="eachChild" signature="eachChild(fn, scope, args)">
              <variable citdl="Function" doc="The function to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional) The scope of the function (defaults to current node)" ilk="argument" name="scope" />
              <variable citdl="Array" doc="(optional) The args to call the function with (default to passing the current node)" ilk="argument" name="args" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="691" name="cs" />
            </scope>
            <scope doc="Finds the first child that has the attribute with the specified value." ilk="function" line="705" lineend="713" name="findChild" returns="Node" signature="findChild(attribute, value)">
              <variable citdl="String" doc="The attribute name" ilk="argument" name="attribute" />
              <variable citdl="Mixed" doc="The value to search for" ilk="argument" name="value" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="706" name="cs" />
            </scope>
            <scope doc="Finds the first child by a custom function. The child matches if the function passed&#xA;returns true." ilk="function" line="722" lineend="730" name="findChildBy" returns="Node" signature="findChildBy(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="723" name="cs" />
            </scope>
            <scope doc="Sorts this nodes children using the supplied sort function" ilk="function" line="737" lineend="755" name="sort" signature="sort(fn, scope)">
              <variable citdl="Function" ilk="argument" name="fn" />
              <variable citdl="Object" doc="(optional)" ilk="argument" name="scope" />
              <variable attributes="__local__ private" citdl="this.childNodes" line="738" name="cs" />
              <variable attributes="__local__ private" citdl="cs.length" line="739" name="len" />
              <variable attributes="__local__ private" citdl="scope" line="741" name="sortFn" />
              <variable attributes="__local__ private" citdl="cs[i]" line="744" name="n" />
            </scope>
            <scope doc="Returns true if this node is an ancestor (at any point) of the passed node." ilk="function" line="762" lineend="764" name="contains" returns="Boolean" signature="contains(node)">
              <variable citdl="Node" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns true if the passed node is an ancestor (at any point) of this node." ilk="function" line="771" lineend="780" name="isAncestor" returns="Boolean" signature="isAncestor(node)">
              <variable citdl="Node" ilk="argument" name="node" />
              <variable attributes="__local__ private" citdl="this.parentNode" line="772" name="p" />
            </scope>
            <scope ilk="function" line="782" lineend="784" name="toString" returns="String" signature="toString()" />
          </scope>
          <variable doc="Ext.data.Api is a singleton designed to manage the data API including methods&#xA;for validating a developer&apos;s DataProxy API.  Defines variables for CRUD actions&#xA;create, read, update and destroy in addition to a mapping of RESTful HTTP methods&#xA;GET, POST, PUT and DELETE to CRUD actions." line="189" name="Api" />
        </variable>
        <variable citdl="String" doc="URL to a blank file used by Ext when in secure mode for iframe src and onReady src to prevent&#xA;the IE insecure content warning (defaults to javascript:false)." line="103" name="SSL_SECURE_URL" />
        <scope ilk="function" line="108" lineend="113" name="log" signature="log()">
          <variable citdl="o" name="this" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" line="108" name="FlashComponent" />
        <variable citdl="Boolean" doc="True if the browser is in strict (standards-compliant) mode, as opposed to quirks mode" line="108" name="isStrict" />
        <variable citdl="Object" line="110" name="direct">
          <variable citdl="Ext.extend()" line="45" name="JsonProvider" />
          <variable citdl="Ext.extend()" doc="Ext.direct.Provider is an abstract class meant to be extended.&#xA;&#xA;For example ExtJs implements the following subclasses:&#xA;&#xA;Provider&#xA;+---{@link Ext.direct.JsonProvider JsonProvider}&#xA;+---{@link Ext.direct.PollingProvider PollingProvider}&#xA;+---{@link Ext.direct.RemotingProvider RemotingProvider}" line="110" name="Provider" />
          <variable citdl="Ext.extend()" doc="&#xA;&#xA;&#xA;&#xA;var pollA = new Ext.direct.PollingProvider({&#xA;type:&apos;polling&apos;,&#xA;url: &apos;php/pollA.php&apos;,&#xA;});&#xA;Ext.Direct.addProvider(pollA);&#xA;pollA.disconnect();&#xA;Ext.Direct.addProvider(&#xA;type:&apos;polling&apos;,&#xA;url: &apos;php/pollB.php&apos;,&#xA;id: &apos;pollB-provider&apos;&#xA;var pollB = Ext.Direct.getProvider(&apos;pollB-provider&apos;);" line="149" name="PollingProvider" />
          <variable citdl="Ext.extend()" line="372" name="RemotingProvider" />
        </variable>
        <variable citdl="Object" line="111" name="PagingToolbar">
          <variable citdl="Object" line="111" name="prototype">
            <variable citdl="String" line="122" name="beforePageText" />
            <variable citdl="String" line="123" name="afterPageText" />
            <variable citdl="String" line="124" name="firstText" />
            <variable citdl="String" line="125" name="prevText" />
            <variable citdl="String" line="126" name="nextText" />
            <variable citdl="String" line="127" name="lastText" />
            <variable citdl="String" line="128" name="refreshText" />
            <variable citdl="String" line="129" name="displayMsg" />
            <variable citdl="String" line="130" name="emptyMsg" />
          </variable>
        </variable>
        <variable citdl="Object" line="112" name="Panel">
          <scope classrefs="Ext.dd.DragSource" ilk="class" line="112" name="DD">
            <scope attributes="__ctor__" ilk="function" line="112" lineend="123" name="DD" signature="DD(panel, cfg)">
              <variable ilk="argument" name="panel" />
              <variable ilk="argument" name="cfg" />
              <variable citdl="DD" name="this" />
              <variable attributes="__local__ private" citdl="panel.header" line="117" name="h" />
            </scope>
            <variable citdl="panel" line="113" name="panel" />
            <variable citdl="Object" line="114" lineend="114" name="dragData">
              <variable citdl="panel" line="114" name="panel" />
            </variable>
            <variable citdl="Ext.dd.PanelProxy" line="115" name="proxy" />
            <variable citdl="Boolean" line="122" name="scroll" />
            <variable citdl="Ext.emptyFn" line="126" name="showFrame" />
            <variable citdl="Ext.emptyFn" line="127" name="startDrag" />
            <scope ilk="function" line="128" lineend="130" name="b4StartDrag" signature="b4StartDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <scope ilk="function" line="131" lineend="135" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable ilk="argument" name="e" />
              <variable attributes="__local__ private" citdl="e.getPageX()" line="132" name="x" />
              <variable attributes="__local__ private" citdl="e.getPageY()" line="133" name="y" />
            </scope>
            <scope ilk="function" line="136" lineend="139" name="onInitDrag" returns="Boolean" signature="onInitDrag(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
            <variable citdl="Ext.emptyFn" line="140" name="createFrame" />
            <scope ilk="function" line="141" lineend="143" name="getDragEl" returns="this.proxy.ghost.dom" signature="getDragEl(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="144" lineend="147" name="endDrag" signature="endDrag(e)">
              <variable ilk="argument" name="e" />
            </scope>
            <scope ilk="function" line="149" lineend="153" name="autoOffset" signature="autoOffset(x, y)">
              <variable ilk="argument" name="x" />
              <variable ilk="argument" name="y" />
            </scope>
          </scope>
        </variable>
        <variable citdl="Boolean" doc="True if the page is running over SSL" line="113" name="isSecure" />
        <scope ilk="function" line="115" lineend="117" name="logf" signature="logf(format, arg1, arg2, etc)">
          <variable ilk="argument" name="format" />
          <variable ilk="argument" name="arg1" />
          <variable ilk="argument" name="arg2" />
          <variable ilk="argument" name="etc" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Boolean" doc="True when the document is fully initialized and ready for action" line="118" name="isReady" />
        <scope ilk="function" line="119" lineend="142" name="dump" signature="dump(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="129" name="b" />
          <variable attributes="__local__ private" line="131" name="to" />
          <variable attributes="__local__ private" citdl="b.join()" line="136" name="s" />
        </scope>
        <scope doc="Applies event listeners to elements by selectors when the document is ready.&#xA;The event name is specified with an &amp;#64; suffix.&#xA;&#xA;Ext.addBehaviors({&#xA;// add a listener for click on all anchors in element with id foo&#xA;&apos;#foo a&amp;#64;click&apos; : function(e, t){&#xA;// do something&#xA;// add the same listener to multiple selectors (separated by comma BEFORE the &amp;#64;)&#xA;&apos;#foo a, #bar span.some-class&amp;#64;mouseover&apos; : function(){&#xA;// do something&#xA;});" ilk="function" line="120" lineend="141" name="addBehaviors" signature="addBehaviors(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="122" lineend="124" name="(anonymous)" signature="(anonymous)()" />
          <variable attributes="__local__ private" citdl="Object" line="126" lineend="126" name="cache" />
          <variable attributes="__local__ private" line="127" name="parts" />
          <variable attributes="__local__ private" line="128" name="b" />
          <variable attributes="__local__ private" citdl="parts[0]" line="129" name="s" />
        </scope>
        <variable citdl="Object" line="120" name="EventManager">
          <scope ilk="function" line="29" lineend="37" name="doResizeEvent" signature="doResizeEvent()">
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="D.getViewHeight()" line="31" name="h" />
            <variable attributes="__local__ private" citdl="D.getViewWidth()" line="31" name="w" />
          </scope>
          <scope doc="Fires when the window is resized and provides resize event buffering (50 milliseconds), passes new viewport width and height to handlers." ilk="function" line="45" lineend="52" name="onWindowResize" signature="onWindowResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope ilk="function" line="55" lineend="63" name="fireWindowResize" signature="fireWindowResize()">
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope doc="Fires when the user changes the active text size. Handler gets called with 2 params, the old size and the new size." ilk="function" line="71" lineend="86" name="onTextResize" signature="onTextResize(fn, scope, options)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="An object that becomes the scope of the handler" ilk="argument" name="scope" />
            <variable citdl="Boolean" ilk="argument" name="options" />
            <variable citdl="EventManager" name="this" />
            <variable attributes="__local__ private" citdl="Ext.Element" line="74" name="textEl" />
            <scope attributes="__local__ private" ilk="function" line="79" lineend="83" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <scope doc="Removes the passed window resize listener." ilk="function" line="93" lineend="97" name="removeResizeListener" signature="removeResizeListener(fn, scope)">
            <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
            <variable citdl="Object" doc="The scope of handler" ilk="argument" name="scope" />
            <variable citdl="EventManager" name="this" />
          </scope>
          <scope ilk="function" line="100" lineend="104" name="fireResize" signature="fireResize()">
            <variable citdl="EventManager" name="this" />
          </scope>
          <variable citdl="Number" doc="The frequency, in milliseconds, to check for text resize events (defaults to 50)" line="109" name="textResizeInterval" />
          <variable citdl="Boolean" doc="Url used for onDocumentReady with using SSL (defaults to Ext.SSL_SECURE_URL)" line="114" name="ieDeferSrc" />
          <variable citdl="useKeydown" line="118" name="useKeydown" />
          <variable citdl="Ext.EventManager.addListener" line="122" name="on" />
        </variable>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A split button that provides a built-in dropdown arrow that can fire an event separately from the default&#xA;click event of the button.  Typically this would be used to display a dropdown menu that provides additional&#xA;options to the primary button action, but any custom handler can provide the arrowclick implementation.  Example usage:&#xA;&#xA;// display a dropdown menu:&#xA;new Ext.SplitButton({&#xA;renderTo: &apos;button-ct&apos;, // the container id&#xA;text: &apos;Options&apos;,&#xA;handler: optionsHandler, // handle a click on the button itself&#xA;menu: new Ext.menu.Menu({&#xA;items: [&#xA;// these items will render as dropdown menu items when the arrow is clicked:&#xA;{text: &apos;Item 1&apos;, handler: item1Handler},&#xA;{text: &apos;Item 2&apos;, handler: item2Handler}&#xA;});&#xA;// Instead of showing a menu, you provide any type of custom&#xA;// functionality you want when the dropdown arrow is clicked:&#xA;new Ext.SplitButton({&#xA;renderTo: &apos;button-ct&apos;,&#xA;text: &apos;Options&apos;,&#xA;handler: optionsHandler,&#xA;arrowHandler: myCustomHandler&#xA;});" line="122" name="SplitButton" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized container representing the viewable application area (the browser viewport).&#xA;The Viewport renders itself to the document body, and automatically sizes itself to the size of&#xA;the browser viewport and manages window resizing. There may only be one Viewport created&#xA;in a page. Inner layouts are available by virtue of the fact that all {@link Ext.Panel Panel}s&#xA;added to the Viewport, either through its {@link #items}, or through the items, or the {@link #add}&#xA;method of any of its child Panels may themselves have a layout.&#xA;The Viewport does not provide scrolling, so child Panels within the Viewport should provide&#xA;for scrolling if needed using the {@link #autoScroll} config.&#xA;An example showing a classic application border layout:&#xA;new Ext.Viewport({&#xA;layout: &apos;border&apos;,&#xA;items: [{&#xA;region: &apos;north&apos;,&#xA;html: &apos;&amp;lt;h1 class=&quot;x-panel-header&quot;&gt;Page Title&amp;lt;/h1&gt;&apos;,&#xA;autoHeight: true,&#xA;border: false,&#xA;margins: &apos;0 0 5 0&apos;&#xA;}, {&#xA;region: &apos;west&apos;,&#xA;collapsible: true,&#xA;title: &apos;Navigation&apos;,&#xA;width: 200&#xA;// the west region might typically utilize a {@link Ext.tree.TreePanel TreePanel} or a Panel with {@link Ext.layout.AccordionLayout Accordion layout}&#xA;}, {&#xA;region: &apos;south&apos;,&#xA;title: &apos;Title for Panel&apos;,&#xA;collapsible: true,&#xA;html: &apos;Information goes here&apos;,&#xA;split: true,&#xA;height: 100,&#xA;minHeight: 100&#xA;}, {&#xA;region: &apos;east&apos;,&#xA;title: &apos;Title for the Grid Panel&apos;,&#xA;collapsible: true,&#xA;split: true,&#xA;width: 200,&#xA;xtype: &apos;grid&apos;,&#xA;// remaining grid configuration not shown ...&#xA;// notice that the GridPanel is added directly as the region&#xA;// it is not &quot;overnested&quot; inside another Panel&#xA;}, {&#xA;region: &apos;center&apos;,&#xA;xtype: &apos;tabpanel&apos;, // TabPanel itself has no title&#xA;items: {&#xA;title: &apos;Default Tab&apos;,&#xA;html: &apos;The first tab\&apos;s content. Others may be added dynamically&apos;&#xA;});" line="123" name="Viewport" />
        <scope classrefs="Ext.util.Observable" ilk="class" line="125" lineend="289" name="Component">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Base class for all Ext components.  All subclasses of Component may participate in the automated&#xA;Ext component lifecycle of creation, rendering and destruction which is provided by the {@link Ext.Container Container} class.&#xA;Components may be added to a Container through the {@link Ext.Container#items items} config option at the time the Container is created,&#xA;or they may be added dynamically via the {@link Ext.Container#add add} method.&#xA;The Component base class has built-in support for basic hide/show and enable/disable behavior.&#xA;All Components are registered with the {@link Ext.ComponentMgr} on construction so that they can be referenced at any time via&#xA;{@link Ext#getCmp}, passing the {@link #id}.&#xA;All user-developed visual widgets that are required to participate in automated lifecycle and size management should subclass Component (or&#xA;{@link Ext.BoxComponent} if managed box model handling is required, ie height and width management).&#xA;See the Creating new UI controls tutorial for details on how&#xA;and to either extend or augment ExtJs base classes to create custom Components.&#xA;Every component has a specific xtype, which is its Ext-specific type name, along with methods for checking the&#xA;xtype like {@link #getXType} and {@link #isXType}. This is the list of all valid xtypes:&#xA;&#xA;xtype            Class&#xA;-------------    ------------------&#xA;box              {@link Ext.BoxComponent}&#xA;button           {@link Ext.Button}&#xA;buttongroup      {@link Ext.ButtonGroup}&#xA;colorpalette     {@link Ext.ColorPalette}&#xA;component        {@link Ext.Component}&#xA;container        {@link Ext.Container}&#xA;cycle            {@link Ext.CycleButton}&#xA;dataview         {@link Ext.DataView}&#xA;datepicker       {@link Ext.DatePicker}&#xA;editor           {@link Ext.Editor}&#xA;editorgrid       {@link Ext.grid.EditorGridPanel}&#xA;flash            {@link Ext.FlashComponent}&#xA;grid             {@link Ext.grid.GridPanel}&#xA;listview         {@link Ext.ListView}&#xA;panel            {@link Ext.Panel}&#xA;progress         {@link Ext.ProgressBar}&#xA;propertygrid     {@link Ext.grid.PropertyGrid}&#xA;slider           {@link Ext.Slider}&#xA;spacer           {@link Ext.Spacer}&#xA;splitbutton      {@link Ext.SplitButton}&#xA;tabpanel         {@link Ext.TabPanel}&#xA;treepanel        {@link Ext.tree.TreePanel}&#xA;viewport         {@link Ext.ViewPort}&#xA;window           {@link Ext.Window}&#xA;Toolbar components&#xA;---------------------------------------&#xA;paging           {@link Ext.PagingToolbar}&#xA;toolbar          {@link Ext.Toolbar}&#xA;tbbutton         {@link Ext.Toolbar.Button}        (deprecated; use button)&#xA;tbfill           {@link Ext.Toolbar.Fill}&#xA;tbitem           {@link Ext.Toolbar.Item}&#xA;tbseparator      {@link Ext.Toolbar.Separator}&#xA;tbspacer         {@link Ext.Toolbar.Spacer}&#xA;tbsplit          {@link Ext.Toolbar.SplitButton}   (deprecated; use splitbutton)&#xA;tbtext           {@link Ext.Toolbar.TextItem}&#xA;Menu components&#xA;---------------------------------------&#xA;menu             {@link Ext.menu.Menu}&#xA;colormenu        {@link Ext.menu.ColorMenu}&#xA;datemenu         {@link Ext.menu.DateMenu}&#xA;menubaseitem     {@link Ext.menu.BaseItem}&#xA;menucheckitem    {@link Ext.menu.CheckItem}&#xA;menuitem         {@link Ext.menu.Item}&#xA;menuseparator    {@link Ext.menu.Separator}&#xA;menutextitem     {@link Ext.menu.TextItem}&#xA;Form components&#xA;---------------------------------------&#xA;form             {@link Ext.FormPanel}&#xA;checkbox         {@link Ext.form.Checkbox}&#xA;checkboxgroup    {@link Ext.form.CheckboxGroup}&#xA;combo            {@link Ext.form.ComboBox}&#xA;datefield        {@link Ext.form.DateField}&#xA;displayfield     {@link Ext.form.DisplayField}&#xA;field            {@link Ext.form.Field}&#xA;fieldset         {@link Ext.form.FieldSet}&#xA;hidden           {@link Ext.form.Hidden}&#xA;htmleditor       {@link Ext.form.HtmlEditor}&#xA;label            {@link Ext.form.Label}&#xA;numberfield      {@link Ext.form.NumberField}&#xA;radio            {@link Ext.form.Radio}&#xA;radiogroup       {@link Ext.form.RadioGroup}&#xA;textarea         {@link Ext.form.TextArea}&#xA;textfield        {@link Ext.form.TextField}&#xA;timefield        {@link Ext.form.TimeField}&#xA;trigger          {@link Ext.form.TriggerField}&#xA;Chart components&#xA;---------------------------------------&#xA;chart            {@link Ext.chart.Chart}&#xA;barchart         {@link Ext.chart.BarChart}&#xA;cartesianchart   {@link Ext.chart.CartesianChart}&#xA;columnchart      {@link Ext.chart.ColumnChart}&#xA;linechart        {@link Ext.chart.LineChart}&#xA;piechart         {@link Ext.chart.PieChart}&#xA;Store xtypes&#xA;---------------------------------------&#xA;arraystore       {@link Ext.data.ArrayStore}&#xA;directstore      {@link Ext.data.DirectStore}&#xA;groupingstore    {@link Ext.data.GroupingStore}&#xA;jsonstore        {@link Ext.data.JsonStore}&#xA;simplestore      {@link Ext.data.SimpleStore}      (deprecated; use arraystore)&#xA;store            {@link Ext.data.Store}&#xA;xmlstore         {@link Ext.data.XmlStore}" ilk="function" line="125" lineend="289" name="Component" signature="Component(config)">
            <variable citdl="Ext.Element/String/Object" doc="The configuration options may be specified as either:&#xA;an element :&#xA;it is set as the internal element and its id used as the component id&#xA;a string :&#xA;it is assumed to be the id of an existing element and is used as the component id&#xA;anything else :&#xA;it is assumed to be a standard config object and is applied to the component" ilk="argument" name="config" />
            <variable citdl="Component" name="this" />
          </scope>
          <variable citdl="config" line="129" name="baseAction" />
          <variable citdl="Object" doc="This Component&apos;s initial configuration specification. Read-only." line="141" name="initialConfig" />
          <variable citdl="this.initPlugin()" line="271" name="plugins" />
          <variable citdl="Number" line="292" name="AUTO_ID" />
          <variable citdl="Boolean" doc="Note: this config is only used when this Component is rendered by a Container which&#xA;has been configured to use the {@link Ext.layout.FormLayout FormLayout} layout manager (e.g.&#xA;{@link Ext.form.FormPanel} or specifying layout:&apos;form&apos;).&#xA;Also see {@link #hideLabel} and&#xA;{@link Ext.layout.FormLayout}.{@link Ext.layout.FormLayout#fieldTpl fieldTpl}.&#xA;Example use:&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Name&apos;&#xA;});&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Name&apos;,&#xA;labelStyle: &apos;font-weight:bold;&apos;&#xA;});&#xA;&#xA;&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;layoutConfig: {&#xA;labelSeparator: &apos;~&apos;   // layout config has lowest priority (defaults to &apos;:&apos;)&#xA;{@link Ext.layout.FormLayout#labelSeparator labelSeparator}: &apos;&gt;&gt;&apos;,     // config at container level&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Field 1&apos;,&#xA;labelSeparator: &apos;...&apos; // field/component level config supersedes others&#xA;},{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Field 2&apos; // labelSeparator will be &apos;=&apos;&#xA;});&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;&#xA;hideLabel: true&#xA;});&#xA;// Apply a style to the field&apos;s label:&#xA;&amp;lt;style&gt;&#xA;.required .x-form-item-label {font-weight:bold;color:red;}&#xA;&amp;lt;/style&gt;&#xA;new Ext.FormPanel({&#xA;height: 100,&#xA;renderTo: Ext.getBody(),&#xA;items: [{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Name&apos;,&#xA;itemCls: &apos;required&apos; //this label will be styled&#xA;},{&#xA;xtype: &apos;textfield&apos;,&#xA;fieldLabel: &apos;Favorite Color&apos;&#xA;});&#xA;*/// Configs below are used for all Components when rendered by AnchorLayout.&#xA;/**&#xA;&#xA;&#xA;var c = new Ext.Panel({ //&#xA;{@link Ext.BoxComponent#height height}: 300,&#xA;{@link #renderTo}: document.body,&#xA;{@link Ext.Container#layout layout}: &apos;auto&apos;,&#xA;{@link Ext.Container#items items}: [&#xA;itemId: &apos;p1&apos;,&#xA;{@link Ext.Panel#title title}: &apos;Panel 1&apos;,&#xA;{@link Ext.BoxComponent#height height}: 150&#xA;itemId: &apos;p2&apos;,&#xA;{@link Ext.Panel#title title}: &apos;Panel 2&apos;,&#xA;{@link Ext.BoxComponent#height height}: 150&#xA;p1 = c.{@link Ext.Container#getComponent getComponent}(&apos;p1&apos;); // not the same as {@link Ext#getCmp Ext.getCmp()}&#xA;p2 = p1.{@link #ownerCt}.{@link Ext.Container#getComponent getComponent}(&apos;p2&apos;); // reference via a sibling&#xA;&#xA;&#xA;&#xA;new Ext.Panel({&#xA;title: &apos;Some Title&apos;,&#xA;renderTo: Ext.getBody(),&#xA;width: 400, height: 300,&#xA;layout: &apos;form&apos;,&#xA;items: [{&#xA;xtype: &apos;textarea&apos;,&#xA;style: {&#xA;width: &apos;95%&apos;,&#xA;marginBottom: &apos;10px&apos;&#xA;new Ext.Button({&#xA;text: &apos;Send&apos;,&#xA;minWidth: &apos;100&apos;,&#xA;style: {&#xA;marginBottom: &apos;10px&apos;&#xA;});" line="567" name="disabled" />
          <variable citdl="Boolean" doc="Render this component hidden (default is false). If true, the&#xA;{@link #hide} method will be called internally." line="573" name="hidden" />
          <variable citdl="String" doc="An object or array of objects that will provide custom functionality for this component.  The only&#xA;requirement for a valid plugin is that it contain an init method that accepts a reference of type Ext.Component.&#xA;When a component is created, if any plugins are available, the component will call the init method on each&#xA;plugin, passing a reference to itself.  Each plugin can then call methods or respond to events on the&#xA;component as needed to provide its functionality.&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;Ext.state.Manager.setProvider(new Ext.state.CookieProvider({&#xA;expires: new Date(new Date().getTime()+(1000*60*60*24*7)), //7 days from now&#xA;}));&#xA;&#xA;xtype: &apos;box&apos;,&#xA;autoEl: {&#xA;tag: &apos;img&apos;,&#xA;src: &apos;http://www.example.com/example.jpg&apos;&#xA;}, {&#xA;xtype: &apos;box&apos;,&#xA;autoEl: {&#xA;tag: &apos;blockquote&apos;,&#xA;html: &apos;autoEl is cool!&apos;&#xA;}, {&#xA;xtype: &apos;container&apos;,&#xA;autoEl: &apos;ul&apos;,&#xA;cls: &apos;ux-unordered-list&apos;,&#xA;items: {&#xA;xtype: &apos;box&apos;,&#xA;autoEl: &apos;li&apos;,&#xA;html: &apos;First list item&apos;" line="704" name="autoEl" />
          <variable citdl="String" doc="CSS class added to the component when it is disabled (defaults to &apos;x-item-disabled&apos;)." line="710" name="disabledClass" />
          <variable citdl="Boolean" doc="Whether the component can move the Dom node when rendering (defaults to true)." line="715" name="allowDomMove" />
          <variable citdl="Boolean" doc="True if the component should check for hidden classes (e.g. &apos;x-hidden&apos; or &apos;x-hide-display&apos;) and remove&#xA;them on render (defaults to false)." line="721" name="autoShow" />
          <variable citdl="String" doc="How this component should be hidden. Supported values are &apos;visibility&apos;&#xA;(css visibility), &apos;offsets&apos; (negative offset position) and &apos;display&apos;&#xA;(css display).&#xA;Note: the default of &apos;display&apos; is generally preferred&#xA;since items are automatically laid out when they are first shown (no sizing&#xA;is done while hidden)." line="731" name="hideMode" />
          <variable citdl="Boolean" doc="True to hide and show the component&apos;s container when hide/show is called on the component, false to hide&#xA;and show the component itself (defaults to false).  For example, this can be used as a shortcut for a hide&#xA;button on a window by setting hide:true on the button when adding it to its parent container." line="738" name="hideParent" />
          <variable citdl="Boolean" doc="The {@link Ext.Element} which encapsulates this Component. Read-only.&#xA;This will usually be a &amp;lt;DIV&gt; element created by the class&apos;s onRender method, but&#xA;that may be overridden using the {@link #autoEl} config.&#xA;Note: this element will not be available until this Component has been rendered.&#xA;To add listeners for DOM events to this Component (as opposed to listeners&#xA;for this Component&apos;s own Observable events), see the {@link Ext.util.Observable#listeners listeners}&#xA;config for a suggestion, or use a render listener directly:&#xA;new Ext.Panel({&#xA;title: &apos;The Clickable Panel&apos;,&#xA;listeners: {&#xA;render: function(p) {&#xA;// Append the Panel to the click handler&amp;#39;s argument list.&#xA;p.getEl().on(&apos;click&apos;, handlePanelClick.createDelegate(null, [p], true));&#xA;single: true  // Remove the listener after first invocation&#xA;});&#xA;See also {@link #getEl getEl}" line="784" name="rendered" />
          <variable citdl="String" line="787" name="ctype" />
          <variable citdl="String" line="790" name="actionMode" />
          <scope ilk="function" line="793" lineend="795" name="getActionEl" returns="this[this.actionMode]" signature="getActionEl()" />
          <scope ilk="function" line="797" lineend="807" name="initPlugin" returns="p" signature="initPlugin(p)">
            <variable citdl="Ext.ComponentMgr.createPlugin()" ilk="argument" name="p" />
          </scope>
          <variable citdl="Ext.emptyFn" line="838" name="initComponent" />
          <scope doc="Render this Component into the passed HTML element.&#xA;If you are using a {@link Ext.Container Container} object to house this Component, then&#xA;do not use the render method.&#xA;A Container&apos;s child Components are rendered by that Container&apos;s&#xA;{@link Ext.Container#layout layout} manager when the Container is first rendered.&#xA;Certain layout managers allow dynamic addition of child components. Those that do&#xA;include {@link Ext.layout.CardLayout}, {@link Ext.layout.AnchorLayout},&#xA;{@link Ext.layout.FormLayout}, {@link Ext.layout.TableLayout}.&#xA;If the Container is already rendered when a new child Component is added, you may need to call&#xA;the Container&apos;s {@link Ext.Container#doLayout doLayout} to refresh the view which causes any&#xA;unrendered child Components to be rendered. This is required so that you can add multiple&#xA;child components if needed while only refreshing the layout once.&#xA;When creating complex UIs, it is important to remember that sizing and positioning&#xA;of child items is the responsibility of the Container&apos;s {@link Ext.Container#layout layout} manager.&#xA;If you expect child items to be sized in response to user interactions, you must&#xA;configure the Container with a layout manager which creates and manages the type of layout you&#xA;have in mind.&#xA;Omitting the Container&apos;s {@link Ext.Container#layout layout} config means that a basic&#xA;layout manager is used which does nothing but render child components sequentially into the&#xA;Container. No sizing or positioning will be performed in this situation." ilk="function" line="866" lineend="918" name="render" returns="this" signature="render(container, position)">
            <variable citdl="Element/HTMLElement/String" doc="(optional) The element this Component should be&#xA;rendered into. If it is being created from existing markup, this should be omitted." ilk="argument" name="container" />
            <variable citdl="String/Number" doc="(optional) The element ID or DOM node index within the container before&#xA;which this component will be inserted (defaults to appending to the end of the container)" ilk="argument" name="position" />
          </scope>
          <variable citdl="Ext.get()" line="869" name="el" />
          <variable citdl="Ext.get()" line="873" name="container" />
          <scope ilk="function" line="920" lineend="961" name="initRef" signature="initRef()">
            <variable attributes="__local__ private" citdl="this.ref.split()" line="950" name="levels" />
            <variable attributes="__local__ private" citdl="Number" line="951" name="i" />
            <variable attributes="__local__ private" citdl="levels.length" line="951" name="last" />
            <variable attributes="__local__ private" citdl="this" line="952" name="t" />
          </scope>
          <scope ilk="function" line="964" lineend="977" name="initState" signature="initState(config)">
            <variable ilk="argument" name="config" />
            <variable attributes="__local__ private" citdl="this.getStateId()" line="966" name="id" />
            <variable attributes="__local__ private" citdl="Ext.state.Manager.get()" line="968" name="state" />
          </scope>
          <scope ilk="function" line="980" lineend="982" name="getStateId" returns="this.stateId" signature="getStateId()" />
          <scope ilk="function" line="985" lineend="991" name="initStateEvents" signature="initStateEvents()" />
          <scope ilk="function" line="994" lineend="998" name="applyState" signature="applyState(state, config)">
            <variable ilk="argument" name="state" />
            <variable ilk="argument" name="config" />
          </scope>
          <scope ilk="function" line="1001" lineend="1003" name="getState" signature="getState()" />
          <scope ilk="function" line="1006" lineend="1017" name="saveState" signature="saveState()">
            <variable attributes="__local__ private" citdl="this.getStateId()" line="1008" name="id" />
            <variable attributes="__local__ private" citdl="this.getState()" line="1010" name="state" />
          </scope>
          <scope doc="Apply this component to existing markup that is valid. With this function, no call to render() is required." ilk="function" line="1023" lineend="1027" name="applyToMarkup" signature="applyToMarkup(el)">
            <variable citdl="String/HTMLElement" ilk="argument" name="el" />
          </scope>
          <scope doc="Adds a CSS class to the component&apos;s underlying element." ilk="function" line="1034" lineend="1041" name="addClass" returns="Ext.Component" signature="addClass(cls)">
            <variable citdl="String" doc="The CSS class name to add" ilk="argument" name="cls" />
          </scope>
          <variable citdl="this.cls" line="1038" name="cls" />
          <scope doc="Removes a CSS class from the component&apos;s underlying element." ilk="function" line="1048" lineend="1055" name="removeClass" returns="Ext.Component" signature="removeClass(cls)">
            <variable citdl="String" doc="The CSS class name to remove" ilk="argument" name="cls" />
          </scope>
          <scope ilk="function" line="1059" lineend="1078" name="onRender" signature="onRender(ct, position)">
            <variable ilk="argument" name="ct" />
            <variable ilk="argument" name="position" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="1064" name="div" />
          </scope>
          <scope ilk="function" line="1081" lineend="1088" name="getAutoCreate" returns="cfg" signature="getAutoCreate()">
            <variable attributes="__local__ private" citdl="Ext.isObject()" line="1082" name="cfg" />
          </scope>
          <variable citdl="Ext.emptyFn" line="1091" name="afterRender" />
          <scope doc="Destroys this component by purging any event listeners, removing the component&apos;s element from the DOM,&#xA;removing the component from its {@link Ext.Container} (if applicable) and unregistering it from&#xA;{@link Ext.ComponentMgr}.  Destruction is generally handled automatically by the framework and this method&#xA;should usually not need to be called directly." ilk="function" line="1100" lineend="1115" name="destroy" signature="destroy()" />
          <variable citdl="Ext.emptyFn" line="1118" name="beforeDestroy" />
          <variable citdl="Ext.emptyFn" line="1121" name="onDestroy" />
          <scope doc="Returns the {@link Ext.Element} which encapsulates this Component.&#xA;This will usually be a &amp;lt;DIV&gt; element created by the class&apos;s onRender method, but&#xA;that may be overridden using the {@link #autoEl} config.&#xA;Note: this element will not be available until this Component has been rendered.&#xA;To add listeners for DOM events to this Component (as opposed to listeners&#xA;for this Component&apos;s own Observable events), see the {@link #listeners} config for a suggestion,&#xA;or use a render listener directly:&#xA;new Ext.Panel({&#xA;title: &apos;The Clickable Panel&apos;,&#xA;listeners: {&#xA;render: function(p) {&#xA;// Append the Panel to the click handler&amp;#39;s argument list.&#xA;p.getEl().on(&apos;click&apos;, handlePanelClick.createDelegate(null, [p], true));&#xA;single: true  // Remove the listener after first invocation&#xA;});" ilk="function" line="1144" lineend="1146" name="getEl" returns="Ext.Element" signature="getEl()" />
          <scope doc="Returns the id of this component or automatically generates and&#xA;returns an id if an id is not defined yet:&#xA;&apos;ext-comp-&apos; + (++Ext.Component.AUTO_ID)" ilk="function" line="1155" lineend="1157" name="getId" returns="String" signature="getId()" />
          <scope doc="Returns the {@link #itemId} of this component.  If an&#xA;{@link #itemId} was not assigned through configuration the&#xA;id is returned using {@link #getId}." ilk="function" line="1165" lineend="1167" name="getItemId" returns="String" signature="getItemId()" />
          <scope doc="Try to focus this component." ilk="function" line="1175" lineend="1187" name="focus" returns="Ext.Component" signature="focus(selectText, delay)">
            <variable citdl="Boolean" doc="(optional) If applicable, true to also select the text in this component" ilk="argument" name="selectText" />
            <variable citdl="Boolean/Number" doc="(optional) Delay the focus this number of milliseconds (true for 10 milliseconds)" ilk="argument" name="delay" />
          </scope>
          <scope ilk="function" line="1190" lineend="1195" name="blur" returns="this" signature="blur()" />
          <scope doc="Disable this component and fire the &apos;disable&apos; event." ilk="function" line="1201" lineend="1210" name="disable" returns="Ext.Component" signature="disable(silent)">
            <variable ilk="argument" name="silent" />
          </scope>
          <scope ilk="function" line="1213" lineend="1216" name="onDisable" signature="onDisable()" />
          <scope doc="Enable this component and fire the &apos;enable&apos; event." ilk="function" line="1222" lineend="1229" name="enable" returns="Ext.Component" signature="enable()" />
          <scope ilk="function" line="1232" lineend="1235" name="onEnable" signature="onEnable()" />
          <scope doc="Convenience function for setting disabled/enabled by boolean." ilk="function" line="1242" lineend="1244" name="setDisabled" returns="Ext.Component" signature="setDisabled(disabled)">
            <variable citdl="Boolean" ilk="argument" name="disabled" />
          </scope>
          <scope doc="Show this component.  Listen to the &apos;{@link #beforeshow}&apos; event and return&#xA;false to cancel showing the component.  Fires the &apos;{@link #show}&apos;&#xA;event after showing the component." ilk="function" line="1252" lineend="1264" name="show" returns="Ext.Component" signature="show()" />
          <scope ilk="function" line="1267" lineend="1269" name="onShow" signature="onShow()" />
          <scope doc="Hide this component.  Listen to the &apos;{@link #beforehide}&apos; event and return&#xA;false to cancel hiding the component.  Fires the &apos;{@link #hide}&apos;&#xA;event after hiding the component. Note this method is called internally if&#xA;the component is configured to be {@link #hidden}." ilk="function" line="1278" lineend="1284" name="hide" returns="Ext.Component" signature="hide()" />
          <scope ilk="function" line="1287" lineend="1292" name="doHide" signature="doHide()" />
          <scope ilk="function" line="1295" lineend="1297" name="onHide" signature="onHide()" />
          <scope ilk="function" line="1300" lineend="1302" name="getVisibiltyEl" returns="this.hideParent" signature="getVisibiltyEl()" />
          <scope doc="Convenience function to hide or show this component by boolean." ilk="function" line="1309" lineend="1311" name="setVisible" returns="Ext.Component" signature="setVisible(visible)">
            <variable citdl="Boolean" doc="True to show, false to hide" ilk="argument" name="visible" />
          </scope>
          <scope doc="Returns true if this component is visible." ilk="function" line="1317" lineend="1319" name="isVisible" returns="Boolean" signature="isVisible()" />
          <scope doc="Clone the current component using the original config values passed into this instance by default." ilk="function" line="1327" lineend="1333" name="cloneConfig" returns="Ext.Component" signature="cloneConfig(overrides)">
            <variable citdl="Object" doc="A new config containing any properties to override in the cloned version.&#xA;An id property can be passed on this object, otherwise one will be generated to avoid duplicates." ilk="argument" name="overrides" />
            <variable attributes="__local__ private" citdl="overrides.id" line="1329" name="id" />
            <variable attributes="__local__ private" citdl="Ext.applyIf()" line="1330" name="cfg" />
          </scope>
          <scope doc="Gets the xtype for this component as registered with {@link Ext.ComponentMgr}. For a list of all&#xA;available xtypes, see the {@link Ext.Component} header. Example usage:&#xA;&#xA;var t = new Ext.form.TextField();&#xA;alert(t.getXType());  // alerts &apos;textfield&apos;" ilk="function" line="1344" lineend="1346" name="getXType" returns="String" signature="getXType()" />
          <scope doc="Tests whether or not this Component is of a specific xtype. This can test whether this Component is descended&#xA;from the xtype (default) or whether it is directly of the xtype specified (shallow = true).&#xA;If using your own subclasses, be aware that a Component must register its own xtype&#xA;to participate in determination of inherited xtypes.&#xA;For a list of all available xtypes, see the {@link Ext.Component} header.&#xA;Example usage:&#xA;&#xA;var t = new Ext.form.TextField();&#xA;var isText = t.isXType(&apos;textfield&apos;);        // true&#xA;var isBoxSubclass = t.isXType(&apos;box&apos;);       // true, descended from BoxComponent&#xA;var isBoxInstance = t.isXType(&apos;box&apos;, true); // false, not a direct BoxComponent instance" ilk="function" line="1366" lineend="1375" name="isXType" returns="Boolean" signature="isXType(xtype, shallow)">
            <variable citdl="String" doc="The xtype to check for this Component" ilk="argument" name="xtype" />
            <variable citdl="Boolean" doc="(optional) False to check whether this Component is descended from the xtype (this is&#xA;the default), or true to check whether this Component is directly of the specified xtype." ilk="argument" name="shallow" />
          </scope>
          <scope doc="Returns this Component&apos;s xtype hierarchy as a slash-delimited string. For a list of all&#xA;available xtypes, see the {@link Ext.Component} header.&#xA;If using your own subclasses, be aware that a Component must register its own xtype&#xA;to participate in determination of inherited xtypes.&#xA;Example usage:&#xA;&#xA;var t = new Ext.form.TextField();&#xA;alert(t.getXTypes());  // alerts &apos;component/box/field/textfield&apos;" ilk="function" line="1389" lineend="1401" name="getXTypes" returns="String" signature="getXTypes()">
            <variable attributes="__local__ private" citdl="this.constructor" line="1390" name="tc" />
            <variable attributes="__local__ private" citdl="this" line="1392" name="sc" />
            <variable attributes="__local__ private" citdl="Array" line="1392" name="c" />
          </scope>
          <scope doc="Find a container above this component at any level by a custom function. If the passed function returns&#xA;true, the container will be returned." ilk="function" line="1409" lineend="1412" name="findParentBy" returns="Ext.Container" signature="findParentBy(fn)">
            <variable citdl="Function" doc="The custom function to call with the arguments (container, this component)." ilk="argument" name="fn" />
          </scope>
          <scope doc="Find a container above this component at any level by xtype or class" ilk="function" line="1419" lineend="1427" name="findParentByType" returns="Ext.Container" signature="findParentByType(xtype)">
            <variable citdl="String/Class" doc="The xtype string for a component, or the class of the component directly" ilk="argument" name="xtype" />
            <scope attributes="__local__ private" ilk="function" line="1421" lineend="1423" name="(anonymous)" returns="p.constructor" signature="(anonymous)()" />
            <scope attributes="__local__ private" ilk="function" line="1424" lineend="1426" name="(anonymous)" returns="p.constructor.xtype" signature="(anonymous)()" />
          </scope>
          <scope ilk="function" line="1429" lineend="1431" name="getDomPositionEl" returns="this.getPositionEl" signature="getDomPositionEl()" />
          <scope ilk="function" line="1434" lineend="1439" name="purgeListeners" signature="purgeListeners()" />
          <scope ilk="function" line="1442" lineend="1447" name="clearMons" signature="clearMons()">
            <scope attributes="__local__ private" ilk="function" line="1443" lineend="1445" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <variable citdl="Array" line="1446" name="mons" />
          <scope ilk="function" line="1450" lineend="1486" name="mon" signature="mon(item, ename, fn, scope, opt)">
            <variable ilk="argument" name="item" />
            <variable ilk="argument" name="ename" />
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="scope" />
            <variable ilk="argument" name="opt" />
            <variable attributes="__local__ private" line="1457" name="propRe" />
            <variable attributes="__local__ private" citdl="ename" line="1459" name="o" />
          </scope>
          <scope ilk="function" line="1489" lineend="1501" name="mun" returns="found" signature="mun(item, ename, fn, scope)">
            <variable ilk="argument" name="item" />
            <variable ilk="argument" name="ename" />
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="scope" />
            <variable attributes="__local__ private" citdl="Boolean" line="1490" name="found" />
            <variable attributes="__local__ private" citdl="this.mons[i]" line="1490" name="mon" />
          </scope>
          <scope doc="Returns the next component in the owning container" ilk="function" line="1507" lineend="1515" name="nextSibling" signature="nextSibling()">
            <variable attributes="__local__ private" citdl="this.ownerCt.items.indexOf()" line="1509" name="index" />
          </scope>
          <scope doc="Returns the previous component in the owning container" ilk="function" line="1521" lineend="1529" name="previousSibling" signature="previousSibling()">
            <variable attributes="__local__ private" citdl="this.ownerCt.items.indexOf()" line="1523" name="index" />
          </scope>
          <scope doc="Provides the link for Observable&apos;s fireEvent method to bubble up the ownership hierarchy." ilk="function" line="1535" lineend="1537" name="getBubbleTarget" returns="Ext.Container" signature="getBubbleTarget()" />
        </scope>
        <variable citdl="Boolean" doc="True if the {@link Ext.Fx} Class is available" line="130" name="enableGarbageCollector" />
        <scope ilk="class" line="135" lineend="169" name="DomHelper">
          <variable doc="The DomHelper class provides a layer of abstraction from DOM and transparently supports creating&#xA;elements via DOM or using HTML fragments. It also has the ability to create HTML fragment templates&#xA;from your DOM building code.&#xA;&#xA;DomHelper element specification object&#xA;A specification object is used when creating elements. Attributes of this object&#xA;are assumed to be element attributes, except for 4 special attributes:&#xA;&#xA;tag : The tag name of the element&#xA;children : or cnAn array of the&#xA;same kind of element definition objects to be created and appended. These can be nested&#xA;as deep as you want.&#xA;cls : The class attribute of the element.&#xA;This will end up being either the &quot;class&quot; attribute on a HTML fragment or className&#xA;for a DOM node, depending on whether DomHelper is using fragments or DOM.&#xA;html : The innerHTML for the element&#xA;&#xA;&#xA;Insertion methods&#xA;Commonly used insertion methods:&#xA;&#xA;{@link #append} :&#xA;{@link #insertBefore} :&#xA;{@link #insertAfter} :&#xA;{@link #overwrite} :&#xA;{@link #createTemplate} :&#xA;{@link #insertHtml} :&#xA;&#xA;&#xA;Example&#xA;This is an example, where an unordered list with 3 children items is appended to an existing&#xA;element with id &apos;my-div&apos;:&#xA;var dh = Ext.DomHelper; // create shorthand alias&#xA;// specification object&#xA;var spec = {&#xA;id: &apos;my-ul&apos;,&#xA;tag: &apos;ul&apos;,&#xA;cls: &apos;my-list&apos;,&#xA;// append children after creating&#xA;children: [     // may also specify &apos;cn&apos; instead of &apos;children&apos;&#xA;{tag: &apos;li&apos;, id: &apos;item0&apos;, html: &apos;List Item 0&apos;},&#xA;{tag: &apos;li&apos;, id: &apos;item1&apos;, html: &apos;List Item 1&apos;},&#xA;{tag: &apos;li&apos;, id: &apos;item2&apos;, html: &apos;List Item 2&apos;}&#xA;var list = dh.append(&#xA;&apos;my-div&apos;, // the context element &apos;my-div&apos; can either be the id or the actual node&#xA;spec      // the specification object&#xA;Element creation specification parameters in this class may also be passed as an Array of&#xA;specification objects. This can be used to insert multiple sibling nodes into an existing&#xA;container very efficiently. For example, to add more list items to the example above:&#xA;dh.append(&apos;my-ul&apos;, [&#xA;{tag: &apos;li&apos;, id: &apos;item3&apos;, html: &apos;List Item 3&apos;},&#xA;{tag: &apos;li&apos;, id: &apos;item4&apos;, html: &apos;List Item 4&apos;}&#xA;]);&#xA;&#xA;&#xA;Templating&#xA;The real power is in the built-in templating. Instead of creating or appending any elements,&#xA;{@link #createTemplate} returns a Template object which can be used over and over to&#xA;insert new elements. Revisiting the example above, we could utilize templating this time:&#xA;&#xA;// create the node&#xA;var list = dh.append(&apos;my-div&apos;, {tag: &apos;ul&apos;, cls: &apos;my-list&apos;});&#xA;// get template&#xA;var tpl = dh.createTemplate({tag: &apos;li&apos;, id: &apos;item{0}&apos;, html: &apos;List Item {0}&apos;});&#xA;for(var i = 0; i&#xA;An example using a template:&#xA;var html = &apos;{2}&apos;;&#xA;var tpl = new Ext.DomHelper.createTemplate(html);&#xA;tpl.append(&apos;blog-roll&apos;, [&apos;link1&apos;, &apos;http://www.jackslocum.com/&apos;, &quot;Jack&amp;#39;s Site&quot;]);&#xA;tpl.append(&apos;blog-roll&apos;, [&apos;link2&apos;, &apos;http://www.dustindiaz.com/&apos;, &quot;Dustin&amp;#39;s Site&quot;]);&#xA;&#xA;&#xA;The same example using named parameters:&#xA;var html = &apos;{text}&apos;;&#xA;var tpl = new Ext.DomHelper.createTemplate(html);&#xA;tpl.append(&apos;blog-roll&apos;, {&#xA;id: &apos;link1&apos;,&#xA;url: &apos;http://www.jackslocum.com/&apos;,&#xA;text: &quot;Jack&amp;#39;s Site&quot;&#xA;});&#xA;tpl.append(&apos;blog-roll&apos;, {&#xA;id: &apos;link2&apos;,&#xA;url: &apos;http://www.dustindiaz.com/&apos;,&#xA;text: &quot;Dustin&amp;#39;s Site&quot;&#xA;});&#xA;&#xA;&#xA;Compiling Templates&#xA;Templates are applied using regular expressions. The performance is great, but if&#xA;you are adding a bunch of DOM elements using the same template, you can increase&#xA;performance even further by {@link Ext.Template#compile &quot;compiling&quot;} the template.&#xA;The way &quot;{@link Ext.Template#compile compile()}&quot; works is the template is parsed and&#xA;broken up at the different variable points and a dynamic function is created and eval&apos;ed.&#xA;The generated function performs string concatenation of these parts and the passed&#xA;variables instead of using regular expressions.&#xA;&#xA;var html = &apos;{text}&apos;;&#xA;var tpl = new Ext.DomHelper.createTemplate(html);&#xA;tpl.compile();&#xA;//... use template like normal&#xA;&#xA;&#xA;Performance Boost&#xA;DomHelper will transparently create HTML fragments when it can. Using HTML fragments instead&#xA;of DOM can significantly boost performance.&#xA;Element creation specification parameters may also be strings. If {@link #useDom} is false,&#xA;then the string is used as innerHTML. If {@link #useDom} is true, a string specification&#xA;results in the creation of a text node. Usage:&#xA;&#xA;Ext.DomHelper.useDom = true; // force it to use DOM; reduces performance" line="135" name="DomHelper" />
        </scope>
        <variable citdl="Object" doc="A class to provide basic animation and visual effects support.  Note: This class is automatically applied&#xA;to the {@link Ext.Element} interface when included, so all effects calls should be performed via {@link Ext.Element}.&#xA;Conversely, since the effects are not actually defined in {@link Ext.Element}, Ext.Fx must be&#xA;{@link Ext#enableFx included} in order for the Element effects to work.&#xA;&#xA;Method Chaining&#xA;It is important to note that although the Fx methods and many non-Fx Element methods support &quot;method chaining&quot; in that&#xA;they return the Element object itself as the method return value, it is not always possible to mix the two in a single&#xA;method chain.  The Fx methods use an internal effects queue so that each effect can be properly timed and sequenced.&#xA;Non-Fx methods, on the other hand, have no such internal queueing and will always execute immediately.  For this reason,&#xA;while it may be possible to mix certain Fx and non-Fx method calls in a single chain, it may not always provide the&#xA;expected results and should be done with care.  Also see {@link #callback}.&#xA;&#xA;Anchor Options for Motion Effects&#xA;Motion effects support 8-way anchoring, meaning that you can choose one of 8 different anchor points on the Element&#xA;that will serve as either the start or end point of the animation.  Following are all of the supported anchor positions:&#xA;Value  Description&#xA;-----  -----------------------------&#xA;tl     The top left corner&#xA;t      The center of the top edge&#xA;tr     The top right corner&#xA;l      The center of the left edge&#xA;r      The center of the right edge&#xA;bl     The bottom left corner&#xA;b      The center of the bottom edge&#xA;br     The bottom right corner&#xA;Note: some Fx methods accept specific custom config parameters.  The options shown in the Config Options&#xA;section below are common options that can be passed to any Fx method unless otherwise noted." line="136" lineend="1107" name="Fx">
          <scope ilk="function" line="140" lineend="142" name="switchStatements" returns="fn.apply()" signature="switchStatements(key, fn, argHash)">
            <variable ilk="argument" name="key" />
            <variable ilk="argument" name="fn" />
            <variable ilk="argument" name="argHash" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Slides the element into view.  An anchor point can be optionally passed to set the point of&#xA;origin for the slide effect.  This function automatically handles wrapping the element with&#xA;a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;&#xA;// default: slide the element in from the top&#xA;el.slideIn();&#xA;// custom: slide the element in from the right with a 2-second duration&#xA;el.slideIn(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideIn(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});" ilk="function" line="166" lineend="258" name="slideIn" returns="Ext.Element" signature="slideIn(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="180" name="me" />
            <variable attributes="__local__ private" line="180" name="b" />
            <variable attributes="__local__ private" line="180" name="pt" />
            <variable attributes="__local__ private" citdl="fly().switchStatements()" line="180" name="args" />
            <variable attributes="__local__ private" citdl="me.dom" line="180" name="dom" />
            <variable attributes="__local__ private" line="180" name="after" />
            <variable attributes="__local__ private" line="180" name="bh" />
            <variable attributes="__local__ private" citdl="dom.style" line="180" name="st" />
            <variable attributes="__local__ private" citdl="fly().fxWrap()" line="180" name="wrap" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="180" name="r" />
            <variable attributes="__local__ private" line="180" name="bw" />
            <variable attributes="__local__ private" citdl="fly().getXY()" line="180" name="xy" />
            <scope attributes="__local__ private" ilk="function" line="184" lineend="256" name="(anonymous)" signature="(anonymous)()">
              <variable citdl="Object" line="191" lineend="191" name="b">
                <variable citdl="dom.offsetHeight" line="191" name="height" />
                <variable citdl="dom.offsetWidth" line="191" name="width" />
                <variable citdl="xy[1]" line="191" name="y" />
                <variable citdl="xy[0]" line="191" name="x" />
                <variable citdl="b.x" line="192" name="right" />
                <variable citdl="b.y" line="193" name="bottom" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="205" lineend="210" name="after" signature="after()" />
              <variable citdl="Object" line="213" lineend="213" name="pt">
                <variable citdl="Array" line="213" name="to" />
              </variable>
              <variable citdl="Object" line="214" lineend="214" name="bw">
                <variable citdl="b.width" line="214" name="to" />
              </variable>
              <variable citdl="Object" line="215" lineend="215" name="bh">
                <variable citdl="b.height" line="215" name="to" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="217" lineend="234" name="argCalc" returns="ret" signature="argCalc(wrap, style, ww, wh, sXY, sXYval, s1, s2, w, h, p)">
                <variable ilk="argument" name="wrap" />
                <variable citdl="style[s2]" ilk="argument" name="style" />
                <variable ilk="argument" name="ww" />
                <variable ilk="argument" name="wh" />
                <variable ilk="argument" name="sXY" />
                <variable ilk="argument" name="sXYval" />
                <variable ilk="argument" name="s1" />
                <variable ilk="argument" name="s2" />
                <variable ilk="argument" name="w" />
                <variable ilk="argument" name="h" />
                <variable ilk="argument" name="p" />
                <variable attributes="__local__ private" citdl="Object" line="218" lineend="218" name="ret">
                  <variable citdl="w" line="225" name="width" />
                  <variable citdl="h" line="228" name="height" />
                  <variable citdl="p" line="231" name="points" />
                </variable>
              </scope>
            </scope>
          </scope>
          <scope doc="Slides the element out of view.  An anchor point can be optionally passed to set the end point&#xA;for the slide effect.  When the effect is completed, the element will be hidden (visibility =&#xA;&apos;hidden&apos;) but block elements will still take up space in the document.  The element must be removed&#xA;from the DOM using the &apos;remove&apos; config option if desired.  This function automatically handles&#xA;wrapping the element with a fixed-size container if needed.  See the Fx class overview for valid anchor point options.&#xA;Usage:&#xA;&#xA;// default: slide the element out to the top&#xA;el.slideOut();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.slideOut(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.slideOut(&apos;t&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="286" lineend="360" name="slideOut" returns="Ext.Element" signature="slideOut(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to top: &apos;t&apos;)" ilk="argument" name="anchor" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="296" name="me" />
            <variable attributes="__local__ private" citdl="fly().switchStatements()" line="296" name="a" />
            <variable attributes="__local__ private" citdl="me.getXY()" line="296" name="xy" />
            <variable attributes="__local__ private" citdl="me.dom" line="296" name="dom" />
            <variable attributes="__local__ private" citdl="dom.style" line="296" name="st" />
            <variable attributes="__local__ private" citdl="Object" line="296" lineend="296" name="zero">
              <variable citdl="Number" line="296" name="to" />
            </variable>
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="296" name="r" />
            <variable attributes="__local__ private" citdl="fly().fxWrap()" line="296" name="wrap" />
            <variable attributes="__local__ private" line="296" name="b" />
            <scope attributes="__local__ private" ilk="function" line="300" lineend="358" name="(anonymous)" signature="(anonymous)()">
              <variable citdl="Object" line="304" lineend="304" name="b">
                <variable citdl="dom.offsetHeight" line="304" name="height" />
                <variable citdl="dom.offsetWidth" line="304" name="width" />
                <variable citdl="xy[1]" line="304" name="y" />
                <variable citdl="xy[0]" line="304" name="x" />
                <variable citdl="b.x" line="305" name="right" />
                <variable citdl="b.y" line="306" name="bottom" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="318" lineend="324" name="after" signature="after()" />
              <scope attributes="__local__ private" ilk="function" line="326" lineend="339" name="argCalc" returns="ret" signature="argCalc(style, s1, s2, p1, v1, p2, v2, p3, v3)">
                <variable citdl="style[s2]" ilk="argument" name="style" />
                <variable ilk="argument" name="s1" />
                <variable ilk="argument" name="s2" />
                <variable ilk="argument" name="p1" />
                <variable ilk="argument" name="v1" />
                <variable ilk="argument" name="p2" />
                <variable ilk="argument" name="v2" />
                <variable ilk="argument" name="p3" />
                <variable ilk="argument" name="v3" />
                <variable attributes="__local__ private" citdl="Object" line="327" lineend="327" name="ret" />
              </scope>
            </scope>
          </scope>
          <scope doc="Fades the element out while slowly expanding it in all directions.  When the effect is completed, the&#xA;element will be hidden (visibility = &apos;hidden&apos;) but block elements will still take up space in the document.&#xA;The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;&#xA;// default&#xA;el.puff();&#xA;// common config options shown with default values&#xA;el.puff({&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="382" lineend="424" name="puff" returns="Ext.Element" signature="puff(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="389" name="me" />
            <variable attributes="__local__ private" citdl="me.dom" line="389" name="dom" />
            <variable attributes="__local__ private" citdl="fly().getHeight()" line="389" name="height" />
            <variable attributes="__local__ private" citdl="fly().getWidth()" line="389" name="width" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="389" name="r" />
            <variable attributes="__local__ private" citdl="dom.style" line="389" name="st" />
            <scope attributes="__local__ private" ilk="function" line="391" lineend="422" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="400" lineend="408" name="after" signature="after()" />
            </scope>
          </scope>
          <scope doc="Blinks the element as if it was clicked and then collapses on its center (similar to switching off a television).&#xA;When the effect is completed, the element will be hidden (visibility = &apos;hidden&apos;) but block elements will still&#xA;take up space in the document. The element must be removed from the DOM using the &apos;remove&apos; config option if desired.&#xA;Usage:&#xA;&#xA;// default&#xA;el.switchOff();&#xA;// all config options shown with default values&#xA;el.switchOff({&#xA;easing: &apos;easeIn&apos;,&#xA;duration: .3,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="446" lineend="490" name="switchOff" returns="Ext.Element" signature="switchOff(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="451" name="me" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="451" name="r" />
            <variable attributes="__local__ private" citdl="dom.style" line="451" name="st" />
            <variable attributes="__local__ private" citdl="me.dom" line="451" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="453" lineend="488" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="460" lineend="467" name="after" signature="after()" />
              <scope attributes="__local__ private" ilk="function" line="474" lineend="487" name="(anonymous)" signature="(anonymous)()">
                <scope attributes="__local__ private" ilk="function" line="476" lineend="486" name="(anonymous)" signature="(anonymous)()" />
              </scope>
            </scope>
          </scope>
          <scope doc="Highlights the Element by setting a color (applies to the background-color by default, but can be&#xA;changed using the &quot;attr&quot; config option) and then fading back to the original color. If no original&#xA;color is available, you should provide the &quot;endColor&quot; config option which will be cleared after the animation.&#xA;Usage:&#xA;// default: highlight background to yellow&#xA;el.highlight();&#xA;// custom: highlight foreground text to blue for 2 seconds&#xA;el.highlight(&quot;0000ff&quot;, { attr: &apos;color&apos;, duration: 2 });&#xA;// common config options shown with default values&#xA;el.highlight(&quot;ffff9c&quot;, {&#xA;attr: &quot;background-color&quot;, //can be any valid CSS property (attribute) that supports a color value&#xA;endColor: (current color) or &quot;ffffff&quot;,&#xA;easing: &apos;easeIn&apos;,&#xA;duration: 1&#xA;});" ilk="function" line="516" lineend="542" name="highlight" returns="Ext.Element" signature="highlight(color, o)">
            <variable citdl="String" doc="(optional) The highlight color. Should be a 6 char hex color without the leading # (defaults to yellow: &apos;ffff9c&apos;)" ilk="argument" name="color" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="521" name="me" />
            <variable attributes="__local__ private" citdl="Object" line="521" lineend="521" name="a" />
            <variable attributes="__local__ private" citdl="o.attr" line="521" name="attr" />
            <variable attributes="__local__ private" citdl="me.dom" line="521" name="dom" />
            <variable attributes="__local__ private" citdl="dom.style[attr]" line="522" name="restore" />
            <scope attributes="__local__ private" ilk="function" line="524" lineend="540" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="528" lineend="531" name="after" signature="after()" />
            </scope>
          </scope>
          <scope doc="Shows a ripple of exploding, attenuating borders to draw attention to an Element.&#xA;Usage:&#xA;// default: a single light blue ripple&#xA;el.frame();&#xA;// custom: 3 red ripples lasting 3 seconds total&#xA;el.frame(&quot;ff0000&quot;, 3, { duration: 3 });&#xA;// common config options shown with default values&#xA;el.frame(&quot;C3DAF9&quot;, 1, {&#xA;duration: 1 //duration of each individual ripple.&#xA;// Note: Easing is not configurable and will be ignored if included&#xA;});" ilk="function" line="565" lineend="629" name="frame" returns="Ext.Element" signature="frame(color, count, o)">
            <variable citdl="String" doc="(optional) The color of the border.  Should be a 6 char hex color without the leading # (defaults to light blue: &apos;C3DAF9&apos;)." ilk="argument" name="color" />
            <variable citdl="Number" doc="(optional) The number of ripples to display (defaults to 1)" ilk="argument" name="count" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="570" name="me" />
            <variable attributes="__local__ private" citdl="proxy.anim()" line="570" name="active" />
            <variable attributes="__local__ private" citdl="fly().createChild()" line="570" name="proxy" />
            <variable attributes="__local__ private" citdl="me.dom" line="570" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="572" lineend="627" name="(anonymous)" signature="(anonymous)()">
              <variable attributes="__local__ private" citdl="fly().getXY()" line="581" name="xy" />
              <variable attributes="__local__ private" citdl="Object" line="581" lineend="581" name="b">
                <variable citdl="xy[1]" line="581" name="y" />
                <variable citdl="xy[0]" line="581" name="x" />
                <variable citdl="dom.offsetHeight" line="581" name="height" />
                <variable citdl="dom.offsetWidth" line="581" name="width" />
              </variable>
              <scope attributes="__local__ private" ilk="function" line="582" lineend="592" name="queue" returns="proxy.queueFx()" signature="queue()" />
              <scope attributes="__local__ private" ilk="function" line="603" lineend="625" name="animFn" signature="animFn()">
                <variable attributes="__local__ private" citdl="Ext.isBorderBox" line="604" name="scale" />
              </scope>
            </scope>
          </scope>
          <scope doc="Creates a pause before any subsequent queued effects begin.  If there are&#xA;no effects queued after the pause it will have no effect.&#xA;Usage:&#xA;el.pause(1);" ilk="function" line="641" lineend="658" name="pause" returns="Ext.Element" signature="pause(seconds)">
            <variable citdl="Number" doc="The length of time to pause (in seconds)" ilk="argument" name="seconds" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="setTimeout()" line="643" name="t" />
            <variable attributes="__local__ private" citdl="this.dom" line="643" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="645" lineend="656" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="646" lineend="648" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Fade an element in (from transparent to opaque).  The ending opacity can be specified&#xA;using the {@link #endOpacity} config option.&#xA;Usage:&#xA;// default: fade in from opacity 0 to 100%&#xA;el.fadeIn();&#xA;// custom: fade in from opacity 0 to 75% over 2 seconds&#xA;el.fadeIn({ endOpacity: .75, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeIn({&#xA;endOpacity: 1, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5&#xA;});" ilk="function" line="681" lineend="700" name="fadeIn" returns="Ext.Element" signature="fadeIn(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="685" name="me" />
            <variable attributes="__local__ private" citdl="o.endOpacity" line="685" name="to" />
            <variable attributes="__local__ private" citdl="me.dom" line="685" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="687" lineend="698" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="692" lineend="697" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Fade an element out (from opaque to transparent).  The ending opacity can be specified&#xA;using the {@link #endOpacity} config option.  Note that IE may require&#xA;{@link #useDisplay}:true in order to redisplay correctly.&#xA;Usage:&#xA;// default: fade out from the element&apos;s current opacity to 0&#xA;el.fadeOut();&#xA;// custom: fade out from the element&apos;s current opacity to 25% over 2 seconds&#xA;el.fadeOut({ endOpacity: .25, duration: 2});&#xA;// common config options shown with default values&#xA;el.fadeOut({&#xA;endOpacity: 0, //can be any value between 0 and 1 (e.g. .5)&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="726" lineend="752" name="fadeOut" returns="Ext.Element" signature="fadeOut(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="731" name="me" />
            <variable attributes="__local__ private" citdl="o.endOpacity" line="731" name="to" />
            <variable attributes="__local__ private" citdl="dom.style" line="731" name="style" />
            <variable attributes="__local__ private" citdl="me.dom" line="731" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="733" lineend="750" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="740" lineend="749" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Animates the transition of an element&apos;s dimensions from a starting height/width&#xA;to an ending height/width.  This method is a convenience implementation of {@link shift}.&#xA;Usage:&#xA;// change height and width to 100x100 pixels&#xA;el.scale(100, 100);&#xA;// common config options shown with default values.  The height and width will default to&#xA;// the element&amp;#39;s existing values if passed as null.&#xA;el.scale(&#xA;[element&amp;#39;s width],&#xA;[element&amp;#39;s height], {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35" ilk="function" line="777" lineend="783" name="scale" returns="Ext.Element" signature="scale(w, h, o)">
            <variable ilk="argument" name="w" />
            <variable ilk="argument" name="h" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Animates the transition of any combination of an element&apos;s dimensions, xy position and/or opacity.&#xA;Any of these properties not specified in the config object will not be changed.  This effect&#xA;requires that at least one new dimension, position or opacity setting must be passed in on&#xA;the config object in order for the function to have any effect.&#xA;Usage:&#xA;// slide the element horizontally to x position 200 while changing the height and opacity&#xA;el.shift({ x: 200, height: 50, opacity: .8 });&#xA;// common config options shown with default values.&#xA;el.shift({&#xA;width: [element&amp;#39;s width],&#xA;height: [element&amp;#39;s height],&#xA;x: [element&amp;#39;s x position],&#xA;y: [element&amp;#39;s y position],&#xA;opacity: [element&amp;#39;s opacity],&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .35&#xA;});" ilk="function" line="809" lineend="840" name="shift" returns="Ext.Element" signature="shift(o)">
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Object" line="812" lineend="812" name="a">
              <variable citdl="a.xy" line="826" name="points" />
            </variable>
            <variable attributes="__local__ private" citdl="this.dom" line="812" name="dom" />
            <scope attributes="__local__ private" ilk="function" line="814" lineend="838" name="(anonymous)" signature="(anonymous)()">
              <variable citdl="Array" line="826" name="to" />
              <scope attributes="__local__ private" ilk="function" line="835" lineend="837" name="(anonymous)" signature="(anonymous)()" />
            </scope>
          </scope>
          <scope doc="Slides the element while fading it out of view.  An anchor point can be optionally passed to set the&#xA;ending point of the effect.&#xA;Usage:&#xA;&#xA;// default: slide the element downward while fading out&#xA;el.ghost();&#xA;// custom: slide the element out to the right with a 2-second duration&#xA;el.ghost(&apos;r&apos;, { duration: 2 });&#xA;// common config options shown with default values&#xA;el.ghost(&apos;b&apos;, {&#xA;easing: &apos;easeOut&apos;,&#xA;duration: .5,&#xA;remove: false,&#xA;useDisplay: false&#xA;});" ilk="function" line="865" lineend="911" name="ghost" returns="Ext.Element" signature="ghost(anchor, o)">
            <variable citdl="String" doc="(optional) One of the valid Fx anchor positions (defaults to bottom: &apos;b&apos;)" ilk="argument" name="anchor" />
            <variable citdl="getObject()" ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="870" name="me" />
            <variable attributes="__local__ private" citdl="Object" line="870" lineend="870" name="a">
              <variable citdl="Object" line="870" lineend="870" name="opacity">
                <variable citdl="Number" line="870" name="to" />
              </variable>
              <variable citdl="Object" line="870" lineend="870" name="points" />
            </variable>
            <variable attributes="__local__ private" citdl="me.dom" line="870" name="dom" />
            <variable attributes="__local__ private" citdl="dom.style" line="870" name="st" />
            <variable attributes="__local__ private" citdl="a.points" line="871" name="pt" />
            <variable attributes="__local__ private" citdl="fly().getFxRestore()" line="872" name="r" />
            <variable attributes="__local__ private" citdl="fly().getWidth()" line="873" name="w" />
            <variable attributes="__local__ private" citdl="fly().getHeight()" line="874" name="h" />
            <scope attributes="__local__ private" ilk="function" line="878" lineend="909" name="(anonymous)" signature="(anonymous)()">
              <scope attributes="__local__ private" ilk="function" line="884" lineend="891" name="after" signature="after()" />
            </scope>
          </scope>
          <scope doc="Ensures that all effects queued after syncFx is called on the element are&#xA;run concurrently.  This is the opposite of {@link #sequenceFx}." ilk="function" line="918" lineend="926" name="syncFx" returns="Ext.Element" signature="syncFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="919" name="me" />
          </scope>
          <scope doc="Ensures that all effects queued after sequenceFx is called on the element are&#xA;run in sequence.  This is the opposite of {@link #syncFx}." ilk="function" line="933" lineend="941" name="sequenceFx" returns="Ext.Element" signature="sequenceFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="934" name="me" />
          </scope>
          <scope ilk="function" line="944" lineend="949" name="nextFx" signature="nextFx()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="getQueue()[0]" line="945" name="ef" />
          </scope>
          <scope doc="Returns true if the element has any effects actively running or queued, else returns false." ilk="function" line="955" lineend="957" name="hasActiveFx" returns="Boolean" signature="hasActiveFx()">
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Stops any running effects and clears the element&apos;s internal effects queue if it contains&#xA;any additional effects that haven&apos;t started yet." ilk="function" line="964" lineend="979" name="stopFx" returns="Ext.Element" signature="stopFx(finish)">
            <variable ilk="argument" name="finish" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="966" name="me" />
            <variable attributes="__local__ private" citdl="me.dom.id" line="966" name="id" />
            <variable attributes="__local__ private" citdl="getQueue()[0]" line="968" name="cur" />
          </scope>
          <scope ilk="function" line="982" lineend="991" name="beforeFx" returns="Boolean" signature="beforeFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
          </scope>
          <scope doc="Returns true if the element is currently blocking so that no other effect can be queued&#xA;until this effect is finished, else returns false if blocking is not set.  This is commonly&#xA;used to ensure that an effect initiated by a user action runs to completion prior to the&#xA;same effect being restarted (e.g., firing only one effect even if the user clicks several times)." ilk="function" line="1000" lineend="1003" name="hasFxBlock" returns="Boolean" signature="hasFxBlock()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="getQueue()" line="1001" name="q" />
          </scope>
          <scope ilk="function" line="1006" lineend="1022" name="queueFx" returns="me" signature="queueFx(o, fn)">
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="fn" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this" line="1007" name="me" />
            <variable attributes="__local__ private" citdl="me.beforeFx()" line="1011" name="run" />
          </scope>
          <scope ilk="function" line="1025" lineend="1048" name="fxWrap" returns="wrap" signature="fxWrap(pos, o, vis)">
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable ilk="argument" name="vis" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="dom.parentNode.insertBefore()" line="1028" name="wrap" />
            <variable attributes="__local__ private" citdl="fly().getXY()" line="1028" name="wrapXY" />
            <variable attributes="__local__ private" citdl="this.dom" line="1028" name="dom" />
            <variable attributes="__local__ private" citdl="document.createElement()" line="1033" name="div" />
          </scope>
          <scope ilk="function" line="1051" lineend="1059" name="fxUnwrap" signature="fxUnwrap(wrap, pos, o)">
            <variable ilk="argument" name="wrap" />
            <variable ilk="argument" name="pos" />
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.dom" line="1052" name="dom" />
          </scope>
          <scope ilk="function" line="1062" lineend="1065" name="getFxRestore" signature="getFxRestore()">
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="this.dom.style" line="1063" name="st" />
          </scope>
          <scope ilk="function" line="1068" lineend="1090" name="afterFx" signature="afterFx(o)">
            <variable ilk="argument" name="o" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" line="1071" name="notConcurrent" />
            <variable attributes="__local__ private" citdl="dom.id" line="1071" name="id" />
            <variable attributes="__local__ private" citdl="this.dom" line="1071" name="dom" />
          </scope>
          <scope ilk="function" line="1093" lineend="1106" name="fxanim" returns="anim" signature="fxanim(args, opt, animType, defaultDur, defaultEase, cb)">
            <variable ilk="argument" name="args" />
            <variable citdl="opt" ilk="argument" name="opt" />
            <variable citdl="animType" ilk="argument" name="animType" />
            <variable ilk="argument" name="defaultDur" />
            <variable ilk="argument" name="defaultEase" />
            <variable ilk="argument" name="cb" />
            <variable citdl="Fx" name="this" />
            <variable attributes="__local__ private" citdl="Ext.lib.Anim[animType]()" line="1103" name="anim" />
          </scope>
          <variable citdl="Ext.Fx.scale" line="1110" name="resize" />
        </variable>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: This is the base class for {@link Ext.QuickTip} and {@link Ext.Tooltip} that provides the basic layout and&#xA;positioning that all tip-based classes require. This class can be used directly for simple, statically-positioned&#xA;tips that are displayed programmatically, or it can be extended to provide custom tip implementations." line="136" name="Tip" />
        <variable citdl="Boolean" doc="True to automatically purge event listeners after uncaching an element (defaults to false).&#xA;Note: this only happens if {@link #enableGarbageCollector} is true." line="137" name="enableListenerCollection" />
        <variable citdl="Object" line="144" lineend="144" name="_timers" />
        <scope ilk="function" line="145" lineend="158" name="combine" returns="r" signature="combine()">
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="arguments" line="146" name="as" />
          <variable attributes="__local__ private" citdl="Array" line="146" name="r" />
          <variable attributes="__local__ private" citdl="as.length" line="146" name="l" />
          <variable attributes="__local__ private" citdl="as[i]" line="148" name="a" />
        </scope>
        <scope ilk="function" line="146" lineend="149" name="time" signature="time(name)">
          <variable citdl="name" ilk="argument" name="name" />
          <variable citdl="o" name="this" />
        </scope>
        <variable citdl="Boolean" doc="Indicates whether to use native browser parsing for JSON methods.&#xA;This option is ignored if the browser does not support native JSON methods.&#xA;Note: Native JSON methods will not work with objects that have functions.&#xA;Also, property names must be quoted, otherwise the data will not parse. (Defaults to false)" line="146" name="USE_NATIVE_JSON" />
        <variable citdl="Ext.ComponentMgr.registerType" doc="Shorthand for {@link Ext.ComponentMgr#registerType}" line="149" name="reg" />
        <scope ilk="function" line="151" lineend="160" name="timeEnd" returns="v" signature="timeEnd(name, printResults)">
          <variable citdl="name" ilk="argument" name="name" />
          <variable ilk="argument" name="printResults" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Date" line="152" name="t" />
          <variable attributes="__local__ private" citdl="String.format()" line="154" name="v" />
        </scope>
        <scope doc="Copies all the properties of config to obj if they don&apos;t already exist." ilk="function" line="154" lineend="163" name="applyIf" returns="Object" signature="applyIf(o, c)">
          <variable citdl="c[p]" ilk="argument" name="o" />
          <variable ilk="argument" name="c" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Ext.ComponentMgr.registerPlugin" doc="Shorthand for {@link Ext.ComponentMgr#registerPlugin}" line="158" name="preg" />
        <variable citdl="Ext.ComponentMgr.create" line="159" name="create" />
        <variable citdl="Ext.util.JSON.encode" doc="Shorthand for {@link Ext.util.JSON#encode}" line="165" name="encode" />
        <scope doc="Generates unique ids. If the element already has an id, it is unchanged" ilk="function" line="171" lineend="173" name="id" returns="String" signature="id(el, prefix)">
          <variable citdl="Mixed" doc="(optional) The element to generate an id for" ilk="argument" name="el" />
          <variable citdl="String" doc="(optional) Id prefix (defaults &quot;ext-gen&quot;)" ilk="argument" name="prefix" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Ext.util.JSON.decode" doc="Shorthand for {@link Ext.util.JSON#decode}" line="174" name="decode" />
        <variable citdl="Ext.util.TaskRunner" doc="A static {@link Ext.util.TaskRunner} instance that can be used to start and stop arbitrary tasks.  See&#xA;{@link Ext.util.TaskRunner} for supported methods and task config properties.&#xA;&#xA;// Start a simple clock task that updates a div once per second&#xA;var task = {&#xA;run: function(){&#xA;Ext.fly(&apos;clock&apos;).update(new Date().format(&apos;g:i:s A&apos;));&#xA;interval: 1000 //1 second&#xA;Ext.TaskMgr.start(task);" line="174" name="TaskMgr" />
        <scope doc="Copies a set of named properties fom the source object to the destination object.&#xA;example:&#xA;ImageComponent = Ext.extend(Ext.BoxComponent, {&#xA;initComponent: function() {&#xA;this.autoEl = { tag: &apos;img&apos; };&#xA;MyComponent.superclass.initComponent.apply(this, arguments);&#xA;this.initialBox = Ext.copyTo({}, this.initialConfig, &apos;x,y,width,height&apos;);&#xA;});" ilk="function" line="177" lineend="187" name="copyTo" returns="Object" signature="copyTo(dest, source, names)">
          <variable citdl="source[name]" ilk="argument" name="dest" />
          <variable ilk="argument" name="source" />
          <variable citdl="names.split()" ilk="argument" name="names" />
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="181" lineend="185" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope classrefs="Ext.Template" ilk="class" line="180" lineend="244" name="XTemplate">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: A template class that supports advanced functionality like autofilling arrays, conditional processing with&#xA;basic comparison operators, sub-templates, basic math function support, special built-in template variables,&#xA;inline code execution and more.  XTemplate also provides the templating mechanism built into {@link Ext.DataView}.&#xA;XTemplate supports many special tags and built-in operators that aren&apos;t defined as part of the API, but are&#xA;supported in the templates that can be created.  The following examples demonstrate all of the supported features.&#xA;This is the data object used for reference in each code example:&#xA;&#xA;var data = {&#xA;name: &apos;Jack Slocum&apos;,&#xA;title: &apos;Lead Developer&apos;,&#xA;company: &apos;Ext JS, LLC&apos;,&#xA;email: &apos;jack@extjs.com&apos;,&#xA;address: &apos;4 Red Bulls Drive&apos;,&#xA;city: &apos;Cleveland&apos;,&#xA;state: &apos;Ohio&apos;,&#xA;zip: &apos;44102&apos;,&#xA;drinks: [&apos;Red Bull&apos;, &apos;Coffee&apos;, &apos;Water&apos;],&#xA;kids: [{&#xA;name: &apos;Sara Grace&apos;,&#xA;age:3&#xA;},{&#xA;name: &apos;Zachary&apos;,&#xA;age:2&#xA;},{&#xA;name: &apos;John James&apos;,&#xA;age:0&#xA;&#xA;Auto filling of arraysThe tpl tag and the for operator are used&#xA;to process the provided data object. If for=&quot;.&quot; is specified, the data object provided&#xA;is examined. If the variable in for is an array, it will auto-fill, repeating the template&#xA;block inside the tpl tag for each item in the array:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;.&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data.kids); // pass the kids property of the data object&#xA;&#xA;Scope switchingThe for property can be leveraged to access specified members&#xA;of the provided data object to populate the template:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Title: {title}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Company: {company}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;, // interrogate the kids property within the data&#xA;&apos;&amp;lt;p&gt;{name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;&#xA;Access to parent object from within sub-template scopeWhen processing a sub-template, for example while&#xA;looping through a child array, you can access the parent object&apos;s members via the parent object:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Dad: {parent.name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Array item index and basic math support While processing an array, the special variable {#}&#xA;will provide the current array index + 1 (starts at 1, not 0). Templates also support the basic math operators&#xA;+ - * and / that can be applied directly on numeric data values:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // {#}: {name}&amp;lt;/p&gt;&apos;,  // In 5 Years: {age+5}&amp;lt;/p&gt;&apos;,  // Dad: {parent.name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Auto-rendering of flat arrays Flat arrays that contain values (and not objects) can be auto-rendered&#xA;using the special {.} variable inside a loop.  This variable will represent the value of&#xA;the array at the current index:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;{name}\&apos;s favorite beverages:&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;tpl for=&quot;drinks&quot;&gt;&apos;,&#xA;&apos;&amp;lt;div&gt; - {.}&amp;lt;/div&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Basic conditional logic Using the tpl tag and the if&#xA;operator you can provide conditional checks for deciding whether or not to render specific parts of the template.&#xA;Note that there is no else operator &amp;mdash; if needed, you should use two opposite if statements.&#xA;Properly-encoded attributes are required as seen in the following example:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;age &amp;amp;gt; 1&quot;&gt;&apos;,  // {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Ability to execute arbitrary inline code In an XTemplate, anything between {[ ... ]}  is considered&#xA;code to be executed in the scope of the template. There are some special variables available in that code:&#xA;&#xA;values: The values in the current scope. If you are using scope changing sub-templates, you&#xA;can change what values is.&#xA;parent: The scope (values) of the ancestor template.&#xA;xindex: If you are in a looping template, the index of the loop you are in (1-based).&#xA;xcount: If you are in a looping template, the total length of the array you are looping.&#xA;fm: An alias for Ext.util.Format.&#xA;&#xA;This example demonstrates basic row striping using an inline code block and the xindex variable:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Company: {[values.company.toUpperCase() + &quot;, &quot; + values.title]}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;div class=&quot;{[xindex % 2 === 0 ? &quot;even&quot; : &quot;odd&quot;]}&quot;&gt;&apos;,&#xA;&apos;{name}&apos;,&#xA;&apos;&amp;lt;/div&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;&#xA;tpl.overwrite(panel.body, data);&#xA;Template member functions One or more member functions can be defined directly on the config&#xA;object passed into the XTemplate constructor for more complex processing:&#xA;&#xA;var tpl = new Ext.XTemplate(&#xA;&apos;&amp;lt;p&gt;Name: {name}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Kids: &apos;,&#xA;&apos;&amp;lt;tpl for=&quot;kids&quot;&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isGirl(name)&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Girl: {name} - {age}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isGirl(name) == false&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;Boy: {name} - {age}&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;tpl if=&quot;this.isBaby(age)&quot;&gt;&apos;,&#xA;&apos;&amp;lt;p&gt;{name} is a baby!&amp;lt;/p&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&apos;,&#xA;&apos;&amp;lt;/tpl&gt;&amp;lt;/p&gt;&apos;, {&#xA;isGirl: function(name){&#xA;return name == &apos;Sara Grace&apos;;&#xA;isBaby: function(age){&#xA;return age" ilk="function" line="180" lineend="244" name="XTemplate" signature="XTemplate()">
            <variable citdl="XTemplate" name="this" />
            <variable attributes="__local__ private" citdl="String" line="197" name="RETURN" />
            <variable attributes="__local__ private" citdl="Number" line="197" name="id" />
            <variable attributes="__local__ private" line="197" name="re" />
            <variable attributes="__local__ private" line="197" name="nameRe" />
            <variable attributes="__local__ private" line="197" name="execRe" />
            <variable attributes="__local__ private" citdl="String" line="197" name="PARENT" />
            <variable attributes="__local__ private" citdl="Array" line="197" name="tpls" />
            <variable attributes="__local__ private" citdl="String" line="197" name="WITHVALUES" />
            <variable attributes="__local__ private" citdl="String" line="197" name="XINDEX" />
            <variable attributes="__local__ private" citdl="this" line="197" name="me" />
            <variable attributes="__local__ private" citdl="String" line="197" name="XCOUNT" />
            <variable attributes="__local__ private" line="197" name="m" />
            <variable attributes="__local__ private" line="197" name="ifRe" />
            <variable attributes="__local__ private" citdl="me.html" line="197" name="s" />
            <variable attributes="__local__ private" citdl="String" line="197" name="VALUES" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="208" name="m4" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="208" name="m3" />
            <variable attributes="__local__ private" citdl="m[0].match()" line="208" name="m2" />
            <variable attributes="__local__ private" citdl="Function" line="208" name="exec" />
            <variable attributes="__local__ private" citdl="Function" line="208" name="fn" />
            <variable attributes="__local__ private" citdl="m2" line="208" name="name" />
            <variable attributes="__local__ private" citdl="m3" line="208" name="exp" />
            <scope attributes="__local__ private" ilk="function" line="239" lineend="241" name="(anonymous)" signature="(anonymous)()" />
          </scope>
          <variable line="247" name="re" />
          <variable line="249" name="codeRe" />
          <scope ilk="function" line="252" lineend="272" name="applySubTemplate" returns="t.compiled.call()" signature="applySubTemplate(id, values, parent, xindex, xcount)">
            <variable ilk="argument" name="id" />
            <variable ilk="argument" name="values" />
            <variable citdl="t.target" ilk="argument" name="parent" />
            <variable ilk="argument" name="xindex" />
            <variable ilk="argument" name="xcount" />
            <variable attributes="__local__ private" citdl="this" line="257" name="me" />
            <variable attributes="__local__ private" citdl="t.target" line="257" name="vs" />
            <variable attributes="__local__ private" citdl="Array" line="257" name="buf" />
            <variable attributes="__local__ private" citdl="me.tpls[id]" line="257" name="t" />
            <variable attributes="__local__ private" citdl="vs.length" line="257" name="len" />
          </scope>
          <scope ilk="function" line="275" lineend="329" name="compileTpl" returns="this" signature="compileTpl(tpl)">
            <variable ilk="argument" name="tpl" />
            <variable attributes="__local__ private" citdl="String" line="279" name="body" />
            <variable attributes="__local__ private" citdl="this.disableFormats" line="279" name="useF" />
            <variable attributes="__local__ private" citdl="Ext.util.Format" line="279" name="fm" />
            <variable attributes="__local__ private" citdl="Ext.isGecko" line="279" name="sep" />
            <scope attributes="__local__ private" ilk="function" line="281" lineend="310" name="fn" returns="String" signature="fn(m, name, format, args, math)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="name" />
              <variable citdl="String" ilk="argument" name="format" />
              <variable citdl="String" ilk="argument" name="args" />
              <variable ilk="argument" name="math" />
              <variable attributes="__local__ private" citdl="String" line="285" name="v" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="312" lineend="314" name="codeFn" returns="String" signature="codeFn(m, code)">
              <variable ilk="argument" name="m" />
              <variable ilk="argument" name="code" />
            </scope>
          </scope>
          <scope doc="Returns an HTML fragment of this template with the specified values applied." ilk="function" line="336" lineend="338" name="applyTemplate" returns="String" signature="applyTemplate(values)">
            <variable citdl="Object" doc="The template values. Can be an array if your params are numeric (i.e. {0}) or an object (i.e. {foo: &apos;bar&apos;})" ilk="argument" name="values" />
          </scope>
          <scope doc="Compile the template to a function for optimized performance.  Recommended if the template will be used frequently." ilk="function" line="344" lineend="344" name="compile" returns="Function" signature="compile()" />
          <scope attributes="__static__" doc="STATIC: Creates a template from the passed element&apos;s value (display:none textarea, preferred) or innerHTML." ilk="function" line="376" lineend="379" name="from" returns="Ext.Template" signature="from(el)">
            <variable citdl="String/HTMLElement" doc="A DOM element or its id" ilk="argument" name="el" />
            <variable citdl="XTemplate" name="this" />
          </scope>
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized SplitButton that contains a menu of {@link Ext.menu.CheckItem} elements.  The button automatically&#xA;cycles through each menu item on click, raising the button&apos;s {@link #change} event (or calling the button&apos;s&#xA;{@link #changeHandler} function, if supplied) for the active menu item. Clicking on the arrow section of the&#xA;button displays the dropdown menu just like a normal SplitButton.  Example usage:&#xA;&#xA;var btn = new Ext.CycleButton({&#xA;showText: true,&#xA;prependText: &apos;View as &apos;,&#xA;items: [{&#xA;text:&apos;text only&apos;,&#xA;iconCls:&apos;view-text&apos;,&#xA;checked:true&#xA;},{&#xA;text:&apos;HTML&apos;,&#xA;iconCls:&apos;view-html&apos;&#xA;}],&#xA;changeHandler:function(btn, item){&#xA;Ext.Msg.alert(&apos;Change View&apos;, item.text);&#xA;});" line="187" name="CycleButton" />
        <variable citdl="Ext.WindowGroup" doc="The default global window group that is available automatically.  To have more than one group of windows&#xA;with separate z-order stacks, create additional instances of {@link Ext.WindowGroup} as needed." line="187" name="WindowMgr" />
        <variable citdl="Ext.Element.select" doc="Selects elements based on the passed CSS selector to enable {@link Ext.Element Element} methods&#xA;to be applied to many related elements in one statement through the returned {@link Ext.CompositeElement CompositeElement} or&#xA;{@link Ext.CompositeElementLite CompositeElementLite} object." line="197" name="select" />
        <scope doc="Attempts to destroy any objects passed to it by removing all event listeners, removing them from the&#xA;DOM (if applicable) and calling their destroy functions (if available).  This method is primarily&#xA;intended for arguments of type {@link Ext.Element} and {@link Ext.Component}, but any subclass of&#xA;{@link Ext.util.Observable} can be passed in.  Any number of elements and/or components can be&#xA;passed into this function in a single call as separate arguments." ilk="function" line="199" lineend="211" name="destroy" signature="destroy()">
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="200" lineend="210" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable doc="History management component that allows you to register arbitrary tokens that signify application&#xA;history state on navigation actions.  You can then handle the history {@link #change} event in order&#xA;to reset your application UI to the appropriate state when the user navigates forward or backward through&#xA;the browser history stack." line="202" name="History" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized tooltip class for tooltips that can be specified in markup and automatically managed by the global&#xA;{@link Ext.QuickTips} instance.  See the QuickTips class header for additional usage details and examples." line="207" name="QuickTip" />
        <variable doc="Extends one class with another class and optionally overrides members with the passed literal. This class&#xA;also adds the function &quot;override()&quot; to the class that can be used to override&#xA;members on an instance.&#xA;*&#xA;This function also supports a 2-argument call in which the subclass&apos;s constructor is&#xA;not passed as an argument. In this form, the parameters are as follows:&#xA;&#xA;superclass&#xA;The class being extended&#xA;overrides&#xA;A literal with members which are copied into the subclass&apos;s&#xA;prototype, and are therefore shared among all instances of the new class.&#xA;This may contain a special member named constructor. This is used&#xA;to define the constructor of the new class, and is returned. If this property is&#xA;not specified, a constructor is generated and returned which just calls the&#xA;superclass&apos;s constructor passing on its parameters.&#xA;&#xA;For example, to create a subclass of the Ext GridPanel:&#xA;&#xA;MyGridPanel = Ext.extend(Ext.grid.GridPanel, {&#xA;constructor: function(config) {&#xA;// Your preprocessing here&#xA;MyGridPanel.superclass.constructor.apply(this, arguments);&#xA;// Your postprocessing here&#xA;yourMethod: function() {&#xA;// etc.&#xA;});" line="215" name="extend" />
        <scope doc="Attempts to destroy and then remove a set of named properties of the passed object." ilk="function" line="219" lineend="224" name="destroyMembers" signature="destroyMembers(o, arg1, arg2, etc)">
          <variable citdl="Object" doc="The object (most likely a Component) who&apos;s properties you wish to destroy." ilk="argument" name="o" />
          <variable citdl="Mixed" doc="The name of the property to destroy and remove from the object." ilk="argument" name="arg1" />
          <variable ilk="argument" name="arg2" />
          <variable ilk="argument" name="etc" />
          <variable citdl="o" name="this" />
        </scope>
        <scope doc="Creates a copy of the passed Array with falsy values removed." ilk="function" line="231" lineend="239" name="clean" returns="Array" signature="clean(arr)">
          <variable citdl="Array/NodeList" doc="The Array from which to remove falsy values." ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="232" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="233" lineend="237" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope doc="Creates a copy of the passed Array, filtered to contain only unique values." ilk="function" line="246" lineend="257" name="unique" returns="Array" signature="unique(arr)">
          <variable citdl="Array" doc="The Array to filter" ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="248" lineend="248" name="collect" />
          <variable attributes="__local__ private" citdl="Array" line="248" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="250" lineend="255" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Object" line="259" name="layout">
          <scope classrefs="Object" ilk="class" line="18" lineend="214" name="ContainerLayout">
            <scope attributes="__ctor__" doc="The ContainerLayout class is the default layout manager delegated by {@link Ext.Container} to&#xA;render any child Components when no {@link Ext.Container#layout layout} is configured into&#xA;a {@link Ext.Container Container}. ContainerLayout provides the basic foundation for all other layout&#xA;classes in Ext. It simply renders all child Components into the Container, performing no sizing or&#xA;positioning services. To utilize a layout that provides sizing and positioning of child Components,&#xA;specify an appropriate {@link Ext.Container#layout layout}.&#xA;This class is intended to be extended or created via the {@link Ext.Container#layout layout}&#xA;configuration property.  See {@link Ext.Container#layout} for additional details." ilk="function" line="18" lineend="20" name="ContainerLayout" signature="ContainerLayout(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <variable citdl="Ext.Component" doc="An optional extra CSS class that will be added to the container. This can be useful for adding&#xA;customized styles to the container or any of its children using standard CSS rules. See&#xA;{@link Ext.Component}.{@link Ext.Component#ctCls ctCls} also.&#xA;Note: extraCls defaults to &apos;&apos; except for the following classes&#xA;which assign a value by default:&#xA;&#xA;{@link Ext.layout.AbsoluteLayout Absolute Layout} : &apos;x-abs-layout-item&apos;&#xA;{@link Ext.layout.Box Box Layout} : &apos;x-box-item&apos;&#xA;{@link Ext.layout.ColumnLayout Column Layout} : &apos;x-column&apos;&#xA;&#xA;To configure the above Classes with an extra CSS class append to the default.  For example,&#xA;for ColumnLayout:&#xA;extraCls: &apos;x-column custom-class&apos;&#xA;&#xA;&#xA;&#xA;*/// private" line="58" name="monitorResize" />
            <variable line="60" name="activeItem" />
            <scope ilk="function" line="63" lineend="67" name="layout" signature="layout()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="this.container.getLayoutTarget()" line="64" name="target" />
            </scope>
            <scope ilk="function" line="70" lineend="72" name="onLayout" signature="onLayout(ct, target)">
              <variable ilk="argument" name="ct" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="75" lineend="77" name="isValidParent" returns="target" signature="isValidParent(c, target)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="80" lineend="88" name="renderAll" signature="renderAll(ct, target)">
              <variable ilk="argument" name="ct" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="ct.items.items" line="81" name="items" />
              <variable attributes="__local__ private" citdl="items[i]" line="83" name="c" />
            </scope>
            <scope ilk="function" line="91" lineend="103" name="renderItem" signature="renderItem(c, position, target)">
              <variable ilk="argument" name="c" />
              <variable citdl="target.dom.childNodes[position]" ilk="argument" name="position" />
              <variable ilk="argument" name="target" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="106" lineend="117" name="configureItem" signature="configureItem(c, position)">
              <variable ilk="argument" name="c" />
              <variable ilk="argument" name="position" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="c.getPositionEl" line="108" name="t" />
            </scope>
            <scope ilk="function" line="120" lineend="134" name="onResize" signature="onResize()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="this.container.bufferResize" line="124" name="b" />
            </scope>
            <variable citdl="Ext.util.DelayedTask" line="127" name="resizeTask" />
            <variable line="128" name="resizeBuffer" />
            <scope ilk="function" line="137" lineend="140" name="runLayout" signature="runLayout()">
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <scope ilk="function" line="143" lineend="158" name="setContainer" signature="setContainer(ct)">
              <variable ilk="argument" name="ct" />
              <variable citdl="ContainerLayout" name="this" />
            </scope>
            <variable citdl="ct" line="157" name="container" />
            <scope ilk="function" line="161" lineend="185" name="parseMargins" signature="parseMargins(v)">
              <variable citdl="v.toString()" ilk="argument" name="v" />
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="v.split()" line="165" name="ms" />
              <variable attributes="__local__ private" citdl="ms.length" line="166" name="len" />
            </scope>
            <scope attributes="__local__ private" ilk="function" line="196" lineend="206" name="(anonymous)" returns="t.compile()" signature="(anonymous)()">
              <variable citdl="ContainerLayout" name="this" />
              <variable attributes="__local__ private" citdl="Ext.Template" line="203" name="t" />
            </scope>
            <variable citdl="Ext.Template" doc="The {@link Template Ext.Template} used by Field rendering layout classes (such as&#xA;{@link Ext.layout.FormLayout}) to create the DOM structure of a fully wrapped,&#xA;labeled and styled form Field. A default Template is supplied, but this may be&#xA;overriden to create custom field structures. The template processes values returned from&#xA;{@link Ext.layout.FormLayout#getTemplateArgs}." line="206" name="fieldTpl" />
            <variable citdl="Ext.emptyFn" line="213" name="destroy" />
          </scope>
          <variable citdl="Object" line="28" name="MenuLayout" />
          <variable citdl="Ext.extend()" doc="This is a base class for layouts that contain a single item that automatically expands to fill the layout&apos;s&#xA;container.  This class is intended to be extended or created via the layout:&apos;fit&apos; {@link Ext.Container#layout}&#xA;config, and should generally not need to be created directly via the new keyword.&#xA;FitLayout does not have any direct config options (other than inherited ones).  To fit a panel to a container&#xA;using FitLayout, simply set layout:&apos;fit&apos; on the container and add a single panel to it.  If the container has&#xA;multiple panels, only the first one will be displayed.  Example usage:&#xA;&#xA;var p = new Ext.Panel({&#xA;title: &apos;Fit Layout&apos;,&#xA;layout:&apos;fit&apos;,&#xA;items: {&#xA;title: &apos;Inner Panel&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;This is the inner panel content&amp;lt;/p&amp;gt;&apos;,&#xA;border: false&#xA;});" line="47" name="FitLayout" />
          <variable citdl="Ext.extend()" doc="This is a layout that inherits the anchoring of {@link Ext.layout.AnchorLayout} and adds the&#xA;ability for x/y positioning using the standard x and y component config options.&#xA;This class is intended to be extended or created via the {@link Ext.Container#layout layout}&#xA;configuration property.  See {@link Ext.Container#layout} for additional details.&#xA;Example usage:&#xA;&#xA;var form = new Ext.form.FormPanel({&#xA;title: &apos;Absolute Layout&apos;,&#xA;layout:&apos;absolute&apos;,&#xA;layoutConfig: {&#xA;// layout-specific configs go here&#xA;extraCls: &apos;x-abs-layout-item&apos;,&#xA;baseCls: &apos;x-plain&apos;,&#xA;url:&apos;save-form.php&apos;,&#xA;defaultType: &apos;textfield&apos;,&#xA;items: [{&#xA;x: 0,&#xA;y: 5,&#xA;xtype:&apos;label&apos;,&#xA;text: &apos;Send To:&apos;&#xA;},{&#xA;x: 60,&#xA;y: 0,&#xA;name: &apos;to&apos;,&#xA;anchor:&apos;100%&apos;  // anchor width by percentage&#xA;},{&#xA;x: 0,&#xA;y: 35,&#xA;xtype:&apos;label&apos;,&#xA;text: &apos;Subject:&apos;&#xA;},{&#xA;x: 60,&#xA;y: 30,&#xA;name: &apos;subject&apos;,&#xA;anchor: &apos;100%&apos;  // anchor width by percentage&#xA;},{&#xA;x:0,&#xA;y: 60,&#xA;xtype: &apos;textarea&apos;,&#xA;name: &apos;msg&apos;,&#xA;anchor: &apos;100% 100%&apos;  // anchor width and height&#xA;});" line="81" name="AbsoluteLayout" />
          <variable citdl="Ext.extend()" doc="Base Class for HBoxLayout and VBoxLayout Classes. Generally it should not need to be used directly." line="107" name="BoxLayout" />
          <variable citdl="Ext.extend()" doc="This layout manages multiple child Components, each fitted to the Container, where only a single child Component can be&#xA;visible at any given time.  This layout style is most commonly used for wizards, tab implementations, etc.&#xA;This class is intended to be extended or created via the layout:&apos;card&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&#xA;The CardLayout&apos;s focal method is {@link #setActiveItem}.  Since only one panel is displayed at a time,&#xA;the only way to move from one Component to the next is by calling setActiveItem, passing the id or index of&#xA;the next panel to display.  The layout itself does not provide a user interface for handling this navigation,&#xA;so that functionality must be provided by the developer.&#xA;In the following example, a simplistic wizard setup is demonstrated.  A button bar is added&#xA;to the footer of the containing panel to provide navigation buttons.  The buttons will be handled by a&#xA;common navigation routine -- for this example, the implementation of that routine has been ommitted since&#xA;it can be any type of custom logic.  Note that other uses of a CardLayout (like a tab control) would require a&#xA;completely different implementation.  For serious implementations, a better approach would be to extend&#xA;CardLayout to provide the custom functionality needed.  Example usage:&#xA;&#xA;var navHandler = function(direction){&#xA;// This routine could contain business logic required to manage the navigation steps.&#xA;// It would call setActiveItem as needed, manage navigation button state, handle any&#xA;// branching logic that might be required, handle alternate actions like cancellation&#xA;// or finalization, etc.  A complete wizard implementation could get pretty&#xA;// sophisticated depending on the complexity required, and should probably be&#xA;// done as a subclass of CardLayout in a real-world implementation.&#xA;var card = new Ext.Panel({&#xA;title: &apos;Example Wizard&apos;,&#xA;layout:&apos;card&apos;,&#xA;activeItem: 0, // make sure the active item is set on the container config!&#xA;bodyStyle: &apos;padding:15px&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;border:false&#xA;// just an example of one possible navigation scheme, using buttons&#xA;bbar: [&#xA;id: &apos;move-prev&apos;,&#xA;text: &apos;Back&apos;,&#xA;handler: navHandler.createDelegate(this, [-1]),&#xA;disabled: true&#xA;&apos;-&gt;&apos;, // greedy spacer so that the buttons are aligned to each side&#xA;id: &apos;move-next&apos;,&#xA;text: &apos;Next&apos;,&#xA;handler: navHandler.createDelegate(this, [1])&#xA;// the panels (or &quot;cards&quot;) within the layout&#xA;items: [{&#xA;id: &apos;card-0&apos;,&#xA;html: &apos;&amp;lt;h1&amp;gt;Welcome to the Wizard!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 1 of 3&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;id: &apos;card-1&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Step 2 of 3&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;id: &apos;card-2&apos;,&#xA;html: &apos;&amp;lt;h1&amp;gt;Congratulations!&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Step 3 of 3 - Complete&amp;lt;/p&amp;gt;&apos;&#xA;});" line="126" name="CardLayout" />
          <variable citdl="Ext.extend()" doc="This is the layout style of choice for creating structural layouts in a multi-column format where the width of&#xA;each column can be specified as a percentage or fixed width, but the height is allowed to vary based on the content.&#xA;This class is intended to be extended or created via the layout:&apos;column&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&#xA;ColumnLayout does not have any direct config options (other than inherited ones), but it does support a&#xA;specific config property of columnWidth that can be included in the config of any panel added to it.  The&#xA;layout will use the columnWidth (if present) or width of each panel during layout to determine how to size each panel.&#xA;If width or columnWidth is not specified for a given panel, its width will default to the panel&apos;s width (or auto).&#xA;The width property is always evaluated as pixels, and must be a number greater than or equal to 1.&#xA;The columnWidth property is always evaluated as a percentage, and must be a decimal value greater than 0 and&#xA;less than 1 (e.g., .25).&#xA;The basic rules for specifying column widths are pretty simple.  The logic makes two passes through the&#xA;set of contained panels.  During the first layout pass, all panels that either have a fixed width or none&#xA;specified (auto) are skipped, but their widths are subtracted from the overall container width.  During the second&#xA;pass, all panels with columnWidths are assigned pixel widths in proportion to their percentages based on&#xA;the total remaining container width.  In other words, percentage width panels are designed to fill the space&#xA;left over by all the fixed-width and/or auto-width panels.  Because of this, while you can specify any number of columns&#xA;with different percentages, the columnWidths must always add up to 1 (or 100%) when added together, otherwise your&#xA;layout may not render as expected.  Example usage:&#xA;&#xA;// All columns are percentages -- they must add up to 1&#xA;var p = new Ext.Panel({&#xA;title: &apos;Column Layout - Percentage Only&apos;,&#xA;layout:&apos;column&apos;,&#xA;items: [{&#xA;title: &apos;Column 1&apos;,&#xA;columnWidth: .25&#xA;},{&#xA;title: &apos;Column 2&apos;,&#xA;columnWidth: .6&#xA;},{&#xA;title: &apos;Column 3&apos;,&#xA;columnWidth: .15&#xA;});&#xA;// Mix of width and columnWidth -- all columnWidth values must add up&#xA;// to 1. The first column will take up exactly 120px, and the last two&#xA;// columns will fill the remaining container width.&#xA;var p = new Ext.Panel({&#xA;title: &apos;Column Layout - Mixed&apos;,&#xA;layout:&apos;column&apos;,&#xA;items: [{&#xA;title: &apos;Column 1&apos;,&#xA;width: 120&#xA;},{&#xA;title: &apos;Column 2&apos;,&#xA;columnWidth: .8&#xA;},{&#xA;title: &apos;Column 3&apos;,&#xA;columnWidth: .2&#xA;});" line="128" name="ColumnLayout" />
          <variable citdl="Ext.extend()" doc="This is a layout that contains multiple panels in an expandable accordion style such that only&#xA;one panel can be open at any given time.  Each panel has built-in support for expanding and collapsing.&#xA;This class is intended to be extended or created via the {@link Ext.Container#layout layout}&#xA;configuration property.  See {@link Ext.Container#layout} for additional details.&#xA;Example usage:&#xA;&#xA;var accordion = new Ext.Panel({&#xA;title: &apos;Accordion Layout&apos;,&#xA;layout:&apos;accordion&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;bodyStyle: &apos;padding:15px&apos;&#xA;layoutConfig: {&#xA;// layout-specific configs go here&#xA;titleCollapse: false,&#xA;animate: true,&#xA;activeOnTop: true&#xA;items: [{&#xA;title: &apos;Panel 1&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;title: &apos;Panel 2&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;},{&#xA;title: &apos;Panel 3&apos;,&#xA;html: &apos;&amp;lt;p&amp;gt;Panel content!&amp;lt;/p&amp;gt;&apos;&#xA;});" line="173" name="AccordionLayout" />
          <variable citdl="Ext.layout.AccordionLayout" line="177" name="Accordion" />
          <variable citdl="Ext.extend()" doc="This layout allows you to easily render content into an HTML table.  The total number of columns can be&#xA;specified, and rowspan and colspan can be used to create complex layouts within the table.&#xA;This class is intended to be extended or created via the layout:&apos;table&apos; {@link Ext.Container#layout} config,&#xA;and should generally not need to be created directly via the new keyword.&#xA;Note that when creating a layout via config, the layout-specific config properties must be passed in via&#xA;the {@link Ext.Container#layoutConfig} object which will then be applied internally to the layout.  In the&#xA;case of TableLayout, the only valid layout config property is {@link #columns}.  However, the items added to a&#xA;TableLayout can supply the following table-specific config properties:&#xA;&#xA;rowspan Applied to the table cell containing the item.&#xA;colspan Applied to the table cell containing the item.&#xA;cellId An id applied to the table cell containing the item.&#xA;cellCls A CSS class name added to the table cell containing the item.&#xA;&#xA;The basic concept of building up a TableLayout is conceptually very similar to building up a standard&#xA;HTML table.  You simply add each panel (or &quot;cell&quot;) that you want to include along with any span attributes&#xA;specified as the special config properties of rowspan and colspan which work exactly like their HTML counterparts.&#xA;Rather than explicitly creating and nesting rows and columns as you would in HTML, you simply specify the&#xA;total column count in the layoutConfig and start adding panels in their natural order from left to right,&#xA;top to bottom.  The layout will automatically figure out, based on the column count, rowspans and colspans,&#xA;how to position each panel within the table.  Just like with HTML tables, your rowspans and colspans must add&#xA;up correctly in your overall layout or you&apos;ll end up with missing and/or extra cells!  Example usage:&#xA;&#xA;// This code will generate a layout table that is 3 columns by 2 rows&#xA;// with some spanning included.  The basic layout will be:&#xA;// +--------+-----------------+&#xA;// |   A    |   B             |&#xA;// |        |--------+--------|&#xA;// |        |   C    |   D    |&#xA;// +--------+--------+--------+&#xA;var table = new Ext.Panel({&#xA;title: &apos;Table Layout&apos;,&#xA;layout:&apos;table&apos;,&#xA;defaults: {&#xA;// applied to each contained panel&#xA;bodyStyle:&apos;padding:20px&apos;&#xA;layoutConfig: {&#xA;// The total column count must be specified here&#xA;columns: 3&#xA;items: [{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell A content&amp;lt;/p&amp;gt;&apos;,&#xA;rowspan: 2&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell B content&amp;lt;/p&amp;gt;&apos;,&#xA;colspan: 2&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell C content&amp;lt;/p&amp;gt;&apos;,&#xA;cellCls: &apos;highlight&apos;&#xA;},{&#xA;html: &apos;&amp;lt;p&amp;gt;Cell D content&amp;lt;/p&amp;gt;&apos;&#xA;});" line="192" name="TableLayout" />
          <variable citdl="Ext.extend()" doc="This is a layout that enables anchoring of contained elements relative to the container&apos;s dimensions.&#xA;If the container is resized, all anchored items are automatically rerendered according to their&#xA;{@link #anchor} rules.&#xA;This class is intended to be extended or created via the layout:&apos;anchor&apos; {@link Ext.Container#layout}&#xA;config, and should generally not need to be created directly via the new keyword.&#xA;AnchorLayout does not have any direct config options (other than inherited ones). By default,&#xA;AnchorLayout will calculate anchor measurements based on the size of the container itself. However, the&#xA;container using the AnchorLayout can supply an anchoring-specific config property of anchorSize.&#xA;If anchorSize is specifed, the layout will use it as a virtual container for the purposes of calculating&#xA;anchor measurements based on it instead, allowing the container to be sized independently of the anchoring&#xA;logic if necessary.  For example:&#xA;&#xA;var viewport = new Ext.Viewport({&#xA;layout:&apos;anchor&apos;,&#xA;anchorSize: {width:800, height:600},&#xA;items:[{&#xA;title:&apos;Item 1&apos;,&#xA;html:&apos;Content 1&apos;,&#xA;width:800,&#xA;anchor:&apos;right 20%&apos;&#xA;},{&#xA;title:&apos;Item 2&apos;,&#xA;html:&apos;Content 2&apos;,&#xA;width:300,&#xA;anchor:&apos;50% 30%&apos;&#xA;},{&#xA;title:&apos;Item 3&apos;,&#xA;html:&apos;Content 3&apos;,&#xA;width:600,&#xA;anchor:&apos;-100 50%&apos;&#xA;});" line="199" name="AnchorLayout" />
          <variable citdl="Ext.extend()" doc="Layout manager implicitly used by Ext.Toolbar." line="251" name="ToolbarLayout" />
          <variable citdl="Object" line="259" name="BorderLayout">
            <scope classrefs="Object" ilk="class" line="235" lineend="869" name="Region">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a region of a {@link Ext.layout.BorderLayout BorderLayout} that acts as a subcontainer&#xA;within the layout.  Each region has its own {@link Ext.layout.ContainerLayout layout} that is&#xA;independent of other regions and the containing BorderLayout, and can be any of the&#xA;{@link Ext.layout.ContainerLayout valid Ext layout types}.&#xA;Region size is managed automatically and cannot be changed by the user -- for&#xA;{@link #split resizable regions}, see {@link Ext.layout.BorderLayout.SplitRegion}." ilk="function" line="235" lineend="255" name="Region" signature="Region(layout, config, pos)">
                <variable citdl="Layout" doc="The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region." ilk="argument" name="layout" />
                <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
                <variable ilk="argument" name="pos" />
                <variable citdl="Region" name="this" />
              </scope>
              <variable citdl="layout" line="237" name="layout" />
              <variable citdl="pos" line="238" name="position" />
              <variable citdl="Object" line="239" lineend="239" name="state">
                <variable citdl="Boolean" line="528" name="collapsed" />
              </variable>
              <variable citdl="this.layout.parseMargins()" line="241" name="margins" />
              <variable citdl="this.layout.parseMargins()" line="246" lineend="249" name="cmargins" />
              <variable citdl="Boolean" doc="When a collapsed region&apos;s bar is clicked, the region&apos;s panel will be displayed as a floated&#xA;panel that will close again once the user mouses out of that panel (or clicks out if&#xA;{@link #autoHide} = false).  Setting {@link #animFloat} = false will&#xA;prevent the open and close of these floated panels from being animated (defaults to true).&#xA;&#xA;&#xA;top: (top margin),&#xA;right: (right margin),&#xA;bottom: (bottom margin),&#xA;left: (left margin)&#xA;&#xA;&#xA;&#xA;top: (top margin),&#xA;right: (right margin),&#xA;bottom: (bottom margin),&#xA;left: (left margin)" line="342" name="collapsible" />
              <variable citdl="Boolean" doc="true to create a {@link Ext.layout.BorderLayout.SplitRegion SplitRegion} and&#xA;display a 5px wide {@link Ext.SplitBar} between this region and its neighbor, allowing the user to&#xA;resize the regions dynamically.  Defaults to false creating a&#xA;{@link Ext.layout.BorderLayout.Region Region}.&#xA;Notes:&#xA;this configuration option is ignored if region=&apos;center&apos;&#xA;when split == true, it is common to specify a&#xA;{@link Ext.SplitBar#minSize minSize} and {@link Ext.SplitBar#maxSize maxSize}&#xA;for the {@link Ext.BoxComponent BoxComponent} representing the region. These are not native&#xA;configs of {@link Ext.BoxComponent BoxComponent}, and are used only by this class.&#xA;if {@link #collapseMode} = &apos;mini&apos; requires split = true to reserve space&#xA;for the collapse tool" line="359" name="split" />
              <variable citdl="Boolean" doc="true to allow clicking a collapsed region&apos;s bar to display the region&apos;s panel floated&#xA;above the layout, false to force the user to fully expand a collapsed region by&#xA;clicking the expand button to see it again (defaults to true)." line="366" name="floatable" />
              <variable citdl="Number" doc="The minimum allowable width in pixels for this region (defaults to 50).&#xA;maxWidth may also be specified.&#xA;Note: setting the {@link Ext.SplitBar#minSize minSize} /&#xA;{@link Ext.SplitBar#maxSize maxSize} supersedes any specified&#xA;minWidth / maxWidth." line="375" name="minWidth" />
              <variable citdl="Number" doc="The minimum allowable height in pixels for this region (defaults to 50)&#xA;maxHeight may also be specified.&#xA;Note: setting the {@link Ext.SplitBar#minSize minSize} /&#xA;{@link Ext.SplitBar#maxSize maxSize} supersedes any specified&#xA;minHeight / maxHeight." line="384" name="minHeight" />
              <variable citdl="Object" line="387" lineend="387" name="defaultMargins">
                <variable citdl="Number" line="387" name="top" />
                <variable citdl="Number" line="387" name="right" />
                <variable citdl="Number" line="387" name="bottom" />
                <variable citdl="Number" line="387" name="left" />
              </variable>
              <variable citdl="Object" line="389" lineend="389" name="defaultNSCMargins">
                <variable citdl="Number" line="389" name="top" />
                <variable citdl="Number" line="389" name="right" />
                <variable citdl="Number" line="389" name="bottom" />
                <variable citdl="Number" line="389" name="left" />
              </variable>
              <variable citdl="Object" line="391" lineend="391" name="defaultEWCMargins">
                <variable citdl="Number" line="391" name="top" />
                <variable citdl="Number" line="391" name="right" />
                <variable citdl="Number" line="391" name="bottom" />
                <variable citdl="Number" line="391" name="left" />
              </variable>
              <variable citdl="Number" line="392" name="floatingZIndex" />
              <variable citdl="Boolean" doc="True if this region is collapsed. Read-only." line="399" name="isCollapsed" />
              <scope citdl="String" doc="This region&apos;s panel.  Read-only.&#xA;*/// private" ilk="function" line="418" lineend="449" name="render" signature="render(ct, p)">
                <variable ilk="argument" name="ct" />
                <variable ilk="argument" name="p" />
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.position" line="424" name="ps" />
                <variable attributes="__local__ private" citdl="p.getState" line="424" name="gs" />
              </scope>
              <variable citdl="p" line="419" name="panel" />
              <variable citdl="ct" line="421" name="targetEl" />
              <variable citdl="p.el" line="422" name="el" />
              <scope ilk="function" line="452" lineend="491" name="getCollapsedEl" returns="this.collapsedEl" signature="getCollapsedEl()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="Ext.Template" line="457" name="tt" />
                <variable attributes="__local__ private" citdl="this.toolTemplate.append()" line="480" name="t" />
              </scope>
              <variable citdl="this.targetEl.createChild()" line="465" name="collapsedEl" />
              <variable citdl="this.collapsedEl.createChild()" line="472" name="miniCollapsedEl" />
              <scope ilk="function" line="494" lineend="501" name="onExpandClick" signature="onExpandClick(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="504" lineend="506" name="onCollapseClick" signature="onCollapseClick(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="509" lineend="518" name="beforeCollapse" signature="beforeCollapse(p, animate)">
                <variable ilk="argument" name="p" />
                <variable ilk="argument" name="animate" />
                <variable citdl="Region" name="this" />
              </scope>
              <variable citdl="animate" line="510" name="lastAnim" />
              <scope ilk="function" line="521" lineend="530" name="onCollapse" signature="onCollapse(animate)">
                <variable ilk="argument" name="animate" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="533" lineend="544" name="beforeExpand" signature="beforeExpand(animate)">
                <variable ilk="argument" name="animate" />
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.getCollapsedEl()" line="534" name="c" />
              </scope>
              <scope ilk="function" line="547" lineend="556" name="onExpand" signature="onExpand()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="559" lineend="567" name="collapseClick" signature="collapseClick(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="570" lineend="576" name="onHide" signature="onHide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="579" lineend="585" name="onShow" signature="onShow()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="True if this region is currently visible, else false." ilk="function" line="591" lineend="593" name="isVisible" returns="Boolean" signature="isVisible()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the current margins for this region.  If the region is collapsed, the&#xA;{@link #cmargins} (collapsed margins) value will be returned, otherwise the&#xA;{@link #margins} value will be returned." ilk="function" line="602" lineend="604" name="getMargins" returns="Object" signature="getMargins()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the current size of this region.  If the region is collapsed, the size of the&#xA;collapsedEl will be returned, otherwise the size of the region&apos;s panel will be returned." ilk="function" line="612" lineend="614" name="getSize" returns="Object" signature="getSize()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Sets the specified panel as the container element for this region." ilk="function" line="620" lineend="622" name="setPanel" signature="setPanel(panel)">
                <variable citdl="Ext.Panel" doc="The new panel" ilk="argument" name="panel" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the minimum allowable width for this region." ilk="function" line="628" lineend="630" name="getMinWidth" returns="Number" signature="getMinWidth()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="Returns the minimum allowable height for this region." ilk="function" line="636" lineend="638" name="getMinHeight" returns="Number" signature="getMinHeight()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="641" lineend="645" name="applyLayoutCollapsed" signature="applyLayoutCollapsed(box)">
                <variable ilk="argument" name="box" />
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.getCollapsedEl()" line="642" name="ce" />
              </scope>
              <scope ilk="function" line="648" lineend="655" name="applyLayout" signature="applyLayout(box)">
                <variable ilk="argument" name="box" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="658" lineend="660" name="beforeSlide" signature="beforeSlide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="663" lineend="665" name="afterSlide" signature="afterSlide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="668" lineend="686" name="initAutoHide" signature="initAutoHide()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="Ext.util.DelayedTask" line="671" name="st" />
              </scope>
              <variable citdl="Object" line="672" lineend="682" name="autoHideHd">
                <scope ilk="function" line="673" lineend="677" name="mouseout" signature="mouseout(e)">
                  <variable ilk="argument" name="e" />
                  <variable citdl="autoHideHd" name="this" />
                </scope>
                <scope ilk="function" line="678" lineend="680" name="mouseover" signature="mouseover(e)">
                  <variable ilk="argument" name="e" />
                  <variable citdl="autoHideHd" name="this" />
                </scope>
                <variable citdl="this" line="681" name="scope" />
              </variable>
              <scope ilk="function" line="689" lineend="694" name="clearAutoHide" signature="clearAutoHide()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="697" lineend="699" name="clearMonitor" signature="clearMonitor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope doc="If this Region is {@link #floatable}, this method slides this Region into full visibility over the top&#xA;of the center Region where it floats until either {@link #slideIn} is called, or other regions of the layout&#xA;are clicked, or the mouse exits the Region." ilk="function" line="706" lineend="740" name="slideOut" signature="slideOut()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.panel.tools" line="711" name="ts" />
              </scope>
              <variable citdl="Boolean" line="710" name="isSlid" />
              <variable citdl="Array" line="721" name="restoreLT" />
              <scope ilk="function" line="743" lineend="756" name="afterSlideIn" signature="afterSlideIn()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.panel.tools" line="752" name="ts" />
              </scope>
              <scope doc="If this Region is {@link #floatable}, and this Region has been slid into floating visibility, then this method slides&#xA;this region back into its collapsed state." ilk="function" line="762" lineend="784" name="slideIn" signature="slideIn(cb)">
                <variable ilk="argument" name="cb" />
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="787" lineend="791" name="slideInIf" signature="slideInIf(e)">
                <variable ilk="argument" name="e" />
                <variable citdl="Region" name="this" />
              </scope>
              <variable citdl="Object" line="794" lineend="799" name="anchors">
                <variable citdl="String" line="795" name="west" />
                <variable citdl="String" line="796" name="east" />
                <variable citdl="String" line="797" name="north" />
                <variable citdl="String" line="798" name="south" />
              </variable>
              <variable citdl="Object" line="802" lineend="807" name="sanchors">
                <variable citdl="String" line="803" name="west" />
                <variable citdl="String" line="804" name="east" />
                <variable citdl="String" line="805" name="north" />
                <variable citdl="String" line="806" name="south" />
              </variable>
              <variable citdl="Object" line="810" lineend="815" name="canchors">
                <variable citdl="String" line="811" name="west" />
                <variable citdl="String" line="812" name="east" />
                <variable citdl="String" line="813" name="north" />
                <variable citdl="String" line="814" name="south" />
              </variable>
              <scope ilk="function" line="818" lineend="820" name="getAnchor" returns="this.anchors[this.position]" signature="getAnchor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="823" lineend="825" name="getCollapseAnchor" returns="this.canchors[this.position]" signature="getCollapseAnchor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="828" lineend="830" name="getSlideAnchor" returns="this.sanchors[this.position]" signature="getSlideAnchor()">
                <variable citdl="Region" name="this" />
              </scope>
              <scope ilk="function" line="833" lineend="849" name="getAlignAdj" returns="Array" signature="getAlignAdj()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.cmargins" line="834" name="cm" />
              </scope>
              <scope ilk="function" line="852" lineend="868" name="getExpandAdj" returns="Array" signature="getExpandAdj()">
                <variable citdl="Region" name="this" />
                <variable attributes="__local__ private" citdl="this.collapsedEl" line="853" name="c" />
                <variable attributes="__local__ private" citdl="this.cmargins" line="853" name="cm" />
              </scope>
            </scope>
            <variable citdl="Object" line="259" name="SplitRegion">
              <variable citdl="Object" line="259" name="prototype">
                <variable citdl="String" line="290" name="splitTip" />
                <variable citdl="String" line="291" name="collapsibleSplitTip" />
              </variable>
            </variable>
            <scope classrefs="Ext.layout.BorderLayout.Region" ilk="class" line="884" lineend="888" name="SplitRegion">
              <scope attributes="__ctor__" doc="CONSTRUCTOR: This is a specialized type of {@link Ext.layout.BorderLayout.Region BorderLayout region} that&#xA;has a built-in {@link Ext.SplitBar} for user resizing of regions.  The movement of the split bar&#xA;is configurable to move either {@link #tickSize smooth or incrementally}." ilk="function" line="884" lineend="888" name="SplitRegion" signature="SplitRegion(layout, config, pos)">
                <variable citdl="Layout" doc="The {@link Ext.layout.BorderLayout BorderLayout} instance that is managing this Region." ilk="argument" name="layout" />
                <variable citdl="Object" doc="The configuration options" ilk="argument" name="config" />
                <variable ilk="argument" name="pos" />
                <variable citdl="SplitRegion" name="this" />
              </scope>
              <variable citdl="this.applyFns[pos]" line="887" name="applyLayout" />
              <variable citdl="String" doc="The increment, in pixels by which to move this Region&apos;s {@link Ext.SplitBar SplitBar}.&#xA;By default, the {@link Ext.SplitBar SplitBar} moves smoothly." line="903" name="splitTip" />
              <variable citdl="String" doc="The tooltip to display when the user hovers over a&#xA;{@link Ext.layout.BorderLayout.Region#collapsible collapsible} region&apos;s split bar&#xA;(defaults to &quot;Drag to resize. Double click to hide.&quot;). Only applies if&#xA;{@link #useSplitTips} = true." line="911" name="collapsibleSplitTip" />
              <variable citdl="Boolean" doc="true to display a tooltip when the user hovers over a region&apos;s split bar&#xA;(defaults to false).  The tooltip text will be the value of either&#xA;{@link #splitTip} or {@link #collapsibleSplitTip} as appropriate." line="918" name="useSplitTips" />
              <variable citdl="Object" line="921" lineend="950" name="splitSettings">
                <variable citdl="Object" line="922" lineend="928" name="north">
                  <variable citdl="Ext.SplitBar.VERTICAL" line="923" name="orientation" />
                  <variable citdl="Ext.SplitBar.TOP" line="924" name="placement" />
                  <variable citdl="String" line="925" name="maxFn" />
                  <variable citdl="String" line="926" name="minProp" />
                  <variable citdl="String" line="927" name="maxProp" />
                </variable>
                <variable citdl="Object" line="929" lineend="935" name="south">
                  <variable citdl="Ext.SplitBar.VERTICAL" line="930" name="orientation" />
                  <variable citdl="Ext.SplitBar.BOTTOM" line="931" name="placement" />
                  <variable citdl="String" line="932" name="maxFn" />
                  <variable citdl="String" line="933" name="minProp" />
                  <variable citdl="String" line="934" name="maxProp" />
                </variable>
                <variable citdl="Object" line="936" lineend="942" name="east">
                  <variable citdl="Ext.SplitBar.HORIZONTAL" line="937" name="orientation" />
                  <variable citdl="Ext.SplitBar.RIGHT" line="938" name="placement" />
                  <variable citdl="String" line="939" name="maxFn" />
                  <variable citdl="String" line="940" name="minProp" />
                  <variable citdl="String" line="941" name="maxProp" />
                </variable>
                <variable citdl="Object" line="943" lineend="949" name="west">
                  <variable citdl="Ext.SplitBar.HORIZONTAL" line="944" name="orientation" />
                  <variable citdl="Ext.SplitBar.LEFT" line="945" name="placement" />
                  <variable citdl="String" line="946" name="maxFn" />
                  <variable citdl="String" line="947" name="minProp" />
                  <variable citdl="String" line="948" name="maxProp" />
                </variable>
              </variable>
              <variable citdl="Object" line="953" lineend="1002" name="applyFns">
                <scope ilk="function" line="954" lineend="965" name="west" returns="this.applyLayoutCollapsed()" signature="west(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="958" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="958" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetWidth" line="960" name="sw" />
                </scope>
                <scope ilk="function" line="966" lineend="977" name="east" returns="this.applyLayoutCollapsed()" signature="east(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="970" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="970" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetWidth" line="971" name="sw" />
                </scope>
                <scope ilk="function" line="978" lineend="989" name="north" returns="this.applyLayoutCollapsed()" signature="north(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="982" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="982" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetHeight" line="983" name="sh" />
                </scope>
                <scope ilk="function" line="990" lineend="1001" name="south" returns="this.applyLayoutCollapsed()" signature="south(box)">
                  <variable ilk="argument" name="box" />
                  <variable citdl="applyFns" name="this" />
                  <variable attributes="__local__ private" citdl="sd.style" line="994" name="s" />
                  <variable attributes="__local__ private" citdl="this.splitEl.dom" line="994" name="sd" />
                  <variable attributes="__local__ private" citdl="sd.offsetHeight" line="995" name="sh" />
                </scope>
              </variable>
              <scope ilk="function" line="1005" lineend="1044" name="render" signature="render(ct, p)">
                <variable ilk="argument" name="ct" />
                <variable ilk="argument" name="p" />
                <variable attributes="__local__ private" citdl="this.position" line="1008" name="ps" />
                <variable attributes="__local__ private" citdl="this.splitSettings[ps]" line="1023" name="s" />
              </scope>
              <variable citdl="ct.createChild()" line="1013" name="splitEl" />
              <variable citdl="this.splitEl.createChild()" line="1018" name="miniSplitEl" />
              <variable citdl="Ext.SplitBar" line="1025" name="split" />
              <variable line="1031" name="useShim" />
              <variable citdl="this.maxSize" line="1032" name="maxSize" />
              <scope ilk="function" line="1047" lineend="1058" name="getSize" returns="s" signature="getSize()">
                <variable attributes="__local__ private" citdl="this.panel.getSize()" line="1051" name="s" />
              </scope>
              <scope ilk="function" line="1061" lineend="1065" name="getHMaxSize" returns="Math.min()" signature="getHMaxSize()">
                <variable attributes="__local__ private" citdl="this.maxSize" line="1062" name="cmax" />
                <variable attributes="__local__ private" citdl="this.layout.center" line="1063" name="center" />
              </scope>
              <scope ilk="function" line="1068" lineend="1072" name="getVMaxSize" returns="Math.min()" signature="getVMaxSize()">
                <variable attributes="__local__ private" citdl="this.maxSize" line="1069" name="cmax" />
                <variable attributes="__local__ private" citdl="this.layout.center" line="1070" name="center" />
              </scope>
              <scope ilk="function" line="1075" lineend="1088" name="onSplitMove" returns="Boolean" signature="onSplitMove(split, newSize)">
                <variable ilk="argument" name="split" />
                <variable ilk="argument" name="newSize" />
                <variable attributes="__local__ private" citdl="this.panel.getSize()" line="1076" name="s" />
              </scope>
              <variable citdl="newSize" line="1077" name="lastSplitSize" />
              <scope doc="Returns a reference to the split bar in use by this region." ilk="function" line="1094" lineend="1096" name="getSplitBar" returns="Ext.SplitBar" signature="getSplitBar()" />
              <scope ilk="function" line="1099" lineend="1105" name="destroy" signature="destroy()" />
            </scope>
          </variable>
          <variable citdl="Ext.extend()" doc="A layout that arranges items vertically" line="260" name="VBoxLayout" />
          <variable citdl="Ext.extend()" doc="This layout manager is specifically designed for rendering and managing child Components of&#xA;{@link Ext.form.FormPanel forms}. It is responsible for rendering the labels of&#xA;{@link Ext.form.Field Field}s.&#xA;&#xA;This layout manager is used when a Container is configured with the layout:&apos;form&apos;&#xA;{@link Ext.Container#layout layout} config option, and should generally not need to be created directly&#xA;via the new keyword. See {@link Ext.Container#layout} for additional details.&#xA;&#xA;In an application, it will usually be preferrable to use a {@link Ext.form.FormPanel FormPanel}&#xA;(which is configured with FormLayout as its layout class by default) since it also provides built-in&#xA;functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form.&#xA;&#xA;A {@link Ext.Container Container} using the FormLayout layout manager (e.g.&#xA;{@link Ext.form.FormPanel} or specifying layout:&apos;form&apos;) can also accept the following&#xA;layout-specific config properties:&#xA;{@link Ext.form.FormPanel#hideLabels hideLabels}&#xA;{@link Ext.form.FormPanel#labelAlign labelAlign}&#xA;{@link Ext.form.FormPanel#labelPad labelPad}&#xA;{@link Ext.form.FormPanel#labelSeparator labelSeparator}&#xA;{@link Ext.form.FormPanel#labelWidth labelWidth}&#xA;&#xA;&#xA;Any Component (including Fields) managed by FormLayout accepts the following as a config option:&#xA;&#xA;{@link Ext.Component#anchor anchor}&#xA;&#xA;&#xA;Any Component managed by FormLayout may be rendered as a form field (with an associated label) by&#xA;configuring it with a non-null {@link Ext.Component#fieldLabel fieldLabel}. Components configured&#xA;in this way may be configured with the following options which affect the way the FormLayout renders them:&#xA;&#xA;{@link Ext.Component#clearCls clearCls}&#xA;{@link Ext.Component#fieldLabel fieldLabel}&#xA;{@link Ext.Component#hideLabel hideLabel}&#xA;{@link Ext.Component#itemCls itemCls}&#xA;{@link Ext.Component#labelSeparator labelSeparator}&#xA;{@link Ext.Component#labelStyle labelStyle}&#xA;&#xA;&#xA;Example usage:&#xA;&#xA;// Required if showing validation messages&#xA;Ext.QuickTips.init();&#xA;// While you can create a basic Panel with layout:&apos;form&apos;, practically&#xA;// you should usually use a FormPanel to also get its form functionality&#xA;// since it already creates a FormLayout internally.&#xA;var form = new Ext.form.FormPanel({&#xA;title: &apos;Form Layout&apos;,&#xA;bodyStyle: &apos;padding:15px&apos;,&#xA;width: 350,&#xA;defaultType: &apos;textfield&apos;,&#xA;defaults: {&#xA;// applied to each contained item&#xA;width: 230,&#xA;msgTarget: &apos;side&apos;&#xA;items: [{&#xA;fieldLabel: &apos;First Name&apos;,&#xA;name: &apos;first&apos;,&#xA;allowBlank: false,&#xA;{@link Ext.Component#labelSeparator labelSeparator}: &apos;:&apos; // override labelSeparator layout config&#xA;},{&#xA;fieldLabel: &apos;Last Name&apos;,&#xA;name: &apos;last&apos;&#xA;},{&#xA;fieldLabel: &apos;Email&apos;,&#xA;name: &apos;email&apos;,&#xA;vtype:&apos;email&apos;&#xA;}, {&#xA;xtype: &apos;textarea&apos;,&#xA;hideLabel: true,     // override hideLabels layout config&#xA;name: &apos;msg&apos;,&#xA;anchor: &apos;100% -53&apos;&#xA;buttons: [&#xA;{text: &apos;Save&apos;},&#xA;{text: &apos;Cancel&apos;}&#xA;layoutConfig: {&#xA;{@link #labelSeparator}: &apos;~&apos; // superseded by assignment below&#xA;// config options applicable to container when layout=&apos;form&apos;:&#xA;hideLabels: false,&#xA;labelAlign: &apos;left&apos;,   // or &apos;right&apos; or &apos;top&apos;&#xA;{@link Ext.form.FormPanel#labelSeparator labelSeparator}: &apos;&gt;&gt;&apos;, // takes precedence over layoutConfig value&#xA;labelWidth: 65,       // defaults to 100&#xA;labelPad: 8           // defaults to 5, must specify labelWidth to be honored&#xA;});" line="264" name="FormLayout" />
          <variable citdl="Ext.extend()" doc="A layout that arranges items horizontally" line="415" name="HBoxLayout" />
        </variable>
        <variable citdl="Object" line="261" name="chart">
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: The Ext.chart package provides the capability to visualize data with flash based charting.&#xA;Each chart binds directly to an Ext.data.Store enabling automatic updates of the chart." line="261" name="Chart" />
          <variable attributes="__ctor__" citdl="Ext.extend()" line="297" name="PieChart" />
          <variable attributes="__ctor__" citdl="Ext.extend()" line="358" name="CartesianChart" />
          <variable attributes="__ctor__" citdl="Ext.extend()" line="369" name="LineChart" />
          <variable attributes="__ctor__" citdl="Ext.extend()" line="380" name="ColumnChart" />
          <variable attributes="__ctor__" citdl="Ext.extend()" line="391" name="StackedColumnChart" />
          <variable attributes="__ctor__" citdl="Ext.extend()" line="402" name="BarChart" />
          <variable attributes="__ctor__" citdl="Ext.extend()" line="413" name="StackedBarChart" />
          <scope classrefs="Object" ilk="class" line="423" lineend="469" name="Axis">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Defines a CartesianChart&apos;s vertical or horizontal axis." ilk="function" line="423" lineend="425" name="Axis" signature="Axis(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Axis" name="this" />
            </scope>
            <variable citdl="String" doc="The type of axis." line="435" name="type" />
            <variable citdl="String" doc="The direction in which the axis is drawn. May be &quot;horizontal&quot; or &quot;vertical&quot;." line="443" name="orientation" />
            <variable citdl="Boolean" doc="If true, the items on the axis will be drawn in opposite direction." line="451" name="reverse" />
            <variable citdl="String" doc="A string reference to the globally-accessible function that may be called to&#xA;determine each of the label values for this axis." line="460" name="labelFunction" />
            <variable citdl="Boolean" doc="If true, labels that overlap previously drawn labels on the axis will be hidden." line="468" name="hideOverlappingLabels" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A type of axis whose units are measured in numeric values." line="540" name="NumericAxis" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A type of axis whose units are measured in time-based values." line="610" name="TimeAxis" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A type of axis that displays items in categories." line="628" name="CategoryAxis" />
          <scope classrefs="Object" ilk="class" line="635" lineend="654" name="Series">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Series class for the charts widget." ilk="function" line="635" lineend="635" name="Series" signature="Series(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Series" name="this" />
            </scope>
            <variable citdl="String" doc="The type of series." line="645" name="type" />
            <variable citdl="String" doc="The human-readable name of the series." line="653" name="displayName" />
          </scope>
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: CartesianSeries class for the charts widget." line="678" name="CartesianSeries" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: ColumnSeries class for the charts widget." line="688" name="ColumnSeries" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: LineSeries class for the charts widget." line="698" name="LineSeries" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: BarSeries class for the charts widget." line="708" name="BarSeries" />
          <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: PieSeries class for the charts widget." line="721" name="PieSeries" />
        </variable>
        <scope doc="Recursively flattens into 1-d Array. Injects Arrays inline." ilk="function" line="264" lineend="277" name="flatten" returns="Array" signature="flatten(arr)">
          <variable citdl="Array" doc="The array to flatten" ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="265" name="worker" />
          <scope attributes="__local__ private" ilk="function" line="266" lineend="275" name="rFlatten" returns="worker" signature="rFlatten(a)">
            <variable ilk="argument" name="a" />
            <scope attributes="__local__ private" ilk="function" line="267" lineend="273" name="(anonymous)" signature="(anonymous)()" />
          </scope>
        </scope>
        <scope doc="Adds a list of functions to the prototype of an existing class, overwriting any existing methods with the same name.&#xA;Usage:&#xA;Ext.override(MyClass, {&#xA;newMethod1: function(){&#xA;// etc.&#xA;newMethod2: function(foo){&#xA;// etc.&#xA;});" ilk="function" line="271" lineend="279" name="override" signature="override(origclass, overrides)">
          <variable citdl="Object" doc="The class to override" ilk="argument" name="origclass" />
          <variable citdl="Object" doc="The list of functions to add to origClass.  This should be specified as an object literal&#xA;containing one or more methods." ilk="argument" name="overrides" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="origclass.prototype" line="273" name="p" />
        </scope>
        <scope doc="Returns the minimum value in the Array." ilk="function" line="286" lineend="293" name="min" returns="ret" signature="min(arr, comp)">
          <variable citdl="{Array" doc="The Array from which to select the minimum value." ilk="argument" name="arr" />
          <variable citdl="Function" doc="(optional) a function to perform the comparision which determines minimization.&#xA;If omitted the &quot;" ilk="argument" name="comp" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="arr[0]" line="287" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="289" lineend="291" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Ext.extend()" doc="An updateable progress bar component.  The progress bar supports two different modes: manual and automatic.&#xA;In manual mode, you are responsible for showing, updating (via {@link #updateProgress}) and clearing the&#xA;progress bar as needed from your own code.  This method is most appropriate when you want to show progress&#xA;throughout an operation that has predictable points of interest at which you can update the control.&#xA;In automatic mode, you simply call {@link #wait} and let the progress bar run indefinitely, only clearing it&#xA;once the operation is complete.  You can optionally have the progress bar wait for a specific amount of time&#xA;and then clear itself.  Automatic mode is most appropriate for timed operations or asynchronous operations in&#xA;which you have no need for indicating intermediate progress." line="288" name="ProgressBar" />
        <scope doc="Creates namespaces to be used for scoping variables and classes so that they are not global.&#xA;Specifying the last node of a namespace implicitly creates all other nodes. Usage:&#xA;&#xA;Ext.namespace(&apos;Company&apos;, &apos;Company.data&apos;);&#xA;Ext.namespace(&apos;Company.data&apos;); // equivalent and preferable to above syntax&#xA;Company.Widget = function() { ... }&#xA;Company.data.CustomStore = function(config) { ... }" ilk="function" line="295" lineend="305" name="namespace" returns="o" signature="namespace()">
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="v.split()" line="296" name="d" />
          <variable attributes="__local__ private" citdl="window[d[0]]" line="296" name="o" />
          <scope attributes="__local__ private" ilk="function" line="297" lineend="303" name="(anonymous)" signature="(anonymous)()">
            <scope attributes="__local__ private" ilk="function" line="300" lineend="302" name="(anonymous)" signature="(anonymous)()" />
          </scope>
        </scope>
        <variable citdl="Object" line="300" name="Button">
          <variable citdl="Ext.Template" line="300" name="buttonTemplate" />
        </variable>
        <scope doc="Returns the maximum value in the Array" ilk="function" line="302" lineend="309" name="max" returns="Object" signature="max(arr, comp)">
          <variable citdl="{Array" doc="The Array from which to select the maximum value." ilk="argument" name="arr" />
          <variable citdl="Function" doc="(optional) a function to perform the comparision which determines maximization.&#xA;If omitted the &quot;&gt;&quot; operator will be used. Note: gt = 1; eq = 0; lt = -1" ilk="argument" name="comp" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="arr[0]" line="303" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="305" lineend="307" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Object" line="311" name="SplitLayoutRegion">
          <variable citdl="Object" line="311" name="prototype">
            <variable citdl="String" line="309" name="splitTip" />
            <variable citdl="String" line="310" name="collapsibleSplitTip" />
          </variable>
        </variable>
        <scope doc="Takes an object and converts it to an encoded URL. e.g. Ext.urlEncode({foo: 1, bar: 2}); would return &quot;foo=1&amp;bar=2&quot;.  Optionally, property values can be arrays, instead of keys and the resulting string that&apos;s returned will contain a name/value pair for each array value." ilk="function" line="313" lineend="327" name="urlEncode" returns="String" signature="urlEncode(o, pre)">
          <variable citdl="Object" ilk="argument" name="o" />
          <variable citdl="String" doc="(optional) A prefix to add to the url encoded string" ilk="argument" name="pre" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="encodeURIComponent" line="314" name="e" />
          <variable attributes="__local__ private" line="314" name="undef" />
          <variable attributes="__local__ private" citdl="Array" line="314" name="buf" />
          <variable attributes="__local__ private" line="314" name="key" />
        </scope>
        <scope doc="Calculates the mean of the Array" ilk="function" line="316" lineend="318" name="mean" returns="Number" signature="mean(arr)">
          <variable citdl="Array" doc="The Array to calculate the mean value of." ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
        </scope>
        <scope doc="Calculates the sum of the Array" ilk="function" line="325" lineend="331" name="sum" returns="Number" signature="sum(arr)">
          <variable citdl="Array" doc="The Array to calculate the sum value of." ilk="argument" name="arr" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Number" line="326" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="327" lineend="329" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Standard form container.&#xA;&#xA;Layout&#xA;By default, FormPanel is configured with layout:&apos;form&apos; to use an {@link Ext.layout.FormLayout}&#xA;layout manager, which styles and renders fields and labels correctly. When nesting additional Containers&#xA;within a FormPanel, you should ensure that any descendant Containers which host input Fields use the&#xA;{@link Ext.layout.FormLayout} layout manager.&#xA;&#xA;BasicForm&#xA;Although not listed as configuration options of FormPanel, the FormPanel class accepts all&#xA;of the config options required to configure its internal {@link Ext.form.BasicForm} for:&#xA;&#xA;{@link Ext.form.BasicForm#fileUpload file uploads}&#xA;functionality for {@link Ext.form.BasicForm#doAction loading, validating and submitting} the form&#xA;&#xA;&#xA;Note: If subclassing FormPanel, any configuration options for the BasicForm must be applied to&#xA;the initialConfig property of the FormPanel. Applying {@link Ext.form.BasicForm BasicForm}&#xA;configuration settings to this will not affect the BasicForm&apos;s configuration.&#xA;&#xA;Form Validation&#xA;For information on form validation see the following:&#xA;&#xA;{@link Ext.form.TextField}&#xA;{@link Ext.form.VTypes}&#xA;{@link Ext.form.BasicForm#doAction BasicForm.doAction clientValidation notes}&#xA;{@link Ext.form.FormPanel#monitorValid monitorValid}&#xA;&#xA;&#xA;Form Submission&#xA;By default, Ext Forms are submitted through Ajax, using {@link Ext.form.Action}. To enable normal browser&#xA;submission of the {@link Ext.form.BasicForm BasicForm} contained in this FormPanel, see the&#xA;{@link Ext.form.BasicForm#standardSubmit standardSubmit} option." line="331" name="FormPanel" />
        <variable citdl="Object" line="334" name="EventObjectImpl">
          <variable citdl="Object" line="334" name="prototype">
            <variable citdl="Number" line="127" name="BACKSPACE" />
            <variable citdl="Number" line="129" name="TAB" />
            <variable citdl="Number" line="131" name="NUM_CENTER" />
            <variable citdl="Number" line="133" name="ENTER" />
            <variable citdl="Number" line="135" name="RETURN" />
            <variable citdl="Number" line="137" name="SHIFT" />
            <variable citdl="Number" line="139" name="CTRL" />
            <variable citdl="Number" line="140" name="CONTROL" />
            <variable citdl="Number" line="142" name="ALT" />
            <variable citdl="Number" line="144" name="PAUSE" />
            <variable citdl="Number" line="146" name="CAPS_LOCK" />
            <variable citdl="Number" line="148" name="ESC" />
            <variable citdl="Number" line="150" name="SPACE" />
            <variable citdl="Number" line="152" name="PAGE_UP" />
            <variable citdl="Number" line="153" name="PAGEUP" />
            <variable citdl="Number" line="155" name="PAGE_DOWN" />
            <variable citdl="Number" line="156" name="PAGEDOWN" />
            <variable citdl="Number" line="158" name="END" />
            <variable citdl="Number" line="160" name="HOME" />
            <variable citdl="Number" line="162" name="LEFT" />
            <variable citdl="Number" line="164" name="UP" />
            <variable citdl="Number" line="166" name="RIGHT" />
            <variable citdl="Number" line="168" name="DOWN" />
            <variable citdl="Number" line="170" name="PRINT_SCREEN" />
            <variable citdl="Number" line="172" name="INSERT" />
            <variable citdl="Number" line="174" name="DELETE" />
            <variable citdl="Number" line="176" name="ZERO" />
            <variable citdl="Number" line="178" name="ONE" />
            <variable citdl="Number" line="180" name="TWO" />
            <variable citdl="Number" line="182" name="THREE" />
            <variable citdl="Number" line="184" name="FOUR" />
            <variable citdl="Number" line="186" name="FIVE" />
            <variable citdl="Number" line="188" name="SIX" />
            <variable citdl="Number" line="190" name="SEVEN" />
            <variable citdl="Number" line="192" name="EIGHT" />
            <variable citdl="Number" line="194" name="NINE" />
            <variable citdl="Number" line="196" name="A" />
            <variable citdl="Number" line="198" name="B" />
            <variable citdl="Number" line="200" name="C" />
            <variable citdl="Number" line="202" name="D" />
            <variable citdl="Number" line="204" name="E" />
            <variable citdl="Number" line="206" name="F" />
            <variable citdl="Number" line="208" name="G" />
            <variable citdl="Number" line="210" name="H" />
            <variable citdl="Number" line="212" name="I" />
            <variable citdl="Number" line="214" name="J" />
            <variable citdl="Number" line="216" name="K" />
            <variable citdl="Number" line="218" name="L" />
            <variable citdl="Number" line="220" name="M" />
            <variable citdl="Number" line="222" name="N" />
            <variable citdl="Number" line="224" name="O" />
            <variable citdl="Number" line="226" name="P" />
            <variable citdl="Number" line="228" name="Q" />
            <variable citdl="Number" line="230" name="R" />
            <variable citdl="Number" line="232" name="S" />
            <variable citdl="Number" line="234" name="T" />
            <variable citdl="Number" line="236" name="U" />
            <variable citdl="Number" line="238" name="V" />
            <variable citdl="Number" line="240" name="W" />
            <variable citdl="Number" line="242" name="X" />
            <variable citdl="Number" line="244" name="Y" />
            <variable citdl="Number" line="246" name="Z" />
            <variable citdl="Number" line="248" name="CONTEXT_MENU" />
            <variable citdl="Number" line="250" name="NUM_ZERO" />
            <variable citdl="Number" line="252" name="NUM_ONE" />
            <variable citdl="Number" line="254" name="NUM_TWO" />
            <variable citdl="Number" line="256" name="NUM_THREE" />
            <variable citdl="Number" line="258" name="NUM_FOUR" />
            <variable citdl="Number" line="260" name="NUM_FIVE" />
            <variable citdl="Number" line="262" name="NUM_SIX" />
            <variable citdl="Number" line="264" name="NUM_SEVEN" />
            <variable citdl="Number" line="266" name="NUM_EIGHT" />
            <variable citdl="Number" line="268" name="NUM_NINE" />
            <variable citdl="Number" line="270" name="NUM_MULTIPLY" />
            <variable citdl="Number" line="272" name="NUM_PLUS" />
            <variable citdl="Number" line="274" name="NUM_MINUS" />
            <variable citdl="Number" line="276" name="NUM_PERIOD" />
            <variable citdl="Number" line="278" name="NUM_DIVISION" />
            <variable citdl="Number" line="280" name="F1" />
            <variable citdl="Number" line="282" name="F2" />
            <variable citdl="Number" line="284" name="F3" />
            <variable citdl="Number" line="286" name="F4" />
            <variable citdl="Number" line="288" name="F5" />
            <variable citdl="Number" line="290" name="F6" />
            <variable citdl="Number" line="292" name="F7" />
            <variable citdl="Number" line="294" name="F8" />
            <variable citdl="Number" line="296" name="F9" />
            <variable citdl="Number" line="298" name="F10" />
            <variable citdl="Number" line="300" name="F11" />
            <variable citdl="Number" line="302" name="F12" />
            <scope ilk="function" line="305" lineend="312" name="isNavKeyPress" signature="isNavKeyPress()">
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this" line="307" name="me" />
              <variable attributes="__local__ private" citdl="this.normalizeKey()" line="307" name="k" />
            </scope>
            <scope ilk="function" line="314" lineend="321" name="isSpecialKey" signature="isSpecialKey()">
              <variable citdl="prototype" name="this" />
              <variable attributes="__local__ private" citdl="this.normalizeKey()" line="315" name="k" />
            </scope>
            <scope ilk="function" line="323" lineend="325" name="getPoint" returns="Ext.lib.Point" signature="getPoint()">
              <variable citdl="prototype" name="this" />
            </scope>
            <scope doc="Returns true if the control, meta, shift or alt key was pressed during this event." ilk="function" line="331" lineend="333" name="hasModifier" returns="Boolean" signature="hasModifier()">
              <variable citdl="prototype" name="this" />
            </scope>
          </variable>
        </variable>
        <scope doc="Takes an encoded URL and and converts it to an object. Example:&#xA;Ext.urlDecode(&quot;foo=1&amp;bar=2&quot;); // returns {foo: &quot;1&quot;, bar: &quot;2&quot;}&#xA;Ext.urlDecode(&quot;foo=1&amp;bar=2&amp;bar=3&amp;bar=4&quot;, false); // returns {foo: &quot;1&quot;, bar: [&quot;2&quot;, &quot;3&quot;, &quot;4&quot;]}" ilk="function" line="338" lineend="352" name="urlDecode" returns="Object" signature="urlDecode(string, overwrite)">
          <variable citdl="String" ilk="argument" name="string" />
          <variable citdl="Boolean" doc="(optional) Items of the same name will overwrite previous values instead of creating an an array (Defaults to false)." ilk="argument" name="overwrite" />
          <variable citdl="Ext" name="this" />
          <variable attributes="__local__ private" citdl="Object" line="339" lineend="339" name="obj" />
          <variable attributes="__local__ private" citdl="string.split()" line="340" name="pairs" />
          <variable attributes="__local__ private" citdl="decodeURIComponent" line="341" name="d" />
          <variable attributes="__local__ private" citdl="d()" line="342" name="name" />
          <variable attributes="__local__ private" citdl="d()" line="343" name="value" />
          <scope attributes="__local__ private" ilk="function" line="344" lineend="350" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Ext.EventManager.onDocumentReady" doc="Fires when the document is ready (before onload and before images are loaded).  Shorthand of {@link Ext.EventManager#onDocumentReady}." line="343" name="onReady" />
        <scope classrefs="Ext.Container" ilk="class" line="348" lineend="360" name="Toolbar">
          <scope attributes="__ctor__" doc="CONSTRUCTOR: Basic Toolbar class. Although the {@link Ext.Container#defaultType defaultType} for Toolbar&#xA;is {@link Ext.Button button}, Toolbar elements (child items for the Toolbar container) may&#xA;be virtually any type of Component. Toolbar elements can be created explicitly via their constructors,&#xA;or implicitly via their xtypes, and can be {@link #add}ed dynamically.&#xA;Some items have shortcut strings for creation:&#xA;&#xA;Shortcut  xtype          Class                  Description&#xA;&apos;-&gt;&apos;      &apos;tbfill&apos;       {@link Ext.Toolbar.Fill}       begin using the right-justified button container&#xA;&apos;-&apos;       &apos;tbseparator&apos;  {@link Ext.Toolbar.Separator}  add a vertical separator bar between toolbar items&#xA;&apos; &apos;       &apos;tbspacer&apos;     {@link Ext.Toolbar.Spacer}     add horiztonal space between elements&#xA;&#xA;&#xA;Example usage of various elements:&#xA;&#xA;var tb = new Ext.Toolbar({&#xA;renderTo: document.body,&#xA;width: 600,&#xA;height: 100,&#xA;items: [&#xA;// xtype: &apos;button&apos;, // default for Toolbars, same as &apos;tbbutton&apos;&#xA;text: &apos;Button&apos;&#xA;xtype: &apos;splitbutton&apos;, // same as &apos;tbsplitbutton&apos;&#xA;text: &apos;Split Button&apos;&#xA;// begin using the right-justified button container&#xA;&apos;-&gt;&apos;, // same as {xtype: &apos;tbfill&apos;}, // Ext.Toolbar.Fill&#xA;xtype: &apos;textfield&apos;,&#xA;name: &apos;field1&apos;,&#xA;emptyText: &apos;enter search term&apos;&#xA;// add a vertical separator bar between toolbar items&#xA;&apos;-&apos;, // same as {xtype: &apos;tbseparator&apos;} to create Ext.Toolbar.Separator&#xA;&apos;text 1&apos;, // same as {xtype: &apos;tbtext&apos;, text: &apos;text1&apos;} to create Ext.Toolbar.TextItem&#xA;{xtype: &apos;tbspacer&apos;},// same as &apos; &apos; to create Ext.Toolbar.Spacer&#xA;&apos;text 2&apos;,&#xA;{xtype: &apos;tbspacer&apos;, width: 50}, // add a 50px space&#xA;&apos;text 3&apos;&#xA;});&#xA;&#xA;Example adding a ComboBox within a menu of a button:&#xA;&#xA;// ComboBox creation&#xA;var combo = new Ext.form.ComboBox({&#xA;store: new Ext.data.ArrayStore({&#xA;autoDestroy: true,&#xA;fields: [&apos;initials&apos;, &apos;fullname&apos;],&#xA;data : [&#xA;[&apos;FF&apos;, &apos;Fred Flintstone&apos;],&#xA;[&apos;BR&apos;, &apos;Barney Rubble&apos;]&#xA;}),&#xA;displayField: &apos;fullname&apos;,&#xA;typeAhead: true,&#xA;mode: &apos;local&apos;,&#xA;forceSelection: true,&#xA;triggerAction: &apos;all&apos;,&#xA;emptyText: &apos;Select a name...&apos;,&#xA;selectOnFocus: true,&#xA;width: 135,&#xA;getListParent: function() {&#xA;return this.el.up(&apos;.x-menu&apos;);&#xA;iconCls: &apos;no-icon&apos; //use iconCls if placing within menu to shift to right side of menu&#xA;});&#xA;// put ComboBox in a Menu&#xA;var menu = new Ext.menu.Menu({&#xA;id: &apos;mainMenu&apos;,&#xA;items: [&#xA;combo // A Field in a Menu&#xA;});&#xA;// add a Button with the menu&#xA;tb.add({&#xA;text:&apos;Button w/ Menu&apos;,&#xA;menu: menu  // assign menu by instance&#xA;});&#xA;tb.doLayout();" ilk="function" line="348" lineend="360" name="Toolbar" signature="Toolbar(config)">
            <variable citdl="Object/Array" doc="A config object or an array of buttons to {@link #add}" ilk="argument" name="config" />
            <variable citdl="Toolbar" name="this" />
          </scope>
        </scope>
        <scope doc="Partitions the set into two sets: a true set and a false set.&#xA;Example:&#xA;Example2:&#xA;&#xA;// Example 1:&#xA;Ext.partition([true, false, true, true, false]); // [[true, true, true], [false, false]]&#xA;// Example 2:&#xA;Ext.partition(&#xA;Ext.query(&quot;p&quot;),&#xA;function(val){&#xA;return val.className == &quot;class1&quot;&#xA;// true are those paragraph elements with a className of &quot;class1&quot;,&#xA;// false set are those that do not have that className." ilk="function" line="356" lineend="362" name="partition" returns="Array" signature="partition(arr, truth)">
          <variable citdl="{Array" doc="The array to partition" ilk="argument" name="arr" />
          <variable citdl="Function" doc="(optional) a function to determine truth.  If this is omitted the element&#xA;itself must be able to be evaluated for its truthfulness." ilk="argument" name="truth" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="357" name="ret" />
        </scope>
        <scope doc="Appends content to the query string of a URL, which handles logic for whether to place&#xA;a question mark or ampersand." ilk="function" line="361" lineend="366" name="urlAppend" returns="url" signature="urlAppend(url, s)">
          <variable citdl="String" doc="The url to append to." ilk="argument" name="url" />
          <variable ilk="argument" name="s" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Object" line="373" name="Direct">
          <scope classrefs="Object" ilk="class" line="7" lineend="15" name="Event">
            <scope attributes="__ctor__" ilk="function" line="7" lineend="9" name="Event" signature="Event(config)">
              <variable ilk="argument" name="config" />
              <variable citdl="Event" name="this" />
            </scope>
            <variable citdl="Boolean" line="11" name="status" />
            <scope ilk="function" line="12" lineend="14" name="getData" returns="this.data" signature="getData()">
              <variable citdl="Event" name="this" />
            </scope>
          </scope>
          <scope classrefs="Object" ilk="class" line="14" lineend="32" name="Transaction">
            <scope attributes="__ctor__" doc="CONSTRUCTOR: Supporting Class for Ext.Direct (not intended to be used directly)." ilk="function" line="14" lineend="18" name="Transaction" signature="Transaction(config)">
              <variable citdl="Object" ilk="argument" name="config" />
              <variable citdl="Transaction" name="this" />
            </scope>
            <variable line="16" name="tid" />
            <variable citdl="Number" line="17" name="retryCount" />
            <scope ilk="function" line="20" lineend="22" name="send" signature="send()">
              <variable citdl="Transaction" name="this" />
            </scope>
            <scope ilk="function" line="24" lineend="27" name="retry" signature="retry()">
              <variable citdl="Transaction" name="this" />
            </scope>
            <scope ilk="function" line="29" lineend="31" name="getProvider" returns="this.provider" signature="getProvider()">
              <variable citdl="Transaction" name="this" />
            </scope>
          </scope>
          <variable citdl="Ext.extend()" line="22" name="RemotingEvent" />
          <variable citdl="Ext.extend()" line="27" name="ExceptionEvent" />
          <variable citdl="Object" line="29" lineend="33" name="eventTypes">
            <variable citdl="Ext.Direct.RemotingEvent" line="30" name="rpc" />
            <variable citdl="Ext.Direct.Event" line="31" name="event" />
            <variable citdl="Ext.Direct.ExceptionEvent" line="32" name="exception" />
          </variable>
          <variable citdl="Number" line="234" name="TID" />
          <variable citdl="Object" line="373" lineend="235" name="PROVIDERS">
            <variable citdl="Ext.direct.PollingProvider" line="151" name="polling" />
            <variable citdl="Ext.direct.RemotingProvider" line="373" name="remoting" />
          </variable>
        </variable>
        <variable doc="Converts any iterable (numeric indices and a length property) into a true array&#xA;Don&apos;t use this on strings. IE doesn&apos;t support &quot;abc&quot;[0] which this implementation depends on.&#xA;For strings, use this instead: &quot;abc&quot;.match(/./g) =&gt; [a,b,c];" line="375" name="toArray" />
        <scope doc="Invokes a method on each item in an Array.&#xA;&#xA;// Example:&#xA;Ext.invoke(Ext.query(&quot;p&quot;), &quot;getAttribute&quot;, &quot;id&quot;);&#xA;// [el1.getAttribute(&quot;id&quot;), el2.getAttribute(&quot;id&quot;), ..., elN.getAttribute(&quot;id&quot;)]" ilk="function" line="376" lineend="387" name="invoke" returns="Array" signature="invoke(arr, methodName)">
          <variable citdl="{Array" doc="The Array of items to invoke the method on." ilk="argument" name="arr" />
          <variable citdl="String" doc="The method name to invoke." ilk="argument" name="methodName" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="378" name="args" />
          <variable attributes="__local__ private" citdl="Array" line="378" name="ret" />
        </scope>
        <variable citdl="Ext.extend()" doc="Slider which supports vertical or horizontal orientation, keyboard adjustments,&#xA;configurable snapping, axis clicking and animation. Can be added as an item to&#xA;any container. Example usage:&#xA;new Ext.Slider({&#xA;renderTo: Ext.getBody(),&#xA;width: 200,&#xA;value: 50,&#xA;increment: 10,&#xA;minValue: 0,&#xA;maxValue: 100&#xA;});" line="389" name="Slider" />
        <scope doc="Iterates an array calling the passed function with each item, stopping if your function returns false. If the&#xA;passed array is not really an array, your function is called once with it.&#xA;The supplied function is called with (Object item, Number index, Array allItems)." ilk="function" line="397" lineend="409" name="each" returns="i" signature="each(array, fn, scope)">
          <variable citdl="Array/NodeList/Mixed" ilk="argument" name="array" />
          <variable citdl="Function" ilk="argument" name="fn" />
          <variable citdl="Object" ilk="argument" name="scope" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Plucks the value of a property from each item in the Array&#xA;&#xA;// Example:&#xA;Ext.pluck(Ext.query(&quot;p&quot;), &quot;className&quot;); // [el1.className, el2.className, ..., elN.className]" ilk="function" line="399" lineend="405" name="pluck" returns="Array" signature="pluck(arr, prop)">
          <variable citdl="{Array" doc="The Array of items to pluck the value from." ilk="argument" name="arr" />
          <variable citdl="String" doc="The property name to pluck from each element." ilk="argument" name="prop" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" citdl="Array" line="400" name="ret" />
          <scope attributes="__local__ private" ilk="function" line="401" lineend="403" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <variable citdl="Object" line="406" lineend="1083" name="TabPanel">
          <scope ilk="function" line="1076" lineend="1100" name="AccessStack" signature="AccessStack()">
            <variable citdl="TabPanel" name="this" />
            <variable attributes="__local__ private" citdl="Array" line="1077" name="items" />
          </scope>
        </variable>
        <scope ilk="class" line="412" lineend="434" name="EventObject">
          <variable doc="Just as {@link Ext.Element} wraps around a native DOM node, Ext.EventObject&#xA;wraps the browser&apos;s native event-object normalizing cross-browser differences,&#xA;such as which mouse button is clicked, keys pressed, mechanisms to stop&#xA;event-propagation along with a method to prevent default actions from taking place.&#xA;For example:&#xA;&#xA;function handleClick(e, t){ // e is not a standard event object, it is a Ext.EventObject&#xA;e.preventDefault();&#xA;var target = e.getTarget(); // same as t (the target HTMLElement)&#xA;...&#xA;var myDiv = {@link Ext#get Ext.get}(&quot;myDiv&quot;);  // get reference to an {@link Ext.Element}&#xA;myDiv.on(         // &apos;on&apos; is shorthand for addListener&#xA;&quot;click&quot;,      // perform an action on click of myDiv&#xA;handleClick   // reference to the action handler&#xA;// other methods to do the same:&#xA;Ext.EventManager.on(&quot;myDiv&quot;, &apos;click&apos;, handleClick);&#xA;Ext.EventManager.addListener(&quot;myDiv&quot;, &apos;click&apos;, handleClick);" line="412" name="EventObject" />
        </scope>
        <scope doc="Zips N sets together.&#xA;&#xA;// Example 1:&#xA;Ext.zip([1,2,3],[4,5,6]); // [[1,4],[2,5],[3,6]]&#xA;// Example 2:&#xA;Ext.zip(&#xA;[ &quot;+&quot;, &quot;-&quot;, &quot;+&quot;],&#xA;[  12,  10,  22],&#xA;[  43,  15,  96],&#xA;function(a, b, c){&#xA;return &quot;$&quot; + a + &quot;&quot; + b + &quot;.&quot; + c&#xA;); // [&quot;$+12.43&quot;, &quot;$-10.15&quot;, &quot;$+22.96&quot;]" ilk="function" line="426" lineend="444" name="zip" returns="Array" signature="zip()">
          <variable citdl="o" name="this" />
          <scope attributes="__local__ private" ilk="function" line="427" lineend="427" name="(anonymous)" signature="(anonymous)()" />
          <variable attributes="__local__ private" citdl="Ext.partition()" line="431" name="parts" />
          <variable attributes="__local__ private" citdl="parts[0]" line="431" name="arrs" />
          <variable attributes="__local__ private" citdl="Ext.max()" line="431" name="len" />
          <variable attributes="__local__ private" citdl="parts[1][0]" line="431" name="fn" />
          <variable attributes="__local__ private" citdl="Array" line="431" name="ret" />
        </scope>
        <scope doc="Iterates either the elements in an array, or each of the properties in an object.&#xA;Note: If you are only iterating arrays, it is better to call {@link #each}." ilk="function" line="431" lineend="444" name="iterate" signature="iterate(obj, fn, scope)">
          <variable ilk="argument" name="obj" />
          <variable citdl="Function" doc="The function to be called for each iteration.&#xA;The iteration will stop if the supplied function returns false, or&#xA;all array elements / object properties have been covered. The signature&#xA;varies depending on the type of object being interated:&#xA;Arrays : (Object item, Number index, Array allItems)&#xA;When iterating an array, the supplied function is called with each item.&#xA;Objects : (String key, Object value)&#xA;When iterating an object, the supplied function is called with each key-value pair in&#xA;the object." ilk="argument" name="fn" />
          <variable citdl="Object" doc="The scope to call the supplied function with, defaults to&#xA;the specified object" ilk="argument" name="scope" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope classrefs="Object" ilk="class" line="431" lineend="620" name="EventObjectImpl">
          <scope attributes="__ctor__" ilk="function" line="431" lineend="435" name="EventObjectImpl" signature="EventObjectImpl(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope ilk="function" line="439" lineend="474" name="setEvent" returns="me" signature="setEvent(e)">
            <variable ilk="argument" name="e" />
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this" line="440" name="me" />
          </scope>
          <scope doc="Stop the event (preventDefault and stopPropagation)" ilk="function" line="479" lineend="487" name="stopEvent" signature="stopEvent()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this" line="480" name="me" />
          </scope>
          <scope doc="Prevents the browsers default handling of the event." ilk="function" line="492" lineend="496" name="preventDefault" signature="preventDefault()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Cancels bubbling of the event." ilk="function" line="501" lineend="509" name="stopPropagation" signature="stopPropagation()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this" line="502" name="me" />
          </scope>
          <scope doc="Gets the character code for the event." ilk="function" line="515" lineend="517" name="getCharCode" returns="Number" signature="getCharCode()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Returns a normalized keyCode for the event." ilk="function" line="523" lineend="525" name="getKey" returns="Number" signature="getKey()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope ilk="function" line="528" lineend="530" name="normalizeKey" returns="Ext.isSafari" signature="normalizeKey(k)">
            <variable ilk="argument" name="k" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the x coordinate of the event." ilk="function" line="536" lineend="538" name="getPageX" returns="Number" signature="getPageX()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the y coordinate of the event." ilk="function" line="544" lineend="546" name="getPageY" returns="Number" signature="getPageY()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the page coordinates of the event." ilk="function" line="552" lineend="554" name="getXY" returns="Array" signature="getXY()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the target for the event.&#xA;search as a number or element (defaults to 10 || document.body)" ilk="function" line="564" lineend="566" name="getTarget" returns="HTMLElement" signature="getTarget(selector, maxDepth, returnEl)">
            <variable citdl="String" doc="(optional) A simple selector to filter the target or look for an ancestor of the target" ilk="argument" name="selector" />
            <variable citdl="Number/Mixed" doc="(optional) The max depth to" ilk="argument" name="maxDepth" />
            <variable citdl="Boolean" doc="(optional) True to return a Ext.Element object instead of DOM node" ilk="argument" name="returnEl" />
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Gets the related target." ilk="function" line="572" lineend="574" name="getRelatedTarget" returns="HTMLElement" signature="getRelatedTarget()">
            <variable citdl="EventObjectImpl" name="this" />
          </scope>
          <scope doc="Normalizes mouse wheel delta across browsers" ilk="function" line="580" lineend="589" name="getWheelDelta" returns="Number" signature="getWheelDelta()">
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this.browserEvent" line="581" name="e" />
            <variable attributes="__local__ private" citdl="Number" line="582" name="delta" />
          </scope>
          <scope doc="Returns true if the target of this event is a child of el.  Unless the allowEl parameter is set, it will return false if if the target is el.&#xA;Example usage:&#xA;// Handle click on any child of an element&#xA;Ext.getBody().on(&apos;click&apos;, function(e){&#xA;if(e.within(&apos;some-el&apos;)){&#xA;alert(&apos;Clicked on a child of some-el!&apos;);&#xA;});&#xA;// Handle click directly on an element, ignoring clicks on child nodes&#xA;Ext.getBody().on(&apos;click&apos;, function(e,t){&#xA;if((t.id == &apos;some-el&apos;) &amp;&amp; !e.within(t, true)){&#xA;alert(&apos;Clicked directly on some-el!&apos;);&#xA;});" ilk="function" line="613" lineend="619" name="within" returns="Boolean" signature="within(el, related, allowEl)">
            <variable citdl="Mixed" doc="The id, DOM element or Ext.Element to check" ilk="argument" name="el" />
            <variable citdl="Boolean" doc="(optional) true to test if the related target is within el instead of the target" ilk="argument" name="related" />
            <variable citdl="Boolean" doc="{optional} true to also check if the passed element is the target or related target" ilk="argument" name="allowEl" />
            <variable citdl="EventObjectImpl" name="this" />
            <variable attributes="__local__ private" citdl="this[related?&quot;getRelatedTarget&quot;:&quot;getTarget&quot;]()" line="615" name="t" />
          </scope>
        </scope>
        <scope doc="This is shorthand reference to {@link Ext.ComponentMgr#get}.&#xA;Looks up an existing {@link Ext.Component Component} by {@link Ext.Component#id id}" ilk="function" line="453" lineend="455" name="getCmp" returns="Ext.ComponentMgr.get()" signature="getCmp(id)">
          <variable citdl="String" doc="The component {@link Ext.Component#id id}" ilk="argument" name="id" />
          <variable citdl="o" name="this" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Provides AJAX-style update capabilities for Element objects.  Updater can be used to {@link #update}&#xA;an {@link Ext.Element} once, or you can use {@link #startAutoRefresh} to set up an auto-updating&#xA;{@link Ext.Element Element} on a specific interval.&#xA;Usage:&#xA;&#xA;var el = Ext.get(&quot;foo&quot;); // Get Ext.Element object&#xA;var mgr = el.getUpdater();&#xA;mgr.update({&#xA;url: &quot;http://myserver.com/index.php&quot;,&#xA;params: {&#xA;param1: &quot;foo&quot;,&#xA;param2: &quot;bar&quot;&#xA;});&#xA;...&#xA;mgr.formUpdate(&quot;myFormId&quot;, &quot;http://myserver.com/index.php&quot;);&#xA;&#xA;// or directly (returns the same Updater instance)&#xA;var mgr = new Ext.Updater(&quot;myElementId&quot;);&#xA;mgr.startAutoRefresh(60, &quot;http://myserver.com/index.php&quot;);&#xA;mgr.on(&quot;update&quot;, myFcnNeedsToKnow);&#xA;&#xA;// short handed call directly from the element object&#xA;Ext.get(&quot;foo&quot;).load({&#xA;url: &quot;bar.php&quot;,&#xA;scripts: true,&#xA;params: &quot;param1=foo&amp;amp;param2=bar&quot;,&#xA;text: &quot;Loading Foo...&quot;&#xA;});" line="458" name="Updater" />
        <variable citdl="Boolean" doc="By default, Ext intelligently decides whether floating elements should be shimmed. If you are using flash,&#xA;you may want to set this to true." line="462" name="useShims" />
        <scope doc="Return the dom node for the passed String (id), dom node, or Ext.Element.&#xA;Here are some examples:&#xA;&#xA;// gets dom node based on id&#xA;var elDom = Ext.getDom(&apos;elId&apos;);&#xA;// gets dom node based on the dom node&#xA;var elDom1 = Ext.getDom(elDom);&#xA;// If we don&amp;#39;t know if we are working with an&#xA;// Ext.Element or a dom node use Ext.getDom&#xA;function(el){&#xA;var dom = Ext.getDom(el);&#xA;// do something with the dom node&#xA;&#xA;Note: the dom node to be found actually needs to exist (be rendered, etc)&#xA;when this method is called to be successful." ilk="function" line="467" lineend="472" name="getDom" returns="el.dom" signature="getDom(el)">
          <variable citdl="Mixed" ilk="argument" name="el" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns the current document body as an {@link Ext.Element}." ilk="function" line="478" lineend="480" name="getBody" returns="Ext.get()" signature="getBody()">
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns the type of object that is passed in. If the object passed in is null or undefined it&#xA;return false otherwise it returns one of the following values:&#xA;string: If the object passed is a string&#xA;number: If the object passed is a number&#xA;boolean: If the object passed is a boolean value&#xA;date: If the object passed is a Date object&#xA;function: If the object passed is a function reference&#xA;object: If the object passed is an object&#xA;array: If the object passed is an array&#xA;regexp: If the object passed is a regular expression&#xA;element: If the object passed is a DOM Element&#xA;nodelist: If the object passed is a DOM NodeList&#xA;textnode: If the object passed is a DOM text node and contains something other than whitespace&#xA;whitespace: If the object passed is a DOM text node and contains only whitespace" ilk="function" line="484" lineend="509" name="type" returns="String" signature="type(o)">
          <variable ilk="argument" name="o" />
          <variable citdl="o" name="this" />
          <variable attributes="__local__ private" line="491" name="t" />
        </scope>
        <variable citdl="isIE" doc="Removes a DOM node from the document.  The body node will be ignored if passed in." line="486" name="removeNode" />
        <variable attributes="__local__ private" citdl="d" line="487" name="d" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A standard tooltip implementation for providing additional information when hovering over a target element." line="492" name="ToolTip" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Base class for any {@link Ext.Component Component} that is to be sized as a box, using width and height.&#xA;BoxComponent provides automatic box model adjustments for sizing and positioning and will work correctly&#xA;within the Component rendering model.&#xA;A BoxComponent may be created as a custom Component which encapsulates any HTML element, either a pre-existing&#xA;element, or one that is created to your specifications at render time. Usually, to participate in layouts,&#xA;a Component will need to be a BoxComponent in order to have its width and height managed.&#xA;To use a pre-existing element as a BoxComponent, configure it so that you preset the el property to the&#xA;element to reference:&#xA;var pageHeader = new Ext.BoxComponent({&#xA;el: &apos;my-header-div&apos;&#xA;});&#xA;This may then be {@link Ext.Container#add added} to a {@link Ext.Container Container} as a child item.&#xA;To create a BoxComponent based around a HTML element to be created at render time, use the&#xA;{@link Ext.Component#autoEl autoEl} config option which takes the form of a&#xA;{@link Ext.DomHelper DomHelper} specification:&#xA;var myImage = new Ext.BoxComponent({&#xA;autoEl: {&#xA;tag: &apos;img&apos;,&#xA;src: &apos;/images/my-image.jpg&apos;&#xA;});" line="505" name="BoxComponent" />
        <scope ilk="function" line="511" lineend="513" name="intercept" signature="intercept(o, name, fn, scope)">
          <variable citdl="o[name].createInterceptor()" ilk="argument" name="o" />
          <variable ilk="argument" name="name" />
          <variable ilk="argument" name="fn" />
          <variable ilk="argument" name="scope" />
          <variable citdl="o" name="this" />
        </scope>
        <scope doc="Returns true if the passed value is empty.&#xA;The value is deemed to be empty if it is&#xA;null&#xA;undefined&#xA;an empty array&#xA;a zero length string (Unless the allowBlank parameter is true)" ilk="function" line="513" lineend="515" name="isEmpty" returns="Boolean" signature="isEmpty(v, allowBlank)">
          <variable ilk="argument" name="v" />
          <variable citdl="Boolean" doc="(optional) true to allow empty strings (defaults to false)" ilk="argument" name="allowBlank" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope ilk="function" line="516" lineend="524" name="callback" signature="callback(cb, scope, args, delay)">
          <variable ilk="argument" name="cb" />
          <variable ilk="argument" name="scope" />
          <variable ilk="argument" name="args" />
          <variable ilk="argument" name="delay" />
          <variable citdl="o" name="this" />
        </scope>
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: Used to provide a sizable space in a layout." line="518" name="Spacer" />
        <scope doc="Returns true if the passed object is a JavaScript array, otherwise false." ilk="function" line="522" lineend="524" name="isArray" returns="Boolean" signature="isArray(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns true if the passed object is a JavaScript Object, otherwise false." ilk="function" line="531" lineend="533" name="isObject" returns="Boolean" signature="isObject(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns true if the passed object is a JavaScript &apos;primitive&apos;, a string, number or boolean." ilk="function" line="540" lineend="542" name="isPrimitive" returns="Boolean" signature="isPrimitive(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns true if the passed object is a JavaScript Function, otherwise false." ilk="function" line="549" lineend="551" name="isFunction" returns="Boolean" signature="isFunction(v)">
          <variable ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns true if the passed object is a number. Returns false for non-finite numbers." ilk="function" line="558" lineend="560" name="isNumber" returns="Boolean" signature="isNumber(v)">
          <variable citdl="Object" doc="The object to test" ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns true if the passed object is a string." ilk="function" line="567" lineend="569" name="isString" returns="Boolean" signature="isString(v)">
          <variable citdl="Object" doc="The object to test" ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Ext.data.Connection" doc="The global Ajax request class that provides a simple way to make Ajax requests&#xA;with maximum flexibility.&#xA;Since Ext.Ajax is a singleton, you can set common properties/events for it once&#xA;and override them at the request function level only if necessary.&#xA;Common Properties you may want to set are:&#xA;{@link #method}&#xA;{@link #extraParams}&#xA;{@link #url}&#xA;&#xA;&#xA;// Default headers to pass in every request&#xA;Ext.Ajax.defaultHeaders = {&#xA;&apos;Powered-By&apos;: &apos;Ext&apos;&#xA;&#xA;&#xA;Common Events you may want to set are:&#xA;{@link Ext.data.Connection#beforerequest beforerequest}&#xA;{@link Ext.data.Connection#requestcomplete requestcomplete}&#xA;{@link Ext.data.Connection#requestexception requestexception}&#xA;&#xA;&#xA;// Example: show a spinner during all Ajax requests&#xA;Ext.Ajax.on(&apos;beforerequest&apos;, this.showSpinner, this);&#xA;Ext.Ajax.on(&apos;requestcomplete&apos;, this.hideSpinner, this);&#xA;Ext.Ajax.on(&apos;requestexception&apos;, this.hideSpinner, this);&#xA;&#xA;&#xA;An example request:&#xA;&#xA;// Basic request&#xA;Ext.Ajax.{@link Ext.data.Connection#request request}({&#xA;url: &apos;foo.php&apos;,&#xA;success: someFn,&#xA;failure: otherFn,&#xA;headers: {&#xA;&apos;my-header&apos;: &apos;foo&apos;&#xA;params: { foo: &apos;bar&apos; }&#xA;});&#xA;// Simple ajax form submission&#xA;Ext.Ajax.{@link Ext.data.Connection#request request}({&#xA;form: &apos;some-form&apos;,&#xA;params: &apos;foo=bar&apos;&#xA;});" line="575" name="Ajax" />
        <scope doc="Returns true if the passed object is a boolean." ilk="function" line="576" lineend="578" name="isBoolean" returns="Boolean" signature="isBoolean(v)">
          <variable citdl="Object" doc="The object to test" ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <scope doc="Returns true if the passed object is not undefined." ilk="function" line="585" lineend="587" name="isDefined" returns="Boolean" signature="isDefined(v)">
          <variable citdl="Object" doc="The object to test" ilk="argument" name="v" />
          <variable citdl="Ext" name="this" />
        </scope>
        <variable citdl="Boolean" doc="True if the detected browser is Opera." line="593" name="isOpera" />
        <variable citdl="Boolean" doc="True if the detected browser uses WebKit." line="598" name="isWebKit" />
        <variable citdl="Boolean" doc="True if the detected browser is Chrome." line="603" name="isChrome" />
        <variable citdl="Boolean" doc="True if the detected browser is Safari." line="608" name="isSafari" />
        <variable citdl="Boolean" doc="True if the detected browser is Safari 3.x." line="613" name="isSafari3" />
        <variable citdl="Boolean" doc="True if the detected browser is Safari 4.x." line="618" name="isSafari4" />
        <variable citdl="Boolean" doc="True if the detected browser is Safari 2.x." line="623" name="isSafari2" />
        <variable citdl="Ext.MessageBox" doc="Shorthand for {@link Ext.MessageBox}" line="626" name="Msg" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer." line="628" name="isIE" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer 6.x." line="633" name="isIE6" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer 7.x." line="638" name="isIE7" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer 8.x." line="643" name="isIE8" />
        <variable citdl="Boolean" doc="True if the detected browser uses the Gecko layout engine (e.g. Mozilla, Firefox)." line="648" name="isGecko" />
        <variable citdl="Boolean" doc="True if the detected browser uses a pre-Gecko 1.9 layout engine (e.g. Firefox 2.x)." line="653" name="isGecko2" />
        <variable citdl="Boolean" doc="True if the detected browser uses a Gecko 1.9+ layout engine (e.g. Firefox 3.x)." line="658" name="isGecko3" />
        <variable citdl="Boolean" doc="True if the detected browser is Internet Explorer running in non-strict mode." line="663" name="isBorderBox" />
        <variable citdl="Boolean" doc="True if the detected platform is Linux." line="668" name="isLinux" />
        <variable citdl="Boolean" doc="True if the detected platform is Windows." line="673" name="isWindows" />
        <variable citdl="Boolean" doc="True if the detected platform is Mac OS." line="678" name="isMac" />
        <variable citdl="Boolean" doc="True if the detected platform is Adobe Air." line="683" name="isAir" />
        <variable citdl="Ext.namespace" doc="Creates namespaces to be used for scoping variables and classes so that they are not global.&#xA;Specifying the last node of a namespace implicitly creates all other nodes. Usage:&#xA;&#xA;Ext.namespace(&apos;Company&apos;, &apos;Company.data&apos;);&#xA;Ext.namespace(&apos;Company.data&apos;); // equivalent and preferable to above syntax&#xA;Company.Widget = function() { ... }&#xA;Company.data.CustomStore = function(config) { ... }" line="700" name="ns" />
        <variable citdl="Object" line="707" lineend="761" name="ButtonToggleMgr">
          <scope ilk="function" line="722" lineend="732" name="register" signature="register(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="726" name="g" />
          </scope>
          <scope ilk="function" line="734" lineend="743" name="unregister" signature="unregister(btn)">
            <variable ilk="argument" name="btn" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[btn.toggleGroup]" line="738" name="g" />
          </scope>
          <scope doc="Gets the pressed button in the passed group or null" ilk="function" line="750" lineend="760" name="getPressed" signature="getPressed(group)">
            <variable citdl="String" ilk="argument" name="group" />
            <variable citdl="ButtonToggleMgr" name="this" />
            <variable attributes="__local__ private" citdl="groups[group]" line="751" name="g" />
          </scope>
        </variable>
        <variable citdl="Ext.form.BasicForm" line="735" name="BasicForm" />
        <variable citdl="Ext.DomQuery.select" doc="Selects an array of DOM nodes by CSS/XPath selector. Shorthand of {@link Ext.DomQuery#select}" line="826" name="query" />
        <variable attributes="__ctor__" citdl="Ext.extend()" doc="CONSTRUCTOR: A specialized panel intended for use as an application window.  Windows are floated, {@link #resizable}, and&#xA;{@link #draggable} by default.  Windows can be {@link #maximizable maximized} to fill the viewport,&#xA;restored to their prior size, and can be {@link #minimize}d.&#xA;Windows can also be linked to a {@link Ext.WindowGroup} or managed by the {@link Ext.WindowMgr} to provide&#xA;grouping, activation, to front, to back and other application-specific behavior.&#xA;By default, Windows will be rendered to document.body. To {@link #constrain} a Window to another element&#xA;specify {@link Ext.Component#renderTo renderTo}.&#xA;Note: By default, the {@link #closable close} header tool destroys the Window resulting in&#xA;destruction of any child Components. This makes the Window object, and all its descendants unusable. To enable&#xA;re-use of a Window, use {@link #closeAction closeAction: &apos;hide&apos;}." line="906" name="Window" />
        <variable citdl="El.get" doc="Retrieves Ext.Element objects.&#xA;This method does not retrieve {@link Ext.Component Component}s. This method&#xA;retrieves Ext.Element objects which encapsulate DOM elements. To retrieve a Component by&#xA;its ID, use {@link Ext.ComponentMgr#get}.&#xA;Uses simple caching to consistently return the same object. Automatically fixes if an&#xA;object was recreated with the same id via AJAX or DOM.&#xA;Shorthand of {@link Ext.Element#get}" line="912" name="get" />
        <variable citdl="El.fly" doc="Gets the globally shared flyweight Element, with the passed node as the active element. Do not store a reference to this element -&#xA;the dom node can be overwritten by other code. Shorthand of {@link Ext.Element#fly}&#xA;Use this to make one-time references to DOM elements which are not going to be accessed again either by&#xA;application code, or by Ext&apos;s classes. If accessing an element which will be processed regularly, then {@link Ext#get}&#xA;will be more appropriate to take advantage of the caching provided by the Ext.Element class." line="927" name="fly" />
      </variable>
      <scope attributes="__local__ private __ctor__" doc="CONSTRUCTOR: Encapsulates a DOM element, adding simple DOM manipulation facilities, normalizing for browser differences.&#xA;All instances of this class inherit the methods of {@link Ext.Fx} making visual effects easily available to all DOM elements.&#xA;Note that the events documented in this class are not Ext events, they encapsulate browser events. To&#xA;access the underlying browser event, see {@link Ext.EventObject#browserEvent}. Some older&#xA;browsers may not support the full range of events. Which events are supported is beyond the control of ExtJs.&#xA;Usage:&#xA;// by id&#xA;var el = Ext.get(&quot;my-div&quot;);&#xA;// by DOM element reference&#xA;var el = Ext.get(myDivElement);&#xA;Animations&#xA;When an element is manipulated, by default there is no animation.&#xA;&#xA;var el = Ext.get(&quot;my-div&quot;);&#xA;// no animation&#xA;el.setWidth(100);&#xA;&#xA;Many of the functions for manipulating an element have an optional &quot;animate&quot; parameter.  This&#xA;parameter can be specified as boolean (true) for default animation effects.&#xA;&#xA;// default animation&#xA;el.setWidth(100, true);&#xA;&#xA;&#xA;To configure the effects, an object literal with animation options to use as the Element animation&#xA;configuration object can also be specified. Note that the supported Element animation configuration&#xA;options are a subset of the {@link Ext.Fx} animation options specific to Fx effects.  The supported&#xA;Element animation configuration options are:&#xA;Option    Default   Description&#xA;--------- --------  ---------------------------------------------&#xA;{@link Ext.Fx#duration duration}  .35       The duration of the animation in seconds&#xA;{@link Ext.Fx#easing easing}    easeOut   The easing method&#xA;{@link Ext.Fx#callback callback}  none      A function to execute when the anim completes&#xA;{@link Ext.Fx#scope scope}     this      The scope (this) of the callback function&#xA;&#xA;&#xA;// Element animation options object&#xA;var opt = {&#xA;{@link Ext.Fx#duration duration}: 1,&#xA;{@link Ext.Fx#easing easing}: &apos;elasticIn&apos;,&#xA;{@link Ext.Fx#callback callback}: this.foo,&#xA;{@link Ext.Fx#scope scope}: this&#xA;// animation with some options set&#xA;el.setWidth(100, opt);&#xA;&#xA;The Element animation object being used for the animation will be set on the options&#xA;object as &quot;anim&quot;, which allows you to stop or manipulate the animation. Here is an example:&#xA;&#xA;// using the &quot;anim&quot; property to get the Anim object&#xA;if(opt.anim.isAnimated()){&#xA;opt.anim.stop();&#xA;&#xA;Also see the {@link #animate} method for another animation technique.&#xA;Composite (Collections of) Elements&#xA;For working with collections of Elements, see {@link Ext.CompositeElement}" ilk="function" line="76" lineend="945" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="document" line="77" name="DOC" />
        <variable attributes="__local__ private" citdl="Ext.lib.Anim" line="109" name="A" />
        <variable attributes="__local__ private" citdl="Ext.Element" line="109" lineend="700" name="El" />
        <variable attributes="__local__ private" citdl="Ext.lib.Event" line="109" name="E" />
        <variable attributes="__local__ private" citdl="Ext.lib.Dom" line="109" name="D" />
        <variable attributes="__local__ private" citdl="Ext.DomHelper" line="109" name="DH" />
        <variable attributes="__local__ private" citdl="El.prototype" line="702" name="ep" />
        <variable attributes="__local__ private" line="738" name="unitPattern" />
        <variable attributes="__local__ private" citdl="f" line="738" name="docEl" />
        <scope attributes="__local__ private" ilk="function" line="824" lineend="860" name="garbageCollect" signature="garbageCollect()">
          <variable attributes="__local__ private" citdl="El.cache[eid]" line="830" name="el" />
          <variable attributes="__local__ private" line="830" name="eid" />
          <variable attributes="__local__ private" citdl="el.dom" line="830" name="d" />
        </scope>
        <scope attributes="__local__ private" classrefs="El.prototype" ilk="class" line="863" lineend="869" name="flyFn">
          <scope attributes="__local__ private __ctor__" ilk="function" line="863" lineend="863" name="flyFn" signature="flyFn()">
            <variable citdl="flyFn" name="this" />
          </scope>
        </scope>
        <variable attributes="__local__ private" citdl="Ext.isStrict" line="930" name="noBoxAdjust" />
        <variable citdl="Number" line="931" name="select" />
        <variable citdl="Number" line="933" name="input" />
        <variable citdl="Number" line="933" name="textarea" />
        <scope attributes="__local__ private" ilk="function" line="940" lineend="944" name="(anonymous)" signature="(anonymous)()" />
      </scope>
      <scope classrefs="Ext.data.DataWriter" ilk="class" line="77" lineend="102" name="JsonWriter">
        <variable line="23" name="returnJson" />
        <variable citdl="Boolean" doc="{@link Ext.data.DataWriter#toHash hashed data}. Defaults to true.  When using&#xA;{@link Ext.data.DirectProxy}, set this to false since Ext.Direct.JsonProvider will perform&#xA;its own json-encoding.  In addition, if you&apos;re using {@link Ext.data.HttpProxy}, setting to false&#xA;will cause HttpProxy to transmit data using the jsonData configuration-params of {@link Ext.Ajax#request}&#xA;instead of params.  When using a {@link Ext.data.Store#restful} Store, some serverside frameworks are&#xA;tuned to expect data through the jsonData mechanism.  In those cases, one will want to set encode: false" line="33" name="encode" />
        <scope doc="Final action of a write event.  Apply the written data-object to params." ilk="function" line="42" lineend="51" name="render" signature="render(action, rs, params, data)">
          <variable citdl="String" doc="[Ext.data.Api.actions.create|read|update|destroy]" ilk="argument" name="action" />
          <variable citdl="Array" ilk="argument" name="rs" />
          <variable citdl="Ext.encode()" ilk="argument" name="params" />
          <variable citdl="Object" doc="object populated according to DataReader meta-data &quot;root&quot; and &quot;idProperty&quot;" ilk="argument" name="data" />
        </scope>
        <scope doc="createRecord" ilk="function" line="57" lineend="59" name="createRecord" returns="this.toHash()" signature="createRecord(rec)">
          <variable citdl="Ext.data.Record" ilk="argument" name="rec" />
        </scope>
        <scope doc="updateRecord" ilk="function" line="65" lineend="68" name="updateRecord" returns="this.toHash()" signature="updateRecord(rec)">
          <variable citdl="Ext.data.Record" ilk="argument" name="rec" />
        </scope>
        <scope doc="destroyRecord" ilk="function" line="74" lineend="76" name="destroyRecord" returns="rec.id" signature="destroyRecord(rec)">
          <variable citdl="Ext.data.Record" ilk="argument" name="rec" />
        </scope>
      </scope>
      <variable citdl="Object" line="81" name="document">
        <variable citdl="String" line="81" name="cookie" />
      </variable>
      <variable citdl="dom.id" line="82" name="id" />
      <variable citdl="tasks[i]" line="85" name="t" />
      <variable citdl="now" line="86" name="itime" />
      <variable citdl="t.run.apply()" line="88" name="rt" />
      <variable citdl="Object" line="110" name="conn">
        <variable citdl="url" line="110" name="url" />
      </variable>
      <variable citdl="Object" line="116" name="reader">
        <variable citdl="this.onMetaChange.createDelegate()" line="116" name="onMetaChange" />
      </variable>
      <variable citdl="Object" line="119" name="writer">
        <variable citdl="this.reader.meta" line="119" name="meta" />
      </variable>
      <scope attributes="__local__ private" doc="&#xA;&#xA;&#xA;Format  Description                                                               Example returned values&#xA;------  -----------------------------------------------------------------------   -----------------------&#xA;d     Day of the month, 2 digits with leading zeros                             01 to 31&#xA;D     A short textual representation of the day of the week                     Mon to Sun&#xA;j     Day of the month without leading zeros                                    1 to 31&#xA;l     A full textual representation of the day of the week                      Sunday to Saturday&#xA;N     ISO-8601 numeric representation of the day of the week                    1 (for Monday) through 7 (for Sunday)&#xA;S     English ordinal suffix for the day of the month, 2 characters             st, nd, rd or th. Works well with j&#xA;w     Numeric representation of the day of the week                             0 (for Sunday) to 6 (for Saturday)&#xA;z     The day of the year (starting from 0)                                     0 to 364 (365 in leap years)&#xA;W     ISO-8601 week number of year, weeks starting on Monday                    01 to 53&#xA;F     A full textual representation of a month, such as January or March        January to December&#xA;m     Numeric representation of a month, with leading zeros                     01 to 12&#xA;M     A short textual representation of a month                                 Jan to Dec&#xA;n     Numeric representation of a month, without leading zeros                  1 to 12&#xA;t     Number of days in the given month                                         28 to 31&#xA;L     Whether it&apos;s a leap year                                                  1 if it is a leap year, 0 otherwise.&#xA;o     ISO-8601 year number (identical to (Y), but if the ISO week number (W)    Examples: 1998 or 2004&#xA;belongs to the previous or next year, that year is used instead)&#xA;Y     A full numeric representation of a year, 4 digits                         Examples: 1999 or 2003&#xA;y     A two digit representation of a year                                      Examples: 99 or 03&#xA;a     Lowercase Ante meridiem and Post meridiem                                 am or pm&#xA;A     Uppercase Ante meridiem and Post meridiem                                 AM or PM&#xA;g     12-hour format of an hour without leading zeros                           1 to 12&#xA;G     24-hour format of an hour without leading zeros                           0 to 23&#xA;h     12-hour format of an hour with leading zeros                              01 to 12&#xA;H     24-hour format of an hour with leading zeros                              00 to 23&#xA;i     Minutes, with leading zeros                                               00 to 59&#xA;s     Seconds, with leading zeros                                               00 to 59&#xA;u     Decimal fraction of a second                                              Examples:&#xA;(minimum 1 digit, arbitrary number of digits allowed)                     001 (i.e. 0.001s) or&#xA;100 (i.e. 0.100s) or&#xA;999 (i.e. 0.999s) or&#xA;999876543210 (i.e. 0.999876543210s)&#xA;O     Difference to Greenwich time (GMT) in hours and minutes                   Example: +1030&#xA;P     Difference to Greenwich time (GMT) with colon between hours and minutes   Example: -08:00&#xA;T     Timezone abbreviation of the machine running the code                     Examples: EST, MDT, PDT ...&#xA;Z     Timezone offset in seconds (negative if west of UTC, positive if east)    -43200 to 50400&#xA;c     ISO 8601 date&#xA;Notes:                                                                    Examples:&#xA;1) If unspecified, the month / day defaults to the current month / day,   1991 or&#xA;the time defaults to midnight, while the timezone defaults to the      1992-10 or&#xA;browser&apos;s timezone. If a time is specified, it must include both hours 1993-09-20 or&#xA;and minutes. The &quot;T&quot; delimiter, seconds, milliseconds and timezone     1994-08-19T16:20+01:00 or&#xA;are optional.                                                          1995-07-18T17:21:28-02:00 or&#xA;2) The decimal fraction of a second, if specified, must contain at        1996-06-17T18:22:29.98765+03:00 or&#xA;least 1 digit (there is no limit to the maximum number                 1997-05-16T19:23:30,12345-0400 or&#xA;of digits allowed), and may be delimited by either a &apos;.&apos; or a &apos;,&apos;      1998-04-15T20:24:31.2468Z or&#xA;Refer to the examples on the right for the various levels of              1999-03-14T20:24:32Z or&#xA;date-time granularity which are supported, or see                         2000-02-13T21:25:33&#xA;http://www.w3.org/TR/NOTE-datetime for more info.                         2001-01-12 22:26:34&#xA;U     Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463&#xA;M$    Microsoft AJAX serialized dates                                           \/Date(1238606590509)\/ (i.e. UTC milliseconds since epoch) or&#xA;\/Date(1238606590509+0800)\/&#xA;&#xA;&#xA;// Sample date:&#xA;// &apos;Wed Jan 10 2007 15:05:01 GMT-0600 (Central Standard Time)&apos;&#xA;var dt = new Date(&apos;1/10/2007 03:05:01 PM GMT-0600&apos;);&#xA;document.write(dt.format(&apos;Y-m-d&apos;));                           // 2007-01-10&#xA;document.write(dt.format(&apos;F j, Y, g:i a&apos;));                   // January 10, 2007, 3:05 pm&#xA;document.write(dt.format(&apos;l, \\t\\he jS \\of F Y h:i:s A&apos;));  // Wednesday, the 10th of January 2007 03:05:01 PM&#xA;&#xA;&#xA;Date.patterns = {&#xA;ISO8601Long:&quot;Y-m-d H:i:s&quot;,&#xA;ISO8601Short:&quot;Y-m-d&quot;,&#xA;ShortDate: &quot;n/j/Y&quot;,&#xA;LongDate: &quot;l, F d, Y&quot;,&#xA;FullDateTime: &quot;l, F d, Y g:i:s A&quot;,&#xA;MonthDay: &quot;F d&quot;,&#xA;ShortTime: &quot;g:i A&quot;,&#xA;LongTime: &quot;g:i:s A&quot;,&#xA;SortableDateTime: &quot;Y-m-d\\TH:i:s&quot;,&#xA;UniversalSortableDateTime: &quot;Y-m-d H:i:sO&quot;,&#xA;YearMonth: &quot;F, Y&quot;&#xA;&#xA;&#xA;var dt = new Date();&#xA;document.write(dt.format(Date.patterns.ShortDate));&#xA;*//*" ilk="function" line="120" lineend="926" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="function" line="137" lineend="142" name="xf" returns="format.replace()" signature="xf(format)">
          <variable ilk="argument" name="format" />
          <variable attributes="__local__ private" citdl="Array.prototype.slice.call()" line="138" name="args" />
        </scope>
        <variable attributes="__local__ private" citdl="Date.formatCodeToRegex" line="165" name="$f" />
      </scope>
      <scope attributes="__local__ private" ilk="function" line="120" lineend="157" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="DOC.getElementById()" line="131" name="el" />
        <variable attributes="__local__ private" citdl="document" line="131" name="DOC" />
        <variable attributes="__local__ private" citdl="attrs.match()" line="131" name="typeMatch" />
        <variable attributes="__local__ private" line="131" name="typeRe" />
        <variable attributes="__local__ private" line="131" name="re" />
        <variable attributes="__local__ private" citdl="DOC.createElement()" line="131" name="s" />
        <variable attributes="__local__ private" citdl="DOC.getElementsByTagName()[0]" line="131" name="hd" />
        <variable attributes="__local__ private" line="131" name="srcRe" />
        <variable attributes="__local__ private" citdl="attrs" line="131" name="srcMatch" />
        <variable attributes="__local__ private" line="131" name="match" />
        <variable attributes="__local__ private" citdl="match[1]" line="131" name="attrs" />
      </scope>
      <variable citdl="Ext.EventObjectImpl" line="123" name="e" />
      <variable citdl="ename.toLowerCase()" line="132" name="ename" />
      <variable citdl="Array" line="152" name="tasks" />
      <variable citdl="Array" line="153" name="removeQueue" />
      <variable citdl="Object" line="164" name="proxy">
        <variable citdl="Object" line="164" lineend="164" name="api" />
      </variable>
      <variable citdl="Object" line="166" name="field">
        <variable citdl="String" line="166" name="msgTarget" />
        <variable citdl="Boolean" line="168" name="inEditor" />
      </variable>
      <variable citdl="Object" line="167" name="wrap">
        <variable citdl="Object" line="167" name="style">
          <variable citdl="String" line="167" name="display" />
        </variable>
      </variable>
      <variable citdl="Object" line="171" name="dragSpecs">
        <variable citdl="size" line="171" name="startSize" />
        <variable citdl="Array" line="172" name="startPoint" />
      </variable>
      <variable citdl="isOpera" line="182" name="cn" />
      <variable citdl="Object" line="208" name="item">
        <variable citdl="Boolean" line="208" name="inGroup" />
        <variable line="1006" name="tabEl" />
      </variable>
      <variable citdl="sp" line="226" name="overrides" />
      <variable citdl="sb" line="227" name="sp" />
      <variable citdl="overrides.constructor" line="228" name="sb" />
      <variable line="237" name="BOTTOM" />
      <variable line="237" name="NULL" />
      <variable line="237" name="LEFT" />
      <variable line="237" name="bh" />
      <variable citdl="Object" line="237" name="b">
        <variable line="237" name="width" />
        <variable line="238" name="height" />
        <variable line="239" name="right" />
      </variable>
      <variable line="237" name="st" />
      <variable line="238" name="TOP" />
      <variable line="238" name="RIGHT" />
      <variable line="238" name="bw" />
      <variable line="239" name="SETX" />
      <variable line="240" name="SETY" />
      <variable line="243" name="SETXY" />
      <variable citdl="Object" line="247" name="body">
        <variable citdl="Object" line="247" name="dom">
          <variable citdl="Number" line="247" name="scrollTop" />
        </variable>
      </variable>
      <variable citdl="fn" line="253" name="window" />
      <variable citdl="Object" line="255" name="arguments">
        <variable citdl="Object" line="255" name="callee">
          <variable citdl="fly().fxanim()" line="255" lineend="655" name="anim" />
        </variable>
      </variable>
      <variable citdl="Object" line="262" name="attributes">
        <variable citdl="String" line="262" name="text" />
        <variable citdl="n" line="846" name="htmlNode" />
      </variable>
      <variable citdl="Object" line="273" name="ctNode">
        <variable citdl="Object" line="273" name="style">
          <variable citdl="String" line="273" name="display" />
        </variable>
      </variable>
      <variable citdl="Object" line="282" name="this">
        <variable line="158" name="textNode" />
        <variable line="173" name="targetXY" />
        <variable line="282" name="type" />
      </variable>
      <variable line="290" name="comp()" />
      <variable citdl="Object" line="291" name="el">
        <variable citdl="Object" line="73" name="ddScrollConfig">
          <variable citdl="Ext.dd.ScrollManager.frequency" line="73" name="frequency" />
        </variable>
        <variable citdl="Object" line="291" name="dom">
          <variable citdl="this.checked" line="165" name="checked" />
          <variable citdl="this.checked" line="166" name="defaultChecked" />
          <variable citdl="Boolean" line="225" name="readOnly" />
          <variable citdl="Object" line="268" name="firstChild">
            <variable citdl="Object" line="268" name="style">
              <variable citdl="String" line="268" name="display" />
            </variable>
          </variable>
          <variable citdl="String" line="291" name="unselectable" />
          <variable citdl="Object" line="383" name="style">
            <variable citdl="String" line="383" name="border" />
          </variable>
          <variable citdl="this.indicatorText" line="427" name="innerHTML" />
          <variable citdl="this.inputValue" line="484" name="value" />
        </variable>
      </variable>
      <variable line="342" name="HEIGHT" />
      <variable line="343" name="WIDTH" />
      <variable line="344" name="zero" />
      <variable line="344" name="POINTS" />
      <variable citdl="pair.split()" line="345" name="pair" />
      <scope attributes="__local__ private" ilk="function" line="347" lineend="385" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="function" line="349" lineend="380" name="initExtCss" returns="Boolean" signature="initExtCss()">
          <variable attributes="__local__ private" citdl="document.body" line="351" name="bd" />
          <variable attributes="__local__ private" citdl="Array" line="354" name="cls" />
          <variable attributes="__local__ private" citdl="bd.parentNode" line="373" name="p" />
        </scope>
      </scope>
      <scope attributes="__local__ private" ilk="function" line="362" lineend="781" name="(anonymous)" signature="(anonymous)()">
        <variable attributes="__local__ private" citdl="Ext.Toolbar" line="364" lineend="644" name="T" />
      </scope>
      <variable citdl="Object" line="425" name="p">
        <scope ilk="function" line="425" lineend="427" name="getState" returns="Ext.apply()" signature="getState()">
          <variable citdl="p" name="this" />
        </scope>
      </variable>
      <variable citdl="Object" line="507" name="ui">
        <variable line="507" name="childIndent" />
      </variable>
      <variable citdl="Object" line="564" name="Function">
        <variable citdl="Object" line="564" name="prototype">
          <scope doc="Create a combined function call sequence of the original function + the passed function.&#xA;The resulting function returns the results of the original function.&#xA;The passed fcn is called with the parameters of the original function. Example usage:&#xA;&#xA;var sayHi = function(name){&#xA;alert(&apos;Hi, &apos; + name);&#xA;sayHi(&apos;Fred&apos;); // alerts &quot;Hi, Fred&quot;&#xA;var sayGoodbye = sayHi.createSequence(function(name){&#xA;alert(&apos;Bye, &apos; + name);&#xA;});&#xA;sayGoodbye(&apos;Fred&apos;); // both alerts show" ilk="function" line="554" lineend="563" name="createSequence" returns="Function" signature="createSequence(fcn, scope)">
            <variable citdl="Function" doc="The function to sequence" ilk="argument" name="fcn" />
            <variable citdl="Object" doc="(optional) The scope of the passed fcn (Defaults to scope of original function or window)" ilk="argument" name="scope" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this" line="555" name="method" />
            <scope attributes="__local__ private" ilk="function" line="558" lineend="562" name="(anonymous)" returns="retval" signature="(anonymous)()">
              <variable attributes="__local__ private" citdl="method.apply()" line="559" name="retval" />
            </scope>
          </scope>
          <scope doc="Creates an interceptor function. The passed fcn is called before the original one. If it returns false,&#xA;the original one is not called. The resulting function returns the results of the original function.&#xA;The passed fcn is called with the parameters of the original function. Example usage:&#xA;&#xA;var sayHi = function(name){&#xA;alert(&apos;Hi, &apos; + name);&#xA;sayHi(&apos;Fred&apos;); // alerts &quot;Hi, Fred&quot;&#xA;// create a new function that validates input without&#xA;// directly modifying the original function:&#xA;var sayHiToFriend = sayHi.createInterceptor(function(name){&#xA;return name == &apos;Brian&apos;;&#xA;});&#xA;sayHiToFriend(&apos;Fred&apos;);  // no alert&#xA;sayHiToFriend(&apos;Brian&apos;); // alerts &quot;Hi, Brian&quot;" ilk="function" line="735" lineend="748" name="createInterceptor" returns="Function" signature="createInterceptor(fcn, scope)">
            <variable citdl="Function" doc="The function to call before the original" ilk="argument" name="fcn" />
            <variable citdl="Object" doc="(optional) The scope of the passed fcn (Defaults to scope of original function or window)" ilk="argument" name="scope" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this" line="736" name="method" />
            <scope attributes="__local__ private" ilk="function" line="739" lineend="747" name="(anonymous)" signature="(anonymous)()">
              <variable attributes="__local__ private" citdl="this" line="741" name="me" />
              <variable attributes="__local__ private" citdl="arguments" line="741" name="args" />
            </scope>
          </scope>
          <scope doc="Creates a callback that passes arguments[0], arguments[1], arguments[2], ...&#xA;Call directly on any function. Example: myFunction.createCallback(arg1, arg2)&#xA;Will create a function that is bound to those 2 args. If a specific scope is required in the&#xA;callback, use {@link #createDelegate} instead. The function returned by createCallback always&#xA;executes in the window scope.&#xA;This method is required when you want to pass arguments to a callback function.  If no arguments&#xA;are needed, you can simply pass a reference to the function as a callback (e.g., callback: myFn).&#xA;However, if you tried to pass a function with arguments (e.g., callback: myFn(arg1, arg2)) the function&#xA;would simply execute immediately when the code is parsed. Example usage:&#xA;&#xA;var sayHi = function(name){&#xA;alert(&apos;Hi, &apos; + name);&#xA;// clicking the button alerts &quot;Hi, Fred&quot;&#xA;new Ext.Button({&#xA;text: &apos;Say Hi&apos;,&#xA;renderTo: Ext.getBody(),&#xA;handler: sayHi.createCallback(&apos;Fred&apos;)&#xA;});" ilk="function" line="774" lineend="781" name="createCallback" returns="Function" signature="createCallback()">
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="arguments" line="777" name="args" />
            <variable attributes="__local__ private" citdl="this" line="777" name="method" />
          </scope>
          <scope doc="Creates a delegate (callback) that sets the scope to obj.&#xA;Call directly on any function. Example: this.myFunction.createDelegate(this, [arg1, arg2])&#xA;Will create a function that is automatically scoped to obj so that the this variable inside the&#xA;callback points to obj. Example usage:&#xA;&#xA;var sayHi = function(name){&#xA;// Note this use of &quot;this.text&quot; here.  This function expects to&#xA;// execute within a scope that contains a text property.  In this&#xA;// example, the &quot;this&quot; variable is pointing to the btn object that&#xA;// was passed in createDelegate below.&#xA;alert(&apos;Hi, &apos; + name + &apos;. You clicked the &quot;&apos; + this.text + &apos;&quot; button.&apos;);&#xA;var btn = new Ext.Button({&#xA;text: &apos;Say Hi&apos;,&#xA;renderTo: Ext.getBody()&#xA;});&#xA;// This callback will execute in the scope of the&#xA;// button instance. Clicking the button alerts&#xA;// &quot;Hi, Fred. You clicked the &quot;Say Hi&quot; button.&quot;&#xA;btn.on(&apos;click&apos;, sayHi.createDelegate(btn, [&apos;Fred&apos;]));" ilk="function" line="813" lineend="827" name="createDelegate" returns="Function" signature="createDelegate(obj, args, appendArgs)">
            <variable citdl="Object" doc="(optional) The object for which the scope is set" ilk="argument" name="obj" />
            <variable citdl="Array" doc="(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)" ilk="argument" name="args" />
            <variable citdl="Boolean/Number" doc="(optional) if True args are appended to call args instead of overriding,&#xA;if a number the args are inserted at the specified position" ilk="argument" name="appendArgs" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this" line="814" name="method" />
            <variable attributes="__local__ private" citdl="args" line="816" name="callArgs" />
            <variable attributes="__local__ private" citdl="Array" line="822" name="applyArgs" />
          </scope>
          <scope doc="Calls this function after the number of millseconds specified, optionally in a specific scope. Example usage:&#xA;&#xA;var sayHi = function(name){&#xA;alert(&apos;Hi, &apos; + name);&#xA;// executes immediately:&#xA;sayHi(&apos;Fred&apos;);&#xA;// executes after 2 seconds:&#xA;sayHi.defer(2000, this, [&apos;Fred&apos;]);&#xA;// this syntax is sometimes useful for deferring&#xA;// execution of an anonymous function:&#xA;(function(){&#xA;alert(&apos;Anonymous&apos;);&#xA;}).defer(100);" ilk="function" line="855" lineend="862" name="defer" returns="Number" signature="defer(millis, obj, args, appendArgs)">
            <variable citdl="Number" doc="The number of milliseconds for the setTimeout call (if less than or equal to 0 the function is executed immediately)" ilk="argument" name="millis" />
            <variable citdl="Object" doc="(optional) The object for which the scope is set" ilk="argument" name="obj" />
            <variable citdl="Array" doc="(optional) Overrides arguments for the call. (Defaults to the arguments passed by the caller)" ilk="argument" name="args" />
            <variable citdl="Boolean/Number" doc="(optional) if True args are appended to call args instead of overriding,&#xA;if a number the args are inserted at the specified position" ilk="argument" name="appendArgs" />
            <variable citdl="prototype" name="this" />
            <variable attributes="__local__ private" citdl="this.createDelegate()" line="856" name="fn" />
          </scope>
        </variable>
      </variable>
      <variable citdl="Object" line="596" name="success">
        <variable citdl="this.getParams()" line="596" name="params" />
      </variable>
      <variable citdl="Number" line="598" name="count" />
      <variable citdl="Object" line="600" lineend="177" name="c">
        <variable citdl="Ext.get()" line="43" name="container" />
        <scope ilk="function" line="174" lineend="177" name="fireEvent" signature="fireEvent()">
          <variable citdl="c" name="this" />
        </scope>
        <variable attributes="__local__ private" citdl="arguments" line="574" name="a" />
        <variable attributes="__local__ private" citdl="a.length" line="574" name="len" />
        <variable attributes="__local__ private" citdl="this.lookupComponent()" line="581" name="c" />
        <variable citdl="c.minWidth" line="1037" name="minWidth" />
      </variable>
      <variable line="621" name="swfobject" />
      <scope doc="Utility function that allows you to easily switch a string between two alternating values.  The passed value&#xA;is compared to the current string, and if they are equal, the other value that was passed in is returned.  If&#xA;they are already different, the first value passed in is returned.  Note that this method returns the new value&#xA;but does not change the current string.&#xA;&#xA;// alternate sort directions&#xA;sort = sort.toggle(&apos;ASC&apos;, &apos;DESC&apos;);&#xA;// instead of conditional logic:&#xA;sort = (sort == &apos;ASC&apos; ? &apos;DESC&apos; : &apos;ASC&apos;);" ilk="class" line="624" lineend="626" name="String">
        <scope doc="Utility function that allows you to easily switch a string between two alternating values.  The passed value&#xA;is compared to the current string, and if they are equal, the other value that was passed in is returned.  If&#xA;they are already different, the first value passed in is returned.  Note that this method returns the new value&#xA;but does not change the current string.&#xA;&#xA;// alternate sort directions&#xA;sort = sort.toggle(&apos;ASC&apos;, &apos;DESC&apos;);&#xA;// instead of conditional logic:&#xA;sort = (sort == &apos;ASC&apos; ? &apos;DESC&apos; : &apos;ASC&apos;);" ilk="function" line="624" lineend="626" name="toggle" returns="String" signature="toggle(value, other)">
          <variable citdl="String" doc="The value to compare to the current string" ilk="argument" name="value" />
          <variable citdl="String" doc="The new value to use if the string already equals the first value passed in" ilk="argument" name="other" />
          <variable citdl="String" name="this" />
        </scope>
        <variable doc="Trims whitespace from either end of a string, leaving spaces within the string intact.  Example:&#xA;&#xA;var s = &apos;  foo bar  &apos;;&#xA;alert(&apos;-&apos; + s + &apos;-&apos;);         //alerts &quot;- foo bar -&quot;&#xA;alert(&apos;-&apos; + s.trim() + &apos;-&apos;);  //alerts &quot;-foo bar-&quot;" line="637" name="trim" />
      </scope>
      <variable citdl="Object" line="626" name="node">
        <variable citdl="Boolean" line="626" name="expanded" />
      </variable>
      <variable line="634" name="i" />
      <scope attributes="__local__ private" ilk="function" line="668" lineend="733" name="(anonymous)" signature="(anonymous)()">
        <scope attributes="__local__ private" ilk="function" line="669" lineend="673" name="up" signature="up(e, m)">
          <variable ilk="argument" name="e" />
          <variable ilk="argument" name="m" />
        </scope>
        <scope attributes="__local__ private" ilk="function" line="674" lineend="678" name="down" signature="down(e, m)">
          <variable ilk="argument" name="e" />
          <variable ilk="argument" name="m" />
        </scope>
      </scope>
      <variable citdl="Object" line="697" name="dom">
        <variable citdl="value" line="248" name="style" />
        <variable citdl="String" line="290" name="unselectable" />
        <variable citdl="html" line="697" name="innerHTML" />
      </variable>
      <variable citdl="Object" line="706" name="f" />
      <variable citdl="Object" line="757" name="config">
        <variable citdl="Object" line="757" lineend="757" name="autoEl">
          <variable citdl="config.text" line="757" name="html" />
          <variable citdl="String" line="757" name="cls" />
        </variable>
      </variable>
      <variable citdl="Object" line="769" name="autoEl">
        <variable citdl="t" line="769" name="html" />
      </variable>
      <variable line="847" name="tm" />
      <variable citdl="Object" line="895" name="htmlNode">
        <variable citdl="Object" line="895" name="style">
          <variable citdl="String" line="895" name="border" />
        </variable>
      </variable>
      <variable citdl="Object" line="1080" name="state">
        <variable citdl="newSize" line="1080" name="height" />
        <variable citdl="newSize" line="1083" name="width" />
      </variable>
      <scope classrefs="Ext.dd.DDProxy" ilk="class" line="1776" lineend="26" name="SplitDragZone">
        <scope attributes="__local__ private" ilk="function" line="14" lineend="318" name="(anonymous)" signature="(anonymous)()">
          <variable citdl="SplitDragZone" name="this" />
          <variable attributes="__local__ private" citdl="String" line="15" name="INTERNAL" />
        </scope>
        <scope ilk="function" line="1707" lineend="1723" name="b4StartDrag" signature="b4StartDrag(x, y)">
          <variable ilk="argument" name="x" />
          <variable ilk="argument" name="y" />
          <variable attributes="__local__ private" citdl="this.view.mainWrap.getHeight()" line="1709" name="h" />
          <variable attributes="__local__ private" citdl="this.cm.getColumnWidth()" line="1714" name="w" />
          <variable attributes="__local__ private" citdl="Math.max()" line="1715" name="minw" />
        </scope>
        <variable citdl="x" line="1719" name="minX" />
        <variable citdl="x" line="1720" name="maxX" />
        <variable citdl="x" line="1721" name="startPos" />
        <scope ilk="function" line="1726" lineend="1760" name="handleMouseDown" signature="handleMouseDown(e)">
          <variable ilk="argument" name="e" />
          <variable attributes="__local__ private" citdl="this.view.findHeaderCell()" line="1727" name="t" />
          <variable attributes="__local__ private" citdl="this.view.fly().getXY()" line="1729" name="xy" />
          <variable attributes="__local__ private" citdl="xy[1]" line="1729" name="y" />
          <variable attributes="__local__ private" citdl="xy[0]" line="1729" name="x" />
          <variable attributes="__local__ private" citdl="e.getXY()" line="1730" name="exy" />
          <variable attributes="__local__ private" citdl="exy[0]" line="1730" name="ex" />
          <variable attributes="__local__ private" citdl="Boolean" line="1731" name="adjust" />
          <variable attributes="__local__ private" citdl="t.offsetWidth" line="1731" name="w" />
          <variable attributes="__local__ private" citdl="this.view.getCellIndex()" line="1739" name="ci" />
        </scope>
        <variable citdl="this.grid.colModel" line="1738" name="cm" />
        <variable citdl="ci" line="1751" name="cellIndex" />
        <variable citdl="Object" line="1752" name="split" />
        <scope ilk="function" line="1762" lineend="1771" name="endDrag" signature="endDrag(e)">
          <variable ilk="argument" name="e" />
          <variable attributes="__local__ private" citdl="Object" line="1764" name="v" />
          <variable attributes="__local__ private" citdl="Math.max()" line="1765" name="endX" />
          <variable attributes="__local__ private" citdl="endX" line="1766" name="diff" />
          <scope attributes="__local__ private" ilk="function" line="1768" lineend="1770" name="(anonymous)" signature="(anonymous)()" />
        </scope>
        <scope ilk="function" line="1773" lineend="1775" name="autoOffset" signature="autoOffset()" />
      </scope>
    </scope>
  </file>
</codeintel>
