<!-- ***** BEGIN LICENSE BLOCK *****
 Version: MPL 1.1/GPL 2.0/LGPL 2.1
 
 The contents of this file are subject to the Mozilla Public License
 Version 1.1 (the "License"); you may not use this file except in
 compliance with the License. You may obtain a copy of the License at
 http://www.mozilla.org/MPL/
 
 Software distributed under the License is distributed on an "AS IS"
 basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 License for the specific language governing rights and limitations
 under the License.
 
 The Original Code is Komodo code.
 
 The Initial Developer of the Original Code is ActiveState Software Inc.
 Portions created by ActiveState Software Inc are Copyright (C) 2000-2007
 ActiveState Software Inc. All Rights Reserved.
 
 Contributor(s):
   ActiveState Software Inc
 
 Alternatively, the contents of this file may be used under the terms of
 either the GNU General Public License Version 2 or later (the "GPL"), or
 the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 in which case the provisions of the GPL or the LGPL are applicable instead
 of those above. If you wish to allow use of your version of this file only
 under the terms of either the GPL or the LGPL, and not to allow others to
 use your version of this file under the terms of the MPL, indicate your
 decision by deleting the provisions above and replace them with the notice
 and other provisions required by the GPL or the LGPL. If you do not delete
 the provisions above, a recipient may use your version of this file under
 the terms of any one of the MPL, the GPL or the LGPL.
 
 ***** END LICENSE BLOCK ***** -->

<codeintel name="Rails" version="2.0" description="Rails version 1.1.6">
  <file lang="Ruby" path="rails.cix">
    <scope name="rails" lang="Ruby" ilk="blob">
      <scope name="ActionController" ilk="namespace">
        <scope name="AbstractRequest" classrefs="Object" ilk="class">
          <scope name="relative_url_root" signature="()" doc="Returns the path minus the web server relative installation&#xA;directory. This can be set with the environment variable&#xA;RAILS_RELATIVE_URL_ROOT. It can be automatically extracted&#xA;for Apache setups. If the server is not Apache, this method&#xA;returns an empty string." attributes="__classmethod__" ilk="function" />
          <scope name="relative_url_root=" attributes="__classmethod__" ilk="function" />
          <scope name="accepts" signature="()" doc="Returns the accepted MIME type for the request" ilk="function" />
          <scope name="content_type" signature="()" doc="Determine whether the body of a HTTP call is&#xA;URL-encoded (default) or matches one of the registered&#xA;param_parsers.For backward compatibility, the post format is&#xA;extracted from the X-Post-Data-Format HTTP header if&#xA;present." ilk="function" />
          <scope name="cookies" ilk="function" />
          <scope name="delete?" signature="()" doc="Is this a DELETE request? Equivalent to&#xA;request.method == :delete" ilk="function" />
          <scope name="domain" signature="(tld_length = 1)" doc="Returns the domain part of a host, such as rubyonrails.org&#xA;in &quot;www.rubyonrails.org&quot;. You can specify a&#xA;different tld_length, such as 2 to catch rubyonrails.co.uk&#xA;in &quot;www.rubyonrails.co.uk&quot;." ilk="function" />
          <scope name="env" ilk="function" />
          <scope name="formatted_post?" signature="()" doc="Is this a POST request formatted as XML or YAML?" ilk="function" />
          <scope name="get?" signature="()" doc="Is this a GET (or HEAD) request? Equivalent to&#xA;request.method == :get" ilk="function" />
          <scope name="head?" signature="()" doc="Is this a HEAD request? HEAD is mapped as :get for&#xA;request.method, so here we ask the REQUEST_METHOD header&#xA;directly. Thus, for head, both get? and head? will return&#xA;true." ilk="function" />
          <scope name="host" signature="()" doc="Returns the host for this request, such as example.com." ilk="function" />
          <scope name="host_with_port" signature="()" doc="Returns a host:port string for this request, such as&#xA;example.com or example.com:8080." ilk="function" />
          <scope name="parameters" signature="()" doc="Returns both GET and POST parameters in a single hash." ilk="function" />
          <scope name="path" signature="()" doc="Returns the interpreted path to requested resource after all&#xA;the installation directory of this application was taken&#xA;into account" ilk="function" />
          <scope name="path_parameters" signature="()" doc="Returns a hash with the parameters used to form the path of&#xA;the requestExample:  {:action =&gt; &apos;my_action&apos;, :controller =&gt; &apos;my_controller&apos;}&#xA;" ilk="function" />
          <scope name="path_parameters=" ilk="function" />
          <scope name="port" signature="()" doc="Returns the port number of this request as an integer." ilk="function" />
          <scope name="port_string" signature="()" doc="Returns a port suffix like &quot;:8080&quot; if the port&#xA;number of this request is not the default HTTP port 80 or&#xA;HTTPS port 443." ilk="function" />
          <scope name="post?" signature="()" doc="Is this a POST request? Equivalent to&#xA;request.method == :post" ilk="function" />
          <scope name="post_format" signature="()" doc="Determine whether the body of a HTTP call is&#xA;URL-encoded (default) or matches one of the registered&#xA;param_parsers.For backward compatibility, the post format is&#xA;extracted from the X-Post-Data-Format HTTP header if&#xA;present." ilk="function" />
          <scope name="protocol" signature="()" doc="Return &apos;https://&apos; if this is an SSL request&#xA;and &apos;http://&apos; otherwise." ilk="function" />
          <scope name="put?" signature="()" doc="Is this a PUT request? Equivalent to request.method == :put" ilk="function" />
          <scope name="query_parameters" ilk="function" />
          <scope name="raw_post" signature="()" doc="Receive the raw post data. This is useful for services such&#xA;as REST, XMLRPC and SOAP which communicate over HTTP POST&#xA;but don&apos;t use the traditional parameter format." ilk="function" />
          <scope name="relative_url_root" signature="()" doc="Returns the path minus the web server relative installation&#xA;directory. This can be set with the environment variable&#xA;RAILS_RELATIVE_URL_ROOT. It can be automatically extracted&#xA;for Apache setups. If the server is not Apache, this method&#xA;returns an empty string." ilk="function" />
          <scope name="relative_url_root=" ilk="function" />
          <scope name="remote_ip" signature="()" doc="Determine originating IP address. REMOTE_ADDR is the&#xA;standard but will fail if the user is behind a proxy.&#xA;HTTP_CLIENT_IP and/or HTTP_X_FORWARDED_FOR are set by&#xA;proxies so check for these before falling back to&#xA;REMOTE_ADDR. HTTP_X_FORWARDED_FOR may be a comma- delimited&#xA;list in the case of multiple chained proxies; the first is&#xA;the originating IP." ilk="function" />
          <scope name="request_parameters" ilk="function" />
          <scope name="request_uri" signature="()" doc="Return the request URI, accounting for server&#xA;idiosyncracies. WEBrick includes the full URL. IIS leaves&#xA;REQUEST_URI blank." ilk="function" />
          <scope name="reset_session" ilk="function" />
          <scope name="server_software" signature="()" doc="Returns the lowercase name of the HTTP server software." ilk="function" />
          <scope name="session" ilk="function" />
          <scope name="session=" ilk="function" />
          <scope name="ssl?" signature="()" doc="Is this an SSL request?" ilk="function" />
          <scope name="standard_port" signature="()" doc="Returns the standard port number for this request&apos;s protocol" ilk="function" />
          <scope name="subdomains" signature="(tld_length = 1)" doc="Returns all the subdomains as an&#xA;array, so [&quot;dev&quot;, &quot;www&quot;] would be&#xA;returned for &quot;dev.www.rubyonrails.org&quot;. You can&#xA;specify a different tld_length, such as 2 to&#xA;catch [&quot;www&quot;] instead&#xA;of [&quot;www&quot;, &quot;rubyonrails&quot;] in &quot;www.rubyonrails.co.uk&quot;.&#xA;" ilk="function" />
          <scope name="symbolized_path_parameters" signature="()" doc="The same as path_parameters with explicitly symbolized keys" ilk="function" />
          <scope name="xhr?" signature="()" doc="Alias for #xml_http_request?" ilk="function" />
          <scope name="xml_http_request?" signature="()" doc="Returns true if the&#xA;request&apos;s &quot;X-Requested-With&quot; header&#xA;contains &quot;XMLHttpRequest&quot;. (The Prototype&#xA;Javascript library sends this header with every Ajax&#xA;request.)" ilk="function" />
          <scope name="xml_post?" signature="()" doc="Is this a POST request formatted as XML?" ilk="function" />
          <scope name="yaml_post?" signature="()" doc="Is this a POST request formatted as YAML?" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="AbstractResponse" classrefs="Object" ilk="class">
          <scope name="assigns" ilk="function" />
          <scope name="assigns=" ilk="function" />
          <scope name="body" ilk="function" />
          <scope name="body=" ilk="function" />
          <scope name="cookies" ilk="function" />
          <scope name="cookies=" ilk="function" />
          <scope name="headers" ilk="function" />
          <scope name="headers=" ilk="function" />
          <scope name="redirect" ilk="function" />
          <scope name="redirected_to" ilk="function" />
          <scope name="redirected_to=" ilk="function" />
          <scope name="redirected_to_method_params" ilk="function" />
          <scope name="redirected_to_method_params=" ilk="function" />
          <scope name="session" ilk="function" />
          <scope name="session=" ilk="function" />
          <scope name="template" ilk="function" />
          <scope name="template=" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="DEFAULT_HEADERS" citdl="Hash" attributes="__const__" />
        </scope>
        <scope name="ActionControllerError" classrefs="StandardError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Base" classrefs="Object" ilk="class">
          <scope name="ActionController" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="inherited_with_action_controller" ilk="function" />
            </scope>
            <scope name="InstanceMethods" ilk="namespace">
            </scope>
            <scope name="WsdlAction" ilk="namespace">
              <scope name="wsdl" ilk="function" />
              <variable name="SoapEncodingNs" citdl="String" attributes="__const__" />
              <variable name="SoapHttpTransport" citdl="String" attributes="__const__" />
              <variable name="SoapNs" citdl="String" attributes="__const__" />
              <variable name="WsdlNs" citdl="String" attributes="__const__" />
              <variable name="XsdNs" citdl="String" attributes="__const__" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="Actions" ilk="namespace">
            <scope name="ActionCacheFilter" classrefs="Object" ilk="class">
              <scope name="after" ilk="function" />
              <scope name="before" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="ClassMethods" ilk="namespace">
              <scope name="caches_action" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
            <scope name="expire_action" ilk="function" />
          </scope>
          <scope name="ClassMethods" ilk="namespace">
            <scope name="web_service_scaffold" ilk="function" />
          </scope>
          <scope name="ContainerError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="DispatcherError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="Fragments" ilk="namespace">
            <scope name="DRbStore" classrefs="ActionController::Caching::Fragments::MemoryStore" ilk="class">
              <scope name="address" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="FileStore" classrefs="ActionController::Caching::Fragments::UnthreadedFileStore" ilk="class">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="MemCacheStore" classrefs="ActionController::Caching::Fragments::MemoryStore" ilk="class">
              <scope name="addresses" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="MemoryStore" classrefs="ActionController::Caching::Fragments::UnthreadedMemoryStore" ilk="class">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="ThreadSafety" ilk="namespace">
              <scope name="delete" ilk="function" />
              <scope name="delete_matched" ilk="function" />
              <scope name="read" ilk="function" />
              <scope name="write" ilk="function" />
            </scope>
            <scope name="UnthreadedFileStore" classrefs="Object" ilk="class">
              <scope name="cache_path" ilk="function" />
              <scope name="delete" ilk="function" />
              <scope name="delete_matched" ilk="function" />
              <scope name="read" ilk="function" />
              <scope name="write" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="UnthreadedMemoryStore" classrefs="Object" ilk="class">
              <scope name="delete" ilk="function" />
              <scope name="delete_matched" ilk="function" />
              <scope name="read" ilk="function" />
              <scope name="write" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
            <scope name="cache_erb_fragment" ilk="function" />
            <scope name="expire_fragment" ilk="function" />
            <scope name="expire_matched_fragments" ilk="function" />
            <scope name="fragment_cache_key" ilk="function" />
            <scope name="read_fragment" ilk="function" />
            <scope name="write_fragment" ilk="function" />
          </scope>
          <scope name="Helpers" ilk="namespace">
            <scope name="method_parameter_input_fields" ilk="function" />
            <scope name="method_parameter_label" ilk="function" />
            <scope name="service_method_list" ilk="function" />
          </scope>
          <scope name="Invocation" classrefs="Object" ilk="class">
            <scope name="api" ilk="function" />
            <scope name="api=" ilk="function" />
            <scope name="api_method" ilk="function" />
            <scope name="api_method=" ilk="function" />
            <scope name="method_named_params" ilk="function" />
            <scope name="method_named_params=" ilk="function" />
            <scope name="method_ordered_params" ilk="function" />
            <scope name="method_ordered_params=" ilk="function" />
            <scope name="protocol" ilk="function" />
            <scope name="protocol=" ilk="function" />
            <scope name="protocol_options" ilk="function" />
            <scope name="protocol_options=" ilk="function" />
            <scope name="service" ilk="function" />
            <scope name="service=" ilk="function" />
            <scope name="service_name" ilk="function" />
            <scope name="service_name=" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="InvocationError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="Pages" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="cache_page" ilk="function" />
              <scope name="caches_page" ilk="function" />
              <scope name="expire_page" ilk="function" />
            </scope>
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="cache_page" ilk="function" />
            <scope name="expire_page" ilk="function" />
            <scope name="included" ilk="function" />
          </scope>
          <scope name="Paginator" classrefs="Object" ilk="class">
            <scope name="Page" classrefs="Object" ilk="class">
              <scope name="first?" ilk="function" />
              <scope name="first_item" ilk="function" />
              <scope name="last?" ilk="function" />
              <scope name="last_item" ilk="function" />
              <scope name="next" ilk="function" />
              <scope name="number" ilk="function" />
              <scope name="offset" ilk="function" />
              <scope name="paginator" ilk="function" />
              <scope name="previous" ilk="function" />
              <scope name="to_i" ilk="function" />
              <scope name="to_param" ilk="function" />
              <scope name="to_sql" ilk="function" />
              <scope name="window" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Comparable" />
            </scope>
            <scope name="Window" classrefs="Object" ilk="class">
              <scope name="first" ilk="function" />
              <scope name="last" ilk="function" />
              <scope name="padding" ilk="function" />
              <scope name="padding=" ilk="function" />
              <scope name="page" ilk="function" />
              <scope name="pages" ilk="function" />
              <scope name="paginator" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="[]" ilk="function" />
            <scope name="controller" ilk="function" />
            <scope name="current" ilk="function" />
            <scope name="current_page" ilk="function" />
            <scope name="current_page=" ilk="function" />
            <scope name="each" ilk="function" />
            <scope name="first" ilk="function" />
            <scope name="first_page" ilk="function" />
            <scope name="has_page_number?" ilk="function" />
            <scope name="item_count" ilk="function" />
            <scope name="items_per_page" ilk="function" />
            <scope name="last" ilk="function" />
            <scope name="last_page" ilk="function" />
            <scope name="length" ilk="function" />
            <scope name="page_count" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope name="Registry" classrefs="SOAP::Mapping::Registry" ilk="class">
            <scope name="Map" classrefs="Object" ilk="class">
              <scope name="add" ilk="function" />
              <scope name="clear" ilk="function" />
              <scope name="find_mapped_obj_class" ilk="function" />
              <scope name="find_mapped_soap_class" ilk="function" />
              <scope name="init" ilk="function" />
              <scope name="obj2soap" ilk="function" />
              <scope name="soap2obj" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="ArrayFactory" citdl="SOAP::Mapping::ArrayFactory_" attributes="__const__" />
            <variable name="Base64Factory" citdl="SOAP::Mapping::Base64Factory_" attributes="__const__" />
            <variable name="BasetypeFactory" citdl="SOAP::Mapping::BasetypeFactory_" attributes="__const__" />
            <variable name="DateTimeFactory" citdl="SOAP::Mapping::DateTimeFactory_" attributes="__const__" />
            <variable name="HashFactory" citdl="SOAP::Mapping::HashFactory_" attributes="__const__" />
            <variable name="RubyOriginalMap" citdl="Array" attributes="__const__" />
            <variable name="SOAPBaseMap" citdl="Array" attributes="__const__" />
            <variable name="StringFactory" citdl="SOAP::Mapping::StringFactory_" attributes="__const__" />
            <variable name="TypedArrayFactory" citdl="SOAP::Mapping::TypedArrayFactory_" attributes="__const__" />
            <variable name="TypedStructFactory" citdl="SOAP::Mapping::TypedStructFactory_" attributes="__const__" />
            <variable name="URIFactory" citdl="SOAP::Mapping::URIFactory_" attributes="__const__" />
          </scope>
          <scope name="ScaffoldingError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="SoapActiveRecordStructFactory" classrefs="SOAP::Mapping::Factory" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="SOAP::Mapping::TraverseSupport" />
          </scope>
          <scope name="SoapBase64Factory" classrefs="SOAP::Mapping::Factory" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="SOAP::Mapping::TraverseSupport" />
          </scope>
          <scope name="SoapBinding" classrefs="Object" ilk="class">
            <scope name="element_binding" ilk="function" />
            <scope name="mapping" ilk="function" />
            <scope name="qname" ilk="function" />
            <scope name="qualified_type_name" ilk="function" />
            <scope name="type_name" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="SoapMarshaler" classrefs="Object" ilk="class">
            <scope name="annotate_arrays" ilk="function" />
            <scope name="lookup_type" ilk="function" />
            <scope name="namespace" ilk="function" />
            <scope name="register_type" ilk="function" />
            <scope name="registry" ilk="function" />
            <scope name="ruby_to_soap" ilk="function" />
            <scope name="soap_to_ruby" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="SoapProtocol" classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class">
            <scope name="create" attributes="__classmethod__" ilk="function" />
            <scope name="marshaler" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="AWSEncoding" citdl="String" attributes="__const__" />
            <variable name="XSDEncoding" citdl="String" attributes="__const__" />
          </scope>
          <scope name="SoapTypedArrayFactory" classrefs="SOAP::Mapping::Factory" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="SOAP::Mapping::TraverseSupport" />
          </scope>
          <scope name="Subclasses" ilk="namespace">
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="included" ilk="function" />
          </scope>
          <scope name="Sweeper" classrefs="ActiveRecord::Observer" ilk="class">
            <scope name="instance" attributes="__classmethod__" ilk="function" />
            <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
            <scope name="after" ilk="function" />
            <scope name="before" ilk="function" />
            <scope name="controller" ilk="function" />
            <scope name="controller=" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Reloadable" />
            <import symbol="Reloadable::Subclasses" />
            <import symbol="Singleton" />
          </scope>
          <scope name="Sweeping" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="cache_sweeper" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="WebServiceModel" ilk="namespace">
            <scope name="Container" classrefs="Object" ilk="class">
              <scope name="dispatching_mode" ilk="function" />
              <scope name="services" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="Service" classrefs="Object" ilk="class">
              <scope name="api" ilk="function" />
              <scope name="api_methods" ilk="function" />
              <scope name="api_methods_full" ilk="function" />
              <scope name="object" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
          </scope>
          <scope name="XmlRpcProtocol" classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class">
            <scope name="create" attributes="__classmethod__" ilk="function" />
            <scope name="value_to_xmlrpc_wire_format" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="action_methods" attributes="__classmethod__" ilk="function" />
          <scope name="add_template_helper" attributes="__classmethod__" ilk="function" />
          <scope name="after_filter" attributes="__classmethod__" ilk="function" />
          <scope name="after_filters" attributes="__classmethod__" ilk="function" />
          <scope name="allow_concurrency" attributes="__classmethod__" ilk="function" />
          <scope name="allow_concurrency=" attributes="__classmethod__" ilk="function" />
          <scope name="append_after_filter" attributes="__classmethod__" ilk="function" />
          <scope name="append_around_filter" attributes="__classmethod__" ilk="function" />
          <scope name="append_before_filter" attributes="__classmethod__" ilk="function" />
          <scope name="around_filter" attributes="__classmethod__" ilk="function" />
          <scope name="asset_host" attributes="__classmethod__" ilk="function" />
          <scope name="asset_host=" attributes="__classmethod__" ilk="function" />
          <scope name="auto_complete_for" attributes="__classmethod__" ilk="function" />
          <scope name="before_filter" attributes="__classmethod__" ilk="function" />
          <scope name="before_filters" attributes="__classmethod__" ilk="function" />
          <scope name="benchmark" attributes="__classmethod__" ilk="function" />
          <scope name="cache_page" attributes="__classmethod__" ilk="function" />
          <scope name="cache_sweeper" attributes="__classmethod__" ilk="function" />
          <scope name="cached_session_options" attributes="__classmethod__" ilk="function" />
          <scope name="caches_action" attributes="__classmethod__" ilk="function" />
          <scope name="caches_page" attributes="__classmethod__" ilk="function" />
          <scope name="consider_all_requests_local" attributes="__classmethod__" ilk="function" />
          <scope name="consider_all_requests_local=" attributes="__classmethod__" ilk="function" />
          <scope name="controller_class_name" signature="()" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;NeatController&quot;.&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="controller_name" signature="()" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;neat&quot;.&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="controller_path" signature="()" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;one_module/two_module/neat&quot;.&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="debug_routes" attributes="__classmethod__" ilk="function" />
          <scope name="debug_routes=" attributes="__classmethod__" ilk="function" />
          <scope name="default_layout" attributes="__classmethod__" ilk="function" />
          <scope name="depend_on" attributes="__classmethod__" ilk="function" />
          <scope name="dependencies_on" attributes="__classmethod__" ilk="function" />
          <scope name="excluded_actions" attributes="__classmethod__" ilk="function" />
          <scope name="expire_page" attributes="__classmethod__" ilk="function" />
          <scope name="filter_parameter_logging" signature="(*filter_words, &amp;block) {|key, value| ...}" doc="Replace sensitive paramater data from the request log.&#xA;Filters paramaters that have any of the arguments as a&#xA;substring. Looks in all subhashes of the param hash for keys&#xA;to filter. If a block is given, each key and value of the&#xA;paramater hash and all subhashes is passed to it, the value&#xA;or key can be replaced using String#replace or similar&#xA;method." attributes="__classmethod__" ilk="function" />
          <scope name="fragment_cache_store" attributes="__classmethod__" ilk="function" />
          <scope name="fragment_cache_store=" attributes="__classmethod__" ilk="function" />
          <scope name="helper" attributes="__classmethod__" ilk="function" />
          <scope name="helper_attr" attributes="__classmethod__" ilk="function" />
          <scope name="helper_method" attributes="__classmethod__" ilk="function" />
          <scope name="hidden_actions" signature="()" doc="Return an array containing the names of public methods that&#xA;have been marked hidden from the action processor. By&#xA;default, all methods defined in ActionController::Base and&#xA;included modules are hidden. More methods can be hidden&#xA;using hide_actions." attributes="__classmethod__" ilk="function" />
          <scope name="hide_action" signature="(*names)" doc="Hide each of the given methods from being callable as&#xA;actions." attributes="__classmethod__" ilk="function" />
          <scope name="ignore_missing_templates" attributes="__classmethod__" ilk="function" />
          <scope name="ignore_missing_templates=" attributes="__classmethod__" ilk="function" />
          <scope name="in_place_edit_for" attributes="__classmethod__" ilk="function" />
          <scope name="included_actions" attributes="__classmethod__" ilk="function" />
          <scope name="inherited" signature="(child)" attributes="__classmethod__" ilk="function" />
          <scope name="inherited_with_action_controller" attributes="__classmethod__" ilk="function" />
          <scope name="layout" attributes="__classmethod__" ilk="function" />
          <scope name="layout_conditions" attributes="__classmethod__" ilk="function" />
          <scope name="logger" attributes="__classmethod__" ilk="function" />
          <scope name="logger=" attributes="__classmethod__" ilk="function" />
          <scope name="master_helper_module" attributes="__classmethod__" ilk="function" />
          <scope name="master_helper_module=" attributes="__classmethod__" ilk="function" />
          <scope name="model" attributes="__classmethod__" ilk="function" />
          <scope name="observer" attributes="__classmethod__" ilk="function" />
          <scope name="page_cache_directory" attributes="__classmethod__" ilk="function" />
          <scope name="page_cache_directory=" attributes="__classmethod__" ilk="function" />
          <scope name="page_cache_extension" attributes="__classmethod__" ilk="function" />
          <scope name="page_cache_extension=" attributes="__classmethod__" ilk="function" />
          <scope name="paginate" attributes="__classmethod__" ilk="function" />
          <scope name="param_parsers" attributes="__classmethod__" ilk="function" />
          <scope name="param_parsers=" attributes="__classmethod__" ilk="function" />
          <scope name="perform_caching" attributes="__classmethod__" ilk="function" />
          <scope name="perform_caching=" attributes="__classmethod__" ilk="function" />
          <scope name="prepend_after_filter" attributes="__classmethod__" ilk="function" />
          <scope name="prepend_around_filter" attributes="__classmethod__" ilk="function" />
          <scope name="prepend_before_filter" attributes="__classmethod__" ilk="function" />
          <scope name="process" attributes="__classmethod__" ilk="function" />
          <scope name="process_cgi" signature="(cgi = CGI.new, session_options = {})" attributes="__classmethod__" ilk="function" />
          <scope name="process_with_components" attributes="__classmethod__" ilk="function" />
          <scope name="process_with_exception" attributes="__classmethod__" ilk="function" />
          <scope name="protected_variables_cache" attributes="__classmethod__" ilk="function" />
          <scope name="protected_variables_cache=" attributes="__classmethod__" ilk="function" />
          <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
          <scope name="scaffold" attributes="__classmethod__" ilk="function" />
          <scope name="service" attributes="__classmethod__" ilk="function" />
          <scope name="session" attributes="__classmethod__" ilk="function" />
          <scope name="session_options" attributes="__classmethod__" ilk="function" />
          <scope name="session_options_for" attributes="__classmethod__" ilk="function" />
          <scope name="session_store" attributes="__classmethod__" ilk="function" />
          <scope name="session_store=" attributes="__classmethod__" ilk="function" />
          <scope name="silence" attributes="__classmethod__" ilk="function" />
          <scope name="skip_after_filter" attributes="__classmethod__" ilk="function" />
          <scope name="skip_before_filter" attributes="__classmethod__" ilk="function" />
          <scope name="template_class" attributes="__classmethod__" ilk="function" />
          <scope name="template_class=" attributes="__classmethod__" ilk="function" />
          <scope name="template_root" attributes="__classmethod__" ilk="function" />
          <scope name="template_root=" attributes="__classmethod__" ilk="function" />
          <scope name="uses_component_template_root" attributes="__classmethod__" ilk="function" />
          <scope name="verify" attributes="__classmethod__" ilk="function" />
          <scope name="view_class" attributes="__classmethod__" ilk="function" />
          <scope name="view_controller_internals" attributes="__classmethod__" ilk="function" />
          <scope name="view_controller_internals=" attributes="__classmethod__" ilk="function" />
          <scope name="view_root" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_api" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_api_without_require" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_dispatching_mode" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_dispatching_mode=" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_exception_reporting" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_exception_reporting=" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_scaffold" attributes="__classmethod__" ilk="function" />
          <scope name="wsdl_namespace" attributes="__classmethod__" ilk="function" />
          <scope name="wsdl_namespace=" attributes="__classmethod__" ilk="function" />
          <scope name="wsdl_service_name" attributes="__classmethod__" ilk="function" />
          <scope name="wsdl_service_name=" attributes="__classmethod__" ilk="function" />
          <scope name="action_name" ilk="function" />
          <scope name="action_name=" ilk="function" />
          <scope name="after_action" ilk="function" />
          <scope name="allow_concurrency" ilk="function" />
          <scope name="allow_concurrency=" ilk="function" />
          <scope name="asset_host" ilk="function" />
          <scope name="asset_host=" ilk="function" />
          <scope name="assign_shortcuts" ilk="function" />
          <scope name="assign_shortcuts_with_flash" ilk="function" />
          <scope name="assigns" ilk="function" />
          <scope name="assigns=" ilk="function" />
          <scope name="before_action" ilk="function" />
          <scope name="component_request?" ilk="function" />
          <scope name="consider_all_requests_local" ilk="function" />
          <scope name="consider_all_requests_local=" ilk="function" />
          <scope name="controller_class_name" signature="()" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;NeatController&quot;.&#xA;" ilk="function" />
          <scope name="controller_name" signature="()" doc="Converts the class name from something&#xA;like &quot;OneModule::TwoModule::NeatController&quot; to &quot;neat&quot;.&#xA;" ilk="function" />
          <scope name="debug_routes" ilk="function" />
          <scope name="debug_routes=" ilk="function" />
          <scope name="default_url_options" signature="(options)" doc="Overwrite to implement a number of default options that all&#xA;url_for-based methods will use. The default options should&#xA;come in the form of a hash, just like the one you would use&#xA;for url_for directly. Example:  def&#xA;default_url_options(options)    { :project =&gt; @project.active? ? @project.url_name : &quot;unknown&quot; }&#xA;" ilk="function" />
          <scope name="erase_redirect_results" ilk="function" />
          <scope name="erase_render_results" ilk="function" />
          <scope name="erase_results" ilk="function" />
          <scope name="expires_in" signature="(seconds, options = {})" doc="Sets a HTTP 1.1 Cache-Control header. Defaults to issuing&#xA;a &quot;private&quot; instruction, so that intermediate&#xA;caches shouldn&apos;t cache the response.Examples:  expires_in&#xA;20.minutes  expires_in 3.hours, :private =&gt; false&#xA;  expires in&#xA;3.hours, &apos;max-stale&apos; =&gt; 5.hours, :private =&gt; nil, :public =&gt; true&#xA;" ilk="function" />
          <scope name="expires_now" signature="(" doc="Sets a HTTP 1.1 Cache-Control header&#xA;of &quot;no-cache&quot; so no caching should occur by the&#xA;browser or intermediate caches (like caching proxy servers)." ilk="function" />
          <scope name="flash" ilk="function" />
          <scope name="flash_with_components" ilk="function" />
          <scope name="flash_without_components" ilk="function" />
          <scope name="fragment_cache_store" ilk="function" />
          <scope name="headers" ilk="function" />
          <scope name="headers=" ilk="function" />
          <scope name="ignore_missing_templates" ilk="function" />
          <scope name="ignore_missing_templates=" ilk="function" />
          <scope name="included" ilk="function" />
          <scope name="keep_flash" ilk="function" />
          <scope name="logger" ilk="function" />
          <scope name="logger=" ilk="function" />
          <scope name="master_helper_module" ilk="function" />
          <scope name="master_helper_module=" ilk="function" />
          <scope name="page_cache_directory" ilk="function" />
          <scope name="page_cache_directory=" ilk="function" />
          <scope name="page_cache_extension" ilk="function" />
          <scope name="page_cache_extension=" ilk="function" />
          <scope name="param_parsers" ilk="function" />
          <scope name="param_parsers=" ilk="function" />
          <scope name="params" ilk="function" />
          <scope name="params=" ilk="function" />
          <scope name="parent_controller" ilk="function" />
          <scope name="parent_controller=" ilk="function" />
          <scope name="perform_action_with_filters" ilk="function" />
          <scope name="perform_action_without_benchmark" ilk="function" />
          <scope name="perform_action_without_rescue" ilk="function" />
          <scope name="perform_caching" ilk="function" />
          <scope name="perform_caching=" ilk="function" />
          <scope name="perform_invocation" ilk="function" />
          <scope name="perform_invocation_without_interception" ilk="function" />
          <scope name="process" ilk="function" />
          <scope name="process_cgi" signature="(cgi = CGI.new, session_options = {})" ilk="function" />
          <scope name="process_cleanup_with_flash" ilk="function" />
          <scope name="process_cleanup_without_filters" ilk="function" />
          <scope name="process_with_components" ilk="function" />
          <scope name="process_with_filters" ilk="function" />
          <scope name="process_without_filters" ilk="function" />
          <scope name="process_without_session_management_support" ilk="function" />
          <scope name="protected_variables_cache" ilk="function" />
          <scope name="protected_variables_cache=" ilk="function" />
          <scope name="redirect_to" signature="(options = {}, *parameters_for_method_reference)" ilk="function" />
          <scope name="redirect_to_path" ilk="function" />
          <scope name="redirect_to_url" ilk="function" />
          <scope name="render" signature="(options = nil, deprecated_status = nil, &amp;block)" ilk="function" />
          <scope name="render_action" ilk="function" />
          <scope name="render_component" ilk="function" />
          <scope name="render_component_as_string" ilk="function" />
          <scope name="render_file" ilk="function" />
          <scope name="render_javascript" ilk="function" />
          <scope name="render_nothing" ilk="function" />
          <scope name="render_partial" ilk="function" />
          <scope name="render_partial_collection" ilk="function" />
          <scope name="render_template" ilk="function" />
          <scope name="render_text" ilk="function" />
          <scope name="render_to_string" signature="(options = nil, &amp;block)" doc="Renders according to the same rules as render, but returns&#xA;the result in a string instead of sending it as the response&#xA;body to the browser." ilk="function" />
          <scope name="render_with_layout" ilk="function" />
          <scope name="render_with_no_layout" ilk="function" />
          <scope name="render_without_benchmark" ilk="function" />
          <scope name="render_without_layout" ilk="function" />
          <scope name="render_xml" ilk="function" />
          <scope name="rendered_action_cache" ilk="function" />
          <scope name="rendered_action_cache=" ilk="function" />
          <scope name="request" ilk="function" />
          <scope name="request=" ilk="function" />
          <scope name="reset_session" signature="(" doc="Resets the session by clearing out all the objects stored&#xA;within and initializing a new session object." ilk="function" />
          <scope name="respond_to" ilk="function" />
          <scope name="response" ilk="function" />
          <scope name="response=" ilk="function" />
          <scope name="rewrite_options" ilk="function" />
          <scope name="session" ilk="function" />
          <scope name="session=" ilk="function" />
          <scope name="session_enabled?" ilk="function" />
          <scope name="template_class" ilk="function" />
          <scope name="template_class=" ilk="function" />
          <scope name="template_root" ilk="function" />
          <scope name="template_root=" ilk="function" />
          <scope name="url_for" signature="(options = {}, *parameters_for_method_reference)" ilk="function" />
          <scope name="view_controller_internals" ilk="function" />
          <scope name="view_controller_internals=" ilk="function" />
          <scope name="web_service_dispatching_mode" ilk="function" />
          <scope name="web_service_dispatching_mode=" ilk="function" />
          <scope name="web_service_exception_reporting" ilk="function" />
          <scope name="web_service_exception_reporting=" ilk="function" />
          <scope name="wsdl_namespace" ilk="function" />
          <scope name="wsdl_namespace=" ilk="function" />
          <scope name="wsdl_service_name" ilk="function" />
          <scope name="wsdl_service_name=" ilk="function" />
          <import symbol="ActionController::Benchmarking" />
          <import symbol="ActionController::Caching" />
          <import symbol="ActionController::Caching::Actions" />
          <import symbol="ActionController::Caching::Fragments" />
          <import symbol="ActionController::Caching::Pages" />
          <import symbol="ActionController::Caching::Sweeping" />
          <import symbol="ActionController::Components" />
          <import symbol="ActionController::Components::InstanceMethods" />
          <import symbol="ActionController::Cookies" />
          <import symbol="ActionController::Dependencies" />
          <import symbol="ActionController::Filters" />
          <import symbol="ActionController::Filters::InstanceMethods" />
          <import symbol="ActionController::Flash" />
          <import symbol="ActionController::Flash::InstanceMethods" />
          <import symbol="ActionController::Helpers" />
          <import symbol="ActionController::Layout" />
          <import symbol="ActionController::Macros::AutoComplete" />
          <import symbol="ActionController::Macros::InPlaceEditing" />
          <import symbol="ActionController::MimeResponds" />
          <import symbol="ActionController::MimeResponds::InstanceMethods" />
          <import symbol="ActionController::Pagination" />
          <import symbol="ActionController::Rescue" />
          <import symbol="ActionController::Scaffolding" />
          <import symbol="ActionController::SessionManagement" />
          <import symbol="ActionController::Streaming" />
          <import symbol="ActionController::Verification" />
          <import symbol="ActionWebService::Container::Delegated" />
          <import symbol="ActionWebService::Container::Delegated::InstanceMethods" />
          <import symbol="ActionWebService::Container::Direct" />
          <import symbol="ActionWebService::Dispatcher" />
          <import symbol="ActionWebService::Dispatcher::ActionController" />
          <import symbol="ActionWebService::Dispatcher::ActionController::InstanceMethods" />
          <import symbol="ActionWebService::Dispatcher::InstanceMethods" />
          <import symbol="ActionWebService::Invocation" />
          <import symbol="ActionWebService::Invocation::InstanceMethods" />
          <import symbol="ActionWebService::Protocol::Discovery" />
          <import symbol="ActionWebService::Protocol::Discovery::InstanceMethods" />
          <import symbol="ActionWebService::Protocol::Soap" />
          <import symbol="ActionWebService::Protocol::XmlRpc" />
          <import symbol="ActionWebService::Scaffolding" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <variable name="DEFAULT_OPTIONS" citdl="Hash" attributes="__const__" />
          <variable name="DEFAULT_RENDER_STATUS_CODE" citdl="String" attributes="__const__" />
          <variable name="DEFAULT_SEND_FILE_OPTIONS" citdl="Hash" attributes="__const__" />
          <variable name="OPTIONS" citdl="Hash" attributes="__const__" />
        </scope>
        <scope name="Benchmarking" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="benchmark" signature="(title, log_level = Logger::DEBUG, use_silence = true) {|| ...}" doc="Log and benchmark the workings of a single block and silence&#xA;whatever logging that may have happened inside it (unless&#xA;use_silence is set to false).The benchmark is only recorded&#xA;if the current level of the logger matches the&#xA;log_level, which makes it easy to include benchmarking&#xA;statements in production software that will remain&#xA;inexpensive because the benchmark will only be conducted if&#xA;the log level is low enough." ilk="function" />
            <scope name="silence" signature="() {|| ...}" doc="Silences the logger for the duration of the block." ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
          <scope name="perform_action_with_benchmark" ilk="function" />
          <scope name="render_with_benchmark" ilk="function" />
        </scope>
        <scope name="Caching" ilk="namespace">
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
        </scope>
        <scope name="CgiRequest" classrefs="ActionController::AbstractRequest" ilk="class">
          <scope name="cgi" ilk="function" />
          <scope name="cgi=" ilk="function" />
          <scope name="method_missing" ilk="function" />
          <scope name="query_string" ilk="function" />
          <scope name="session_options" ilk="function" />
          <scope name="session_options=" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="DEFAULT_SESSION_OPTIONS" citdl="Hash" attributes="__const__" />
        </scope>
        <scope name="CgiResponse" classrefs="ActionController::AbstractResponse" ilk="class">
          <scope name="out" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="DEFAULT_HEADERS" citdl="Hash" attributes="__const__" />
        </scope>
        <scope name="CodeGeneration" ilk="namespace">
          <scope name="CodeGenerator" classrefs="Object" ilk="class">
            <scope name="&lt;&lt;" ilk="function" />
            <scope name="indent" ilk="function" />
            <scope name="line" ilk="function" />
            <scope name="locals" ilk="function" />
            <scope name="locals=" ilk="function" />
            <scope name="method_missing" ilk="function" />
            <scope name="share_locals_with" ilk="function" />
            <scope name="source" ilk="function" />
            <scope name="source=" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="BeginKeywords" citdl="Array" attributes="__const__" />
            <variable name="FieldsToDuplicate" citdl="Array" attributes="__const__" />
            <variable name="Keywords" citdl="Array" attributes="__const__" />
            <variable name="ResumeKeywords" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="GenerationError" classrefs="StandardError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="GenerationGenerator" classrefs="ActionController::CodeGeneration::CodeGenerator" ilk="class">
            <scope name="add_segment" ilk="function" />
            <scope name="after" ilk="function" />
            <scope name="after=" ilk="function" />
            <scope name="before" ilk="function" />
            <scope name="before=" ilk="function" />
            <scope name="check_conditions" ilk="function" />
            <scope name="continue" ilk="function" />
            <scope name="current" ilk="function" />
            <scope name="current=" ilk="function" />
            <scope name="expire_for_keys" ilk="function" />
            <scope name="finish" ilk="function" />
            <scope name="go" ilk="function" />
            <scope name="hash_name" ilk="function" />
            <scope name="hash_value" ilk="function" />
            <scope name="local_name" ilk="function" />
            <scope name="segments" ilk="function" />
            <scope name="segments=" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="Attributes" citdl="Array" attributes="__const__" />
            <variable name="BeginKeywords" citdl="Array" attributes="__const__" />
            <variable name="FieldsToDuplicate" citdl="Array" attributes="__const__" />
            <variable name="Keywords" citdl="Array" attributes="__const__" />
            <variable name="ResumeKeywords" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="RecognitionGenerator" classrefs="ActionController::CodeGeneration::CodeGenerator" ilk="class">
            <scope name="after" ilk="function" />
            <scope name="after=" ilk="function" />
            <scope name="before" ilk="function" />
            <scope name="before=" ilk="function" />
            <scope name="constant_result" ilk="function" />
            <scope name="constants=" ilk="function" />
            <scope name="continue" ilk="function" />
            <scope name="current" ilk="function" />
            <scope name="current=" ilk="function" />
            <scope name="depth" ilk="function" />
            <scope name="depth=" ilk="function" />
            <scope name="finish" ilk="function" />
            <scope name="finish_statement" ilk="function" />
            <scope name="finish_statement=" ilk="function" />
            <scope name="go" ilk="function" />
            <scope name="if_next_matches" ilk="function" />
            <scope name="index_name" ilk="function" />
            <scope name="move_ahead" ilk="function" />
            <scope name="move_ahead=" ilk="function" />
            <scope name="move_forward" ilk="function" />
            <scope name="next_segment" ilk="function" />
            <scope name="path_name" ilk="function" />
            <scope name="result" ilk="function" />
            <scope name="results" ilk="function" />
            <scope name="results=" ilk="function" />
            <scope name="segment_name" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="Attributes" citdl="Array" attributes="__const__" />
            <variable name="BeginKeywords" citdl="Array" attributes="__const__" />
            <variable name="FieldsToDuplicate" citdl="Array" attributes="__const__" />
            <variable name="Keywords" citdl="Array" attributes="__const__" />
            <variable name="ResumeKeywords" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="Source" classrefs="Object" ilk="class">
            <scope name="&lt;&lt;" ilk="function" />
            <scope name="indent" ilk="function" />
            <scope name="indentation_level" ilk="function" />
            <scope name="line" ilk="function" />
            <scope name="lines" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="IndentationString" citdl="String" attributes="__const__" />
          </scope>
        </scope>
        <scope name="Components" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="process_with_components" ilk="function" />
            <scope name="uses_component_template_root" signature="()" doc="Set the template root to be one directory behind the root&#xA;dir of the controller. Examples:  /code/weblog/components/admin/users_controller.rb with Admin::UsersController&#xA;    will use /code/weblog/components as template root&#xA;    and find templates&#xA;in /code/weblog/components/admin/users/  /code/weblog/components/admin/parties/users_controller.rb with Admin::Parties::UsersController&#xA;" ilk="function" />
          </scope>
          <scope name="InstanceMethods" ilk="namespace">
            <scope name="flash_with_components" ilk="function" />
            <scope name="process_with_components" ilk="function" />
            <scope name="render_component" signature="(options)" doc="Renders the component specified as the response for the&#xA;current method" ilk="function" />
            <scope name="render_component_as_string" signature="(options)" doc="Returns the component response as a string" ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
        </scope>
        <scope name="CookieJar" classrefs="Hash" ilk="class">
          <import symbol="ActiveSupport::CoreExtensions::Hash::Conversions" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::Diff" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::IndifferentAccess" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::Keys" />
          <import symbol="ActiveSupport::CoreExtensions::Hash::ReverseMerge" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Enumerable" />
          <variable name="XML_FORMATTING" citdl="Hash" attributes="__const__" />
          <variable name="XML_TYPE_NAMES" citdl="Hash" attributes="__const__" />
        </scope>
        <scope name="Cookies" ilk="namespace">
          <scope name="cookie" signature="(*options)" doc="Deprecated cookie writer method" ilk="function" />
          <scope name="cookies" signature="()" doc="Returns the cookie container, which operates as described&#xA;above." ilk="function" />
        </scope>
        <scope name="Dependencies" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="depend_on" ilk="function" />
            <scope name="dependencies_on" ilk="function" />
            <scope name="model" ilk="function" />
            <scope name="observer" ilk="function" />
            <scope name="service" ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="DoubleRenderError" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="DEFAULT_MESSAGE" citdl="String" attributes="__const__" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Filters" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="after_filter" signature="(*filters, &amp;block)" doc="Alias for #append_after_filter" ilk="function" />
            <scope name="after_filters" ilk="function" />
            <scope name="append_after_filter" signature="(*filters, &amp;block)" doc="The passed filters will be appended to the array of filters&#xA;that run &lt;em&gt;after&lt;/em&gt; actions on this controller are&#xA;performed." ilk="function" />
            <scope name="append_around_filter" signature="(*filters, &amp;block)" doc="If you append_around_filter A.new, B.new, the filter chain&#xA;looks like  B#before    A#before      # run the action&#xA;    A#after  B#afterWith around filters which yield to the&#xA;action block, #before and #after are the code before and&#xA;after the yield." ilk="function" />
            <scope name="append_before_filter" signature="(*filters, &amp;block)" doc="The passed filters will be appended to the filter_chain and&#xA;will execute before the action on this controller is&#xA;performed." ilk="function" />
            <scope name="around_filter" signature="(*filters, &amp;block)" doc="Alias for #append_around_filter" ilk="function" />
            <scope name="before_filter" signature="(*filters, &amp;block)" doc="Alias for #append_before_filter" ilk="function" />
            <scope name="before_filters" ilk="function" />
            <scope name="excluded_actions" ilk="function" />
            <scope name="included_actions" ilk="function" />
            <scope name="prepend_after_filter" signature="(*filters, &amp;block)" doc="The passed filters will be prepended to the array of filters&#xA;that run &lt;em&gt;after&lt;/em&gt; actions on this controller are&#xA;performed." ilk="function" />
            <scope name="prepend_around_filter" signature="(*filters, &amp;block)" doc="If you prepend_around_filter A.new, B.new, the filter chain&#xA;looks like:  A#before    B#before      # run the action&#xA;    B#after  A#afterWith around filters which yield to the&#xA;action block, #before and #after are the code before and&#xA;after the yield." ilk="function" />
            <scope name="prepend_before_filter" signature="(*filters, &amp;block)" doc="The passed filters will be prepended to the filter_chain and&#xA;will execute before the action on this controller is&#xA;performed." ilk="function" />
            <scope name="skip_after_filter" signature="(*filters)" doc="Removes the specified filters from the after filter chain.&#xA;Note that this only works for skipping method-reference&#xA;filters, not procs. This is especially useful for managing&#xA;the chain in inheritance hierarchies where only one out of&#xA;many sub-controllers need a different hierarchy.You can&#xA;control the actions to skip the filter for with&#xA;the :only&lt;/tt&gt; and &lt;tt&gt;:except options, just like when you&#xA;apply the filters." ilk="function" />
            <scope name="skip_before_filter" signature="(*filters)" doc="Removes the specified filters from the before filter chain.&#xA;Note that this only works for skipping method-reference&#xA;filters, not procs. This is especially useful for managing&#xA;the chain in inheritance hierarchies where only one out of&#xA;many sub-controllers need a different hierarchy.You can&#xA;control the actions to skip the filter for with&#xA;the :only&lt;/tt&gt; and &lt;tt&gt;:except options, just like when you&#xA;apply the filters." ilk="function" />
          </scope>
          <scope name="InstanceMethods" ilk="namespace">
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="after_action" ilk="function" />
            <scope name="before_action" ilk="function" />
            <scope name="included" ilk="function" />
            <scope name="perform_action_with_filters" ilk="function" />
            <scope name="process_with_filters" ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
        </scope>
        <scope name="Flash" ilk="namespace">
          <scope name="FlashHash" classrefs="Hash" ilk="class">
            <scope name="discard" signature="(k = nil)" doc="Marks the entire flash or a single flash entry to be&#xA;discarded by the end of the current action    flash.keep                 # keep entire flash available for the next action&#xA;    flash.discard(:warning)    # discard&#xA;the &quot;warning&quot; entry (it&apos;ll still be available for&#xA;the current action)" ilk="function" />
            <scope name="keep" signature="(k = nil)" doc="Keeps either the entire current flash or a specific flash&#xA;entry available for the next action:   flash.keep            # keeps the entire flash&#xA;   flash.keep(:notice)   # keeps only&#xA;the &quot;notice&quot; entry, the rest of the flash is&#xA;discarded" ilk="function" />
            <scope name="now" signature="()" doc="Sets a flash that will not be available to the next&#xA;action, only to the current.    flash.now[:message] = &quot;Hello current action&quot;&#xA;This method enables you to use the flash as a central&#xA;messaging system in your app. When you need to pass an&#xA;object to the next action, you use the standard flash&#xA;assign ([]=&lt;/tt&gt;). When you need to pass an object to the&#xA;current action, you use &lt;tt&gt;now, and your object will vanish&#xA;when the current action is done." ilk="function" />
            <scope name="sweep" ilk="function" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::Conversions" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::Diff" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::IndifferentAccess" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::Keys" />
            <import symbol="ActiveSupport::CoreExtensions::Hash::ReverseMerge" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
            <variable name="XML_FORMATTING" citdl="Hash" attributes="__const__" />
            <variable name="XML_TYPE_NAMES" citdl="Hash" attributes="__const__" />
          </scope>
          <scope name="FlashNow" classrefs="Object" ilk="class">
            <scope name="[]" ilk="function" />
            <scope name="[]=" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="InstanceMethods" ilk="namespace">
            <scope name="assign_shortcuts_with_flash" ilk="function" />
            <scope name="flash" ilk="function" />
            <scope name="keep_flash" ilk="function" />
            <scope name="process_cleanup_with_flash" ilk="function" />
          </scope>
          <scope name="included" signature="(base)" attributes="__classmethod__" ilk="function" />
          <scope name="included" signature="(base)" ilk="function" />
        </scope>
        <scope name="Helpers" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="add_template_helper" ilk="function" />
            <scope name="helper" signature="(*args, &amp;block)" doc="Declare a helper:  helper :foorequires &apos;foo_helper&apos; and&#xA;includes FooHelper in the template class.  helper FooHelper&#xA;includes FooHelper in the template class.  helper { def&#xA;foo() &quot;#{bar} is the very best&quot; end }evaluates the&#xA;block in the template class, adding method #foo.  helper(:three, BlindHelper) { def mice() &apos;mice&apos; end }&#xA;" ilk="function" />
            <scope name="helper_attr" signature="(*attrs)" doc="Declare a controller attribute as a helper. For example,&#xA;  helper_attr :name  attr_accessor :namemakes the name and&#xA;name= controller methods available in the view. The is a&#xA;convenience wrapper for helper_method." ilk="function" />
            <scope name="helper_method" signature="(*methods)" doc="Declare a controller method as a helper. For example,&#xA;  helper_method :link_to  def link_to(name, options) ... end&#xA;makes the link_to controller method available in the view." ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="Layout" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="default_layout" ilk="function" />
            <scope name="layout" signature="(template_name, conditions = {})" doc="If a layout is specified, all rendered actions will have&#xA;their result rendered when the layoutyield&apos;s. This layout&#xA;can itself depend on instance variables assigned during&#xA;action performance and have access to them as any normal&#xA;template would." ilk="function" />
            <scope name="layout_conditions" ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="active_layout" ilk="function" />
          <scope name="included" ilk="function" />
          <scope name="render_with_a_layout" ilk="function" />
        </scope>
        <scope name="Macros" ilk="namespace">
          <scope name="AutoComplete" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="auto_complete_for" signature="(object, method, options = {})" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="InPlaceEditing" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="in_place_edit_for" signature="(object, attribute, options = {})" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
        </scope>
        <scope name="MimeResponds" ilk="namespace">
          <scope name="InstanceMethods" ilk="namespace">
            <scope name="respond_to" signature="(*types, &amp;block)" doc="Without web-service support, an action which collects the&#xA;data for displaying a list of people might look something&#xA;like this:  def index    @people = Person.find(:all)&#xA;  endHere&apos;s the same action, with web-service support baked&#xA;in:  def index    @people = Person.find(:all)    respond_to&#xA;do |format|" ilk="function" />
          </scope>
          <scope name="Responder" classrefs="Object" ilk="class">
            <scope name="all" ilk="function" />
            <scope name="any" ilk="function" />
            <scope name="atom" ilk="function" />
            <scope name="custom" ilk="function" />
            <scope name="html" ilk="function" />
            <scope name="js" ilk="function" />
            <scope name="respond" ilk="function" />
            <scope name="rss" ilk="function" />
            <scope name="xml" ilk="function" />
            <scope name="yaml" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="DEFAULT_BLOCKS" citdl="Hash" attributes="__const__" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
        </scope>
        <scope name="MissingFile" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="MissingTemplate" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Pagination" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="paginate" signature="(collection_id, options={})" ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="validate_options!" attributes="__classmethod__" ilk="function" />
          <scope name="count_collection_for_pagination" signature="(model, options)" doc="Returns the total number of items in the collection to be&#xA;paginated for the model&lt;/tt&gt; and given &lt;tt&gt;conditions.&#xA;Override this method to implement a custom counter." ilk="function" />
          <scope name="create_paginators_and_retrieve_collections" ilk="function" />
          <scope name="find_collection_for_pagination" signature="(model, options, paginator)" doc="Returns a collection of items for the given&#xA;model&lt;/tt&gt; and +options[conditions]+, ordered&#xA;by +options[order]+, for the current page in the&#xA;given &lt;tt&gt;paginator. Override this method to implement a&#xA;custom finder." ilk="function" />
          <scope name="included" ilk="function" />
          <scope name="paginate" signature="(collection_id, options={})" ilk="function" />
          <scope name="validate_options!" ilk="function" />
          <variable name="DEFAULT_OPTIONS" citdl="Hash" attributes="__const__" />
          <variable name="OPTIONS" citdl="Hash" attributes="__const__" />
        </scope>
        <scope name="RedirectBackError" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="DEFAULT_MESSAGE" citdl="String" attributes="__const__" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Rescue" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="process_with_exception" ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="local_request?" signature="(" doc="Overwrite to expand the meaning of a local request in order&#xA;to show local rescues on other occurrences than the remote&#xA;IP being 127.0.0.1. For example, this could include the IP&#xA;of the developer machine when debugging remotely." ilk="function" />
          <scope name="log_error" signature="(exception)" doc="Overwrite to implement custom logging of errors. By default&#xA;logs as fatal." ilk="function" />
          <scope name="rescue_action" signature="(exception)" doc="Exception handler called when the performance of an action&#xA;raises an exception." ilk="function" />
          <scope name="rescue_action_in_public" signature="(exception)" doc="Overwrite to implement public exception handling (for&#xA;requests answering false to local_request?)." ilk="function" />
          <scope name="rescue_action_locally" signature="(exception)" doc="Renders a detailed diagnostics screen on action exceptions." ilk="function" />
        </scope>
        <scope name="Routing" ilk="namespace">
          <scope name="Component" classrefs="Object" ilk="class">
            <scope name="new" attributes="__classmethod__ __ctor__" ilk="function" />
            <scope name="dynamic?" ilk="function" />
            <scope name="key" ilk="function" />
            <scope name="optional?" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="ControllerComponent" classrefs="ActionController::Routing::DynamicComponent" ilk="class">
            <scope name="assign_controller" attributes="__classmethod__" ilk="function" />
            <scope name="attempt_load" attributes="__classmethod__" ilk="function" />
            <scope name="safe_load_paths" attributes="__classmethod__" ilk="function" />
            <scope name="traverse_to_controller" attributes="__classmethod__" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="DynamicComponent" classrefs="ActionController::Routing::Component" ilk="class">
            <scope name="add_segments_to" ilk="function" />
            <scope name="assign_default" ilk="function" />
            <scope name="assign_result" ilk="function" />
            <scope name="condition" ilk="function" />
            <scope name="condition=" ilk="function" />
            <scope name="default" ilk="function" />
            <scope name="default=" ilk="function" />
            <scope name="default_check" ilk="function" />
            <scope name="recognition_check" ilk="function" />
            <scope name="write_continue_generation" ilk="function" />
            <scope name="write_dropout_generation" ilk="function" />
            <scope name="write_generation" ilk="function" />
            <scope name="write_recognition" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="NamedRoutes" ilk="namespace">
            <scope name="clear" attributes="__classmethod__" ilk="function" />
            <scope name="define_hash_access_method" attributes="__classmethod__" ilk="function" />
            <scope name="hash_access_name" attributes="__classmethod__" ilk="function" />
            <scope name="install" attributes="__classmethod__" ilk="function" />
            <scope name="known_hash_for_route" attributes="__classmethod__" ilk="function" />
            <scope name="name_route" attributes="__classmethod__" ilk="function" />
            <scope name="url_helper_name" attributes="__classmethod__" ilk="function" />
            <scope name="clear" ilk="function" />
            <scope name="define_hash_access_method" ilk="function" />
            <scope name="hash_access_name" ilk="function" />
            <scope name="install" ilk="function" />
            <scope name="known_hash_for_route" ilk="function" />
            <scope name="name_route" ilk="function" />
            <scope name="url_helper_name" ilk="function" />
            <variable name="Helpers" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="PathComponent" classrefs="ActionController::Routing::DynamicComponent" ilk="class">
            <scope name="Result" classrefs="Array" ilk="class">
              <scope name="new_escaped" attributes="__classmethod__" ilk="function" />
              <import symbol="ActiveSupport::CoreExtensions::Array::Conversions" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Enumerable" />
            </scope>
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="Route" classrefs="Object" ilk="class">
            <scope name="add_default_requirements" ilk="function" />
            <scope name="components" ilk="function" />
            <scope name="components=" ilk="function" />
            <scope name="configure_components" ilk="function" />
            <scope name="defaults" ilk="function" />
            <scope name="extra_keys" ilk="function" />
            <scope name="initialize_components" ilk="function" />
            <scope name="initialize_hashes" ilk="function" />
            <scope name="initialize_keys" ilk="function" />
            <scope name="keys" ilk="function" />
            <scope name="known" ilk="function" />
            <scope name="known=" ilk="function" />
            <scope name="matches_controller?" ilk="function" />
            <scope name="options" ilk="function" />
            <scope name="path" ilk="function" />
            <scope name="write_generation" ilk="function" />
            <scope name="write_recognition" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="RouteSet" classrefs="Object" ilk="class">
            <scope name="categories" ilk="function" />
            <scope name="categorize_routes" ilk="function" />
            <scope name="connect" ilk="function" />
            <scope name="controller_to_selector" ilk="function" />
            <scope name="draw" ilk="function" />
            <scope name="each" ilk="function" />
            <scope name="empty?" ilk="function" />
            <scope name="extra_keys" ilk="function" />
            <scope name="generate" ilk="function" />
            <scope name="generate_default_path" ilk="function" />
            <scope name="generate_path" ilk="function" />
            <scope name="generation_code_for" ilk="function" />
            <scope name="known_controllers" ilk="function" />
            <scope name="method_missing" ilk="function" />
            <scope name="named_route" ilk="function" />
            <scope name="recognition_failed" ilk="function" />
            <scope name="recognize" ilk="function" />
            <scope name="recognize!" ilk="function" />
            <scope name="reload" ilk="function" />
            <scope name="routes" ilk="function" />
            <scope name="write_generation" ilk="function" />
            <scope name="write_recognition" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="StaticComponent" classrefs="ActionController::Routing::Component" ilk="class">
            <scope name="value" ilk="function" />
            <scope name="write_generation" ilk="function" />
            <scope name="write_recognition" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="controller_relative_to" signature="(controller, previous)" attributes="__classmethod__" ilk="function" />
          <scope name="expiry_hash" attributes="__classmethod__" ilk="function" />
          <scope name="extract_parameter_value" attributes="__classmethod__" ilk="function" />
          <scope name="test_condition" attributes="__classmethod__" ilk="function" />
          <scope name="treat_hash" attributes="__classmethod__" ilk="function" />
          <scope name="controller_relative_to" signature="(controller, previous)" ilk="function" />
          <scope name="expiry_hash" ilk="function" />
          <scope name="extract_parameter_value" ilk="function" />
          <scope name="test_condition" ilk="function" />
          <scope name="treat_hash" ilk="function" />
          <variable name="Routes" citdl="ActionController::Routing::RouteSet" attributes="__const__" />
        </scope>
        <scope name="RoutingError" classrefs="ActionController::ActionControllerError" ilk="class">
          <scope name="failures" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Scaffolding" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="scaffold" signature="(model_id, options = {})" doc="Adds a swath of generic CRUD actions to the controller. The&#xA;model_id&lt;/tt&gt; is automatically converted into a class name&#xA;unless one is specifically provide&#xA;through &lt;tt&gt;options[:class_name]&lt;/tt&gt;. So &lt;tt&gt;scaffold :post&#xA;would use Post as the class and @post/@posts for the&#xA;instance variables." ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="SessionManagement" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="cached_session_options" ilk="function" />
            <scope name="session" signature="(*args)" doc="Specify how sessions ought to be managed for a subset of the&#xA;actions on the controller. Like filters, you can&#xA;specify :only&lt;/tt&gt; and &lt;tt&gt;:except clauses to restrict the&#xA;subset, otherwise options apply to all actions on this&#xA;controller.The session options are inheritable, as well, so&#xA;if you specify them in a parent controller, they apply to&#xA;controllers that extend the parent." ilk="function" />
            <scope name="session_options" signature="()" doc="Returns the hash used to configure the session. Example use:&#xA;  ActionController::Base.session_options[:session_secure] = true # session only available over HTTPS&#xA;" ilk="function" />
            <scope name="session_options_for" ilk="function" />
            <scope name="session_store" signature="()" doc="Returns the session store class currently used." ilk="function" />
            <scope name="session_store=" signature="(store)" doc="Set the session store to be used for keeping the session&#xA;data between requests. The default is using the file&#xA;system, but you can also specify one of the other included&#xA;stores (:active_record_store, :drb_store, :mem_cache_store, or :memory_store) or use your own class.&#xA;" ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
          <scope name="process_with_session_management_support" ilk="function" />
        </scope>
        <scope name="SessionOverflowError" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="DEFAULT_MESSAGE" citdl="String" attributes="__const__" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="SessionRestoreError" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Streaming" ilk="namespace">
          <scope name="send_data" signature="(data, options = {})" ilk="function" />
          <scope name="send_file" signature="(path, options = {})" ilk="function" />
          <variable name="DEFAULT_SEND_FILE_OPTIONS" citdl="Hash" attributes="__const__" />
        </scope>
        <scope name="UnknownAction" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="UnknownController" classrefs="ActionController::ActionControllerError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="UrlRewriter" classrefs="Object" ilk="class">
          <scope name="rewrite" ilk="function" />
          <scope name="to_str" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="RESERVED_OPTIONS" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Verification" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="verify" signature="(options={})" ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
      </scope>
      <scope name="ActionMailer" ilk="namespace">
        <scope name="AdvAttrAccessor" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="adv_attr_accessor" ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="Base" classrefs="Object" ilk="class">
          <scope name="Subclasses" ilk="namespace">
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="included" ilk="function" />
          </scope>
          <scope name="add_template_helper" attributes="__classmethod__" ilk="function" />
          <scope name="adv_attr_accessor" attributes="__classmethod__" ilk="function" />
          <scope name="default_charset" attributes="__classmethod__" ilk="function" />
          <scope name="default_charset=" attributes="__classmethod__" ilk="function" />
          <scope name="default_content_type" attributes="__classmethod__" ilk="function" />
          <scope name="default_content_type=" attributes="__classmethod__" ilk="function" />
          <scope name="default_implicit_parts_order" attributes="__classmethod__" ilk="function" />
          <scope name="default_implicit_parts_order=" attributes="__classmethod__" ilk="function" />
          <scope name="default_mime_version" attributes="__classmethod__" ilk="function" />
          <scope name="default_mime_version=" attributes="__classmethod__" ilk="function" />
          <scope name="deliver" signature="(mail)" doc="Deliver the given mail object directly. This can be used to&#xA;deliver a preconstructed mail object, like:  email = MyMailer.create_some_mail(parameters)&#xA;  email.set_some_obscure_header &quot;frobnicate&quot;&#xA;  MyMailer.deliver(email)" attributes="__classmethod__" ilk="function" />
          <scope name="deliveries" attributes="__classmethod__" ilk="function" />
          <scope name="deliveries=" attributes="__classmethod__" ilk="function" />
          <scope name="delivery_method" attributes="__classmethod__" ilk="function" />
          <scope name="delivery_method=" attributes="__classmethod__" ilk="function" />
          <scope name="helper" attributes="__classmethod__" ilk="function" />
          <scope name="helper_attr" attributes="__classmethod__" ilk="function" />
          <scope name="helper_method" attributes="__classmethod__" ilk="function" />
          <scope name="logger" attributes="__classmethod__" ilk="function" />
          <scope name="logger=" attributes="__classmethod__" ilk="function" />
          <scope name="master_helper_module" attributes="__classmethod__" ilk="function" />
          <scope name="master_helper_module=" attributes="__classmethod__" ilk="function" />
          <scope name="method_missing" attributes="__classmethod__" ilk="function" />
          <scope name="perform_deliveries" attributes="__classmethod__" ilk="function" />
          <scope name="perform_deliveries=" attributes="__classmethod__" ilk="function" />
          <scope name="raise_delivery_errors" attributes="__classmethod__" ilk="function" />
          <scope name="raise_delivery_errors=" attributes="__classmethod__" ilk="function" />
          <scope name="receive" signature="(raw_email)" doc="Receives a raw email, parses it into an email&#xA;object, decodes it, instantiates a new mailer, and passes&#xA;the email object to the mailer object&apos;s #receive method. If&#xA;you want your mailer to be able to process incoming&#xA;messages, you&apos;ll need to implement a #receive method that&#xA;accepts the email object as a parameter:" attributes="__classmethod__" ilk="function" />
          <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
          <scope name="server_settings" attributes="__classmethod__" ilk="function" />
          <scope name="server_settings=" attributes="__classmethod__" ilk="function" />
          <scope name="template_root" attributes="__classmethod__" ilk="function" />
          <scope name="template_root=" attributes="__classmethod__" ilk="function" />
          <scope name="bcc" ilk="function" />
          <scope name="bcc=" ilk="function" />
          <scope name="body" ilk="function" />
          <scope name="body=" ilk="function" />
          <scope name="cc" ilk="function" />
          <scope name="cc=" ilk="function" />
          <scope name="charset" ilk="function" />
          <scope name="charset=" ilk="function" />
          <scope name="content_type" ilk="function" />
          <scope name="content_type=" ilk="function" />
          <scope name="create!" ilk="function" />
          <scope name="default_charset" ilk="function" />
          <scope name="default_charset=" ilk="function" />
          <scope name="default_content_type" ilk="function" />
          <scope name="default_content_type=" ilk="function" />
          <scope name="default_implicit_parts_order" ilk="function" />
          <scope name="default_implicit_parts_order=" ilk="function" />
          <scope name="default_mime_version" ilk="function" />
          <scope name="default_mime_version=" ilk="function" />
          <scope name="deliver!" signature="(mail = @mail)" doc="Delivers a TMail::Mail object. By default, it delivers the&#xA;cached mail object (from the #create! method). If no cached&#xA;mail object exists, and no alternate has been given as the&#xA;parameter, this will fail." ilk="function" />
          <scope name="deliveries" ilk="function" />
          <scope name="deliveries=" ilk="function" />
          <scope name="delivery_method" ilk="function" />
          <scope name="delivery_method=" ilk="function" />
          <scope name="from" ilk="function" />
          <scope name="from=" ilk="function" />
          <scope name="headers" ilk="function" />
          <scope name="headers=" ilk="function" />
          <scope name="implicit_parts_order" ilk="function" />
          <scope name="implicit_parts_order=" ilk="function" />
          <scope name="logger" ilk="function" />
          <scope name="logger=" ilk="function" />
          <scope name="mail" ilk="function" />
          <scope name="mailer_name" ilk="function" />
          <scope name="mailer_name=" ilk="function" />
          <scope name="master_helper_module" ilk="function" />
          <scope name="master_helper_module=" ilk="function" />
          <scope name="mime_version" ilk="function" />
          <scope name="mime_version=" ilk="function" />
          <scope name="perform_deliveries" ilk="function" />
          <scope name="perform_deliveries=" ilk="function" />
          <scope name="raise_delivery_errors" ilk="function" />
          <scope name="raise_delivery_errors=" ilk="function" />
          <scope name="recipients" ilk="function" />
          <scope name="recipients=" ilk="function" />
          <scope name="sent_on" ilk="function" />
          <scope name="sent_on=" ilk="function" />
          <scope name="server_settings" ilk="function" />
          <scope name="server_settings=" ilk="function" />
          <scope name="subject" ilk="function" />
          <scope name="subject=" ilk="function" />
          <scope name="template" ilk="function" />
          <scope name="template=" ilk="function" />
          <scope name="template_root" ilk="function" />
          <scope name="template_root=" ilk="function" />
          <import symbol="ActionMailer::AdvAttrAccessor" />
          <import symbol="ActionMailer::Helpers" />
          <import symbol="ActionMailer::PartContainer" />
          <import symbol="ActionMailer::Quoting" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <variable name="CHARS_NEEDING_QUOTING" citdl="Regexp" attributes="__const__" />
        </scope>
        <scope name="Helpers" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="add_template_helper" ilk="function" />
            <scope name="helper" signature="(*args, &amp;block)" doc="Declare a helper:  helper :foorequires &apos;foo_helper&apos; and&#xA;includes FooHelper in the template class.  helper FooHelper&#xA;includes FooHelper in the template class.  helper { def&#xA;foo() &quot;#{bar} is the very best&quot; end }evaluates the&#xA;block in the template class, adding method #foo.  helper(:three, BlindHelper) { def mice() &apos;mice&apos; end }&#xA;" ilk="function" />
            <scope name="helper_attr" signature="(*attrs)" doc="Declare a controller attribute as a helper. For example,&#xA;  helper_attr :name  attr_accessor :namemakes the name and&#xA;name= controller methods available in the view. The is a&#xA;convenience wrapper for helper_method." ilk="function" />
            <scope name="helper_method" signature="(*methods)" doc="Declare a controller method as a helper. For example,&#xA;  helper_method :link_to  def link_to(name, options) ... end&#xA;makes the link_to controller method available in the view." ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="Part" classrefs="Object" ilk="class">
          <scope name="body" ilk="function" />
          <scope name="body=" ilk="function" />
          <scope name="charset" ilk="function" />
          <scope name="charset=" ilk="function" />
          <scope name="content_disposition" ilk="function" />
          <scope name="content_disposition=" ilk="function" />
          <scope name="content_type" ilk="function" />
          <scope name="content_type=" ilk="function" />
          <scope name="filename" ilk="function" />
          <scope name="filename=" ilk="function" />
          <scope name="headers" ilk="function" />
          <scope name="headers=" ilk="function" />
          <scope name="to_mail" signature="(defaults)" doc="Convert the part to a mail object which can be included in&#xA;the parts list of another mail object." ilk="function" />
          <scope name="transfer_encoding" ilk="function" />
          <scope name="transfer_encoding=" ilk="function" />
          <import symbol="ActionMailer::AdvAttrAccessor" />
          <import symbol="ActionMailer::PartContainer" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="PartContainer" ilk="namespace">
          <scope name="attachment" signature="(params, &amp;block)" doc="Add an attachment to a multipart message. This is simply a&#xA;part with the content-disposition set&#xA;to &quot;attachment&quot;." ilk="function" />
          <scope name="part" signature="(params) {|part if block_given?| ...}" doc="Add a part to a multipart message, with the given&#xA;content-type. The part itself is yielded to the block so&#xA;that other properties (charset, body, headers, etc.) can be&#xA;set on it." ilk="function" />
          <scope name="parts" ilk="function" />
        </scope>
        <scope name="Quoting" ilk="namespace">
          <scope name="quote_address_if_necessary" ilk="function" />
          <scope name="quote_any_address_if_necessary" ilk="function" />
          <scope name="quote_any_if_necessary" ilk="function" />
          <scope name="quote_if_necessary" ilk="function" />
          <scope name="quoted_printable" ilk="function" />
          <scope name="quoted_printable_encode" ilk="function" />
          <variable name="CHARS_NEEDING_QUOTING" citdl="Regexp" attributes="__const__" />
        </scope>
        <scope name="Utils" ilk="namespace">
          <scope name="normalize_new_lines" attributes="__classmethod__" ilk="function" />
          <scope name="normalize_new_lines" ilk="function" />
        </scope>
      </scope>
      <scope name="ActionView" ilk="namespace">
        <scope name="ActionViewError" classrefs="StandardError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Base" classrefs="Object" ilk="class">
          <scope name="CompiledTemplates" ilk="namespace">
          </scope>
          <scope name="ObjectWrapper" classrefs="" ilk="class">
            <scope name="Passwd" classrefs="Struct" ilk="class">
              <scope name="Tms" classrefs="Struct" ilk="class">
                <scope name="[]" attributes="__classmethod__" ilk="function" />
                <scope name="members" attributes="__classmethod__" ilk="function" />
                <scope name="new" attributes="__classmethod__ __ctor__" ilk="function" />
                <scope name="cstime" ilk="function" />
                <scope name="cstime=" ilk="function" />
                <scope name="cutime" ilk="function" />
                <scope name="cutime=" ilk="function" />
                <scope name="stime" ilk="function" />
                <scope name="stime=" ilk="function" />
                <scope name="utime" ilk="function" />
                <scope name="utime=" ilk="function" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
                <import symbol="Enumerable" />
              </scope>
              <scope name="[]" attributes="__classmethod__" ilk="function" />
              <scope name="members" attributes="__classmethod__" ilk="function" />
              <scope name="new" attributes="__classmethod__ __ctor__" ilk="function" />
              <scope name="dir" ilk="function" />
              <scope name="dir=" ilk="function" />
              <scope name="gid" ilk="function" />
              <scope name="gid=" ilk="function" />
              <scope name="name=" ilk="function" />
              <scope name="passwd" ilk="function" />
              <scope name="passwd=" ilk="function" />
              <scope name="shell" ilk="function" />
              <scope name="shell=" ilk="function" />
              <scope name="uid" ilk="function" />
              <scope name="uid=" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Enumerable" />
            </scope>
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope name="cache_template_extensions" attributes="__classmethod__" ilk="function" />
          <scope name="cache_template_extensions=" attributes="__classmethod__" ilk="function" />
          <scope name="cache_template_loading" attributes="__classmethod__" ilk="function" />
          <scope name="cache_template_loading=" attributes="__classmethod__" ilk="function" />
          <scope name="debug_rjs" attributes="__classmethod__" ilk="function" />
          <scope name="debug_rjs=" attributes="__classmethod__" ilk="function" />
          <scope name="erb_trim_mode" attributes="__classmethod__" ilk="function" />
          <scope name="erb_trim_mode=" attributes="__classmethod__" ilk="function" />
          <scope name="field_error_proc" attributes="__classmethod__" ilk="function" />
          <scope name="field_error_proc=" attributes="__classmethod__" ilk="function" />
          <scope name="load_helpers" attributes="__classmethod__" ilk="function" />
          <scope name="local_assigns_support_string_keys" attributes="__classmethod__" ilk="function" />
          <scope name="local_assigns_support_string_keys=" attributes="__classmethod__" ilk="function" />
          <scope name="register_template_handler" signature="(extension, klass)" doc="Register a class that knows how to handle template files&#xA;with the given extension. This can be used to implement new&#xA;template types. The constructor for the class must take the&#xA;ActiveView::Base instance as a parameter, and the class must&#xA;implement a #render method that takes the contents of the&#xA;template to render as well as the Hash of local assigns&#xA;available to the template. The #render method ought to&#xA;return the rendered template as a string." attributes="__classmethod__" ilk="function" />
          <scope name="assigns" ilk="function" />
          <scope name="assigns=" ilk="function" />
          <scope name="base_path" ilk="function" />
          <scope name="base_path=" ilk="function" />
          <scope name="builder_template_exists?" ilk="function" />
          <scope name="cache_template_extensions" ilk="function" />
          <scope name="cache_template_extensions=" ilk="function" />
          <scope name="cache_template_loading" ilk="function" />
          <scope name="cache_template_loading=" ilk="function" />
          <scope name="compile_and_render_template" ilk="function" />
          <scope name="controller" ilk="function" />
          <scope name="controller=" ilk="function" />
          <scope name="debug_rjs" ilk="function" />
          <scope name="debug_rjs=" ilk="function" />
          <scope name="delegate_template_exists?" ilk="function" />
          <scope name="erb_template_exists?" ilk="function" />
          <scope name="erb_trim_mode" ilk="function" />
          <scope name="erb_trim_mode=" ilk="function" />
          <scope name="field_error_proc" ilk="function" />
          <scope name="field_error_proc=" ilk="function" />
          <scope name="file_exists?" ilk="function" />
          <scope name="file_public?" ilk="function" />
          <scope name="first_render" ilk="function" />
          <scope name="flash" ilk="function" />
          <scope name="headers" ilk="function" />
          <scope name="javascript_template_exists?" ilk="function" />
          <scope name="local_assigns_support_string_keys" ilk="function" />
          <scope name="local_assigns_support_string_keys=" ilk="function" />
          <scope name="logger" ilk="function" />
          <scope name="params" ilk="function" />
          <scope name="pick_template_extension" ilk="function" />
          <scope name="render" ilk="function" />
          <scope name="render_file" ilk="function" />
          <scope name="render_template" ilk="function" />
          <scope name="request" ilk="function" />
          <scope name="response" ilk="function" />
          <scope name="session" ilk="function" />
          <scope name="template_extension" ilk="function" />
          <scope name="template_extension=" ilk="function" />
          <import symbol="ActionView::Base::CompiledTemplates" />
          <import symbol="ActionView::Helpers::ActiveRecordHelper" />
          <import symbol="ActionView::Helpers::AssetTagHelper" />
          <import symbol="ActionView::Helpers::BenchmarkHelper" />
          <import symbol="ActionView::Helpers::CacheHelper" />
          <import symbol="ActionView::Helpers::CaptureHelper" />
          <import symbol="ActionView::Helpers::DateHelper" />
          <import symbol="ActionView::Helpers::DebugHelper" />
          <import symbol="ActionView::Helpers::FormHelper" />
          <import symbol="ActionView::Helpers::FormOptionsHelper" />
          <import symbol="ActionView::Helpers::FormTagHelper" />
          <import symbol="ActionView::Helpers::JavaScriptHelper" />
          <import symbol="ActionView::Helpers::JavaScriptMacrosHelper" />
          <import symbol="ActionView::Helpers::NumberHelper" />
          <import symbol="ActionView::Helpers::PaginationHelper" />
          <import symbol="ActionView::Helpers::PrototypeHelper" />
          <import symbol="ActionView::Helpers::ScriptaculousHelper" />
          <import symbol="ActionView::Helpers::TagHelper" />
          <import symbol="ActionView::Helpers::TextHelper" />
          <import symbol="ActionView::Helpers::UrlHelper" />
          <import symbol="ActionView::Partials" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="ERB::Util" />
          <variable name="AJAX_OPTIONS" citdl="Set" attributes="__const__" />
          <variable name="AUTO_LINK_RE" citdl="Regexp" attributes="__const__" />
          <variable name="CALLBACKS" citdl="Set" attributes="__const__" />
          <variable name="COUNTRIES" citdl="Array" attributes="__const__" />
          <variable name="DEFAULT_OPTIONS" citdl="Hash" attributes="__const__" />
          <variable name="DEFAULT_PREFIX" citdl="String" attributes="__const__" />
          <variable name="JAVASCRIPT_DEFAULT_SOURCES" citdl="Array" attributes="__const__" />
          <variable name="JAVASCRIPT_PATH" citdl="String" attributes="__const__" />
          <variable name="TOGGLE_EFFECTS" citdl="Array" attributes="__const__" />
          <variable name="VERBOTEN_ATTRS" citdl="Regexp" attributes="__const__" />
          <variable name="VERBOTEN_TAGS" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Helpers" ilk="namespace">
          <scope name="ActiveRecordHelper" ilk="namespace">
            <scope name="error_message_on" signature="(object, method, prepend_text = &quot;&quot;, append_text = &quot;&quot;, css_class = &quot;formError&quot;)" doc="Returns a string containing the error message attached to&#xA;the method&lt;/tt&gt; on the &lt;tt&gt;object&lt;/tt&gt;, if one exists. This&#xA;error message is wrapped in a DIV tag, which can be&#xA;specialized to include both&#xA;a &lt;tt&gt;prepend_text&lt;/tt&gt; and &lt;tt&gt;append_text&lt;/tt&gt; to properly&#xA;introduce the error and a &lt;tt&gt;css_class to style it&#xA;accordingly. Examples (post has an error message &quot;can&apos;t&#xA;be empty&quot; on the title attribute):" ilk="function" />
            <scope name="error_messages_for" signature="(*params)" ilk="function" />
            <scope name="form" signature="(record_name, options = {}) {|contents if block_given?| ...}" doc="Returns an entire form with input tags and everything for a&#xA;specified Active Record object. Example (post is a new&#xA;record that has a title using VARCHAR and a body using&#xA;TEXT):  form(&quot;post&quot;) =&gt;    &lt;form&#xA;action=&apos;/post/create&apos; method=&apos;post&apos;&gt;      &lt;p&gt;&#xA;        &lt;label&#xA;for=&quot;post_title&quot;&gt;Title&lt;/label&gt;&lt;br /&gt;&#xA;" ilk="function" />
            <scope name="input" signature="(record_name, method, options = {})" doc="Returns a default input tag for the type of object returned&#xA;by the method. Example (title is a VARCHAR column and&#xA;holds &quot;Hello World&quot;):  input(&quot;post&quot;, &quot;title&quot;) =&gt;&#xA;    &lt;input&#xA;id=&quot;post_title&quot; name=&quot;post[title]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;Hello World&quot; /&gt;&#xA;" ilk="function" />
          </scope>
          <scope name="AssetTagHelper" ilk="namespace">
            <scope name="register_javascript_include_default" signature="(*sources)" doc="Register one or more additional JavaScript files to be&#xA;included when javascript_include_tag :defaults&lt;/tt&gt; is&#xA;called. This method is only intended to be called from&#xA;plugin initialization to register additional .js files that&#xA;the plugin installed in &lt;tt&gt;public/javascripts." attributes="__classmethod__" ilk="function" />
            <scope name="reset_javascript_include_default" attributes="__classmethod__" ilk="function" />
            <scope name="auto_discovery_link_tag" signature="(type = :rss, url_options = {}, tag_options = {})" ilk="function" />
            <scope name="image_path" signature="(source)" doc="Computes the path to an image asset in the public images&#xA;directory. Full paths from the document root will be passed&#xA;through. Used internally by image_tag to build the image&#xA;path. Passing a filename without an extension is deprecated.&#xA;  image_path(&quot;edit.png&quot;)  # =&gt; /images/edit.png&#xA;  image_path(&quot;icons/edit.png&quot;)  # =&gt; /images/icons/edit.png&#xA;" ilk="function" />
            <scope name="image_tag" signature="(source, options = {})" ilk="function" />
            <scope name="javascript_include_tag" signature="(*sources)" doc="Returns an html script tag for each of the&#xA;sources&lt;/tt&gt; provided. You can pass in the filename (.js&#xA;extension is optional) of javascript files that exist in&#xA;your public/javascripts directory for inclusion into the&#xA;current page or you can pass the full path relative to your&#xA;document root. To include the Prototype and Scriptaculous&#xA;javascript libraries in your&#xA;application, pass &lt;tt&gt;:defaults&lt;/tt&gt; as the source. When&#xA;using :defaults, if an &lt;tt&gt;application.js file exists in&#xA;your public javascripts directory, it will be included as&#xA;well. You can modify the html attributes of the script tag&#xA;by passing a hash as the last argument." ilk="function" />
            <scope name="javascript_path" signature="(source)" doc="Computes the path to a javascript asset in the public&#xA;javascripts directory. If the source filename has no&#xA;extension, .js will be appended. Full paths from the&#xA;document root will be passed through. Used internally by&#xA;javascript_include_tag to build the script path.  javascript_path &quot;xmlhr&quot; # =&gt; /javascripts/xmlhr.js&#xA;" ilk="function" />
            <scope name="register_javascript_include_default" signature="(*sources)" doc="Register one or more additional JavaScript files to be&#xA;included when javascript_include_tag :defaults&lt;/tt&gt; is&#xA;called. This method is only intended to be called from&#xA;plugin initialization to register additional .js files that&#xA;the plugin installed in &lt;tt&gt;public/javascripts." ilk="function" />
            <scope name="reset_javascript_include_default" ilk="function" />
            <scope name="stylesheet_link_tag" signature="(*sources)" doc="Returns a stylesheet link tag for the sources specified as&#xA;arguments. If you don&apos;t specify an extension, .css will be&#xA;appended automatically. You can modify the link attributes&#xA;by passing a hash as the last argument.  stylesheet_link_tag &quot;style&quot; # =&gt;&#xA;    &lt;link&#xA;href=&quot;/stylesheets/style.css&quot; media=&quot;screen&quot; rel=&quot;Stylesheet&quot; type=&quot;text/css&quot; /&gt;&#xA;" ilk="function" />
            <scope name="stylesheet_path" signature="(source)" doc="Computes the path to a stylesheet asset in the public&#xA;stylesheets directory. If the source filename has no&#xA;extension, .css will be appended. Full paths from the&#xA;document root will be passed through. Used internally by&#xA;stylesheet_link_tag to build the stylesheet path.  stylesheet_path &quot;style&quot; # =&gt; /stylesheets/style.css&#xA;" ilk="function" />
            <variable name="JAVASCRIPT_DEFAULT_SOURCES" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="BenchmarkHelper" ilk="namespace">
            <scope name="benchmark" signature="(message = &quot;Benchmarking&quot;, level = :info) {|| ...}" doc="Measures the execution time of a block in a template and&#xA;reports the result to the log. Example: &lt;% benchmark &quot;Notes section&quot; do %&gt;&#xA;   &lt;%= expensive_notes_operation %&gt; &lt;% end %&gt;&#xA;Will add something like &quot;Notes&#xA;section (0.34523)&quot; to the log.You may give an optional&#xA;logger level as the second&#xA;argument (:debug, :info, :warn, :error). The default&#xA;is :info." ilk="function" />
          </scope>
          <scope name="CacheHelper" ilk="namespace">
            <scope name="cache" signature="(name = {}, &amp;block)" ilk="function" />
          </scope>
          <scope name="CaptureHelper" ilk="namespace">
            <scope name="capture" signature="(*args, &amp;block)" doc="Capture allows you to extract a part of the template into an&#xA;instance variable. You can use this instance variable&#xA;anywhere in your templates and even in your layout.&#xA;Example of capture being used in a .rhtml page:  &lt;% @greeting = capture do %&gt;&#xA;    Welcome To my shiny new web page!  &lt;% end %&gt;&#xA;Example of capture being used in a .rxml page:" ilk="function" />
            <scope name="content_for" signature="(name, content = nil, &amp;block)" doc="Calling content_for stores the block of markup for later&#xA;use. Subsequently, you can make calls to it by name with&#xA;yield in another template or in the layout.Example:&#xA;  &lt;% content_for(&quot;header&quot;) do %&gt;    alert(&apos;hello world&apos;)&#xA;  &lt;% end %&gt;You can use yield :header anywhere in your&#xA;templates." ilk="function" />
          </scope>
          <scope name="DateHelper" ilk="namespace">
            <scope name="date_select" signature="(object_name, method, options = {})" doc="Returns a set of select tags (one for year, month, and&#xA;day) pre-selected for accessing a specified date-based&#xA;attribute (identified by method&lt;/tt&gt;) on an object assigned&#xA;to the template (identified by &lt;tt&gt;object&lt;/tt&gt;). It&apos;s&#xA;possible to tailor the selects through&#xA;the &lt;tt&gt;options&lt;/tt&gt; hash, which accepts all the keys that&#xA;each of the individual select builders&#xA;do (like :use_month_numbers for select_month) as well as a&#xA;range of discard options. The discard options&#xA;are &lt;tt&gt;:discard_year&lt;/tt&gt;, &lt;tt&gt;:discard_month&lt;/tt&gt; and &lt;tt&gt;:discard_day&lt;/tt&gt;. Set to true, they&apos;ll drop the respective select. Discarding the month select will also automatically discard the day select. It&apos;s also possible to explicitly set the order of the tags using the &lt;tt&gt;:order&lt;/tt&gt; option with an array of symbols &lt;tt&gt;:year&lt;/tt&gt;, &lt;tt&gt;:month&lt;/tt&gt; and &lt;tt&gt;:day in the desired order. Symbols may be omitted and the respective select is not included.&#xA;" ilk="function" />
            <scope name="datetime_select" signature="(object_name, method, options = {})" doc="Returns a set of select tags (one for&#xA;year, month, day, hour, and minute) pre-selected for&#xA;accessing a specified datetime-based attribute (identified&#xA;by method&lt;/tt&gt;) on an object assigned to the&#xA;template (identified by &lt;tt&gt;object). Examples:  datetime_select(&quot;post&quot;, &quot;written_on&quot;)&#xA;" ilk="function" />
            <scope name="distance_of_time_in_words" signature="(from_time, to_time = 0, include_seconds = false)" doc="Reports the approximate distance in time between two Time or&#xA;Date objects or integers as seconds. Set include_seconds to&#xA;true if you want more detailed approximations when&#xA;distance &lt; 1 min, 29 secs Distances are reported base on&#xA;the following table:0 &lt;-&gt; 29 secs # =&gt; less than a&#xA;minute 30 secs &lt;-&gt; 1 min, 29 secs # =&gt; 1 minute 1&#xA;min, 30 secs &lt;-&gt; 44 mins, 29&#xA;secs # =&gt; [2..44] minutes 44 mins, 30 secs &lt;-&gt; 89&#xA;mins, 29 secs # =&gt; about 1 hour 89 mins, 29&#xA;secs &lt;-&gt; 23 hrs, 59 mins, 29&#xA;secs # =&gt; about [2..24] hours 23 hrs, 59 mins, 29&#xA;secs &lt;-&gt; 47 hrs, 59 mins, 29 secs # =&gt; 1 day 47&#xA;hrs, 59 mins, 29 secs &lt;-&gt; 29 days, 23 hrs, 59 mins, 29&#xA;secs # =&gt; [2..29] days 29 days, 23 hrs, 59 mins, 30&#xA;secs &lt;-&gt; 59 days, 23 hrs, 59 mins, 29&#xA;secs # =&gt; about 1 month 59 days, 23 hrs, 59 mins, 30&#xA;secs &lt;-&gt; 1 yr minus 31 secs # =&gt; [2..12] months 1&#xA;yr minus 30 secs &lt;-&gt; 2 yrs minus 31 secs # =&gt; about&#xA;1 year 2 yrs minus 30 secs &lt;-&gt; max time or&#xA;date # =&gt; over [2..X] years" ilk="function" />
            <scope name="distance_of_time_in_words_to_now" signature="(from_time, include_seconds = false)" doc="Alias for #time_ago_in_words" ilk="function" />
            <scope name="select_date" signature="(date = Date.today, options = {})" doc="Returns a set of html select-tags (one for year, month, and&#xA;day) pre-selected with the date&lt;/tt&gt;. It&apos;s possible to&#xA;explicitly set the order of the tags using&#xA;the &lt;tt&gt;:order&lt;/tt&gt; option with an array of&#xA;symbols &lt;tt&gt;:year&lt;/tt&gt;, &lt;tt&gt;:month&lt;/tt&gt; and &lt;tt&gt;:day&lt;/tt&gt; in&#xA;the desired order. If you do not supply a Symbol, it will be&#xA;appened onto the &lt;tt&gt;:order passed in." ilk="function" />
            <scope name="select_datetime" signature="(datetime = Time.now, options = {})" doc="Returns a set of html select-tags (one for&#xA;year, month, day, hour, and minute) pre-selected with the&#xA;datetime&lt;/tt&gt;. It&apos;s also possible to explicitly set the&#xA;order of the tags using the &lt;tt&gt;:order&lt;/tt&gt; option with an&#xA;array of&#xA;symbols &lt;tt&gt;:year&lt;/tt&gt;, &lt;tt&gt;:month&lt;/tt&gt; and &lt;tt&gt;:day&lt;/tt&gt; in&#xA;the desired order. If you do not supply a Symbol, it will be&#xA;appened onto the &lt;tt&gt;:order&lt;/tt&gt; passed in. You can also&#xA;add &lt;tt&gt;:date_separator&lt;/tt&gt; and &lt;tt&gt;:time_separator&lt;/tt&gt; keys to the &lt;tt&gt;options to control visual display of the elements.&#xA;" ilk="function" />
            <scope name="select_day" signature="(date, options = {})" doc="Returns a select tag with options for each of the days 1&#xA;through 31 with the current day selected. The date&lt;/tt&gt; can&#xA;also be substituted for a hour number. Override the field&#xA;name using the &lt;tt&gt;:field_name option, &apos;day&apos; by default." ilk="function" />
            <scope name="select_hour" signature="(datetime, options = {})" doc="Returns a select tag with options for each of the hours 0&#xA;through 23 with the current hour selected. The hour&lt;/tt&gt; can&#xA;also be substituted for a hour number. Override the field&#xA;name using the &lt;tt&gt;:field_name option, &apos;hour&apos; by default." ilk="function" />
            <scope name="select_minute" signature="(datetime, options = {})" doc="Returns a select tag with options for each of the minutes 0&#xA;through 59 with the current minute selected. Also can return&#xA;a select tag with options by minute_step&lt;/tt&gt; from 0 through&#xA;59 with the 00 minute selected The &lt;tt&gt;minute&lt;/tt&gt; can also&#xA;be substituted for a minute number. Override the field name&#xA;using the &lt;tt&gt;:field_name option, &apos;minute&apos; by default." ilk="function" />
            <scope name="select_month" signature="(date, options = {})" doc="Returns a select tag with options for each of the months&#xA;January through December with the current month selected.&#xA;The month names are presented as keys (what&apos;s shown to the&#xA;user) and the month numbers (1-12) are used as&#xA;values (what&apos;s submitted to the server). It&apos;s also possible&#xA;to use month numbers for the presentation instead of&#xA;names -- set the :use_month_numbers&lt;/tt&gt; key&#xA;in &lt;tt&gt;options&lt;/tt&gt; to true for this to happen. If you want&#xA;both numbers and names, set&#xA;the &lt;tt&gt;:add_month_numbers&lt;/tt&gt; key in &lt;tt&gt;options&lt;/tt&gt; to&#xA;true. If you would prefer to show month names as&#xA;abbreviations, set the &lt;tt&gt;:use_short_month&lt;/tt&gt; key&#xA;in &lt;tt&gt;options&lt;/tt&gt; to true. If you want to use your own&#xA;month names, set the &lt;tt&gt;:use_month_names&lt;/tt&gt; key&#xA;in &lt;tt&gt;options to an array of 12 month names." ilk="function" />
            <scope name="select_second" signature="(datetime, options = {})" doc="Returns a select tag with options for each of the seconds 0&#xA;through 59 with the current second selected. The&#xA;second&lt;/tt&gt; can also be substituted for a second number.&#xA;Override the field name using the &lt;tt&gt;:field_name&#xA;option, &apos;second&apos; by default." ilk="function" />
            <scope name="select_time" signature="(datetime = Time.now, options = {})" doc="Returns a set of html select-tags (one for hour and&#xA;minute) You can set :add_separator key to format the output." ilk="function" />
            <scope name="select_year" signature="(date, options = {})" doc="Returns a select tag with options for each of the five years&#xA;on each side of the current, which is selected. The five&#xA;year radius can be changed using&#xA;the :start_year&lt;/tt&gt; and &lt;tt&gt;:end_year&lt;/tt&gt; keys in&#xA;the &lt;tt&gt;options&lt;/tt&gt;. Both ascending and descending year&#xA;lists are supported by making &lt;tt&gt;:start_year&lt;/tt&gt; less than&#xA;or greater than &lt;tt&gt;:end_year&lt;/tt&gt;. The &lt;tt&gt;date can also be&#xA;substituted for a year given as a number. Example:" ilk="function" />
            <scope name="time_ago_in_words" signature="(from_time, include_seconds = false)" doc="Like distance_of_time_in_words, but where to_time&lt;/tt&gt; is&#xA;fixed to &lt;tt&gt;Time.now." ilk="function" />
            <variable name="DEFAULT_PREFIX" citdl="String" attributes="__const__" />
          </scope>
          <scope name="DebugHelper" ilk="namespace">
            <scope name="debug" signature="(object)" doc="Returns a &lt;pre&gt;-tag set with the object dumped by&#xA;YAML. Very readable way to inspect an object." ilk="function" />
          </scope>
          <scope name="FormBuilder" classrefs="Object" ilk="class">
            <scope name="field_helpers" attributes="__classmethod__" ilk="function" />
            <scope name="field_helpers=" attributes="__classmethod__" ilk="function" />
            <scope name="check_box" ilk="function" />
            <scope name="collection_select" ilk="function" />
            <scope name="country_select" ilk="function" />
            <scope name="date_select" ilk="function" />
            <scope name="datetime_select" ilk="function" />
            <scope name="field_helpers" ilk="function" />
            <scope name="field_helpers=" ilk="function" />
            <scope name="fields_for" ilk="function" />
            <scope name="file_field" ilk="function" />
            <scope name="hidden_field" ilk="function" />
            <scope name="object" ilk="function" />
            <scope name="object=" ilk="function" />
            <scope name="object_name" ilk="function" />
            <scope name="object_name=" ilk="function" />
            <scope name="password_field" ilk="function" />
            <scope name="radio_button" ilk="function" />
            <scope name="select" ilk="function" />
            <scope name="text_area" ilk="function" />
            <scope name="text_field" ilk="function" />
            <scope name="time_zone_select" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="FormHelper" ilk="namespace">
            <scope name="check_box" signature="(object_name, method, options = {}, checked_value = &quot;1&quot;, unchecked_value = &quot;0&quot;)" doc="Returns a checkbox tag tailored for accessing a specified&#xA;attribute (identified by method&lt;/tt&gt;) on an object assigned&#xA;to the template (identified by &lt;tt&gt;object&lt;/tt&gt;). It&apos;s&#xA;intended that &lt;tt&gt;method&lt;/tt&gt; returns an integer and if that&#xA;integer is above zero, then the checkbox is checked.&#xA;Additional options on the input tag can be passed as a hash&#xA;with &lt;tt&gt;options&lt;/tt&gt;. The &lt;tt&gt;checked_value&lt;/tt&gt; defaults&#xA;to 1 while the default &lt;tt&gt;unchecked_value is set to 0 which&#xA;is convenient for boolean values. Usually unchecked&#xA;checkboxes don&apos;t post anything. We work around this problem&#xA;by adding a hidden value with the same name as the checkbox." ilk="function" />
            <scope name="fields_for" signature="(object_name, *args, &amp;block) {|builder.new(object_name, object, self, options, block)| ...}" doc="Creates a scope around a specific model object like&#xA;form_for, but doesn&apos;t create the form tags themselves. This&#xA;makes fields_for suitable for specifying additional model&#xA;objects in the same form. Example:  &lt;% form_for :person, @person, :url =&gt; { :action =&gt; &quot;update&quot; } do |person_form| %&gt;&#xA;    First&#xA;name: &lt;%= person_form.text_field :first_name %&gt;" ilk="function" />
            <scope name="file_field" signature="(object_name, method, options = {})" doc="Works just like text_field, but returns an input tag of&#xA;the &quot;file&quot; type instead, which won&apos;t have a&#xA;default value." ilk="function" />
            <scope name="form_for" signature="(object_name, *args, &amp;proc)" doc="Creates a form and a scope around a specific model&#xA;object, which is then used as a base for questioning about&#xA;values for the fields. Examples:  &lt;% form_for :person, @person, :url =&gt; { :action =&gt; &quot;update&quot; } do |f| %&gt;&#xA;    First name: &lt;%= f.text_field :first_name %&gt;&#xA;    Last name : &lt;%= f.text_field :last_name %&gt;&#xA;    Biography : &lt;%= f.text_area :biography %&gt;" ilk="function" />
            <scope name="hidden_field" signature="(object_name, method, options = {})" doc="Works just like text_field, but returns an input tag of&#xA;the &quot;hidden&quot; type instead." ilk="function" />
            <scope name="password_field" signature="(object_name, method, options = {})" doc="Works just like text_field, but returns an input tag of&#xA;the &quot;password&quot; type instead." ilk="function" />
            <scope name="radio_button" signature="(object_name, method, tag_value, options = {})" doc="Returns a radio button tag for accessing a specified&#xA;attribute (identified by method&lt;/tt&gt;) on an object assigned&#xA;to the template (identified by &lt;tt&gt;object&lt;/tt&gt;). If the&#xA;current value of &lt;tt&gt;method&lt;/tt&gt; is &lt;tt&gt;tag_value&lt;/tt&gt; the&#xA;radio button will be checked. Additional options on the&#xA;input tag can be passed as a hash with &lt;tt&gt;options.&#xA;Example (call, result). Imagine that @post.category&#xA;returns &quot;rails&quot;:" ilk="function" />
            <scope name="text_area" signature="(object_name, method, options = {})" doc="Returns a textarea opening and closing tag set tailored for&#xA;accessing a specified attribute (identified by&#xA;method&lt;/tt&gt;) on an object assigned to the&#xA;template (identified by &lt;tt&gt;object&lt;/tt&gt;). Additional options&#xA;on the input tag can be passed as a hash with &lt;tt&gt;options.&#xA;Example (call, result):" ilk="function" />
            <scope name="text_field" signature="(object_name, method, options = {})" doc="Returns an input tag of the &quot;text&quot; type tailored&#xA;for accessing a specified attribute (identified by&#xA;method&lt;/tt&gt;) on an object assigned to the&#xA;template (identified by &lt;tt&gt;object&lt;/tt&gt;). Additional options&#xA;on the input tag can be passed as a hash with &lt;tt&gt;options.&#xA;Examples (call, result):" ilk="function" />
          </scope>
          <scope name="FormOptionsHelper" ilk="namespace">
            <scope name="collection_select" signature="(object, method, collection, value_method, text_method, options = {}, html_options = {})" doc="Return select and option tags for the given object and&#xA;method using options_from_collection_for_select to generate&#xA;the list of option tags." ilk="function" />
            <scope name="country_options_for_select" signature="(selected = nil, priority_countries = nil)" doc="Returns a string of option tags for pretty much any country&#xA;in the world. Supply a country name as selected&lt;/tt&gt; to have&#xA;it marked as the selected option tag. You can also supply an&#xA;array of countries as &lt;tt&gt;priority_countries, so that they&#xA;will be listed above the rest of the (long) list.NOTE: Only&#xA;the option tags are returned, you have to wrap this call in&#xA;a regular HTML select tag." ilk="function" />
            <scope name="country_select" signature="(object, method, priority_countries = nil, options = {}, html_options = {})" doc="Return select and option tags for the given object and&#xA;method, using country_options_for_select to generate the&#xA;list of option tags." ilk="function" />
            <scope name="option_groups_from_collection_for_select" signature="(collection, group_method, group_label_method, option_key_method, option_value_method, selected_key = nil)" doc="Returns a string of option tags, like&#xA;options_from_collection_for_select, but surrounds them&#xA;with &lt;optgroup&gt; tags.An array of group objects are&#xA;passed. Each group should return an array of options when&#xA;calling group_method Each group should return its name when&#xA;calling group_label_method." ilk="function" />
            <scope name="options_for_select" signature="(container, selected = nil)" doc="Accepts a container (hash, array, enumerable, your type) and&#xA;returns a string of option tags. Given a container where the&#xA;elements respond to first and last (such as a two-element&#xA;array), the &quot;lasts&quot; serve as option values and&#xA;the &quot;firsts&quot; as option text. Hashes are turned&#xA;into this form automatically, so the keys&#xA;become &quot;firsts&quot; and values become lasts. If&#xA;selected&lt;/tt&gt; is specified, the matching &quot;last&quot; or&#xA;element will get the selected option-tag. &lt;tt&gt;Selected may&#xA;also be an array of values to be selected when using a&#xA;multiple select." ilk="function" />
            <scope name="options_from_collection_for_select" signature="(collection, value_method, text_method, selected_value = nil)" doc="Returns a string of option tags that have been compiled by&#xA;iterating over the collection&lt;/tt&gt; and assigning the the&#xA;result of a call to the &lt;tt&gt;value_method&lt;/tt&gt; as the option&#xA;value and the &lt;tt&gt;text_method&lt;/tt&gt; as the option text.&#xA;If &lt;tt&gt;selected_value&lt;/tt&gt; is specified, the element&#xA;returning a match on &lt;tt&gt;value_method will get the selected&#xA;option tag." ilk="function" />
            <scope name="select" signature="(object, method, choices, options = {}, html_options = {})" doc="Create a select tag and a series of contained option tags&#xA;for the provided object and method. The option currently&#xA;held by the object will be selected, provided that the&#xA;object is available. See options_for_select for the required&#xA;format of the choices parameter.Example&#xA;with @post.person_id =&gt; 1:" ilk="function" />
            <scope name="time_zone_options_for_select" signature="(selected = nil, priority_zones = nil, model = TimeZone)" doc="Returns a string of option tags for pretty much any time&#xA;zone in the world. Supply a TimeZone name as&#xA;selected&lt;/tt&gt; to have it marked as the selected option tag.&#xA;You can also supply an array of TimeZone objects&#xA;as &lt;tt&gt;priority_zones, so that they will be listed above the&#xA;rest of the (long) list. (You can use TimeZone.us_zones as a&#xA;convenience for obtaining a list of the US time zones.)" ilk="function" />
            <scope name="time_zone_select" signature="(object, method, priority_zones = nil, options = {}, html_options = {})" doc="Return select and option tags for the given object and&#xA;method, using #time_zone_options_for_select to generate the&#xA;list of option tags.In addition to&#xA;the :include_blank&lt;/tt&gt; option documented above, this method&#xA;also supports a &lt;tt&gt;:model option, which defaults to&#xA;TimeZone. This may be used by users to specify a different&#xA;time zone model object. (See #time_zone_options_for_select&#xA;for more information.)" ilk="function" />
            <import symbol="ERB::Util" />
            <variable name="COUNTRIES" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="FormTagHelper" ilk="namespace">
            <scope name="check_box_tag" signature="(name, value = &quot;1&quot;, checked = false, options = {})" doc="Creates a check box." ilk="function" />
            <scope name="end_form_tag" signature="()" doc="Outputs &quot;&lt;/form&gt;&quot;" ilk="function" />
            <scope name="file_field_tag" signature="(name, options = {})" doc="Creates a file upload field.If you are using file uploads&#xA;then you will also need to set the multipart option for the&#xA;form:  &lt;%= form_tag { :action =&gt; &quot;post&quot; }, { :multipart =&gt; true } %&gt;&#xA;    &lt;label for=&quot;file&quot;&gt;File to&#xA;Upload&lt;/label&gt; &lt;%= file_field_tag &quot;file&quot; %&gt;&#xA;" ilk="function" />
            <scope name="form_tag" signature="(url_for_options = {}, options = {}, *parameters_for_url, &amp;block)" ilk="function" />
            <scope name="hidden_field_tag" signature="(name, value = nil, options = {})" doc="Creates a hidden field.Takes the same options as&#xA;text_field_tag" ilk="function" />
            <scope name="image_submit_tag" signature="(source, options = {})" doc="Displays an image which when clicked will submit the form.&#xA;source is passed to AssetTagHelper#image_path" ilk="function" />
            <scope name="password_field_tag" signature="(name = &quot;password&quot;, value = nil, options = {})" doc="Creates a password field.Takes the same options as&#xA;text_field_tag" ilk="function" />
            <scope name="radio_button_tag" signature="(name, value, checked = false, options = {})" doc="Creates a radio button." ilk="function" />
            <scope name="select_tag" signature="(name, option_tags = nil, options = {})" ilk="function" />
            <scope name="start_form_tag" signature="(url_for_options = {}, options = {}, *parameters_for_url, &amp;block)" doc="Alias for #form_tag" ilk="function" />
            <scope name="submit_tag" signature="(value = &quot;Save changes&quot;, options = {})" doc="Creates a submit button with the text value as the caption.&#xA;If options contains a pair with the key&#xA;of &quot;disable_with&quot;, then the value will be used to&#xA;rename a disabled version of the submit button." ilk="function" />
            <scope name="text_area_tag" signature="(name, content = nil, options = {})" ilk="function" />
            <scope name="text_field_tag" signature="(name, value = nil, options = {})" ilk="function" />
          </scope>
          <scope name="InstanceTag" classrefs="Object" ilk="class">
            <scope name="column_type" ilk="function" />
            <scope name="content_tag" ilk="function" />
            <scope name="content_tag_without_error_wrapping" ilk="function" />
            <scope name="error_message" ilk="function" />
            <scope name="error_wrapping" ilk="function" />
            <scope name="method_name" ilk="function" />
            <scope name="object" ilk="function" />
            <scope name="object_name" ilk="function" />
            <scope name="tag" ilk="function" />
            <scope name="tag_without_error_wrapping" ilk="function" />
            <scope name="to_boolean_select_tag" ilk="function" />
            <scope name="to_check_box_tag" ilk="function" />
            <scope name="to_collection_select_tag" ilk="function" />
            <scope name="to_content_tag" ilk="function" />
            <scope name="to_country_select_tag" ilk="function" />
            <scope name="to_date_select_tag" ilk="function" />
            <scope name="to_date_select_tag_without_error_wrapping" ilk="function" />
            <scope name="to_date_tag" ilk="function" />
            <scope name="to_datetime_select_tag" ilk="function" />
            <scope name="to_datetime_select_tag_without_error_wrapping" ilk="function" />
            <scope name="to_input_field_tag" ilk="function" />
            <scope name="to_radio_button_tag" ilk="function" />
            <scope name="to_select_tag" ilk="function" />
            <scope name="to_tag" ilk="function" />
            <scope name="to_text_area_tag" ilk="function" />
            <scope name="to_time_zone_select_tag" ilk="function" />
            <scope name="value" ilk="function" />
            <scope name="value_before_type_cast" ilk="function" />
            <import symbol="ActionView::Helpers::DateHelper" />
            <import symbol="ActionView::Helpers::FormOptionsHelper" />
            <import symbol="ActionView::Helpers::TagHelper" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="ERB::Util" />
            <variable name="COUNTRIES" citdl="Array" attributes="__const__" />
            <variable name="DEFAULT_DATE_OPTIONS" citdl="Hash" attributes="__const__" />
            <variable name="DEFAULT_FIELD_OPTIONS" citdl="Hash" attributes="__const__" />
            <variable name="DEFAULT_PREFIX" citdl="String" attributes="__const__" />
            <variable name="DEFAULT_RADIO_OPTIONS" citdl="Hash" attributes="__const__" />
            <variable name="DEFAULT_TEXT_AREA_OPTIONS" citdl="Hash" attributes="__const__" />
          </scope>
          <scope name="JavaScriptCollectionProxy" classrefs="ActionView::Helpers::JavaScriptProxy" ilk="class">
            <scope name="arguments_for_call" ilk="function" />
            <scope name="generator" ilk="function" />
            <scope name="grep" ilk="function" />
            <scope name="inject" ilk="function" />
            <scope name="pluck" ilk="function" />
            <scope name="zip" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="ENUMERABLE_METHODS" citdl="Array" attributes="__const__" />
            <variable name="ENUMERABLE_METHODS_WITH_RETURN" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="JavaScriptElementCollectionProxy" classrefs="ActionView::Helpers::JavaScriptCollectionProxy" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="ENUMERABLE_METHODS" citdl="Array" attributes="__const__" />
            <variable name="ENUMERABLE_METHODS_WITH_RETURN" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="JavaScriptElementProxy" classrefs="ActionView::Helpers::JavaScriptProxy" ilk="class">
            <scope name="reload" ilk="function" />
            <scope name="replace" ilk="function" />
            <scope name="replace_html" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="JavaScriptHelper" ilk="namespace">
            <scope name="array_or_string_for_javascript" signature="(option)" ilk="function" />
            <scope name="button_to_function" signature="(name, *args, &amp;block)" doc="Returns a button that&apos;ll trigger a JavaScript function using&#xA;the onclick handler.The function&lt;/tt&gt; argument can be&#xA;omitted in favor of an &lt;tt&gt;update_page block, which&#xA;evaluates to a string when the template is rendered (instead&#xA;of making an Ajax request first).Examples:  button_to_function &quot;Greeting&quot;, &quot;alert(&apos;Hello world!&apos;)&quot;&#xA;" ilk="function" />
            <scope name="define_javascript_functions" signature="()" doc="Includes the Action Pack JavaScript libraries inside a&#xA;single &lt;script&gt; tag. The function first includes&#xA;prototype.js and then its core extensions, (determined by&#xA;filenames starting with &quot;prototype&quot;).&#xA;Afterwards, any additional scripts will be included in&#xA;undefined order." ilk="function" />
            <scope name="escape_javascript" signature="(javascript)" doc="Escape carrier returns and single and double quotes for&#xA;JavaScript segments." ilk="function" />
            <scope name="javascript_cdata_section" ilk="function" />
            <scope name="javascript_tag" signature="(content, html_options = {})" doc="Returns a JavaScript tag with the content inside. Example:&#xA;  javascript_tag &quot;alert(&apos;All is good&apos;)&quot;Returns:&#xA;  &lt;script type=&quot;text/javascript&quot;&gt;  //&lt;![CDATA[&#xA;  alert(&apos;All is good&apos;)  //]]&gt;  &lt;/script&gt;html_options may be a hash of attributes for the &lt;script&gt; tag. Example:&#xA;  javascript_tag &quot;alert(&apos;All is&#xA;good&apos;)&quot;, :defer =&gt; &apos;true&apos; # =&gt; &lt;script&#xA;defer=&quot;true&quot; type=&quot;text/javascript&quot;&gt;alert(&apos;All is good&apos;)&lt;/script&gt;&#xA;" ilk="function" />
            <scope name="link_to_function" signature="(name, *args, &amp;block)" doc="Returns a link that will trigger a JavaScript function using&#xA;the onclick handler and return false after the fact.&#xA;The function&lt;/tt&gt; argument can be omitted in favor of&#xA;an &lt;tt&gt;update_page block, which evaluates to a string when&#xA;the template is rendered (instead of making an Ajax request&#xA;first)." ilk="function" />
            <scope name="options_for_javascript" signature="(options)" ilk="function" />
            <variable name="JAVASCRIPT_PATH" citdl="String" attributes="__const__" />
          </scope>
          <scope name="JavaScriptMacrosHelper" ilk="namespace">
            <scope name="auto_complete_field" signature="(field_id, options = {})" ilk="function" />
            <scope name="auto_complete_result" signature="(entries, field, phrase = nil)" doc="DEPRECATION WARNING: This method will become a separate&#xA;plugin when Rails 2.0 ships.Use this method in your view to&#xA;generate a return for the AJAX autocomplete requests.&#xA;Example action:  def auto_complete_for_item_title    @items = Item.find(:all,&#xA;      :conditions =&gt; [ &apos;LOWER(description) LIKE ?&apos;,&#xA;      &apos;%&apos; + request.raw_post.downcase + &apos;%&apos; ])" ilk="function" />
            <scope name="in_place_editor" signature="(field_id, options = {})" ilk="function" />
            <scope name="in_place_editor_field" signature="(object, method, tag_options = {}, in_place_editor_options = {})" doc="DEPRECATION WARNING: This method will become a separate&#xA;plugin when Rails 2.0 ships.Renders the value of the&#xA;specified object and method with in-place editing&#xA;capabilities.See the RDoc on&#xA;ActionController::InPlaceEditing to learn more about this." ilk="function" />
            <scope name="text_field_with_auto_complete" signature="(object, method, tag_options = {}, completion_options = {})" doc="DEPRECATION WARNING: This method will become a separate&#xA;plugin when Rails 2.0 ships.Wrapper for text_field with&#xA;added AJAX autocompletion functionality.In your&#xA;controller, you&apos;ll need to define an action called&#xA;auto_complete_for to respond the AJAX calls,See the RDoc on&#xA;ActionController::Macros::AutoComplete to learn more about&#xA;this." ilk="function" />
          </scope>
          <scope name="JavaScriptProxy" classrefs="Builder::BlankSlate" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="JavaScriptVariableProxy" classrefs="ActionView::Helpers::JavaScriptProxy" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="NumberHelper" ilk="namespace">
            <scope name="human_size" signature="(size, precision=1)" doc="Alias for #number_to_human_size" ilk="function" />
            <scope name="number_to_currency" signature="(number, options = {})" ilk="function" />
            <scope name="number_to_human_size" signature="(size, precision=1)" doc="Formats the bytes in size&lt;/tt&gt; into a more understandable&#xA;representation. Useful for reporting file sizes to users.&#xA;This method returns nil if &lt;tt&gt;size&lt;/tt&gt; cannot be converted&#xA;into a number. You can change the default precision of 1&#xA;in &lt;tt&gt;precision. number_to_human_size(123)           =&gt; 123 Bytes&#xA;" ilk="function" />
            <scope name="number_to_percentage" signature="(number, options = {})" ilk="function" />
            <scope name="number_to_phone" signature="(number, options = {})" ilk="function" />
            <scope name="number_with_delimiter" signature="(number, delimiter=&quot;,&quot;, separator=&quot;.&quot;)" ilk="function" />
            <scope name="number_with_precision" signature="(number, precision=3)" doc="Formats a number&lt;/tt&gt; with the specified level&#xA;of &lt;tt&gt;precision. The default level of precision is 3.&#xA; number_with_precision(111.2345)    =&gt; 111.235 number_with_precision(111.2345, 2) =&gt; 111.24&#xA;" ilk="function" />
          </scope>
          <scope name="PaginationHelper" ilk="namespace">
            <scope name="pagination_links" signature="(paginator, options={}, html_options={})" ilk="function" />
            <scope name="pagination_links_each" signature="(paginator, options) {|first.number| ...}" doc="Iterate through the pages of a given paginator, invoking a&#xA;block for each page number that needs to be rendered as a&#xA;link." ilk="function" />
            <variable name="DEFAULT_OPTIONS" citdl="Hash" attributes="__const__" />
          </scope>
          <scope name="PrototypeHelper" ilk="namespace">
            <scope name="JavaScriptGenerator" classrefs="Object" ilk="class">
              <scope name="GeneratorMethods" ilk="namespace">
                <scope name="&lt;&lt;" signature="(javascript)" doc="Writes raw JavaScript to the page." ilk="function" />
                <scope name="[]" signature="(id)" doc="Returns a element reference by finding it through id in the&#xA;DOM. This element can then be used for further method calls.&#xA;Examples:  page[&apos;blank_slate&apos;]                  # =&gt; $(&apos;blank_slate&apos;);&#xA;  page[&apos;blank_slate&apos;].show             # =&gt; $(&apos;blank_slate&apos;).show();&#xA;  page[&apos;blank_slate&apos;].show(&apos;first&apos;).up # =&gt; $(&apos;blank_slate&apos;).show(&apos;first&apos;).up();&#xA;" ilk="function" />
                <scope name="alert" signature="(message)" doc="Displays an alert dialog with the given message." ilk="function" />
                <scope name="assign" signature="(variable, value)" doc="Assigns the JavaScript variable&lt;/tt&gt; the given &lt;tt&gt;value." ilk="function" />
                <scope name="call" signature="(function, *arguments, &amp;block)" doc="Calls the JavaScript function&lt;/tt&gt;, optionally with the&#xA;given &lt;tt&gt;arguments.If a block is given, the block will be&#xA;passed to a new JavaScriptGenerator; the resulting&#xA;JavaScript code will then be wrapped inside&#xA;function() { ... } and passed as the called function&apos;s final&#xA;argument." ilk="function" />
                <scope name="delay" signature="(seconds = 1) {|| ...}" doc="Executes the content of the block after a delay of seconds.&#xA;Example:  page.delay(20) do    page.visual_effect :fade, &apos;notice&apos;&#xA;  end" ilk="function" />
                <scope name="draggable" signature="(id, options = {})" doc="Creates a script.aculo.us draggable element. See&#xA;ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" />
                <scope name="drop_receiving" signature="(id, options = {})" doc="Creates a script.aculo.us drop receiving element. See&#xA;ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" />
                <scope name="hide" signature="(*ids)" doc="Hides the visible DOM elements with the given ids." ilk="function" />
                <scope name="insert_html" signature="(position, id, *options_for_render)" ilk="function" />
                <scope name="redirect_to" signature="(location)" doc="Redirects the browser to the given location&lt;/tt&gt;, in the&#xA;same form as &lt;tt&gt;url_for." ilk="function" />
                <scope name="remove" signature="(*ids)" doc="Removes the DOM elements with the given ids from the page." ilk="function" />
                <scope name="replace" signature="(id, *options_for_render)" doc="Replaces the &quot;outer HTML&quot; (i.e., the entire&#xA;element, not just its contents) of the DOM element with the&#xA;given id.options_for_render may be either a string of HTML&#xA;to insert, or a hash of options to be passed to&#xA;ActionView::Base#render. For example:  # Replace the DOM&#xA;element having ID &apos;person-45&apos; with the" ilk="function" />
                <scope name="replace_html" signature="(id, *options_for_render)" doc="Replaces the inner HTML of the DOM element with the given&#xA;id.options_for_render may be either a string of HTML to&#xA;insert, or a hash of options to be passed to&#xA;ActionView::Base#render. For example:  # Replace the HTML of&#xA;the DOM element having ID &apos;person-45&apos; with the  # &apos;person&apos; partial for the appropriate object.&#xA;" ilk="function" />
                <scope name="select" signature="(pattern)" doc="Returns a collection reference by finding it through a CSS&#xA;pattern in the DOM. This collection can then be used for&#xA;further method calls. Examples:  page.select(&apos;p&apos;)                      # =&gt; $$(&apos;p&apos;);&#xA;  page.select(&apos;p.welcome&#xA;b&apos;).first      # =&gt; $$(&apos;p.welcome b&apos;).first();  page.select(&apos;p.welcome b&apos;).first.hide # =&gt; $$(&apos;p.welcome b&apos;).first().hide();&#xA;" ilk="function" />
                <scope name="show" signature="(*ids)" doc="Shows hidden DOM elements with the given ids." ilk="function" />
                <scope name="sortable" signature="(id, options = {})" doc="Creates a script.aculo.us sortable element. Useful to&#xA;recreate sortable elements after items get added or deleted.&#xA;See ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" />
                <scope name="toggle" signature="(*ids)" doc="Toggles the visibility of the DOM elements with the given&#xA;ids." ilk="function" />
                <scope name="visual_effect" signature="(name, id = nil, options = {})" doc="Starts a script.aculo.us visual effect. See&#xA;ActionView::Helpers::ScriptaculousHelper for more&#xA;information." ilk="function" />
              </scope>
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="build_callbacks" signature="(options)" ilk="function" />
            <scope name="build_observer" signature="(klass, name, options = {})" ilk="function" />
            <scope name="evaluate_remote_response" signature="()" doc="Returns &apos;eval(request.responseText)&apos; which is the JavaScript&#xA;function that form_remote_tag can call in :complete to&#xA;evaluate a multiple update return document using&#xA;update_element_function calls." ilk="function" />
            <scope name="form_remote_for" signature="(object_name, *args, &amp;proc)" doc="Alias for #remote_form_for" ilk="function" />
            <scope name="form_remote_tag" signature="(options = {}, &amp;block)" doc="Returns a form tag that will submit using XMLHttpRequest in&#xA;the background instead of the regular reloading POST&#xA;arrangement. Even though it&apos;s using JavaScript to serialize&#xA;the form elements, the form submission will work just like a&#xA;regular submission as viewed by the receiving side (all&#xA;elements available in params). The options for specifying&#xA;the target with :url and defining callbacks is the same as&#xA;link_to_remote." ilk="function" />
            <scope name="link_to_remote" signature="(name, options = {}, html_options = {})" ilk="function" />
            <scope name="method_option_to_s" signature="(method)" ilk="function" />
            <scope name="observe_field" signature="(field_id, options = {})" ilk="function" />
            <scope name="observe_form" signature="(form_id, options = {})" doc="Like observe_field&lt;/tt&gt;, but operates on an entire form&#xA;identified by the DOM&#xA;ID &lt;tt&gt;form_id&lt;/tt&gt;. &lt;tt&gt;options&lt;/tt&gt; are the same&#xA;as &lt;tt&gt;observe_field&lt;/tt&gt;, except the default value of&#xA;the &lt;tt&gt;:with option evaluates to the serialized (request&#xA;string) value of the form." ilk="function" />
            <scope name="options_for_ajax" signature="(options)" ilk="function" />
            <scope name="periodically_call_remote" signature="(options = {})" doc="Periodically calls the specified&#xA;url (options[:url]&lt;/tt&gt;) every &lt;tt&gt;options[:frequency]&lt;/tt&gt; seconds (default is 10). Usually used to update a specified div (&lt;tt&gt;options[:update]) with the results of the remote call. The options for specifying the target with :url and defining callbacks is the same as link_to_remote.&#xA;" ilk="function" />
            <scope name="remote_form_for" signature="(object_name, *args, &amp;proc)" doc="Works like form_remote_tag, but uses form_for semantics." ilk="function" />
            <scope name="remote_function" signature="(options)" doc="Returns the JavaScript needed for a remote function. Takes&#xA;the same arguments as link_to_remote.Example:  &lt;select&#xA;id=&quot;options&quot; onchange=&quot;&lt;%= remote_function(:update =&gt; &quot;options&quot;,&#xA;      :url =&gt; { :action =&gt; :update_options }) %&gt;&quot;&gt;&#xA;    &lt;option value=&quot;0&quot;&gt;Hello&lt;/option&gt;&#xA;    &lt;option value=&quot;1&quot;&gt;World&lt;/option&gt;" ilk="function" />
            <scope name="submit_to_remote" signature="(name, value, options = {})" doc="Returns a button input tag that will submit form using&#xA;XMLHttpRequest in the background instead of regular&#xA;reloading POST arrangement. options&lt;/tt&gt; argument is the&#xA;same as in &lt;tt&gt;form_remote_tag." ilk="function" />
            <scope name="update_element_function" signature="(element_id, options = {}, &amp;block)" ilk="function" />
            <scope name="update_page" signature="(&amp;block)" doc="Yields a JavaScriptGenerator and returns the generated&#xA;JavaScript code. Use this to update multiple elements on a&#xA;page in an Ajax response. See JavaScriptGenerator for more&#xA;information." ilk="function" />
            <scope name="update_page_tag" signature="(html_options = {}, &amp;block)" doc="Works like update_page but wraps the generated JavaScript in&#xA;a &lt;script&gt; tag. Use this to include generated&#xA;JavaScript in an ERb template. See JavaScriptGenerator for&#xA;more information.html_options may be a hash&#xA;of &lt;script&gt; attributes to be passed to&#xA;ActionView::Helpers::JavaScriptHelper#javascript_tag." ilk="function" />
            <variable name="AJAX_OPTIONS" citdl="Set" attributes="__const__" />
            <variable name="CALLBACKS" citdl="Set" attributes="__const__" />
          </scope>
          <scope name="ScriptaculousHelper" ilk="namespace">
            <scope name="draggable_element" signature="(element_id, options = {})" doc="Makes the element with the DOM ID specified by element_id&#xA;draggable.Example:  &lt;%= draggable_element(&quot;my_image&quot;, :revert =&gt; true)&#xA;You can change the behaviour with various options, see&#xA;http://script.aculo.us for more documentation." ilk="function" />
            <scope name="draggable_element_js" ilk="function" />
            <scope name="drop_receiving_element" signature="(element_id, options = {})" doc="Makes the element with the DOM ID specified by element_id&#xA;receive dropped draggable elements (created by&#xA;draggable_element). and make an AJAX call By default, the&#xA;action called gets the DOM ID of the element as parameter.&#xA;Example:  &lt;%= drop_receiving_element(&quot;my_cart&quot;, :url =&gt;&#xA;" ilk="function" />
            <scope name="drop_receiving_element_js" ilk="function" />
            <scope name="sortable_element" signature="(element_id, options = {})" doc="Makes the element with the DOM ID specified by element_id&#xA;sortable by drag-and-drop and make an Ajax call whenever the&#xA;sort order has changed. By default, the action called gets&#xA;the serialized sortable element as parameters.Example:&#xA;  &lt;%= sortable_element(&quot;my_list&quot;, :url =&gt; { :action =&gt; &quot;order&quot; }) %&gt;&#xA;" ilk="function" />
            <scope name="sortable_element_js" ilk="function" />
            <scope name="visual_effect" signature="(name, element_id = false, js_options = {})" doc="Returns a JavaScript snippet to be used on the Ajax&#xA;callbacks for starting visual effects.Example:  &lt;%= link_to_remote &quot;Reload&quot;, :update =&gt; &quot;posts&quot;,&#xA;        :url =&gt; { :action =&gt; &quot;reload&quot; },&#xA;        :complete =&gt; visual_effect(:highlight, &quot;posts&quot;, :duration =&gt; 0.5)&#xA;If no element_id is given, it&#xA;assumes &quot;element&quot; which should be a local variable&#xA;in the generated JavaScript execution context. This can be&#xA;used for example with drop_receiving_element:" ilk="function" />
            <variable name="TOGGLE_EFFECTS" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="TagHelper" ilk="namespace">
            <scope name="cdata_section" signature="(content)" doc="Returns a CDATA section with the given content&lt;/tt&gt;. CDATA&#xA;sections are used to escape blocks of text containing&#xA;characters which would otherwise be recognized as markup.&#xA;CDATA sections begin with the&#xA;string &lt;tt&gt;&lt;![CDATA[&lt;/tt&gt; and end with (and may not&#xA;contain) the string &lt;tt&gt;]]&gt;." ilk="function" />
            <scope name="content_tag" signature="(name, content_or_options_with_block = nil, options = nil, &amp;block)" doc="Returns an HTML block tag of type name&lt;/tt&gt; surrounding&#xA;the &lt;tt&gt;content&lt;/tt&gt;. Add HTML attributes by passing an&#xA;attributes hash to &lt;tt&gt;options&lt;/tt&gt;. For attributes with no&#xA;value like (disabled and readonly), give it a value of true&#xA;in the &lt;tt&gt;options hash. You can use symbols or strings for&#xA;the attribute names." ilk="function" />
            <scope name="tag" signature="(name, options = nil, open = false)" doc="Returns an empty HTML tag of type name&lt;/tt&gt; which by default&#xA;is XHTML compliant. Setting &lt;tt&gt;open&lt;/tt&gt; to true will&#xA;create an open tag compatible with HTML 4.0 and below. Add&#xA;HTML attributes by passing an attributes hash&#xA;to &lt;tt&gt;options&lt;/tt&gt;. For attributes with no value&#xA;like (disabled and readonly), give it a value of true in&#xA;the &lt;tt&gt;options hash. You can use symbols or strings for the&#xA;attribute names." ilk="function" />
            <import symbol="ERB::Util" />
          </scope>
          <scope name="TextHelper" ilk="namespace">
            <scope name="Cycle" classrefs="Object" ilk="class">
              <scope name="reset" ilk="function" />
              <scope name="values" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="auto_link" signature="(text, link = :all, href_options = {}, &amp;block)" doc="Turns all urls and email addresses into clickable links. The&#xA;link&lt;/tt&gt; parameter will limit what should be linked. You&#xA;can add html attributes to the links&#xA;using &lt;tt&gt;href_options&lt;/tt&gt;. Options&#xA;for &lt;tt&gt;link&lt;/tt&gt; are &lt;tt&gt;:all&lt;/tt&gt; (default), &lt;tt&gt;:email_addresses&lt;/tt&gt;, and &lt;tt&gt;:urls.&#xA;" ilk="function" />
            <scope name="concat" signature="(string, binding)" doc="The preferred method of outputting text in your views is to&#xA;use the &lt;%= &quot;text&quot; %&gt; eRuby syntax. The&#xA;regular &lt;em&gt;puts&lt;/em&gt; and &lt;em&gt;print&lt;/em&gt; methods do not&#xA;operate as expected in an eRuby code block. If you&#xA;absolutely must output text within a code block, you can use&#xA;the concat method." ilk="function" />
            <scope name="cycle" signature="(first_value, *values)" doc="Creates a Cycle object whose &lt;em&gt;to_s&lt;/em&gt; method cycles&#xA;through elements of an array every time it is called. This&#xA;can be used for example, to alternate classes for table&#xA;rows:  &lt;% @items.each do |item| %&gt;    &lt;tr&#xA;class=&quot;&lt;%= cycle(&quot;even&quot;, &quot;odd&quot;) -%&gt;&quot;&gt;&#xA;" ilk="function" />
            <scope name="excerpt" signature="(text, phrase, radius = 100, excerpt_string = &quot;...&quot;)" doc="Extracts an excerpt from text&lt;/tt&gt; that matches the first&#xA;instance of &lt;tt&gt;phrase&lt;/tt&gt;. The &lt;tt&gt;radius&lt;/tt&gt; expands the&#xA;excerpt on each side of &lt;tt&gt;phrase&lt;/tt&gt; by the number of&#xA;characters defined in &lt;tt&gt;radius&lt;/tt&gt;. If the excerpt radius&#xA;overflows the beginning or end of the &lt;tt&gt;text&lt;/tt&gt;, then&#xA;the &lt;tt&gt;excerpt_string&lt;/tt&gt; will be prepended/appended&#xA;accordingly. If the &lt;tt&gt;phrase isn&apos;t found, nil is returned." ilk="function" />
            <scope name="highlight" signature="(text, phrase, highlighter = &apos;&lt;strong class=&quot;highlight&quot;&gt;\1&lt;/strong&gt;&apos;)" doc="Highlights phrase&lt;/tt&gt; everywhere it is found&#xA;in &lt;tt&gt;text&lt;/tt&gt; by inserting it into&#xA;a &lt;tt&gt;highlighter&lt;/tt&gt; string. The highlighter can be&#xA;specialized by passing &lt;tt&gt;highlighter as a single-quoted&#xA;string with \1 where the phrase is to be inserted.&#xA;  highlight(&apos;You searched for: rails&apos;, &apos;rails&apos;)" ilk="function" />
            <scope name="pluralize" signature="(count, singular, plural = nil)" doc="Attempts to pluralize the singular&lt;/tt&gt; word&#xA;unless &lt;tt&gt;count&lt;/tt&gt; is 1. If &lt;tt&gt;plural&lt;/tt&gt; is&#xA;supplied, it will use that when count is &gt; 1, if the&#xA;ActiveSupport Inflector is loaded, it will use the Inflector&#xA;to determine the plural form, otherwise it will just add&#xA;an &apos;s&apos; to the &lt;tt&gt;singular word." ilk="function" />
            <scope name="reset_cycle" signature="(name = &quot;default&quot;)" doc="Resets a cycle so that it starts from the first element the&#xA;next time it is called. Pass in name to reset a named cycle." ilk="function" />
            <scope name="sanitize" signature="(html)" doc="Sanitizes the html by&#xA;converting &lt;form&gt; and &lt;script&gt; tags into regular&#xA;text, and removing all &quot;onxxx&quot; attributes (so that&#xA;arbitrary Javascript cannot be executed). It also removes&#xA;href= and src= attributes that start&#xA;with &quot;javascript:&quot;. You can modify what gets&#xA;sanitized by defining VERBOTEN_TAGS and VERBOTEN_ATTRS&#xA;before this Module is loaded." ilk="function" />
            <scope name="simple_format" signature="(text)" doc="Returns text&lt;/tt&gt; transformed into HTML using simple&#xA;formatting rules. Two or more consecutive&#xA;newlines(&lt;tt&gt;&#xA;&#xA;&lt;/tt&gt;) are considered as a paragraph and&#xA;wrapped in &lt;tt&gt;&lt;p&gt;&lt;/tt&gt; tags. One&#xA;newline (&lt;tt&gt;&#xA;&lt;/tt&gt;) is considered as a linebreak and&#xA;a &lt;tt&gt;&lt;br /&gt;&lt;/tt&gt; tag is appended. This method does&#xA;not remove the newlines from the &lt;tt&gt;text." ilk="function" />
            <scope name="strip_links" signature="(text)" doc="Strips link tags from text leaving just the link label.&#xA;  strip_links(&apos;&lt;a&#xA;href=&quot;http://www.rubyonrails.org&quot;&gt;Ruby on&#xA;Rails&lt;/a&gt;&apos;)   =&gt; Ruby on Rails" ilk="function" />
            <scope name="strip_tags" signature="(html)" doc="Strips all HTML tags from the html, including comments. This&#xA;uses the html-scanner tokenizer and so its HTML parsing&#xA;ability is limited by that of html-scanner." ilk="function" />
            <scope name="truncate" signature="(text, length = 30, truncate_string = &quot;...&quot;)" doc="If text&lt;/tt&gt; is longer&#xA;than &lt;tt&gt;length&lt;/tt&gt;, &lt;tt&gt;text&lt;/tt&gt; will be truncated to the&#xA;length of &lt;tt&gt;length&lt;/tt&gt; and the last three characters will&#xA;be replaced with the &lt;tt&gt;truncate_string.  truncate(&quot;Once upon a time in a world far far away&quot;, 14)&#xA;   =&gt; Once upon a..." ilk="function" />
            <scope name="word_wrap" signature="(text, line_width = 80)" doc="Wraps the text&lt;/tt&gt; into lines no longer&#xA;than &lt;tt&gt;line_width&lt;/tt&gt; width. This method breaks on the&#xA;first whitespace character that does not&#xA;exceed &lt;tt&gt;line_width.  word_wrap(&apos;Once upon a time&apos;, 4)&#xA;   =&gt; Once&#xA;upon&#xA;a&#xA;time" ilk="function" />
            <variable name="AUTO_LINK_RE" citdl="Regexp" attributes="__const__" />
            <variable name="VERBOTEN_ATTRS" citdl="Regexp" attributes="__const__" />
            <variable name="VERBOTEN_TAGS" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="UrlHelper" ilk="namespace">
            <scope name="button_to" signature="(name, options = {}, html_options = {})" doc="Generates a form containing a single button that submits to&#xA;the URL created by the set of options&lt;/tt&gt;. This is the&#xA;safest method to ensure links that cause changes to your&#xA;data are not triggered by search bots or accelerators. If&#xA;the HTML button does not work with your layout, you can also&#xA;consider using the link_to method with the &lt;tt&gt;:method&#xA;modifier as described in the link_to documentation." ilk="function" />
            <scope name="current_page?" signature="(options)" doc="True if the current request uri was generated by the given&#xA;options." ilk="function" />
            <scope name="link_image_to" signature="(src, options = {}, html_options = {}, *parameters_for_method_reference)" doc="DEPRECATED. It is reccommended to use the&#xA;AssetTagHelper::image_tag within a link_to method to&#xA;generate a linked image.  link_to(image_tag(&quot;rss&quot;, :size =&gt; &quot;30x45&quot;, :border =&gt; 0), &quot;http://www.example.com&quot;)&#xA;" ilk="function" />
            <scope name="link_to" signature="(name, options = {}, html_options = nil, *parameters_for_method_reference)" ilk="function" />
            <scope name="link_to_if" signature="(condition, name, options = {}, html_options = {}, *parameters_for_method_reference, &amp;block)" doc="Creates a link tag of the given name&lt;/tt&gt; using a URL&#xA;created by the set of &lt;tt&gt;options&lt;/tt&gt; if &lt;tt&gt;condition is&#xA;true, in which case only the name is returned. To specialize&#xA;the default behavior, you can pass a block that accepts the&#xA;name or the full argument list for link_to_unless (see the&#xA;examples in link_to_unless)." ilk="function" />
            <scope name="link_to_image" signature="(src, options = {}, html_options = {}, *parameters_for_method_reference)" doc="Alias for #link_image_to" ilk="function" />
            <scope name="link_to_unless" signature="(condition, name, options = {}, html_options = {}, *parameters_for_method_reference, &amp;block) {|name| ...}" doc="Creates a link tag of the given name&lt;/tt&gt; using a URL&#xA;created by the set of &lt;tt&gt;options&lt;/tt&gt; unless &lt;tt&gt;condition&#xA;is true, in which case only the name is returned. To&#xA;specialize the default behavior, you can pass a block that&#xA;accepts the name or the full argument list for&#xA;link_to_unless (see the example)." ilk="function" />
            <scope name="link_to_unless_current" signature="(name, options = {}, html_options = {}, *parameters_for_method_reference, &amp;block)" doc="Creates a link tag of the given name&lt;/tt&gt; using a URL&#xA;created by the set of &lt;tt&gt;options unless the current request&#xA;uri is the same as the links, in which case only the name is&#xA;returned (or the given block is yielded, if one exists).&#xA;Refer to the documentation for link_to_unless for block&#xA;usage." ilk="function" />
            <scope name="mail_to" signature="(email_address, name = nil, html_options = {})" ilk="function" />
            <scope name="url_for" signature="(options = {}, *parameters_for_method_reference)" doc="Returns the URL for the set of options provided. This takes&#xA;the same options as url_for in action controller. For a&#xA;list, see the documentation for&#xA;ActionController::Base#url_for. Note that it&apos;ll&#xA;set :only_path =&gt; true so you&apos;ll get the&#xA;relative /controller/action instead of the fully qualified&#xA;http://example.com/controller/action." ilk="function" />
            <import symbol="ActionView::Helpers::JavaScriptHelper" />
            <variable name="JAVASCRIPT_PATH" citdl="String" attributes="__const__" />
          </scope>
        </scope>
        <scope name="Partials" ilk="namespace">
          <scope name="render_collection_of_partials" ilk="function" />
          <scope name="render_partial" ilk="function" />
          <scope name="render_partial_collection" ilk="function" />
        </scope>
        <scope name="TemplateError" classrefs="ActionView::ActionViewError" ilk="class">
          <scope name="file_name" ilk="function" />
          <scope name="line_number" ilk="function" />
          <scope name="original_exception" ilk="function" />
          <scope name="source_extract" ilk="function" />
          <scope name="sub_template_message" ilk="function" />
          <scope name="sub_template_of" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="SOURCE_CODE_RADIUS" citdl="Fixnum" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
      </scope>
      <scope name="ActionWebService" ilk="namespace">
        <scope name="ActionWebServiceError" classrefs="StandardError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="API" ilk="namespace">
          <scope name="Base" classrefs="Object" ilk="class">
            <scope name="Subclasses" ilk="namespace">
              <scope name="included" attributes="__classmethod__" ilk="function" />
              <scope name="included" ilk="function" />
            </scope>
            <scope name="allow_active_record_expects" attributes="__classmethod__" ilk="function" />
            <scope name="allow_active_record_expects=" attributes="__classmethod__" ilk="function" />
            <scope name="api_method" attributes="__classmethod__" ilk="function" />
            <scope name="api_method_instance" attributes="__classmethod__" ilk="function" />
            <scope name="api_method_name" attributes="__classmethod__" ilk="function" />
            <scope name="api_methods" attributes="__classmethod__" ilk="function" />
            <scope name="default_api_method" attributes="__classmethod__" ilk="function" />
            <scope name="default_api_method=" attributes="__classmethod__" ilk="function" />
            <scope name="default_api_method_instance" attributes="__classmethod__" ilk="function" />
            <scope name="has_api_method?" attributes="__classmethod__" ilk="function" />
            <scope name="has_public_api_method?" attributes="__classmethod__" ilk="function" />
            <scope name="inflect_names" attributes="__classmethod__" ilk="function" />
            <scope name="inflect_names=" attributes="__classmethod__" ilk="function" />
            <scope name="public_api_method_instance" attributes="__classmethod__" ilk="function" />
            <scope name="public_api_method_name" attributes="__classmethod__" ilk="function" />
            <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
            <scope name="soap_client" attributes="__classmethod__" ilk="function" />
            <scope name="xmlrpc_client" attributes="__classmethod__" ilk="function" />
            <scope name="allow_active_record_expects" ilk="function" />
            <scope name="allow_active_record_expects=" ilk="function" />
            <scope name="default_api_method" ilk="function" />
            <scope name="default_api_method=" ilk="function" />
            <scope name="inflect_names" ilk="function" />
            <scope name="inflect_names=" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Reloadable" />
            <import symbol="Reloadable::Subclasses" />
          </scope>
          <scope name="Method" classrefs="Object" ilk="class">
            <scope name="[]" signature="(sig_type)" doc="Backwards compatibility with previous API" ilk="function" />
            <scope name="cast_expects" signature="(params)" doc="Casts a set of Ruby values into the expected Ruby values" ilk="function" />
            <scope name="cast_returns" signature="(return_value)" doc="Cast a Ruby return value into the expected Ruby value" ilk="function" />
            <scope name="expects" ilk="function" />
            <scope name="expects_index_of" signature="(param_name)" doc="Returns the index of the first expected parameter with the&#xA;given name" ilk="function" />
            <scope name="expects_to_hash" signature="(params)" doc="Returns a hash keyed by parameter name for the given&#xA;parameter list" ilk="function" />
            <scope name="param_names" signature="()" doc="The list of parameter names for this method" ilk="function" />
            <scope name="public_name" ilk="function" />
            <scope name="returns" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
        </scope>
        <scope name="ArrayType" classrefs="ActionWebService::BaseType" ilk="class">
          <scope name="element_type" ilk="function" />
          <import symbol="ActionWebService::SignatureTypes" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="Base" classrefs="Object" ilk="class">
          <scope name="ContainerError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="add_web_service_api_callback" attributes="__classmethod__" ilk="function" />
          <scope name="add_web_service_definition_callback" attributes="__classmethod__" ilk="function" />
          <scope name="after_invocation" attributes="__classmethod__" ilk="function" />
          <scope name="after_invocation_interceptors" attributes="__classmethod__" ilk="function" />
          <scope name="append_after_invocation" attributes="__classmethod__" ilk="function" />
          <scope name="append_before_invocation" attributes="__classmethod__" ilk="function" />
          <scope name="before_invocation" attributes="__classmethod__" ilk="function" />
          <scope name="before_invocation_interceptors" attributes="__classmethod__" ilk="function" />
          <scope name="excluded_intercepted_methods" attributes="__classmethod__" ilk="function" />
          <scope name="has_web_service?" attributes="__classmethod__" ilk="function" />
          <scope name="included_intercepted_methods" attributes="__classmethod__" ilk="function" />
          <scope name="inherited_with_action_controller" attributes="__classmethod__" ilk="function" />
          <scope name="prepend_after_invocation" attributes="__classmethod__" ilk="function" />
          <scope name="prepend_before_invocation" attributes="__classmethod__" ilk="function" />
          <scope name="register_protocol" attributes="__classmethod__" ilk="function" />
          <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
          <scope name="require_web_service_api" attributes="__classmethod__" ilk="function" />
          <scope name="web_client_api" attributes="__classmethod__" ilk="function" />
          <scope name="web_service" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_api" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_api_with_require" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_exception_reporting" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_exception_reporting=" attributes="__classmethod__" ilk="function" />
          <scope name="web_service_scaffold" attributes="__classmethod__" ilk="function" />
          <scope name="web_services" attributes="__classmethod__" ilk="function" />
          <scope name="after_invocation" ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="before_invocation" ilk="function" />
          <scope name="perform_invocation" ilk="function" />
          <scope name="perform_invocation_with_interception" ilk="function" />
          <scope name="perform_invocation_without_interception" ilk="function" />
          <scope name="web_service_exception_reporting" ilk="function" />
          <scope name="web_service_exception_reporting=" ilk="function" />
          <scope name="web_service_object" ilk="function" />
          <import symbol="ActionWebService::Container::Direct" />
          <import symbol="ActionWebService::Invocation" />
          <import symbol="ActionWebService::Invocation::InstanceMethods" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
        </scope>
        <scope name="Base64" classrefs="String" ilk="class">
          <import symbol="ActiveSupport::CoreExtensions::String::Access" />
          <import symbol="ActiveSupport::CoreExtensions::String::Conversions" />
          <import symbol="ActiveSupport::CoreExtensions::String::Inflections" />
          <import symbol="ActiveSupport::CoreExtensions::String::Iterators" />
          <import symbol="ActiveSupport::CoreExtensions::String::StartsEndsWith" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Comparable" />
          <import symbol="Enumerable" />
        </scope>
        <scope name="BaseType" classrefs="Object" ilk="class">
          <scope name="array?" ilk="function" />
          <scope name="custom?" ilk="function" />
          <scope name="human_name" ilk="function" />
          <scope name="spec" ilk="function" />
          <scope name="structured?" ilk="function" />
          <scope name="type_class" ilk="function" />
          <import symbol="ActionWebService::SignatureTypes" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="Casting" ilk="namespace">
          <scope name="BaseCaster" classrefs="Object" ilk="class">
            <scope name="cast" attributes="__classmethod__" ilk="function" />
            <scope name="cast_base_type" attributes="__classmethod__" ilk="function" />
            <scope name="cast_expects" attributes="__classmethod__" ilk="function" />
            <scope name="cast_returns" attributes="__classmethod__" ilk="function" />
            <scope name="cast_to_structured_type" attributes="__classmethod__" ilk="function" />
            <scope name="cast_expects" ilk="function" />
            <scope name="cast_returns" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="CastingError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
        </scope>
        <scope name="Client" ilk="namespace">
          <scope name="Base" classrefs="Object" ilk="class">
            <scope name="method_missing" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="ClientError" classrefs="StandardError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="Soap" classrefs="ActionWebService::Client::Base" ilk="class">
            <scope name="SoapDriver" classrefs="SOAP::RPC::Driver" ilk="class">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="perform_invocation" signature="(method_name, args)" ilk="function" />
            <scope name="soap_action" signature="(method_name)" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="XmlRpc" classrefs="ActionWebService::Client::Base" ilk="class">
            <scope name="perform_invocation" signature="(method_name, args)" ilk="function" />
            <scope name="public_name" signature="(method_name)" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
        </scope>
        <scope name="Container" ilk="namespace">
          <scope name="ActionController" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="require_web_service_api" ilk="function" />
              <scope name="web_client_api" signature="(name, protocol, endpoint_uri, options={})" ilk="function" />
              <scope name="web_service_api_with_require" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="Delegated" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="add_web_service_definition_callback" ilk="function" />
              <scope name="has_web_service?" signature="(name)" doc="Whether this service contains a service with the given name" ilk="function" />
              <scope name="web_service" signature="(name, object=nil, &amp;block)" ilk="function" />
              <scope name="web_services" ilk="function" />
            </scope>
            <scope name="ContainerError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
              <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
            </scope>
            <scope name="InstanceMethods" ilk="namespace">
              <scope name="web_service_object" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="Direct" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="add_web_service_api_callback" ilk="function" />
              <scope name="web_service_api" signature="(definition=nil)" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
        </scope>
        <scope name="Dispatcher" ilk="namespace">
          <scope name="ActionController" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="inherited_with_action_controller" ilk="function" />
            </scope>
            <scope name="InstanceMethods" ilk="namespace">
            </scope>
            <scope name="WsdlAction" ilk="namespace">
              <scope name="wsdl" ilk="function" />
              <variable name="SoapEncodingNs" citdl="String" attributes="__const__" />
              <variable name="SoapHttpTransport" citdl="String" attributes="__const__" />
              <variable name="SoapNs" citdl="String" attributes="__const__" />
              <variable name="WsdlNs" citdl="String" attributes="__const__" />
              <variable name="XsdNs" citdl="String" attributes="__const__" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="DispatcherError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="InstanceMethods" ilk="namespace">
            <scope name="Invocation" classrefs="Object" ilk="class">
              <scope name="api" ilk="function" />
              <scope name="api=" ilk="function" />
              <scope name="api_method" ilk="function" />
              <scope name="api_method=" ilk="function" />
              <scope name="method_named_params" ilk="function" />
              <scope name="method_named_params=" ilk="function" />
              <scope name="method_ordered_params" ilk="function" />
              <scope name="method_ordered_params=" ilk="function" />
              <scope name="protocol" ilk="function" />
              <scope name="protocol=" ilk="function" />
              <scope name="protocol_options" ilk="function" />
              <scope name="protocol_options=" ilk="function" />
              <scope name="service" ilk="function" />
              <scope name="service=" ilk="function" />
              <scope name="service_name" ilk="function" />
              <scope name="service_name=" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="Invocation" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="after_invocation" signature="(*interceptors, &amp;block)" doc="Alias for #append_after_invocation" ilk="function" />
            <scope name="after_invocation_interceptors" ilk="function" />
            <scope name="append_after_invocation" signature="(*interceptors, &amp;block)" doc="Appends the given interceptors to be&#xA;called &lt;em&gt;after&lt;/em&gt; method invocation." ilk="function" />
            <scope name="append_before_invocation" signature="(*interceptors, &amp;block)" doc="Appends the given interceptors to be&#xA;called &lt;em&gt;before&lt;/em&gt; method invocation." ilk="function" />
            <scope name="before_invocation" signature="(*interceptors, &amp;block)" doc="Alias for #append_before_invocation" ilk="function" />
            <scope name="before_invocation_interceptors" ilk="function" />
            <scope name="excluded_intercepted_methods" ilk="function" />
            <scope name="included_intercepted_methods" ilk="function" />
            <scope name="prepend_after_invocation" signature="(*interceptors, &amp;block)" doc="Prepends the given interceptors to be&#xA;called &lt;em&gt;after&lt;/em&gt; method invocation." ilk="function" />
            <scope name="prepend_before_invocation" signature="(*interceptors, &amp;block)" doc="Prepends the given interceptors to be&#xA;called &lt;em&gt;before&lt;/em&gt; method invocation." ilk="function" />
          </scope>
          <scope name="InstanceMethods" ilk="namespace">
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="after_invocation" ilk="function" />
            <scope name="append_features" ilk="function" />
            <scope name="before_invocation" ilk="function" />
            <scope name="perform_invocation" ilk="function" />
            <scope name="perform_invocation_with_interception" ilk="function" />
          </scope>
          <scope name="InvocationError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="Protocol" ilk="namespace">
          <scope name="AbstractProtocol" classrefs="Object" ilk="class">
            <scope name="decode_action_pack_request" ilk="function" />
            <scope name="decode_request" ilk="function" />
            <scope name="decode_response" ilk="function" />
            <scope name="encode_action_pack_request" ilk="function" />
            <scope name="encode_request" ilk="function" />
            <scope name="encode_response" ilk="function" />
            <scope name="protocol_client" ilk="function" />
            <scope name="register_api" ilk="function" />
            <scope name="setup" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="Discovery" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="register_protocol" ilk="function" />
            </scope>
            <scope name="InstanceMethods" ilk="namespace">
            </scope>
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="included" ilk="function" />
          </scope>
          <scope name="ProtocolError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="Request" classrefs="Object" ilk="class">
            <scope name="api" ilk="function" />
            <scope name="api=" ilk="function" />
            <scope name="api_method" ilk="function" />
            <scope name="api_method=" ilk="function" />
            <scope name="method_name" ilk="function" />
            <scope name="method_name=" ilk="function" />
            <scope name="method_params" ilk="function" />
            <scope name="method_params=" ilk="function" />
            <scope name="protocol" ilk="function" />
            <scope name="protocol_options" ilk="function" />
            <scope name="service_name" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="Response" classrefs="Object" ilk="class">
            <scope name="body" ilk="function" />
            <scope name="content_type" ilk="function" />
            <scope name="return_value" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="SimpleActionPackRequest" classrefs="ActionController::AbstractRequest" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="Soap" ilk="namespace">
            <scope name="Registry" classrefs="SOAP::Mapping::Registry" ilk="class">
              <scope name="Map" classrefs="Object" ilk="class">
                <scope name="add" ilk="function" />
                <scope name="clear" ilk="function" />
                <scope name="find_mapped_obj_class" ilk="function" />
                <scope name="find_mapped_soap_class" ilk="function" />
                <scope name="init" ilk="function" />
                <scope name="obj2soap" ilk="function" />
                <scope name="soap2obj" ilk="function" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
              </scope>
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <variable name="ArrayFactory" citdl="SOAP::Mapping::ArrayFactory_" attributes="__const__" />
              <variable name="Base64Factory" citdl="SOAP::Mapping::Base64Factory_" attributes="__const__" />
              <variable name="BasetypeFactory" citdl="SOAP::Mapping::BasetypeFactory_" attributes="__const__" />
              <variable name="DateTimeFactory" citdl="SOAP::Mapping::DateTimeFactory_" attributes="__const__" />
              <variable name="HashFactory" citdl="SOAP::Mapping::HashFactory_" attributes="__const__" />
              <variable name="RubyOriginalMap" citdl="Array" attributes="__const__" />
              <variable name="SOAPBaseMap" citdl="Array" attributes="__const__" />
              <variable name="StringFactory" citdl="SOAP::Mapping::StringFactory_" attributes="__const__" />
              <variable name="TypedArrayFactory" citdl="SOAP::Mapping::TypedArrayFactory_" attributes="__const__" />
              <variable name="TypedStructFactory" citdl="SOAP::Mapping::TypedStructFactory_" attributes="__const__" />
              <variable name="URIFactory" citdl="SOAP::Mapping::URIFactory_" attributes="__const__" />
            </scope>
            <scope name="SoapActiveRecordStructFactory" classrefs="SOAP::Mapping::Factory" ilk="class">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="SOAP::Mapping::TraverseSupport" />
            </scope>
            <scope name="SoapBase64Factory" classrefs="SOAP::Mapping::Factory" ilk="class">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="SOAP::Mapping::TraverseSupport" />
            </scope>
            <scope name="SoapBinding" classrefs="Object" ilk="class">
              <scope name="element_binding" ilk="function" />
              <scope name="mapping" ilk="function" />
              <scope name="qname" ilk="function" />
              <scope name="qualified_type_name" signature="(ns=nil)" ilk="function" />
              <scope name="type_name" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="SoapMarshaler" classrefs="Object" ilk="class">
              <scope name="annotate_arrays" signature="(binding, value)" ilk="function" />
              <scope name="lookup_type" signature="(type)" doc="Alias for #register_type" ilk="function" />
              <scope name="namespace" ilk="function" />
              <scope name="register_type" signature="(type)" ilk="function" />
              <scope name="registry" ilk="function" />
              <scope name="ruby_to_soap" signature="(obj)" ilk="function" />
              <scope name="soap_to_ruby" signature="(obj)" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="SoapProtocol" classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class">
              <scope name="create" attributes="__classmethod__" ilk="function" />
              <scope name="marshaler" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <variable name="AWSEncoding" citdl="String" attributes="__const__" />
              <variable name="XSDEncoding" citdl="String" attributes="__const__" />
            </scope>
            <scope name="SoapTypedArrayFactory" classrefs="SOAP::Mapping::Factory" ilk="class">
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="SOAP::Mapping::TraverseSupport" />
            </scope>
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="included" ilk="function" />
          </scope>
          <scope name="XmlRpc" ilk="namespace">
            <scope name="XmlRpcProtocol" classrefs="ActionWebService::Protocol::AbstractProtocol" ilk="class">
              <scope name="create" attributes="__classmethod__" ilk="function" />
              <scope name="value_to_xmlrpc_wire_format" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="included" ilk="function" />
          </scope>
        </scope>
        <scope name="Scaffolding" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="web_service_scaffold" signature="(action_name)" doc="Generates web service invocation scaffolding for the current&#xA;controller. The given action name can then be used as the&#xA;entry point for invoking API methods from a web browser." ilk="function" />
          </scope>
          <scope name="Helpers" ilk="namespace">
            <scope name="method_parameter_input_fields" ilk="function" />
            <scope name="method_parameter_label" ilk="function" />
            <scope name="service_method_list" ilk="function" />
          </scope>
          <scope name="ScaffoldingError" classrefs="ActionWebService::ActionWebServiceError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="WebServiceModel" ilk="namespace">
            <scope name="Container" classrefs="Object" ilk="class">
              <scope name="dispatching_mode" ilk="function" />
              <scope name="services" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="Service" classrefs="Object" ilk="class">
              <scope name="api" ilk="function" />
              <scope name="api_methods" ilk="function" />
              <scope name="api_methods_full" ilk="function" />
              <scope name="object" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="SignatureTypes" ilk="namespace">
          <scope name="canonical_signature" attributes="__classmethod__" ilk="function" />
          <scope name="canonical_signature_entry" attributes="__classmethod__" ilk="function" />
          <scope name="canonical_type" attributes="__classmethod__" ilk="function" />
          <scope name="canonical_type_class" attributes="__classmethod__" ilk="function" />
          <scope name="canonical_type_name" attributes="__classmethod__" ilk="function" />
          <scope name="class_to_type_name" attributes="__classmethod__" ilk="function" />
          <scope name="derived_from?" attributes="__classmethod__" ilk="function" />
          <scope name="symbol_name" attributes="__classmethod__" ilk="function" />
          <scope name="type_name_to_class" attributes="__classmethod__" ilk="function" />
          <scope name="canonical_signature" ilk="function" />
          <scope name="canonical_signature_entry" ilk="function" />
          <scope name="canonical_type" ilk="function" />
          <scope name="canonical_type_class" ilk="function" />
          <scope name="canonical_type_name" ilk="function" />
          <scope name="class_to_type_name" ilk="function" />
          <scope name="derived_from?" ilk="function" />
          <scope name="symbol_name" ilk="function" />
          <scope name="type_name_to_class" ilk="function" />
        </scope>
        <scope name="Struct" classrefs="Object" ilk="class">
          <scope name="member" signature="(name, type)" doc="Creates a structure member with the specified&#xA;name&lt;/tt&gt; and &lt;tt&gt;type. Generates accessor methods for&#xA;reading and writing the member value." attributes="__classmethod__" ilk="function" />
          <scope name="member_type" attributes="__classmethod__" ilk="function" />
          <scope name="members" attributes="__classmethod__" ilk="function" />
          <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
          <scope name="[]" signature="(name)" doc="The member with the given name" ilk="function" />
          <scope name="each_pair" signature="(&amp;block) {|name, self.__send__(name)| ...}" doc="Iterates through each member" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
        </scope>
        <scope name="StructuredType" classrefs="ActionWebService::BaseType" ilk="class">
          <scope name="each_member" ilk="function" />
          <import symbol="ActionWebService::SignatureTypes" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
      </scope>
      <scope name="ActiveRecord" ilk="namespace">
        <scope name="AbstractAdapter" classrefs="Object" ilk="class">
          <scope name="clear_query_cache" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="ActiveRecordError" classrefs="StandardError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Acts" ilk="namespace">
          <scope name="List" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="acts_as_list" signature="(options = {})" ilk="function" />
            </scope>
            <scope name="InstanceMethods" ilk="namespace">
              <scope name="decrement_position" signature="()" doc="Decrease the position of this item without adjusting the&#xA;rest of the list." ilk="function" />
              <scope name="first?" signature="()" doc="Return true if this object is the first in the list." ilk="function" />
              <scope name="higher_item" signature="()" doc="Return the next higher item in the list." ilk="function" />
              <scope name="in_list?" ilk="function" />
              <scope name="increment_position" signature="()" doc="Increase the position of this item without adjusting the&#xA;rest of the list." ilk="function" />
              <scope name="insert_at" signature="(position = 1)" ilk="function" />
              <scope name="last?" signature="()" doc="Return true if this object is the last in the list." ilk="function" />
              <scope name="lower_item" signature="()" doc="Return the next lower item in the list." ilk="function" />
              <scope name="move_higher" signature="()" doc="Swap positions with the next higher item, if one exists." ilk="function" />
              <scope name="move_lower" signature="()" doc="Swap positions with the next lower item, if one exists." ilk="function" />
              <scope name="move_to_bottom" signature="()" doc="Move to the bottom of the list. If the item is already in&#xA;the list, the items below it have their position adjusted&#xA;accordingly." ilk="function" />
              <scope name="move_to_top" signature="()" doc="Move to the top of the list. If the item is already in the&#xA;list, the items above it have their position adjusted&#xA;accordingly." ilk="function" />
              <scope name="remove_from_list" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="NestedSet" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="acts_as_nested_set" signature="(options = {})" ilk="function" />
            </scope>
            <scope name="InstanceMethods" ilk="namespace">
              <scope name="add_child" signature="( child )" doc="Adds a child to this object in the tree. If this object&#xA;hasn&apos;t been initialized, it gets set up as a root node.&#xA;Otherwise, this method will update all of the other elements&#xA;in the tree and shift them to the right, keeping everything&#xA;balanced." ilk="function" />
              <scope name="all_children" signature="()" doc="Returns a set of all of its children and nested children" ilk="function" />
              <scope name="before_destroy" signature="()" doc="Prunes a branch off of the tree, shifting all of the&#xA;elements on the right back to the left so the counts still&#xA;work." ilk="function" />
              <scope name="child?" signature="()" doc="Returns true is this is a child node" ilk="function" />
              <scope name="children_count" signature="()" doc="Returns the number of nested children of this object." ilk="function" />
              <scope name="direct_children" signature="()" doc="Returns a set of only this entry&apos;s immediate children" ilk="function" />
              <scope name="full_set" signature="()" doc="Returns a set of itself and all of its nested children" ilk="function" />
              <scope name="root?" signature="()" doc="Returns true is this is a root node." ilk="function" />
              <scope name="unknown?" signature="()" doc="Returns true if we have no idea what this is" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
          <scope name="Tree" ilk="namespace">
            <scope name="ClassMethods" ilk="namespace">
              <scope name="acts_as_tree" signature="(options = {})" ilk="function" />
            </scope>
            <scope name="InstanceMethods" ilk="namespace">
              <scope name="root" ilk="function" />
              <scope name="self_and_siblings" ilk="function" />
              <scope name="siblings" ilk="function" />
            </scope>
            <scope name="append_features" attributes="__classmethod__" ilk="function" />
            <scope name="append_features" ilk="function" />
          </scope>
        </scope>
        <scope name="AdapterNotFound" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="AdapterNotSpecified" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Aggregations" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="composed_of" signature="(part_id, options = {})" ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="clear_aggregation_cache" ilk="function" />
          <scope name="included" ilk="function" />
        </scope>
        <scope name="Associations" ilk="namespace">
          <scope name="AssociationCollection" classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class">
            <scope name="&lt;&lt;" ilk="function" />
            <scope name="clear" ilk="function" />
            <scope name="concat" ilk="function" />
            <scope name="create" ilk="function" />
            <scope name="delete" ilk="function" />
            <scope name="delete_all" ilk="function" />
            <scope name="destroy_all" ilk="function" />
            <scope name="empty?" ilk="function" />
            <scope name="length" ilk="function" />
            <scope name="push" ilk="function" />
            <scope name="replace" ilk="function" />
            <scope name="size" ilk="function" />
            <scope name="to_ary" ilk="function" />
            <scope name="uniq" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="AssociationProxy" classrefs="Object" ilk="class">
            <scope name="aliased_table_name" ilk="function" />
            <scope name="conditions" ilk="function" />
            <scope name="dependent?" ilk="function" />
            <scope name="extract_options_from_args!" ilk="function" />
            <scope name="interpolate_sql" ilk="function" />
            <scope name="interpolate_sql_options!" ilk="function" />
            <scope name="loaded" ilk="function" />
            <scope name="loaded?" ilk="function" />
            <scope name="merge_options_from_reflection!" ilk="function" />
            <scope name="proxy_extend" ilk="function" />
            <scope name="proxy_respond_to?" ilk="function" />
            <scope name="quoted_record_ids" ilk="function" />
            <scope name="reload" ilk="function" />
            <scope name="reset" ilk="function" />
            <scope name="sanitize_sql" ilk="function" />
            <scope name="set_belongs_to_association_for" ilk="function" />
            <scope name="sql_conditions" ilk="function" />
            <scope name="target" ilk="function" />
            <scope name="target=" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="BelongsToAssociation" classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class">
            <scope name="build" ilk="function" />
            <scope name="create" ilk="function" />
            <scope name="replace" ilk="function" />
            <scope name="updated?" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="BelongsToPolymorphicAssociation" classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class">
            <scope name="replace" ilk="function" />
            <scope name="updated?" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="ClassMethods" ilk="namespace">
            <scope name="JoinDependency" classrefs="Object" ilk="class">
              <scope name="JoinAssociation" classrefs="ActiveRecord::Associations::ClassMethods::JoinDependency::JoinBase" ilk="class">
                <scope name="aliased_join_table_name" ilk="function" />
                <scope name="association_join" ilk="function" />
                <scope name="interpolate_sql" ilk="function" />
                <scope name="klass" ilk="function" />
                <scope name="options" ilk="function" />
                <scope name="parent_table_name" ilk="function" />
                <scope name="pluralize" ilk="function" />
                <scope name="reflection" ilk="function" />
                <scope name="source_reflection" ilk="function" />
                <scope name="table_alias_for" ilk="function" />
                <scope name="table_name_and_alias" ilk="function" />
                <scope name="through_reflection" ilk="function" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
              </scope>
              <scope name="JoinBase" classrefs="Object" ilk="class">
                <scope name="active_record" ilk="function" />
                <scope name="aliased_prefix" ilk="function" />
                <scope name="aliased_primary_key" ilk="function" />
                <scope name="aliased_table_name" ilk="function" />
                <scope name="column_names" ilk="function" />
                <scope name="column_names_with_alias" ilk="function" />
                <scope name="extract_record" ilk="function" />
                <scope name="instantiate" ilk="function" />
                <scope name="primary_key" ilk="function" />
                <scope name="record_id" ilk="function" />
                <scope name="reflections" ilk="function" />
                <scope name="sanitize_sql" ilk="function" />
                <scope name="table_joins" ilk="function" />
                <scope name="table_name" ilk="function" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
              </scope>
              <scope name="aliased_table_names_for" ilk="function" />
              <scope name="build" ilk="function" />
              <scope name="construct" ilk="function" />
              <scope name="construct_association" ilk="function" />
              <scope name="instantiate" ilk="function" />
              <scope name="join_associations" ilk="function" />
              <scope name="join_base" ilk="function" />
              <scope name="joins" ilk="function" />
              <scope name="reflections" ilk="function" />
              <scope name="table_aliases" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
            </scope>
            <scope name="belongs_to" signature="(association_id, options = {})" ilk="function" />
            <scope name="deprecated_add_association_relation" ilk="function" />
            <scope name="deprecated_association_comparison_method" ilk="function" />
            <scope name="deprecated_collection_build_method" ilk="function" />
            <scope name="deprecated_collection_count_method" ilk="function" />
            <scope name="deprecated_collection_create_method" ilk="function" />
            <scope name="deprecated_find_all_in_collection_method" ilk="function" />
            <scope name="deprecated_find_in_collection_method" ilk="function" />
            <scope name="deprecated_has_association_method" ilk="function" />
            <scope name="deprecated_has_collection_method" ilk="function" />
            <scope name="deprecated_remove_association_relation" ilk="function" />
            <scope name="has_and_belongs_to_many" signature="(association_id, options = {}, &amp;extension)" ilk="function" />
            <scope name="has_many" signature="(association_id, options = {}, &amp;extension)" ilk="function" />
            <scope name="has_one" signature="(association_id, options = {})" ilk="function" />
          </scope>
          <scope name="HasAndBelongsToManyAssociation" classrefs="ActiveRecord::Associations::AssociationCollection" ilk="class">
            <scope name="build" ilk="function" />
            <scope name="concat_with_attributes" ilk="function" />
            <scope name="construct_sql" ilk="function" />
            <scope name="count_records" ilk="function" />
            <scope name="delete_records" ilk="function" />
            <scope name="find" ilk="function" />
            <scope name="find_first" ilk="function" />
            <scope name="find_target" ilk="function" />
            <scope name="finding_with_ambigious_select?" ilk="function" />
            <scope name="insert_record" ilk="function" />
            <scope name="method_missing" ilk="function" />
            <scope name="push_with_attributes" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="HasManyAssociation" classrefs="ActiveRecord::Associations::AssociationCollection" ilk="class">
            <scope name="build" ilk="function" />
            <scope name="cached_counter_attribute_name" ilk="function" />
            <scope name="construct_sql" ilk="function" />
            <scope name="count" ilk="function" />
            <scope name="count_records" ilk="function" />
            <scope name="delete_records" ilk="function" />
            <scope name="find" ilk="function" />
            <scope name="find_all" ilk="function" />
            <scope name="find_first" ilk="function" />
            <scope name="find_target" ilk="function" />
            <scope name="has_cached_counter?" ilk="function" />
            <scope name="insert_record" ilk="function" />
            <scope name="method_missing" ilk="function" />
            <scope name="target_obsolete?" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="HasManyThroughAssociation" classrefs="ActiveRecord::Associations::AssociationProxy" ilk="class">
            <scope name="construct_conditions" ilk="function" />
            <scope name="construct_from" ilk="function" />
            <scope name="construct_joins" ilk="function" />
            <scope name="construct_scope" ilk="function" />
            <scope name="construct_select" ilk="function" />
            <scope name="construct_sql" ilk="function" />
            <scope name="find" ilk="function" />
            <scope name="find_target" ilk="function" />
            <scope name="method_missing" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="HasOneAssociation" classrefs="ActiveRecord::Associations::BelongsToAssociation" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="clear_association_cache" ilk="function" />
        </scope>
        <scope name="AssociationTypeMismatch" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="AttributeAssignmentError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <scope name="attribute" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Base" classrefs="Object" ilk="class">
          <scope name="ConnectionSpecification" classrefs="Object" ilk="class">
            <scope name="adapter_method" ilk="function" />
            <scope name="config" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="Subclasses" ilk="namespace">
            <scope name="included" attributes="__classmethod__" ilk="function" />
            <scope name="included" ilk="function" />
          </scope>
          <scope name="TransactionError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="===" signature="(object)" doc="Overwrite the default class equality method to provide&#xA;support for association proxies." attributes="__classmethod__" ilk="function" />
          <scope name="abstract_class" attributes="__classmethod__" ilk="function" />
          <scope name="abstract_class=" attributes="__classmethod__" ilk="function" />
          <scope name="abstract_class?" signature="()" doc="Returns whether this class is a base AR class. If A is a&#xA;base class and B descends from A, then B.base_class will&#xA;return B." attributes="__classmethod__" ilk="function" />
          <scope name="accessible_attributes" attributes="__classmethod__" ilk="function" />
          <scope name="active_connection_name" attributes="__classmethod__" ilk="function" />
          <scope name="active_connections" attributes="__classmethod__" ilk="function" />
          <scope name="acts_as_list" attributes="__classmethod__" ilk="function" />
          <scope name="acts_as_nested_set" attributes="__classmethod__" ilk="function" />
          <scope name="acts_as_tree" attributes="__classmethod__" ilk="function" />
          <scope name="after_create" attributes="__classmethod__" ilk="function" />
          <scope name="after_destroy" attributes="__classmethod__" ilk="function" />
          <scope name="after_find" attributes="__classmethod__" ilk="function" />
          <scope name="after_initialize" attributes="__classmethod__" ilk="function" />
          <scope name="after_save" attributes="__classmethod__" ilk="function" />
          <scope name="after_update" attributes="__classmethod__" ilk="function" />
          <scope name="after_validation" attributes="__classmethod__" ilk="function" />
          <scope name="after_validation_on_create" attributes="__classmethod__" ilk="function" />
          <scope name="after_validation_on_update" attributes="__classmethod__" ilk="function" />
          <scope name="allow_concurrency" attributes="__classmethod__" ilk="function" />
          <scope name="allow_concurrency=" attributes="__classmethod__" ilk="function" />
          <scope name="attr_accessible" signature="(*attributes)" doc="If this macro is used, only those attributes named in it&#xA;will be accessible for mass-assignment, such as&#xA;new(attributes)&lt;/tt&gt; and &lt;tt&gt;attributes=(attributes). This&#xA;is the more conservative choice for mass-assignment&#xA;protection. If you&apos;d rather start from an all-open default&#xA;and restrict attributes as needed, have a look at&#xA;attr_protected." attributes="__classmethod__" ilk="function" />
          <scope name="attr_protected" signature="(*attributes)" doc="Attributes named in this macro are protected from&#xA;mass-assignment, such as&#xA;new(attributes)&lt;/tt&gt; and &lt;tt&gt;attributes=(attributes). Their&#xA;assignment will simply be ignored. Instead, you can use the&#xA;direct writer methods to do assignment. This is meant to&#xA;protect sensitive attributes from being overwritten by&#xA;URL/form hackers. Example:" attributes="__classmethod__" ilk="function" />
          <scope name="average" attributes="__classmethod__" ilk="function" />
          <scope name="base_class" signature="()" doc="Returns the base AR subclass that this class descends from.&#xA;If A extends AR::Base, A.base_class will return A. If B&#xA;descends from A through some arbitrarily deep&#xA;hierarchy, B.base_class will return A." attributes="__classmethod__" ilk="function" />
          <scope name="before_create" attributes="__classmethod__" ilk="function" />
          <scope name="before_destroy" attributes="__classmethod__" ilk="function" />
          <scope name="before_save" attributes="__classmethod__" ilk="function" />
          <scope name="before_update" attributes="__classmethod__" ilk="function" />
          <scope name="before_validation" attributes="__classmethod__" ilk="function" />
          <scope name="before_validation_on_create" attributes="__classmethod__" ilk="function" />
          <scope name="before_validation_on_update" attributes="__classmethod__" ilk="function" />
          <scope name="belongs_to" attributes="__classmethod__" ilk="function" />
          <scope name="benchmark" signature="(title, log_level = Logger::DEBUG, use_silence = true) {|| ...}" doc="Log and benchmark multiple statements in a single block.&#xA;Example:  Project.benchmark(&quot;Creating project&quot;) do&#xA;    project = Project.create(&quot;name&quot; =&gt; &quot;stuff&quot;)&#xA;    project.create_manager(&quot;name&quot; =&gt; &quot;David&quot;)&#xA;    project.milestones &lt;&lt; Milestone.find(:all)&#xA;  end" attributes="__classmethod__" ilk="function" />
          <scope name="calculate" attributes="__classmethod__" ilk="function" />
          <scope name="class_name" attributes="__classmethod__" ilk="function" />
          <scope name="class_name_of_active_record_descendant" attributes="__classmethod__" ilk="function" />
          <scope name="class_of_active_record_descendant" signature="(klass)" doc="Returns the class descending directly from ActiveRecord in&#xA;the inheritance hierarchy." attributes="__classmethod__" ilk="function" />
          <scope name="clear_active_connection_name" attributes="__classmethod__" ilk="function" />
          <scope name="clear_active_connections!" signature="()" doc="Clears the cache which maps classes to connections." attributes="__classmethod__" ilk="function" />
          <scope name="colorize_logging" attributes="__classmethod__" ilk="function" />
          <scope name="colorize_logging=" attributes="__classmethod__" ilk="function" />
          <scope name="column_methods_hash" attributes="__classmethod__" ilk="function" />
          <scope name="column_names" signature="()" doc="Returns an array of column names as strings." attributes="__classmethod__" ilk="function" />
          <scope name="columns" signature="()" doc="Returns an array of column objects for the table associated&#xA;with this class." attributes="__classmethod__" ilk="function" />
          <scope name="columns_hash" signature="()" doc="Returns a hash of column objects for the table associated&#xA;with this class." attributes="__classmethod__" ilk="function" />
          <scope name="composed_of" attributes="__classmethod__" ilk="function" />
          <scope name="compute_type" signature="(type_name)" doc="Returns the class type of the record using the current&#xA;module as a prefix. So descendents of&#xA;MyApp::Business::Account would appear as&#xA;MyApp::Business::AccountSubclass." attributes="__classmethod__" ilk="function" />
          <scope name="condition_block?" attributes="__classmethod__" ilk="function" />
          <scope name="configurations" attributes="__classmethod__" ilk="function" />
          <scope name="configurations=" attributes="__classmethod__" ilk="function" />
          <scope name="connected?" signature="()" doc="Returns true if a connection that&apos;s accessible to this class&#xA;have already been opened." attributes="__classmethod__" ilk="function" />
          <scope name="connection" signature="()" doc="Returns the connection currently associated with the class.&#xA;This can also be used to &quot;borrow&quot; the connection&#xA;to do database work that isn&apos;t easily done without going&#xA;straight to SQL." attributes="__classmethod__" ilk="function" />
          <scope name="connection=" signature="(spec)" attributes="__classmethod__" ilk="function" />
          <scope name="connection_without_query_cache=" attributes="__classmethod__" ilk="function" />
          <scope name="construct_calculation_sql" attributes="__classmethod__" ilk="function" />
          <scope name="content_columns" signature="()" doc="Returns an array of column objects where the primary id, all&#xA;columns ending in &quot;_id&quot; or &quot;_count&quot;, and&#xA;columns used for single table inheritance have been removed." attributes="__classmethod__" ilk="function" />
          <scope name="count" attributes="__classmethod__" ilk="function" />
          <scope name="count_by_sql" signature="(sql)" doc="Returns the result of an SQL statement that should only&#xA;include a COUNT(*) in the SELECT part.  Product.count_by_sql &quot;SELECT COUNT(*) FROM sales s, customers c WHERE s.customer_id = c.id&quot;&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="create" signature="(attributes = nil)" doc="Creates an object, instantly saves it as a record (if the&#xA;validation permits it), and returns it. If the save fails&#xA;under validations, the unsaved object is still returned." attributes="__classmethod__" ilk="function" />
          <scope name="create!" attributes="__classmethod__" ilk="function" />
          <scope name="create_reflection" attributes="__classmethod__" ilk="function" />
          <scope name="current_scoped_methods" attributes="__classmethod__" ilk="function" />
          <scope name="db2_connection" attributes="__classmethod__" ilk="function" />
          <scope name="decrement_counter" signature="(counter_name, id)" doc="Works like increment_counter, but decrements instead." attributes="__classmethod__" ilk="function" />
          <scope name="default_timezone" attributes="__classmethod__" ilk="function" />
          <scope name="default_timezone=" attributes="__classmethod__" ilk="function" />
          <scope name="delete" signature="(id)" doc="Deletes the record with the given id without instantiating&#xA;an object first. If an array of ids is provided, all of them&#xA;are deleted." attributes="__classmethod__" ilk="function" />
          <scope name="delete_all" signature="(conditions = nil)" doc="Deletes all the records that match the condition without&#xA;instantiating the objects first (and hence not calling the&#xA;destroy method). Example:  Post.delete_all &quot;person_id = 5 AND (category = &apos;Something&apos; OR category = &apos;Else&apos;)&quot;&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_add_association_relation" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_association_comparison_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_collection_build_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_collection_count_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_collection_create_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_find_all_in_collection_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_find_in_collection_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_has_association_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_has_collection_method" attributes="__classmethod__" ilk="function" />
          <scope name="deprecated_remove_association_relation" attributes="__classmethod__" ilk="function" />
          <scope name="descends_from_active_record?" attributes="__classmethod__" ilk="function" />
          <scope name="destroy" signature="()" doc="Deletes the record in the database and freezes this instance&#xA;to reflect that no changes should be made (since they can&apos;t&#xA;be persisted)." attributes="__classmethod__" ilk="function" />
          <scope name="destroy_all" signature="(conditions = nil)" doc="Destroys the objects for all the records that match the&#xA;condition by instantiating each object and calling the&#xA;destroy method. Example:  Person.destroy_all &quot;last_login &lt; &apos;2004-04-04&apos;&quot;&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="encode_quoted_value" attributes="__classmethod__" ilk="function" />
          <scope name="establish_connection" signature="(spec = nil)" doc="Establishes the connection to the database. Accepts a hash&#xA;as input where the :adapter key must be specified with the&#xA;name of a database adapter (in lower-case) example for&#xA;regular databases (MySQL, Postgresql, etc):  ActiveRecord::Base.establish_connection(&#xA;    :adapter  =&gt; &quot;mysql&quot;,    :host     =&gt; &quot;localhost&quot;,&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="evaluate_condition" attributes="__classmethod__" ilk="function" />
          <scope name="execute_grouped_calculation" attributes="__classmethod__" ilk="function" />
          <scope name="execute_simple_calculation" attributes="__classmethod__" ilk="function" />
          <scope name="exists?" signature="(id_or_conditions)" doc="Returns true if the given id represents the primary key of a&#xA;record in the database, false otherwise. You can also pass a&#xA;set of SQL conditions. Example:  Person.exists?(5)&#xA;  Person.exists?(&apos;5&apos;)  Person.exists?(:name =&gt; &quot;David&quot;)&#xA;  Person.exists?([&apos;name LIKE ?&apos;, &quot;%#{query}%&quot;])" attributes="__classmethod__" ilk="function" />
          <scope name="extract_options_from_args!" attributes="__classmethod__" ilk="function" />
          <scope name="find" signature="(*args)" attributes="__classmethod__" ilk="function" />
          <scope name="find_all" attributes="__classmethod__" ilk="function" />
          <scope name="find_by_sql" signature="(sql)" doc="Works like find(:all), but requires a complete SQL string.&#xA;Examples:  Post.find_by_sql &quot;SELECT p.*, c.author FROM&#xA;posts p, comments c WHERE p.id = c.post_id&quot;  Post.find_by_sql [&quot;SELECT * FROM posts WHERE author = ? AND created &gt; ?&quot;, author_id, start_date]&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="find_first" attributes="__classmethod__" ilk="function" />
          <scope name="find_on_conditions" attributes="__classmethod__" ilk="function" />
          <scope name="firebird_connection" attributes="__classmethod__" ilk="function" />
          <scope name="generate_read_methods" attributes="__classmethod__" ilk="function" />
          <scope name="generate_read_methods=" attributes="__classmethod__" ilk="function" />
          <scope name="has_and_belongs_to_many" attributes="__classmethod__" ilk="function" />
          <scope name="has_many" attributes="__classmethod__" ilk="function" />
          <scope name="has_one" attributes="__classmethod__" ilk="function" />
          <scope name="human_attribute_name" attributes="__classmethod__" ilk="function" />
          <scope name="increment_counter" signature="(counter_name, id)" doc="Increments the specified counter by one. So&#xA;DiscussionBoard.increment_counter(&quot;post_count&quot;, discussion_board_id) would increment the &quot;post_count&quot; counter on the board responding to discussion_board_id. This is used for caching aggregate values, so that they don&apos;t need to be computed every time. Especially important for looping over a collection where each element require a number of aggregate values. Like the DiscussionBoard that needs to list both the number of posts and comments.&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="inheritance_column" signature="()" doc="Defines the column name for use with single table&#xA;inheritance -- can be set in subclasses like&#xA;so: self.inheritance_column = &quot;type_id&quot;" attributes="__classmethod__" ilk="function" />
          <scope name="inheritance_column=" attributes="__classmethod__" ilk="function" />
          <scope name="inherited" attributes="__classmethod__" ilk="function" />
          <scope name="instantiate" attributes="__classmethod__" ilk="function" />
          <scope name="instantiate_with_callbacks" attributes="__classmethod__" ilk="function" />
          <scope name="lock_mutex" attributes="__classmethod__" ilk="function" />
          <scope name="lock_optimistically" attributes="__classmethod__" ilk="function" />
          <scope name="lock_optimistically=" attributes="__classmethod__" ilk="function" />
          <scope name="locking_column" attributes="__classmethod__" ilk="function" />
          <scope name="log_connections" attributes="__classmethod__" ilk="function" />
          <scope name="logger" attributes="__classmethod__" ilk="function" />
          <scope name="logger=" attributes="__classmethod__" ilk="function" />
          <scope name="maximum" attributes="__classmethod__" ilk="function" />
          <scope name="minimum" attributes="__classmethod__" ilk="function" />
          <scope name="mysql_connection" attributes="__classmethod__" ilk="function" />
          <scope name="observers=" attributes="__classmethod__" ilk="function" />
          <scope name="oci_connection" attributes="__classmethod__" ilk="function" />
          <scope name="openbase_connection" attributes="__classmethod__" ilk="function" />
          <scope name="oracle_connection" attributes="__classmethod__" ilk="function" />
          <scope name="pluralize_table_names" attributes="__classmethod__" ilk="function" />
          <scope name="pluralize_table_names=" attributes="__classmethod__" ilk="function" />
          <scope name="postgresql_connection" attributes="__classmethod__" ilk="function" />
          <scope name="primary_key" signature="()" doc="Defines the primary key field -- can be overridden in&#xA;subclasses. Overwriting will negate any effect of the&#xA;primary_key_prefix_type setting, though." attributes="__classmethod__" ilk="function" />
          <scope name="primary_key=" attributes="__classmethod__" ilk="function" />
          <scope name="primary_key_prefix_type" attributes="__classmethod__" ilk="function" />
          <scope name="primary_key_prefix_type=" attributes="__classmethod__" ilk="function" />
          <scope name="protected_attributes" attributes="__classmethod__" ilk="function" />
          <scope name="quote" attributes="__classmethod__" ilk="function" />
          <scope name="quote_bound_value" attributes="__classmethod__" ilk="function" />
          <scope name="raise_if_bind_arity_mismatch" attributes="__classmethod__" ilk="function" />
          <scope name="read_methods" attributes="__classmethod__" ilk="function" />
          <scope name="record_timestamps" attributes="__classmethod__" ilk="function" />
          <scope name="record_timestamps=" attributes="__classmethod__" ilk="function" />
          <scope name="reflect_on_aggregation" attributes="__classmethod__" ilk="function" />
          <scope name="reflect_on_all_aggregations" attributes="__classmethod__" ilk="function" />
          <scope name="reflect_on_all_associations" attributes="__classmethod__" ilk="function" />
          <scope name="reflect_on_association" attributes="__classmethod__" ilk="function" />
          <scope name="reflections" attributes="__classmethod__" ilk="function" />
          <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
          <scope name="remove_connection" signature="(klass=self)" doc="Remove the connection for this class. This will close the&#xA;active connection and the defined connection (if they&#xA;exist). The result can be used as argument for&#xA;establish_connection, for easy re-establishing of the&#xA;connection." attributes="__classmethod__" ilk="function" />
          <scope name="replace_bind_variables" attributes="__classmethod__" ilk="function" />
          <scope name="replace_named_bind_variables" attributes="__classmethod__" ilk="function" />
          <scope name="reset_column_information" signature="()" doc="Resets all the cached information about columns, which will&#xA;cause them to be reloaded on the next request." attributes="__classmethod__" ilk="function" />
          <scope name="reset_column_information_and_inheritable_attributes_for_all_subclasses" attributes="__classmethod__" ilk="function" />
          <scope name="reset_locking_column" attributes="__classmethod__" ilk="function" />
          <scope name="reset_primary_key" attributes="__classmethod__" ilk="function" />
          <scope name="reset_sequence_name" attributes="__classmethod__" ilk="function" />
          <scope name="reset_subclasses" attributes="__classmethod__" ilk="function" />
          <scope name="reset_table_name" attributes="__classmethod__" ilk="function" />
          <scope name="retrieve_connection" attributes="__classmethod__" ilk="function" />
          <scope name="sanitize" attributes="__classmethod__" ilk="function" />
          <scope name="sanitize_conditions" attributes="__classmethod__" ilk="function" />
          <scope name="sanitize_sql" signature="(condition)" doc="Accepts an array, hash, or string of sql conditions and&#xA;sanitizes them into a valid SQL fragment.  [&quot;name=&apos;%s&apos; and group_id=&apos;%s&apos;&quot;, &quot;foo&apos;bar&quot;, 4]  returns  &quot;name=&apos;foo&apos;&apos;bar&apos; and group_id=&apos;4&apos;&quot;&#xA;  { :name =&gt; &quot;foo&apos;bar&quot;, :group_id =&gt; 4 }  returns &quot;name=&apos;foo&apos;&apos;bar&apos; and group_id=&apos;4&apos;&quot;&#xA;  &quot;name=&apos;foo&apos;&apos;bar&apos; and&#xA;group_id=&apos;4&apos;&quot; returns &quot;name=&apos;foo&apos;&apos;bar&apos; and&#xA;group_id=&apos;4&apos;&quot;" attributes="__classmethod__" ilk="function" />
          <scope name="schema_format" attributes="__classmethod__" ilk="function" />
          <scope name="schema_format=" attributes="__classmethod__" ilk="function" />
          <scope name="scope" attributes="__classmethod__" ilk="function" />
          <scope name="scoped?" attributes="__classmethod__" ilk="function" />
          <scope name="scoped_methods" attributes="__classmethod__" ilk="function" />
          <scope name="sequence_name" attributes="__classmethod__" ilk="function" />
          <scope name="sequence_name=" attributes="__classmethod__" ilk="function" />
          <scope name="serialize" signature="(attr_name, class_name = Object)" doc="Specifies that the attribute by the name of&#xA;attr_name&lt;/tt&gt; should be serialized before saving to the&#xA;database and unserialized after loading from the database.&#xA;The serialization is done through YAML.&#xA;If &lt;tt&gt;class_name&lt;/tt&gt; is specified, the serialized object&#xA;must be of that class on retrieval&#xA;or &lt;tt&gt;SerializationTypeMismatch will be raised." attributes="__classmethod__" ilk="function" />
          <scope name="serialized_attributes" signature="()" doc="Returns a hash of all the attributes that have been&#xA;specified for serialization as keys and their class&#xA;restriction as values." attributes="__classmethod__" ilk="function" />
          <scope name="set_inheritance_column" signature="(value = nil, &amp;block)" doc="Sets the name of the inheritance column to use to the given&#xA;value, or (if the value # is nil or false) to the value&#xA;returned by the given block.Example:  class&#xA;Project &lt; ActiveRecord::Base    set_inheritance_column do&#xA;      original_inheritance_column + &quot;_id&quot;&#xA;    end" attributes="__classmethod__" ilk="function" />
          <scope name="set_locking_column" attributes="__classmethod__" ilk="function" />
          <scope name="set_primary_key" signature="(value = nil, &amp;block)" doc="Sets the name of the primary key column to use to the given&#xA;value, or (if the value is nil or false) to the value&#xA;returned by the given block.Example:  class&#xA;Project &lt; ActiveRecord::Base    set_primary_key &quot;sysid&quot;&#xA;  end" attributes="__classmethod__" ilk="function" />
          <scope name="set_readonly_option!" attributes="__classmethod__" ilk="function" />
          <scope name="set_sequence_name" signature="(value = nil, &amp;block)" doc="Sets the name of the sequence to use when generating ids to&#xA;the given value, or (if the value is nil or false) to the&#xA;value returned by the given block. This is required for&#xA;Oracle and is useful for any database which relies on&#xA;sequences for primary key generation.If a sequence name is&#xA;not explicitly set when using Oracle or Firebird, it will&#xA;default to the commonly used pattern of: #{table_name}_seq" attributes="__classmethod__" ilk="function" />
          <scope name="set_table_name" signature="(value = nil, &amp;block)" doc="Sets the table name to use to the given value, or (if the&#xA;value is nil or false) to the value returned by the given&#xA;block.Example:  class Project &lt; ActiveRecord::Base&#xA;    set_table_name &quot;project&quot;  end" attributes="__classmethod__" ilk="function" />
          <scope name="silence" signature="() {|| ...}" doc="Silences the logger for the duration of the block." attributes="__classmethod__" ilk="function" />
          <scope name="single_threaded_active_connections" attributes="__classmethod__" ilk="function" />
          <scope name="single_threaded_scoped_methods" attributes="__classmethod__" ilk="function" />
          <scope name="sqlite3_connection" attributes="__classmethod__" ilk="function" />
          <scope name="sqlite_connection" attributes="__classmethod__" ilk="function" />
          <scope name="sqlserver_connection" attributes="__classmethod__" ilk="function" />
          <scope name="subclasses" attributes="__classmethod__" ilk="function" />
          <scope name="sum" attributes="__classmethod__" ilk="function" />
          <scope name="table_exists?" signature="()" doc="Indicates whether the table associated with this class&#xA;exists" attributes="__classmethod__" ilk="function" />
          <scope name="table_name" signature="()" doc="Guesses the table name (in forced lower-case) based on the&#xA;name of the class in the inheritance hierarchy descending&#xA;directly from ActiveRecord. So if the hierarchy looks&#xA;like: Reply &lt; Message &lt; ActiveRecord, then Message is&#xA;used to guess the table name from even when called on Reply.&#xA;The rules used to do the guess are handled by the Inflector&#xA;class in Active Support, which knows almost all common&#xA;English inflections (report a bug if your inflection isn&apos;t&#xA;covered)." attributes="__classmethod__" ilk="function" />
          <scope name="table_name=" attributes="__classmethod__" ilk="function" />
          <scope name="table_name_prefix" attributes="__classmethod__" ilk="function" />
          <scope name="table_name_prefix=" attributes="__classmethod__" ilk="function" />
          <scope name="table_name_suffix" attributes="__classmethod__" ilk="function" />
          <scope name="table_name_suffix=" attributes="__classmethod__" ilk="function" />
          <scope name="thread_safe_active_connections" attributes="__classmethod__" ilk="function" />
          <scope name="thread_safe_scoped_methods" attributes="__classmethod__" ilk="function" />
          <scope name="threaded_connections" attributes="__classmethod__" ilk="function" />
          <scope name="threaded_connections=" attributes="__classmethod__" ilk="function" />
          <scope name="timestamps_gmt" attributes="__classmethod__" ilk="function" />
          <scope name="timestamps_gmt=" attributes="__classmethod__" ilk="function" />
          <scope name="transaction" attributes="__classmethod__" ilk="function" />
          <scope name="unlock_mutex" attributes="__classmethod__" ilk="function" />
          <scope name="update" signature="(id, attributes)" doc="Finds the record from the passed id&lt;/tt&gt;, instantly saves it&#xA;with the passed &lt;tt&gt;attributes (if the validation permits&#xA;it), and returns it. If the save fails under&#xA;validations, the unsaved object is still returned.&#xA;The arguments may also be given as arrays in which case the&#xA;update method is called for each pair of&#xA;id&lt;/tt&gt; and &lt;tt&gt;attributes and an array of objects is&#xA;returned." attributes="__classmethod__" ilk="function" />
          <scope name="update_all" signature="(updates, conditions = nil)" doc="Updates all records with the SET-part of an SQL update&#xA;statement in updates&lt;/tt&gt; and returns an integer with the&#xA;number of rows updated. A subset of the records can be&#xA;selected by specifying &lt;tt&gt;conditions. Example:  Billing.update_all &quot;category = &apos;authorized&apos;, approved = 1&quot;, &quot;author = &apos;David&apos;&quot;&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="validate" attributes="__classmethod__" ilk="function" />
          <scope name="validate_find_options" attributes="__classmethod__" ilk="function" />
          <scope name="validate_on_create" attributes="__classmethod__" ilk="function" />
          <scope name="validate_on_update" attributes="__classmethod__" ilk="function" />
          <scope name="validates_acceptance_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_associated" attributes="__classmethod__" ilk="function" />
          <scope name="validates_confirmation_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_each" attributes="__classmethod__" ilk="function" />
          <scope name="validates_exclusion_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_format_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_inclusion_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_length_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_numericality_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_presence_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_size_of" attributes="__classmethod__" ilk="function" />
          <scope name="validates_uniqueness_of" attributes="__classmethod__" ilk="function" />
          <scope name="verification_timeout" attributes="__classmethod__" ilk="function" />
          <scope name="verification_timeout=" attributes="__classmethod__" ilk="function" />
          <scope name="verify_active_connections!" attributes="__classmethod__" ilk="function" />
          <scope name="with_exclusive_scope" signature="(method_scoping = {}, &amp;block)" doc="Works like with_scope, but discards any nested properties." attributes="__classmethod__" ilk="function" />
          <scope name="with_scope" signature="(method_scoping = {}, action = :merge, &amp;block) {|| ...}" doc="Scope parameters to method calls within the block. Takes a&#xA;hash of method_name =&gt; parameters hash. method_name may&#xA;be :find or :create. :find parameters may include&#xA;the :conditions&lt;/tt&gt;, &lt;tt&gt;:joins&lt;/tt&gt;, &lt;tt&gt;:include&lt;/tt&gt;, &lt;tt&gt;:offset&lt;/tt&gt;, &lt;tt&gt;:limit&lt;/tt&gt;, and &lt;tt&gt;:readonly options. :create parameters are an attributes hash.&#xA;  Article.with_scope(:find =&gt; { :conditions =&gt; &quot;blog_id = 1&quot; }, :create =&gt; { :blog_id =&gt; 1 }) do&#xA;" attributes="__classmethod__" ilk="function" />
          <scope name="[]" signature="(attr_name)" doc="Returns the value of the attribute identified by attr_name&#xA;after it has been typecast (for&#xA;example, &quot;2004-12-12&quot; in a data column is cast to&#xA;a date object, like Date.new(2004, 12, 12)). (Alias for the&#xA;protected read_attribute method)." ilk="function" />
          <scope name="[]=" signature="(attr_name, value)" doc="Updates the attribute identified by attr_name&lt;/tt&gt; with the&#xA;specified &lt;tt&gt;value. (Alias for the protected&#xA;write_attribute method)." ilk="function" />
          <scope name="add_child" ilk="function" />
          <scope name="all_children" ilk="function" />
          <scope name="allow_concurrency" ilk="function" />
          <scope name="allow_concurrency=" ilk="function" />
          <scope name="attribute_names" signature="()" doc="Returns an array of names for the attributes available on&#xA;this object sorted alphabetically." ilk="function" />
          <scope name="attribute_present?" signature="(attribute)" doc="Returns true if the specified attribute has been set by the&#xA;user or by a database load and is neither nil nor&#xA;empty? (the latter only applies to objects that respond to&#xA;empty?, most notably Strings)." ilk="function" />
          <scope name="attributes" signature="(options = nil)" doc="Returns a hash of all the attributes with their names as&#xA;keys and clones of their objects as values." ilk="function" />
          <scope name="attributes=" signature="(new_attributes)" doc="Allows you to set all the attributes at once by passing in a&#xA;hash with keys matching the attribute names (which again&#xA;matches the column names). Sensitive attributes can be&#xA;protected from this form of mass-assignment by using the&#xA;attr_protected&lt;/tt&gt; macro. Or you can alternatively specify&#xA;which attributes &lt;b&gt;can&lt;/b&gt; be accessed in with&#xA;the &lt;tt&gt;attr_accessible macro. Then all the attributes not&#xA;included in that won&apos;t be allowed to be mass-assigned." ilk="function" />
          <scope name="attributes_before_type_cast" signature="()" doc="Returns a hash of cloned attributes before typecasting and&#xA;deserialization." ilk="function" />
          <scope name="before_destroy" ilk="function" />
          <scope name="child?" ilk="function" />
          <scope name="children_count" ilk="function" />
          <scope name="colorize_logging" ilk="function" />
          <scope name="colorize_logging=" ilk="function" />
          <scope name="column_for_attribute" signature="(name)" doc="Returns the column object for the named attribute." ilk="function" />
          <scope name="configurations" ilk="function" />
          <scope name="configurations=" ilk="function" />
          <scope name="connection" signature="()" doc="Returns the connection currently associated with the class.&#xA;This can also be used to &quot;borrow&quot; the connection&#xA;to do database work that isn&apos;t easily done without going&#xA;straight to SQL." ilk="function" />
          <scope name="create" signature="(attributes = nil)" doc="Creates an object, instantly saves it as a record (if the&#xA;validation permits it), and returns it. If the save fails&#xA;under validations, the unsaved object is still returned." ilk="function" />
          <scope name="create_or_update" ilk="function" />
          <scope name="create_without_timestamps" ilk="function" />
          <scope name="decrement" signature="(attribute)" doc="Initializes the attribute to zero if nil and subtracts one.&#xA;Only makes sense for number-based attributes. Returns self." ilk="function" />
          <scope name="decrement!" signature="(attribute)" doc="Decrements the attribute and saves the record." ilk="function" />
          <scope name="decrement_position" ilk="function" />
          <scope name="default_timezone" ilk="function" />
          <scope name="default_timezone=" ilk="function" />
          <scope name="destroy" signature="()" doc="Deletes the record in the database and freezes this instance&#xA;to reflect that no changes should be made (since they can&apos;t&#xA;be persisted)." ilk="function" />
          <scope name="destroy_without_callbacks" ilk="function" />
          <scope name="destroy_without_transactions" ilk="function" />
          <scope name="direct_children" ilk="function" />
          <scope name="first?" ilk="function" />
          <scope name="full_set" ilk="function" />
          <scope name="generate_read_methods" ilk="function" />
          <scope name="generate_read_methods=" ilk="function" />
          <scope name="has_attribute?" signature="(attr_name)" doc="Returns true if the given attribute is in the attributes&#xA;hash" ilk="function" />
          <scope name="higher_item" ilk="function" />
          <scope name="id=" signature="(value)" doc="Sets the primary ID." ilk="function" />
          <scope name="id_before_type_cast" ilk="function" />
          <scope name="in_list?" ilk="function" />
          <scope name="increment" signature="(attribute)" doc="Initializes the attribute to zero if nil and adds one. Only&#xA;makes sense for number-based attributes. Returns self." ilk="function" />
          <scope name="increment!" signature="(attribute)" doc="Increments the attribute and saves the record." ilk="function" />
          <scope name="increment_position" ilk="function" />
          <scope name="initialize" ilk="function" />
          <scope name="insert_at" ilk="function" />
          <scope name="last?" ilk="function" />
          <scope name="lock_optimistically" ilk="function" />
          <scope name="lock_optimistically=" ilk="function" />
          <scope name="locking_enabled?" ilk="function" />
          <scope name="logger" ilk="function" />
          <scope name="logger=" ilk="function" />
          <scope name="lower_item" ilk="function" />
          <scope name="move_higher" ilk="function" />
          <scope name="move_lower" ilk="function" />
          <scope name="move_to_bottom" ilk="function" />
          <scope name="move_to_top" ilk="function" />
          <scope name="new_record?" signature="()" doc="Returns true if this object hasn&apos;t been saved yet -- that&#xA;is, a record for the object doesn&apos;t exist yet." ilk="function" />
          <scope name="pluralize_table_names" ilk="function" />
          <scope name="pluralize_table_names=" ilk="function" />
          <scope name="primary_key_prefix_type" ilk="function" />
          <scope name="primary_key_prefix_type=" ilk="function" />
          <scope name="quoted_id" ilk="function" />
          <scope name="readonly!" ilk="function" />
          <scope name="readonly?" signature="()" doc="Records loaded through joins with piggy-back attributes will&#xA;be marked as read only as they cannot be saved and return&#xA;true to this query." ilk="function" />
          <scope name="record_timestamps" ilk="function" />
          <scope name="record_timestamps=" ilk="function" />
          <scope name="reload" signature="(options = nil)" doc="Reloads the attributes of this object from the database. The&#xA;optional options argument is passed to find when reloading&#xA;so you may do e.g. record.reload(:lock =&gt; true) to reload&#xA;the same record with an exclusive row lock." ilk="function" />
          <scope name="remove_from_list" ilk="function" />
          <scope name="respond_to_without_attributes?" ilk="function" />
          <scope name="root" ilk="function" />
          <scope name="root?" ilk="function" />
          <scope name="save" ilk="function" />
          <scope name="save!" signature="()" doc="Attempts to save the record, but instead of just returning&#xA;false if it couldn&apos;t happen, it raises a RecordNotSaved&#xA;exception" ilk="function" />
          <scope name="save_without_transactions" ilk="function" />
          <scope name="save_without_validation" ilk="function" />
          <scope name="save_without_validation!" ilk="function" />
          <scope name="schema_format" ilk="function" />
          <scope name="schema_format=" ilk="function" />
          <scope name="self_and_siblings" ilk="function" />
          <scope name="siblings" ilk="function" />
          <scope name="table_name_prefix" ilk="function" />
          <scope name="table_name_prefix=" ilk="function" />
          <scope name="table_name_suffix" ilk="function" />
          <scope name="table_name_suffix=" ilk="function" />
          <scope name="to_param" signature="()" doc="Enables Active Record objects to be used as URL parameters&#xA;in Action Pack automatically." ilk="function" />
          <scope name="to_xml" ilk="function" />
          <scope name="toggle" signature="(attribute)" doc="Turns an attribute that&apos;s currently true into false and vice&#xA;versa. Returns self." ilk="function" />
          <scope name="toggle!" signature="(attribute)" doc="Toggles the attribute and saves the record." ilk="function" />
          <scope name="unknown?" ilk="function" />
          <scope name="update" signature="(id, attributes)" doc="Finds the record from the passed id&lt;/tt&gt;, instantly saves it&#xA;with the passed &lt;tt&gt;attributes (if the validation permits&#xA;it), and returns it. If the save fails under&#xA;validations, the unsaved object is still returned.&#xA;The arguments may also be given as arrays in which case the&#xA;update method is called for each pair of&#xA;id&lt;/tt&gt; and &lt;tt&gt;attributes and an array of objects is&#xA;returned." ilk="function" />
          <scope name="update_attribute" signature="(name, value)" doc="Updates a single attribute and saves the record. This is&#xA;especially useful for boolean flags on existing records.&#xA;Note: This method is overwritten by the Validation module&#xA;that&apos;ll make sure that updates made with this method doesn&apos;t&#xA;get subjected to validation checks. Hence, attributes can be&#xA;updated even if the full object isn&apos;t valid." ilk="function" />
          <scope name="update_attribute_without_validation_skipping" ilk="function" />
          <scope name="update_attributes" signature="(attributes)" doc="Updates all the attributes from the passed-in Hash and saves&#xA;the record. If the object is invalid, the saving will fail&#xA;and false will be returned." ilk="function" />
          <scope name="update_without_callbacks" ilk="function" />
          <scope name="update_without_timestamps" ilk="function" />
          <scope name="valid?" ilk="function" />
          <scope name="valid_without_callbacks" ilk="function" />
          <scope name="verification_timeout" ilk="function" />
          <scope name="verification_timeout=" ilk="function" />
          <import symbol="ActiveRecord::Acts::List" />
          <import symbol="ActiveRecord::Acts::NestedSet" />
          <import symbol="ActiveRecord::Acts::Tree" />
          <import symbol="ActiveRecord::Aggregations" />
          <import symbol="ActiveRecord::Associations" />
          <import symbol="ActiveRecord::Calculations" />
          <import symbol="ActiveRecord::Callbacks" />
          <import symbol="ActiveRecord::Locking" />
          <import symbol="ActiveRecord::Observing" />
          <import symbol="ActiveRecord::Reflection" />
          <import symbol="ActiveRecord::Timestamp" />
          <import symbol="ActiveRecord::Transactions" />
          <import symbol="ActiveRecord::Validations" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <variable name="CALCULATIONS_OPTIONS" citdl="Array" attributes="__const__" />
          <variable name="CALLBACKS" citdl="Array" attributes="__const__" />
          <variable name="TRANSACTION_MUTEX" citdl="Mutex" attributes="__const__" />
          <variable name="VALIDATIONS" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Calculations" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="average" signature="(column_name, options = {})" doc="Calculates average value on a given column. The value is&#xA;returned as a float. See #calculate for examples with&#xA;options.  Person.average(&apos;age&apos;)" ilk="function" />
            <scope name="calculate" signature="(operation, column_name, options = {})" ilk="function" />
            <scope name="construct_calculation_sql" ilk="function" />
            <scope name="count" signature="(*args)" ilk="function" />
            <scope name="execute_grouped_calculation" ilk="function" />
            <scope name="execute_simple_calculation" ilk="function" />
            <scope name="maximum" signature="(column_name, options = {})" doc="Calculates the maximum value on a given column. The value is&#xA;returned with the same data type of the column..&#xA;See #calculate for examples with options.  Person.maximum(&apos;age&apos;)&#xA;" ilk="function" />
            <scope name="minimum" signature="(column_name, options = {})" doc="Calculates the minimum value on a given column. The value is&#xA;returned with the same data type of the column..&#xA;See #calculate for examples with options.  Person.minimum(&apos;age&apos;)&#xA;" ilk="function" />
            <scope name="sum" signature="(column_name, options = {})" doc="Calculates the sum value on a given column. The value is&#xA;returned with the same data type of the column..&#xA;See #calculate for examples with options.  Person.sum(&apos;age&apos;)" ilk="function" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
          <variable name="CALCULATIONS_OPTIONS" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Callbacks" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="instantiate_with_callbacks" ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="after_create" signature="()" doc="Is called &lt;em&gt;after&lt;/em&gt; Base.save on new objects that&#xA;haven&apos;t been saved yet (no record exists)." ilk="function" />
          <scope name="after_destroy" signature="()" doc="Is called &lt;em&gt;after&lt;/em&gt; Base.destroy (and all the&#xA;attributes have been frozen). class&#xA;Contact &lt; ActiveRecord::Base   after_destroy { |record| logger.info( &quot;Contact #{record.id} was destroyed.&quot; ) }&#xA; end" ilk="function" />
          <scope name="after_save" signature="()" doc="Is called &lt;em&gt;after&lt;/em&gt; Base.save (regardless of whether&#xA;it&apos;s a create or update save). class&#xA;Contact &lt; ActiveRecord::Base   after_save { logger.info( &apos;New contact saved!&apos; ) }&#xA; end" ilk="function" />
          <scope name="after_update" signature="()" doc="Is called &lt;em&gt;after&lt;/em&gt; Base.save on existing objects that&#xA;have a record." ilk="function" />
          <scope name="after_validation" signature="()" doc="Is called &lt;em&gt;after&lt;/em&gt; Validations.validate (which is part&#xA;of the Base.save call)." ilk="function" />
          <scope name="after_validation_on_create" signature="()" doc="Is called &lt;em&gt;after&lt;/em&gt; Validations.validate (which is part&#xA;of the Base.save call) on new objects that haven&apos;t been&#xA;saved yet (no record exists)." ilk="function" />
          <scope name="after_validation_on_update" signature="()" doc="Is called &lt;em&gt;after&lt;/em&gt; Validations.validate (which is part&#xA;of the Base.save call) on existing objects that have a&#xA;record." ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="before_create" signature="()" doc="Is called &lt;em&gt;before&lt;/em&gt; Base.save on new objects that&#xA;haven&apos;t been saved yet (no record exists)." ilk="function" />
          <scope name="before_destroy" signature="()" doc="Is called &lt;em&gt;before&lt;/em&gt; Base.destroy.Note: If you need&#xA;to &lt;em&gt;destroy&lt;/em&gt; or &lt;em&gt;nullify&lt;/em&gt; associated records&#xA;first, use the _:dependent_ option on your associations." ilk="function" />
          <scope name="before_save" signature="()" doc="Is called &lt;em&gt;before&lt;/em&gt; Base.save (regardless of whether&#xA;it&apos;s a create or update save)." ilk="function" />
          <scope name="before_update" signature="()" doc="Is called &lt;em&gt;before&lt;/em&gt; Base.save on existing objects that&#xA;have a record." ilk="function" />
          <scope name="before_validation" signature="()" doc="Is called &lt;em&gt;before&lt;/em&gt; Validations.validate (which is&#xA;part of the Base.save call)." ilk="function" />
          <scope name="before_validation_on_create" signature="()" doc="Is called &lt;em&gt;before&lt;/em&gt; Validations.validate (which is&#xA;part of the Base.save call) on new objects that haven&apos;t been&#xA;saved yet (no record exists)." ilk="function" />
          <scope name="before_validation_on_update" signature="()" doc="Is called &lt;em&gt;before&lt;/em&gt; Validations.validate (which is&#xA;part of the Base.save call) on existing objects that have a&#xA;record." ilk="function" />
          <scope name="create_or_update_with_callbacks" ilk="function" />
          <scope name="create_with_callbacks" ilk="function" />
          <scope name="destroy_with_callbacks" ilk="function" />
          <scope name="initialize_with_callbacks" ilk="function" />
          <scope name="update_with_callbacks" ilk="function" />
          <scope name="valid_with_callbacks" ilk="function" />
          <variable name="CALLBACKS" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="ConfigurationError" classrefs="StandardError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="ConnectionAdapters" ilk="namespace">
          <scope name="AbstractAdapter" classrefs="Object" ilk="class">
            <scope name="active?" signature="()" doc="Is this connection active and ready to perform queries?" ilk="function" />
            <scope name="adapter_name" signature="()" doc="Returns the human-readable name of the adapter. Use mixed&#xA;case - one can always use downcase if needed." ilk="function" />
            <scope name="disconnect!" signature="()" doc="Close this connection" ilk="function" />
            <scope name="format_log_entry" signature="(message, dump = nil)" ilk="function" />
            <scope name="log" signature="(sql, name) {|| ...}" ilk="function" />
            <scope name="log_info" signature="(sql, name, runtime)" ilk="function" />
            <scope name="prefetch_primary_key?" signature="(table_name = nil)" doc="Should primary key values be selected from their&#xA;corresponding sequence before the insert statement? If&#xA;true, next_sequence_value is called before each insert to&#xA;set the record&apos;s primary key. This is false for all adapters&#xA;but Firebird." ilk="function" />
            <scope name="raw_connection" signature="()" doc="Provides access to the underlying database connection.&#xA;Useful for when you need to call a proprietary method such&#xA;as postgresql&apos;s lo_* methods" ilk="function" />
            <scope name="reconnect!" signature="()" doc="Close this connection and open a new one in its place." ilk="function" />
            <scope name="reset_runtime" ilk="function" />
            <scope name="supports_count_distinct?" signature="()" doc="Does this adapter support using DISTINCT within COUNT? This&#xA;is true for all adapters except sqlite." ilk="function" />
            <scope name="supports_migrations?" signature="()" doc="Does this adapter support migrations? Backend specific, as&#xA;the abstract adapter always returns false." ilk="function" />
            <scope name="verify!" signature="(timeout)" doc="Lazily verify this connection, calling +active?+ only if it&#xA;hasn&apos;t been called for timeout seconds." ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="Column" classrefs="Object" ilk="class">
            <scope name="binary_to_string" signature="(value)" doc="Used to convert from BLOBs to Strings" attributes="__classmethod__" ilk="function" />
            <scope name="string_to_binary" signature="(value)" doc="Used to convert from Strings to BLOBs" attributes="__classmethod__" ilk="function" />
            <scope name="string_to_date" signature="(string)" attributes="__classmethod__" ilk="function" />
            <scope name="string_to_dummy_time" signature="(string)" attributes="__classmethod__" ilk="function" />
            <scope name="string_to_time" signature="(string)" attributes="__classmethod__" ilk="function" />
            <scope name="value_to_boolean" signature="(value)" doc="convert something to a boolean" attributes="__classmethod__" ilk="function" />
            <scope name="default" ilk="function" />
            <scope name="human_name" ilk="function" />
            <scope name="klass" signature="()" doc="Returns the Ruby class that corresponds to the abstract data&#xA;type." ilk="function" />
            <scope name="limit" ilk="function" />
            <scope name="null" ilk="function" />
            <scope name="number?" ilk="function" />
            <scope name="primary" ilk="function" />
            <scope name="primary=" ilk="function" />
            <scope name="sql_type" ilk="function" />
            <scope name="text?" ilk="function" />
            <scope name="type_cast" signature="(value)" doc="Casts value (which is a String) to an appropriate instance." ilk="function" />
            <scope name="type_cast_code" signature="(var_name)" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="ColumnDefinition" classrefs="" ilk="class">
            <scope name="Passwd" classrefs="Struct" ilk="class">
              <scope name="Tms" classrefs="Struct" ilk="class">
                <scope name="[]" attributes="__classmethod__" ilk="function" />
                <scope name="members" attributes="__classmethod__" ilk="function" />
                <scope name="new" attributes="__classmethod__ __ctor__" ilk="function" />
                <scope name="cstime" ilk="function" />
                <scope name="cstime=" ilk="function" />
                <scope name="cutime" ilk="function" />
                <scope name="cutime=" ilk="function" />
                <scope name="stime" ilk="function" />
                <scope name="stime=" ilk="function" />
                <scope name="utime" ilk="function" />
                <scope name="utime=" ilk="function" />
                <import symbol="Base64" />
                <import symbol="Base64::Deprecated" />
                <import symbol="Enumerable" />
              </scope>
              <scope name="[]" attributes="__classmethod__" ilk="function" />
              <scope name="members" attributes="__classmethod__" ilk="function" />
              <scope name="new" attributes="__classmethod__ __ctor__" ilk="function" />
              <scope name="dir" ilk="function" />
              <scope name="dir=" ilk="function" />
              <scope name="gid" ilk="function" />
              <scope name="gid=" ilk="function" />
              <scope name="name=" ilk="function" />
              <scope name="passwd" ilk="function" />
              <scope name="passwd=" ilk="function" />
              <scope name="shell" ilk="function" />
              <scope name="shell=" ilk="function" />
              <scope name="uid" ilk="function" />
              <scope name="uid=" ilk="function" />
              <import symbol="Base64" />
              <import symbol="Base64::Deprecated" />
              <import symbol="Enumerable" />
            </scope>
            <scope name="to_sql" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope name="ColumnWithIdentity" classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class">
            <scope name="binary_to_string" attributes="__classmethod__" ilk="function" />
            <scope name="string_to_binary" attributes="__classmethod__" ilk="function" />
            <scope name="cast_to_datetime" ilk="function" />
            <scope name="cast_to_time" ilk="function" />
            <scope name="identity" ilk="function" />
            <scope name="is_special" ilk="function" />
            <scope name="scale" ilk="function" />
            <scope name="simplified_type" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="DatabaseStatements" ilk="namespace">
            <scope name="add_limit!" signature="(sql, options)" doc="Alias for #add_limit_offset!." ilk="function" />
            <scope name="add_limit_offset!" signature="(sql, options)" ilk="function" />
            <scope name="begin_db_transaction" signature="()" doc="Begins the transaction (and turns off auto-committing)." ilk="function" />
            <scope name="commit_db_transaction" signature="()" doc="Commits the transaction (and turns on auto-committing)." ilk="function" />
            <scope name="default_sequence_name" signature="(table, column)" ilk="function" />
            <scope name="delete" signature="(sql, name = nil)" doc="Executes the delete statement and returns the number of rows&#xA;affected." ilk="function" />
            <scope name="execute" signature="(sql, name = nil)" doc="Executes the SQL statement in the context of this&#xA;connection." ilk="function" />
            <scope name="insert" signature="(sql, name = nil, pk = nil, id_value = nil, sequence_name = nil)" doc="Returns the last auto-generated ID from the affected table." ilk="function" />
            <scope name="reset_sequence!" signature="(table, column, sequence = nil)" doc="Set the sequence to the max value of the table&apos;s column." ilk="function" />
            <scope name="rollback_db_transaction" signature="()" doc="Rolls back the transaction (and turns on auto-committing).&#xA;Must be done if the transaction block raises an exception or&#xA;returns false." ilk="function" />
            <scope name="select_all" signature="(sql, name = nil)" doc="Returns an array of record hashes with the column names as&#xA;keys and column values as values." ilk="function" />
            <scope name="select_one" signature="(sql, name = nil)" doc="Returns a record hash with the column names as keys and&#xA;column values as values." ilk="function" />
            <scope name="select_value" signature="(sql, name = nil)" doc="Returns a single value from a record" ilk="function" />
            <scope name="select_values" signature="(sql, name = nil)" doc="Returns an array of the values of the first column in a&#xA;select:  select_values(&quot;SELECT id FROM companies LIMIT&#xA;3&quot;) =&gt; [1,2,3]" ilk="function" />
            <scope name="transaction" signature="(start_db_transaction = true) {|| ...}" doc="Wrap a block in a transaction. Returns result of block." ilk="function" />
            <scope name="update" signature="(sql, name = nil)" doc="Executes the update statement and returns the number of rows&#xA;affected." ilk="function" />
          </scope>
          <scope name="DeprecatedSQLiteAdapter" classrefs="ActiveRecord::ConnectionAdapters::SQLite2Adapter" ilk="class">
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="FirebirdAdapter" classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class">
            <scope name="boolean_domain" attributes="__classmethod__" ilk="function" />
            <scope name="boolean_domain=" attributes="__classmethod__" ilk="function" />
            <scope name="boolean_domain" ilk="function" />
            <scope name="boolean_domain=" ilk="function" />
            <scope name="next_sequence_value" signature="(sequence_name)" doc="Returns the next sequence value from a sequence generator.&#xA;Not generally called directly; used by ActiveRecord to get&#xA;the next primary key value when inserting a new database&#xA;record (see #prefetch_primary_key?)." ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="FirebirdColumn" classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="BLOB_MAX_LENGTH" citdl="Fixnum" attributes="__const__" />
            <variable name="VARCHAR_MAX_LENGTH" citdl="Fixnum" attributes="__const__" />
          </scope>
          <scope name="IndexDefinition" classrefs="" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Enumerable" />
          </scope>
          <scope name="MysqlAdapter" classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class">
            <scope name="emulate_booleans" attributes="__classmethod__" ilk="function" />
            <scope name="emulate_booleans=" attributes="__classmethod__" ilk="function" />
            <scope name="create_database" ilk="function" />
            <scope name="current_database" ilk="function" />
            <scope name="drop_database" ilk="function" />
            <scope name="emulate_booleans" ilk="function" />
            <scope name="emulate_booleans=" ilk="function" />
            <scope name="indexes" ilk="function" />
            <scope name="recreate_database" ilk="function" />
            <scope name="tables" ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="LOST_CONNECTION_ERROR_MESSAGES" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="MysqlColumn" classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="OpenBaseAdapter" classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class">
            <scope name="indexes" ilk="function" />
            <scope name="next_sequence_value" signature="(sequence_name)" ilk="function" />
            <scope name="tables" ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="OpenBaseColumn" classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="PostgreSQLAdapter" classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class">
            <scope name="indexes" ilk="function" />
            <scope name="pk_and_sequence_for" signature="(table)" doc="Find a table&apos;s primary key and sequence." ilk="function" />
            <scope name="query" ilk="function" />
            <scope name="reset_pk_sequence!" signature="(table, pk = nil, sequence = nil)" doc="Resets sequence to the max value of the table&apos;s pk if&#xA;present." ilk="function" />
            <scope name="schema_search_path" ilk="function" />
            <scope name="schema_search_path=" ilk="function" />
            <scope name="tables" ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="BYTEA_COLUMN_TYPE_OID" citdl="Fixnum" attributes="__const__" />
            <variable name="TIMESTAMPOID" citdl="Fixnum" attributes="__const__" />
            <variable name="TIMESTAMPTZOID" citdl="Fixnum" attributes="__const__" />
          </scope>
          <scope name="Quoting" ilk="namespace">
            <scope name="quote" signature="(value, column = nil)" doc="Quotes the column value to help prevent {SQL injection&#xA;attacks}[http://en.wikipedia.org/wiki/SQL_injection]." ilk="function" />
            <scope name="quote_column_name" signature="(name)" doc="Returns a quoted form of the column name. This is highly&#xA;adapter specific." ilk="function" />
            <scope name="quote_string" signature="(s)" doc="Quotes a string, escaping any &apos; (single&#xA;quote) and \ (backslash) characters." ilk="function" />
            <scope name="quoted_date" signature="(value)" ilk="function" />
            <scope name="quoted_false" ilk="function" />
            <scope name="quoted_true" ilk="function" />
          </scope>
          <scope name="SchemaStatements" ilk="namespace">
            <scope name="add_column" signature="(table_name, column_name, type, options = {})" doc="Adds a new column to the named table. See&#xA;TableDefinition#column for details of the options you can&#xA;use." ilk="function" />
            <scope name="add_column_options!" ilk="function" />
            <scope name="add_index" signature="(table_name, column_name, options = {})" ilk="function" />
            <scope name="change_column" signature="(table_name, column_name, type, options = {})" ilk="function" />
            <scope name="change_column_default" signature="(table_name, column_name, default)" ilk="function" />
            <scope name="columns" signature="(table_name, name = nil)" doc="Returns an array of Column objects for the table specified&#xA;by table_name. See the concrete implementation for details&#xA;on the expected parameter values." ilk="function" />
            <scope name="create_table" signature="(name, options = {}) {|table_definition| ...}" ilk="function" />
            <scope name="drop_table" signature="(name, options = {})" doc="Drops a table from the database." ilk="function" />
            <scope name="dump_schema_information" ilk="function" />
            <scope name="index_name" ilk="function" />
            <scope name="initialize_schema_information" signature="()" doc="Should not be called normally, but this operation is&#xA;non-destructive. The migrations module handles this&#xA;automatically." ilk="function" />
            <scope name="native_database_types" signature="()" doc="Returns a Hash of mappings from the abstract data types to&#xA;the native database types. See TableDefinition#column for&#xA;details on the recognized abstract data types." ilk="function" />
            <scope name="remove_column" signature="(table_name, column_name)" ilk="function" />
            <scope name="remove_index" signature="(table_name, options = {})" doc="Remove the given index from the table.Remove the&#xA;suppliers_name_index in the suppliers table.  remove_index :suppliers, :name&#xA;Remove the index named accounts_branch_id_index in the&#xA;accounts table.  remove_index :accounts, :column =&gt; :branch_id&#xA;Remove the index named accounts_branch_id_party_id_index in&#xA;the accounts table." ilk="function" />
            <scope name="rename_column" signature="(table_name, column_name, new_column_name)" ilk="function" />
            <scope name="rename_table" signature="(name, new_name)" ilk="function" />
            <scope name="structure_dump" signature="()" doc="Returns a string of CREATE TABLE SQL statement(s) for&#xA;recreating the entire structure of the database." ilk="function" />
            <scope name="table_alias_for" signature="(table_name)" doc="Truncates a table alias according to the limits of the&#xA;current adapter." ilk="function" />
            <scope name="table_alias_length" signature="()" doc="This is the maximum length a table alias can be" ilk="function" />
            <scope name="type_to_sql" ilk="function" />
          </scope>
          <scope name="SQLite2Adapter" classrefs="ActiveRecord::ConnectionAdapters::SQLiteAdapter" ilk="class">
            <scope name="rewrite_count_distinct_queries" ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="SQLiteAdapter" classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class">
            <scope name="alter_table" ilk="function" />
            <scope name="catch_schema_changes" signature="() {|| ...}" ilk="function" />
            <scope name="copy_table" ilk="function" />
            <scope name="copy_table_contents" ilk="function" />
            <scope name="copy_table_indexes" ilk="function" />
            <scope name="indexes" ilk="function" />
            <scope name="move_table" ilk="function" />
            <scope name="primary_key" ilk="function" />
            <scope name="table_structure" signature="(table_name)" ilk="function" />
            <scope name="tables" ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="SQLiteColumn" classrefs="ActiveRecord::ConnectionAdapters::Column" ilk="class">
            <scope name="binary_to_string" attributes="__classmethod__" ilk="function" />
            <scope name="string_to_binary" attributes="__classmethod__" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="SQLServerAdapter" classrefs="ActiveRecord::ConnectionAdapters::AbstractAdapter" ilk="class">
            <scope name="create_database" signature="(name)" ilk="function" />
            <scope name="current_database" ilk="function" />
            <scope name="drop_database" signature="(name)" ilk="function" />
            <scope name="indexes" signature="(table_name, name = nil)" ilk="function" />
            <scope name="recreate_database" signature="(name)" ilk="function" />
            <scope name="remove_default_constraint" signature="(table_name, column_name)" ilk="function" />
            <scope name="tables" signature="(name = nil)" ilk="function" />
            <import symbol="ActiveRecord::ConnectionAdapters::DatabaseStatements" />
            <import symbol="ActiveRecord::ConnectionAdapters::Quoting" />
            <import symbol="ActiveRecord::ConnectionAdapters::SchemaStatements" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="TableDefinition" classrefs="Object" ilk="class">
            <scope name="[]" signature="(name)" doc="Returns a ColumnDefinition for the column with name name." ilk="function" />
            <scope name="column" signature="(name, type, options = {})" ilk="function" />
            <scope name="columns" ilk="function" />
            <scope name="columns=" ilk="function" />
            <scope name="primary_key" signature="(name)" doc="Appends a primary key definition to the table definition.&#xA;Can be called multiple times, but this is probably not a&#xA;good idea." ilk="function" />
            <scope name="to_sql" signature="()" doc="Returns a String whose contents are the column definitions&#xA;concatenated together. This string can then be pre and&#xA;appended to to generate the final SQL to create the table." ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
        </scope>
        <scope name="ConnectionFailed" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="ConnectionNotEstablished" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="DuplicateMigrationVersionError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="EagerLoadPolymorphicError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Errors" classrefs="Object" ilk="class">
          <scope name="default_error_messages" attributes="__classmethod__" ilk="function" />
          <scope name="default_error_messages=" attributes="__classmethod__" ilk="function" />
          <scope name="[]" signature="(attribute)" doc="Alias for #on" ilk="function" />
          <scope name="add" signature="(attribute, msg = @@default_error_messages[:invalid])" doc="Adds an error message (msg&lt;/tt&gt;) to&#xA;the &lt;tt&gt;attribute&lt;/tt&gt;, which will be returned on a call&#xA;to &lt;tt&gt;on(attribute)&lt;/tt&gt; for the same attribute and ensure&#xA;that this error object returns false when asked&#xA;if &lt;tt&gt;empty?&lt;/tt&gt;. More than one error can be added to the&#xA;same &lt;tt&gt;attribute&lt;/tt&gt; in which case an array will be&#xA;returned on a call to &lt;tt&gt;on(attribute)&lt;/tt&gt;. If no &lt;tt&gt;msg&#xA;is supplied, &quot;invalid&quot; is assumed." ilk="function" />
          <scope name="add_on_blank" signature="(attributes, msg = @@default_error_messages[:blank])" doc="Will add an error message to each of the attributes in&#xA;attributes that is blank (using Object#blank?)." ilk="function" />
          <scope name="add_on_boundary_breaking" signature="(attributes, range, too_long_msg = @@default_error_messages[:too_long], too_short_msg = @@default_error_messages[:too_short])" doc="Will add an error message to each of the attributes in&#xA;attributes&lt;/tt&gt; that has a length outside of the passed&#xA;boundary &lt;tt&gt;range. If the length is above the boundary, the&#xA;too_long_msg message will be used. If below, the&#xA;too_short_msg." ilk="function" />
          <scope name="add_on_boundry_breaking" signature="(attributes, range, too_long_msg = @@default_error_messages[:too_long], too_short_msg = @@default_error_messages[:too_short])" doc="Alias for #add_on_boundary_breaking" ilk="function" />
          <scope name="add_on_empty" signature="(attributes, msg = @@default_error_messages[:empty])" doc="Will add an error message to each of the attributes in&#xA;attributes that is empty." ilk="function" />
          <scope name="add_to_base" signature="(msg)" doc="Adds an error to the base object instead of any particular&#xA;attribute. This is used to report errors that don&apos;t tie to&#xA;any specific attribute, but rather to the object as a whole.&#xA;These error messages don&apos;t get prepended with any field name&#xA;when iterating with each_full, so they should be complete&#xA;sentences." ilk="function" />
          <scope name="clear" signature="()" doc="Removes all the errors that have been added." ilk="function" />
          <scope name="count" signature="()" doc="Alias for #size" ilk="function" />
          <scope name="default_error_messages" ilk="function" />
          <scope name="default_error_messages=" ilk="function" />
          <scope name="each" signature="() {|attr, msg| ...}" doc="Yields each attribute and associated message per error&#xA;added." ilk="function" />
          <scope name="each_full" signature="() {|msg| ...}" doc="Yields each full error message added. So&#xA;Person.errors.add(&quot;first_name&quot;, &quot;can&apos;t be&#xA;empty&quot;) will be returned through iteration&#xA;as &quot;First name can&apos;t be empty&quot;." ilk="function" />
          <scope name="empty?" signature="()" doc="Returns true if no errors have been added." ilk="function" />
          <scope name="full_messages" signature="()" doc="Returns all the full error messages in an array." ilk="function" />
          <scope name="invalid?" signature="(attribute)" doc="Returns true if the specified attribute has errors&#xA;associated with it." ilk="function" />
          <scope name="length" signature="()" doc="Alias for #size" ilk="function" />
          <scope name="on" signature="(attribute)" ilk="function" />
          <scope name="on_base" signature="()" doc="Returns errors assigned to base object through add_to_base&#xA;according to the normal rules of on(attribute)." ilk="function" />
          <scope name="size" signature="()" doc="Returns the total number of errors added. Two errors added&#xA;to the same attribute will be counted as such with this as&#xA;well." ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Enumerable" />
        </scope>
        <scope name="HasManyThroughAssociationNotFoundError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="HasManyThroughAssociationPolymorphicError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="HasManyThroughSourceAssociationMacroError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="HasManyThroughSourceAssociationNotFoundError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="IrreversibleMigration" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Locking" ilk="namespace">
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="update_with_lock" ilk="function" />
        </scope>
        <scope name="Migration" classrefs="Object" ilk="class">
          <scope name="announce" signature="(message)" attributes="__classmethod__" ilk="function" />
          <scope name="down_using_benchmarks" attributes="__classmethod__" ilk="function" />
          <scope name="method_missing" signature="(method, *arguments, &amp;block)" attributes="__classmethod__" ilk="function" />
          <scope name="migrate" signature="(direction)" doc="Execute this migration in the named direction" attributes="__classmethod__" ilk="function" />
          <scope name="say" signature="(message, subitem=false)" attributes="__classmethod__" ilk="function" />
          <scope name="say_with_time" signature="(message) {|| ...}" attributes="__classmethod__" ilk="function" />
          <scope name="singleton_method_added" attributes="__classmethod__" ilk="function" />
          <scope name="suppress_messages" signature="() {|| ...}" attributes="__classmethod__" ilk="function" />
          <scope name="up_using_benchmarks" attributes="__classmethod__" ilk="function" />
          <scope name="verbose" attributes="__classmethod__" ilk="function" />
          <scope name="verbose=" attributes="__classmethod__" ilk="function" />
          <scope name="write" signature="(text=&quot;&quot;)" attributes="__classmethod__" ilk="function" />
          <scope name="verbose" ilk="function" />
          <scope name="verbose=" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="Migrator" classrefs="Object" ilk="class">
          <scope name="current_version" attributes="__classmethod__" ilk="function" />
          <scope name="down" attributes="__classmethod__" ilk="function" />
          <scope name="migrate" attributes="__classmethod__" ilk="function" />
          <scope name="proper_table_name" attributes="__classmethod__" ilk="function" />
          <scope name="schema_info_table_name" attributes="__classmethod__" ilk="function" />
          <scope name="up" attributes="__classmethod__" ilk="function" />
          <scope name="current_version" ilk="function" />
          <scope name="migrate" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="MultiparameterAssignmentErrors" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <scope name="errors" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Observer" classrefs="Object" ilk="class">
          <scope name="instance" attributes="__classmethod__" ilk="function" />
          <scope name="observe" signature="(*models)" doc="Attaches the observer to the supplied model classes." attributes="__classmethod__" ilk="function" />
          <scope name="reloadable?" attributes="__classmethod__" ilk="function" />
          <scope name="update" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <import symbol="Reloadable" />
          <import symbol="Reloadable::Subclasses" />
          <import symbol="Singleton" />
        </scope>
        <scope name="Observing" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="observers=" signature="(*observers)" doc="Activates the observers assigned. Examples:  # Calls&#xA;PersonObserver.instance  ActiveRecord::Base.observers = :person_observer&#xA;  # Calls Cacher.instance and GarbageCollector.instance&#xA;  ActiveRecord::Base.observers = :cacher, :garbage_collector&#xA;  # Same as above, just using explicit class references&#xA;  ActiveRecord::Base.observers = Cacher, GarbageCollector" ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
        </scope>
        <scope name="PreparedStatementInvalid" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="QueryCache" classrefs="Object" ilk="class">
          <scope name="clear_query_cache" ilk="function" />
          <scope name="columns" ilk="function" />
          <scope name="delete" ilk="function" />
          <scope name="insert" ilk="function" />
          <scope name="select_all" ilk="function" />
          <scope name="select_one" ilk="function" />
          <scope name="update" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="ReadOnlyRecord" classrefs="StandardError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="RecordInvalid" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <scope name="record" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="RecordNotFound" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="RecordNotSaved" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Reflection" ilk="namespace">
          <scope name="AggregateReflection" classrefs="ActiveRecord::Reflection::MacroReflection" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="AssociationReflection" classrefs="ActiveRecord::Reflection::MacroReflection" ilk="class">
            <scope name="association_foreign_key" ilk="function" />
            <scope name="check_validity!" ilk="function" />
            <scope name="counter_cache_column" ilk="function" />
            <scope name="primary_key_name" ilk="function" />
            <scope name="source_reflection" ilk="function" />
            <scope name="source_reflection_names" ilk="function" />
            <scope name="table_name" ilk="function" />
            <scope name="through_reflection" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="ClassMethods" ilk="namespace">
            <scope name="create_reflection" signature="(macro, name, options, active_record)" ilk="function" />
            <scope name="reflect_on_aggregation" signature="(aggregation)" doc="Returns the AggregateReflection object for the named&#xA;aggregation (use the symbol). Example:  Account.reflect_on_aggregation(:balance) # returns the balance AggregateReflection&#xA;" ilk="function" />
            <scope name="reflect_on_all_aggregations" signature="()" doc="Returns an array of AggregateReflection objects for all the&#xA;aggregations in the class." ilk="function" />
            <scope name="reflect_on_all_associations" signature="(macro = nil)" doc="Returns an array of AssociationReflection objects for all&#xA;the aggregations in the class. If you only want to reflect&#xA;on a certain association type, pass in the&#xA;symbol (:has_many, :has_one, :belongs_to) for that as the&#xA;first parameter. Example:  Account.reflect_on_all_associations             # returns an array of all associations&#xA;" ilk="function" />
            <scope name="reflect_on_association" signature="(association)" doc="Returns the AssociationReflection object for the named&#xA;aggregation (use the symbol). Example:  Account.reflect_on_association(:owner) # returns the owner AssociationReflection&#xA;  Invoice.reflect_on_association(:line_items).macro  # returns :has_many&#xA;" ilk="function" />
            <scope name="reflections" signature="()" doc="Returns a hash containing all AssociationReflection objects&#xA;for the current class Example:  Invoice.reflections&#xA;  Account.reflections" ilk="function" />
          </scope>
          <scope name="MacroReflection" classrefs="Object" ilk="class">
            <scope name="active_record" ilk="function" />
            <scope name="class_name" ilk="function" />
            <scope name="klass" signature="()" doc="Returns the class for the&#xA;macro, so &quot;composed_of :balance, :class_name =&gt; &apos;Money&apos;&quot; would return the Money class and &quot;has_many :clients&quot; would return the Client class.&#xA;" ilk="function" />
            <scope name="macro" signature="()" doc="Returns the name of the macro, so it would&#xA;return :composed_of&#xA;for &quot;composed_of :balance, :class_name =&gt; &apos;Money&apos;&quot; or :has_many for &quot;has_many :clients&quot;.&#xA;" ilk="function" />
            <scope name="options" signature="()" doc="Returns the hash of options used for the macro, so it would&#xA;return { :class_name =&gt; &quot;Money&quot; } for &quot;composed_of :balance, :class_name =&gt; &apos;Money&apos;&quot; or {} for &quot;has_many :clients&quot;.&#xA;" ilk="function" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
          </scope>
          <scope name="included" attributes="__classmethod__" ilk="function" />
          <scope name="included" ilk="function" />
        </scope>
        <scope name="Schema" classrefs="ActiveRecord::Migration" ilk="class">
          <scope name="define" signature="(info={}, &amp;block)" doc="Eval the given block. All methods available to the current&#xA;connection adapter are available within the block, so you&#xA;can easily use the database definition DSL to build up your&#xA;schema (#create_table, #add_index, etc.).The info hash is&#xA;optional, and if given is used to define metadata about the&#xA;current schema (like the schema&apos;s version):" attributes="__classmethod__" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="SchemaDumper" classrefs="Object" ilk="class">
          <scope name="dump" attributes="__classmethod__" ilk="function" />
          <scope name="ignore_tables" attributes="__classmethod__" ilk="function" />
          <scope name="ignore_tables=" attributes="__classmethod__" ilk="function" />
          <scope name="dump" ilk="function" />
          <scope name="ignore_tables" ilk="function" />
          <scope name="ignore_tables=" ilk="function" />
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
        <scope name="SerializationTypeMismatch" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="StaleObjectError" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="StatementInvalid" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="SubclassNotFound" classrefs="ActiveRecord::ActiveRecordError" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
          <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
          <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
        </scope>
        <scope name="Timestamp" ilk="namespace">
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="create_with_timestamps" ilk="function" />
          <scope name="update_with_timestamps" ilk="function" />
        </scope>
        <scope name="Transactions" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="lock_mutex" ilk="function" />
            <scope name="transaction" signature="(*objects, &amp;block)" ilk="function" />
            <scope name="unlock_mutex" ilk="function" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="destroy_with_transactions" ilk="function" />
          <scope name="save_with_transactions" ilk="function" />
          <scope name="transaction" ilk="function" />
          <variable name="TRANSACTION_MUTEX" citdl="Mutex" attributes="__const__" />
        </scope>
        <scope name="Validations" ilk="namespace">
          <scope name="ClassMethods" ilk="namespace">
            <scope name="condition_block?" signature="(condition)" ilk="function" />
            <scope name="create!" signature="(attributes = nil)" doc="Creates an object just like Base.create but calls&#xA;save! instead of save so an exception is raised if the&#xA;record is invalid." ilk="function" />
            <scope name="evaluate_condition" signature="(condition, record)" doc="Determine from the given condition (whether a&#xA;block, procedure, method or string) whether or not to&#xA;validate the record. See #validates_each." ilk="function" />
            <scope name="validate" signature="(*methods, &amp;block)" ilk="function" />
            <scope name="validate_on_create" signature="(*methods, &amp;block)" ilk="function" />
            <scope name="validate_on_update" signature="(*methods, &amp;block)" ilk="function" />
            <scope name="validates_acceptance_of" signature="(*attr_names)" ilk="function" />
            <scope name="validates_associated" signature="(*attr_names)" ilk="function" />
            <scope name="validates_confirmation_of" signature="(*attr_names)" ilk="function" />
            <scope name="validates_each" signature="(*attrs) {|record, attr, value| ...}" ilk="function" />
            <scope name="validates_exclusion_of" signature="(*attr_names)" ilk="function" />
            <scope name="validates_format_of" signature="(*attr_names)" ilk="function" />
            <scope name="validates_inclusion_of" signature="(*attr_names)" ilk="function" />
            <scope name="validates_length_of" signature="(*attrs)" ilk="function" />
            <scope name="validates_numericality_of" signature="(*attr_names)" ilk="function" />
            <scope name="validates_presence_of" signature="(*attr_names)" ilk="function" />
            <scope name="validates_size_of" signature="(*attrs)" doc="Alias for #validates_length_of" ilk="function" />
            <scope name="validates_uniqueness_of" signature="(*attr_names)" ilk="function" />
            <variable name="ALL_RANGE_OPTIONS" citdl="Array" attributes="__const__" />
            <variable name="DEFAULT_VALIDATION_OPTIONS" citdl="Hash" attributes="__const__" />
          </scope>
          <scope name="append_features" attributes="__classmethod__" ilk="function" />
          <scope name="append_features" ilk="function" />
          <scope name="errors" signature="()" doc="Returns the Errors object that holds all information about&#xA;attribute error messages." ilk="function" />
          <scope name="save_with_validation" signature="(perform_validation = true)" doc="The validation process on save can be skipped by passing&#xA;false. The regular Base#save method is replaced with this&#xA;when the validations module is mixed in, which it is by&#xA;default." ilk="function" />
          <scope name="save_with_validation!" signature="()" doc="Attempts to save the record just like Base#save but will&#xA;raise a RecordInvalid exception instead of returning false&#xA;if the record is not valid." ilk="function" />
          <scope name="update_attribute_with_validation_skipping" signature="(name, value)" doc="Updates a single attribute and saves the record without&#xA;going through the normal validation procedure. This is&#xA;especially useful for boolean flags on existing records. The&#xA;regular update_attribute method in Base is replaced with&#xA;this when the validations module is mixed in, which it is by&#xA;default." ilk="function" />
          <scope name="valid?" signature="()" doc="Runs validate and validate_on_create or validate_on_update&#xA;and returns true if no errors were added otherwise false." ilk="function" />
          <scope name="validate" signature="(" doc="Overwrite this method for validation checks on all saves and&#xA;use Errors.add(field, msg) for invalid attributes." ilk="function" />
          <scope name="validate_on_create" signature="(" doc="Overwrite this method for validation checks used only on&#xA;creation." ilk="function" />
          <scope name="validate_on_update" signature="(" doc="Overwrite this method for validation checks used only on&#xA;updates." ilk="function" />
          <variable name="VALIDATIONS" citdl="Array" attributes="__const__" />
        </scope>
      </scope>
      <scope name="ActiveSupport" ilk="namespace">
        <scope name="CoreExtensions" ilk="namespace">
          <scope name="Array" ilk="namespace">
            <scope name="Conversions" ilk="namespace">
              <scope name="to_param" signature="()" doc="When an array is given to url_for, it is converted to a&#xA;slash separated string." ilk="function" />
              <scope name="to_sentence" signature="(options = {})" ilk="function" />
              <scope name="to_xml" signature="(options = {})" ilk="function" />
            </scope>
          </scope>
          <scope name="CGI" ilk="namespace">
            <scope name="EscapeSkippingSlashes" ilk="namespace">
              <scope name="escape_skipping_slashes" ilk="function" />
            </scope>
          </scope>
          <scope name="Date" ilk="namespace">
            <scope name="Conversions" ilk="namespace">
              <scope name="included" attributes="__classmethod__" ilk="function" />
              <scope name="included" ilk="function" />
              <scope name="to_date" signature="()" doc="To be able to keep Dates and Times interchangeable on&#xA;conversions" ilk="function" />
              <scope name="to_formatted_s" signature="(format = :default)" ilk="function" />
              <scope name="to_time" signature="(form = :local)" ilk="function" />
              <scope name="xmlschema" ilk="function" />
              <variable name="DATE_FORMATS" citdl="Hash" attributes="__const__" />
            </scope>
          </scope>
          <scope name="Hash" ilk="namespace">
            <scope name="Conversions" ilk="namespace">
              <scope name="to_xml" signature="(options = {})" ilk="function" />
              <variable name="XML_FORMATTING" citdl="Hash" attributes="__const__" />
              <variable name="XML_TYPE_NAMES" citdl="Hash" attributes="__const__" />
            </scope>
            <scope name="Diff" ilk="namespace">
              <scope name="diff" signature="(h2)" ilk="function" />
            </scope>
            <scope name="IndifferentAccess" ilk="namespace">
              <scope name="with_indifferent_access" ilk="function" />
            </scope>
            <scope name="Keys" ilk="namespace">
              <scope name="assert_valid_keys" signature="(*valid_keys)" ilk="function" />
              <scope name="stringify_keys" signature="()" doc="Return a new hash with all keys converted to strings." ilk="function" />
              <scope name="stringify_keys!" signature="()" doc="Destructively convert all keys to strings." ilk="function" />
              <scope name="symbolize_keys" signature="()" doc="Return a new hash with all keys converted to symbols." ilk="function" />
              <scope name="symbolize_keys!" signature="()" doc="Destructively convert all keys to symbols." ilk="function" />
              <scope name="to_options" signature="()" doc="Alias for #symbolize_keys" ilk="function" />
              <scope name="to_options!" signature="()" doc="Alias for #symbolize_keys!" ilk="function" />
            </scope>
            <scope name="ReverseMerge" ilk="namespace">
              <scope name="reverse_merge" signature="(other_hash)" ilk="function" />
              <scope name="reverse_merge!" signature="(other_hash)" ilk="function" />
              <scope name="reverse_update" signature="(other_hash)" doc="Alias for #reverse_merge" ilk="function" />
            </scope>
          </scope>
          <scope name="Integer" ilk="namespace">
            <scope name="EvenOdd" ilk="namespace">
              <scope name="even?" ilk="function" />
              <scope name="multiple_of?" signature="(number)" ilk="function" />
              <scope name="odd?" ilk="function" />
            </scope>
            <scope name="Inflections" ilk="namespace">
              <scope name="ordinalize" signature="()" doc="Ordinalize turns a number into an ordinal string used to&#xA;denote the position in an ordered sequence such as&#xA;1st, 2nd, 3rd, 4th.Examples  1.ordinalize    # =&gt; &quot;1st&quot;&#xA;  2.ordinalize    # =&gt; &quot;2nd&quot;  1002.ordinalize # =&gt; &quot;1002nd&quot;&#xA;  1003.ordinalize # =&gt; &quot;1003rd&quot;" ilk="function" />
            </scope>
          </scope>
          <scope name="LoadErrorExtensions" ilk="namespace">
            <scope name="LoadErrorClassMethods" ilk="namespace">
            </scope>
          </scope>
          <scope name="Numeric" ilk="namespace">
            <scope name="Bytes" ilk="namespace">
              <scope name="byte" signature="()" doc="Alias for #bytes" ilk="function" />
              <scope name="bytes" ilk="function" />
              <scope name="exabyte" signature="()" doc="Alias for #exabytes" ilk="function" />
              <scope name="exabytes" ilk="function" />
              <scope name="gigabyte" signature="()" doc="Alias for #gigabytes" ilk="function" />
              <scope name="gigabytes" ilk="function" />
              <scope name="kilobyte" signature="()" doc="Alias for #kilobytes" ilk="function" />
              <scope name="kilobytes" ilk="function" />
              <scope name="megabyte" signature="()" doc="Alias for #megabytes" ilk="function" />
              <scope name="megabytes" ilk="function" />
              <scope name="petabyte" signature="()" doc="Alias for #petabytes" ilk="function" />
              <scope name="petabytes" ilk="function" />
              <scope name="terabyte" signature="()" doc="Alias for #terabytes" ilk="function" />
              <scope name="terabytes" ilk="function" />
            </scope>
            <scope name="Time" ilk="namespace">
              <scope name="ago" signature="(time = ::Time.now)" doc="Reads best without arguments: 10.minutes.ago" ilk="function" />
              <scope name="day" signature="()" doc="Alias for #days" ilk="function" />
              <scope name="days" ilk="function" />
              <scope name="fortnight" signature="()" doc="Alias for #fortnights" ilk="function" />
              <scope name="fortnights" ilk="function" />
              <scope name="from_now" signature="(time = ::Time.now)" doc="Alias for #since" ilk="function" />
              <scope name="hour" signature="()" doc="Alias for #hours" ilk="function" />
              <scope name="hours" ilk="function" />
              <scope name="minute" signature="()" doc="Alias for #minutes" ilk="function" />
              <scope name="minutes" ilk="function" />
              <scope name="month" signature="()" doc="Alias for #months" ilk="function" />
              <scope name="months" ilk="function" />
              <scope name="second" signature="()" doc="Alias for #seconds" ilk="function" />
              <scope name="seconds" ilk="function" />
              <scope name="since" signature="(time = ::Time.now)" doc="Reads best with argument: 10.minutes.since(time)" ilk="function" />
              <scope name="until" signature="(time = ::Time.now)" doc="Alias for #ago" ilk="function" />
              <scope name="week" signature="()" doc="Alias for #weeks" ilk="function" />
              <scope name="weeks" ilk="function" />
              <scope name="year" signature="()" doc="Alias for #years" ilk="function" />
              <scope name="years" ilk="function" />
            </scope>
          </scope>
          <scope name="Pathname" ilk="namespace">
            <scope name="CleanWithin" ilk="namespace">
              <scope name="clean_within" signature="(string)" doc="Clean the paths contained in the provided string." ilk="function" />
            </scope>
          </scope>
          <scope name="Range" ilk="namespace">
            <scope name="Conversions" ilk="namespace">
              <scope name="included" attributes="__classmethod__" ilk="function" />
              <scope name="included" ilk="function" />
              <scope name="to_formatted_s" signature="(format = :default)" ilk="function" />
              <variable name="DATE_FORMATS" citdl="Hash" attributes="__const__" />
            </scope>
          </scope>
          <scope name="String" ilk="namespace">
            <scope name="Access" ilk="namespace">
              <scope name="at" signature="(position)" doc="Returns the character at the position treating the string as&#xA;an array (where 0 is the first character).Examples:&#xA;  &quot;hello&quot;.at(0)  # =&gt; &quot;h&quot;  &quot;hello&quot;.at(4)  # =&gt; &quot;o&quot;&#xA;  &quot;hello&quot;.at(10) # =&gt; nil" ilk="function" />
              <scope name="first" signature="(limit = 1)" doc="Returns the first character of the string or the first limit&#xA;characters.Examples:  &quot;hello&quot;.first     # =&gt; &quot;h&quot;&#xA;  &quot;hello&quot;.first(2)  # =&gt; &quot;he&quot;&#xA;  &quot;hello&quot;.first(10) # =&gt; &quot;hello&quot;" ilk="function" />
              <scope name="from" signature="(position)" doc="Returns the remaining of the string from the position&#xA;treating the string as an array (where 0 is the first&#xA;character).Examples:  &quot;hello&quot;.from(0)  # =&gt; &quot;hello&quot;&#xA;  &quot;hello&quot;.from(2)  # =&gt; &quot;llo&quot;&#xA;  &quot;hello&quot;.from(10) # =&gt; nil" ilk="function" />
              <scope name="last" signature="(limit = 1)" doc="Returns the last character of the string or the last limit&#xA;characters.Examples:  &quot;hello&quot;.last     # =&gt; &quot;o&quot;&#xA;  &quot;hello&quot;.last(2)  # =&gt; &quot;lo&quot;&#xA;  &quot;hello&quot;.last(10) # =&gt; &quot;hello&quot;" ilk="function" />
              <scope name="to" signature="(position)" doc="Returns the beginning of the string up to the position&#xA;treating the string as an array (where 0 is the first&#xA;character).Examples:  &quot;hello&quot;.to(0)  # =&gt; &quot;h&quot;&#xA;  &quot;hello&quot;.to(2)  # =&gt; &quot;hel&quot;&#xA;  &quot;hello&quot;.to(10) # =&gt; &quot;hello&quot;" ilk="function" />
            </scope>
            <scope name="Conversions" ilk="namespace">
              <scope name="to_date" ilk="function" />
              <scope name="to_time" signature="(form = :utc)" doc="Form can be either :utc (default) or :local." ilk="function" />
            </scope>
            <scope name="Inflections" ilk="namespace">
              <scope name="camelcase" signature="(first_letter = :upper)" doc="Alias for #camelize" ilk="function" />
              <scope name="camelize" signature="(first_letter = :upper)" doc="By default, camelize converts strings to UpperCamelCase. If&#xA;the argument to camelize is set to &quot;:lower&quot; then&#xA;camelize produces lowerCamelCase.camelize will also&#xA;convert &apos;/&apos; to &apos;::&apos; which is useful for converting paths to&#xA;namespacesExamples  &quot;active_record&quot;.camelize #=&gt; &quot;ActiveRecord&quot;&#xA;" ilk="function" />
              <scope name="classify" signature="()" doc="Create a class name from a table name like Rails does for&#xA;table names to models. Note that this returns a string and&#xA;not a Class. (To convert to an actual class follow classify&#xA;with constantize.)Examples  &quot;egg_and_hams&quot;.classify #=&gt; &quot;EggAndHam&quot;&#xA;  &quot;post&quot;.classify #=&gt; &quot;Post&quot;" ilk="function" />
              <scope name="constantize" signature="()" doc="Constantize tries to find a declared constant with the name&#xA;specified in the string. It raises a NameError when the name&#xA;is not in CamelCase or is not initialized.Examples&#xA;  &quot;Module&quot;.constantize #=&gt; Module  &quot;Class&quot;.constantize #=&gt; Class&#xA;" ilk="function" />
              <scope name="dasherize" signature="()" doc="Replaces underscores with dashes in the string.Example&#xA;  &quot;puni_puni&quot; #=&gt; &quot;puni-puni&quot;" ilk="function" />
              <scope name="demodulize" signature="()" doc="Removes the module part from the expression in the string&#xA;Examples  &quot;ActiveRecord::CoreExtensions::String::Inflections&quot;.demodulize #=&gt; &quot;Inflections&quot;&#xA;  &quot;Inflections&quot;.demodulize #=&gt; &quot;Inflections&quot;&#xA;" ilk="function" />
              <scope name="foreign_key" signature="(separate_class_name_and_id_with_underscore = true)" doc="Creates a foreign key name from a class name.&#xA;separate_class_name_and_id_with_underscore sets whether the&#xA;method should put &apos;_&apos; between the name and &apos;id&apos;.Examples&#xA;  &quot;Message&quot;.foreign_key #=&gt; &quot;message_id&quot;&#xA;  &quot;Message&quot;.foreign_key(false) #=&gt; &quot;messageid&quot;&#xA;" ilk="function" />
              <scope name="humanize" signature="()" doc="Capitalizes the first word and turns underscores into spaces&#xA;and strips _id. Like titleize, this is meant for creating&#xA;pretty output.Examples  &quot;employee_salary&quot; #=&gt; &quot;Employee salary&quot;&#xA;  &quot;author_id&quot; #=&gt; &quot;Author&quot;" ilk="function" />
              <scope name="pluralize" signature="()" doc="Returns the plural form of the word in the string.&#xA;Examples  &quot;post&quot;.pluralize #=&gt; &quot;posts&quot;&#xA;  &quot;octopus&quot;.pluralize #=&gt; &quot;octopi&quot;&#xA;  &quot;sheep&quot;.pluralize #=&gt; &quot;sheep&quot;&#xA;  &quot;words&quot;.pluralize #=&gt; &quot;words&quot;&#xA;  &quot;the blue mailman&quot;.pluralize #=&gt; &quot;the&#xA;blue mailmen&quot;" ilk="function" />
              <scope name="singularize" signature="()" doc="The reverse of pluralize, returns the singular form of a&#xA;word in a string.Examples  &quot;posts&quot;.singularize #=&gt; &quot;post&quot;&#xA;  &quot;octopi&quot;.singularize #=&gt; &quot;octopus&quot;&#xA;  &quot;sheep&quot;.singluarize #=&gt; &quot;sheep&quot;&#xA;  &quot;word&quot;.singluarize #=&gt; &quot;word&quot;&#xA;  &quot;the blue mailmen&quot;.singularize #=&gt; &quot;the&#xA;blue mailman&quot;" ilk="function" />
              <scope name="tableize" signature="()" doc="Create the name of a table like Rails does for models to&#xA;table names. This method uses the pluralize method on the&#xA;last word in the string.Examples  &quot;RawScaledScorer&quot;.tableize #=&gt; &quot;raw_scaled_scorers&quot;&#xA;  &quot;egg_and_ham&quot;.tableize #=&gt; &quot;egg_and_hams&quot;&#xA;  &quot;fancyCategory&quot;.tableize #=&gt; &quot;fancy_categories&quot;&#xA;" ilk="function" />
              <scope name="titlecase" signature="()" doc="Alias for #titleize" ilk="function" />
              <scope name="titleize" signature="()" doc="Capitalizes all the words and replaces some characters in&#xA;the string to create a nicer looking title. Titleize is&#xA;meant for creating pretty output. It is not used in the&#xA;Rails internals.titleize is also aliased as as titlecase&#xA;Examples  &quot;man from the&#xA;boondocks&quot;.titleize #=&gt; &quot;Man From The&#xA;Boondocks&quot;" ilk="function" />
              <scope name="underscore" signature="()" doc="The reverse of camelize. Makes an underscored form from the&#xA;expression in the string.Changes &apos;::&apos; to &apos;/&apos; to convert&#xA;namespaces to paths.Examples  &quot;ActiveRecord&quot;.underscore #=&gt; &quot;active_record&quot;&#xA;  &quot;ActiveRecord::Errors&quot;.underscore #=&gt; active_record/errors&#xA;" ilk="function" />
            </scope>
            <scope name="Iterators" ilk="namespace">
              <scope name="each_char" signature="() {|scanner.scan(char || break)| ...}" doc="Yields a single-character string for each character in the&#xA;string. When $KCODE = &apos;UTF8&apos;, multi-byte characters are&#xA;yielded appropriately." ilk="function" />
            </scope>
            <scope name="StartsEndsWith" ilk="namespace">
              <scope name="ends_with?" signature="(suffix)" doc="Does the string end with the specified suffix?" ilk="function" />
              <scope name="starts_with?" signature="(prefix)" doc="Does the string start with the specified prefix?" ilk="function" />
            </scope>
          </scope>
          <scope name="Time" ilk="namespace">
            <scope name="Calculations" ilk="namespace">
              <scope name="ClassMethods" ilk="namespace">
                <scope name="days_in_month" signature="(month, year=nil)" doc="Return the number of days in the given month. If a year is&#xA;given, February will return the correct number of days for&#xA;leap years. Otherwise, this method will always report&#xA;February as having 28 days." ilk="function" />
              </scope>
              <scope name="append_features" attributes="__classmethod__" ilk="function" />
              <scope name="advance" signature="(options)" doc="Uses Date to provide precise Time calculations for&#xA;years, months, and days. The options parameter takes a hash&#xA;with any of these keys: :months, :days, :years." ilk="function" />
              <scope name="ago" signature="(seconds)" doc="Returns a new Time representing the time a number of seconds&#xA;ago, this is basically a wrapper around the Numeric&#xA;extension Do not use this method in combination with&#xA;x.months, use months_ago instead!" ilk="function" />
              <scope name="append_features" ilk="function" />
              <scope name="at_beginning_of_day" signature="()" doc="Alias for #beginning_of_day" ilk="function" />
              <scope name="at_beginning_of_month" signature="()" doc="Alias for #beginning_of_month" ilk="function" />
              <scope name="at_beginning_of_quarter" signature="()" doc="Alias for #beginning_of_quarter" ilk="function" />
              <scope name="at_beginning_of_week" signature="()" doc="Alias for #beginning_of_week" ilk="function" />
              <scope name="at_beginning_of_year" signature="()" doc="Alias for #beginning_of_year" ilk="function" />
              <scope name="at_end_of_month" signature="()" doc="Alias for #end_of_month" ilk="function" />
              <scope name="at_midnight" signature="()" doc="Alias for #beginning_of_day" ilk="function" />
              <scope name="beginning_of_day" signature="()" doc="Returns a new Time representing the start of the day (0:00)" ilk="function" />
              <scope name="beginning_of_month" signature="()" doc="Returns a new Time representing the start of the month (1st&#xA;of the month, 0:00)" ilk="function" />
              <scope name="beginning_of_quarter" signature="()" doc="Returns a new Time representing the start of the&#xA;quarter (1st of january, april, july, october, 0:00)" ilk="function" />
              <scope name="beginning_of_week" signature="()" doc="Returns a new Time representing the &quot;start&quot; of&#xA;this week (Monday, 0:00)" ilk="function" />
              <scope name="beginning_of_year" signature="()" doc="Returns a new Time representing the start of the year (1st&#xA;of january, 0:00)" ilk="function" />
              <scope name="change" signature="(options)" doc="Returns a new Time where one or more of the elements have&#xA;been changed according to the options parameter. The time&#xA;options (hour, minute, sec, usec) reset cascadingly, so if&#xA;only the hour is passed, then minute, sec, and usec is set&#xA;to 0. If the hour and minute is passed, then sec and usec is&#xA;set to 0." ilk="function" />
              <scope name="end_of_month" signature="()" doc="Returns a new Time representing the end of the month (last&#xA;day of the month, 0:00)" ilk="function" />
              <scope name="in" signature="(seconds)" doc="Alias for #since" ilk="function" />
              <scope name="last_month" signature="()" doc="Short-hand for months_ago(1)" ilk="function" />
              <scope name="last_year" signature="()" doc="Short-hand for years_ago(1)" ilk="function" />
              <scope name="midnight" signature="()" doc="Alias for #beginning_of_day" ilk="function" />
              <scope name="monday" signature="()" doc="Alias for #beginning_of_week" ilk="function" />
              <scope name="months_ago" signature="(months)" doc="Returns a new Time representing the time a number of&#xA;specified months ago" ilk="function" />
              <scope name="months_since" signature="(months)" ilk="function" />
              <scope name="next_month" signature="()" doc="Short-hand for months_since(1)" ilk="function" />
              <scope name="next_week" signature="(day = :monday)" doc="Returns a new Time representing the start of the given day&#xA;in next week (default is Monday)." ilk="function" />
              <scope name="next_year" signature="()" doc="Short-hand for years_since(1)" ilk="function" />
              <scope name="seconds_since_midnight" signature="()" doc="Seconds since midnight: Time.now.seconds_since_midnight" ilk="function" />
              <scope name="since" signature="(seconds)" doc=" Returns a new Time representing the time a number of&#xA;seconds since the instance time, this is basically a wrapper&#xA;aroundthe Numeric extension. Do not use this method in&#xA;combination with x.months, use months_since instead!" ilk="function" />
              <scope name="tomorrow" signature="()" doc="Convenience method which returns a new Time representing the&#xA;time 1 day since the instance time" ilk="function" />
              <scope name="years_ago" signature="(years)" doc="Returns a new Time representing the time a number of&#xA;specified years ago" ilk="function" />
              <scope name="years_since" signature="(years)" ilk="function" />
              <scope name="yesterday" signature="()" doc="Convenience method which returns a new Time representing the&#xA;time 1 day ago" ilk="function" />
            </scope>
            <scope name="Conversions" ilk="namespace">
              <scope name="append_features" attributes="__classmethod__" ilk="function" />
              <scope name="append_features" ilk="function" />
              <scope name="to_date" ilk="function" />
              <scope name="to_formatted_s" signature="(format = :default)" ilk="function" />
              <scope name="to_time" signature="()" doc="To be able to keep Dates and Times interchangeable on&#xA;conversions" ilk="function" />
              <variable name="DATE_FORMATS" citdl="Hash" attributes="__const__" />
            </scope>
          </scope>
        </scope>
        <scope name="JSON" ilk="namespace">
          <scope name="CircularReferenceError" classrefs="StandardError" ilk="class">
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <variable name="FrameworkRegexp" citdl="Regexp" attributes="__const__" />
            <variable name="TraceSubstitutions" citdl="Array" attributes="__const__" />
          </scope>
          <scope name="Encoders" ilk="namespace">
            <scope name="[]" attributes="__classmethod__" ilk="function" />
            <scope name="define_encoder" attributes="__classmethod__" ilk="function" />
            <scope name="encoders" attributes="__classmethod__" ilk="function" />
            <scope name="encoders=" attributes="__classmethod__" ilk="function" />
            <scope name="[]" ilk="function" />
            <scope name="define_encoder" ilk="function" />
            <scope name="encoders" ilk="function" />
            <scope name="encoders=" ilk="function" />
          </scope>
          <scope name="Variable" classrefs="String" ilk="class">
            <import symbol="ActiveSupport::CoreExtensions::String::Access" />
            <import symbol="ActiveSupport::CoreExtensions::String::Conversions" />
            <import symbol="ActiveSupport::CoreExtensions::String::Inflections" />
            <import symbol="ActiveSupport::CoreExtensions::String::Iterators" />
            <import symbol="ActiveSupport::CoreExtensions::String::StartsEndsWith" />
            <import symbol="Base64" />
            <import symbol="Base64::Deprecated" />
            <import symbol="Comparable" />
            <import symbol="Enumerable" />
          </scope>
          <scope name="encode" attributes="__classmethod__" ilk="function" />
          <scope name="raise_on_circular_reference" attributes="__classmethod__" ilk="function" />
          <scope name="encode" ilk="function" />
        </scope>
        <scope name="OptionMerger" classrefs="Object" ilk="class">
          <import symbol="Base64" />
          <import symbol="Base64::Deprecated" />
        </scope>
      </scope>
      <scope name="Array" ilk="class">
        <scope name="first_match" ilk="function" />
        <scope name="group_by" ilk="function" />
        <scope name="in_groups_of" ilk="function" />
        <scope name="to_param" ilk="function" />
        <scope name="to_sentence" ilk="function" />
        <scope name="to_set" ilk="function" />
        <scope name="to_xml" ilk="function" />
        <scope name="yaml_initialize" ilk="function" />
      </scope>
      <scope name="CGI" ilk="class">
        <scope name="escapeHTML_fail_on_nil" attributes="__classmethod__" ilk="function" />
        <scope name="escape_skipping_slashes" attributes="__classmethod__" ilk="function" />
        <scope name="parameters" ilk="function" />
        <scope name="query_parameters" ilk="function" />
        <scope name="redirect" ilk="function" />
        <scope name="request_parameters" ilk="function" />
        <scope name="session" ilk="function" />
      </scope>
      <scope name="Date" ilk="class">
        <scope name="_load" attributes="__classmethod__" ilk="function" />
        <scope name="ajd_to_amjd" attributes="__classmethod__" ilk="function" />
        <scope name="ajd_to_jd" attributes="__classmethod__" ilk="function" />
        <scope name="amjd_to_ajd" attributes="__classmethod__" ilk="function" />
        <scope name="civil" attributes="__classmethod__" ilk="function" />
        <scope name="civil_to_jd" attributes="__classmethod__" ilk="function" />
        <scope name="commercial" attributes="__classmethod__" ilk="function" />
        <scope name="commercial_to_jd" attributes="__classmethod__" ilk="function" />
        <scope name="day_fraction_to_time" attributes="__classmethod__" ilk="function" />
        <scope name="exist1?" attributes="__classmethod__" ilk="function" />
        <scope name="exist2?" attributes="__classmethod__" ilk="function" />
        <scope name="exist3?" attributes="__classmethod__" ilk="function" />
        <scope name="exist?" attributes="__classmethod__" ilk="function" />
        <scope name="existw?" attributes="__classmethod__" ilk="function" />
        <scope name="gregorian_leap?" attributes="__classmethod__" ilk="function" />
        <scope name="jd" attributes="__classmethod__" ilk="function" />
        <scope name="jd_to_ajd" attributes="__classmethod__" ilk="function" />
        <scope name="jd_to_civil" attributes="__classmethod__" ilk="function" />
        <scope name="jd_to_commercial" attributes="__classmethod__" ilk="function" />
        <scope name="jd_to_ld" attributes="__classmethod__" ilk="function" />
        <scope name="jd_to_mjd" attributes="__classmethod__" ilk="function" />
        <scope name="jd_to_ordinal" attributes="__classmethod__" ilk="function" />
        <scope name="jd_to_wday" attributes="__classmethod__" ilk="function" />
        <scope name="julian_leap?" attributes="__classmethod__" ilk="function" />
        <scope name="ld_to_jd" attributes="__classmethod__" ilk="function" />
        <scope name="leap?" attributes="__classmethod__" ilk="function" />
        <scope name="mjd_to_jd" attributes="__classmethod__" ilk="function" />
        <scope name="new" attributes="__classmethod__" ilk="function" />
        <scope name="new0" attributes="__classmethod__" ilk="function" />
        <scope name="new1" attributes="__classmethod__" ilk="function" />
        <scope name="new2" attributes="__classmethod__" ilk="function" />
        <scope name="new3" attributes="__classmethod__" ilk="function" />
        <scope name="neww" attributes="__classmethod__" ilk="function" />
        <scope name="ns?" attributes="__classmethod__" ilk="function" />
        <scope name="ordinal" attributes="__classmethod__" ilk="function" />
        <scope name="ordinal_to_jd" attributes="__classmethod__" ilk="function" />
        <scope name="os?" attributes="__classmethod__" ilk="function" />
        <scope name="parse" attributes="__classmethod__" ilk="function" />
        <scope name="strptime" attributes="__classmethod__" ilk="function" />
        <scope name="time_to_day_fraction" attributes="__classmethod__" ilk="function" />
        <scope name="today" attributes="__classmethod__" ilk="function" />
        <scope name="valid_civil?" attributes="__classmethod__" ilk="function" />
        <scope name="valid_commercial?" attributes="__classmethod__" ilk="function" />
        <scope name="valid_date?" attributes="__classmethod__" ilk="function" />
        <scope name="valid_jd?" attributes="__classmethod__" ilk="function" />
        <scope name="valid_ordinal?" attributes="__classmethod__" ilk="function" />
        <scope name="+" ilk="function" />
        <scope name="-" ilk="function" />
        <scope name="&lt;" ilk="function" />
        <scope name="&lt;&lt;" ilk="function" />
        <scope name="&lt;=" ilk="function" />
        <scope name="&lt;=&gt;" ilk="function" />
        <scope name="&gt;" ilk="function" />
        <scope name="&gt;=" ilk="function" />
        <scope name="&gt;&gt;" ilk="function" />
        <scope name="_dump" ilk="function" />
        <scope name="ajd" ilk="function" />
        <scope name="amjd" ilk="function" />
        <scope name="between?" ilk="function" />
        <scope name="cwday" ilk="function" />
        <scope name="cweek" ilk="function" />
        <scope name="cwyear" ilk="function" />
        <scope name="day" ilk="function" />
        <scope name="day_fraction" ilk="function" />
        <scope name="downto" ilk="function" />
        <scope name="england" ilk="function" />
        <scope name="gregorian" ilk="function" />
        <scope name="italy" ilk="function" />
        <scope name="jd" ilk="function" />
        <scope name="julian" ilk="function" />
        <scope name="ld" ilk="function" />
        <scope name="leap?" ilk="function" />
        <scope name="mday" ilk="function" />
        <scope name="mjd" ilk="function" />
        <scope name="mon" ilk="function" />
        <scope name="month" ilk="function" />
        <scope name="new_start" ilk="function" />
        <scope name="newsg" ilk="function" />
        <scope name="next" ilk="function" />
        <scope name="ns?" ilk="function" />
        <scope name="os?" ilk="function" />
        <scope name="sg" ilk="function" />
        <scope name="start" ilk="function" />
        <scope name="step" ilk="function" />
        <scope name="succ" ilk="function" />
        <scope name="to_date" ilk="function" />
        <scope name="to_default_s" ilk="function" />
        <scope name="to_formatted_s" ilk="function" />
        <scope name="to_time" ilk="function" />
        <scope name="upto" ilk="function" />
        <scope name="wday" ilk="function" />
        <scope name="xmlschema" ilk="function" />
        <scope name="yday" ilk="function" />
        <scope name="year" ilk="function" />
      </scope>
      <scope name="Exception" ilk="class">
        <scope name="yaml_new" attributes="__classmethod__" ilk="function" />
        <scope name="application_backtrace" ilk="function" />
        <scope name="blame_file!" ilk="function" />
        <scope name="blamed_files" ilk="function" />
        <scope name="clean_backtrace" ilk="function" />
        <scope name="clean_message" ilk="function" />
        <scope name="copy_blame!" ilk="function" />
        <scope name="describe_blame" ilk="function" />
        <scope name="framework_backtrace" ilk="function" />
      </scope>
      <scope name="Hash" ilk="class">
        <scope name="assert_valid_keys" ilk="function" />
        <scope name="diff" ilk="function" />
        <scope name="first_match" ilk="function" />
        <scope name="group_by" ilk="function" />
        <scope name="reverse_merge" ilk="function" />
        <scope name="reverse_merge!" ilk="function" />
        <scope name="reverse_update" ilk="function" />
        <scope name="stringify_keys" ilk="function" />
        <scope name="stringify_keys!" ilk="function" />
        <scope name="symbolize_keys" ilk="function" />
        <scope name="symbolize_keys!" ilk="function" />
        <scope name="to_options" ilk="function" />
        <scope name="to_options!" ilk="function" />
        <scope name="to_set" ilk="function" />
        <scope name="to_xml" ilk="function" />
        <scope name="with_indifferent_access" ilk="function" />
        <scope name="yaml_initialize" ilk="function" />
      </scope>
      <scope name="Integer" ilk="class">
        <scope name="ago" ilk="function" />
        <scope name="byte" ilk="function" />
        <scope name="bytes" ilk="function" />
        <scope name="day" ilk="function" />
        <scope name="days" ilk="function" />
        <scope name="even?" ilk="function" />
        <scope name="exabyte" ilk="function" />
        <scope name="exabytes" ilk="function" />
        <scope name="fortnight" ilk="function" />
        <scope name="fortnights" ilk="function" />
        <scope name="from_now" ilk="function" />
        <scope name="gigabyte" ilk="function" />
        <scope name="gigabytes" ilk="function" />
        <scope name="hour" ilk="function" />
        <scope name="hours" ilk="function" />
        <scope name="kilobyte" ilk="function" />
        <scope name="kilobytes" ilk="function" />
        <scope name="megabyte" ilk="function" />
        <scope name="megabytes" ilk="function" />
        <scope name="minute" ilk="function" />
        <scope name="minutes" ilk="function" />
        <scope name="month" ilk="function" />
        <scope name="months" ilk="function" />
        <scope name="multiple_of?" ilk="function" />
        <scope name="odd?" ilk="function" />
        <scope name="ordinalize" ilk="function" />
        <scope name="petabyte" ilk="function" />
        <scope name="petabytes" ilk="function" />
        <scope name="second" ilk="function" />
        <scope name="seconds" ilk="function" />
        <scope name="since" ilk="function" />
        <scope name="terabyte" ilk="function" />
        <scope name="terabytes" ilk="function" />
        <scope name="until" ilk="function" />
        <scope name="week" ilk="function" />
        <scope name="weeks" ilk="function" />
        <scope name="year" ilk="function" />
        <scope name="years" ilk="function" />
      </scope>
      <scope name="Logger" ilk="class">
        <scope name="define_around_helper" attributes="__classmethod__" ilk="function" />
        <scope name="silencer" attributes="__classmethod__" ilk="function" />
        <scope name="silencer=" attributes="__classmethod__" ilk="function" />
        <scope name="around_debug" ilk="function" />
        <scope name="around_error" ilk="function" />
        <scope name="around_fatal" ilk="function" />
        <scope name="around_info" ilk="function" />
        <scope name="silence" ilk="function" />
        <scope name="silencer" ilk="function" />
        <scope name="silencer=" ilk="function" />
      </scope>
      <scope name="Numeric" ilk="class">
        <scope name="ago" ilk="function" />
        <scope name="byte" ilk="function" />
        <scope name="bytes" ilk="function" />
        <scope name="day" ilk="function" />
        <scope name="days" ilk="function" />
        <scope name="exabyte" ilk="function" />
        <scope name="exabytes" ilk="function" />
        <scope name="fortnight" ilk="function" />
        <scope name="fortnights" ilk="function" />
        <scope name="from_now" ilk="function" />
        <scope name="gigabyte" ilk="function" />
        <scope name="gigabytes" ilk="function" />
        <scope name="hour" ilk="function" />
        <scope name="hours" ilk="function" />
        <scope name="kilobyte" ilk="function" />
        <scope name="kilobytes" ilk="function" />
        <scope name="megabyte" ilk="function" />
        <scope name="megabytes" ilk="function" />
        <scope name="minute" ilk="function" />
        <scope name="minutes" ilk="function" />
        <scope name="month" ilk="function" />
        <scope name="months" ilk="function" />
        <scope name="petabyte" ilk="function" />
        <scope name="petabytes" ilk="function" />
        <scope name="second" ilk="function" />
        <scope name="seconds" ilk="function" />
        <scope name="since" ilk="function" />
        <scope name="terabyte" ilk="function" />
        <scope name="terabytes" ilk="function" />
        <scope name="until" ilk="function" />
        <scope name="week" ilk="function" />
        <scope name="weeks" ilk="function" />
        <scope name="year" ilk="function" />
        <scope name="years" ilk="function" />
      </scope>
      <scope name="Object" ilk="class">
        <scope name="method_added" attributes="__classmethod__" ilk="function" />
        <scope name="yaml_tag_subclasses?" attributes="__classmethod__" ilk="function" />
        <scope name="`" ilk="function" />
        <scope name="b64encode" ilk="function" />
        <scope name="blank?" ilk="function" />
        <scope name="copy_instance_variables_from" ilk="function" />
        <scope name="daemonize" ilk="function" />
        <scope name="dclone" ilk="function" />
        <scope name="decode64" ilk="function" />
        <scope name="decode_b" ilk="function" />
        <scope name="enable_warnings" ilk="function" />
        <scope name="encode64" ilk="function" />
        <scope name="extend_with_included_modules_from" ilk="function" />
        <scope name="extended_by" ilk="function" />
        <scope name="instance_exec" ilk="function" />
        <scope name="instance_values" ilk="function" />
        <scope name="load" ilk="function" />
        <scope name="remove_subclasses_of" ilk="function" />
        <scope name="require_library_or_gem" ilk="function" />
        <scope name="returning" ilk="function" />
        <scope name="silence_stderr" ilk="function" />
        <scope name="silence_stream" ilk="function" />
        <scope name="silence_warnings" ilk="function" />
        <scope name="subclasses_of" ilk="function" />
        <scope name="suppress" ilk="function" />
        <scope name="taguri" ilk="function" />
        <scope name="taguri=" ilk="function" />
        <scope name="to_json" ilk="function" />
        <scope name="to_yaml" ilk="function" />
        <scope name="to_yaml_properties" ilk="function" />
        <scope name="to_yaml_style" ilk="function" />
        <scope name="with_options" ilk="function" />
      </scope>
      <scope name="Pathname" ilk="class">
        <scope name="clean_within" attributes="__classmethod__" ilk="function" />
      </scope>
      <scope name="Proc" ilk="class">
        <scope name="bind" ilk="function" />
      </scope>
      <scope name="Range" ilk="class">
        <scope name="yaml_new" attributes="__classmethod__" ilk="function" />
        <scope name="first_match" ilk="function" />
        <scope name="group_by" ilk="function" />
        <scope name="to_default_s" ilk="function" />
        <scope name="to_formatted_s" ilk="function" />
        <scope name="to_set" ilk="function" />
      </scope>
      <scope name="String" ilk="class">
        <scope name="yaml_new" attributes="__classmethod__" ilk="function" />
        <scope name="at" ilk="function" />
        <scope name="camelcase" ilk="function" />
        <scope name="camelize" ilk="function" />
        <scope name="classify" ilk="function" />
        <scope name="constantize" ilk="function" />
        <scope name="dasherize" ilk="function" />
        <scope name="demodulize" ilk="function" />
        <scope name="each_char" ilk="function" />
        <scope name="ends_with?" ilk="function" />
        <scope name="first" ilk="function" />
        <scope name="first_match" ilk="function" />
        <scope name="foreign_key" ilk="function" />
        <scope name="from" ilk="function" />
        <scope name="group_by" ilk="function" />
        <scope name="humanize" ilk="function" />
        <scope name="is_binary_data?" ilk="function" />
        <scope name="is_complex_yaml?" ilk="function" />
        <scope name="iseuc" ilk="function" />
        <scope name="issjis" ilk="function" />
        <scope name="isutf8" ilk="function" />
        <scope name="kconv" ilk="function" />
        <scope name="last" ilk="function" />
        <scope name="pluralize" ilk="function" />
        <scope name="singularize" ilk="function" />
        <scope name="starts_with?" ilk="function" />
        <scope name="tableize" ilk="function" />
        <scope name="titlecase" ilk="function" />
        <scope name="titleize" ilk="function" />
        <scope name="to" ilk="function" />
        <scope name="to_date" ilk="function" />
        <scope name="to_set" ilk="function" />
        <scope name="to_time" ilk="function" />
        <scope name="toeuc" ilk="function" />
        <scope name="tojis" ilk="function" />
        <scope name="tosjis" ilk="function" />
        <scope name="toutf16" ilk="function" />
        <scope name="toutf8" ilk="function" />
        <scope name="underscore" ilk="function" />
      </scope>
      <scope name="Symbol" ilk="class">
        <scope name="yaml_new" attributes="__classmethod__" ilk="function" />
        <scope name="to_proc" signature="()" doc="Turns the symbol into a simple proc, which is especially&#xA;useful for enumerations. Examples:  # The same as&#xA;people.collect { |p| p.name }  people.collect(&amp;:name)&#xA;  # The same as&#xA;people.select { |p| p.manager? }.collect { |p| p.salary }&#xA;  people.select(&amp;:manager?).collect(&amp;:salary)" ilk="function" />
      </scope>
      <scope name="Time" ilk="class">
        <scope name="days_in_month" attributes="__classmethod__" ilk="function" />
        <scope name="yaml_new" attributes="__classmethod__" ilk="function" />
        <scope name="advance" ilk="function" />
        <scope name="ago" ilk="function" />
        <scope name="at_beginning_of_day" ilk="function" />
        <scope name="at_beginning_of_month" ilk="function" />
        <scope name="at_beginning_of_quarter" ilk="function" />
        <scope name="at_beginning_of_week" ilk="function" />
        <scope name="at_beginning_of_year" ilk="function" />
        <scope name="at_end_of_month" ilk="function" />
        <scope name="at_midnight" ilk="function" />
        <scope name="beginning_of_day" ilk="function" />
        <scope name="beginning_of_month" ilk="function" />
        <scope name="beginning_of_quarter" ilk="function" />
        <scope name="beginning_of_week" ilk="function" />
        <scope name="beginning_of_year" ilk="function" />
        <scope name="change" ilk="function" />
        <scope name="end_of_month" ilk="function" />
        <scope name="in" ilk="function" />
        <scope name="last_month" ilk="function" />
        <scope name="last_year" ilk="function" />
        <scope name="midnight" ilk="function" />
        <scope name="monday" ilk="function" />
        <scope name="months_ago" ilk="function" />
        <scope name="months_since" ilk="function" />
        <scope name="next_month" ilk="function" />
        <scope name="next_week" ilk="function" />
        <scope name="next_year" ilk="function" />
        <scope name="seconds_since_midnight" ilk="function" />
        <scope name="since" ilk="function" />
        <scope name="to_date" ilk="function" />
        <scope name="to_default_s" ilk="function" />
        <scope name="to_formatted_s" ilk="function" />
        <scope name="to_time" ilk="function" />
        <scope name="tomorrow" ilk="function" />
        <scope name="years_ago" ilk="function" />
        <scope name="years_since" ilk="function" />
        <scope name="yesterday" ilk="function" />
      </scope>
    </scope>
  </file>
</codeintel>

