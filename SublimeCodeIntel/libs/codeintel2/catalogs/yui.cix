<?xml version="1.0" encoding="UTF-8"?>
<codeintel description="Yahoo! User Interface Library - v2.8.1" name="YUI" version="2.0">
  <file lang="JavaScript" path="yui">
    <scope ilk="blob" lang="JavaScript" name="yui_v2.8.1">
      <scope doc="The LogMsg class defines a single log message." ilk="class" name="LogMsg">
        <scope attributes="__ctor__" doc="The LogMsg class defines a single log message." ilk="function" name="LogMsg" signature="LogMsg(oConfigs)">
          <variable citdl="Object" doc="Object literal of configuration params." ilk="argument" name="oConfigs" />
        </scope>
        <variable citdl="String" doc="Log message." name="msg" />
        <variable citdl="String" doc="Log category." name="category" />
        <variable citdl="Date" doc="Log timestamp." name="time" />
        <variable citdl="String" doc="Log source detail. The remainder of the string passed in as the source argument, not&#xA;including the first word (if any)." name="sourceDetail" />
        <variable citdl="String" doc="Log source. The first word passed in as the source argument." name="source" />
      </scope>
      <scope doc="The LogReader class provides UI to read messages logged to YAHOO.widget.Logger." ilk="class" name="LogReader">
        <scope attributes="__ctor__" doc="The LogReader class provides UI to read messages logged to YAHOO.widget.Logger." ilk="function" name="LogReader" signature="LogReader(elContainer, elContainer, oConfigs)">
          <variable citdl="HTMLElement" doc="(optional) DOM element reference of an existing DIV." ilk="argument" name="elContainer" />
          <variable citdl="String" doc="(optional) String ID of an existing DIV." ilk="argument" name="elContainer" />
          <variable citdl="Object" doc="(optional) Object literal of configuration params." ilk="argument" name="oConfigs" />
        </scope>
        <scope doc="Gets timestamp of the last log." ilk="function" name="getLastTime" signature="getLastTime() =&gt; Date" />
        <scope doc="Handles Logger&apos;s resetEvent." ilk="function" name="_onReset" signature="_onReset(sType, aArgs, oSelf)">
          <variable citdl="String" doc="The event." ilk="argument" name="sType" />
          <variable citdl="Object[]" doc="Data passed from event firer." ilk="argument" name="aArgs" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Adds the UI to the DOM, attaches event listeners, and bootstraps initial&#xA;UI state." ilk="function" name="render" signature="render()" />
        <scope doc="Shows UI of LogReader. Logging functionality is not disrupted." ilk="function" name="show" signature="show()" />
        <scope doc="Updates title to given string." ilk="function" name="setTitle" signature="setTitle(sTitle)">
          <variable citdl="String" doc="New title." ilk="argument" name="sTitle" />
        </scope>
        <scope doc="Initializes the instance&apos;s message buffer, start time, etc" ilk="function" name="_init" signature="_init(container, config)">
          <variable citdl="String|HTMLElement" doc="(optional) the render target" ilk="argument" name="container" />
          <variable citdl="Object" doc="(optional) instance configuration" ilk="argument" name="config" />
        </scope>
        <scope doc="Returns array of enabled categories." ilk="function" name="getCategories" signature="getCategories() =&gt; String[]" />
        <scope doc="Creates a checkbox in the LogReader footer element to filter by source." ilk="function" name="_createSourceCheckbox" signature="_createSourceCheckbox(sSource)">
          <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
        </scope>
        <scope doc="Collapses UI of LogReader. Logging functionality is not disrupted." ilk="function" name="collapse" signature="collapse()" />
        <scope doc="Initializes category filters." ilk="function" name="_initCategories" signature="_initCategories()" />
        <scope doc="Pauses output of log messages. While paused, log messages are not lost, but&#xA;get saved to a buffer and then output upon resume of LogReader." ilk="function" name="pause" signature="pause()" />
        <scope doc="Hides UI of LogReader. Logging functionality is not disrupted." ilk="function" name="hide" signature="hide()" />
        <scope doc="Cycles through an array of log messages, and outputs each one to the console&#xA;if its category has not been filtered out." ilk="function" name="_printToConsole" signature="_printToConsole(aEntries)">
          <variable citdl="Object[]" doc="Array of LogMsg objects to output to console." ilk="argument" name="aEntries" />
        </scope>
        <scope doc="Initializes the header element." ilk="function" name="_initHeaderEl" signature="_initHeaderEl()" />
        <scope doc="Initializes Drag and Drop on the header element." ilk="function" name="_initDragDrop" signature="_initDragDrop()" />
        <scope doc="Sends buffer of log messages to output and clears buffer." ilk="function" name="_printBuffer" signature="_printBuffer()" />
        <scope doc="Public accessor to the unique name of the LogReader instance." ilk="function" name="toString" signature="toString() =&gt; String" />
        <scope doc="Shows log messages associated with given source." ilk="function" name="showSource" signature="showSource(Source)">
          <variable citdl="String" doc="name." ilk="argument" name="Source" />
        </scope>
        <scope doc="Removes the UI from the DOM entirely and detaches all event listeners.&#xA;Implementers should note that Logger will still accumulate messages." ilk="function" name="destroy" signature="destroy()" />
        <scope doc="Shows log messages associated with given category." ilk="function" name="showCategory" signature="showCategory(Category)">
          <variable citdl="String" doc="name." ilk="argument" name="Category" />
        </scope>
        <scope doc="Handles click events on the collapse button." ilk="function" name="_onClickCollapseBtn" signature="_onClickCollapseBtn(v, oSelf)">
          <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
          <variable citdl="Object" doc="The LogReader instance" ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Handles Logger&apos;s categoryCreateEvent." ilk="function" name="_onCategoryCreate" signature="_onCategoryCreate(sType, aArgs, oSelf)">
          <variable citdl="String" doc="The event." ilk="argument" name="sType" />
          <variable citdl="Object[]" doc="Data passed from event firer." ilk="argument" name="aArgs" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Handles click events on the clear button." ilk="function" name="_onClickClearBtn" signature="_onClickClearBtn(v, oSelf)">
          <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Resumes output of log messages, including outputting any log messages that&#xA;have been saved to buffer while paused." ilk="function" name="resume" signature="resume()" />
        <scope doc="Handles Logger&apos;s sourceCreateEvent." ilk="function" name="_onSourceCreate" signature="_onSourceCreate(sType, aArgs, oSelf)">
          <variable citdl="String" doc="The event." ilk="argument" name="sType" />
          <variable citdl="Object[]" doc="Data passed from event firer." ilk="argument" name="aArgs" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Handles click events on the pause button." ilk="function" name="_onClickPauseBtn" signature="_onClickPauseBtn(v, oSelf)">
          <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Initializes the footer element." ilk="function" name="_initFooterEl" signature="_initFooterEl()" />
        <scope doc="Handles Logger&apos;s newLogEvent." ilk="function" name="_onNewLog" signature="_onNewLog(sType, aArgs, oSelf)">
          <variable citdl="String" doc="The event." ilk="argument" name="sType" />
          <variable citdl="Object[]" doc="Data passed from event firer." ilk="argument" name="aArgs" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Converts input chars &quot;&lt;&quot;, &quot;&gt;&quot;, and &quot;&amp;&quot; to HTML entities." ilk="function" name="html2Text" signature="html2Text(sHtml)">
          <variable citdl="String" doc="String to convert." ilk="argument" name="sHtml" />
        </scope>
        <scope doc="Reprints all log messages in the stack through filters." ilk="function" name="_filterLogs" signature="_filterLogs()" />
        <scope doc="Handles check events on the category filter checkboxes." ilk="function" name="_onCheckCategory" signature="_onCheckCategory(v, oSelf)">
          <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Handles check events on the category filter checkboxes." ilk="function" name="_onCheckSource" signature="_onCheckSource(v, oSelf)">
          <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
          <variable citdl="Object" doc="The LogReader instance." ilk="argument" name="oSelf" />
        </scope>
        <scope doc="Expands UI of LogReader. Logging functionality is not disrupted." ilk="function" name="expand" signature="expand()" />
        <scope doc="Returns array of enabled sources." ilk="function" name="getSources" signature="getSources() =&gt; Array" />
        <scope doc="Initializes source filters." ilk="function" name="_initSources" signature="_initSources()" />
        <scope doc="Hides log messages associated with given category." ilk="function" name="hideCategory" signature="hideCategory(Category)">
          <variable citdl="String" doc="name." ilk="argument" name="Category" />
        </scope>
        <scope doc="Creates the UI for a category filter in the LogReader footer element." ilk="function" name="_createCategoryCheckbox" signature="_createCategoryCheckbox(sCategory)">
          <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
        </scope>
        <scope doc="Initializes the console element." ilk="function" name="_initConsoleEl" signature="_initConsoleEl()" />
        <scope doc="Initializes the primary container element." ilk="function" name="_initContainerEl" signature="_initContainerEl()" />
        <scope doc="Does not delete any log messages, but clears all printed log messages from&#xA;the console. Log messages will be printed out again if user re-filters. The&#xA;static method YAHOO.widget.Logger.reset() should be called in order to&#xA;actually delete log messages." ilk="function" name="clearConsole" signature="clearConsole()" />
        <scope doc="Hides log messages associated with given source." ilk="function" name="hideSource" signature="hideSource(Source)">
          <variable citdl="String" doc="name." ilk="argument" name="Source" />
        </scope>
        <scope doc="Returns related checkbox element for given filter (i.e., category or source)." ilk="function" name="getCheckbox" signature="getCheckbox(Category) =&gt; Array">
          <variable citdl="String" doc="or source name." ilk="argument" name="Category" />
        </scope>
        <variable citdl="String" doc="Public member to access CSS right position of the LogReader container." name="right" />
        <variable citdl="String" doc="Custom output format for log messages.  Defaults to null, which falls&#xA;back to verboseOutput param deciding between LogReader.VERBOSE_TEMPLATE&#xA;and LogReader.BASIC_TEMPLATE.  Use bracketed place holders to mark where&#xA;message info should go.  Available place holder names include:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;category&lt;/li&gt;&#xA;&lt;li&gt;label&lt;/li&gt;&#xA;&lt;li&gt;sourceAndDetail&lt;/li&gt;&#xA;&lt;li&gt;message&lt;/li&gt;&#xA;&lt;li&gt;localTime&lt;/li&gt;&#xA;&lt;li&gt;elapsedTime&lt;/li&gt;&#xA;&lt;li&gt;totalTime&lt;/li&gt;&#xA;&lt;/ul&gt;" name="entryFormat" />
        <variable citdl="String" doc="Public member to access CSS height of the LogReader container." name="height" />
        <variable citdl="Boolean" doc="Whether or not newest message is printed on top." name="newestOnTop" />
        <variable citdl="String" doc="Public member to access CSS width of the LogReader container." name="width" />
        <variable citdl="HTMLElement" doc="Container element for LogReader category filter checkboxes." name="_elCategoryFilters" />
        <variable citdl="Number" doc="Internal class member to index multiple LogReader instances." name="_memberName" />
        <variable citdl="String" doc="Name of LogReader instance." name="_sName" />
        <variable citdl="Boolean" doc="True when LogReader is in a collapsed state, false otherwise." name="isCollapsed" />
        <variable citdl="Boolean" doc="Enables draggable LogReader if DragDrop Utility is present." name="draggable" />
        <variable citdl="Boolean" doc="Whether or not LogReader is enabled to output log messages." name="logReaderEnabled" />
        <variable citdl="Object" doc="Hash of filters and their related checkbox elements." name="_filterCheckboxes" />
        <variable citdl="Number" doc="Maximum number of messages a LogReader console will display." name="thresholdMax" />
        <variable citdl="Object[]" doc="Buffer of log message objects for batch output." name="_buffer" />
        <variable citdl="String" doc="Public member to access CSS bottom position of the LogReader container." name="bottom" />
        <variable citdl="HTMLElement" doc="LogReader buttons container element." name="_elBtns" />
        <variable citdl="HTMLElement" doc="Clear button element." name="_btnClear" />
        <variable citdl="HTMLElement" doc="LogReader collapse element." name="_elCollapse" />
        <variable citdl="HTMLElement" doc="LogReader pause button element." name="_btnPause" />
        <variable citdl="HTMLElement" doc="LogReader container element." name="_elContainer" />
        <variable citdl="Date" doc="Date of last output log message." name="_lastTime" />
        <variable doc="Template used for innerHTML of verbose entry output." name="VERBOSE_TEMPLATE" />
        <variable citdl="String" doc="Public member to access CSS font size of the LogReader container." name="fontSize" />
        <variable citdl="Boolean" doc="Whether or not the footer UI is enabled for the LogReader." name="footerEnabled" />
        <variable citdl="Boolean" doc="Whether or not output is verbose (more readable). Setting to true will make&#xA;output more compact (less readable)." name="verboseOutput" />
        <variable citdl="Number" doc="Output timeout buffer in milliseconds." name="outputBuffer" />
        <variable citdl="HTMLElement" doc="A class member shared by all LogReaders if a container needs to be&#xA;created during instantiation. Will be null if a container element never needs to&#xA;be created on the fly, such as when the implementer passes in their own element." name="_elDefaultContainer" />
        <variable doc="Template used for innerHTML of compact entry output." name="BASIC_TEMPLATE" />
        <variable citdl="String[]" doc="Array of filters for log message categories." name="_categoryFilters" />
        <variable citdl="Number" doc="Number of log messages output to console." name="_consoleMsgCount" />
        <variable citdl="HTMLElement" doc="LogReader console element." name="_elConsole" />
        <variable citdl="HTMLElement" doc="Container element for LogReader source filter checkboxes." name="_elSourceFilters" />
        <variable citdl="Number" doc="When a LogReader console reaches its thresholdMax, it will clear out messages&#xA;and print out the latest thresholdMin number of messages." name="thresholdMin" />
        <variable citdl="HTMLElement" doc="LogReader title header element." name="_title" />
        <variable citdl="String[]" doc="Array of filters for log message sources." name="_sourceFilters" />
        <variable citdl="{Boolean}" doc="Render the LogReader immediately upon instantiation.  If set to false,&#xA;you must call myLogReader.render() to generate the UI." name="autoRender" />
        <variable citdl="HTMLElement" doc="LogReader header element." name="_elHd" />
        <variable citdl="HTMLElement" doc="LogReader footer element." name="_elFt" />
        <variable citdl="HTMLElement" doc="LogReader collapse button element." name="_btnCollapse" />
        <variable citdl="{HTMLElement}" doc="Node template for the log entries" name="ENTRY_TEMPLATE" />
        <variable citdl="Boolean" doc="True when LogReader is in a paused state, false otherwise." name="isPaused" />
        <variable citdl="Number" doc="Batched output timeout ID." name="_timeout" />
        <variable citdl="String" doc="Public member to access CSS top position of the LogReader container." name="top" />
        <variable citdl="String" doc="Public member to access CSS left position of the LogReader container." name="left" />
      </scope>
      <scope doc="The LogWriter class provides a mechanism to log messages through&#xA;YAHOO.widget.Logger from a named source." ilk="class" name="LogWriter">
        <scope attributes="__ctor__" doc="The LogWriter class provides a mechanism to log messages through&#xA;YAHOO.widget.Logger from a named source." ilk="function" name="LogWriter" signature="LogWriter(sSource)">
          <variable citdl="String" doc="Source of LogWriter instance." ilk="argument" name="sSource" />
        </scope>
        <scope doc="Public accessor to get the source name." ilk="function" name="getSource" signature="getSource() =&gt; String" />
        <scope doc="Public accessor to the unique name of the LogWriter instance." ilk="function" name="toString" signature="toString() =&gt; String" />
        <scope doc="Logs a message attached to the source of the LogWriter." ilk="function" name="log" signature="log(sMsg, sCategory)">
          <variable citdl="String" doc="The log message." ilk="argument" name="sMsg" />
          <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
        </scope>
        <scope doc="Public accessor to set the source name." ilk="function" name="setSource" signature="setSource(sSource)">
          <variable citdl="String" doc="Source of LogWriter instance." ilk="argument" name="sSource" />
        </scope>
        <variable citdl="String" doc="Source of the LogWriter instance." name="_source" />
      </scope>
      <scope doc="The YAHOO global namespace object.  If YAHOO is already defined, the&#xA;existing YAHOO object will not be overwritten so that defined&#xA;namespaces are preserved." ilk="namespace" name="YAHOO">
        <scope doc="Registers a module with the YAHOO object" ilk="function" name="register" signature="register(name, mainClass, data)">
          <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
          <variable citdl="Function" doc="a reference to class in the module.  This&#xA;class will be tagged with the version info&#xA;so that it will be possible to identify the&#xA;version that is in use when multiple versions&#xA;have loaded" ilk="argument" name="mainClass" />
          <variable citdl="Object" doc="metadata object for the module.  Currently it&#xA;is expected to contain a &quot;version&quot; property&#xA;and a &quot;build&quot; property at minimum." ilk="argument" name="data" />
        </scope>
        <scope doc="Returns the namespace specified and creates it if it doesn&apos;t exist&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;property.package&quot;);&#xA;YAHOO.namespace(&quot;YAHOO.property.package&quot;);&#xA;&lt;/pre&gt;&#xA;Either of the above would create YAHOO.property, then&#xA;YAHOO.property.package&#xA;Be careful when naming packages. Reserved words may work in some browsers&#xA;and not others. For instance, the following will fail in Safari:&#xA;&lt;pre&gt;&#xA;YAHOO.namespace(&quot;really.long.nested.namespace&quot;);&#xA;&lt;/pre&gt;&#xA;This fails because &quot;long&quot; is a future reserved word in ECMAScript&#xA;For implementation code that uses YUI, do not create your components&#xA;in the namespaces defined by YUI (&#xA;&lt;code&gt;YAHOO.util&lt;/code&gt;, &#xA;&lt;code&gt;YAHOO.widget&lt;/code&gt;, &#xA;&lt;code&gt;YAHOO.lang&lt;/code&gt;, &#xA;&lt;code&gt;YAHOO.tool&lt;/code&gt;, &#xA;&lt;code&gt;YAHOO.example&lt;/code&gt;, &#xA;&lt;code&gt;YAHOO.env&lt;/code&gt;) -- create your own namespace (e.g., &apos;companyname&apos;)." ilk="function" name="namespace" signature="namespace(arguments) =&gt; Object">
          <variable citdl="String*" doc="1-n namespaces to create" ilk="argument" name="arguments" />
        </scope>
        <scope doc="An alias for &lt;a href=&quot;YAHOO.lang.html#augment&quot;&gt;YAHOO.lang.augment&lt;/a&gt;" ilk="function" name="augment" signature="augment(r, s, arguments)">
          <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
          <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
          <variable citdl="String*" doc="zero or more properties methods to &#xA;augment the receiver with.  If none specified, everything&#xA;in the supplier will be used unless it would&#xA;overwrite an existing property in the receiver" ilk="argument" name="arguments" />
        </scope>
        <scope doc="An alias for &lt;a href=&quot;YAHOO.lang.html#extend&quot;&gt;YAHOO.lang.extend&lt;/a&gt;" ilk="function" name="extend" signature="extend(subc, superc, overrides)">
          <variable citdl="Function" doc="the object to modify" ilk="argument" name="subc" />
          <variable citdl="Function" doc="the object to inherit" ilk="argument" name="superc" />
          <variable citdl="Object" doc="additional properties/methods to add to the&#xA;subclass prototype.  These will override the&#xA;matching items obtained from the superclass if present." ilk="argument" name="overrides" />
        </scope>
        <scope doc="Uses YAHOO.widget.Logger to output a log message, if the widget is&#xA;available." ilk="function" name="log" signature="log(msg, cat, src) =&gt; Boolean">
          <variable citdl="String" doc="The message to log." ilk="argument" name="msg" />
          <variable citdl="String" doc="The log category for the message.  Default&#xA;categories are &quot;info&quot;, &quot;warn&quot;, &quot;error&quot;, time&quot;.&#xA;Custom categories can be used as well. (opt)" ilk="argument" name="cat" />
          <variable citdl="String" doc="The source of the the message (opt)" ilk="argument" name="src" />
        </scope>
        <scope doc="YAHOO.env is used to keep track of what is known about the YUI library and&#xA;the browsing environment" ilk="namespace" name="env">
          <scope doc="Returns the version data for the specified module:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;name:&lt;/dt&gt;      &lt;dd&gt;The name of the module&lt;/dd&gt;&#xA;&lt;dt&gt;version:&lt;/dt&gt;   &lt;dd&gt;The version in use&lt;/dd&gt;&#xA;&lt;dt&gt;build:&lt;/dt&gt;     &lt;dd&gt;The build number in use&lt;/dd&gt;&#xA;&lt;dt&gt;versions:&lt;/dt&gt;  &lt;dd&gt;All versions that were registered&lt;/dd&gt;&#xA;&lt;dt&gt;builds:&lt;/dt&gt;    &lt;dd&gt;All builds that were registered.&lt;/dd&gt;&#xA;&lt;dt&gt;mainClass:&lt;/dt&gt; &lt;dd&gt;An object that was was stamped with the&#xA;current version and build. If &#xA;mainClass.VERSION != version or mainClass.BUILD != build,&#xA;multiple versions of pieces of the library have been&#xA;loaded, potentially causing issues.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" name="getVersion" signature="getVersion(name) =&gt; Object">
            <variable citdl="String" doc="the name of the module (event, slider, etc)" ilk="argument" name="name" />
          </scope>
          <variable citdl="Function[]" doc="List of functions that should be executed every time a YUI module&#xA;reports itself." name="listeners" />
          <variable citdl="Object[]" doc="Keeps the version info for all YUI modules that have reported themselves" name="modules" />
          <scope doc="Do not fork for a browser if it can be avoided.  Use feature detection when&#xA;you can.  Use the user agent as a last resort.  YAHOO.env.ua stores a version&#xA;number for the browser engine, 0 otherwise.  This value may or may not map&#xA;to the version number of the browser using the engine.  The value is &#xA;presented as a float so that it can easily be used for boolean evaluation &#xA;as well as for looking for a particular range of versions.  Because of this, &#xA;some of the granularity of the version info may be lost (e.g., Gecko 1.8.0.9 &#xA;reports 1.8)." ilk="namespace" name="ua">
            <variable citdl="boolean" doc="Set to true if the page appears to be in SSL" name="secure" />
            <variable citdl="float" doc="Opera version number or 0.  Example: 9.2" name="opera" />
            <variable citdl="string" doc="The operating system.  Currently only detecting windows or macintosh" name="os" />
            <variable citdl="float" doc="Gecko engine revision number.  Will evaluate to 1 if Gecko &#xA;is detected but the revision could not be found. Other browsers&#xA;will be 0.  Example: 1.8&#xA;&lt;pre&gt;&#xA;Firefox 1.0.0.4: 1.7.8   &lt;-- Reports 1.7&#xA;Firefox 1.5.0.9: 1.8.0.9 &lt;-- Reports 1.8&#xA;Firefox 2.0.0.3: 1.8.1.3 &lt;-- Reports 1.8&#xA;Firefox 3 alpha: 1.9a4   &lt;-- Reports 1.9&#xA;&lt;/pre&gt;" name="gecko" />
            <variable citdl="float" doc="Adobe AIR version number or 0.  Only populated if webkit is detected.&#xA;Example: 1.0" name="air" />
            <variable citdl="string" doc="The mobile property will be set to a string containing any relevant&#xA;user agent information when a modern mobile browser is detected.&#xA;Currently limited to Safari on the iPhone/iPod Touch, Nokia N-series&#xA;devices with the WebKit-based browser, and Opera Mini." name="mobile" />
            <variable citdl="float" doc="Google Caja version number or 0." name="caja" />
            <variable citdl="float" doc="AppleWebKit version.  KHTML browsers that are not WebKit browsers &#xA;will evaluate to 1, other browsers 0.  Example: 418.9.1&#xA;&lt;pre&gt;&#xA;Safari 1.3.2 (312.6): 312.8.1 &lt;-- Reports 312.8 -- currently the &#xA;latest available for Mac OSX 10.3.&#xA;Safari 2.0.2:         416     &lt;-- hasOwnProperty introduced&#xA;Safari 2.0.4:         418     &lt;-- preventDefault fixed&#xA;Safari 2.0.4 (419.3): 418.9.1 &lt;-- One version of Safari may run&#xA;different versions of webkit&#xA;Safari 2.0.4 (419.3): 419     &lt;-- Tiger installations that have been&#xA;updated, but not updated&#xA;to the latest patch.&#xA;Webkit 212 nightly:   522+    &lt;-- Safari 3.0 precursor (with native SVG&#xA;and many major issues fixed).  &#xA;3.x yahoo.com, flickr:422     &lt;-- Safari 3.x hacks the user agent&#xA;string when hitting yahoo.com and &#xA;flickr.com.&#xA;Safari 3.0.4 (523.12):523.12  &lt;-- First Tiger release - automatic update&#xA;from 2.x via the 10.4.11 OS patch&#xA;Webkit nightly 1/2008:525+    &lt;-- Supports DOMContentLoaded event.&#xA;yahoo.com user agent hack removed.&#xA;&lt;/pre&gt;&#xA;http://developer.apple.com/internet/safari/uamatrix.html" name="webkit" />
            <variable citdl="float" doc="Internet Explorer version number or 0.  Example: 6" name="ie" />
          </scope>
        </scope>
        <scope doc="Provides the language utilites and extensions used by the library" ilk="namespace" name="lang">
          <scope doc="Determines wheather or not the provided object is an array." ilk="function" name="isArray" signature="isArray(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Returns a string without any leading or trailing whitespace.  If &#xA;the input is not a string, the input will be returned untouched." ilk="function" name="trim" signature="trim(s) =&gt; string">
            <variable citdl="string" doc="the string to trim" ilk="argument" name="s" />
          </scope>
          <scope doc="Determines whether or not the provided object is a string" ilk="function" name="isString" signature="isString(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Determines whether or not the provided object is a boolean" ilk="function" name="isBoolean" signature="isBoolean(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Utility to set up the prototype, constructor and superclass properties to&#xA;support an inheritance strategy that can chain constructors and methods.&#xA;Static members will not be inherited." ilk="function" name="extend" signature="extend(subc, superc, overrides)">
            <variable citdl="Function" doc="the object to modify" ilk="argument" name="subc" />
            <variable citdl="Function" doc="the object to inherit" ilk="argument" name="superc" />
            <variable citdl="Object" doc="additional properties/methods to add to the&#xA;subclass prototype.  These will override the&#xA;matching items obtained from the superclass &#xA;if present." ilk="argument" name="overrides" />
          </scope>
          <scope doc="Determines whether or not the provided object is null" ilk="function" name="isNull" signature="isNull(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Executes the supplied function in the context of the supplied &#xA;object &apos;when&apos; milliseconds later.  Executes the function a &#xA;single time unless periodic is set to true." ilk="function" name="later" signature="later(when, o, fn, data, periodic) =&gt; ">
            <variable citdl="int" doc="the number of milliseconds to wait until the fn &#xA;is executed" ilk="argument" name="when" />
            <variable doc="the context object" ilk="argument" name="o" />
            <variable citdl="Function|String" doc="the function to execute or the name of &#xA;the method in the &apos;o&apos; object to execute" ilk="argument" name="fn" />
            <variable doc="[Array] data that is provided to the function.  This accepts&#xA;either a single item or an array.  If an array is provided, the&#xA;function is executed with one parameter for each array item.  If&#xA;you need to pass a single array parameter, it needs to be wrapped in&#xA;an array [myarray]" ilk="argument" name="data" />
            <variable citdl="boolean" doc="if true, executes continuously at supplied &#xA;interval until canceled" ilk="argument" name="periodic" />
          </scope>
          <scope doc="Determines whether or not the provided object is undefined" ilk="function" name="isUndefined" signature="isUndefined(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Returns a new object containing all of the properties of&#xA;all the supplied objects.  The properties from later objects&#xA;will overwrite those in earlier objects." ilk="function" name="merge" signature="merge(arguments) =&gt; ">
            <variable citdl="Object*" doc="the objects to merge" ilk="argument" name="arguments" />
          </scope>
          <scope doc="A convenience method for detecting a legitimate non-null value.&#xA;Returns false for null/undefined/NaN, true for other values, &#xA;including 0/false/&apos;&apos;" ilk="function" name="isValue" signature="isValue(o) =&gt; boolean">
            <variable citdl="any" doc="the item to test" ilk="argument" name="o" />
          </scope>
          <scope doc="Determines whether or not the property was added&#xA;to the object instance.  Returns false if the property is not present&#xA;in the object, or was inherited from the prototype.&#xA;This abstraction is provided to enable hasOwnProperty for Safari 1.3.x.&#xA;There is a discrepancy between YAHOO.lang.hasOwnProperty and&#xA;Object.prototype.hasOwnProperty when the property is a primitive added to&#xA;both the instance AND prototype with the same value:&#xA;&lt;pre&gt;&#xA;var A = function() {};&#xA;A.prototype.foo = &apos;foo&apos;;&#xA;var a = new A();&#xA;a.foo = &apos;foo&apos;;&#xA;alert(a.hasOwnProperty(&apos;foo&apos;)); // true&#xA;alert(YAHOO.lang.hasOwnProperty(a, &apos;foo&apos;)); // false when using fallback&#xA;&lt;/pre&gt;" ilk="function" name="hasOwnProperty" signature="hasOwnProperty(o, prop) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
            <variable citdl="string" doc="the name of the property to test" ilk="argument" name="prop" />
          </scope>
          <scope doc="Same as YAHOO.lang.augmentObject, except it only applies prototype &#xA;properties.  This is an alias for augmentProto." ilk="function" name="augment" signature="augment(r, s, arguments)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="String*|boolean" doc="zero or more properties methods to &#xA;augment the receiver with.  If none specified, everything&#xA;in the supplier will be used unless it would&#xA;overwrite an existing property in the receiver.  if true&#xA;is specified as the third parameter, all properties will&#xA;be applied and will overwrite an existing property in&#xA;the receiver" ilk="argument" name="arguments" />
          </scope>
          <scope doc="Same as YAHOO.lang.augmentObject, except it only applies prototype properties" ilk="function" name="augmentProto" signature="augmentProto(r, s, arguments)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="String*|boolean" doc="zero or more properties methods &#xA;to augment the receiver with.  If none specified, everything &#xA;in the supplier will be used unless it would overwrite an existing &#xA;property in the receiver.  if true is specified as the third &#xA;parameter, all properties will be applied and will overwrite an &#xA;existing property in the receiver" ilk="argument" name="arguments" />
          </scope>
          <scope doc="Determines whether or not the provided object is a function.&#xA;Note: Internet Explorer thinks certain functions are objects:&#xA;var obj = document.createElement(&quot;object&quot;);&#xA;YAHOO.lang.isFunction(obj.getAttribute) // reports false in IE&#xA;var input = document.createElement(&quot;input&quot;); // append to body&#xA;YAHOO.lang.isFunction(input.focus) // reports false in IE&#xA;You will have to implement additional tests if these functions&#xA;matter to you." ilk="function" name="isFunction" signature="isFunction(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Determines whether or not the provided object is a legal number" ilk="function" name="isNumber" signature="isNumber(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Returns a simple string representation of the object or array.&#xA;Other types of objects will be returned unprocessed.  Arrays&#xA;are expected to be indexed.  Use object notation for&#xA;associative arrays." ilk="function" name="dump" signature="dump(o, d) =&gt; String">
            <variable citdl="Object" doc="The object to dump" ilk="argument" name="o" />
            <variable citdl="int" doc="How deep to recurse child objects, default 3" ilk="argument" name="d" />
          </scope>
          <scope doc="Determines whether or not the provided object is of type object&#xA;or function" ilk="function" name="isObject" signature="isObject(o) =&gt; boolean">
            <variable citdl="any" doc="The object being testing" ilk="argument" name="o" />
          </scope>
          <scope doc="Does variable substitution on a string. It scans through the string &#xA;looking for expressions enclosed in { } braces. If an expression &#xA;is found, it is used a key on the object.  If there is a space in&#xA;the key, the first word is used for the key and the rest is provided&#xA;to an optional function to be used to programatically determine the&#xA;value (the extra information might be used for this decision). If &#xA;the value for the key in the object, or what is returned from the&#xA;function has a string value, number value, or object value, it is &#xA;substituted for the bracket expression and it repeats.  If this&#xA;value is an object, it uses the Object&apos;s toString() if this has&#xA;been overridden, otherwise it does a shallow dump of the key/value&#xA;pairs." ilk="function" name="substitute" signature="substitute(s, o, f) =&gt; String">
            <variable citdl="String" doc="The string that will be modified." ilk="argument" name="s" />
            <variable citdl="Object" doc="An object containing the replacement values" ilk="argument" name="o" />
            <variable citdl="Function" doc="An optional function that can be used to&#xA;process each match.  It receives the key,&#xA;value, and any extra metadata included with&#xA;the key inside of the braces." ilk="argument" name="f" />
          </scope>
          <scope doc="Applies all properties in the supplier to the receiver if the&#xA;receiver does not have these properties yet.  Optionally, one or &#xA;more methods/properties can be specified (as additional &#xA;parameters).  This option will overwrite the property if receiver &#xA;has it already.  If true is passed as the third parameter, all &#xA;properties will be applied and _will_ overwrite properties in &#xA;the receiver." ilk="function" name="augmentObject" signature="augmentObject(r, s, arguments)">
            <variable citdl="Function" doc="the object to receive the augmentation" ilk="argument" name="r" />
            <variable citdl="Function" doc="the object that supplies the properties to augment" ilk="argument" name="s" />
            <variable citdl="String*|boolean" doc="zero or more properties methods &#xA;to augment the receiver with.  If none specified, everything&#xA;in the supplier will be used unless it would&#xA;overwrite an existing property in the receiver. If true&#xA;is specified as the third parameter, all properties will&#xA;be applied and will overwrite an existing property in&#xA;the receiver" ilk="argument" name="arguments" />
          </scope>
          <variable doc="IE will not enumerate native functions in a derived object even if the&#xA;function was overridden.  This is a workaround for specific functions &#xA;we care about on the Object prototype." name="_IEEnumFix" />
          <scope doc="Provides methods to parse JSON strings and convert objects to JSON strings." ilk="namespace" name="JSON">
            <scope doc="&lt;p&gt;Converts an arbitrary value to a JSON string representation.&lt;/p&gt;&#xA;&lt;p&gt;Objects with cyclical references will trigger an exception.&lt;/p&gt;&#xA;&lt;p&gt;If a whitelist is provided, only matching object keys will be&#xA;included.  Alternately, a replacer function may be passed as the&#xA;second parameter.  This function is executed on every value in the&#xA;input, and its return value will be used in place of the original value.&#xA;This is useful to serialize specialized objects or class instances.&lt;/p&gt;&#xA;&lt;p&gt;If a positive integer or non-empty string is passed as the third&#xA;parameter, the output will be formatted with carriage returns and&#xA;indentation for readability.  If a String is passed (such as &quot;\t&quot;) it&#xA;will be used once for each indentation level.  If a number is passed,&#xA;that number of spaces will be used.&lt;/p&gt;&#xA;&lt;p&gt;When lang.JSON.useNativeStringify is true, this will defer to the&#xA;native JSON.stringify if the browser has a native implementation.&#xA;Otherwise, a JavaScript implementation is used.&lt;/p&gt;" ilk="function" name="stringify" signature="stringify(o, w, space) =&gt; string">
              <variable citdl="MIXED" doc="any arbitrary object to convert to JSON string" ilk="argument" name="o" />
              <variable citdl="Array|Function" doc="(optional) whitelist of acceptable object keys&#xA;to include OR a function(value,key) to alter values&#xA;before serialization" ilk="argument" name="w" />
              <variable citdl="Number|String" doc="(optional) indentation character(s) or&#xA;depthy of spaces to format the output" ilk="argument" name="space" />
            </scope>
            <scope doc="Replace certain Unicode characters that may be handled incorrectly by&#xA;some browser implementations." ilk="function" name="_prepare" signature="_prepare(s) =&gt; String">
              <variable citdl="String" doc="parse input" ilk="argument" name="s" />
            </scope>
            <scope doc="&lt;p&gt;Four step determination whether a string is safe to eval. In three steps,&#xA;escape sequences, safe values, and properly placed open square brackets&#xA;are replaced with placeholders or removed.  Then in the final step, the&#xA;result of all these replacements is checked for invalid characters.&lt;/p&gt;&#xA;&lt;p&gt;This is an alias for isSafe.&lt;/p&gt;" ilk="function" name="isValid" signature="isValid(str) =&gt; boolean">
              <variable citdl="String" doc="JSON string to be tested" ilk="argument" name="str" />
            </scope>
            <scope doc="Serializes a Date instance as a UTC date string.  Used internally by&#xA;the JavaScript implementation of stringify.  If you need a different&#xA;Date serialization format, override this method.  If you change this,&#xA;you should also set useNativeStringify to false, since native JSON&#xA;implementations serialize Dates per the ECMAScript 5 spec.  You&apos;ve been&#xA;warned." ilk="function" name="dateToString" signature="dateToString(d) =&gt; String">
              <variable citdl="Date" doc="The Date to serialize" ilk="argument" name="d" />
            </scope>
            <scope doc="&lt;p&gt;Parse a JSON string, returning the native JavaScript&#xA;representation.&lt;/p&gt;&#xA;&lt;p&gt;When lang.JSON.useNativeParse is true, this will defer to the native&#xA;JSON.parse if the browser has a native implementation.  Otherwise, a&#xA;JavaScript implementation based on http://www.json.org/json2.js&#xA;is used.&lt;/p&gt;" ilk="function" name="parse" signature="parse(s, reviver) =&gt; MIXED">
              <variable citdl="string" doc="JSON string data" ilk="argument" name="s" />
              <variable citdl="function" doc="(optional) function(k,v) passed each key:value&#xA;pair of object literals, allowing pruning or altering values" ilk="argument" name="reviver" />
            </scope>
            <scope doc="Four step determination whether a string is safe to eval. In three steps,&#xA;escape sequences, safe values, and properly placed open square brackets&#xA;are replaced with placeholders or removed.  Then in the final step, the&#xA;result of all these replacements is checked for invalid characters." ilk="function" name="isSafe" signature="isSafe(str) =&gt; boolean">
              <variable citdl="String" doc="JSON string to be tested" ilk="argument" name="str" />
            </scope>
            <scope doc="Reconstitute Date instances from the default JSON UTC serialization.&#xA;Reference this from a reviver function to rebuild Dates during the&#xA;parse operation." ilk="function" name="stringToDate" signature="stringToDate(str) =&gt; Date">
              <variable citdl="String" doc="String serialization of a Date" ilk="argument" name="str" />
            </scope>
            <scope doc="Traverses nested objects, applying a filter or reviver function to&#xA;each value.  The value returned from the function will replace the&#xA;original value in the key:value pair.  If the value returned is&#xA;undefined, the key will be omitted from the returned object." ilk="function" name="_revive" signature="_revive(data, reviver) =&gt; MIXED">
              <variable citdl="MIXED" doc="Any JavaScript data" ilk="argument" name="data" />
              <variable citdl="Function" doc="filter or mutation function" ilk="argument" name="reviver" />
            </scope>
            <variable citdl="{RegExp}" doc="Third step in the safety evaluation.  Regex used to remove all open&#xA;square brackets following a colon, comma, or at the beginning of the&#xA;string." name="_BRACKETS" />
            <variable citdl="{RegExp}" doc="Replace certain Unicode characters that JavaScript may handle incorrectly&#xA;during eval--either by deleting them or treating them as line&#xA;endings--with escape sequences.&#xA;IMPORTANT NOTE: This regex will be used to modify the input if a match is&#xA;found." name="_UNICODE_EXCEPTIONS" />
            <variable citdl="Boolean" doc="Leverage native JSON stringify if the browser has a native&#xA;implementation.  In general, this is a good idea.  See the Known Issues&#xA;section in the JSON user guide for caveats.  The default value is true&#xA;for browsers with native JSON support." name="useNativeStringify" />
            <variable citdl="Boolean" doc="Leverage native JSON parse if the browser has a native implementation.&#xA;In general, this is a good idea.  See the Known Issues section in the&#xA;JSON user guide for caveats.  The default value is true for browsers with&#xA;native JSON support." name="useNativeParse" />
            <variable citdl="{RegExp}" doc="Regex used to replace special characters in strings for JSON&#xA;stringification." name="_SPECIAL_CHARS" />
            <variable citdl="{Object}" doc="Character substitution map for common escapes and special characters." name="_CHARS" />
            <variable citdl="{RegExp}" doc="Final step in the safety evaluation.  Regex used to test the string left&#xA;after all previous replacements for invalid characters." name="_UNSAFE" />
            <variable citdl="{RegExp}" doc="First step in the safety evaluation.  Regex used to replace all escape&#xA;sequences (i.e. &quot;\\&quot;, etc) with &apos;@&apos; characters (a non-JSON character)." name="_ESCAPES" />
            <variable citdl="{RegExp}" doc="Second step in the safety evaluation.  Regex used to replace all simple&#xA;values with &apos;]&apos; characters." name="_VALUES" />
          </scope>
        </scope>
        <scope ilk="namespace" name="tool">
          <scope doc="Profiles functions in JavaScript." ilk="namespace" name="Profiler">
            <scope doc="Returns the average amount of time (in milliseconds) that the function&#xA;with the given name takes to execute." ilk="function" name="getAverage" signature="getAverage(name) =&gt; float">
              <variable citdl="String" doc="The name of the function whose data should be returned.&#xA;If an object type method, it should be &apos;constructor.prototype.methodName&apos;;&#xA;a normal object method would just be &apos;object.methodName&apos;." ilk="argument" name="name" />
            </scope>
            <scope doc="Pauses profiling information for a given name." ilk="function" name="pause" signature="pause(name) =&gt; Void">
              <variable citdl="String" doc="The name of the data point." ilk="argument" name="name" />
            </scope>
            <scope doc="Returns an object containing profiling data for a single function.&#xA;The object has an entry for min, max, avg, calls, and points)." ilk="function" name="getReport" signature="getReport() =&gt; Object" />
            <scope doc="Instruments a method to have profiling calls." ilk="function" name="instrument" signature="instrument(name, method) =&gt; Function">
              <variable citdl="String" doc="The name of the report for the function." ilk="argument" name="name" />
              <variable citdl="Function" doc="The function to instrument." ilk="argument" name="method" />
            </scope>
            <scope doc="Returns an object containing profiling data for all of the functions &#xA;that were profiled. The object has an entry for each function and &#xA;returns all information (min, max, average, calls, etc.) for each&#xA;function." ilk="function" name="getFullReport" signature="getFullReport() =&gt; Object" />
            <scope doc="Sets up an object for profiling. It takes the object and looks for functions.&#xA;When a function is found, registerMethod() is called on it. If set to recrusive&#xA;mode, it will also setup objects found inside of this object for profiling, &#xA;using the same methodology." ilk="function" name="registerObject" signature="registerObject(name, owner, recurse) =&gt; Void">
              <variable citdl="String" doc="The name of the object to profile (shows up in report)." ilk="argument" name="name" />
              <variable citdl="Object" doc="(Optional) The object represented by the name." ilk="argument" name="owner" />
              <variable citdl="Boolean" doc="(Optional) Determines if subobject methods are also profiled." ilk="argument" name="recurse" />
            </scope>
            <scope doc="Removes all report data from the profiler." ilk="function" name="clear" signature="clear(name) =&gt; Void">
              <variable citdl="String" doc="(Optional) The name of the report to clear. If&#xA;omitted, then all report data is cleared." ilk="argument" name="name" />
            </scope>
            <scope doc="Stops profiling information for a given name." ilk="function" name="stop" signature="stop(name) =&gt; Void">
              <variable citdl="String" doc="The name of the data point." ilk="argument" name="name" />
            </scope>
            <scope doc="Returns the number of times that the given function has been called." ilk="function" name="getCallCount" signature="getCallCount(name) =&gt; int">
              <variable citdl="String" doc="The name of the function whose data should be returned." ilk="argument" name="name" />
            </scope>
            <scope doc="Called when a method ends execution. Marks the start and end time of the &#xA;method so it can calculate how long the function took to execute. Also &#xA;updates min/max/avg calculations for the function." ilk="function" name="saveDataPoint" signature="saveDataPoint(name, duration) =&gt; Void">
              <variable citdl="String" doc="The name of the function to mark as stopped." ilk="argument" name="name" />
              <variable citdl="int" doc="The number of milliseconds it took the function to&#xA;execute." ilk="argument" name="duration" />
            </scope>
            <scope doc="Sets up a function for profiling. It essentially overwrites the function with one&#xA;that has instrumentation data. This method also creates an entry for the function&#xA;in the profile report. The original function is stored on the container object." ilk="function" name="registerFunction" signature="registerFunction(name, owner, registerPrototype) =&gt; Void">
              <variable citdl="String" doc="The full name of the function including namespacing. This&#xA;is the name of the function that is stored in the report." ilk="argument" name="name" />
              <variable citdl="Object" doc="(Optional) The object that owns the function. If the function&#xA;isn&apos;t global then this argument is required. This could be the namespace that&#xA;the function belongs to, such as YAHOO.util.Dom, or the object on which it&apos;s&#xA;a method." ilk="argument" name="owner" />
              <variable citdl="Boolean" doc="(Optional) Indicates that the prototype should&#xA;also be instrumented. Setting to true has the same effect as calling&#xA;registerConstructor()." ilk="argument" name="registerPrototype" />
            </scope>
            <scope doc="Start profiling information for a given name. The name cannot be the name&#xA;of a registered function or object. This is used to start timing for a&#xA;particular block of code rather than instrumenting the entire function." ilk="function" name="start" signature="start(name) =&gt; Void">
              <variable citdl="String" doc="The name of the data point." ilk="argument" name="name" />
            </scope>
            <scope doc="Returns the uninstrumented version of a function/object." ilk="function" name="getOriginal" signature="getOriginal(name) =&gt; Function|Object">
              <variable citdl="String" doc="The name of the function/object to retrieve." ilk="argument" name="name" />
            </scope>
            <scope doc="Returns an object containing profiling data for a single function.&#xA;The object has an entry for min, max, avg, calls, and points)." ilk="function" name="getFunctionReport" signature="getFunctionReport() =&gt; Object" />
            <scope doc="Creates a report object with the given name." ilk="function" name="createReport" signature="createReport(name) =&gt; Void">
              <variable citdl="String" doc="The name to store for the report object." ilk="argument" name="name" />
            </scope>
            <scope doc="Returns the minimum amount of time (in milliseconds) that the function&#xA;with the given name takes to execute." ilk="function" name="getMin" signature="getMin(name) =&gt; float">
              <variable citdl="String" doc="The name of the function whose data should be returned.&#xA;If an object type method, it should be &apos;constructor.prototype.methodName&apos;;&#xA;a normal object method would just be &apos;object.methodName&apos;." ilk="argument" name="name" />
            </scope>
            <scope doc="Unregisters an object for profiling. It takes the object and looks for functions.&#xA;When a function is found, unregisterMethod() is called on it. If set to recrusive&#xA;mode, it will also unregister objects found inside of this object, &#xA;using the same methodology." ilk="function" name="unregisterObject" signature="unregisterObject(name, recurse) =&gt; Void">
              <variable citdl="String" doc="The name of the object to unregister." ilk="argument" name="name" />
              <variable citdl="Boolean" doc="(Optional) Determines if subobject methods should also be&#xA;unregistered." ilk="argument" name="recurse" />
            </scope>
            <scope doc="Returns the maximum amount of time (in milliseconds) that the function&#xA;with the given name takes to execute." ilk="function" name="getMax" signature="getMax(name) =&gt; float">
              <variable citdl="String" doc="The name of the function whose data should be returned.&#xA;If an object type method, it should be &apos;constructor.prototype.methodName&apos;;&#xA;a normal object method would just be &apos;object.methodName&apos;." ilk="argument" name="name" />
            </scope>
            <scope doc="Sets up a constructor for profiling, including all properties and methods on the prototype." ilk="function" name="registerConstructor" signature="registerConstructor(name, owner) =&gt; Void">
              <variable citdl="string" doc="The fully-qualified name of the function including namespace information." ilk="argument" name="name" />
              <variable citdl="Object" doc="(Optional) The object that owns the function (namespace or containing object)." ilk="argument" name="owner" />
            </scope>
            <scope doc="Removes a constructor function from profiling. Reverses the registerConstructor() method." ilk="function" name="unregisterFunction" signature="unregisterFunction(name) =&gt; Void">
              <variable citdl="String" doc="The full name of the function including namespacing. This&#xA;is the name of the function that is stored in the report." ilk="argument" name="name" />
            </scope>
          </scope>
          <scope doc="Test case containing various tests to run." ilk="class" name="TestCase">
            <scope attributes="__ctor__" doc="Test case containing various tests to run." ilk="function" name="TestCase" signature="TestCase(template)">
              <variable doc="An object containing any number of test methods, other methods,&#xA;an optional name, and anything else the test case needs." ilk="argument" name="template" />
            </scope>
            <scope doc="Function to run after each test is executed." ilk="function" name="tearDown" signature="tearDown() =&gt; Void" />
            <scope doc="Function to run before each test is executed." ilk="function" name="setUp" signature="setUp() =&gt; Void" />
            <scope doc="Resumes a paused test and runs the given function." ilk="function" name="resume" signature="resume(segment) =&gt; Void">
              <variable citdl="Function" doc="(Optional) The function to run.&#xA;If omitted, the test automatically passes." ilk="argument" name="segment" />
            </scope>
            <scope doc="Causes the test case to wait a specified amount of time and then&#xA;continue executing the given code." ilk="function" name="wait" signature="wait(segment, delay) =&gt; Void">
              <variable citdl="Function" doc="(Optional) The function to run after the delay.&#xA;If omitted, the TestRunner will wait until resume() is called." ilk="argument" name="segment" />
              <variable citdl="int" doc="(Optional) The number of milliseconds to wait before running&#xA;the function. If omitted, defaults to zero." ilk="argument" name="delay" />
            </scope>
            <scope doc="Represents a stoppage in test execution to wait for an amount of time before&#xA;continuing." ilk="class" name="Wait">
              <scope attributes="__ctor__" doc="Represents a stoppage in test execution to wait for an amount of time before&#xA;continuing." ilk="function" name="Wait" signature="Wait(segment, delay)">
                <variable citdl="Function" doc="A function to run when the wait is over." ilk="argument" name="segment" />
                <variable citdl="int" doc="The number of milliseconds to wait before running the code." ilk="argument" name="delay" />
              </scope>
              <scope doc="Returns test results formatted as an XML string." ilk="function" name="XML" signature="XML(result) =&gt; String">
                <variable citdl="Object" doc="The results object created by TestRunner." ilk="argument" name="result" />
              </scope>
              <scope doc="Returns test results formatted as a JSON string. Requires JSON utility." ilk="function" name="JSON" signature="JSON(result) =&gt; String">
                <variable citdl="Object" doc="The results object created by TestRunner." ilk="argument" name="result" />
              </scope>
              <variable citdl="int" doc="The delay before running the segment of code." name="delay" />
              <variable citdl="Function" doc="The segment of code to run when the wait is over." name="segment" />
            </scope>
          </scope>
          <scope doc="Displays test execution progress and results, providing filters based on&#xA;different key events." ilk="class" name="TestLogger">
            <scope attributes="__ctor__" doc="Displays test execution progress and results, providing filters based on&#xA;different key events." ilk="function" name="TestLogger" signature="TestLogger(element, config)">
              <variable citdl="HTMLElement" doc="(Optional) The element to create the logger in." ilk="argument" name="element" />
              <variable citdl="Object" doc="(Optional) Configuration options for the logger." ilk="argument" name="config" />
            </scope>
            <scope doc="Handles all TestRunner events, outputting appropriate data into the console." ilk="function" name="_handleTestRunnerEvent" signature="_handleTestRunnerEvent(data) =&gt; Void">
              <variable citdl="Object" doc="The event data object." ilk="argument" name="data" />
            </scope>
            <scope doc="Formats message string to HTML for output to console." ilk="function" name="formatMsg" signature="formatMsg(oLogMsg) =&gt; String">
              <variable citdl="Object" doc="Log message object." ilk="argument" name="oLogMsg" />
            </scope>
            <scope doc="Clears the reference to the TestRunner from previous operations. This &#xA;unsubscribes all events and removes the object reference." ilk="function" name="clearTestRunner" signature="clearTestRunner() =&gt; Void" />
            <scope doc="Sets the source test runner that the logger should monitor." ilk="function" name="setTestRunner" signature="setTestRunner(testRunner) =&gt; Void">
              <variable citdl="YAHOO.tool.TestRunner" doc="The TestRunner to observe." ilk="argument" name="testRunner" />
            </scope>
          </scope>
          <scope doc="Runs pages containing test suite definitions." ilk="namespace" name="TestManager">
            <scope doc="Signals that a test page has been loaded. This should be called from&#xA;within the test page itself to notify the TestManager that it is ready." ilk="function" name="load" signature="load() =&gt; Void" />
            <scope doc="Loads the next test page into the iframe." ilk="function" name="_run" signature="_run() =&gt; Void" />
            <scope doc="Stops the execution of tests." ilk="function" name="stop" signature="stop() =&gt; Void" />
            <scope doc="Sets the pages to be loaded." ilk="function" name="setPages" signature="setPages(pages) =&gt; Void">
              <variable citdl="String[]" doc="An array of URLs to load." ilk="argument" name="pages" />
            </scope>
            <scope doc="Begins the process of running the tests." ilk="function" name="start" signature="start() =&gt; Void" />
            <scope doc="Processes the results of a test page run, outputting log messages&#xA;for failed tests." ilk="function" name="_processResults" signature="_processResults() =&gt; Void" />
            <scope doc="Handles TestRunner.COMPLETE_EVENT, storing the results and beginning&#xA;the loop again." ilk="function" name="_handleTestRunnerComplete" signature="_handleTestRunnerComplete(data) =&gt; Void">
              <variable citdl="Object" doc="Data about the event." ilk="argument" name="data" />
            </scope>
            <variable citdl="string" doc="Constant for the testmanagerbegin custom event" name="TEST_MANAGER_BEGIN_EVENT" />
            <variable citdl="string" doc="Constant for the testmanagercomplete custom event" name="TEST_MANAGER_COMPLETE_EVENT" />
            <variable citdl="int" doc="The timeout ID for the next iteration through the tests." name="_timeoutId" />
            <variable citdl="YAHOO.tool.TestLogger" doc="The logger used to output results from the various tests." name="_logger" />
            <variable citdl="string" doc="Constant for the testpagebegin custom event" name="TEST_PAGE_BEGIN_EVENT" />
            <variable citdl="string" doc="Constant for the testpagecomplete custom event" name="TEST_PAGE_COMPLETE_EVENT" />
            <variable citdl="String" doc="The URL of the page currently being executed." name="_curPage" />
            <variable citdl="Object" doc="Aggregated results" name="_results" />
            <variable citdl="String[]" doc="Array of pages to load." name="_pages" />
            <variable citdl="Window" doc="The frame used to load and run tests." name="_frame" />
          </scope>
          <scope doc="A node in the test tree structure. May represent a TestSuite, TestCase, or&#xA;test function." ilk="class" name="TestNode">
            <scope attributes="__ctor__" doc="A node in the test tree structure. May represent a TestSuite, TestCase, or&#xA;test function." ilk="function" name="TestNode" signature="TestNode(testObject)">
              <variable citdl="Variant" doc="A TestSuite, TestCase, or the name of a test function." ilk="argument" name="testObject" />
            </scope>
            <scope doc="Appends a new test object (TestSuite, TestCase, or test function name) as a child&#xA;of this node." ilk="function" name="appendChild" signature="appendChild(testObject) =&gt; Void">
              <variable citdl="Variant" doc="A TestSuite, TestCase, or the name of a test function." ilk="argument" name="testObject" />
            </scope>
            <variable citdl="Variant" doc="The TestSuite, TestCase, or test function represented by this node." name="testObject" />
            <variable citdl="TestNode" doc="Pointer to this node&apos;s parent." name="parent" />
            <variable citdl="object" doc="Test results for this test object." name="results" />
            <variable citdl="TestNode" doc="Pointer to this node&apos;s first child." name="firstChild" />
            <variable citdl="TestNode" doc="Pointer to this node&apos;s next sibling." name="next" />
            <variable citdl="TestNode" doc="Pointer to this node&apos;s last child." name="lastChild" />
          </scope>
          <scope doc="An object capable of sending test results to a server." ilk="class" name="TestReporter">
            <scope attributes="__ctor__" doc="An object capable of sending test results to a server." ilk="function" name="TestReporter" signature="TestReporter(url, format)">
              <variable citdl="String" doc="The URL to submit the results to." ilk="argument" name="url" />
              <variable citdl="Function" doc="(Optiona) A function that outputs the results in a specific format.&#xA;Default is YAHOO.tool.TestFormat.XML." ilk="argument" name="format" />
            </scope>
            <scope doc="Sends the report to the server." ilk="function" name="report" signature="report(results) =&gt; Void">
              <variable citdl="Object" doc="The results object created by TestRunner." ilk="argument" name="results" />
            </scope>
            <scope doc="Cleans up the memory associated with the TestReporter, removing DOM elements&#xA;that were created." ilk="function" name="destroy" signature="destroy() =&gt; Void" />
            <scope doc="Convert a date into ISO format.&#xA;From Douglas Crockford&apos;s json2.js" ilk="function" name="_convertToISOString" signature="_convertToISOString(date) =&gt; String">
              <variable citdl="Date" doc="The date to convert." ilk="argument" name="date" />
            </scope>
            <scope doc="Adds a field to the form that submits the results." ilk="function" name="addField" signature="addField(name, value) =&gt; Void">
              <variable citdl="String" doc="The name of the field." ilk="argument" name="name" />
              <variable citdl="Variant" doc="The value of the field." ilk="argument" name="value" />
            </scope>
            <variable citdl="String" doc="The URL to submit the data to." name="url" />
            <variable citdl="HTMLFormElement" doc="The form element used to submit the results." name="_form" />
            <variable citdl="Object" doc="Extra fields to submit with the request." name="_fields" />
            <variable citdl="HTMLIFrameElement" doc="Iframe used as a target for form submission." name="_iframe" />
            <variable citdl="Function" doc="The formatting function to call when submitting the data." name="format" />
          </scope>
          <scope doc="Runs test suites and test cases, providing events to allowing for the&#xA;interpretation of test results." ilk="namespace" name="TestRunner">
            <scope doc="Runs a test case or test suite, returning the results." ilk="function" name="_run" signature="_run(testObject) =&gt; Object">
              <variable citdl="YAHOO.tool.TestCase|YAHOO.tool.TestSuite" doc="The test case or test suite to run." ilk="argument" name="testObject" />
            </scope>
            <scope doc="Runs the test suite." ilk="function" name="run" signature="run() =&gt; Void" />
            <scope doc="Resumes the TestRunner after wait() was called." ilk="function" name="resume" signature="resume(segment) =&gt; Void">
              <variable citdl="Function" doc="The function to run as the rest&#xA;of the haulted test." ilk="argument" name="segment" />
            </scope>
            <scope doc="Handles the completion of a test object&apos;s tests. Tallies test results &#xA;from one level up to the next." ilk="function" name="_handleTestObjectComplete" signature="_handleTestObjectComplete(node) =&gt; Void">
              <variable citdl="TestNode" doc="The TestNode representing the test object." ilk="argument" name="node" />
            </scope>
            <scope doc="Adds a test case to the test tree as a child of the specified node." ilk="function" name="_addTestCaseToTestTree" signature="_addTestCaseToTestTree(parentNode, testCase) =&gt; Void">
              <variable citdl="TestNode" doc="The node to add the test case to as a child." ilk="argument" name="parentNode" />
              <variable citdl="YAHOO.tool.TestCase" doc="The test case to add." ilk="argument" name="testCase" />
            </scope>
            <scope doc="Removes all test objects from the runner." ilk="function" name="clear" signature="clear() =&gt; Void" />
            <scope doc="Builds the test tree based on items in the master suite. The tree is a hierarchical&#xA;representation of the test suites, test cases, and test functions. The resulting tree&#xA;is stored in _root and the pointer _cur is set to the root initially." ilk="function" name="_buildTestTree" signature="_buildTestTree() =&gt; Void" />
            <scope doc="Adds a test suite to the test tree as a child of the specified node." ilk="function" name="_addTestSuiteToTestTree" signature="_addTestSuiteToTestTree(parentNode, testSuite) =&gt; Void">
              <variable citdl="TestNode" doc="The node to add the test suite to as a child." ilk="argument" name="parentNode" />
              <variable citdl="YAHOO.tool.TestSuite" doc="The test suite to add." ilk="argument" name="testSuite" />
            </scope>
            <scope doc="Adds a test suite or test case to the list of test objects to run." ilk="function" name="add" signature="add(testObject) =&gt; Void">
              <variable doc="Either a TestCase or a TestSuite that should be run." ilk="argument" name="testObject" />
            </scope>
            <scope doc="Retrieves the next node in the test tree." ilk="function" name="_next" signature="_next() =&gt; TestNode" />
            <scope doc="Fires events for the TestRunner. This overrides the default fireEvent()&#xA;method from EventProvider to add the type property to the data that is&#xA;passed through on each event call." ilk="function" name="fireEvent" signature="fireEvent(type, data)">
              <variable citdl="String" doc="The type of event to fire." ilk="argument" name="type" />
              <variable citdl="Object" doc="(Optional) Data for the event." ilk="argument" name="data" />
            </scope>
            <scope doc="Runs a single test based on the data provided in the node." ilk="function" name="_runTest" signature="_runTest(node) =&gt; Void">
              <variable citdl="TestNode" doc="The TestNode representing the test to run." ilk="argument" name="node" />
            </scope>
            <variable citdl="TestNode" doc="Pointer to the root node in the test tree." name="_root" />
            <variable citdl="TestNode" doc="Pointer to the current node in the test tree." name="_cur" />
            <variable citdl="YAHOO.tool.TestSuite" doc="Suite on which to attach all TestSuites and TestCases to be run." name="masterSuite" />
          </scope>
          <scope doc="A test suite that can contain a collection of TestCase and TestSuite objects." ilk="class" name="TestSuite">
            <scope attributes="__ctor__" doc="A test suite that can contain a collection of TestCase and TestSuite objects." ilk="function" name="TestSuite" signature="TestSuite(data)">
              <variable citdl="String||Object" doc="The name of the test suite or an object containing&#xA;a name property as well as setUp and tearDown methods." ilk="argument" name="data" />
            </scope>
            <scope doc="Function to run after each test is executed." ilk="function" name="tearDown" signature="tearDown() =&gt; Void" />
            <scope doc="Adds a test suite or test case to the test suite." ilk="function" name="add" signature="add(testObject) =&gt; Void">
              <variable citdl="YAHOO.tool.TestSuite||YAHOO.tool.TestCase" doc="The test suite or test case to add." ilk="argument" name="testObject" />
            </scope>
            <scope doc="Function to run before each test is executed." ilk="function" name="setUp" signature="setUp() =&gt; Void" />
            <variable citdl="String" doc="The name of the test suite." name="name" />
          </scope>
        </scope>
        <scope ilk="namespace" name="util">
          <scope doc="Base animation class that provides the interface for building animated effects.&#xA;&lt;p&gt;Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);&lt;/p&gt;" ilk="class" name="Anim">
            <scope attributes="__ctor__" doc="Base animation class that provides the interface for building animated effects.&#xA;&lt;p&gt;Usage: var myAnim = new YAHOO.util.Anim(el, { width: { from: 10, to: 100 } }, 1, YAHOO.util.Easing.easeOut);&lt;/p&gt;" ilk="function" name="Anim" signature="Anim(el, attributes, duration, method)">
              <variable citdl="String | HTMLElement" doc="Reference to the element that will be animated" ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.  &#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  &#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  &#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            </scope>
            <scope doc="Checks whether the element is currently animated." ilk="function" name="isAnimated" signature="isAnimated() =&gt; Boolean" />
            <scope doc="Changes the animated element" ilk="function" name="setEl" signature="setEl()" />
            <scope doc="Returns current value of the attribute." ilk="function" name="getAttribute" signature="getAttribute(attr) =&gt; Number">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
            </scope>
            <scope doc="Returns the value computed by the animation&apos;s &quot;method&quot;." ilk="function" name="doMethod" signature="doMethod(attr, start, end) =&gt; Number">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Number" doc="The value this attribute should start from for this animation." ilk="argument" name="start" />
              <variable citdl="Number" doc="The value this attribute should end at for this animation." ilk="argument" name="end" />
            </scope>
            <scope doc="Returns the unit to use when none is supplied." ilk="function" name="getDefaultUnit" signature="getDefaultUnit(attr) =&gt; String">
              <variable citdl="attr" doc="The name of the attribute." ilk="argument" name="attr" />
            </scope>
            <scope doc="Applies a value to an attribute." ilk="function" name="setAttribute" signature="setAttribute(attr, val, unit)">
              <variable citdl="String" doc="The name of the attribute." ilk="argument" name="attr" />
              <variable citdl="Number" doc="The value to be applied to the attribute." ilk="argument" name="val" />
              <variable citdl="String" doc="The unit (&apos;px&apos;, &apos;%&apos;, etc.) of the value." ilk="argument" name="unit" />
            </scope>
            <scope doc="Constructor for Anim instance." ilk="function" name="init" signature="init(el, attributes, duration, method)">
              <variable citdl="String | HTMLElement" doc="Reference to the element that will be animated" ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.  &#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  &#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  &#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            </scope>
            <scope doc="Sets the actual values to be used during the animation.  Should only be needed for subclass use." ilk="function" name="setRuntimeAttribute" signature="setRuntimeAttribute(attr)">
              <variable citdl="Object" doc="The attribute object" ilk="argument" name="attr" />
            </scope>
            <scope doc="Stops the animation.  Normally called by AnimMgr when animation completes." ilk="function" name="stop" signature="stop(finish)">
              <variable citdl="Boolean" doc="(optional) If true, animation will jump to final frame." ilk="argument" name="finish" />
            </scope>
            <scope doc="Returns a reference to the animated element." ilk="function" name="getEl" signature="getEl() =&gt; HTMLElement" />
            <scope doc="Provides a readable name for the Anim instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Feeds the starting and ending values for each animated attribute to doMethod once per frame, then applies the resulting value to the attribute(s)." ilk="function" name="onTween" signature="onTween()" />
            <scope doc="Starts the animation by registering it with the animation manager." ilk="function" name="animate" signature="animate()" />
            <scope doc="Returns the animation start time." ilk="function" name="getStartTime" signature="getStartTime() =&gt; Date" />
            <variable citdl="Boolean" doc="Whether or not the animation is running." name="isAnimated" />
            <variable doc="Custom event that fires after onTween" name="_onTween" />
            <variable citdl="HTMLElement" doc="The element to be animated." name="el" />
            <variable citdl="Int" doc="The number of frames this animation was able to execute." name="actualFrames" />
            <variable citdl="Boolean" doc="Whether or not the duration should be treated as seconds.&#xA;Defaults to true." name="useSeconds" />
            <variable citdl="Int" doc="The total number of frames to be executed.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." name="totalFrames" />
            <variable doc="Custom event that fires after onStart, useful in subclassing" name="_onStart" />
            <variable citdl="Int" doc="The location of the current animation on the timeline.&#xA;In time-based animations, this is used by AnimMgr to ensure the animation finishes on time." name="currentFrame" />
            <variable citdl="Date" doc="A Date object that is created when the animation begins." name="startTime" />
            <variable citdl="Number" doc="The length of the animation.  Defaults to &quot;1&quot; (second)." name="duration" />
            <variable citdl="Object" doc="The collection of attributes to be animated.  &#xA;Each attribute must have at least a &quot;to&quot; or &quot;by&quot; defined in order to animate.  &#xA;If &quot;to&quot; is supplied, the animation will end with the attribute at that value.  &#xA;If &quot;by&quot; is supplied, the animation will end at that value plus its starting value. &#xA;If both are supplied, &quot;to&quot; is used, and &quot;by&quot; is ignored. &#xA;Optional additional member include &quot;from&quot; (the value the attribute should start animating from, defaults to current value), and &quot;unit&quot; (the units to apply to the values)." name="attributes" />
            <variable citdl="Function" doc="The method that will provide values to the attribute(s) during the animation. &#xA;Defaults to &quot;YAHOO.util.Easing.easeNone&quot;." name="method" />
            <variable doc="Custom event that fires after onComplete" name="_onComplete" />
          </scope>
          <scope doc="Handles animation queueing and threading.&#xA;Used by Anim and subclasses." ilk="namespace" name="AnimMgr">
            <scope doc="Called per Interval to handle each animation frame." ilk="function" name="run" signature="run()" />
            <scope doc="removes an animation instance from the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" name="unRegister" signature="unRegister(tween, index)">
              <variable citdl="object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
              <variable citdl="Int" doc="The index of the Anim instance" ilk="argument" name="index" />
            </scope>
            <scope doc="Stops the animation thread or a specific animation instance." ilk="function" name="stop" signature="stop(tween)">
              <variable citdl="object" doc="A specific Anim instance to stop (optional)&#xA;If no instance given, Manager stops thread and all animations." ilk="argument" name="tween" />
            </scope>
            <scope doc="Starts the animation thread.&#xA;Only one thread can run at a time." ilk="function" name="start" signature="start()" />
            <scope doc="Adds an animation instance to the animation queue.&#xA;All animation instances must be registered in order to animate." ilk="function" name="registerElement" signature="registerElement(tween)">
              <variable citdl="object" doc="The Anim instance to be be registered" ilk="argument" name="tween" />
            </scope>
            <scope doc="On the fly frame correction to keep animation on time." ilk="function" name="correctFrame" signature="correctFrame(tween)">
              <variable citdl="Object" doc="The Anim instance being corrected." ilk="argument" name="tween" />
            </scope>
            <variable citdl="Array" doc="The current queue of registered animation objects." name="queue" />
            <variable citdl="Int" doc="The number of active animations." name="tweenCount" />
            <variable citdl="Int" doc="Interval delay in milliseconds, defaults to fastest possible." name="delay" />
            <variable citdl="Int" doc="Reference to the animation Interval." name="thread" />
            <variable citdl="Int" doc="Base frame rate (frames per second). &#xA;Arbitrarily high for better x-browser calibration (slower browsers drop more frames)." name="fps" />
          </scope>
          <scope doc="The ArrayAssert object provides functions to test JavaScript array objects&#xA;for a variety of cases." ilk="namespace" name="ArrayAssert">
            <scope doc="Asserts that a value matching some condition is present in an array. This uses&#xA;a function to determine a match." ilk="function" name="containsMatch" signature="containsMatch(matcher, haystack, message)">
              <variable citdl="Function" doc="A function that returns true if the items matches or false if not." ilk="argument" name="matcher" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is not present in an array. This uses the triple equals &#xA;sign so no type cohersion may occur." ilk="function" name="doesNotContain" signature="doesNotContain(needle, haystack, message)">
              <variable citdl="Object" doc="The value that is expected in the array." ilk="argument" name="needle" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that the given value is contained in an array at the specified index.&#xA;This uses the triple equals sign so no type cohersion will occur." ilk="function" name="indexOf" signature="indexOf(needle, haystack, index, message)">
              <variable citdl="Object" doc="The value to look for." ilk="argument" name="needle" />
              <variable citdl="Array" doc="The array to search in." ilk="argument" name="haystack" />
              <variable citdl="int" doc="The index at which the value should exist." ilk="argument" name="index" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that an array is not empty." ilk="function" name="isNotEmpty" signature="isNotEmpty(actual, message)">
              <variable citdl="Array" doc="The array to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is present in an array. This uses the triple equals &#xA;sign so no type cohersion may occur." ilk="function" name="contains" signature="contains(needle, haystack, message)">
              <variable citdl="Object" doc="The value that is expected in the array." ilk="argument" name="needle" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a set of values are present in an array. This uses the triple equals &#xA;sign so no type cohersion may occur. For this assertion to pass, all values must&#xA;be found." ilk="function" name="containsItems" signature="containsItems(needles, haystack, message)">
              <variable citdl="Object[]" doc="An array of values that are expected in the array." ilk="argument" name="needles" />
              <variable citdl="Array" doc="An array of values to check." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a set of values are not present in an array. This uses the triple equals &#xA;sign so no type cohersion may occur. For this assertion to pass, all values must&#xA;not be found." ilk="function" name="doesNotContainItems" signature="doesNotContainItems(needles, haystack, message)">
              <variable citdl="Object[]" doc="An array of values that are not expected in the array." ilk="argument" name="needles" />
              <variable citdl="Array" doc="An array of values to check." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that the values in an array are equivalent, and in the same position,&#xA;as values in another array. This uses a function to determine if the values&#xA;are equivalent. Note that the array objects themselves&#xA;need not be the same for this test to pass." ilk="function" name="itemsAreEquivalent" signature="itemsAreEquivalent(expected, actual, comparator, message) =&gt; Void">
              <variable citdl="Array" doc="An array of the expected values." ilk="argument" name="expected" />
              <variable citdl="Array" doc="Any array of the actual values." ilk="argument" name="actual" />
              <variable citdl="Function" doc="A function that returns true if the values are equivalent&#xA;or false if not." ilk="argument" name="comparator" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that the values in an array are equal, and in the same position,&#xA;as values in another array. This uses the double equals sign&#xA;so type cohersion may occur. Note that the array objects themselves&#xA;need not be the same for this test to pass." ilk="function" name="itemsAreEqual" signature="itemsAreEqual(expected, actual, message)">
              <variable citdl="Array" doc="An array of the expected values." ilk="argument" name="expected" />
              <variable citdl="Array" doc="Any array of the actual values." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that an array is empty." ilk="function" name="isEmpty" signature="isEmpty(actual, message)">
              <variable citdl="Array" doc="The array to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that the given value is contained in an array at the specified index,&#xA;starting from the back of the array.&#xA;This uses the triple equals sign so no type cohersion will occur." ilk="function" name="lastIndexOf" signature="lastIndexOf(needle, haystack, index, message)">
              <variable citdl="Object" doc="The value to look for." ilk="argument" name="needle" />
              <variable citdl="Array" doc="The array to search in." ilk="argument" name="haystack" />
              <variable citdl="int" doc="The index at which the value should exist." ilk="argument" name="index" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that the values in an array are the same, and in the same position,&#xA;as values in another array. This uses the triple equals sign&#xA;so no type cohersion will occur. Note that the array objects themselves&#xA;need not be the same for this test to pass." ilk="function" name="itemsAreSame" signature="itemsAreSame(expected, actual, message)">
              <variable citdl="Array" doc="An array of the expected values." ilk="argument" name="expected" />
              <variable citdl="Array" doc="Any array of the actual values." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that no values matching a condition are present in an array. This uses&#xA;a function to determine a match." ilk="function" name="doesNotContainMatch" signature="doesNotContainMatch(matcher, haystack, message)">
              <variable citdl="Function" doc="A function that returns true if the items matches or false if not." ilk="argument" name="matcher" />
              <variable citdl="Array" doc="An array of values." ilk="argument" name="haystack" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
          </scope>
          <scope doc="The Assert object provides functions to test JavaScript values against&#xA;known and expected results. Whenever a comparison (assertion) fails,&#xA;an error is thrown." ilk="namespace" name="Assert">
            <scope doc="Asserts that a value is true. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="isTrue" signature="isTrue(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is false. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="isFalse" signature="isFalse(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is not null. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="isNotNull" signature="isNotNull(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Forces an assertion error to occur." ilk="function" name="fail" signature="fail(message)">
              <variable citdl="String" doc="(Optional) The message to display with the failure." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is a function." ilk="function" name="isFunction" signature="isFunction(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is not a number." ilk="function" name="isNaN" signature="isNaN(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is a Boolean." ilk="function" name="isBoolean" signature="isBoolean(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is not the same as another. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="areNotSame" signature="areNotSame(unexpected, actual, message)">
              <variable citdl="Object" doc="The unexpected value." ilk="argument" name="unexpected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is not the special NaN value." ilk="function" name="isNotNaN" signature="isNotNaN(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is not equal to another. This uses the double equals sign&#xA;so type cohersion may occur." ilk="function" name="areNotEqual" signature="areNotEqual(unexpected, actual, message)">
              <variable citdl="Object" doc="The unexpected value." ilk="argument" name="unexpected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is the same as another. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="areSame" signature="areSame(expected, actual, message)">
              <variable citdl="Object" doc="The expected value." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is undefined. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="isUndefined" signature="isUndefined(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is an array." ilk="function" name="isArray" signature="isArray(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is of a particular type." ilk="function" name="isTypeOf" signature="isTypeOf(expectedType, actualValue, message)">
              <variable citdl="String" doc="The expected type of the variable." ilk="argument" name="expectedType" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actualValue" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Formats a message so that it can contain the original assertion message&#xA;in addition to the custom message." ilk="function" name="_formatMessage" signature="_formatMessage(customMessage, defaultMessage) =&gt; String">
              <variable citdl="String" doc="The message passed in by the developer." ilk="argument" name="customMessage" />
              <variable citdl="String" doc="The message created by the error by default." ilk="argument" name="defaultMessage" />
            </scope>
            <scope doc="Asserts that a value is equal to another. This uses the double equals sign&#xA;so type cohersion may occur." ilk="function" name="areEqual" signature="areEqual(expected, actual, message)">
              <variable citdl="Object" doc="The expected value." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is a number." ilk="function" name="isNumber" signature="isNumber(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is an object." ilk="function" name="isObject" signature="isObject(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is a string." ilk="function" name="isString" signature="isString(actual, message)">
              <variable citdl="Object" doc="The value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is not undefined. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="isNotUndefined" signature="isNotUndefined(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is null. This uses the triple equals sign&#xA;so no type cohersion may occur." ilk="function" name="isNull" signature="isNull(actual, message)">
              <variable citdl="Object" doc="The actual value to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a value is an instance of a particular object. This may return&#xA;incorrect results when comparing objects from one frame to constructors in&#xA;another frame. For best results, don&apos;t use in a cross-frame manner." ilk="function" name="isInstanceOf" signature="isInstanceOf(expected, actual, message)">
              <variable citdl="Function" doc="The function that the object should be an instance of." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The object to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
          </scope>
          <scope classrefs="Error" doc="AssertionError is thrown whenever an assertion fails. It provides methods&#xA;to more easily get at error information and also provides a base class&#xA;from which more specific assertion errors can be derived." ilk="class" name="AssertionError">
            <scope attributes="__ctor__" doc="AssertionError is thrown whenever an assertion fails. It provides methods&#xA;to more easily get at error information and also provides a base class&#xA;from which more specific assertion errors can be derived." ilk="function" name="AssertionError" signature="AssertionError(message)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
            </scope>
            <scope doc="Returns a fully formatted error for an assertion failure. This should&#xA;be overridden by all subclasses to provide specific information." ilk="function" name="getMessage" signature="getMessage() =&gt; String" />
            <scope doc="Returns a string representation of the error." ilk="function" name="toString" signature="toString() =&gt; String" />
            <variable citdl="String" doc="The name of the error that occurred." name="name" />
          </scope>
          <scope doc="Provides Attribute configurations." ilk="class" name="Attribute">
            <scope attributes="__ctor__" doc="Provides Attribute configurations." ilk="function" name="Attribute" signature="Attribute(hash, The)">
              <variable citdl="Object" doc="The intial Attribute." ilk="argument" name="hash" />
              <variable citdl="YAHOO.util.AttributeProvider" doc="owner of the Attribute instance." ilk="argument" name="The" />
            </scope>
            <scope doc="Sets the value of the attribute and fires beforeChange and change events." ilk="function" name="setValue" signature="setValue(value, silent) =&gt; Boolean">
              <variable citdl="Any" doc="The value to apply to the attribute." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="If true the change events will not be fired." ilk="argument" name="silent" />
            </scope>
            <scope doc="Allows for configuring the Attribute&apos;s properties." ilk="function" name="configure" signature="configure(map, init)">
              <variable citdl="Object" doc="A key-value map of Attribute properties." ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the initial config." ilk="argument" name="init" />
            </scope>
            <scope doc="Resets the value to the initial config value." ilk="function" name="resetValue" signature="resetValue() =&gt; Boolean" />
            <scope doc="Resets the value to the current value.&#xA;Useful when values may have gotten out of sync with actual properties." ilk="function" name="refresh" signature="refresh() =&gt; Boolean" />
            <scope doc="Retrieves the current value of the attribute." ilk="function" name="getValue" signature="getValue() =&gt; any" />
            <scope doc="Resets the attribute config to the initial config state." ilk="function" name="resetConfig" signature="resetConfig()" />
            <variable citdl="Boolean" doc="Whether or not the attribute&apos;s value has been set." name="_written" />
            <variable citdl="String" doc="The name of the attribute." name="name" />
            <variable citdl="Boolean" doc="Whether or not the attribute can only be written once." name="writeOnce" />
            <variable citdl="Object" doc="The attribute&apos;s initial configuration." name="_initialConfig" />
            <variable citdl="String" doc="The value of the attribute." name="value" />
            <variable citdl="Boolean" doc="Whether or not the attribute is read only." name="readOnly" />
            <variable citdl="Function" doc="The validator to use when setting the attribute&apos;s value." name="validator" />
            <variable citdl="YAHOO.util.AttributeProvider" doc="The owner of the attribute." name="owner" />
            <variable citdl="Function" doc="The function to use when getting the attribute&apos;s value.&#xA;The getter receives the new value as the first arg and the attribute name as the 2nd&#xA;The return value of the getter will be used as the return from get()." name="getter" />
            <variable citdl="Function" doc="A function to call when setting the attribute&apos;s value.&#xA;The method receives the new value as the first arg and the attribute name as the 2nd" name="method" />
            <variable citdl="Function" doc="The function to use when setting the attribute&apos;s value.&#xA;The setter receives the new value as the first arg and the attribute name as the 2nd&#xA;The return value of the setter replaces the value passed to set()." name="setter" />
          </scope>
          <scope doc="Provides and manages YAHOO.util.Attribute instances" ilk="namespace" name="AttributeProvider">
            <scope doc="Sets the value of a config." ilk="function" name="set" signature="set(key, value, silent) =&gt; Boolean">
              <variable citdl="String" doc="The name of the attribute" ilk="argument" name="key" />
              <variable citdl="Any" doc="The value to apply to the attribute" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
            </scope>
            <scope doc="Fires the attribute&apos;s beforeChange event." ilk="function" name="fireBeforeChangeEvent" signature="fireBeforeChangeEvent(key, e)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Obj" doc="The event object to pass to handlers." ilk="argument" name="e" />
            </scope>
            <scope doc="Resets the specified attribute&apos;s value to its initial value." ilk="function" name="resetValue" signature="resetValue(key, silent) =&gt; Boolean">
              <variable citdl="String" doc="The name of the attribute" ilk="argument" name="key" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
            </scope>
            <scope doc="Returns the current value of the attribute." ilk="function" name="get" signature="get(key) =&gt; Any">
              <variable citdl="String" doc="The attribute whose value will be returned." ilk="argument" name="key" />
            </scope>
            <scope doc="Sets or updates an Attribute instance&apos;s properties." ilk="function" name="setAttributeConfig" signature="setAttributeConfig(key, map, init)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map of attribute properties" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the intial config." ilk="argument" name="init" />
            </scope>
            <scope doc="Resets an attribute to its intial configuration." ilk="function" name="resetAttributeConfig" signature="resetAttributeConfig(key)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
            </scope>
            <scope doc="Adds an Attribute to the AttributeProvider instance." ilk="function" name="register" signature="register(key, map)">
              <variable citdl="String" doc="The attribute&apos;s name" ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map containing the&#xA;attribute&apos;s properties." ilk="argument" name="map" />
            </scope>
            <scope doc="Returns the attribute&apos;s properties." ilk="function" name="getAttributeConfig" signature="getAttributeConfig(key) =&gt; object">
              <variable citdl="String" doc="The attribute&apos;s name" ilk="argument" name="key" />
            </scope>
            <scope doc="Sets the attribute&apos;s value to its current value." ilk="function" name="refresh" signature="refresh(key, silent)">
              <variable citdl="String | Array" doc="The attribute(s) to refresh" ilk="argument" name="key" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
            </scope>
            <scope doc="Sets multiple attribute values." ilk="function" name="setAttributes" signature="setAttributes(map, silent)">
              <variable citdl="Object" doc="A key-value map of attributes" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not to suppress change events" ilk="argument" name="silent" />
            </scope>
            <scope doc="Returns an array of attribute names." ilk="function" name="getAttributeKeys" signature="getAttributeKeys() =&gt; Array" />
            <scope doc="Fires the attribute&apos;s change event." ilk="function" name="fireChangeEvent" signature="fireChangeEvent(key, e)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Obj" doc="The event object to pass to the handlers." ilk="argument" name="e" />
            </scope>
            <scope doc="Sets or updates an Attribute instance&apos;s properties." ilk="function" name="configureAttribute" signature="configureAttribute(key, map, init)">
              <variable citdl="String" doc="The attribute&apos;s name." ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map of attribute properties" ilk="argument" name="map" />
              <variable citdl="Boolean" doc="Whether or not this should become the intial config." ilk="argument" name="init" />
            </scope>
            <variable citdl="{Object}" doc="A key-value map of Attribute configurations" name="_configs" />
          </scope>
          <scope doc="Used to calculate Bezier splines for any number of control points." ilk="namespace" name="Bezier">
            <scope doc="Get the current position of the animated element based on t.&#xA;Each point is an array of &quot;x&quot; and &quot;y&quot; values (0 = x, 1 = y)&#xA;At least 2 points are required (start and end).&#xA;First point is start. Last point is end.&#xA;Additional control points are optional." ilk="function" name="getPosition" signature="getPosition(points, t) =&gt; Array">
              <variable citdl="Array" doc="An array containing Bezier points" ilk="argument" name="points" />
              <variable citdl="Number" doc="A number between 0 and 1 which is the basis for determining current position" ilk="argument" name="t" />
            </scope>
          </scope>
          <scope doc="Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;method&lt;/code&gt; - {Function} REQUIRED the callback function.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;scope&lt;/code&gt; - {Object} the scope from which to execute the callback.  Default is the global window scope.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;argument&lt;/code&gt; - {Array} parameters to be passed to method as individual arguments.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;until&lt;/code&gt; - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with &lt;code&gt;until&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="class" name="Chain">
            <scope attributes="__ctor__" doc="Mechanism to execute a series of callbacks in a non-blocking queue.  Each callback is executed via setTimout unless configured with a negative timeout, in which case it is run in blocking mode in the same execution thread as the previous callback.  Callbacks can be function references or object literals with the following keys:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;method&lt;/code&gt; - {Function} REQUIRED the callback function.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;scope&lt;/code&gt; - {Object} the scope from which to execute the callback.  Default is the global window scope.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;argument&lt;/code&gt; - {Array} parameters to be passed to method as individual arguments.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - {number} millisecond delay to wait after previous callback completion before executing this callback.  Negative values cause immediate blocking execution.  Default 0.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;until&lt;/code&gt; - {Function} boolean function executed before each iteration.  Return true to indicate completion and proceed to the next callback.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;iterations&lt;/code&gt; - {Number} number of times to execute the callback before proceeding to the next callback in the chain. Incompatible with &lt;code&gt;until&lt;/code&gt;.&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" name="Chain" signature="Chain(callback*)">
              <variable citdl="Function|Object" doc="Any number of callbacks to initialize the queue" ilk="argument" name="callback*" />
            </scope>
            <scope doc="Begin executing the chain, or resume execution from the last paused position." ilk="function" name="run" signature="run() =&gt; Chain" />
            <scope doc="Add a callback to the end of the queue" ilk="function" name="add" signature="add(c) =&gt; Chain">
              <variable citdl="Function|Object" doc="the callback function ref or object literal" ilk="argument" name="c" />
            </scope>
            <scope doc="Pause the execution of the Chain after the current execution of the&#xA;current callback completes.  If called interstitially, clears the&#xA;timeout for the pending callback. Paused Chains can be restarted with&#xA;chain.run()" ilk="function" name="pause" signature="pause() =&gt; Chain" />
            <scope doc="Stop and clear the Chain&apos;s queue after the current execution of the&#xA;current callback completes." ilk="function" name="stop" signature="stop() =&gt; Chain" />
            <variable citdl="{Array}" doc="The callback queue" name="q" />
            <variable citdl="{number}" doc="Timeout id used to pause or stop execution and indicate the execution state of the Chain.  0 indicates paused or stopped, -1 indicates blocking execution, and any positive number indicates non-blocking execution." name="id" />
          </scope>
          <scope doc="Provides color conversion and validation utils" ilk="namespace" name="Color">
            <scope doc="Converts HSV (h[0-360], s[0-1]), v[0-1] to RGB [255,255,255]" ilk="function" name="hsv2rgb" signature="hsv2rgb(h, s, v) =&gt; [int, int, int]">
              <variable citdl="int|[int, float, float]" doc="the hue, or an&#xA;array containing all three parameters" ilk="argument" name="h" />
              <variable citdl="float" doc="the saturation" ilk="argument" name="s" />
              <variable citdl="float" doc="the value/brightness" ilk="argument" name="v" />
            </scope>
            <scope doc="Returns the closest websafe color to the supplied rgb value." ilk="function" name="websafe" signature="websafe(r, g, b) =&gt; [int, int, int]">
              <variable citdl="int|[int, int, int]" doc="the red value, or an&#xA;array containing all three parameters" ilk="argument" name="r" />
              <variable citdl="int" doc="the green value" ilk="argument" name="g" />
              <variable citdl="int" doc="the blue value" ilk="argument" name="b" />
            </scope>
            <scope doc="Converts to RGB [255,255,255] to HSV (h[0-360], s[0-1]), v[0-1]" ilk="function" name="rgb2hsv" signature="rgb2hsv(r, g, b) =&gt; [int, float, float]">
              <variable citdl="int|[int, int, int]" doc="the red value, or an&#xA;array containing all three parameters" ilk="argument" name="r" />
              <variable citdl="int" doc="the green value" ilk="argument" name="g" />
              <variable citdl="int" doc="the blue value" ilk="argument" name="b" />
            </scope>
            <scope doc="Converts a hex pair 00...FF to an int 0...255" ilk="function" name="hex2dec" signature="hex2dec(str) =&gt; int">
              <variable citdl="string" doc="the hex pair to convert" ilk="argument" name="str" />
            </scope>
            <scope doc="Converts decimal rgb values into a hex string&#xA;255,255,255 -&gt; FFFFFF" ilk="function" name="rgb2hex" signature="rgb2hex(r, g, b) =&gt; string">
              <variable citdl="int|[int, int, int]" doc="the red value, or an&#xA;array containing all three parameters" ilk="argument" name="r" />
              <variable citdl="int" doc="the green value" ilk="argument" name="g" />
              <variable citdl="int" doc="the blue value" ilk="argument" name="b" />
            </scope>
            <scope doc="Converts 0-1 to 0-255" ilk="function" name="real2dec" signature="real2dec(n) =&gt; int">
              <variable citdl="float" doc="the number to convert" ilk="argument" name="n" />
            </scope>
            <scope doc="Converts an int 0...255 to hex pair 00...FF" ilk="function" name="dec2hex" signature="dec2hex(n) =&gt; string">
              <variable citdl="int" doc="the number to convert" ilk="argument" name="n" />
            </scope>
            <scope doc="Converts a hex string to rgb" ilk="function" name="hex2rgb" signature="hex2rgb(str) =&gt; [int, int, int]">
              <variable citdl="string" doc="the hex string" ilk="argument" name="str" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.Anim" doc="Anim subclass for color transitions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: &apos;#FF0000&apos;, to: &apos;#FFFFFF&apos; } }, 1, Y.Easing.easeOut);&lt;/code&gt; Color values can be specified with either 112233, #112233, &#xA;[255,255,255], or rgb(255,255,255)&lt;/p&gt;" ilk="class" name="ColorAnim">
            <scope attributes="__ctor__" doc="Anim subclass for color transitions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new Y.ColorAnim(el, { backgroundColor: { from: &apos;#FF0000&apos;, to: &apos;#FFFFFF&apos; } }, 1, Y.Easing.easeOut);&lt;/code&gt; Color values can be specified with either 112233, #112233, &#xA;[255,255,255], or rgb(255,255,255)&lt;/p&gt;" ilk="function" name="ColorAnim" signature="ColorAnim(el, attributes, duration, method)">
              <variable citdl="HTMLElement | String" doc="Reference to the element that will be animated" ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.&#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.&#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).&#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            </scope>
            <scope doc="Attempts to parse the given string and return a 3-tuple." ilk="function" name="parseColor" signature="parseColor(s) =&gt; Array">
              <variable citdl="String" doc="The string to parse." ilk="argument" name="s" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.DDProxy" doc="ColumnDD subclasses DragDrop to support rearrangeable Columns." ilk="class" name="ColumnDD">
            <scope attributes="__ctor__" doc="ColumnDD subclasses DragDrop to support rearrangeable Columns." ilk="function" name="ColumnDD" signature="ColumnDD(oDataTable, oColumn, elTh, elTarget)">
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oDataTable" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="HTMLElement" doc="TH element reference." ilk="argument" name="elTh" />
              <variable citdl="HTMLElement" doc="Drag target element." ilk="argument" name="elTarget" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.DDProxy" doc="ColumnResizer subclasses DragDrop to support resizeable Columns." ilk="class" name="ColumnResizer">
            <scope attributes="__ctor__" doc="ColumnResizer subclasses DragDrop to support resizeable Columns." ilk="function" name="ColumnResizer" signature="ColumnResizer(oDataTable, oColumn, elTh, sHandleElId, elProxy)">
              <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." ilk="argument" name="oDataTable" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="HTMLElement" doc="TH element reference." ilk="argument" name="elTh" />
              <variable citdl="String" doc="DOM ID of the handle element that causes the resize." ilk="argument" name="sHandleElId" />
              <variable citdl="HTMLElement" doc="Resizer proxy element." ilk="argument" name="elProxy" />
            </scope>
            <scope doc="Handles start drag on the Column resizer." ilk="function" name="startDrag" signature="startDrag(e)">
              <variable citdl="string" doc="The drag event" ilk="argument" name="e" />
            </scope>
            <scope doc="Resets resizer element." ilk="function" name="resetResizerEl" signature="resetResizerEl()" />
            <scope doc="Handles mousedown events on the Column resizer." ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="string" doc="The mousedown event" ilk="argument" name="e" />
            </scope>
            <scope doc="Handles mouseup events on the Column resizer." ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="string" doc="The mouseup event" ilk="argument" name="e" />
            </scope>
            <scope doc="Handles drag events on the Column resizer." ilk="function" name="onDrag" signature="onDrag(e)">
              <variable citdl="string" doc="The drag event" ilk="argument" name="e" />
            </scope>
            <scope doc="Custom clickValidator to ensure Column is not in hidden state." ilk="function" name="clickValidator" signature="clickValidator(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <variable doc="" name="editorOptions" />
          </scope>
          <scope classrefs="YAHOO.util.AssertionError" doc="ComparisonFailure is subclass of AssertionError that is thrown whenever&#xA;a comparison between two values fails. It provides mechanisms to retrieve&#xA;both the expected and actual value." ilk="class" name="ComparisonFailure">
            <scope attributes="__ctor__" doc="ComparisonFailure is subclass of AssertionError that is thrown whenever&#xA;a comparison between two values fails. It provides mechanisms to retrieve&#xA;both the expected and actual value." ilk="function" name="ComparisonFailure" signature="ComparisonFailure(message, expected, actual)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
              <variable citdl="Object" doc="The expected value." ilk="argument" name="expected" />
              <variable citdl="Object" doc="The actual value that caused the assertion to fail." ilk="argument" name="actual" />
            </scope>
            <scope doc="Returns a fully formatted error for an assertion failure. This message&#xA;provides information about the expected and actual values." ilk="function" name="toString" signature="toString() =&gt; String" />
            <variable citdl="Object" doc="The expected value." name="expected" />
            <variable citdl="Object" doc="The actual value." name="actual" />
            <variable citdl="String" doc="The name of the error that occurred." name="name" />
          </scope>
          <scope doc="Config is a utility used within an Object to allow the implementer to&#xA;maintain a list of local configuration properties and listen for changes &#xA;to those properties dynamically using CustomEvent. The initial values are &#xA;also maintained so that the configuration can be reset at any given point &#xA;to its initial state." ilk="class" name="Config">
            <scope attributes="__ctor__" doc="Config is a utility used within an Object to allow the implementer to&#xA;maintain a list of local configuration properties and listen for changes &#xA;to those properties dynamically using CustomEvent. The initial values are &#xA;also maintained so that the configuration can be reset at any given point &#xA;to its initial state." ilk="function" name="Config" signature="Config(owner)">
              <variable citdl="Object" doc="The owner Object to which this Config Object belongs" ilk="argument" name="owner" />
            </scope>
            <scope doc="Fires the normalized list of queued property change events" ilk="function" name="fireQueue" signature="fireQueue()" />
            <scope doc="Checks to determine if a particular function/Object pair are already &#xA;subscribed to the specified CustomEvent" ilk="function" name="YAHOO.util.Config.alreadySubscribed" signature="YAHOO.util.Config.alreadySubscribed(evt, fn, obj) =&gt; Boolean">
              <variable citdl="YAHOO.util.CustomEvent" doc="The CustomEvent for which to check &#xA;the subscriptions" ilk="argument" name="evt" />
              <variable citdl="Function" doc="The function to look for in the subscribers list" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The execution scope Object for the subscription" ilk="argument" name="obj" />
            </scope>
            <scope doc="Returns the value of specified property." ilk="function" name="getProperty" signature="getProperty(key) =&gt; Object">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
            </scope>
            <scope doc="Adds a property to the Config Object&apos;s private config hash." ilk="function" name="addProperty" signature="addProperty(key, propertyObject)">
              <variable citdl="String" doc="The configuration property&apos;s name" ilk="argument" name="key" />
              <variable citdl="Object" doc="The Object containing all of this &#xA;property&apos;s arguments" ilk="argument" name="propertyObject" />
            </scope>
            <scope doc="Sets the value of a property and queues its event to execute. If the &#xA;event is already scheduled to execute, it is&#xA;moved from its current position to the end of the queue." ilk="function" name="queueProperty" signature="queueProperty(key, value) =&gt; Boolean">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="String" doc="The value to set the property to" ilk="argument" name="value" />
            </scope>
            <scope doc="Validates that the value passed in is a number." ilk="function" name="checkNumber" signature="checkNumber(val) =&gt; Boolean">
              <variable citdl="Object" doc="The value to validate" ilk="argument" name="val" />
            </scope>
            <scope doc="Returns a string representation of the Config object&apos;s current &#xA;CustomEvent queue" ilk="function" name="outputEventQueue" signature="outputEventQueue() =&gt; String" />
            <scope doc="Returns a key-value configuration map of the values currently set in  &#xA;the Config Object." ilk="function" name="getConfig" signature="getConfig() =&gt; Object" />
            <scope doc="Applies a key-value Object literal to the configuration, replacing  &#xA;any existing values, and queueing the property events.&#xA;Although the values will be set, fireQueue() must be called for their &#xA;associated events to execute." ilk="function" name="applyConfig" signature="applyConfig(userConfig, init)">
              <variable citdl="Object" doc="The configuration Object literal" ilk="argument" name="userConfig" />
              <variable citdl="Boolean" doc="When set to true, the initialConfig will &#xA;be set to the userConfig passed in, so that calling a reset will &#xA;reset the properties to the passed values." ilk="argument" name="init" />
            </scope>
            <scope doc="Refires the events for all configuration properties using their &#xA;current values." ilk="function" name="refresh" signature="refresh()" />
            <scope doc="Subscribes an external handler to the change event for any &#xA;given property." ilk="function" name="subscribeToConfigEvent" signature="subscribeToConfigEvent(key, handler, obj, overrideContext) =&gt; Boolean">
              <variable citdl="String" doc="The property name" ilk="argument" name="key" />
              <variable citdl="Function" doc="The handler function to use subscribe to &#xA;the property&apos;s event" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The Object to use for scoping the event handler &#xA;(see CustomEvent documentation)" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="Optional. If true, will override&#xA;&quot;this&quot; within the handler to map to the scope Object passed into the&#xA;method." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Validates that the value passed in is a Boolean." ilk="function" name="checkBoolean" signature="checkBoolean(val) =&gt; Boolean">
              <variable citdl="Object" doc="The value to validate" ilk="argument" name="val" />
            </scope>
            <scope doc="Initializes the configuration Object and all of its local members." ilk="function" name="init" signature="init(owner)">
              <variable citdl="Object" doc="The owner Object to which this Config &#xA;Object belongs" ilk="argument" name="owner" />
            </scope>
            <scope doc="Returns a string representation of the Config object" ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Fires the event for a property using the property&apos;s current value." ilk="function" name="refireEvent" signature="refireEvent(key)">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
            </scope>
            <scope doc="Resets the specified property&apos;s value to its initial value." ilk="function" name="resetProperty" signature="resetProperty(key) =&gt; Boolean">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
            </scope>
            <scope doc="Sets the value of a property. If the silent property is passed as &#xA;true, the property&apos;s event will not be fired." ilk="function" name="setProperty" signature="setProperty(key, value, silent) =&gt; Boolean">
              <variable citdl="String" doc="The name of the property" ilk="argument" name="key" />
              <variable citdl="String" doc="The value to set the property to" ilk="argument" name="value" />
              <variable citdl="Boolean" doc="Whether the value should be set silently, &#xA;without firing the property event." ilk="argument" name="silent" />
            </scope>
            <scope doc="Sets all properties to null, unsubscribes all listeners from each &#xA;property&apos;s change event and all listeners from the configChangedEvent." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Fires a configuration property event using the specified value." ilk="function" name="fireEvent" signature="fireEvent(key, Object)">
              <variable citdl="String" doc="The configuration property&apos;s name" ilk="argument" name="key" />
              <variable citdl="value" doc="The value of the correct type for the property" ilk="argument" name="Object" />
            </scope>
            <scope doc="Unsubscribes an external handler from the change event for any &#xA;given property." ilk="function" name="unsubscribeFromConfigEvent" signature="unsubscribeFromConfigEvent(key, handler, obj) =&gt; Boolean">
              <variable citdl="String" doc="The property name" ilk="argument" name="key" />
              <variable citdl="Function" doc="The handler function to use subscribe to &#xA;the property&apos;s event" ilk="argument" name="handler" />
              <variable citdl="Object" doc="The Object to use for scoping the event &#xA;handler (see CustomEvent documentation)" ilk="argument" name="obj" />
            </scope>
            <variable doc="Constant representing the CustomEvent type for the config changed event." name="YAHOO.util.Config.CONFIG_CHANGED_EVENT" />
            <variable citdl="Object" doc="Maintains the local, normalized CustomEvent queue" name="eventQueue" />
            <variable citdl="Object" doc="Object reference to the owner of this Config Object" name="owner" />
            <variable citdl="Boolean" doc="Boolean flag that specifies whether a queue is currently &#xA;being executed" name="queueInProgress" />
            <variable citdl="Object" doc="Maintains the local collection of configuration property objects as &#xA;they were initially applied.&#xA;This object is used when resetting a property." name="initialConfig" />
            <variable citdl="Object" doc="Maintains the local collection of configuration property objects and &#xA;their specified values" name="config" />
            <variable doc="Constant representing the boolean type string" name="YAHOO.util.Config.BOOLEAN_TYPE" />
          </scope>
          <scope doc="The Connection Manager singleton provides methods for creating and managing&#xA;asynchronous transactions." ilk="namespace" name="Connect">
            <scope doc="Method for initiating an asynchronous request via the XHR object." ilk="function" name="asyncRequest" signature="asyncRequest(method, uri, callback, postData) =&gt; object">
              <variable citdl="string" doc="HTTP transaction method" ilk="argument" name="method" />
              <variable citdl="string" doc="Fully qualified path of resource" ilk="argument" name="uri" />
              <variable citdl="callback" doc="User-defined callback function or object" ilk="argument" name="callback" />
              <variable citdl="string" doc="POST body" ilk="argument" name="postData" />
            </scope>
            <scope doc="Determines if the transaction is still being processed." ilk="function" name="isCallInProgress" signature="isCallInProgress(o) =&gt; boolean">
              <variable citdl="object" doc="The connection object returned by asyncRequest" ilk="argument" name="o" />
            </scope>
            <scope doc="Resets HTML form properties when an HTML form or HTML form&#xA;with file upload transaction is sent." ilk="function" name="resetFormState" signature="resetFormState() =&gt; void" />
            <scope doc="This method creates and subscribes custom events,&#xA;specific to each transaction" ilk="function" name="initCustomEvents" signature="initCustomEvents(o, callback) =&gt; void">
              <variable citdl="object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callback" doc="The user-defined callback object" ilk="argument" name="callback" />
            </scope>
            <scope doc="Method to terminate a transaction, if it has not reached readyState 4." ilk="function" name="abort" signature="abort(o, callback, isTimeout) =&gt; boolean">
              <variable citdl="object" doc="The connection object returned by asyncRequest." ilk="argument" name="o" />
              <variable citdl="object" doc="User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="string" doc="boolean to indicate if abort resulted from a callback timeout." ilk="argument" name="isTimeout" />
            </scope>
            <scope doc="This method instantiates the Flash transport and&#xA;establishes a static reference to it, used for all XDR requests." ilk="function" name="transport" signature="transport(URI) =&gt; void">
              <variable citdl="string" doc="to connection.swf." ilk="argument" name="URI" />
            </scope>
            <scope doc="Member to override the default transaction header.." ilk="function" name="setDefaultXhrHeader" signature="setDefaultXhrHeader(b) =&gt; ">
              <variable citdl="boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
            </scope>
            <scope doc="This method assembles the form label and value pairs and&#xA;constructs an encoded string.&#xA;asyncRequest() will automatically initialize the transaction with a&#xA;a HTTP header Content-Type of application/x-www-form-urlencoded." ilk="function" name="setForm" signature="setForm(form, optional, optional) =&gt; string">
              <variable citdl="string || object" doc="id or name attribute, or form object." ilk="argument" name="form" />
              <variable citdl="boolean" doc="enable file upload." ilk="argument" name="optional" />
              <variable citdl="boolean" doc="enable file upload over SSL in IE only." ilk="argument" name="optional" />
            </scope>
            <scope doc="Uploads HTML form, inclusive of files/attachments, using the&#xA;iframe created in createFrame to facilitate the transaction." ilk="function" name="uploadFile" signature="uploadFile(id, callback, uri, postData) =&gt; void">
              <variable citdl="int" doc="The transaction id." ilk="argument" name="id" />
              <variable citdl="object" doc="User-defined callback object." ilk="argument" name="callback" />
              <variable citdl="string" doc="Fully qualified path of resource." ilk="argument" name="uri" />
              <variable citdl="string" doc="POST data to be submitted in addition to HTML form." ilk="argument" name="postData" />
            </scope>
            <scope doc="This method evaluates the server response, creates and returns the results via&#xA;its properties.  Success and failure cases will differ in the response&#xA;object&apos;s property values." ilk="function" name="createResponseObject" signature="createResponseObject(o, callbackArg) =&gt; object">
              <variable citdl="object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
            </scope>
            <scope doc="This method is called by asyncRequest to create a&#xA;valid connection object for the transaction.  It also passes a&#xA;transaction id and increments the transaction id counter." ilk="function" name="getConnectionObject" signature="getConnectionObject() =&gt; object" />
            <scope doc="If a transaction cannot be completed due to dropped or closed connections,&#xA;there may be not be enough information to build a full response object.&#xA;The failure callback will be fired and this specific condition can be identified&#xA;by a status property value of 0.&#xA;If an abort was successful, the status property will report a value of -1." ilk="function" name="createExceptionObject" signature="createExceptionObject(tId, callbackArg, isAbort) =&gt; object">
              <variable citdl="int" doc="The Transaction Id" ilk="argument" name="tId" />
              <variable citdl="callbackArg" doc="The user-defined argument or arguments to be passed to the callback" ilk="argument" name="callbackArg" />
              <variable citdl="boolean" doc="Determines if the exception case is caused by a transaction abort" ilk="argument" name="isAbort" />
            </scope>
            <scope doc="This method is the initial response handler&#xA;for XDR transactions.  The Flash transport calls this&#xA;function and sends the response payload." ilk="function" name="handleXdrResponse" signature="handleXdrResponse(The) =&gt; void">
              <variable citdl="object" doc="response object sent from the Flash transport." ilk="argument" name="The" />
            </scope>
            <scope doc="Resets the default HTTP headers object" ilk="function" name="resetDefaultHeaders" signature="resetDefaultHeaders() =&gt; void" />
            <scope doc="This method calls the public method on the&#xA;Flash transport to start the XDR transaction.  It is analogous&#xA;to Connection Manager&apos;s asyncRequest method." ilk="function" name="xdr" signature="xdr(The, HTTP, URI, The, The) =&gt; void">
              <variable citdl="object" doc="transaction object." ilk="argument" name="The" />
              <variable citdl="string" doc="request method." ilk="argument" name="HTTP" />
              <variable citdl="string" doc="for the transaction." ilk="argument" name="URI" />
              <variable citdl="object" doc="transaction&apos;s callback object." ilk="argument" name="The" />
              <variable citdl="object" doc="JSON object used as HTTP POST data." ilk="argument" name="The" />
            </scope>
            <scope doc="Parses the POST data and creates hidden form elements&#xA;for each key-value, and appends them to the HTML form object." ilk="function" name="appendPostData" signature="appendPostData(postData) =&gt; array">
              <variable citdl="string" doc="The HTTP POST data" ilk="argument" name="postData" />
            </scope>
            <scope doc="Dereference the XHR instance and the connection object after the transaction is completed." ilk="function" name="releaseObject" signature="releaseObject(o) =&gt; void">
              <variable citdl="object" doc="The connection object" ilk="argument" name="o" />
            </scope>
            <scope doc="Instantiates a XMLHttpRequest object and returns an object with two properties:&#xA;the XMLHttpRequest instance and the transaction id." ilk="function" name="createXhrObject" signature="createXhrObject(transactionId) =&gt; ">
              <variable citdl="int" doc="Property containing the transaction id for this transaction." ilk="argument" name="transactionId" />
            </scope>
            <scope doc="This method attempts to interpret the server response and&#xA;determine whether the transaction was successful, or if an error or&#xA;exception was encountered." ilk="function" name="handleTransactionResponse" signature="handleTransactionResponse(o, callback, isAbort) =&gt; void">
              <variable citdl="object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="object" doc="The user-defined callback object" ilk="argument" name="callback" />
              <variable citdl="boolean" doc="Determines if the transaction was terminated via abort()." ilk="argument" name="isAbort" />
            </scope>
            <scope doc="Creates an iframe to be used for form file uploads.  It is remove from the&#xA;document upon completion of the upload transaction." ilk="function" name="createFrame" signature="createFrame(optional) =&gt; void">
              <variable citdl="string" doc="qualified path of iframe resource for SSL in IE." ilk="argument" name="optional" />
            </scope>
            <scope doc="This method fires the global and transaction start&#xA;events." ilk="function" name="_xdrStart" signature="_xdrStart(The, The) =&gt; void">
              <variable citdl="object" doc="transaction object." ilk="argument" name="The" />
              <variable citdl="string" doc="transaction&apos;s callback object." ilk="argument" name="The" />
            </scope>
            <scope doc="This method serves as a timer that polls the XHR object&apos;s readyState&#xA;property during a transaction, instead of binding a callback to the&#xA;onreadystatechange event.  Upon readyState 4, handleTransactionResponse&#xA;will process the response, and the timer will be cleared." ilk="function" name="handleReadyState" signature="handleReadyState(o, callback) =&gt; void">
              <variable citdl="object" doc="The connection object" ilk="argument" name="o" />
              <variable citdl="callback" doc="The user-defined callback object" ilk="argument" name="callback" />
            </scope>
            <scope doc="Member to override the default POST header." ilk="function" name="setDefaultPostHeader" signature="setDefaultPostHeader(b) =&gt; ">
              <variable citdl="boolean" doc="Set and use default header - true or false ." ilk="argument" name="b" />
            </scope>
            <scope doc="Method that initializes the custom HTTP headers for the each transaction." ilk="function" name="initHeader" signature="initHeader(label, value, isDefault) =&gt; void">
              <variable citdl="string" doc="The HTTP header label" ilk="argument" name="label" />
              <variable citdl="string" doc="The HTTP header value" ilk="argument" name="value" />
              <variable citdl="string" doc="Determines if the specific header is a default header&#xA;automatically sent with each transaction." ilk="argument" name="isDefault" />
            </scope>
            <scope doc="Member to add an ActiveX id to the existing xml_progid array.&#xA;In the event(unlikely) a new ActiveX id is introduced, it can be added&#xA;without internal code modifications." ilk="function" name="setProgId" signature="setProgId(id) =&gt; ">
              <variable citdl="string" doc="The ActiveX id to be added to initialize the XHR object." ilk="argument" name="id" />
            </scope>
            <scope doc="Member to modify the default polling interval." ilk="function" name="setPollingInterval" signature="setPollingInterval(i) =&gt; ">
              <variable citdl="int" doc="The polling interval in milliseconds." ilk="argument" name="i" />
            </scope>
            <scope doc="Accessor that sets the HTTP headers for each transaction." ilk="function" name="setHeader" signature="setHeader(o) =&gt; void">
              <variable citdl="object" doc="The connection object for the transaction." ilk="argument" name="o" />
            </scope>
            <scope doc="This method creates and instantiates the Flash transport." ilk="function" name="_swf" signature="_swf(URI) =&gt; void">
              <variable citdl="string" doc="to connection.swf." ilk="argument" name="URI" />
            </scope>
            <variable citdl="CustomEvent" doc="Custom event that fires when handleTransactionResponse() determines a&#xA;response in the HTTP 2xx range." name="successEvent" />
            <variable citdl="boolean" doc="The default header value for the label&#xA;&quot;X-Requested-With&quot;.  This is sent with each&#xA;transaction, by default, to identify the&#xA;request as being made by YUI Connection Manager." name="_default_xhr_header" />
            <variable citdl="CustomEvent" doc="Custom event that fires when a transaction response has completed." name="completeEvent" />
            <variable citdl="int" doc="The polling frequency, in milliseconds, for HandleReadyState.&#xA;when attempting to determine a transaction&apos;s XHR readyState.&#xA;The default is 50 milliseconds." name="_polling_interval" />
            <variable citdl="object" doc="Property modified by setForm() to set a reference to the HTML&#xA;form node if the desired action is file upload." name="_formNode" />
            <variable citdl="array" doc="Array of MSFT ActiveX ids for XMLHttpRequest." name="_msxml_progid" />
            <variable citdl="object" doc="Object literal of HTTP header(s)" name="_http_header" />
            <variable citdl="string" doc="Property modified by setForm() to set the HTML form data&#xA;for each transaction." name="_sFormData" />
            <variable citdl="boolean" doc="The default header used for POST transactions." name="_default_post_header" />
            <variable citdl="boolean" doc="Property modified by setForm() to determine if the data&#xA;should be submitted as an HTML form." name="_isFormSubmit" />
            <variable citdl="boolean" doc="Determines if custom, default headers&#xA;are set for each transaction." name="_has_default_header" />
            <variable doc="Determines whether YAHOO.util.Event is available and returns true or false.&#xA;If true, an event listener is bound at the document level to trap click events that&#xA;resolve to a target type of &quot;Submit&quot;.  This listener will enable setForm() to determine&#xA;the clicked &quot;Submit&quot; value in a multi-Submit button, HTML form." name="_hasSubmitListener" />
            <variable citdl="boolean" doc="The default header used for transactions involving the&#xA;use of HTML forms." name="_default_form_header" />
            <variable citdl="boolean" doc="Determines if a default header of&#xA;&apos;X-Requested-With: XMLHttpRequest&apos;&#xA;will be added to each transaction." name="_use_default_xhr_header" />
            <variable citdl="object" doc="Collection of polling references to the polling mechanism in handleReadyState." name="_poll" />
            <variable citdl="object" doc="Queue of timeout values for each transaction callback with a defined timeout value." name="_timeOut" />
            <variable citdl="CustomEvent" doc="Custom event that fires when a transaction is successfully aborted." name="abortEvent" />
            <variable citdl="int" doc="A transaction counter that increments the transaction id for each transaction." name="_transaction_id" />
            <variable citdl="CustomEvent" doc="Custom event that fires when handleTransactionResponse() determines a&#xA;response in the HTTP 4xx/5xx range." name="failureEvent" />
            <variable citdl="boolean" doc="Determines if a default header of&#xA;Content-Type of &apos;application/x-www-form-urlencoded&apos;&#xA;will be added to any client HTTP headers sent for POST&#xA;transactions." name="_use_default_post_header" />
            <variable citdl="object" doc="A reference table that maps callback custom events members to its specific&#xA;event name." name="_customEvents" />
            <variable citdl="CustomEvent" doc="Custom event that fires at the start of a transaction" name="startEvent" />
            <variable citdl="boolean" doc="Property modified by setForm() to determine if a file(s)&#xA;upload is expected." name="_isFileUpload" />
            <variable citdl="boolean" doc="Determines if HTTP headers are set." name="_has_http_headers" />
            <variable citdl="string" doc="Tracks the name-value pair of the &quot;clicked&quot; submit button if multiple submit&#xA;buttons are present in an HTML form; and, if YAHOO.util.Event is available." name="_submitElementValue" />
          </scope>
          <scope doc="Cookie utility." ilk="namespace" name="Cookie">
            <scope doc="Sets a sub cookie with a given name to a particular value." ilk="function" name="setSub" signature="setSub(name, subName, value, options) =&gt; String">
              <variable citdl="String" doc="The name of the cookie to set." ilk="argument" name="name" />
              <variable citdl="String" doc="The name of the subcookie to set." ilk="argument" name="subName" />
              <variable citdl="Variant" doc="The value to set." ilk="argument" name="value" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string), expires (a Date object),&#xA;and secure (true/false)." ilk="argument" name="options" />
            </scope>
            <scope doc="Parses a cookie hash string into an object." ilk="function" name="_parseCookieHash" signature="_parseCookieHash(text) =&gt; Object">
              <variable citdl="String" doc="The cookie hash string to parse. The string should already be URL-decoded." ilk="argument" name="text" />
            </scope>
            <scope doc="Sets a cookie with a given name and value." ilk="function" name="set" signature="set(name, value, options) =&gt; String">
              <variable citdl="String" doc="The name of the cookie to set." ilk="argument" name="name" />
              <variable citdl="Variant" doc="The value to set for the cookie." ilk="argument" name="value" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string), expires (a Date object),&#xA;raw (true/false), and secure (true/false)." ilk="argument" name="options" />
            </scope>
            <scope doc="Sets a cookie with a given name to contain a hash of name-value pairs." ilk="function" name="setSubs" signature="setSubs(name, value, options) =&gt; String">
              <variable citdl="String" doc="The name of the cookie to set." ilk="argument" name="name" />
              <variable citdl="Object" doc="An object containing name-value pairs." ilk="argument" name="value" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string), expires (a Date object),&#xA;and secure (true/false)." ilk="argument" name="options" />
            </scope>
            <scope doc="Determines if the cookie with the given name exists. This is useful for&#xA;Boolean cookies (those that do not follow the name=value convention)." ilk="function" name="exists" signature="exists(name) =&gt; Boolean">
              <variable citdl="String" doc="The name of the cookie to check." ilk="argument" name="name" />
            </scope>
            <scope doc="Returns the cookie value for the given name." ilk="function" name="get" signature="get(name, options) =&gt; Variant">
              <variable citdl="String" doc="The name of the cookie to retrieve." ilk="argument" name="name" />
              <variable citdl="Object|Function" doc="(Optional) An object containing one or more&#xA;cookie options: raw (true/false) and converter (a function).&#xA;The converter function is run on the value before returning it. The&#xA;function is not used if the cookie doesn&apos;t exist. The function can be&#xA;passed instead of the options object for backwards compatibility." ilk="argument" name="options" />
            </scope>
            <scope doc="Parses a cookie string into an object representing all accessible cookies." ilk="function" name="_parseCookieString" signature="_parseCookieString(text, decode) =&gt; Object">
              <variable citdl="String" doc="The cookie string to parse." ilk="argument" name="text" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the cookie values should be decoded or not. Default is true." ilk="argument" name="decode" />
            </scope>
            <scope doc="Removes a cookie from the machine by setting its expiration date to&#xA;sometime in the past." ilk="function" name="remove" signature="remove(name, options) =&gt; String">
              <variable citdl="String" doc="The name of the cookie to remove." ilk="argument" name="name" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string),&#xA;and secure (true/false). The expires option will be overwritten&#xA;by the method." ilk="argument" name="options" />
            </scope>
            <scope doc="Removes a subcookie with a given name. Removing the last subcookie&#xA;won&apos;t remove the entire cookie unless options.removeIfEmpty is true." ilk="function" name="removeSub" signature="removeSub(name, subName, options) =&gt; String">
              <variable citdl="String" doc="The name of the cookie in which the subcookie exists." ilk="argument" name="name" />
              <variable citdl="String" doc="The name of the subcookie to remove." ilk="argument" name="subName" />
              <variable citdl="Object" doc="(Optional) An object containing one or more&#xA;cookie options: path (a string), domain (a string), expires (a Date object),&#xA;removeIfEmpty (true/false), and secure (true/false). This must be the same&#xA;settings as the original subcookie." ilk="argument" name="options" />
            </scope>
            <scope doc="Formats a cookie value for an object containing multiple values." ilk="function" name="_createCookieHashString" signature="_createCookieHashString(hash) =&gt; String">
              <variable citdl="Object" doc="An object of key-value pairs to create a string for." ilk="argument" name="hash" />
            </scope>
            <scope doc="Returns an object containing name-value pairs stored in the cookie with the given name." ilk="function" name="getSubs" signature="getSubs(name) =&gt; Object">
              <variable citdl="String" doc="The name of the cookie to retrieve." ilk="argument" name="name" />
            </scope>
            <scope doc="Returns the value of a subcookie." ilk="function" name="getSub" signature="getSub(name, subName, converter) =&gt; Variant">
              <variable citdl="String" doc="The name of the cookie to retrieve." ilk="argument" name="name" />
              <variable citdl="String" doc="The name of the subcookie to retrieve." ilk="argument" name="subName" />
              <variable citdl="Function" doc="(Optional) A function to run on the value before returning&#xA;it. The function is not used if the cookie doesn&apos;t exist." ilk="argument" name="converter" />
            </scope>
            <scope doc="Creates a cookie string that can be assigned into document.cookie." ilk="function" name="_createCookieString" signature="_createCookieString(name, value, encodeValue, options) =&gt; String">
              <variable citdl="String" doc="The name of the cookie." ilk="argument" name="name" />
              <variable citdl="String" doc="The value of the cookie." ilk="argument" name="value" />
              <variable citdl="Boolean" doc="True to encode the value, false to leave as-is." ilk="argument" name="encodeValue" />
              <variable citdl="Object" doc="(Optional) Options for the cookie." ilk="argument" name="options" />
            </scope>
          </scope>
          <scope doc="The CustomEvent class lets you define events for your application&#xA;that can be subscribed to by one or more independent component." ilk="class" name="CustomEvent">
            <scope attributes="__ctor__" doc="The CustomEvent class lets you define events for your application&#xA;that can be subscribed to by one or more independent component." ilk="function" name="CustomEvent" signature="CustomEvent(type, context, silent, signature, fireOnce)">
              <variable citdl="String" doc="The type of event, which is passed to the callback&#xA;when the event fires" ilk="argument" name="type" />
              <variable citdl="Object" doc="The context the event will fire from.  &quot;this&quot; will&#xA;refer to this object in the callback.  Default value: &#xA;the window object.  The listener can override this." ilk="argument" name="context" />
              <variable citdl="boolean" doc="pass true to prevent the event from writing to&#xA;the debugsystem" ilk="argument" name="silent" />
              <variable citdl="int" doc="the signature that the custom event subscriber&#xA;will receive. YAHOO.util.CustomEvent.LIST or &#xA;YAHOO.util.CustomEvent.FLAT.  The default is&#xA;YAHOO.util.CustomEvent.LIST." ilk="argument" name="signature" />
              <variable citdl="boolean" doc="If configured to fire once, the custom event &#xA;will only notify subscribers a single time regardless of how many times &#xA;the event is fired.  In addition, new subscribers will be notified &#xA;immediately if the event has already been fired." ilk="argument" name="fireOnce" />
            </scope>
            <scope doc="Subscribes the caller to this event" ilk="function" name="subscribe" signature="subscribe(fn, obj)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event fires.&#xA;overrideContext &lt;boolean|Object&gt; If true, the obj passed in becomes the execution &#xA;context of the listener. If an object, that object becomes the execution context." ilk="argument" name="obj" />
            </scope>
            <scope doc="Notifies the subscribers.  The callback functions will be executed&#xA;from the context specified when the event was created, and with the &#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The type of event&lt;/li&gt;&#xA;&lt;li&gt;All of the arguments fire() was executed with as an array&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe() &#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" name="fire" signature="fire(arguments) =&gt; boolean">
              <variable citdl="Object*" doc="an arbitrary set of parameters to pass to &#xA;the handler." ilk="argument" name="arguments" />
            </scope>
            <scope doc="Removes all listeners" ilk="function" name="unsubscribeAll" signature="unsubscribeAll() =&gt; int" />
            <scope doc="" ilk="function" name="_delete" signature="_delete()" />
            <scope doc="" ilk="function" name="toString" signature="toString()" />
            <scope doc="Unsubscribes subscribers." ilk="function" name="unsubscribe" signature="unsubscribe(fn, obj) =&gt; boolean">
              <variable citdl="Function" doc="The subscribed function to remove, if not supplied&#xA;all will be removed" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="obj" />
            </scope>
            <variable citdl="boolean" doc="Indicates whether or not this event has ever been fired." name="fired" />
            <variable citdl="boolean" doc="If configured to fire once, the custom event will only notify subscribers&#xA;a single time regardless of how many times the event is fired.  In addition,&#xA;new subscribers will be notified immediately if the event has already been&#xA;fired." name="fireOnce" />
            <variable citdl="int" doc="Subscriber listener sigature constant.  The FLAT type returns two&#xA;parameters: the first argument passed to fire and the optional &#xA;custom object" name="YAHOO.util.CustomEvent.FLAT" />
            <variable citdl="Array" doc="For fireOnce events the arguments the event was fired with are stored&#xA;so that new subscribers get the proper payload." name="firedWith" />
            <variable citdl="Subscriber[]" doc="The subscribers to this event" name="subscribers" />
            <variable citdl="int" doc="Custom events support two styles of arguments provided to the event&#xA;subscribers.  &#xA;&lt;ul&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.LIST: &#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: event name&lt;/li&gt;&#xA;&lt;li&gt;param2: array of arguments sent to fire&lt;/li&gt;&#xA;&lt;li&gt;param3: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;YAHOO.util.CustomEvent.FLAT&#xA;&lt;ul&gt;&#xA;&lt;li&gt;param1: the first argument passed to fire.  If you need to&#xA;pass multiple parameters, use and array or object literal&lt;/li&gt;&#xA;&lt;li&gt;param2: &lt;optional&gt; a custom object supplied by the subscriber&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" name="signature" />
            <variable citdl="int" doc="Subscriber listener sigature constant.  The LIST type returns three&#xA;parameters: the event type, the array of args passed to fire, and&#xA;the optional custom object" name="YAHOO.util.CustomEvent.LIST" />
            <variable citdl="object" doc="The context the event will fire from by default. Defaults to the window obj." name="scope" />
            <variable citdl="Error" doc="In order to make it possible to execute the rest of the subscriber&#xA;stack when one thows an exception, the subscribers exceptions are&#xA;caught.  The most recent exception is stored in this property" name="lastError" />
            <variable citdl="string" doc="The type of event, returned to subscribers when the event fires" name="type" />
            <variable citdl="boolean" doc="By default all custom events are logged in the debug build. Set silent to true &#xA;to disable debug output for this event." name="silent" />
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" doc="A DragDrop implementation where the linked element follows the &#xA;mouse cursor during a drag." ilk="class" name="DD">
            <scope attributes="__ctor__" doc="A DragDrop implementation where the linked element follows the &#xA;mouse cursor during a drag." ilk="function" name="DD" signature="DD(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="object" doc="an object containing configurable attributes&#xA;Valid properties for DD: &#xA;scroll" ilk="argument" name="config" />
            </scope>
            <scope doc="Sets the drag element to the location of the mousedown or click event, &#xA;maintaining the cursor location relative to the location on the element &#xA;that was clicked.  Override this if you want to place the element in a &#xA;location other than where the cursor is." ilk="function" name="setDragElPos" signature="setDragElPos(iPageX, iPageY)">
              <variable citdl="int" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="int" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
            </scope>
            <scope doc="Sets the element to the location of the mousedown or click event, &#xA;maintaining the cursor location relative to the location on the element &#xA;that was clicked.  Override this if you want to place the element in a &#xA;location other than where the cursor is." ilk="function" name="alignElWithMouse" signature="alignElWithMouse(el, iPageX, iPageY)">
              <variable citdl="HTMLElement" doc="the element to move" ilk="argument" name="el" />
              <variable citdl="int" doc="the X coordinate of the mousedown or drag event" ilk="argument" name="iPageX" />
              <variable citdl="int" doc="the Y coordinate of the mousedown or drag event" ilk="argument" name="iPageY" />
            </scope>
            <scope doc="Sets the pointer offset to the distance between the linked element&apos;s top &#xA;left corner and the location the element was clicked" ilk="function" name="autoOffset" signature="autoOffset(iPageX, iPageY)">
              <variable citdl="int" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="int" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
            </scope>
            <scope doc="Auto-scroll the window if the dragged object has been moved beyond the &#xA;visible window boundary." ilk="function" name="autoScroll" signature="autoScroll(x, y, h, w)">
              <variable citdl="int" doc="the drag element&apos;s x position" ilk="argument" name="x" />
              <variable citdl="int" doc="the drag element&apos;s y position" ilk="argument" name="y" />
              <variable citdl="int" doc="the height of the drag element" ilk="argument" name="h" />
              <variable citdl="int" doc="the width of the drag element" ilk="argument" name="w" />
            </scope>
            <scope doc="Sets the pointer offset.  You can call this directly to force the &#xA;offset to be in a particular location (e.g., pass in 0,0 to set it &#xA;to the center of the object, as done in YAHOO.widget.Slider)" ilk="function" name="setDelta" signature="setDelta(iDeltaX, iDeltaY)">
              <variable citdl="int" doc="the distance from the left" ilk="argument" name="iDeltaX" />
              <variable citdl="int" doc="the distance from the top" ilk="argument" name="iDeltaY" />
            </scope>
            <scope doc="Saves the most recent position so that we can reset the constraints and&#xA;tick marks on-demand.  We need to know this so that we can calculate the&#xA;number of pixels the element is offset from its original position." ilk="function" name="cachePosition" signature="cachePosition(iPageX, iPageY)">
              <variable doc="the current x position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageX" />
              <variable doc="the current y position (optional, this just makes it so we&#xA;don&apos;t have to look it up again)" ilk="argument" name="iPageY" />
            </scope>
            <variable citdl="boolean" doc="When set to true, the utility automatically tries to scroll the browser&#xA;window when a drag and drop element is dragged near the viewport boundary.&#xA;Defaults to true." name="scroll" />
          </scope>
          <scope classrefs="YAHOO.util.DD" doc="A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="class" name="DDProxy">
            <scope attributes="__ctor__" doc="A DragDrop implementation that inserts an empty, bordered div into&#xA;the document that follows the cursor during drag operations.  At the time of&#xA;the click, the frame div is resized to the dimensions of the linked html&#xA;element, and moved to the exact location of the linked element.&#xA;References to the &quot;frame&quot; element refer to the single proxy element that&#xA;was created to be dragged in place of all DDProxy elements on the&#xA;page." ilk="function" name="DDProxy" signature="DDProxy(id, sGroup, config)">
              <variable citdl="String" doc="the id of the linked html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="object" doc="an object containing configurable attributes&#xA;Valid properties for DDProxy in addition to those in DragDrop: &#xA;resizeFrame, centerFrame, dragElId" ilk="argument" name="config" />
            </scope>
            <scope doc="Creates the proxy element if it does not yet exist" ilk="function" name="createFrame" signature="createFrame()" />
            <scope doc="Initialization for the drag frame element.  Must be called in the&#xA;constructor of all subclasses" ilk="function" name="initFrame" signature="initFrame()" />
            <scope doc="Resizes the drag frame to the dimensions of the clicked object, positions &#xA;it over the object, and finally displays it" ilk="function" name="showFrame" signature="showFrame(iPageX, iPageY)">
              <variable citdl="int" doc="X click position" ilk="argument" name="iPageX" />
              <variable citdl="int" doc="Y click position" ilk="argument" name="iPageY" />
            </scope>
            <scope doc="The proxy is automatically resized to the dimensions of the linked&#xA;element when a drag is initiated, unless resizeFrame is set to false" ilk="function" name="_resizeProxy" signature="_resizeProxy()" />
            <variable citdl="String" doc="The default drag frame div id" name="YAHOO.util.DDProxy.dragElId" />
            <variable citdl="boolean" doc="By default we resize the drag frame to be the same size as the element&#xA;we want to drag (this is to get the frame effect).  We can turn it off&#xA;if we want a different behavior." name="resizeFrame" />
            <variable citdl="boolean" doc="By default the frame is positioned exactly where the drag element is, so&#xA;we use the cursor offset provided by YAHOO.util.DD.  Another option that works only if&#xA;you do not have constraints on the obj is to have the drag frame centered&#xA;around the cursor.  Set centerFrame to true for this effect." name="centerFrame" />
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" doc="A DragDrop implementation that does not move, but can be a drop &#xA;target.  You would get the same result by simply omitting implementation &#xA;for the event callbacks, but this way we reduce the processing cost of the &#xA;event listener and the callbacks." ilk="class" name="DDTarget">
            <scope attributes="__ctor__" doc="A DragDrop implementation that does not move, but can be a drop &#xA;target.  You would get the same result by simply omitting implementation &#xA;for the event callbacks, but this way we reduce the processing cost of the &#xA;event listener and the callbacks." ilk="function" name="DDTarget" signature="DDTarget(id, sGroup, config)">
              <variable citdl="String" doc="the id of the element that is a drop target" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="object" doc="an object containing configurable attributes&#xA;Valid properties for DDTarget in addition to those in &#xA;DragDrop: &#xA;none" ilk="argument" name="config" />
            </scope>
          </scope>
          <scope doc="Factory class for creating a BaseDataSource subclass instance. The sublcass is&#xA;determined by oLiveData&apos;s type, unless the dataType config is explicitly passed in." ilk="class" name="DataSource">
            <scope attributes="__ctor__" doc="Factory class for creating a BaseDataSource subclass instance. The sublcass is&#xA;determined by oLiveData&apos;s type, unless the dataType config is explicitly passed in." ilk="function" name="DataSource" signature="DataSource(oLiveData, oConfigs)">
              <variable citdl="HTMLElement" doc="Pointer to live data." ilk="argument" name="oLiveData" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
          </scope>
          <scope doc="Base class for the YUI DataSource utility." ilk="class" name="DataSourceBase">
            <scope attributes="__ctor__" doc="Base class for the YUI DataSource utility." ilk="function" name="DataSourceBase" signature="DataSourceBase(oLiveData, oConfigs)">
              <variable citdl="HTMLElement" doc="Pointer to live data." ilk="argument" name="oLiveData" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Flushes cache." ilk="function" name="flushCache" signature="flushCache()" />
            <scope doc="Disables polling mechanism associated with the given interval ID." ilk="function" name="clearInterval" signature="clearInterval(nId)">
              <variable citdl="Number" doc="Interval ID." ilk="argument" name="nId" />
            </scope>
            <scope doc="Overridable method parses Array data into a response object." ilk="function" name="parseArrayData" signature="parseArrayData(oRequest, oFullResponse) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full Array from the live database." ilk="argument" name="oFullResponse" />
            </scope>
            <scope doc="First looks for cached response, then sends request to live data. The&#xA;following arguments are passed to the callback function:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;&lt;code&gt;oRequest&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The same value that was passed in as the first argument to sendRequest.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;oParsedResponse&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;An object literal containing the following properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;&lt;code&gt;tId&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;Unique transaction ID number.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;results&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;Schema-parsed data results.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;error&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;True in cases of data error.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;cached&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;True when response is returned from DataSource cache.&lt;/dd&gt; &#xA;&lt;dt&gt;&lt;code&gt;meta&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;Schema-parsed meta data.&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;dt&gt;&lt;code&gt;oPayload&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The same value as was passed in as &lt;code&gt;argument&lt;/code&gt; in the oCallback object literal.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" name="sendRequest" signature="sendRequest(oRequest, oCallback, oCaller) =&gt; Number">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="An object literal with the following properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;&lt;code&gt;success&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The function to call when the data is ready.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;failure&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The function to call upon a response failure condition.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;scope&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;The object to serve as the scope for the success and failure handlers.&lt;/dd&gt;&#xA;&lt;dt&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/dt&gt;&#xA;&lt;dd&gt;Arbitrary data that will be passed back to the success and failure handlers.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
            </scope>
            <scope doc="Executes a configured callback.  For object literal callbacks, the third&#xA;param determines whether to execute the success handler or failure handler." ilk="function" name="issueCallback" signature="issueCallback(callback, params, error, scope)">
              <variable citdl="Function|Object" doc="the callback to execute" ilk="argument" name="callback" />
              <variable citdl="Array" doc="params to be passed to the callback method" ilk="argument" name="params" />
              <variable citdl="Boolean" doc="whether an error occurred" ilk="argument" name="error" />
              <variable citdl="Object" doc="the scope from which to execute the callback&#xA;(deprecated - use an object literal callback)" ilk="argument" name="scope" />
            </scope>
            <scope doc="Overridable method parses data of generic RESPONSE_TYPE into a response object." ilk="function" name="parseData" signature="parseData(oRequest, oFullResponse) =&gt; Object} Parsed response object with the following properties:&lt;br&gt;&#xA;- results {Array} Array of parsed data results&lt;br&gt;&#xA;- meta {Object} Object literal of meta values&lt;br&gt;&#xA;- error {Boolean">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full Array from the live database." ilk="argument" name="oFullResponse" />
            </scope>
            <scope doc="Overridable method parses plain text data into a response object." ilk="function" name="parseTextData" signature="parseTextData(oRequest, oFullResponse) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full text response from the live database." ilk="argument" name="oFullResponse" />
            </scope>
            <scope doc="Overridable method parses an HTML TABLE element reference into a response object.&#xA;Data is parsed out of TR elements from all TBODY elements." ilk="function" name="parseHTMLTableData" signature="parseHTMLTableData(oRequest, oFullResponse) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full HTML element reference from the live database." ilk="argument" name="oFullResponse" />
            </scope>
            <scope doc="Public accessor to the unique name of the DataSource instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Overridable method gives implementers access to the original full response and&#xA;the parsed response (parsed against the given schema) before the data&#xA;is added to the cache (if applicable) and then sent back to callback function.&#xA;This is your chance to access the raw response and/or populate the parsed&#xA;response with any custom data." ilk="function" name="doBeforeCallback" signature="doBeforeCallback(oRequest, oFullResponse, oParsedResponse, oCallback) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full response from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="Object" doc="The parsed response to return to calling object." ilk="argument" name="oParsedResponse" />
              <variable citdl="Object" doc="The callback object." ilk="argument" name="oCallback" />
            </scope>
            <scope doc="Adds a new item to the cache. If cache is full, evicts the stalest item&#xA;before adding the new item." ilk="function" name="addToCache" signature="addToCache(oRequest, oResponse)">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Response object to cache." ilk="argument" name="oResponse" />
            </scope>
            <scope doc="Overridable method passes request to cache and returns cached response if any,&#xA;refreshing the hit in the cache as the newest item. Returns null if there is&#xA;no cache hit." ilk="function" name="getCachedResponse" signature="getCachedResponse(oRequest, oCallback, oCaller) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Callback object." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use callback object." ilk="argument" name="oCaller" />
            </scope>
            <scope doc="Sets up a polling mechanism to send requests at set intervals and forward&#xA;responses to given callback." ilk="function" name="setInterval" signature="setInterval(nMsec, oRequest, oCallback, oCaller) =&gt; Number">
              <variable citdl="Number" doc="Length of interval in milliseconds." ilk="argument" name="nMsec" />
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Function" doc="Handler function to receive the response." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
            </scope>
            <scope doc="Overridable method parses XML data for one result into an object literal." ilk="function" name="parseXMLResult" signature="parseXMLResult(result) =&gt; Object">
              <variable citdl="XML" doc="XML for one result." ilk="argument" name="result" />
            </scope>
            <scope doc="Receives raw data response and type converts to XML, JSON, etc as necessary.&#xA;Forwards oFullResponse to appropriate parsing function to get turned into&#xA;oParsedResponse. Calls doBeforeCallback() and adds oParsedResponse to &#xA;the cache when appropriate before calling issueCallback().&#xA;The oParsedResponse object literal has the following properties:&#xA;&lt;dl&gt;&#xA;&lt;dd&gt;&lt;dt&gt;tId {Number}&lt;/dt&gt; Unique transaction ID&lt;/dd&gt;&#xA;&lt;dd&gt;&lt;dt&gt;results {Array}&lt;/dt&gt; Array of parsed data results&lt;/dd&gt;&#xA;&lt;dd&gt;&lt;dt&gt;meta {Object}&lt;/dt&gt; Object literal of meta values&lt;/dd&gt; &#xA;&lt;dd&gt;&lt;dt&gt;error {Boolean}&lt;/dt&gt; (optional) True if there was an error&lt;/dd&gt;&#xA;&lt;dd&gt;&lt;dt&gt;cached {Boolean}&lt;/dt&gt; (optional) True if response was cached&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" name="handleResponse" signature="handleResponse(oRequest, oRawResponse, oCallback, oCaller, tId)">
              <variable citdl="Object" doc="Request object" ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The raw response from the live database." ilk="argument" name="oRawResponse" />
              <variable citdl="Object" doc="Callback object literal." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
              <variable citdl="Number" doc="Transaction ID." ilk="argument" name="tId" />
            </scope>
            <scope doc="Overridable method parses XML data into a response object." ilk="function" name="parseXMLData" signature="parseXMLData(oRequest, oFullResponse) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full XML response from the live database." ilk="argument" name="oFullResponse" />
            </scope>
            <scope doc="Overridable default method generates a unique transaction ID and passes &#xA;the live data reference directly to the  handleResponse function. This&#xA;method should be implemented by subclasses to achieve more complex behavior&#xA;or to access remote data." ilk="function" name="makeConnection" signature="makeConnection(oRequest, oCallback, oCaller) =&gt; Number">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Callback object literal." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
            </scope>
            <scope doc="Converts data to type Date." ilk="function" name="DataSourceBase.parseDate" signature="DataSourceBase.parseDate(oData) =&gt; Date">
              <variable citdl="Date | String | Number" doc="Data to convert." ilk="argument" name="oData" />
            </scope>
            <scope doc="Overridable method parses JSON data into a response object." ilk="function" name="parseJSONData" signature="parseJSONData(oRequest, oFullResponse) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full JSON from the live database." ilk="argument" name="oFullResponse" />
            </scope>
            <scope doc="Overridable method gives implementers access to the original full response&#xA;before the data gets parsed. Implementers should take care not to return an&#xA;unparsable or otherwise invalid response." ilk="function" name="doBeforeParseData" signature="doBeforeParseData(oRequest, oFullResponse, oCallback) =&gt; Object">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="The full response from the live database." ilk="argument" name="oFullResponse" />
              <variable citdl="Object" doc="The callback object." ilk="argument" name="oCallback" />
            </scope>
            <scope doc="Converts data to type String." ilk="function" name="DataSourceBase.parseString" signature="DataSourceBase.parseString(oData) =&gt; String">
              <variable citdl="String | Number | Boolean | Date | Array | Object" doc="Data to parse.&#xA;The special values null and undefined will return null." ilk="argument" name="oData" />
            </scope>
            <scope doc="Get an XPath-specified value for a given field from an XML node or document." ilk="function" name="_getLocationValue" signature="_getLocationValue(field, context) =&gt; Object">
              <variable citdl="String | Object" doc="Field definition." ilk="argument" name="field" />
              <variable citdl="Object" doc="XML node or document to search within." ilk="argument" name="context" />
            </scope>
            <scope doc="Converts data to type Number." ilk="function" name="DataSourceBase.parseNumber" signature="DataSourceBase.parseNumber(oData) =&gt; Number">
              <variable citdl="String | Number | Boolean" doc="Data to convert. Note, the following&#xA;values return as null: null, undefined, NaN, &quot;&quot;." ilk="argument" name="oData" />
            </scope>
            <scope doc="Default overridable method matches given request to given cached request.&#xA;Returns true if is a hit, returns false otherwise.  Implementers should&#xA;override this method to customize the cache-matching algorithm." ilk="function" name="isCacheHit" signature="isCacheHit(oRequest, oCachedRequest) =&gt; Boolean">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Cached request object." ilk="argument" name="oCachedRequest" />
            </scope>
            <scope doc="Disables all known polling intervals." ilk="function" name="clearAllIntervals" signature="clearAllIntervals()" />
            <variable citdl="Number" doc="Type is an HTML TABLE element. Data is parsed out of TR elements from all TBODY elements." name="TYPE_HTMLTABLE" />
            <variable citdl="Number" doc="Max size of the local cache.  Set to 0 to turn off caching.  Caching is&#xA;useful to reduce the number of server connections.  Recommended only for data&#xA;sources that return comprehensive results for queries or when stale data is&#xA;not an issue." name="maxCacheEntries" />
            <variable citdl="Object" doc="Local queue of request connections, enabled if queue needs to be managed." name="_oQueue" />
            <variable citdl="Number" doc="Type is hosted on a server via a dynamic script node." name="TYPE_SCRIPTNODE" />
            <variable citdl="Number" doc="Type is plain text." name="TYPE_TEXT" />
            <variable citdl="String" doc="Name of DataSource instance." name="_sName" />
            <variable citdl="Number" doc="Internal class variable to assign unique transaction IDs." name="DataSourceBase._nTransactionId" />
            <variable citdl="Number" doc="Format of response:&#xA;&lt;dl&gt;  &#xA;&lt;dt&gt;TYPE_UNKNOWN&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_JSARRAY&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_JSON&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_XML&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_TEXT&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_HTMLTABLE&lt;/dt&gt; &#xA;&lt;/dl&gt;" name="responseType" />
            <variable citdl="Number" doc="Internal class variable to index multiple DataSource instances." name="DataSourceBase._nIndex" />
            <variable citdl="Number" doc="Type is hosted on a server via an XHR connection." name="TYPE_XHR" />
            <variable citdl="Boolean" doc="When working with XML data, setting this property to true enables support for&#xA;XPath-syntaxed locators in schema definitions." name="useXPath" />
            <variable citdl="Number" doc="Type is JSON." name="TYPE_JSON" />
            <variable citdl="Number" doc="Type is unknown." name="TYPE_UNKNOWN" />
            <variable citdl="Number" doc="Type is a JavaScript Function." name="TYPE_JSFUNCTION" />
            <variable citdl="Number" doc="Where the live data is held:&#xA;&lt;dl&gt;  &#xA;&lt;dt&gt;TYPE_UNKNOWN&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_LOCAL&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_XHR&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_SCRIPTNODE&lt;/dt&gt;&#xA;&lt;dt&gt;TYPE_JSFUNCTION&lt;/dt&gt;&#xA;&lt;/dl&gt;" name="dataType" />
            <variable citdl="Object[]" doc="Local cache of data result object literals indexed chronologically." name="_aCache" />
            <variable citdl="Object" doc="Pointer to live database." name="liveData" />
            <variable citdl="Number" doc="Type is local." name="TYPE_LOCAL" />
            <variable citdl="String" doc="Error message for invalid dataresponses." name="ERROR_DATAINVALID" />
            <variable citdl="Object" doc="Response schema object literal takes a combination of the following properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;resultsList&lt;/dt&gt; &lt;dd&gt;Pointer to array of tabular data&lt;/dd&gt;&#xA;&lt;dt&gt;resultNode&lt;/dt&gt; &lt;dd&gt;Pointer to node name of row data (XML data only)&lt;/dd&gt;&#xA;&lt;dt&gt;recordDelim&lt;/dt&gt; &lt;dd&gt;Record delimiter (text data only)&lt;/dd&gt;&#xA;&lt;dt&gt;fieldDelim&lt;/dt&gt; &lt;dd&gt;Field delimiter (text data only)&lt;/dd&gt;&#xA;&lt;dt&gt;fields&lt;/dt&gt; &lt;dd&gt;Array of field names (aka keys), or array of object literals&#xA;such as: {key:&quot;fieldname&quot;,parser:YAHOO.util.DataSourceBase.parseDate}&lt;/dd&gt;&#xA;&lt;dt&gt;metaFields&lt;/dt&gt; &lt;dd&gt;Object literal of keys to include in the oParsedResponse.meta collection&lt;/dd&gt;&#xA;&lt;dt&gt;metaNode&lt;/dt&gt; &lt;dd&gt;Name of the node under which to search for meta information in XML response data&lt;/dd&gt;&#xA;&lt;/dl&gt;" name="responseSchema" />
            <variable citdl="Number" doc="Type is a JavaScript Array." name="TYPE_JSARRAY" />
            <variable citdl="Number" doc="Type is XML." name="TYPE_XML" />
            <variable citdl="String" doc="Error message for null data responses." name="ERROR_DATANULL" />
            <variable citdl="{MIXED|Array} If an Array, contents are used as individual arguments.&#xA;Otherwise, value is used as an additional argument." doc="Additional arguments passed to the JSON parse routine.  The JSON string&#xA;is the assumed first argument (where applicable).  This property is not&#xA;set by default, but the parse methods will use it if present." name="parseJSONArgs" />
            <variable citdl="Object" doc="Data parsing functions." name="DataSource.Parser" />
            <variable citdl="Array" doc="Array of polling interval IDs that have been enabled, needed to clear all intervals." name="_aIntervals" />
          </scope>
          <scope doc="The static Date class provides helper functions to deal with data of type Date." ilk="namespace" name="Date">
            <scope doc="Takes a native JavaScript Date and formats to string for display to user." ilk="function" name="format" signature="format(oDate, oConfig, sLocale) =&gt; String">
              <variable citdl="Date" doc="Date." ilk="argument" name="oDate" />
              <variable citdl="Object" doc="(Optional) Object literal of configuration values:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;format &amp;lt;String&amp;gt;&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;&lt;p&gt;&#xA;Any strftime string is supported, such as &quot;%I:%M:%S %p&quot;. strftime has several format specifiers defined by the Open group at &#xA;&lt;a href=&quot;http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html&quot;&gt;http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;   &#xA;PHP added a few of its own, defined at &lt;a href=&quot;http://www.php.net/strftime&quot;&gt;http://www.php.net/strftime&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;This javascript implementation supports all the PHP specifiers and a few more.  The full list is below:&#xA;&lt;/p&gt;&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;%a&lt;/dt&gt; &lt;dd&gt;abbreviated weekday name according to the current locale&lt;/dd&gt;&#xA;&lt;dt&gt;%A&lt;/dt&gt; &lt;dd&gt;full weekday name according to the current locale&lt;/dd&gt;&#xA;&lt;dt&gt;%b&lt;/dt&gt; &lt;dd&gt;abbreviated month name according to the current locale&lt;/dd&gt;&#xA;&lt;dt&gt;%B&lt;/dt&gt; &lt;dd&gt;full month name according to the current locale&lt;/dd&gt;&#xA;&lt;dt&gt;%c&lt;/dt&gt; &lt;dd&gt;preferred date and time representation for the current locale&lt;/dd&gt;&#xA;&lt;dt&gt;%C&lt;/dt&gt; &lt;dd&gt;century number (the year divided by 100 and truncated to an integer, range 00 to 99)&lt;/dd&gt;&#xA;&lt;dt&gt;%d&lt;/dt&gt; &lt;dd&gt;day of the month as a decimal number (range 01 to 31)&lt;/dd&gt;&#xA;&lt;dt&gt;%D&lt;/dt&gt; &lt;dd&gt;same as %m/%d/%y&lt;/dd&gt;&#xA;&lt;dt&gt;%e&lt;/dt&gt; &lt;dd&gt;day of the month as a decimal number, a single digit is preceded by a space (range &apos; 1&apos; to &apos;31&apos;)&lt;/dd&gt;&#xA;&lt;dt&gt;%F&lt;/dt&gt; &lt;dd&gt;same as %Y-%m-%d (ISO 8601 date format)&lt;/dd&gt;&#xA;&lt;dt&gt;%g&lt;/dt&gt; &lt;dd&gt;like %G, but without the century&lt;/dd&gt;&#xA;&lt;dt&gt;%G&lt;/dt&gt; &lt;dd&gt;The 4-digit year corresponding to the ISO week number&lt;/dd&gt;&#xA;&lt;dt&gt;%h&lt;/dt&gt; &lt;dd&gt;same as %b&lt;/dd&gt;&#xA;&lt;dt&gt;%H&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 24-hour clock (range 00 to 23)&lt;/dd&gt;&#xA;&lt;dt&gt;%I&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 12-hour clock (range 01 to 12)&lt;/dd&gt;&#xA;&lt;dt&gt;%j&lt;/dt&gt; &lt;dd&gt;day of the year as a decimal number (range 001 to 366)&lt;/dd&gt;&#xA;&lt;dt&gt;%k&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 24-hour clock (range 0 to 23); single digits are preceded by a blank. (See also %H.)&lt;/dd&gt;&#xA;&lt;dt&gt;%l&lt;/dt&gt; &lt;dd&gt;hour as a decimal number using a 12-hour clock (range 1 to 12); single digits are preceded by a blank. (See also %I.) &lt;/dd&gt;&#xA;&lt;dt&gt;%m&lt;/dt&gt; &lt;dd&gt;month as a decimal number (range 01 to 12)&lt;/dd&gt;&#xA;&lt;dt&gt;%M&lt;/dt&gt; &lt;dd&gt;minute as a decimal number&lt;/dd&gt;&#xA;&lt;dt&gt;%n&lt;/dt&gt; &lt;dd&gt;newline character&lt;/dd&gt;&#xA;&lt;dt&gt;%p&lt;/dt&gt; &lt;dd&gt;either `AM&apos; or `PM&apos; according to the given time value, or the corresponding strings for the current locale&lt;/dd&gt;&#xA;&lt;dt&gt;%P&lt;/dt&gt; &lt;dd&gt;like %p, but lower case&lt;/dd&gt;&#xA;&lt;dt&gt;%r&lt;/dt&gt; &lt;dd&gt;time in a.m. and p.m. notation equal to %I:%M:%S %p&lt;/dd&gt;&#xA;&lt;dt&gt;%R&lt;/dt&gt; &lt;dd&gt;time in 24 hour notation equal to %H:%M&lt;/dd&gt;&#xA;&lt;dt&gt;%s&lt;/dt&gt; &lt;dd&gt;number of seconds since the Epoch, ie, since 1970-01-01 00:00:00 UTC&lt;/dd&gt;&#xA;&lt;dt&gt;%S&lt;/dt&gt; &lt;dd&gt;second as a decimal number&lt;/dd&gt;&#xA;&lt;dt&gt;%t&lt;/dt&gt; &lt;dd&gt;tab character&lt;/dd&gt;&#xA;&lt;dt&gt;%T&lt;/dt&gt; &lt;dd&gt;current time, equal to %H:%M:%S&lt;/dd&gt;&#xA;&lt;dt&gt;%u&lt;/dt&gt; &lt;dd&gt;weekday as a decimal number [1,7], with 1 representing Monday&lt;/dd&gt;&#xA;&lt;dt&gt;%U&lt;/dt&gt; &lt;dd&gt;week number of the current year as a decimal number, starting with the&#xA;first Sunday as the first day of the first week&lt;/dd&gt;&#xA;&lt;dt&gt;%V&lt;/dt&gt; &lt;dd&gt;The ISO 8601:1988 week number of the current year as a decimal number,&#xA;range 01 to 53, where week 1 is the first week that has at least 4 days&#xA;in the current year, and with Monday as the first day of the week.&lt;/dd&gt;&#xA;&lt;dt&gt;%w&lt;/dt&gt; &lt;dd&gt;day of the week as a decimal, Sunday being 0&lt;/dd&gt;&#xA;&lt;dt&gt;%W&lt;/dt&gt; &lt;dd&gt;week number of the current year as a decimal number, starting with the&#xA;first Monday as the first day of the first week&lt;/dd&gt;&#xA;&lt;dt&gt;%x&lt;/dt&gt; &lt;dd&gt;preferred date representation for the current locale without the time&lt;/dd&gt;&#xA;&lt;dt&gt;%X&lt;/dt&gt; &lt;dd&gt;preferred time representation for the current locale without the date&lt;/dd&gt;&#xA;&lt;dt&gt;%y&lt;/dt&gt; &lt;dd&gt;year as a decimal number without a century (range 00 to 99)&lt;/dd&gt;&#xA;&lt;dt&gt;%Y&lt;/dt&gt; &lt;dd&gt;year as a decimal number including the century&lt;/dd&gt;&#xA;&lt;dt&gt;%z&lt;/dt&gt; &lt;dd&gt;numerical time zone representation&lt;/dd&gt;&#xA;&lt;dt&gt;%Z&lt;/dt&gt; &lt;dd&gt;time zone name or abbreviation&lt;/dd&gt;&#xA;&lt;dt&gt;%%&lt;/dt&gt; &lt;dd&gt;a literal `%&apos; character&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="argument" name="oConfig" />
              <variable citdl="String" doc="(Optional) The locale to use when displaying days of week,&#xA;months of the year, and other locale specific strings.  The following locales are&#xA;built in:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;en&lt;/dt&gt;&#xA;&lt;dd&gt;English&lt;/dd&gt;&#xA;&lt;dt&gt;en-US&lt;/dt&gt;&#xA;&lt;dd&gt;US English&lt;/dd&gt;&#xA;&lt;dt&gt;en-GB&lt;/dt&gt;&#xA;&lt;dd&gt;British English&lt;/dd&gt;&#xA;&lt;dt&gt;en-AU&lt;/dt&gt;&#xA;&lt;dd&gt;Australian English (identical to British English)&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;More locales may be added by subclassing of YAHOO.util.DateLocale.&#xA;See YAHOO.util.DateLocale for more information." ilk="argument" name="sLocale" />
            </scope>
          </scope>
          <scope doc="The DateAssert object provides functions to test JavaScript Date objects&#xA;for a variety of cases." ilk="namespace" name="DateAssert">
            <scope doc="Asserts that a date&apos;s month, day, and year are equal to another date&apos;s." ilk="function" name="datesAreEqual" signature="datesAreEqual(expected, actual, message)">
              <variable citdl="Date" doc="The expected date." ilk="argument" name="expected" />
              <variable citdl="Date" doc="The actual date to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that a date&apos;s hour, minutes, and seconds are equal to another date&apos;s." ilk="function" name="timesAreEqual" signature="timesAreEqual(expected, actual, message)">
              <variable citdl="Date" doc="The expected date." ilk="argument" name="expected" />
              <variable citdl="Date" doc="The actual date to test." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
          </scope>
          <scope doc="The DateLocale class is a container and base class for all&#xA;localised date strings used by YAHOO.util.Date. It is used&#xA;internally, but may be extended to provide new date localisations.&#xA;To create your own DateLocale, follow these steps:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Find an existing locale that matches closely with your needs&lt;/li&gt;&#xA;&lt;li&gt;Use this as your base class.  Use YAHOO.util.DateLocale if nothing&#xA;matches.&lt;/li&gt;&#xA;&lt;li&gt;Create your own class as an extension of the base class using&#xA;YAHOO.lang.merge, and add your own localisations where needed.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;See the YAHOO.util.DateLocale[&apos;en-US&apos;] and YAHOO.util.DateLocale[&apos;en-GB&apos;]&#xA;classes which extend YAHOO.util.DateLocale[&apos;en&apos;].&#xA;For example, to implement locales for French french and Canadian french,&#xA;we would do the following:&#xA;&lt;ol&gt;&#xA;&lt;li&gt;For French french, we have no existing similar locale, so use&#xA;YAHOO.util.DateLocale as the base, and extend it:&#xA;&lt;pre&gt;&#xA;YAHOO.util.DateLocale[&apos;fr&apos;] = YAHOO.lang.merge(YAHOO.util.DateLocale, {&#xA;a: [&apos;dim&apos;, &apos;lun&apos;, &apos;mar&apos;, &apos;mer&apos;, &apos;jeu&apos;, &apos;ven&apos;, &apos;sam&apos;],&#xA;A: [&apos;dimanche&apos;, &apos;lundi&apos;, &apos;mardi&apos;, &apos;mercredi&apos;, &apos;jeudi&apos;, &apos;vendredi&apos;, &apos;samedi&apos;],&#xA;b: [&apos;jan&apos;, &apos;f&amp;eacute;v&apos;, &apos;mar&apos;, &apos;avr&apos;, &apos;mai&apos;, &apos;jun&apos;, &apos;jui&apos;, &apos;ao&amp;ucirc;&apos;, &apos;sep&apos;, &apos;oct&apos;, &apos;nov&apos;, &apos;d&amp;eacute;c&apos;],&#xA;B: [&apos;janvier&apos;, &apos;f&amp;eacute;vrier&apos;, &apos;mars&apos;, &apos;avril&apos;, &apos;mai&apos;, &apos;juin&apos;, &apos;juillet&apos;, &apos;ao&amp;ucirc;t&apos;, &apos;septembre&apos;, &apos;octobre&apos;, &apos;novembre&apos;, &apos;d&amp;eacute;cembre&apos;],&#xA;c: &apos;%a %d %b %Y %T %Z&apos;,&#xA;p: [&apos;&apos;, &apos;&apos;],&#xA;P: [&apos;&apos;, &apos;&apos;],&#xA;x: &apos;%d.%m.%Y&apos;,&#xA;X: &apos;%T&apos;&#xA;});&#xA;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;For Canadian french, we start with French french and change the meaning of \%x:&#xA;&lt;pre&gt;&#xA;YAHOO.util.DateLocale[&apos;fr-CA&apos;] = YAHOO.lang.merge(YAHOO.util.DateLocale[&apos;fr&apos;], {&#xA;x: &apos;%Y-%m-%d&apos;&#xA;});&#xA;&lt;/pre&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;With that, you can use your new locales:&#xA;&lt;pre&gt;&#xA;var d = new Date(&quot;2008/04/22&quot;);&#xA;YAHOO.util.Date.format(d, {format: &quot;%A, %d %B == %x&quot;}, &quot;fr&quot;);&#xA;&lt;/pre&gt;&#xA;will return:&#xA;&lt;pre&gt;&#xA;mardi, 22 avril == 22.04.2008&#xA;&lt;/pre&gt;&#xA;And&#xA;&lt;pre&gt;&#xA;YAHOO.util.Date.format(d, {format: &quot;%A, %d %B == %x&quot;}, &quot;fr-CA&quot;);&#xA;&lt;/pre&gt;&#xA;Will return:&#xA;&lt;pre&gt;&#xA;mardi, 22 avril == 2008-04-22&#xA;&lt;/pre&gt;" ilk="namespace" name="DateLocale" />
          <scope doc="Provides helper methods for DOM elements." ilk="namespace" name="Dom">
            <scope doc="Returns an array of HTMLElements that pass the test applied by supplied boolean method.&#xA;For optimized performance, include a tag and/or root node when possible.&#xA;Note: This method operates against a live collection, so modifying the &#xA;collection in the callback (removing/appending nodes, etc.) will have&#xA;side effects.  Instead you should iterate the returned nodes array,&#xA;as you would with the native &quot;getElementsByTagName&quot; method." ilk="function" name="getElementsBy" signature="getElementsBy(method, tag, root, apply, o, overrides) =&gt; Array">
              <variable citdl="Function" doc="- A boolean method for testing elements which receives the element as its only argument." ilk="argument" name="method" />
              <variable citdl="String" doc="(optional) The tag name of the elements being collected" ilk="argument" name="tag" />
              <variable citdl="String | HTMLElement" doc="(optional) The HTMLElement or an ID to use as the starting point" ilk="argument" name="root" />
              <variable citdl="Function" doc="(optional) A function to apply to each element when found" ilk="argument" name="apply" />
              <variable citdl="Any" doc="(optional) An optional arg that is passed to the supplied method" ilk="argument" name="o" />
              <variable citdl="Boolean" doc="(optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;" ilk="argument" name="overrides" />
            </scope>
            <scope doc="Provides a normalized attribute interface." ilk="function" name="getAttribute" signature="getAttribute(el, attr) =&gt; String">
              <variable citdl="String | HTMLElement" doc="The target element for the attribute." ilk="argument" name="el" />
              <variable citdl="String" doc="The attribute to get." ilk="argument" name="attr" />
            </scope>
            <scope doc="Returns an ID and applies it to the element &quot;el&quot;, if provided." ilk="function" name="generateId" signature="generateId(el, prefix) =&gt; String | Array">
              <variable citdl="String | HTMLElement | Array" doc="(optional) An optional element array of elements to add an ID to (no ID is added if one is already present)." ilk="argument" name="el" />
              <variable citdl="String" doc="(optional) an optional prefix to use (defaults to &quot;yui-gen&quot;)." ilk="argument" name="prefix" />
            </scope>
            <scope doc="Returns the width of the document." ilk="function" name="getDocumentWidth" signature="getDocumentWidth() =&gt; Int" />
            <scope doc="Wrapper for setting style properties of HTMLElements.  Normalizes &quot;opacity&quot; across modern browsers." ilk="function" name="setStyle" signature="setStyle(el, property, val)">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements." ilk="argument" name="el" />
              <variable citdl="String" doc="The style property to be set." ilk="argument" name="property" />
              <variable citdl="String" doc="The value to apply to the given property." ilk="argument" name="val" />
            </scope>
            <scope doc="Gets the current X position of an element based on page coordinates.  The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" name="getX" signature="getX(el) =&gt; Number | Array">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements" ilk="argument" name="el" />
            </scope>
            <scope doc="Gets the current Y position of an element based on page coordinates.  Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" name="getY" signature="getY(el) =&gt; Number | Array">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements" ilk="argument" name="el" />
            </scope>
            <scope doc="Returns an array of HTMLElement childNodes." ilk="function" name="getChildren" signature="getChildren(node) =&gt; Array">
              <variable citdl="String | HTMLElement" doc="The HTMLElement or an ID to use as the starting point" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns the first HTMLElement child." ilk="function" name="getFirstChild" signature="getFirstChild(node) =&gt; Object">
              <variable citdl="String | HTMLElement" doc="The HTMLElement or an ID to use as the starting point" ilk="argument" name="node" />
            </scope>
            <scope doc="Creates a Region based on the viewport relative to the document." ilk="function" name="getClientRegion" signature="getClientRegion() =&gt; Region" />
            <scope doc="Returns the last HTMLElement child that passes the test method." ilk="function" name="getLastChildBy" signature="getLastChildBy(node, method) =&gt; Object">
              <variable citdl="HTMLElement" doc="The HTMLElement to use as the starting point" ilk="argument" name="node" />
              <variable citdl="Function" doc="A boolean function used to test children&#xA;that receives the node being tested as its only argument" ilk="argument" name="method" />
            </scope>
            <scope doc="Returns the nearest ancestor that passes the test applied by supplied boolean method.&#xA;For performance reasons, IDs are not accepted and argument validation omitted." ilk="function" name="getAncestorBy" signature="getAncestorBy(node, method) =&gt; Object">
              <variable citdl="HTMLElement" doc="The HTMLElement to use as the starting point" ilk="argument" name="node" />
              <variable citdl="Function" doc="- A boolean method for testing elements which receives the element as its only argument." ilk="argument" name="method" />
            </scope>
            <scope doc="Returns the current width of the viewport." ilk="function" name="getViewportWidth" signature="getViewportWidth() =&gt; Int" />
            <scope doc="Returns the first HTMLElement that passes the test applied by the supplied boolean method." ilk="function" name="getElementBy" signature="getElementBy(method, tag, root) =&gt; HTMLElement">
              <variable citdl="Function" doc="- A boolean method for testing elements which receives the element as its only argument." ilk="argument" name="method" />
              <variable citdl="String" doc="(optional) The tag name of the elements being collected" ilk="argument" name="tag" />
              <variable citdl="String | HTMLElement" doc="(optional) The HTMLElement or an ID to use as the starting point" ilk="argument" name="root" />
            </scope>
            <scope doc="Returns the previous sibling that is an HTMLElement. &#xA;For performance reasons, IDs are not accepted and argument validation omitted.&#xA;Returns the nearest HTMLElement sibling if no method provided." ilk="function" name="getPreviousSiblingBy" signature="getPreviousSiblingBy(node, method) =&gt; Object">
              <variable citdl="HTMLElement" doc="The HTMLElement to use as the starting point" ilk="argument" name="node" />
              <variable citdl="Function" doc="A boolean function used to test siblings&#xA;that receives the sibling node being tested as its only argument" ilk="argument" name="method" />
            </scope>
            <scope doc="Returns an array of HTMLElements with the given class.&#xA;For optimized performance, include a tag and/or root node when possible.&#xA;Note: This method operates against a live collection, so modifying the &#xA;collection in the callback (removing/appending nodes, etc.) will have&#xA;side effects.  Instead you should iterate the returned nodes array,&#xA;as you would with the native &quot;getElementsByTagName&quot; method." ilk="function" name="getElementsByClassName" signature="getElementsByClassName(className, tag, root, apply, o, overrides) =&gt; Array">
              <variable citdl="String" doc="The class name to match against" ilk="argument" name="className" />
              <variable citdl="String" doc="(optional) The tag name of the elements being collected" ilk="argument" name="tag" />
              <variable citdl="String | HTMLElement" doc="(optional) The HTMLElement or an ID to use as the starting point.&#xA;This element is not included in the className scan." ilk="argument" name="root" />
              <variable citdl="Function" doc="(optional) A function to apply to each element when found" ilk="argument" name="apply" />
              <variable citdl="Any" doc="(optional) An optional arg that is passed to the supplied method" ilk="argument" name="o" />
              <variable citdl="Boolean" doc="(optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;" ilk="argument" name="overrides" />
            </scope>
            <scope doc="Replace a class with another class for a given element or collection of elements.&#xA;If no oldClassName is present, the newClassName is simply added." ilk="function" name="replaceClass" signature="replaceClass(el, oldClassName, newClassName) =&gt; Boolean | Array">
              <variable citdl="String | HTMLElement | Array" doc="The element or collection to remove the class from" ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to be replaced" ilk="argument" name="oldClassName" />
              <variable citdl="String" doc="the class name that will be replacing the old class name" ilk="argument" name="newClassName" />
            </scope>
            <scope doc="Returns the next sibling that is an HTMLElement" ilk="function" name="getNextSibling" signature="getNextSibling(node) =&gt; Object">
              <variable citdl="String | HTMLElement" doc="The HTMLElement or an ID to use as the starting point" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns the height of the document." ilk="function" name="getDocumentHeight" signature="getDocumentHeight() =&gt; Int" />
            <scope doc="Returns the last HTMLElement child." ilk="function" name="getLastChild" signature="getLastChild(node) =&gt; Object">
              <variable citdl="String | HTMLElement" doc="The HTMLElement or an ID to use as the starting point" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns the height of the client (viewport)." ilk="function" name="getClientHeight" signature="getClientHeight() =&gt; Int" />
            <scope doc="Determines whether an HTMLElement is present in the current document." ilk="function" name="inDocument" signature="inDocument(el, doc) =&gt; Boolean">
              <variable citdl="String | HTMLElement" doc="The element to search for" ilk="argument" name="el" />
              <variable citdl="Object" doc="An optional document to search, defaults to element&apos;s owner document" ilk="argument" name="doc" />
            </scope>
            <scope doc="Inserts the new node as the next sibling of the reference node" ilk="function" name="insertAfter" signature="insertAfter(newNode, referenceNode) =&gt; HTMLElement">
              <variable citdl="String | HTMLElement" doc="The node to be inserted" ilk="argument" name="newNode" />
              <variable citdl="String | HTMLElement" doc="The node to insert the new node after" ilk="argument" name="referenceNode" />
            </scope>
            <scope doc="Returns the current height of the viewport." ilk="function" name="getViewportHeight" signature="getViewportHeight() =&gt; Int" />
            <scope doc="Adds a class name to a given element or collection of elements." ilk="function" name="addClass" signature="addClass(el, className) =&gt; Boolean | Array">
              <variable citdl="String | HTMLElement | Array" doc="The element or collection to add the class to" ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to add to the class attribute" ilk="argument" name="className" />
            </scope>
            <scope doc="Removes a class name from a given element or collection of elements." ilk="function" name="removeClass" signature="removeClass(el, className) =&gt; Boolean | Array">
              <variable citdl="String | HTMLElement | Array" doc="The element or collection to remove the class from" ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to remove from the class attribute" ilk="argument" name="className" />
            </scope>
            <scope doc="Inserts the new node as the previous sibling of the reference node" ilk="function" name="insertBefore" signature="insertBefore(newNode, referenceNode) =&gt; HTMLElement">
              <variable citdl="String | HTMLElement" doc="The node to be inserted" ilk="argument" name="newNode" />
              <variable citdl="String | HTMLElement" doc="The node to insert the new node before" ilk="argument" name="referenceNode" />
            </scope>
            <scope doc="Returns an HTMLElement reference." ilk="function" name="get" signature="get(el) =&gt; HTMLElement | Array">
              <variable citdl="String | HTMLElement |Array" doc="Accepts a string to use as an ID for getting a DOM reference, an actual DOM reference, or an Array of IDs and/or HTMLElements." ilk="argument" name="el" />
            </scope>
            <scope doc="Returns the nearest ancestor with the given className." ilk="function" name="getAncestorByClassName" signature="getAncestorByClassName(node, className) =&gt; Object">
              <variable citdl="String | HTMLElement" doc="The HTMLElement or an ID to use as the starting point" ilk="argument" name="node" />
              <variable citdl="String" ilk="argument" name="className" />
            </scope>
            <scope doc="Normalizes currentStyle and ComputedStyle." ilk="function" name="getStyle" signature="getStyle(el, property) =&gt; String | Array">
              <variable citdl="String | HTMLElement |Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements." ilk="argument" name="el" />
              <variable citdl="String" doc="The style property whose value is returned." ilk="argument" name="property" />
            </scope>
            <scope doc="Set the position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element(s) must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" name="setXY" signature="setXY(el, pos, noRetry)">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements" ilk="argument" name="el" />
              <variable citdl="Array" doc="Contains X &amp; Y values for new position (coordinates are page-based)" ilk="argument" name="pos" />
              <variable citdl="Boolean" doc="By default we try and set the position a second time if the first fails" ilk="argument" name="noRetry" />
            </scope>
            <scope doc="Returns the previous sibling that is an HTMLElement" ilk="function" name="getPreviousSibling" signature="getPreviousSibling(node) =&gt; Object">
              <variable citdl="String | HTMLElement" doc="The HTMLElement or an ID to use as the starting point" ilk="argument" name="node" />
            </scope>
            <scope doc="Returns the top scroll value of the document" ilk="function" name="getDocumentScrollTop" signature="getDocumentScrollTop(document) =&gt; Int">
              <variable citdl="HTMLDocument" doc="(optional) The document to get the scroll value of" ilk="argument" name="document" />
            </scope>
            <scope doc="Set the X position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" name="setX" signature="setX(el, x)">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements." ilk="argument" name="el" />
              <variable citdl="Int" doc="The value to use as the X coordinate for the element(s)." ilk="argument" name="x" />
            </scope>
            <scope doc="Set the Y position of an html element in page coordinates, regardless of how the element is positioned.&#xA;The element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" name="setY" signature="setY(el, x)">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements." ilk="argument" name="el" />
              <variable citdl="Int" doc="To use as the Y coordinate for the element(s)." ilk="argument" name="x" />
            </scope>
            <scope doc="Gets the current position of an element based on page coordinates. &#xA;Element must be part of the DOM tree to have page coordinates (display:none or elements not appended return false)." ilk="function" name="getXY" signature="getXY(el) =&gt; Array">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM&#xA;reference, or an Array of IDs and/or HTMLElements" ilk="argument" name="el" />
            </scope>
            <scope doc="Returns the width of the client (viewport)." ilk="function" name="getClientWidth" signature="getClientWidth() =&gt; Int" />
            <scope doc="Returns the first HTMLElement child that passes the test method." ilk="function" name="getFirstChildBy" signature="getFirstChildBy(node, method) =&gt; Object">
              <variable citdl="HTMLElement" doc="The HTMLElement to use as the starting point" ilk="argument" name="node" />
              <variable citdl="Function" doc="A boolean function used to test children&#xA;that receives the node being tested as its only argument" ilk="argument" name="method" />
            </scope>
            <scope doc="Returns the region position of the given element.&#xA;The element must be part of the DOM tree to have a region (display:none or elements not appended return false)." ilk="function" name="getRegion" signature="getRegion(el) =&gt; Region | Array">
              <variable citdl="String | HTMLElement | Array" doc="Accepts a string to use as an ID, an actual DOM reference, or an Array of IDs and/or HTMLElements." ilk="argument" name="el" />
            </scope>
            <scope doc="Provides a normalized attribute interface." ilk="function" name="setAttribute" signature="setAttribute(el, attr, val)">
              <variable citdl="String | HTMLElement" doc="The target element for the attribute." ilk="argument" name="el" />
              <variable citdl="String" doc="The attribute to set." ilk="argument" name="attr" />
              <variable citdl="String" doc="The value of the attribute." ilk="argument" name="val" />
            </scope>
            <scope doc="Runs the supplied method against each item in the Collection/Array.&#xA;The method is called with the element(s) as the first arg, and the optional param as the second ( method(el, o) )." ilk="function" name="batch" signature="batch(el, method, o, overrides) =&gt; Any | Array">
              <variable citdl="String | HTMLElement | Array" doc="(optional) An element or array of elements to apply the method to" ilk="argument" name="el" />
              <variable citdl="Function" doc="The method to apply to the element(s)" ilk="argument" name="method" />
              <variable citdl="Any" doc="(optional) An optional arg that is passed to the supplied method" ilk="argument" name="o" />
              <variable citdl="Boolean" doc="(optional) Whether or not to override the scope of &quot;method&quot; with &quot;o&quot;" ilk="argument" name="overrides" />
            </scope>
            <scope doc="Returns an array of HTMLElement childNodes that pass the test method." ilk="function" name="getChildrenBy" signature="getChildrenBy(node, method) =&gt; Array">
              <variable citdl="HTMLElement" doc="The HTMLElement to start from" ilk="argument" name="node" />
              <variable citdl="Function" doc="A boolean function used to test children&#xA;that receives the node being tested as its only argument" ilk="argument" name="method" />
            </scope>
            <scope doc="Returns the next HTMLElement sibling that passes the boolean method. &#xA;For performance reasons, IDs are not accepted and argument validation omitted.&#xA;Returns the nearest HTMLElement sibling if no method provided." ilk="function" name="getNextSiblingBy" signature="getNextSiblingBy(node, method) =&gt; Object">
              <variable citdl="HTMLElement" doc="The HTMLElement to use as the starting point" ilk="argument" name="node" />
              <variable citdl="Function" doc="A boolean function used to test siblings&#xA;that receives the sibling node being tested as its only argument" ilk="argument" name="method" />
            </scope>
            <scope doc="Returns the left scroll value of the document" ilk="function" name="getDocumentScrollLeft" signature="getDocumentScrollLeft(document) =&gt; Int">
              <variable citdl="HTMLDocument" doc="(optional) The document to get the scroll value of" ilk="argument" name="document" />
            </scope>
            <scope doc="Returns the nearest ancestor with the given tagName." ilk="function" name="getAncestorByTagName" signature="getAncestorByTagName(node, tagName) =&gt; Object">
              <variable citdl="String | HTMLElement" doc="The HTMLElement or an ID to use as the starting point" ilk="argument" name="node" />
              <variable citdl="String" ilk="argument" name="tagName" />
            </scope>
            <scope doc="Determines whether an HTMLElement has the given className." ilk="function" name="hasClass" signature="hasClass(el, className) =&gt; Boolean | Array">
              <variable citdl="String | HTMLElement | Array" doc="The element or collection to test" ilk="argument" name="el" />
              <variable citdl="String" doc="the class name to search for" ilk="argument" name="className" />
            </scope>
            <scope doc="Determines whether an HTMLElement is an ancestor of another HTML element in the DOM hierarchy." ilk="function" name="isAncestor" signature="isAncestor(haystack, needle) =&gt; Boolean">
              <variable citdl="String | HTMLElement" doc="The possible ancestor" ilk="argument" name="haystack" />
              <variable citdl="String | HTMLElement" doc="The possible descendent" ilk="argument" name="needle" />
            </scope>
            <scope doc="Add style management functionality to DOM." ilk="namespace" name="Color">
              <scope doc="Converts a hex or color string to an rgb string: rgb(0,0,0)" ilk="function" name="toRGB" signature="toRGB(val)">
                <variable citdl="String" doc="The string to convert to RGB notation." ilk="argument" name="val" />
              </scope>
              <scope doc="Converts an rgb or color string to a hex string: #123456" ilk="function" name="toHex" signature="toHex(val)">
                <variable citdl="String" doc="The string to convert to hex notation." ilk="argument" name="val" />
              </scope>
              <variable citdl="Object" doc="Color keywords used when converting to Hex" name="KEYWORDS" />
              <variable citdl="Regex" doc="Regex to parse rgb(0,0,0) formatted strings" name="re_RGB" />
              <variable citdl="Regex" doc="Regex to parse #123456 formatted strings" name="re_hex" />
              <variable citdl="Regex" doc="Regex to parse #123 formatted strings" name="re_hex3" />
            </scope>
            <scope doc="Internal methods used to add style management functionality to DOM." ilk="namespace" name="IEStyle">
              <scope doc="Try to determine the width of an elements border" ilk="function" name="getBorderWidth" signature="getBorderWidth(el, property) =&gt; String">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="el" />
                <variable citdl="String" doc="The property to check" ilk="argument" name="property" />
              </scope>
              <scope doc="Method used by DOM to get style information for IE" ilk="function" name="get" signature="get(el, property)">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="el" />
                <variable citdl="String" doc="The property to check" ilk="argument" name="property" />
              </scope>
              <scope doc="Get the color of an element" ilk="function" name="getColor" signature="getColor(node, att) =&gt; String">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="node" />
                <variable citdl="String" doc="The attribute to check" ilk="argument" name="att" />
              </scope>
              <scope doc="Get the margin value from a style property" ilk="function" name="getMargin" signature="getMargin(node, att) =&gt; String">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="node" />
                <variable citdl="String" doc="The attribute to check" ilk="argument" name="att" />
              </scope>
              <scope doc="Get the bordercolor of an element" ilk="function" name="getBorderColor" signature="getBorderColor(node, att) =&gt; String">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="node" />
                <variable citdl="String" doc="The attribute to check" ilk="argument" name="att" />
              </scope>
              <scope doc="Determine the offset of an element" ilk="function" name="getOffset" signature="getOffset(el, prop) =&gt; String">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="el" />
                <variable citdl="String" doc="The property to check." ilk="argument" name="prop" />
              </scope>
              <scope doc="Get the pixel value from a style property" ilk="function" name="getPixel" signature="getPixel(node, att) =&gt; String">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="node" />
                <variable citdl="String" doc="The attribute to check" ilk="argument" name="att" />
              </scope>
              <scope doc="Get the visibility of an element" ilk="function" name="getVisibility" signature="getVisibility(node, att) =&gt; String">
                <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="node" />
                <variable citdl="String" doc="The attribute to check" ilk="argument" name="att" />
              </scope>
            </scope>
          </scope>
          <scope doc="Defines the interface and base operation of items that that can be &#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver, onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with &#xA;other DragDrop objects.&lt;/li&gt;&#xA;&lt;li&gt;handle element(s): The drag operation only occurs if the element that &#xA;was clicked matches a handle element.  By default this is the linked &#xA;element, but there are times that you will want only a portion of the &#xA;linked element to initiate the drag operation, and the setHandleElId() &#xA;method provides a way to define this.&lt;/li&gt;&#xA;&lt;li&gt;drag element: this represents an the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link YAHOO.util.DDProxy}&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any &#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&lt;pre&gt;&#xA;dd = new YAHOO.util.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&lt;/pre&gt;&#xA;Since none of the event handlers have been implemented, nothing would &#xA;actually happen if you were to run the code above.  Normally you would &#xA;override this class or one of the default implementations, but you can &#xA;also override the methods you want on an instance of the class...&#xA;&lt;pre&gt;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}&#xA;&lt;/pre&gt;" ilk="class" name="DragDrop">
            <scope attributes="__ctor__" doc="Defines the interface and base operation of items that that can be &#xA;dragged or can be drop targets.  It was designed to be extended, overriding&#xA;the event handlers for startDrag, onDrag, onDragOver, onDragOut.&#xA;Up to three html elements can be associated with a DragDrop instance:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;linked element: the element that is passed into the constructor.&#xA;This is the element which defines the boundaries for interaction with &#xA;other DragDrop objects.&lt;/li&gt;&#xA;&lt;li&gt;handle element(s): The drag operation only occurs if the element that &#xA;was clicked matches a handle element.  By default this is the linked &#xA;element, but there are times that you will want only a portion of the &#xA;linked element to initiate the drag operation, and the setHandleElId() &#xA;method provides a way to define this.&lt;/li&gt;&#xA;&lt;li&gt;drag element: this represents an the element that would be moved along&#xA;with the cursor during a drag operation.  By default, this is the linked&#xA;element itself as in {@link YAHOO.util.DD}.  setDragElId() lets you define&#xA;a separate element that would be moved, as in {@link YAHOO.util.DDProxy}&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;This class should not be instantiated until the onload event to ensure that&#xA;the associated elements are available.&#xA;The following would define a DragDrop obj that would interact with any &#xA;other DragDrop obj in the &quot;group1&quot; group:&#xA;&lt;pre&gt;&#xA;dd = new YAHOO.util.DragDrop(&quot;div1&quot;, &quot;group1&quot;);&#xA;&lt;/pre&gt;&#xA;Since none of the event handlers have been implemented, nothing would &#xA;actually happen if you were to run the code above.  Normally you would &#xA;override this class or one of the default implementations, but you can &#xA;also override the methods you want on an instance of the class...&#xA;&lt;pre&gt;&#xA;dd.onDragDrop = function(e, id) {&#xA;&amp;nbsp;&amp;nbsp;alert(&quot;dd was dropped on &quot; + id);&#xA;}&#xA;&lt;/pre&gt;" ilk="function" name="DragDrop" signature="DragDrop(id, sGroup, config)">
              <variable citdl="String" doc="of the element that is linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop objects" ilk="argument" name="sGroup" />
              <variable citdl="object" doc="an object containing configurable attributes&#xA;Valid properties for DragDrop: &#xA;padding, isTarget, maintainOffset, primaryButtonOnly," ilk="argument" name="config" />
            </scope>
            <scope doc="Add this instance to a group of related drag/drop objects.  All &#xA;instances belong to at least one group, and can belong to as many &#xA;groups as needed." ilk="function" name="addToGroup" signature="addToGroup(sGroup)">
              <variable citdl="string" doc="the name of the group" ilk="argument" name="sGroup" />
            </scope>
            <scope doc="Abstract method called after a drag/drop object is clicked&#xA;and the drag or mousedown time thresholds have beeen met." ilk="function" name="startDrag" signature="startDrag(X, Y)">
              <variable citdl="int" doc="click location" ilk="argument" name="X" />
              <variable citdl="int" doc="click location" ilk="argument" name="Y" />
            </scope>
            <scope doc="Checks the tag exclusion list to see if this click should be ignored" ilk="function" name="isValidHandleChild" signature="isValidHandleChild(node) =&gt; boolean">
              <variable citdl="HTMLElement" doc="the HTMLElement to evaluate" ilk="argument" name="node" />
            </scope>
            <scope doc="Code that executes immediately before the onDrag event" ilk="function" name="b4Drag" signature="b4Drag()" />
            <scope doc="Lock this instance" ilk="function" name="lock" signature="lock()" />
            <scope doc="Abstract method called when this element fist begins hovering over &#xA;another DragDrop obj" ilk="function" name="onDragEnter" signature="onDragEnter(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="String|DragDrop[]" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of one or more &#xA;dragdrop items being hovered over." ilk="argument" name="id" />
            </scope>
            <scope doc="Code that executes immediately before the startDrag event" ilk="function" name="b4StartDrag" signature="b4StartDrag()" />
            <scope doc="Event handler that fires when a drag/drop obj gets a mousedown" ilk="function" name="onMouseDown" signature="onMouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
            </scope>
            <scope doc="Allows you to set an element outside of the linked element as a drag &#xA;handle" ilk="function" name="setOuterHandleElId" signature="setOuterHandleElId(id)">
              <variable doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
            </scope>
            <scope doc="Unlock this instace" ilk="function" name="unlock" signature="unlock()" />
            <scope doc="Clears any tick interval defined for this instance" ilk="function" name="clearTicks" signature="clearTicks()" />
            <scope doc="resetConstraints must be called if you manually reposition a dd element." ilk="function" name="resetConstraints" signature="resetConstraints()" />
            <scope doc="Method validates that the clicked element&#xA;was indeed the handle or a valid child of the handle" ilk="function" name="clickValidator" signature="clickValidator(e)">
              <variable citdl="Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Code executed immediately before the onMouseDown event" ilk="function" name="b4MouseDown" signature="b4MouseDown(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
            </scope>
            <scope doc="Fired when this object is clicked" ilk="function" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" ilk="argument" name="e" />
              <variable citdl="YAHOO.util.DragDrop" doc="the clicked dd object (this dd obj)" ilk="argument" name="oDD" />
            </scope>
            <scope doc="Abstract method called when this element is hovering over another &#xA;DragDrop obj" ilk="function" name="onDragOver" signature="onDragOver(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="String|DragDrop[]" doc="In POINT mode, the element&#xA;id this is hovering over.  In INTERSECT mode, an array of dd items &#xA;being hovered over." ilk="argument" name="id" />
            </scope>
            <scope doc="Allows you to specify a tag name that should not start a drag operation&#xA;when clicked.  This is designed to facilitate embedding links within a&#xA;drag handle that do something other than start the drag." ilk="function" name="addInvalidHandleType" signature="addInvalidHandleType(tagName)">
              <variable citdl="string" doc="the type of element to exclude" ilk="argument" name="tagName" />
            </scope>
            <scope doc="Allows you to specify that an element other than the linked element &#xA;will be moved with the cursor during a drag" ilk="function" name="setDragElId" signature="setDragElId(id)">
              <variable citdl="string" doc="the id of the element that will be used to initiate the drag" ilk="argument" name="id" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Use &#xA;this method to limit the horizontal travel of the element.  Pass in &#xA;0,0 for the parameters if you want to lock the drag to the y axis." ilk="function" name="setXConstraint" signature="setXConstraint(iLeft, iRight, iTickSize)">
              <variable citdl="int" doc="the number of pixels the element can move to the left" ilk="argument" name="iLeft" />
              <variable citdl="int" doc="the number of pixels the element can move to the &#xA;right" ilk="argument" name="iRight" />
              <variable citdl="int" doc="optional parameter for specifying that the &#xA;element&#xA;should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
            </scope>
            <scope doc="Normally the drag element is moved pixel by pixel, but we can specify &#xA;that it move a number of pixels at a time.  This method resolves the &#xA;location when we have it set up like this." ilk="function" name="getTick" signature="getTick(val, tickArray) =&gt; int">
              <variable citdl="int" doc="where we want to place the object" ilk="argument" name="val" />
              <variable citdl="int[]" doc="sorted array of valid points" ilk="argument" name="tickArray" />
            </scope>
            <scope doc="Returns a reference to the linked element" ilk="function" name="getEl" signature="getEl() =&gt; HTMLElement" />
            <scope doc="Sets up the DragDrop object.  Must be called in the constructor of any&#xA;YAHOO.util.DragDrop subclass" ilk="function" name="init" signature="init(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="object" doc="configuration attributes" ilk="argument" name="config" />
            </scope>
            <scope doc="toString method" ilk="function" name="toString" signature="toString() =&gt; string" />
            <scope doc="Event handler that fires when a drag/drop obj gets a mouseup" ilk="function" name="onMouseUp" signature="onMouseUp(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
            </scope>
            <scope doc="Unsets an excluded tag name set by addInvalidHandleType" ilk="function" name="removeInvalidHandleType" signature="removeInvalidHandleType(tagName)">
              <variable citdl="string" doc="the type of element to unexclude" ilk="argument" name="tagName" />
            </scope>
            <scope doc="Override the onAvailable method to do what is needed after the initial&#xA;position was determined." ilk="function" name="onAvailable" signature="onAvailable()" />
            <scope doc="Allows you to specify a child of the linked element that should be &#xA;used to initiate the drag operation.  An example of this would be if &#xA;you have a content div with text and links.  Clicking anywhere in the &#xA;content area would normally start the drag operation.  Use this method&#xA;to specify that an element inside of the content div is the element &#xA;that starts the drag operation." ilk="function" name="setHandleElId" signature="setHandleElId(id)">
              <variable citdl="string" doc="the id of the element that will be used to &#xA;initiate the drag." ilk="argument" name="id" />
            </scope>
            <scope doc="Abstract method called when we are no longer hovering over an element" ilk="function" name="onDragOut" signature="onDragOut(e, id)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
              <variable citdl="String|DragDrop[]" doc="In POINT mode, the element&#xA;id this was hovering over.  In INTERSECT mode, an array of dd items &#xA;that the mouse is no longer over." ilk="argument" name="id" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on an area with no&#xA;drop target" ilk="function" name="onInvalidDrop" signature="onInvalidDrop(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
            </scope>
            <scope doc="Stores the initial placement of the linked element." ilk="function" name="setInitialPosition" signature="setInitialPosition(diffX, diffY)">
              <variable citdl="int" doc="the X offset, default 0" ilk="argument" name="diffX" />
              <variable citdl="int" doc="the Y offset, default 0" ilk="argument" name="diffY" />
            </scope>
            <scope doc="Code that executes immediately before the onDragDrop event" ilk="function" name="b4DragDrop" signature="b4DragDrop()" />
            <scope doc="Remove&apos;s this instance from the supplied interaction group" ilk="function" name="removeFromGroup" signature="removeFromGroup(sGroup)">
              <variable citdl="string" doc="The group to drop" ilk="argument" name="sGroup" />
            </scope>
            <scope doc="Shortcut for EventProvider.subscribe, see &lt;a href=&quot;YAHOO.util.EventProvider.html#subscribe&quot;&gt;YAHOO.util.EventProvider.subscribe&lt;/a&gt;" ilk="function" name="on" signature="on()" />
            <scope doc="Initializes Targeting functionality only... the object does not&#xA;get a mousedown handler." ilk="function" name="initTarget" signature="initTarget(id, sGroup, config)">
              <variable doc="the id of the linked element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related items" ilk="argument" name="sGroup" />
              <variable citdl="object" doc="configuration attributes" ilk="argument" name="config" />
            </scope>
            <scope doc="Unsets an invalid css class" ilk="function" name="removeInvalidHandleClass" signature="removeInvalidHandleClass(cssClass)">
              <variable citdl="string" doc="the class of the element(s) you wish to &#xA;re-enable" ilk="argument" name="cssClass" />
            </scope>
            <scope doc="Abstract method called when this item is dropped on another DragDrop &#xA;obj" ilk="function" name="onDragDrop" signature="onDragDrop(e, id)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
              <variable citdl="String|DragDrop[]" doc="In POINT mode, the element&#xA;id this was dropped on.  In INTERSECT mode, an array of dd items this &#xA;was dropped on." ilk="argument" name="id" />
            </scope>
            <scope doc="Clears any constraints applied to this instance.  Also clears ticks&#xA;since they can&apos;t exist independent of a constraint at this time." ilk="function" name="clearConstraints" signature="clearConstraints()" />
            <scope doc="Code that executes immediately before the endDrag event" ilk="function" name="b4EndDrag" signature="b4EndDrag()" />
            <scope doc="Unsets an invalid handle id" ilk="function" name="removeInvalidHandleId" signature="removeInvalidHandleId(id)">
              <variable citdl="string" doc="the id of the element to re-enable" ilk="argument" name="id" />
            </scope>
            <scope doc="Create the array of vertical tick marks if an interval was specified in &#xA;setYConstraint()." ilk="function" name="setYTicks" signature="setYTicks()" />
            <scope doc="Code that executes immediately before the onDragOver event" ilk="function" name="b4DragOver" signature="b4DragOver()" />
            <scope doc="Abstract method called during the onMouseMove event while dragging an &#xA;object." ilk="function" name="onDrag" signature="onDrag(e)">
              <variable citdl="Event" doc="the mousemove event" ilk="argument" name="e" />
            </scope>
            <scope doc="Applies the configuration parameters that were passed into the constructor.&#xA;This is supposed to happen at each level through the inheritance chain.  So&#xA;a DDProxy implentation will execute apply config on DDProxy, DD, and &#xA;DragDrop in order to get all of the parameters that are available in&#xA;each object." ilk="function" name="applyConfig" signature="applyConfig()" />
            <scope doc="Returns a reference to the actual element to drag.  By default this is&#xA;the same as the html element, but it can be assigned to another &#xA;element. An example of this can be found in YAHOO.util.DDProxy" ilk="function" name="getDragEl" signature="getDragEl() =&gt; HTMLElement" />
            <scope doc="Fired when we are done dragging the object" ilk="function" name="endDrag" signature="endDrag(e)">
              <variable citdl="Event" doc="the mouseup event" ilk="argument" name="e" />
            </scope>
            <scope doc="By default, the element can be dragged any place on the screen.  Set &#xA;this to limit the vertical travel of the element.  Pass in 0,0 for the&#xA;parameters if you want to lock the drag to the x axis." ilk="function" name="setYConstraint" signature="setYConstraint(iUp, iDown, iTickSize)">
              <variable citdl="int" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="int" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="int" doc="optional parameter for specifying that the &#xA;element should move iTickSize pixels at a time." ilk="argument" name="iTickSize" />
            </scope>
            <scope doc="Returns true if this instance is locked, or the drag drop mgr is locked&#xA;(meaning that all drag/drop is disabled on the page.)" ilk="function" name="isLocked" signature="isLocked() =&gt; boolean" />
            <scope doc="Lets you specify a css class of elements that will not initiate a drag" ilk="function" name="addInvalidHandleClass" signature="addInvalidHandleClass(cssClass)">
              <variable citdl="string" doc="the class of the elements you wish to ignore" ilk="argument" name="cssClass" />
            </scope>
            <scope doc="Executed when the linked element is available" ilk="function" name="handleOnAvailable" signature="handleOnAvailable()" />
            <scope doc="Configures the padding for the target zone in px.  Effectively expands&#xA;(or reduces) the virtual object size for targeting calculations.  &#xA;Supports css-style shorthand; if only one parameter is passed, all sides&#xA;will have that padding, and if only two are passed, the top and bottom&#xA;will have the first param, the left and right the second." ilk="function" name="setPadding" signature="setPadding(iTop, iRight, iBot, iLeft)">
              <variable citdl="int" doc="Top pad" ilk="argument" name="iTop" />
              <variable citdl="int" doc="Right pad" ilk="argument" name="iRight" />
              <variable citdl="int" doc="Bot pad" ilk="argument" name="iBot" />
              <variable citdl="int" doc="Left pad" ilk="argument" name="iLeft" />
            </scope>
            <scope doc="Remove all drag and drop hooks for this element" ilk="function" name="unreg" signature="unreg()" />
            <scope doc="Finds the location the element should be placed if we want to move&#xA;it to where the mouse location less the click offset would place us." ilk="function" name="getTargetCoord" signature="getTargetCoord(iPageX, iPageY) =&gt; ">
              <variable citdl="int" doc="the X coordinate of the click" ilk="argument" name="iPageX" />
              <variable citdl="int" doc="the Y coordinate of the click" ilk="argument" name="iPageY" />
            </scope>
            <scope doc="Code that executes immediately before the onDragOut event" ilk="function" name="b4DragOut" signature="b4DragOut()" />
            <scope doc="Lets you to specify an element id for a child of a drag handle&#xA;that should not initiate a drag" ilk="function" name="addInvalidHandleId" signature="addInvalidHandleId(id)">
              <variable citdl="string" doc="the element id of the element you wish to ignore" ilk="argument" name="id" />
            </scope>
            <scope doc="Create the array of horizontal tick marks if an interval was specified&#xA;in setXConstraint()." ilk="function" name="setXTicks" signature="setXTicks()" />
            <scope doc="Sets the start position of the element.  This is set when the obj&#xA;is initialized, the reset when a drag is started." ilk="function" name="setStartPosition" signature="setStartPosition(pos)">
              <variable doc="current position (from previous lookup)" ilk="argument" name="pos" />
            </scope>
            <variable citdl="int" doc="The right constraint" name="maxX" />
            <variable citdl="int" doc="The down constraint" name="maxY" />
            <variable citdl="string[]" doc="An indexted array of css class names for elements that will be ignored&#xA;if clicked." name="invalidHandleClasses" />
            <variable citdl="boolean" doc="By default, all instances can be a drop target.  This can be disabled by&#xA;setting isTarget to false." name="isTarget" />
            <variable citdl="int[]" doc="Array of pixel locations the element will snap to if we specified a &#xA;vertical graduation/interval.  This array is generated automatically &#xA;when you define a tick interval." name="yTicks" />
            <variable citdl="{string: string}" doc="An associative array of HTML tags that will be ignored if clicked." name="invalidHandleTypes" />
            <variable citdl="String" doc="The id of the element associated with this object.  This is what we &#xA;refer to as the &quot;linked element&quot; because the size and position of &#xA;this element is used to determine when the drag and drop objects have &#xA;interacted." name="id" />
            <variable citdl="int" doc="The difference between the click position and the source element&apos;s location" name="deltaX" />
            <variable citdl="int" doc="The difference between the click position and the source element&apos;s location" name="deltaY" />
            <variable doc="Internal typeof flag" name="__ygDragDrop" />
            <variable citdl="YAHOO.util.Region" doc="Property that is assigned to a drag and drop object when testing to&#xA;see if it is being targeted by another dd object.  This is a region&#xA;that represents the area the draggable element overlaps this target.&#xA;DDM.getBestMatch uses this property to compare the size of the overlap&#xA;to that of other targets in order to determine the closest match in&#xA;INTERSECT mode when multiple targets are part of the same interaction." name="overlap" />
            <variable citdl="int" doc="The left constraint" name="minX" />
            <variable citdl="int" doc="The up constraint" name="minY" />
            <variable citdl="{string: string}" doc="An associative array of ids for elements that will be ignored if clicked" name="invalidHandleIds" />
            <variable citdl="object" doc="Configuration attributes passed into the constructor" name="config" />
            <variable citdl="boolean" doc="Set to true when vertical contraints are applied" name="constrainY" />
            <variable citdl="boolean" doc="The availabe property is false until the linked dom element is accessible." name="available" />
            <variable citdl="boolean" doc="By default, drags can only be initiated if the mousedown occurs in the&#xA;region the linked element is.  This is done in part to work around a&#xA;bug in some browsers that mis-report the mousedown if the previous&#xA;mouseup happened outside of the window.  This property is set to true&#xA;if outer handles are defined." name="hasOuterHandles" />
            <variable doc="Cached reference to the linked element" name="_domRef" />
            <variable citdl="int" doc="The linked element&apos;s absolute X position at the time the drag was &#xA;started" name="startPageY" />
            <variable citdl="int" doc="The linked element&apos;s absolute X position at the time the drag was &#xA;started" name="startPageX" />
            <variable citdl="boolean" doc="Property that is assigned to a drag and drop object when testing to&#xA;see if it is being targeted by another dd object.  This property&#xA;can be used in intersect mode to help determine the focus of&#xA;the mouse interaction.  DDM.getBestMatch uses this property first to&#xA;determine the closest match in INTERSECT mode when multiple targets&#xA;are part of the same interaction." name="cursorIsOver" />
            <variable citdl="String" doc="The id of the element that will be dragged.  By default this is same &#xA;as the linked element , but could be changed to another element. Ex: &#xA;YAHOO.util.DDProxy" name="dragElId" />
            <variable citdl="boolean" doc="Set to true when horizontal contraints are applied" name="constrainX" />
            <variable citdl="int[]" doc="The padding configured for this drag and drop object for calculating&#xA;the drop zone intersection with this object." name="padding" />
            <variable citdl="Boolean" doc="If this flag is true, do not fire drop events. The element is a drag only element (for movement not dropping)" name="dragOnly" />
            <variable citdl="{string: string}" doc="The group defines a logical collection of DragDrop objects that are &#xA;related.  Instances only get events when interacting with other &#xA;DragDrop object in the same group.  This lets us define multiple &#xA;groups using a single DragDrop subclass if we want." name="groups" />
            <variable citdl="boolean" doc="Individual drag/drop instances can be locked.  This will prevent &#xA;onmousedown start drag." name="locked" />
            <variable citdl="String" doc="the id of the element that initiates the drag operation.  By default &#xA;this is the linked element, but could be changed to be a child of this&#xA;element.  This lets us do things like only starting the drag when the &#xA;header element within the linked html element is clicked." name="handleElId" />
            <variable citdl="int[]" doc="Array of pixel locations the element will snap to if we specified a &#xA;horizontal graduation/interval.  This array is generated automatically&#xA;when you define a tick interval." name="xTicks" />
            <variable citdl="boolean" doc="Maintain offsets when we resetconstraints.  Set to true when you want&#xA;the position of the element relative to its parent to stay the same&#xA;when the page changes" name="maintainOffset" />
            <variable citdl="Boolean" doc="If this flag is true, a shim will be placed over the screen/viewable area to track mouse events. Should help with dragging elements over iframes and other controls." name="useShim" />
            <variable citdl="object" doc="An Object Literal containing the events that we will be using: mouseDown, b4MouseDown, mouseUp, b4StartDrag, startDrag, b4EndDrag, endDrag, mouseUp, drag, b4Drag, invalidDrop, b4DragOut, dragOut, dragEnter, b4DragOver, dragOver, b4DragDrop, dragDrop&#xA;By setting any of these to false, then event will not be fired." name="events" />
            <variable citdl="boolean" doc="By default the drag and drop instance will only respond to the primary&#xA;button click (left button for a right-handed mouse).  Set to true to&#xA;allow drag and drop to start with any mouse click that is propogated&#xA;by the browser" name="primaryButtonOnly" />
          </scope>
          <scope doc="DragDropMgr is a singleton that tracks the element interaction for &#xA;all DragDrop items in the window.  Generally, you will not call &#xA;this class directly, but it does have helper methods that could &#xA;be useful in your DragDrop implementations." ilk="namespace" name="DragDropMgr">
            <scope doc="Removes the supplied dd instance from the supplied group. Executed&#xA;by DragDrop.removeFromGroup, so don&apos;t call this function directly." ilk="function" name="removeDDFromGroup" signature="removeDDFromGroup()" />
            <scope doc="Fired when either the drag pixel threshold or the mousedown hold &#xA;time threshold has been met." ilk="function" name="startDrag" signature="startDrag(x, y)">
              <variable citdl="int" doc="the X position of the original mousedown" ilk="argument" name="x" />
              <variable citdl="int" doc="the Y position of the original mousedown" ilk="argument" name="y" />
            </scope>
            <scope doc="Returns the DragDrop instance for a given id" ilk="function" name="getDDById" signature="getDDById(id) =&gt; DragDrop">
              <variable citdl="String" doc="the id of the DragDrop object" ilk="argument" name="id" />
            </scope>
            <scope doc="Cleans up the drag and drop events and objects." ilk="function" name="unregAll" signature="unregAll()" />
            <scope doc="Gets the scrollTop" ilk="function" name="getScrollTop" signature="getScrollTop() =&gt; int" />
            <scope doc="Lock all drag and drop functionality" ilk="function" name="lock" signature="lock()" />
            <scope doc="Gets the client width" ilk="function" name="getClientWidth" signature="getClientWidth() =&gt; int" />
            <scope doc="Unlock all drag and drop functionality" ilk="function" name="unlock" signature="unlock()" />
            <scope doc="Ends the current drag, cleans up the state, and fires the endDrag&#xA;and mouseUp events.  Called internally when a mouseup is detected&#xA;during the drag.  Can be fired manually during the drag by passing&#xA;either another event (such as the mousemove event received in onDrag)&#xA;or a fake event with pageX and pageY defined (so that endDrag and&#xA;onMouseUp have usable position data.).  Alternatively, pass true&#xA;for the silent parameter so that the endDrag and onMouseUp events&#xA;are skipped (so no event data is needed.)" ilk="function" name="stopDrag" signature="stopDrag(e, silent)">
              <variable citdl="Event" doc="the mouseup event, another event (or a fake event) &#xA;with pageX and pageY defined, or nothing if the &#xA;silent parameter is true" ilk="argument" name="e" />
              <variable citdl="boolean" doc="skips the enddrag and mouseup events if true" ilk="argument" name="silent" />
            </scope>
            <scope doc="This method will hide the shim element and set the _shimActive property to false" ilk="function" name="_deactivateShim" signature="_deactivateShim()" />
            <scope doc="Reset constraints on all drag and drop objs" ilk="function" name="_onResize" signature="_onResize()" />
            <scope doc="Internal function to handle the mousemove event.  Will be invoked &#xA;from the context of the html element." ilk="function" name="handleMouseMove" signature="handleMouseMove(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
            </scope>
            <scope doc="Iterates over all of the DragDrop elements to find ones we are &#xA;hovering over or dropping on" ilk="function" name="fireEvents" signature="fireEvents(e, isDrop)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable citdl="boolean" doc="is this a drop op or a mouseover op?" ilk="argument" name="isDrop" />
            </scope>
            <scope doc="Fired after a registered DragDrop object gets the mousedown event.&#xA;Sets up the events required to track the object being dragged" ilk="function" name="handleMouseDown" signature="handleMouseDown(e, oDD)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable doc="the DragDrop object being dragged" ilk="argument" name="oDD" />
            </scope>
            <scope doc="Unregisters a drag and drop item.  This is executed in &#xA;DragDrop.unreg, use that method instead of calling this directly." ilk="function" name="_remove" signature="_remove()" />
            <scope doc="Drag and drop initialization.  Sets up the global event handlers" ilk="function" name="_onLoad" signature="_onLoad()" />
            <scope doc="Returns the actual DOM element" ilk="function" name="getElement" signature="getElement(id) =&gt; Object">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
            </scope>
            <scope doc="Is drag and drop locked?" ilk="function" name="isLocked" signature="isLocked() =&gt; boolean" />
            <scope doc="Runs method on all drag and drop objects" ilk="function" name="_execOnAll" signature="_execOnAll()" />
            <scope doc="Returns the style property for the DOM element (i.e., &#xA;document.getElById(id).style)" ilk="function" name="getCss" signature="getCss(id) =&gt; Object">
              <variable citdl="String" doc="the id of the elment to get" ilk="argument" name="id" />
            </scope>
            <scope doc="Each DragDrop instance must be registered with the DragDropMgr.  &#xA;This is executed in DragDrop.init()" ilk="function" name="regDragDrop" signature="regDragDrop(oDD, sGroup)">
              <variable citdl="DragDrop" doc="the DragDrop object to register" ilk="argument" name="oDD" />
              <variable citdl="String" doc="the name of the group this element belongs to" ilk="argument" name="sGroup" />
            </scope>
            <scope doc="My goal is to be able to transparently determine if an object is&#xA;typeof DragDrop, and the exact subclass of DragDrop.  typeof &#xA;returns &quot;object&quot;, oDD.constructor.toString() always returns&#xA;&quot;DragDrop&quot; and not the name of the subclass.  So for now it just&#xA;evaluates a well-known variable in DragDrop." ilk="function" name="isTypeOfDD" signature="isTypeOfDD(the) =&gt; boolean">
              <variable citdl="Object" doc="object to evaluate" ilk="argument" name="the" />
            </scope>
            <scope doc="Called the first time an element is registered." ilk="function" name="init" signature="init()" />
            <scope doc="Gets the client height" ilk="function" name="getClientHeight" signature="getClientHeight() =&gt; int" />
            <scope doc="Helper function for getting the best match from the list of drag &#xA;and drop objects returned by the drag and drop events when we are &#xA;in INTERSECT mode.  It returns either the first object that the &#xA;cursor is over, or the object that has the greatest overlap with &#xA;the dragged element." ilk="function" name="getBestMatch" signature="getBestMatch(dds) =&gt; DragDrop">
              <variable citdl="DragDrop[]" doc="The array of drag and drop objects &#xA;targeted" ilk="argument" name="dds" />
            </scope>
            <scope doc="This method will create the shim element if needed, then show the shim element, size the element and set the _shimActive property to true" ilk="function" name="_activateShim" signature="_activateShim()" />
            <scope doc="Utility to stop event propagation and event default, if these &#xA;features are turned on." ilk="function" name="stopEvent" signature="stopEvent(e)">
              <variable citdl="Event" doc="the event as returned by this.getEvent()" ilk="argument" name="e" />
            </scope>
            <scope doc="Numeric array sort function" ilk="function" name="numericSort" signature="numericSort()" />
            <scope doc="Checks the cursor location to see if it over the target" ilk="function" name="isOverTarget" signature="isOverTarget(pt, oTarget, intersect, pre-cached) =&gt; boolean">
              <variable citdl="YAHOO.util.Point" doc="The point to evaluate" ilk="argument" name="pt" />
              <variable citdl="DragDrop" doc="the DragDrop object we are inspecting" ilk="argument" name="oTarget" />
              <variable citdl="boolean" doc="true if we are in intersect mode" ilk="argument" name="intersect" />
              <variable citdl="YAHOO.util.Region" doc="location of the dragged element" ilk="argument" name="pre-cached" />
            </scope>
            <scope doc="This method will create a shim element (giving it the id of yui-ddm-shim), it also attaches the mousemove and mouseup listeners to it and attaches a scroll listener on the window" ilk="function" name="_sizeShim" signature="_sizeShim()" />
            <scope doc="Utility function to determine if a given element has been &#xA;registered as a drag drop item." ilk="function" name="isDragDrop" signature="isDragDrop(id) =&gt; boolean">
              <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
            </scope>
            <scope doc="unload event handler" ilk="function" name="_onUnload" signature="_onUnload()" />
            <scope doc="Returns a Region object containing the drag and drop element&apos;s position&#xA;and size, including the padding configured for it" ilk="function" name="getLocation" signature="getLocation(oDD) =&gt; YAHOO.util.Region">
              <variable citdl="DragDrop" doc="the drag and drop object to get the &#xA;location for" ilk="argument" name="oDD" />
            </scope>
            <scope doc="Each DragDrop handle element must be registered.  This is done&#xA;automatically when executing DragDrop.setHandleElId()" ilk="function" name="regHandle" signature="regHandle(sDDId, sHandleId)">
              <variable citdl="String" doc="the DragDrop id this element is a handle for" ilk="argument" name="sDDId" />
              <variable citdl="String" doc="the id of the element that is the drag &#xA;handle" ilk="argument" name="sHandleId" />
            </scope>
            <scope doc="Returns the drag and drop instances that are in all groups the&#xA;passed in instance belongs to." ilk="function" name="getRelated" signature="getRelated(p_oDD, bTargetsOnly) =&gt; DragDrop[]">
              <variable citdl="DragDrop" doc="the obj to get related data for" ilk="argument" name="p_oDD" />
              <variable citdl="boolean" doc="if true, only return targetable objs" ilk="argument" name="bTargetsOnly" />
            </scope>
            <scope doc="Recursively searches the immediate parent and all child nodes for &#xA;the handle element in order to determine wheter or not it was &#xA;clicked." ilk="function" name="handleWasClicked" signature="handleWasClicked(node)">
              <variable doc="the html element to inspect" ilk="argument" name="node" />
            </scope>
            <scope doc="Swap two nodes.  In IE, we use the native method, for others we &#xA;emulate the IE behavior" ilk="function" name="swapNode" signature="swapNode(n1, n2)">
              <variable doc="the first node to swap" ilk="argument" name="n1" />
              <variable doc="the other node to swap" ilk="argument" name="n2" />
            </scope>
            <scope doc="Gets the scrollLeft" ilk="function" name="getScrollLeft" signature="getScrollLeft() =&gt; int" />
            <scope doc="Get the wrapper for the DOM element specified" ilk="function" name="getElWrapper" signature="getElWrapper(id) =&gt; YAHOO.util.DDM.ElementWrapper">
              <variable citdl="String" doc="the id of the element to get" ilk="argument" name="id" />
            </scope>
            <scope doc="Trying to make the load order less important.  Without this we get&#xA;an error if this file is loaded before the Event Utility." ilk="function" name="_addListeners" signature="_addListeners()" />
            <scope doc="Returns the specified element style property" ilk="function" name="getStyle" signature="getStyle(el, styleProp) =&gt; string">
              <variable citdl="HTMLElement" doc="the element" ilk="argument" name="el" />
              <variable citdl="string" doc="the style property" ilk="argument" name="styleProp" />
            </scope>
            <scope doc="Returns the Y position of an html element" ilk="function" name="getPosY" signature="getPosY(el) =&gt; int">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
            </scope>
            <scope doc="Returns the X position of an html element" ilk="function" name="getPosX" signature="getPosX(el) =&gt; int">
              <variable doc="the element for which to get the position" ilk="argument" name="el" />
            </scope>
            <scope doc="Returns true if the specified dd target is a legal target for &#xA;the specifice drag obj" ilk="function" name="isLegalTarget" signature="isLegalTarget(the, the) =&gt; boolean">
              <variable citdl="DragDrop" doc="drag obj" ilk="argument" name="the" />
              <variable citdl="DragDrop" doc="target" ilk="argument" name="the" />
            </scope>
            <scope doc="Refreshes the cache of the top-left and bottom-right points of the &#xA;drag and drop objects in the specified group(s).  This is in the&#xA;format that is stored in the drag and drop instance, so typical &#xA;usage is:&#xA;&lt;code&gt;&#xA;YAHOO.util.DragDropMgr.refreshCache(ddinstance.groups);&#xA;&lt;/code&gt;&#xA;Alternatively:&#xA;&lt;code&gt;&#xA;YAHOO.util.DragDropMgr.refreshCache({group1:true, group2:true});&#xA;&lt;/code&gt;" ilk="function" name="refreshCache" signature="refreshCache(groups)">
              <variable citdl="Object" doc="an associative array of groups to refresh" ilk="argument" name="groups" />
            </scope>
            <scope doc="Utility function to determine if a given element has been &#xA;registered as a drag drop handle for the given Drag Drop object." ilk="function" name="isHandle" signature="isHandle(id) =&gt; boolean">
              <variable citdl="String" doc="the element id to check" ilk="argument" name="id" />
            </scope>
            <scope doc="Internal function to handle the mouseup event.  Will be invoked &#xA;from the context of the document." ilk="function" name="handleMouseUp" signature="handleMouseUp(e)">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
            </scope>
            <scope doc="This checks to make sure an element exists and is in the DOM.  The&#xA;main purpose is to handle cases where innerHTML is used to remove&#xA;drag and drop objects from the DOM.  IE provides an &apos;unspecified&#xA;error&apos; when trying to access the offsetParent of such an element" ilk="function" name="verifyEl" signature="verifyEl(el) =&gt; boolean">
              <variable citdl="HTMLElement" doc="the element to check" ilk="argument" name="el" />
            </scope>
            <scope doc="Returns the current scroll position" ilk="function" name="getScroll" signature="getScroll()" />
            <scope doc="Sets the x/y position of an element to the location of the&#xA;target element." ilk="function" name="moveToEl" signature="moveToEl(moveEl, targetEl)">
              <variable citdl="HTMLElement" doc="The element to move" ilk="argument" name="moveEl" />
              <variable citdl="HTMLElement" doc="The position reference element" ilk="argument" name="targetEl" />
            </scope>
            <variable citdl="boolean" doc="Flag to determine if we should prevent the default behavior of the&#xA;events we define. By default this is true, but this can be set to &#xA;false if you need the default behavior (not recommended)" name="preventDefault" />
            <variable citdl="int" doc="The number of pixels that the mouse needs to move after the &#xA;mousedown before the drag is initiated.  Default=3;" name="clickPixelThresh" />
            <variable doc="Internal counter" name="_timeoutCount" />
            <variable doc="Internal flag that is set to true when drag and drop has been&#xA;initialized" name="initialized" />
            <variable doc="A cache of DOM elements" name="elementCache" />
            <variable citdl="boolean" doc="Flag to determine if we should stop the propagation of the events &#xA;we generate. This is true by default but you may want to set it to&#xA;false if the html element contains other features that require the&#xA;mouse click." name="stopPropagation" />
            <variable citdl="HTMLElement" doc="The HTML element created to use as a shim over the document to track mouse movements" name="_shim" />
            <variable citdl="{string: string}" doc="Array of element ids defined as drag handles.  Used to determine &#xA;if the element that generated the mousedown event is actually the &#xA;handle and not the html element itself." name="handleIds" />
            <variable citdl="boolean" doc="Flag that indicates that either the drag pixel threshold or the &#xA;mousdown time threshold has been met" name="dragThreshMet" />
            <variable citdl="int" doc="the X distance between the cursor and the object being dragged" name="deltaX" />
            <variable citdl="int" doc="the Y distance between the cursor and the object being dragged" name="deltaY" />
            <variable citdl="Array" doc="the DragDrop object(s) that are being hovered over" name="dragOvers" />
            <variable citdl="boolean" doc="Set useCache to false if you want to force object the lookup of each&#xA;drag and drop linked element constantly during a drag." name="useCache" />
            <variable citdl="boolean" doc="Flag to determine if the drag event was fired from the click timeout and&#xA;not the mouse move threshold." name="fromTimeout" />
            <variable citdl="int" doc="The number of milliseconds after the mousedown event to initiate the&#xA;drag if we don&apos;t get a mouseup event. Default=1000" name="clickTimeThresh" />
            <variable citdl="Boolean" doc="This property is used to determine if the shim is active over the screen, default false." name="_shimActive" />
            <variable citdl="int" doc="The X position of the mousedown event stored for later use when a &#xA;drag threshold is met." name="startX" />
            <variable citdl="int" doc="The Y position of the mousedown event stored for later use when a &#xA;drag threshold is met." name="startY" />
            <variable citdl="Object" doc="Timeout used for the click time threshold" name="clickTimeout" />
            <variable citdl="Boolean" doc="This property is used when useShim is set to true, it will set the opacity on the shim to .5 for debugging. Use: (YAHOO.util.DDM._debugShim = true;)" name="_debugShim" />
            <variable citdl="int" doc="In intersect mode, drag and drop interaction is defined only by the &#xA;overlap of two or more drag and drop objects." name="STRICT_INTERSECT" />
            <variable citdl="object" doc="Provides additional information about the the current set of&#xA;interactions.  Can be accessed from the event handlers. It&#xA;contains the following properties:&#xA;out:       onDragOut interactions&#xA;enter:     onDragEnter interactions&#xA;over:      onDragOver interactions&#xA;drop:      onDragDrop interactions&#xA;point:     The location of the cursor&#xA;draggedRegion: The location of dragged element at the time&#xA;of the interaction&#xA;sourceRegion: The location of the source elemtn at the time&#xA;of the interaction&#xA;validDrop: boolean" name="interactionInfo" />
            <variable doc="Location cache that is set for all drag drop objects when a drag is&#xA;initiated, cleared when the drag is finished." name="locationCache" />
            <variable citdl="int" doc="In intersect mode, drag and drop interaction is defined by the &#xA;cursor position or the amount of overlap of two or more drag and &#xA;drop objects." name="INTERSECT" />
            <variable citdl="Boolean" doc="This property is used when useShim is set on a DragDrop object to store the current state of DDM.useShim so it can be reset when a drag operation is done." name="_shimState" />
            <variable doc="All drag and drop can be disabled." name="locked" />
            <variable citdl="Boolean" doc="This property is used to turn on global use of the shim element on all DragDrop instances, defaults to false for backcompat. (Use: YAHOO.util.DDM.useShim = true)" name="useShim" />
            <variable citdl="DragDrop" doc="the DragDrop object that is currently being dragged" name="dragCurrent" />
            <variable citdl="int" doc="In point mode, drag and drop interaction is defined by the &#xA;location of the cursor during the drag/drop" name="POINT" />
            <variable citdl="{string: string}" doc="Two dimensional Array of registered DragDrop objects.  The first &#xA;dimension is the DragDrop item group, the second the DragDrop &#xA;object." name="ids" />
            <variable citdl="int" doc="The current drag and drop mode.  Default: POINT" name="mode" />
            <scope doc="Inner class for cached elements" ilk="namespace" name="ElementWrapper">
              <variable doc="The element" name="el" />
              <variable doc="The element id" name="id" />
              <variable doc="A reference to the style property" name="css" />
            </scope>
          </scope>
          <scope doc="Singleton that determines how an animation proceeds from start to end." ilk="namespace" name="Easing">
            <scope doc="Begins slowly and accelerates towards end." ilk="function" name="easeIn" signature="easeIn(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Begins slowly and accelerates towards end." ilk="function" name="easeInStrong" signature="easeInStrong(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Bounces off start and end." ilk="function" name="bounceBoth" signature="bounceBoth(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Overshoots end, then reverses and comes back to end." ilk="function" name="backOut" signature="backOut(t, b, c, d, s) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
            </scope>
            <scope doc="Snap out elastic effect." ilk="function" name="elasticOut" signature="elasticOut(t, b, c, d, a, p) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
            </scope>
            <scope doc="Bounces off end." ilk="function" name="bounceOut" signature="bounceOut(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction, overshoots end, &#xA;then reverses and comes back to end." ilk="function" name="backBoth" signature="backBoth(t, b, c, d, s) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
            </scope>
            <scope doc="Snap both elastic effect." ilk="function" name="elasticBoth" signature="elasticBoth(t, b, c, d, a, p) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end." ilk="function" name="easeBoth" signature="easeBoth(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Bounce off of start." ilk="function" name="bounceIn" signature="bounceIn(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end." ilk="function" name="easeOutStrong" signature="easeOutStrong(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Uniform speed between points." ilk="function" name="easeNone" signature="easeNone(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Snap in elastic effect." ilk="function" name="elasticIn" signature="elasticIn(t, b, c, d, a, p) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Amplitude (optional)" ilk="argument" name="a" />
              <variable citdl="Number" doc="Period (optional)" ilk="argument" name="p" />
            </scope>
            <scope doc="Begins slowly and decelerates towards end." ilk="function" name="easeBothStrong" signature="easeBothStrong(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Begins quickly and decelerates towards end." ilk="function" name="easeOut" signature="easeOut(t, b, c, d) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
            </scope>
            <scope doc="Backtracks slightly, then reverses direction and moves to end." ilk="function" name="backIn" signature="backIn(t, b, c, d, s) =&gt; Number">
              <variable citdl="Number" doc="Time value used to compute current value" ilk="argument" name="t" />
              <variable citdl="Number" doc="Starting value" ilk="argument" name="b" />
              <variable citdl="Number" doc="Delta between start and end values" ilk="argument" name="c" />
              <variable citdl="Number" doc="Total length of animation" ilk="argument" name="d" />
              <variable citdl="Number" doc="Overshoot (optional)" ilk="argument" name="s" />
            </scope>
          </scope>
          <scope doc="Element provides an wrapper object to simplify adding&#xA;event listeners, using dom methods, and managing attributes." ilk="class" name="Element">
            <scope attributes="__ctor__" doc="Element provides an wrapper object to simplify adding&#xA;event listeners, using dom methods, and managing attributes." ilk="function" name="Element" signature="Element(el, map)">
              <variable citdl="HTMLElement | String" doc="The html element that &#xA;represents the Element." ilk="argument" name="el" />
              <variable citdl="Object" doc="A key-value map of initial config names and values" ilk="argument" name="map" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" name="appendChild" signature="appendChild(child) =&gt; HTMLElement">
              <variable citdl="YAHOO.util.Element || HTMLElement" doc="The element to append." ilk="argument" name="child" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" name="setStyle" signature="setStyle(property, value)">
              <variable citdl="String" doc="The style property to set" ilk="argument" name="property" />
              <variable citdl="String" doc="The value to apply to the style property" ilk="argument" name="value" />
            </scope>
            <scope doc="Alias for addListener" ilk="function" name="subscribe" signature="subscribe(type, fn, obj, scope)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The function call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Any" doc="A variable to pass to the handler" ilk="argument" name="obj" />
              <variable citdl="Object" doc="The object to use for the scope of the handler" ilk="argument" name="scope" />
            </scope>
            <scope doc="Registers Element specific attributes." ilk="function" name="initAttributes" signature="initAttributes(map)">
              <variable citdl="Object" doc="A key-value map of initial attribute configs" ilk="argument" name="map" />
            </scope>
            <scope doc="Remove a delegated event listener" ilk="function" name="removeDelegate" signature="removeDelegate(type, fn) =&gt; boolean">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The function call when the event fires" ilk="argument" name="fn" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" name="getElementsByClassName" signature="getElementsByClassName(className, tag) =&gt; Array">
              <variable citdl="String" doc="The className to collect" ilk="argument" name="className" />
              <variable citdl="String" doc="(optional) The tag to use in&#xA;conjunction with class name" ilk="argument" name="tag" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" name="replaceClass" signature="replaceClass(oldClassName, newClassName)">
              <variable citdl="String" doc="The className to replace" ilk="argument" name="oldClassName" />
              <variable citdl="String" doc="The className to add" ilk="argument" name="newClassName" />
            </scope>
            <scope doc="Appends the HTMLElement into either the supplied parentNode." ilk="function" name="appendTo" signature="appendTo(parentNode, before) =&gt; HTMLElement">
              <variable citdl="HTMLElement | Element" doc="The node to append to" ilk="argument" name="parentNode" />
              <variable citdl="HTMLElement | Element" doc="An optional node to insert before" ilk="argument" name="before" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" name="hasChildNodes" signature="hasChildNodes() =&gt; Boolean" />
            <scope doc="Sets the value of the property and fires beforeChange and change events." ilk="function" name="_setHTMLAttrConfig" signature="_setHTMLAttrConfig(element, key, map)">
              <variable citdl="YAHOO.util.Element" doc="The Element instance to&#xA;register the config to." ilk="argument" name="element" />
              <variable citdl="String" doc="The name of the config to register" ilk="argument" name="key" />
              <variable citdl="Object" doc="A key-value map of the config&apos;s params" ilk="argument" name="map" />
            </scope>
            <scope doc="Apply any queued set calls." ilk="function" name="fireQueue" signature="fireQueue()" />
            <scope doc="Adds a listener for the given event.  These may be DOM or &#xA;customEvent listeners.  Any event that is fired via fireEvent&#xA;can be listened for.  All handlers receive an event object." ilk="function" name="addListener" signature="addListener(type, fn, obj, scope)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The handler to call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Any" doc="A variable to pass to the handler" ilk="argument" name="obj" />
              <variable citdl="Object" doc="The object to use for the scope of the handler" ilk="argument" name="scope" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" name="insertBefore" signature="insertBefore(element, before) =&gt; HTMLElement">
              <variable citdl="HTMLElement" doc="The HTMLElement to insert" ilk="argument" name="element" />
              <variable citdl="HTMLElement" doc="The HTMLElement to insert&#xA;the element before." ilk="argument" name="before" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" name="getElementsByTagName" signature="getElementsByTagName(tag) =&gt; HTMLCollection">
              <variable citdl="String" doc="The tagName to collect" ilk="argument" name="tag" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" name="removeClass" signature="removeClass(className)">
              <variable citdl="String" doc="The className to remove" ilk="argument" name="className" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" name="getStyle" signature="getStyle(property) =&gt; String">
              <variable citdl="String" doc="The style property to retrieve" ilk="argument" name="property" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" name="replaceChild" signature="replaceChild(newNode, oldNode) =&gt; HTMLElement">
              <variable citdl="HTMLElement" doc="The HTMLElement to insert" ilk="argument" name="newNode" />
              <variable citdl="HTMLElement" doc="The HTMLElement to replace" ilk="argument" name="oldNode" />
            </scope>
            <scope doc="Remove an event listener" ilk="function" name="removeListener" signature="removeListener(type, fn)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The function call when the event fires" ilk="argument" name="fn" />
            </scope>
            <scope doc="Alias for addListener" ilk="function" name="on" signature="on(type, fn, obj, scope)">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The function call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Any" doc="A variable to pass to the handler" ilk="argument" name="obj" />
              <variable citdl="Object" doc="The object to use for the scope of the handler" ilk="argument" name="scope" />
            </scope>
            <scope doc="Wrapper for HTMLElement method." ilk="function" name="removeChild" signature="removeChild(child) =&gt; HTMLElement">
              <variable citdl="HTMLElement" doc="The HTMLElement to remove" ilk="argument" name="child" />
            </scope>
            <scope doc="Appends a delegated event listener.  Delegated event listeners &#xA;receive two arguments by default: the DOM event and the element  &#xA;specified by the filtering function or CSS selector.&#xA;(Note: Using the delegate method requires the element-delegate &#xA;module.  Using CSS selectors as the filtering criteria for delegated &#xA;event listeners requires inclusion of the Selector Utility.)" ilk="function" name="delegate" signature="delegate(type, fn, filter, obj, scope) =&gt; boolean">
              <variable citdl="String" doc="The name of the event to listen for" ilk="argument" name="type" />
              <variable citdl="Function" doc="The handler to call when the event fires" ilk="argument" name="fn" />
              <variable citdl="Function|string" doc="Function or CSS selector used to &#xA;determine for what element(s) the event listener should be called. &#xA;When a function is specified, the function should return an &#xA;HTML element.  Using a CSS Selector requires the inclusion of the &#xA;CSS Selector Utility." ilk="argument" name="filter" />
              <variable citdl="Any" doc="A variable to pass to the handler" ilk="argument" name="obj" />
              <variable citdl="Object" doc="The object to use for the scope of the handler" ilk="argument" name="scope" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" name="hasClass" signature="hasClass(className) =&gt; Boolean">
              <variable citdl="String" doc="The className to add" ilk="argument" name="className" />
            </scope>
            <scope doc="Wrapper for Dom method." ilk="function" name="addClass" signature="addClass(className)">
              <variable citdl="String" doc="The className to add" ilk="argument" name="className" />
            </scope>
            <variable citdl="Object" doc="Dom events supported by the Element instance." name="DOM_EVENTS" />
          </scope>
          <scope doc="The event utility provides functions to add and remove event listeners,&#xA;event cleansing.  It also tries to automatically remove listeners it&#xA;registers during the unload event." ilk="namespace" name="Event">
            <scope doc="Prevents the default behavior of the event" ilk="function" name="preventDefault" signature="preventDefault(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Basic remove listener" ilk="function" name="_simpleRemove" signature="_simpleRemove(el, sType, fn, capture)">
              <variable citdl="HTMLElement" doc="the element to bind the handler to" ilk="argument" name="el" />
              <variable citdl="string" doc="the type of event handler" ilk="argument" name="sType" />
              <variable citdl="function" doc="the callback to invoke" ilk="argument" name="fn" />
              <variable citdl="boolen" doc="capture or bubble phase" ilk="argument" name="capture" />
            </scope>
            <scope doc="Returns scrollLeft" ilk="function" name="_getScrollLeft" signature="_getScrollLeft()" />
            <scope doc="Returns the time of the event.  If the time is not included, the&#xA;event is modified using the current time." ilk="function" name="getTime" signature="getTime(ev) =&gt; Date">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Attaches a focusout event listener to the specified element for &#xA;the purpose of listening for the blur event on the element&apos;s &#xA;descendants." ilk="function" name="addBlurListener" signature="addBlurListener(el, fn, obj, overrideContext) =&gt; Boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to assign the &#xA;listener to." ilk="argument" name="el" />
              <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An arbitrary object that will be &#xA;passed as a parameter to the handler" ilk="argument" name="obj" />
              <variable citdl="Boolean|object" doc="If true, the obj passed in becomes&#xA;the execution context of the listener. If an&#xA;object, this object becomes the execution&#xA;context." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Adds a DOM event directly without the caching, cleanup, context adj, etc" ilk="function" name="_simpleAdd" signature="_simpleAdd(el, sType, fn, capture)">
              <variable citdl="HTMLElement" doc="the element to bind the handler to" ilk="argument" name="el" />
              <variable citdl="string" doc="the type of event handler" ilk="argument" name="sType" />
              <variable citdl="function" doc="the callback to invoke" ilk="argument" name="fn" />
              <variable citdl="boolen" doc="capture or bubble phase" ilk="argument" name="capture" />
            </scope>
            <scope doc="Returns the event&apos;s target element.  Safari sometimes provides&#xA;a text node, and this is automatically resolved to the text&#xA;node&apos;s parent so that it behaves like other browsers." ilk="function" name="getTarget" signature="getTarget(ev, resolveTextNode) =&gt; HTMLElement">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
              <variable citdl="boolean" doc="when set to true the target&apos;s&#xA;parent will be returned if the target is a &#xA;text node.  @deprecated, the text node is&#xA;now resolved automatically" ilk="argument" name="resolveTextNode" />
            </scope>
            <scope doc="Creates a delegate function used to call event listeners specified &#xA;via the &lt;code&gt;YAHOO.util.Event.delegate&lt;/code&gt; method." ilk="function" name="_createDelegate" signature="_createDelegate(fn, filter, obj, overrideContext) =&gt; Function">
              <variable citdl="Function" doc="The method (event listener) to call." ilk="argument" name="fn" />
              <variable citdl="Function|string" doc="Function or CSS selector used to &#xA;determine for what element(s) the event listener should be called." ilk="argument" name="filter" />
              <variable citdl="Object" doc="An arbitrary object that will be &#xA;passed as a parameter to the listener." ilk="argument" name="obj" />
              <variable citdl="Boolean|object" doc="If true, the value of the &#xA;obj parameter becomes the execution context&#xA;of the listener. If an object, this object&#xA;becomes the execution context." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Removes a focusout event listener to the specified element for &#xA;the purpose of listening for the blur event on the element&apos;s &#xA;descendants." ilk="function" name="removeBlurListener" signature="removeBlurListener(el, fn) =&gt; boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to remove&#xA;the listener from." ilk="argument" name="el" />
              <variable citdl="Function" doc="the method the event invokes.  If fn is&#xA;undefined, then all event handlers for the type of event are &#xA;removed." ilk="argument" name="fn" />
            </scope>
            <scope doc="Returns the event&apos;s pageY" ilk="function" name="getPageY" signature="getPageY(ev) =&gt; int">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Removes a delegated event listener." ilk="function" name="removeDelegate" signature="removeDelegate(container, type, fn) =&gt; boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to remove&#xA;the listener from." ilk="argument" name="container" />
              <variable citdl="String" doc="The type of event to remove." ilk="argument" name="type" />
              <variable citdl="Function" doc="The method the event invokes.  If fn is&#xA;undefined, then all event listeners for the type of event are &#xA;removed." ilk="argument" name="fn" />
            </scope>
            <scope doc="Stops event propagation" ilk="function" name="stopPropagation" signature="stopPropagation(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Returns the scrollTop and scrollLeft.  Used to calculate the &#xA;pageX and pageY in Internet Explorer" ilk="function" name="_getScroll" signature="_getScroll()" />
            <scope doc="Returns the charcode for an event" ilk="function" name="getCharCode" signature="getCharCode(ev) =&gt; int">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Checks to see if the type requested is a special type &#xA;(as defined by the _specialTypes hash), and (if so) returns &#xA;the special type name." ilk="function" name="_getType" signature="_getType(sType)">
              <variable citdl="String" doc="The type to look up" ilk="argument" name="sType" />
            </scope>
            <scope doc="We want to be able to use getElementsByTagName as a collection&#xA;to attach a group of events to.  Unfortunately, different &#xA;browsers return different types of collections.  This function&#xA;tests to determine if the object is array-like.  It will also &#xA;fail if the object is an array, but is empty." ilk="function" name="_isValidCollection" signature="_isValidCollection(o) =&gt; boolean">
              <variable doc="the object to test" ilk="argument" name="o" />
            </scope>
            <scope doc="We cache elements bound by id because when the unload event &#xA;fires, we can no longer use document.getElementById" ilk="function" name="getEl" signature="getEl()" />
            <scope doc="Removes an event listener" ilk="function" name="removeListener" signature="removeListener(el, sType, fn) =&gt; boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to remove&#xA;the listener from." ilk="argument" name="el" />
              <variable citdl="String" doc="the type of event to remove." ilk="argument" name="sType" />
              <variable citdl="Function" doc="the method the event invokes.  If fn is&#xA;undefined, then all event handlers for the type of event are &#xA;removed." ilk="argument" name="fn" />
            </scope>
            <scope doc="In some cases, some browsers will return a text node inside&#xA;the actual element that was targeted.  This normalizes the&#xA;return value for getTarget and getRelatedTarget." ilk="function" name="resolveTextNode" signature="resolveTextNode(node) =&gt; HTMLElement">
              <variable citdl="HTMLElement" doc="node to resolve" ilk="argument" name="node" />
            </scope>
            <scope doc="Convenience method for stopPropagation + preventDefault" ilk="function" name="stopEvent" signature="stopEvent(ev)">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Attaches a focusin event listener to the specified element for &#xA;the purpose of listening for the focus event on the element&apos;s &#xA;descendants." ilk="function" name="addFocusListener" signature="addFocusListener(el, fn, obj, overrideContext) =&gt; Boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to assign the &#xA;listener to." ilk="argument" name="el" />
              <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An arbitrary object that will be &#xA;passed as a parameter to the handler" ilk="argument" name="obj" />
              <variable citdl="Boolean|object" doc="If true, the obj passed in becomes&#xA;the execution context of the listener. If an&#xA;object, this object becomes the execution&#xA;context." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Executes the supplied callback when the DOM is first usable.  This&#xA;will execute immediately if called after the DOMReady event has&#xA;fired.   @todo the DOMContentReady event does not fire when the&#xA;script is dynamically injected into the page.  This means the&#xA;DOMReady custom event will never fire in FireFox or Opera when the&#xA;library is injected.  It _will_ fire in Safari, and the IE &#xA;implementation would allow for us to fire it if the defered script&#xA;is not available.  We want this to behave the same in all browsers.&#xA;Is there a way to identify when the script has been injected &#xA;instead of included inline?  Is there a way to know whether the &#xA;window onload event has fired without having had a listener attached &#xA;to it when it did so?&#xA;&lt;p&gt;The callback is a CustomEvent, so the signature is:&lt;/p&gt;&#xA;&lt;p&gt;type &amp;lt;string&amp;gt;, args &amp;lt;array&amp;gt;, customobject &amp;lt;object&amp;gt;&lt;/p&gt;&#xA;&lt;p&gt;For DOMReady events, there are no fire argments, so the&#xA;signature is:&lt;/p&gt;&#xA;&lt;p&gt;&quot;DOMReady&quot;, [], obj&lt;/p&gt;" ilk="function" name="onDOMReady" signature="onDOMReady(fn, obj, overrideContext)">
              <variable citdl="function" doc="what to execute when the element is found." ilk="argument" name="fn" />
              <variable citdl="object" doc="an optional object to be passed back as&#xA;a parameter to fn." ilk="argument" name="obj" />
              <variable citdl="boolean|object" doc="If set to true, fn will execute&#xA;in the context of obj, if set to an object it&#xA;will execute in the context of that object" ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Appends an event handler" ilk="function" name="addListener" signature="addListener(el, sType, fn, obj, overrideContext) =&gt; Boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to assign the &#xA;listener to." ilk="argument" name="el" />
              <variable citdl="String" doc="The type of event to append" ilk="argument" name="sType" />
              <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An arbitrary object that will be &#xA;passed as a parameter to the handler" ilk="argument" name="obj" />
              <variable citdl="Boolean|object" doc="If true, the obj passed in becomes&#xA;the execution context of the listener. If an&#xA;object, this object becomes the execution&#xA;context." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Creates a delegate function used to call mouseover and mouseleave &#xA;event listeners specified via the &#xA;&lt;code&gt;YAHOO.util.Event.addListener&lt;/code&gt; &#xA;or &lt;code&gt;YAHOO.util.Event.on&lt;/code&gt; method." ilk="function" name="_createMouseDelegate" signature="_createMouseDelegate(fn, obj, overrideContext) =&gt; Function">
              <variable citdl="Function" doc="The method (event listener) to call" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An arbitrary object that will be &#xA;passed as a parameter to the listener" ilk="argument" name="obj" />
              <variable citdl="Boolean|object" doc="If true, the value of the &#xA;obj parameter becomes the execution context&#xA;of the listener. If an object, this object&#xA;becomes the execution context." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Generates an unique ID for the element if it does not already &#xA;have one." ilk="function" name="generateId" signature="generateId(el) =&gt; string">
              <variable doc="the element to create the id for" ilk="argument" name="el" />
            </scope>
            <scope doc="Returns the event&apos;s pageX" ilk="function" name="getPageX" signature="getPageX(ev) =&gt; int">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Returns scrollTop" ilk="function" name="_getScrollTop" signature="_getScrollTop()" />
            <scope doc="Works the same way as onAvailable, but additionally checks the&#xA;state of sibling elements to determine if the content of the&#xA;available element is safe to modify.&#xA;&lt;p&gt;The callback is executed with a single parameter:&#xA;the custom object parameter, if provided.&lt;/p&gt;" ilk="function" name="onContentReady" signature="onContentReady(id, fn, obj, overrideContext)">
              <variable citdl="string" doc="the id of the element to look for." ilk="argument" name="id" />
              <variable citdl="function" doc="what to execute when the element is ready." ilk="argument" name="fn" />
              <variable citdl="object" doc="an optional object to be passed back as&#xA;a parameter to fn." ilk="argument" name="obj" />
              <variable citdl="boolean|object" doc="If set to true, fn will execute&#xA;in the context of obj.  If an object, fn will&#xA;exectute in the context of that object" ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="" ilk="function" name="startInterval" signature="startInterval()" />
            <scope doc="Executes the supplied callback when the item with the supplied&#xA;id is found.  This is meant to be used to execute behavior as&#xA;soon as possible as the page loads.  If you use this after the&#xA;initial page load it will poll for a fixed time for the element.&#xA;The number of times it will poll and the frequency are&#xA;configurable.  By default it will poll for 10 seconds.&#xA;&lt;p&gt;The callback is executed with a single parameter:&#xA;the custom object parameter, if provided.&lt;/p&gt;" ilk="function" name="onAvailable" signature="onAvailable(id, fn, obj, overrideContext, checkContent)">
              <variable citdl="string||string[]" doc="the id of the element, or an array&#xA;of ids to look for." ilk="argument" name="id" />
              <variable citdl="function" doc="what to execute when the element is found." ilk="argument" name="fn" />
              <variable citdl="object" doc="an optional object to be passed back as&#xA;a parameter to fn." ilk="argument" name="obj" />
              <variable citdl="boolean|object" doc="If set to true, fn will execute&#xA;in the context of obj, if set to an object it&#xA;will execute in the context of that object" ilk="argument" name="overrideContext" />
              <variable citdl="boolean" doc="check child node readiness (onContentReady)" ilk="argument" name="checkContent" />
            </scope>
            <scope doc="YAHOO.util.Event.onFocus is an alias for addFocusListener" ilk="function" name="onFocus" signature="onFocus()" />
            <scope doc="hook up any deferred listeners" ilk="function" name="_load" signature="_load()" />
            <scope doc="Clears the element cache" ilk="function" name="clearCache" signature="clearCache()" />
            <scope doc="Returns the pageX and pageY properties as an indexed array." ilk="function" name="getXY" signature="getXY(ev) =&gt; [x, y]">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <scope doc="YAHOO.util.Event.on is an alias for addListener" ilk="function" name="on" signature="on()" />
            <scope doc="YAHOO.util.Event.onBlur is an alias for addBlurListener" ilk="function" name="onBlur" signature="onBlur()" />
            <scope doc="Returns all listeners attached to the given element via addListener.&#xA;Optionally, you can specify a specific type of event to return." ilk="function" name="getListeners" signature="getListeners(el, sType) =&gt; Object">
              <variable citdl="HTMLElement|string" doc="the element or element id to inspect" ilk="argument" name="el" />
              <variable citdl="string" doc="optional type of listener to return. If&#xA;left out, all listeners will be returned" ilk="argument" name="sType" />
            </scope>
            <scope doc="Finds the event in the window object, the caller&apos;s arguments, or&#xA;in the arguments of another method in the callstack.  This is&#xA;executed automatically for events registered through the event&#xA;manager, so the implementer should not normally need to execute&#xA;this function at all." ilk="function" name="getEvent" signature="getEvent(e, boundEl) =&gt; Event">
              <variable citdl="Event" doc="the event parameter from the handler" ilk="argument" name="e" />
              <variable citdl="HTMLElement" doc="the element the listener is attached to" ilk="argument" name="boundEl" />
            </scope>
            <scope doc="Removes all listeners attached to the given element via addListener.&#xA;Optionally, the node&apos;s children can also be purged.&#xA;Optionally, you can specify a specific type of event to remove." ilk="function" name="purgeElement" signature="purgeElement(el, recurse, sType)">
              <variable citdl="HTMLElement" doc="the element to purge" ilk="argument" name="el" />
              <variable citdl="boolean" doc="recursively purge this element&apos;s children&#xA;as well.  Use with caution." ilk="argument" name="recurse" />
              <variable citdl="string" doc="optional type of listener to purge. If&#xA;left out, all listeners will be removed" ilk="argument" name="sType" />
            </scope>
            <scope doc="Appends an event handler" ilk="function" name="_addListener" signature="_addListener(el, sType, fn, obj, overrideContext, capture) =&gt; Boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to assign the &#xA;listener to." ilk="argument" name="el" />
              <variable citdl="String" doc="The type of event to append" ilk="argument" name="sType" />
              <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An arbitrary object that will be &#xA;passed as a parameter to the handler" ilk="argument" name="obj" />
              <variable citdl="Boolean|object" doc="If true, the obj passed in becomes&#xA;the execution context of the listener. If an&#xA;object, this object becomes the execution&#xA;context." ilk="argument" name="overrideContext" />
              <variable citdl="boolen" doc="capture or bubble phase" ilk="argument" name="capture" />
            </scope>
            <scope doc="Used by old versions of CustomEvent, restored for backwards&#xA;compatibility" ilk="function" name="regCE" signature="regCE()" />
            <scope doc="Locating the saved event handler data by function ref" ilk="function" name="_getCacheIndex" signature="_getCacheIndex()" />
            <scope doc="Fires the DOMReady event listeners the first time the document is&#xA;usable." ilk="function" name="_ready" signature="_ready()" />
            <scope doc="Appends a delegated event listener.  Delegated event listeners &#xA;receive three arguments by default: the DOM event, the element  &#xA;specified by the filtering function or CSS selector, and the &#xA;container element (the element to which the event listener is &#xA;bound).  (Note: Using the delegate method requires the event-delegate &#xA;module.  Using CSS selectors as the filtering criteria for delegated &#xA;event listeners requires inclusion of the Selector Utility.)" ilk="function" name="delegate" signature="delegate(container, type, fn, filter, obj, overrideContext) =&gt; Boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to assign the &#xA;listener to." ilk="argument" name="container" />
              <variable citdl="String" doc="The type of event listener to append" ilk="argument" name="type" />
              <variable citdl="Function" doc="The method the event invokes" ilk="argument" name="fn" />
              <variable citdl="Function|string" doc="Function or CSS selector used to &#xA;determine for what element(s) the event listener should be called. &#xA;When a function is specified, the function should return an &#xA;HTML element.  Using a CSS Selector requires the inclusion of the &#xA;CSS Selector Utility." ilk="argument" name="filter" />
              <variable citdl="Object" doc="An arbitrary object that will be &#xA;passed as a parameter to the listener" ilk="argument" name="obj" />
              <variable citdl="Boolean|object" doc="If true, the value of the obj parameter becomes&#xA;the execution context of the listener. If an&#xA;object, this object becomes the execution&#xA;context." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Removes all listeners registered by pe.event.  Called &#xA;automatically during the unload event." ilk="function" name="_unload" signature="_unload()" />
            <scope doc="Polling function that runs before the onload event fires, &#xA;attempting to attach to DOM Nodes as soon as they are &#xA;available" ilk="function" name="_tryPreloadAttach" signature="_tryPreloadAttach()" />
            <scope doc="Removes a focusin event listener to the specified element for &#xA;the purpose of listening for the focus event on the element&apos;s &#xA;descendants." ilk="function" name="removeFocusListener" signature="removeFocusListener(el, fn) =&gt; boolean">
              <variable citdl="String|HTMLElement|Array|NodeList" doc="An id, an element &#xA;reference, or a collection of ids and/or elements to remove&#xA;the listener from." ilk="argument" name="el" />
              <variable citdl="Function" doc="the method the event invokes.  If fn is&#xA;undefined, then all event handlers for the type of event are &#xA;removed." ilk="argument" name="fn" />
            </scope>
            <scope doc="Returns the event&apos;s related target" ilk="function" name="getRelatedTarget" signature="getRelatedTarget(ev) =&gt; HTMLElement">
              <variable citdl="Event" doc="the event" ilk="argument" name="ev" />
            </scope>
            <variable doc="Safari detection" name="isSafari" />
            <variable citdl="int" doc="The original capture parameter passed into addListener" name="CAPTURE" />
            <variable citdl="int" doc="Function wrapped for context correction and cleanup, int constant" name="WFN" />
            <variable citdl="boolean" doc="Errors thrown by subscribers of custom events are caught&#xA;and the error message is written to the debug console.  If&#xA;this property is set to true, it will also re-throw the&#xA;error." name="throwErrors" />
            <variable citdl="int" doc="Function to execute, int constant" name="FN" />
            <variable citdl="boolean" doc="True when the document is initially usable" name="DOMReady" />
            <variable citdl="int" doc="The number of times we should look for elements that are not&#xA;in the DOM at the time the event is requested after the document&#xA;has been loaded.  The default is 500@amp;40 ms, so it will poll&#xA;for 20 seconds or until all outstanding handlers are bound&#xA;(whichever comes first)." name="POLL_RETRYS" />
            <variable doc="IE detection" name="isIE" />
            <variable doc="Map of special event types" name="_specialTypes" />
            <variable citdl="array" doc="User-defined unload function that will be fired before all events&#xA;are detached" name="unloadListeners" />
            <variable citdl="int" doc="The original context parameter passed into addListener" name="OVERRIDE" />
            <variable citdl="int" doc="Element to bind, int constant" name="EL" />
            <variable citdl="int" doc="Object passed in by the user that will be returned as a &#xA;parameter to the callback, int constant.  Specific to&#xA;unload listeners" name="OBJ" />
            <variable doc="" name="elCache&#xA;DOM element cache" />
            <variable doc="The number of times to poll after window.onload.  This number is&#xA;increased if additional late-bound handlers are requested after&#xA;the page load." name="retryCount" />
            <variable citdl="string" doc="webkit version" name="webkit" />
            <variable citdl="boolean" doc="True after the onload event has fired" name="loadComplete" />
            <variable citdl="{int: int}" doc="Normalized keycodes for webkit/safari" name="webkitKeymap" />
            <variable doc="document readystate poll handle" name="_dri" />
            <variable doc="Counter for auto id generation" name="counter" />
            <variable citdl="int" doc="The poll interval in milliseconds" name="POLL_INTERVAL" />
            <variable citdl="int" doc="Adjusted context, either the element we are registering the event&#xA;on or the custom object passed in by the listener, int constant" name="ADJ_SCOPE" />
            <variable doc="onAvailable listeners" name="onAvailStack" />
            <variable citdl="array" doc="Cache of wrapped listeners" name="listeners" />
            <variable doc="poll handle" name="_interval" />
            <variable citdl="Error" doc="addListener/removeListener can throw errors in unexpected scenarios.&#xA;These errors are suppressed, the method returns false, and this property&#xA;is set" name="lastError" />
            <variable citdl="int" doc="Type of event, int constant" name="TYPE" />
          </scope>
          <scope doc="EventProvider is designed to be used with YAHOO.augment to wrap &#xA;CustomEvents in an interface that allows events to be subscribed to &#xA;and fired by name.  This makes it possible for implementing code to&#xA;subscribe to an event that either has not been created yet, or will&#xA;not be created at all." ilk="namespace" name="EventProvider">
            <scope doc="Removes all listeners from the specified event.  If the event type&#xA;is not specified, all listeners from all hosted custom events will&#xA;be removed." ilk="function" name="unsubscribeAll" signature="unsubscribeAll(p_type)">
              <variable citdl="string" doc="The type, or name of the event" ilk="argument" name="p_type" />
            </scope>
            <scope doc="Subscribe to a CustomEvent by event type" ilk="function" name="subscribe" signature="subscribe(p_type, p_fn, p_obj, overrideContext)">
              <variable citdl="string" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="function" doc="the function to exectute when the event fires" ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="An object to be passed along when the event &#xA;fires" ilk="argument" name="p_obj" />
              <variable citdl="boolean" doc="If true, the obj passed in becomes the &#xA;execution scope of the listener" ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Unsubscribes one or more listeners the from the specified event" ilk="function" name="unsubscribe" signature="unsubscribe(p_type, p_fn, p_obj) =&gt; boolean">
              <variable citdl="string" doc="The type, or name of the event.  If the type&#xA;is not specified, it will attempt to remove&#xA;the listener from all hosted events." ilk="argument" name="p_type" />
              <variable citdl="Function" doc="The subscribed function to unsubscribe, if not&#xA;supplied, all subscribers will be removed." ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="The custom object passed to subscribe.  This is&#xA;optional, but if supplied will be used to&#xA;disambiguate multiple listeners that are the same&#xA;(e.g., you subscribe many object using a function&#xA;that lives on the prototype)" ilk="argument" name="p_obj" />
            </scope>
            <scope doc="Returns true if the custom event of the provided type has been created&#xA;with createEvent." ilk="function" name="hasEvent" signature="hasEvent(type)">
              <variable citdl="string" doc="the type, or name of the event" ilk="argument" name="type" />
            </scope>
            <scope doc="Fire a custom event by name.  The callback functions will be executed&#xA;from the scope specified when the event was created, and with the &#xA;following parameters:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The first argument fire() was executed with&lt;/li&gt;&#xA;&lt;li&gt;The custom object (if any) that was passed into the subscribe() &#xA;method&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" name="fireEvent" signature="fireEvent(p_type, arguments) =&gt; boolean">
              <variable citdl="string" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="Object*" doc="an arbitrary set of parameters to pass to &#xA;the handler." ilk="argument" name="arguments" />
            </scope>
            <scope doc="Creates a new custom event of the specified type.  If a custom event&#xA;by that name already exists, it will not be re-created.  In either&#xA;case the custom event is returned." ilk="function" name="createEvent" signature="createEvent(p_type, p_config) =&gt; CustomEvent">
              <variable citdl="string" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="object" doc="optional config params.  Valid properties are:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;scope: defines the default execution scope.  If not defined&#xA;the default scope will be this instance.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;silent: if true, the custom event will not generate log messages.&#xA;This is false by default.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;fireOnce: if true, the custom event will only notify subscribers&#xA;once regardless of the number of times the event is fired.  In&#xA;addition, new subscribers will be executed immediately if the&#xA;event has already fired.&#xA;This is false by default.&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;onSubscribeCallback: specifies a callback to execute when the&#xA;event has a new subscriber.  This will fire immediately for&#xA;each queued subscriber if any exist prior to the creation of&#xA;the event.&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="p_config" />
            </scope>
            <variable citdl="Object[]" doc="Private storage of custom event subscribers" name="__yui_subscribers" />
            <variable citdl="Object[]" doc="Private storage of custom events" name="__yui_events" />
          </scope>
          <scope classrefs="YAHOO.util.DataSourceBase" doc="FunctionDataSource class for JavaScript functions." ilk="class" name="FunctionDataSource">
            <scope attributes="__ctor__" doc="FunctionDataSource class for JavaScript functions." ilk="function" name="FunctionDataSource" signature="FunctionDataSource(oLiveData, oConfigs)">
              <variable citdl="HTMLElement" doc="Pointer to live data." ilk="argument" name="oLiveData" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Overriding method passes query to a function. The returned response is then&#xA;forwarded to the handleResponse function." ilk="function" name="makeConnection" signature="makeConnection(oRequest, oCallback, oCaller) =&gt; Number">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Callback object literal." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
            </scope>
            <variable citdl="Object" doc="Context in which to execute the function. By default, is the DataSource&#xA;instance itself. If set, the function will receive the DataSource instance&#xA;as an additional argument." name="scope" />
          </scope>
          <scope doc="Fetches and inserts one or more script or link nodes into the document" ilk="namespace" name="Get">
            <scope doc="Removes the nodes for the specified queue" ilk="function" name="_purge" signature="_purge()" />
            <scope doc="Called by the the helper for detecting script load in Safari" ilk="function" name="_finalize" signature="_finalize(id)">
              <variable citdl="string" doc="the transaction id" ilk="argument" name="id" />
            </scope>
            <scope doc="Fetches and inserts one or more script nodes into the head&#xA;of the current document or the document in a specified window." ilk="function" name="script" signature="script(url, opts) =&gt; tId: string">
              <variable citdl="string|string[]" doc="the url or urls to the script(s)" ilk="argument" name="url" />
              <variable citdl="object" doc="Options: &#xA;&lt;dl&gt;&#xA;&lt;dt&gt;onSuccess&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;callback to execute when the script(s) are finished loading&#xA;The callback receives an object back with the following&#xA;data:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;win&lt;/dt&gt;&#xA;&lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt;&#xA;&lt;dt&gt;data&lt;/dt&gt;&#xA;&lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt;&#xA;&lt;dt&gt;nodes&lt;/dt&gt;&#xA;&lt;dd&gt;An array containing references to the nodes that were&#xA;inserted&lt;/dd&gt;&#xA;&lt;dt&gt;purge&lt;/dt&gt;&#xA;&lt;dd&gt;A function that, when executed, will remove the nodes&#xA;that were inserted&lt;/dd&gt;&#xA;&lt;dt&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;onFailure&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;callback to execute when the script load operation fails&#xA;The callback receives an object back with the following&#xA;data:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;win&lt;/dt&gt;&#xA;&lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt;&#xA;&lt;dt&gt;data&lt;/dt&gt;&#xA;&lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt;&#xA;&lt;dt&gt;nodes&lt;/dt&gt;&#xA;&lt;dd&gt;An array containing references to the nodes that were&#xA;inserted successfully&lt;/dd&gt;&#xA;&lt;dt&gt;purge&lt;/dt&gt;&#xA;&lt;dd&gt;A function that, when executed, will remove any nodes&#xA;that were inserted&lt;/dd&gt;&#xA;&lt;dt&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;onTimeout&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;callback to execute when a timeout occurs.&#xA;The callback receives an object back with the following&#xA;data:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;win&lt;/dt&gt;&#xA;&lt;dd&gt;the window the script(s) were inserted into&lt;/dd&gt;&#xA;&lt;dt&gt;data&lt;/dt&gt;&#xA;&lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt;&#xA;&lt;dt&gt;nodes&lt;/dt&gt;&#xA;&lt;dd&gt;An array containing references to the nodes that were&#xA;inserted&lt;/dd&gt;&#xA;&lt;dt&gt;purge&lt;/dt&gt;&#xA;&lt;dd&gt;A function that, when executed, will remove the nodes&#xA;that were inserted&lt;/dd&gt;&#xA;&lt;dt&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;scope&lt;/dt&gt;&#xA;&lt;dd&gt;the execution context for the callbacks&lt;/dd&gt;&#xA;&lt;dt&gt;win&lt;/dt&gt;&#xA;&lt;dd&gt;a window other than the one the utility occupies&lt;/dd&gt;&#xA;&lt;dt&gt;autopurge&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;setting to true will let the utilities cleanup routine purge &#xA;the script once loaded&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;data&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;data that is supplied to the callback when the script(s) are&#xA;loaded.&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;varName&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;variable that should be available when a script is finished&#xA;loading.  Used to help Safari 2.x and below with script load &#xA;detection.  The type of this property should match what was&#xA;passed into the url parameter: if loading a single url, a&#xA;string can be supplied.  If loading multiple scripts, you&#xA;must supply an array that contains the variable name for&#xA;each script.&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;insertBefore&lt;/dt&gt;&#xA;&lt;dd&gt;node or node id that will become the new node&apos;s nextSibling&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;dt&gt;charset&lt;/dt&gt;&#xA;&lt;dd&gt;Node charset, deprecated, use &apos;attributes&apos;&lt;/dd&gt;&#xA;&lt;dt&gt;attributes&lt;/dt&gt;&#xA;&lt;dd&gt;A hash of attributes to apply to dynamic nodes.&lt;/dd&gt;&#xA;&lt;dt&gt;timeout&lt;/dt&gt;&#xA;&lt;dd&gt;Number of milliseconds to wait before aborting and firing the timeout event&lt;/dd&gt;&#xA;&lt;pre&gt;&#xA;// assumes yahoo, dom, and event are already on the page&#xA;&amp;nbsp;&amp;nbsp;YAHOO.util.Get.script(&#xA;&amp;nbsp;&amp;nbsp;[&quot;http://yui.yahooapis.com/2.7.0/build/dragdrop/dragdrop-min.js&quot;,&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;http://yui.yahooapis.com/2.7.0/build/animation/animation-min.js&quot;], &amp;#123;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;onSuccess: function(o) &amp;#123;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;YAHOO.log(o.data); // foo&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new YAHOO.util.DDProxy(&quot;dd1&quot;); // also new o.reference(&quot;dd1&quot;); would work&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.log(&quot;won&apos;t cause error because YAHOO is the scope&quot;);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.log(o.nodes.length === 2) // true&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// o.purge(); // optionally remove the script nodes immediately&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#125;,&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;onFailure: function(o) &amp;#123;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;YAHOO.log(&quot;transaction failed&quot;);&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;#125;,&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;data: &quot;foo&quot;,&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;timeout: 10000, // 10 second timeout&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;scope: YAHOO,&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// win: otherframe // target another window/frame&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;autopurge: true // allow the utility to choose when to remove the nodes&#xA;&amp;nbsp;&amp;nbsp;&amp;#125;);&#xA;&lt;/pre&gt;" ilk="argument" name="opts" />
            </scope>
            <scope doc="The request is complete, so executing the requester&apos;s callback" ilk="function" name="_finish" signature="_finish(id)">
              <variable citdl="string" doc="the id of the request" ilk="argument" name="id" />
            </scope>
            <scope doc="Generates a link node" ilk="function" name="_linkNode" signature="_linkNode(url, win) =&gt; HTMLElement">
              <variable citdl="string" doc="the url for the css file" ilk="argument" name="url" />
              <variable citdl="Window" doc="optional window to create the node in" ilk="argument" name="win" />
            </scope>
            <scope doc="Returns the data payload for callback functions" ilk="function" name="_returnData" signature="_returnData()" />
            <scope doc="Generates a script node" ilk="function" name="_scriptNode" signature="_scriptNode(url, win) =&gt; HTMLElement">
              <variable citdl="string" doc="the url for the script file" ilk="argument" name="url" />
              <variable citdl="Window" doc="optional window to create the node in" ilk="argument" name="win" />
            </scope>
            <scope doc="Saves the state for the request and begins loading&#xA;the requested urls" ilk="function" name="queue" signature="queue(type, url, opts)">
              <variable citdl="string" doc="the type of node to insert" ilk="argument" name="type" />
              <variable citdl="string" doc="the url to load" ilk="argument" name="url" />
              <variable doc="the hash of options for this request" ilk="argument" name="opts" />
            </scope>
            <scope doc="Removes processed queues and corresponding nodes" ilk="function" name="_autoPurge" signature="_autoPurge()" />
            <scope doc="Generates an HTML element, this is not appended to a document" ilk="function" name="_node" signature="_node(type, attr, win) =&gt; HTMLElement">
              <variable citdl="string" doc="the type of element" ilk="argument" name="type" />
              <variable citdl="string" doc="the attributes" ilk="argument" name="attr" />
              <variable citdl="Window" doc="optional window to create the element in" ilk="argument" name="win" />
            </scope>
            <scope doc="Abort a transaction" ilk="function" name="abort" signature="abort(either)">
              <variable citdl="string|object" doc="the tId or the object returned from&#xA;script() or css()" ilk="argument" name="either" />
            </scope>
            <scope doc="Loads the next item for a given request" ilk="function" name="_next" signature="_next(id, loaded)">
              <variable citdl="string" doc="the id of the request" ilk="argument" name="id" />
              <variable citdl="string" doc="the url that was just loaded, if any" ilk="argument" name="loaded" />
            </scope>
            <scope doc="Timeout detected" ilk="function" name="_timeout" signature="_timeout(id)">
              <variable citdl="string" doc="the id of the request" ilk="argument" name="id" />
            </scope>
            <scope doc="Detects when a node has been loaded.  In the case of&#xA;script nodes, this does not guarantee that contained&#xA;script is ready to use." ilk="function" name="_track" signature="_track(type, n, id, url, win, qlength, trackfn)">
              <variable citdl="string" doc="the type of node to track" ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="the node to track" ilk="argument" name="n" />
              <variable citdl="string" doc="the id of the request" ilk="argument" name="id" />
              <variable citdl="string" doc="the url that is being loaded" ilk="argument" name="url" />
              <variable citdl="Window" doc="the targeted window" ilk="argument" name="win" />
              <variable doc="the number of remaining items in the queue,&#xA;including this one" ilk="argument" name="qlength" />
              <variable citdl="Function" doc="function to execute when finished&#xA;the default is _next" ilk="argument" name="trackfn" />
            </scope>
            <scope doc="Fetches and inserts one or more css link nodes into the &#xA;head of the current document or the document in a specified&#xA;window." ilk="function" name="css" signature="css(url, opts) =&gt; tId: string">
              <variable citdl="string" doc="the url or urls to the css file(s)" ilk="argument" name="url" />
              <variable doc="Options: &#xA;&lt;dl&gt;&#xA;&lt;dt&gt;onSuccess&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;callback to execute when the css file(s) are finished loading&#xA;The callback receives an object back with the following&#xA;data:&#xA;&lt;dl&gt;win&lt;/dl&gt;&#xA;&lt;dd&gt;the window the link nodes(s) were inserted into&lt;/dd&gt;&#xA;&lt;dt&gt;data&lt;/dt&gt;&#xA;&lt;dd&gt;the data object passed in when the request was made&lt;/dd&gt;&#xA;&lt;dt&gt;nodes&lt;/dt&gt;&#xA;&lt;dd&gt;An array containing references to the nodes that were&#xA;inserted&lt;/dd&gt;&#xA;&lt;dt&gt;purge&lt;/dt&gt;&#xA;&lt;dd&gt;A function that, when executed, will remove the nodes&#xA;that were inserted&lt;/dd&gt;&#xA;&lt;dt&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;scope&lt;/dt&gt;&#xA;&lt;dd&gt;the execution context for the callbacks&lt;/dd&gt;&#xA;&lt;dt&gt;win&lt;/dt&gt;&#xA;&lt;dd&gt;a window other than the one the utility occupies&lt;/dd&gt;&#xA;&lt;dt&gt;data&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;data that is supplied to the callbacks when the nodes(s) are&#xA;loaded.&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;insertBefore&lt;/dt&gt;&#xA;&lt;dd&gt;node or node id that will become the new node&apos;s nextSibling&lt;/dd&gt;&#xA;&lt;dt&gt;charset&lt;/dt&gt;&#xA;&lt;dd&gt;Node charset, deprecated, use &apos;attributes&apos;&lt;/dd&gt;&#xA;&lt;dt&gt;attributes&lt;/dt&gt;&#xA;&lt;dd&gt;A hash of attributes to apply to dynamic nodes.&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;pre&gt;&#xA;YAHOO.util.Get.css(&quot;http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css&quot;);&#xA;&lt;/pre&gt;&#xA;&lt;pre&gt;&#xA;YAHOO.util.Get.css([&quot;http://yui.yahooapis.com/2.7.0/build/menu/assets/skins/sam/menu.css&quot;,&#xA;&quot;http://yui.yahooapis.com/2.7.0/build/logger/assets/skins/sam/logger.css&quot;]);&#xA;&lt;/pre&gt;" ilk="argument" name="opts" />
            </scope>
            <variable citdl="int" doc="The default poll freqency in ms, when needed" name="POLL_FREQ" />
            <variable citdl="int" doc="queue index used to generate transaction ids" name="qidx" />
            <variable doc="hash of queues to manage multiple requests" name="queues" />
            <variable citdl="boolean" doc="interal property used to prevent multiple simultaneous purge &#xA;processes" name="purging" />
            <variable citdl="int" doc="The length time to poll for varName when loading a script in&#xA;Safari 2.x before the transaction fails.&#xA;property TIMEOUT" name="TIMEOUT" />
            <variable citdl="int" doc="node index used to generate unique node ids" name="nidx" />
            <variable citdl="int" doc="The number of request required before an automatic purge.&#xA;property PURGE_THRESH" name="PURGE_THRESH" />
          </scope>
          <scope doc="The History class provides the ability to use the back/forward navigation&#xA;buttons in a DHTML application. It also allows a DHTML application to&#xA;be bookmarked in a specific state." ilk="class" name="History">
            <scope attributes="__ctor__" doc="The History class provides the ability to use the back/forward navigation&#xA;buttons in a DHTML application. It also allows a DHTML application to&#xA;be bookmarked in a specific state." ilk="function" name="History" signature="History()" />
            <scope doc="Returns the state of a module according to the URL fragment&#xA;identifier. This method is useful to initialize your modules&#xA;if your application was bookmarked from a particular state." ilk="function" name="getBookmarkedState" signature="getBookmarkedState(module) =&gt; string">
              <variable citdl="string" doc="Non-empty string representing your module." ilk="argument" name="module" />
            </scope>
            <scope doc="Returns the current state of the specified module." ilk="function" name="getCurrentState" signature="getCurrentState(module) =&gt; string">
              <variable citdl="string" doc="Non-empty string representing your module." ilk="argument" name="module" />
            </scope>
            <scope doc="Sets the new currentState attribute of all modules depending on the new&#xA;fully qualified state. Also notifies the modules which current state has&#xA;changed." ilk="function" name="_handleFQStateChange" signature="_handleFQStateChange(fqstate)">
              <variable citdl="string" doc="Fully qualified state" ilk="argument" name="fqstate" />
            </scope>
            <scope doc="Executes the supplied callback when the Browser History Manager is&#xA;ready. This will execute immediately if called after the Browser&#xA;History Manager onLoad event has fired." ilk="function" name="onReady" signature="onReady(fn, obj, overrideContext)">
              <variable citdl="function" doc="what to execute when the Browser History Manager is ready." ilk="argument" name="fn" />
              <variable citdl="object" doc="an optional object to be passed back as a parameter to fn." ilk="argument" name="obj" />
              <variable citdl="boolean|object" doc="If true, the obj passed in becomes fn&apos;s execution scope." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Call this method when you want to store a new entry in the browser&apos;s history." ilk="function" name="navigate" signature="navigate(module, state) =&gt; boolean">
              <variable citdl="string" doc="Non-empty string representing your module." ilk="argument" name="module" />
              <variable citdl="string" doc="String representing the new state of the specified module." ilk="argument" name="state" />
            </scope>
            <scope doc="Finish up the initialization of the Browser History Manager." ilk="function" name="_initialize" signature="_initialize()" />
            <scope doc="Registers a new module." ilk="function" name="register" signature="register(module, initialState, onStateChange, obj, overrideContext)">
              <variable citdl="string" doc="Non-empty string uniquely identifying the&#xA;module you wish to register." ilk="argument" name="module" />
              <variable citdl="string" doc="The initial state of the specified&#xA;module corresponding to its earliest history entry." ilk="argument" name="initialState" />
              <variable citdl="function" doc="Callback called when the&#xA;state of the specified module has changed." ilk="argument" name="onStateChange" />
              <variable citdl="object" doc="An arbitrary object that will be passed as a&#xA;parameter to the handler." ilk="argument" name="obj" />
              <variable citdl="boolean" doc="If true, the obj passed in becomes the&#xA;execution scope of the listener." ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Update the IFrame with our new state." ilk="function" name="_updateIFrame" signature="_updateIFrame() =&gt; boolean" />
            <scope doc="Periodically checks whether our internal IFrame is ready to be used." ilk="function" name="_checkIframeLoaded" signature="_checkIframeLoaded()" />
            <scope doc="Initializes the Browser History Manager. Call this method&#xA;from a script block located right after the opening body tag." ilk="function" name="initialize" signature="initialize(stateField, histFrame)">
              <variable citdl="string|HTML Element" doc="&lt;input type=&quot;hidden&quot;&gt; used&#xA;to store application states. Must be in the static markup." ilk="argument" name="stateField" />
              <variable citdl="string|HTML Element" doc="IFrame used to store&#xA;the history (only required on Internet Explorer)" ilk="argument" name="histFrame" />
            </scope>
            <scope doc="Stores all the registered modules&apos; initial state and current state.&#xA;On Safari, we also store all the fully qualified states visited by&#xA;the application within a single browser session. The storage takes&#xA;place in the form field specified during initialization." ilk="function" name="_storeStates" signature="_storeStates()" />
            <scope doc="Returns the value of the specified query string parameter.&#xA;This method is not used internally by the Browser History Manager.&#xA;However, it is provided here as a helper since many applications&#xA;using the Browser History Manager will want to read the value of&#xA;url parameters to initialize themselves." ilk="function" name="getQueryStringParameter" signature="getQueryStringParameter(paramName, queryString) =&gt; string">
              <variable citdl="string" doc="Name of the parameter we want to look up." ilk="argument" name="paramName" />
              <variable citdl="string" doc="Optional URL to look at. If not specified,&#xA;this method uses the URL in the address bar." ilk="argument" name="queryString" />
            </scope>
            <scope doc="location.hash is a bit buggy on Opera. I have seen instances where&#xA;navigating the history using the back/forward buttons, and hence&#xA;changing the URL, would not change location.hash. That&apos;s ok, the&#xA;implementation of an equivalent is trivial." ilk="function" name="_getHash" signature="_getHash() =&gt; string" />
            <scope doc="Call this method when you want to store a new entry in the browser&apos;s history." ilk="function" name="multiNavigate" signature="multiNavigate(states) =&gt; boolean">
              <variable citdl="object" doc="Associative array of module-state pairs to set simultaneously." ilk="argument" name="states" />
            </scope>
            <variable citdl="HTMLIFrameElement" doc="Our hidden IFrame used to store the browsing history." name="_histFrame" />
            <variable citdl="boolean" doc="Flag used to tell whether YAHOO.util.History.initialize has been called." name="_initialized" />
            <variable citdl="HTMLInputElement|HTMLTextAreaElement" doc="INPUT field (with type=&quot;hidden&quot; or type=&quot;text&quot;) or TEXTAREA.&#xA;This field keeps the value of the initial state, current state&#xA;the list of all states across pages within a single browser session." name="_stateField" />
            <variable citdl="array" doc="List of registered modules." name="_modules" />
            <variable citdl="array" doc="List of fully qualified states. This is used only by Safari." name="_fqstates" />
          </scope>
          <scope ilk="namespace" name="ImageLoader">
            <scope classrefs="YAHOO.util.ImageLoader.imgObj" doc="Background image object. A background image is one whose URL is specified by &quot;background-image&quot; in the element&apos;s style" ilk="class" name="bgImgObj">
              <scope attributes="__ctor__" doc="Background image object. A background image is one whose URL is specified by &quot;background-image&quot; in the element&apos;s style" ilk="function" name="bgImgObj" signature="bgImgObj(domId, url)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
              </scope>
              <scope doc="Inserts the image URL into the DOM so that the image is displayed.&#xA;Sets style.backgroundImage" ilk="function" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
              </scope>
            </scope>
            <scope doc="A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints." ilk="class" name="group">
              <scope attributes="__ctor__" doc="A group for images. A group can have one time limit and a series of triggers. Thus the images belonging to this group must share these constraints." ilk="function" name="group" signature="group(trigEl, trigAct, timeout)">
                <variable citdl="String|HTMLElement" doc="The HTML element id or reference to assign the trigger event to. Can be null for no trigger" ilk="argument" name="trigEl" />
                <variable citdl="String" doc="The type of event to assign to trigEl. Can be null for no trigger" ilk="argument" name="trigAct" />
                <variable citdl="Number" doc="Timeout (time limit) length, in seconds. Can be undefined, or &lt;= 0, for no time limit" ilk="argument" name="timeout" />
              </scope>
              <scope doc="Registers a background image with the group" ilk="function" name="registerBgImage" signature="registerBgImage(domId, url) =&gt; Object">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
              </scope>
              <scope doc="Adds a custom event trigger to the group." ilk="function" name="addCustomTrigger" signature="addCustomTrigger(event)">
                <variable citdl="Object" doc="A YAHOO.util.CustomEvent object" ilk="argument" name="event" />
              </scope>
              <scope doc="Adds a trigger to the group. Call this with the same style as YAHOO.util.Event.addListener" ilk="function" name="addTrigger" signature="addTrigger(trigEl, trigAct)">
                <variable citdl="String|HTMLElement" doc="The HTML element id or reference to assign the trigger event to" ilk="argument" name="trigEl" />
                <variable citdl="String" doc="The type of event to assign to trigEl" ilk="argument" name="trigAct" />
              </scope>
              <scope doc="Returns the group&apos;s fetch method, with the proper closure, for use with setTimeout" ilk="function" name="_getFetchTimeout" signature="_getFetchTimeout() =&gt; Function" />
              <scope doc="Registers a src image with the group" ilk="function" name="registerSrcImage" signature="registerSrcImage(domId, url, width, height) =&gt; Object">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Int" doc="pixel width of the image - defaults to image&apos;s natural size" ilk="argument" name="width" />
                <variable citdl="Int" doc="pixel height of the image - defaults to image&apos;s natural size" ilk="argument" name="height" />
              </scope>
              <scope doc="Registers an alpha-channel-type png background image with the group" ilk="function" name="registerPngBgImage" signature="registerPngBgImage(domId, url, ailProps) =&gt; Object">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Object" doc="The AlphaImageLoader properties to be set for the image&#xA;Valid properties are &apos;sizingMethod&apos; and &apos;enabled&apos;" ilk="argument" name="ailProps" />
              </scope>
              <scope doc="Setup to do in the window&apos;s onload&#xA;Initiates time limit for group; executes the fold check for the images" ilk="function" name="_onloadTasks" signature="_onloadTasks()" />
              <scope doc="Checks the position of each image in the group. If any part of the image is within the client viewport, shows the image immediately." ilk="function" name="_foldCheck" signature="_foldCheck()" />
              <scope doc="Displays the images in the group" ilk="function" name="fetch" signature="fetch()" />
              <scope doc="Finds all elements in the Dom with the class name specified in the group. Removes the class from the element in order to let the style definitions trigger the image fetching" ilk="function" name="_fetchByClass" signature="_fetchByClass()" />
              <variable citdl="String" doc="Name for the group. Only used to identify the group in logging statements" name="name" />
              <variable citdl="Object" doc="Timeout object to keep a handle on the time limit" name="_timeout" />
              <variable citdl="Object" doc="Collection of images registered with this group" name="_imgObjs" />
              <variable citdl="Number" doc="Timeout (time limit) length, in seconds" name="timeoutLen" />
              <variable citdl="String" doc="Class name that will identify images belonging to the group. This class name will be removed from each element in order to fetch images.&#xA;This class should have, in its CSS style definition, &quot;background:none !important;&quot;" name="className" />
              <variable citdl="Array" doc="Collection of triggers for this group.&#xA;Keeps track of each trigger&apos;s element, event, and event-listener-callback &quot;fetch&quot; function" name="_triggers" />
              <variable citdl="Array" doc="Collection of custom-event triggers for this group.&#xA;Keeps track of each trigger&apos;s event object and event-listener-callback &quot;fetch&quot; function" name="_customTriggers" />
              <variable citdl="Array" doc="HTML elements having the class name that is associated with this group&#xA;Elements are stored during the _foldCheck function and reused later during the fetch function. Gives a slight performance improvement when className and foldConditional are both used" name="_classImageEls" />
              <variable citdl="Boolean" doc="Flag to check if images are above the fold. If foldConditional is true, the group will check each of its image locations at page load. If any part of the image is within the client viewport, the image is displayed immediately" name="foldConditional" />
            </scope>
            <scope doc="Base class for image objects to be registered with the groups" ilk="class" name="imgObj">
              <scope attributes="__ctor__" doc="Base class for image objects to be registered with the groups" ilk="function" name="imgObj" signature="imgObj(domId, url)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
              </scope>
              <scope doc="Displays the image; puts the URL into the DOM" ilk="function" name="fetch" signature="fetch()" />
              <scope doc="Inserts the image URL into the DOM so that the image is displayed.&#xA;Must be overridden by child class" ilk="function" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
              </scope>
              <variable citdl="Boolean" doc="Whether the image has already been fetched. In the case of a foldCondional group, keeps track for when the trigger is fired so images aren&apos;t fetched twice" name="_fetched" />
              <variable citdl="String" doc="URL for the image" name="url" />
              <variable citdl="String" doc="HTML DOM id of the image element" name="domId" />
              <variable citdl="Int" doc="Pixel height of the image. Will be set as a &quot;height&quot; attribute after the image is fetched.&#xA;Detaults to the natural height of the image.&#xA;Only appropriate with src images" name="height" />
              <variable citdl="Int" doc="Pixel width of the image. Will be set as a &quot;width&quot; attribute after the image is fetched.&#xA;Detaults to the natural width of the image.&#xA;Only appropriate with src images" name="width" />
              <variable citdl="Boolean" doc="Whether the style.visibility should be set to &quot;visible&quot; after the image is fetched.&#xA;Used when setting src images as visibility:hidden prior to image fetching" name="setVisible" />
            </scope>
            <scope classrefs="YAHOO.util.ImageLoader.imgObj" doc="PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by &quot;background-image&quot; in the element&apos;s style" ilk="class" name="pngBgImgObj">
              <scope attributes="__ctor__" doc="PNG background image object. A PNG background image is one whose URL is specified through AlphaImageLoader or by &quot;background-image&quot; in the element&apos;s style" ilk="function" name="pngBgImgObj" signature="pngBgImgObj(domId, url, ailProps)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Object" doc="The AlphaImageLoader properties to be set for the image&#xA;Valid properties are &apos;sizingMethod&apos; and &apos;enabled&apos;" ilk="argument" name="ailProps" />
              </scope>
              <scope doc="Inserts the image URL into the DOM so that the image is displayed.&#xA;If the browser is determined to be IE6 (or older), sets the AlphaImageLoader src; otherwise sets style.backgroundImage" ilk="function" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
              </scope>
              <variable citdl="Object" doc="AlphaImageLoader properties to be set for the image.&#xA;Valid properties are &quot;sizingMethod&quot; and &quot;enabled&quot;." name="props" />
            </scope>
            <scope classrefs="YAHOO.util.ImageLoader.imgObj" doc="Source image object. A source image is one whose URL is specified by a src attribute in the DOM element" ilk="class" name="srcImgObj">
              <scope attributes="__ctor__" doc="Source image object. A source image is one whose URL is specified by a src attribute in the DOM element" ilk="function" name="srcImgObj" signature="srcImgObj(domId, url, width, height)">
                <variable citdl="String" doc="HTML DOM id of the image element" ilk="argument" name="domId" />
                <variable citdl="String" doc="URL for the image" ilk="argument" name="url" />
                <variable citdl="Int" doc="pixel width of the image - defaults to image&apos;s natural size" ilk="argument" name="width" />
                <variable citdl="Int" doc="pixel height of the image - defaults to image&apos;s natural size" ilk="argument" name="height" />
              </scope>
              <scope doc="Inserts the image URL into the DOM so that the image is displayed.&#xA;Sets src" ilk="function" name="_applyUrl" signature="_applyUrl(el)">
                <variable citdl="Object" doc="HTML DOM element" ilk="argument" name="el" />
              </scope>
            </scope>
          </scope>
          <scope doc="KeyListener is a utility that provides an easy interface for listening for&#xA;keydown/keyup events fired against DOM elements." ilk="class" name="KeyListener">
            <scope attributes="__ctor__" doc="KeyListener is a utility that provides an easy interface for listening for&#xA;keydown/keyup events fired against DOM elements." ilk="function" name="KeyListener" signature="KeyListener(attachTo, attachTo, keyData, handler, handler, event)">
              <variable citdl="HTMLElement" doc="The element or element ID to which the key &#xA;event should be attached" ilk="argument" name="attachTo" />
              <variable citdl="String" doc="The element or element ID to which the key&#xA;event should be attached" ilk="argument" name="attachTo" />
              <variable citdl="Object" doc="The object literal representing the key(s) &#xA;to detect. Possible attributes are &#xA;shift(boolean), alt(boolean), ctrl(boolean) &#xA;and keys(either an int or an array of ints &#xA;representing keycodes)." ilk="argument" name="keyData" />
              <variable citdl="Function" doc="The CustomEvent handler to fire when the &#xA;key event is detected" ilk="argument" name="handler" />
              <variable citdl="Object" doc="An object literal representing the handler." ilk="argument" name="handler" />
              <variable citdl="String" doc="Optional. The event (keydown or keyup) to &#xA;listen for. Defaults automatically to keydown." ilk="argument" name="event" />
            </scope>
            <scope doc="Handles the key event when a key is pressed." ilk="function" name="handleKeyPress" signature="handleKeyPress(e, obj)">
              <variable citdl="DOMEvent" doc="The keypress DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The DOM event scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="Enables the KeyListener by attaching the DOM event listeners to the &#xA;target DOM element" ilk="function" name="enable" signature="enable()" />
            <scope doc="Returns a String representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Disables the KeyListener by removing the DOM event listeners from the &#xA;target DOM element" ilk="function" name="disable" signature="disable()" />
            <variable citdl="String" doc="Constant representing the DOM &quot;keydown&quot; event." name="YAHOO.util.KeyListener.KEYDOWN" />
            <variable citdl="String" doc="Constant representing the DOM &quot;keyup&quot; event." name="YAHOO.util.KeyListener.KEYUP" />
            <variable citdl="Boolean" doc="Boolean indicating the enabled/disabled state of the Tooltip" name="enabled" />
            <variable doc="keycode constants for a subset of the special keys" name="KEY" />
          </scope>
          <scope classrefs="YAHOO.util.DataSourceBase" doc="LocalDataSource class for in-memory data structs including JavaScript arrays,&#xA;JavaScript object literals (JSON), XML documents, and HTML tables." ilk="class" name="LocalDataSource">
            <scope attributes="__ctor__" doc="LocalDataSource class for in-memory data structs including JavaScript arrays,&#xA;JavaScript object literals (JSON), XML documents, and HTML tables." ilk="function" name="LocalDataSource" signature="LocalDataSource(oLiveData, oConfigs)">
              <variable citdl="HTMLElement" doc="Pointer to live data." ilk="argument" name="oLiveData" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.ColorAnim" doc="Anim subclass for moving elements along a path defined by the &quot;points&quot; &#xA;member of &quot;attributes&quot;.  All &quot;points&quot; are arrays with x, y coordinates.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="class" name="Motion">
            <scope attributes="__ctor__" doc="Anim subclass for moving elements along a path defined by the &quot;points&quot; &#xA;member of &quot;attributes&quot;.  All &quot;points&quot; are arrays with x, y coordinates.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Motion(el, { points: { to: [800, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" name="Motion" signature="Motion(el, attributes, duration, method)">
              <variable citdl="String | HTMLElement" doc="Reference to the element that will be animated" ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.  &#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  &#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  &#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            </scope>
          </scope>
          <scope doc="The static Number class provides helper functions to deal with data of type&#xA;Number." ilk="namespace" name="Number">
            <scope doc="Takes a native JavaScript Number and formats to string for display to user." ilk="function" name="format" signature="format(nData, oConfig) =&gt; String">
              <variable citdl="Number" doc="Number." ilk="argument" name="nData" />
              <variable citdl="Object} (Optional) Optional configuration values:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;prefix {String}&lt;/dd&gt;&#xA;&lt;dd&gt;String prepended before each number, like a currency designator &quot;$&quot;&lt;/dd&gt;&#xA;&lt;dt&gt;decimalPlaces {Number}&lt;/dd&gt;&#xA;&lt;dd&gt;Number of decimal places to round.&lt;/dd&gt;&#xA;&lt;dt&gt;decimalSeparator {String}&lt;/dd&gt;&#xA;&lt;dd&gt;Decimal separator&lt;/dd&gt;&#xA;&lt;dt&gt;thousandsSeparator {String}&lt;/dd&gt;&#xA;&lt;dd&gt;Thousands separator&lt;/dd&gt;&#xA;&lt;dt&gt;suffix {String" doc="&lt;/dd&gt;&#xA;&lt;dd&gt;String appended after each number, like &quot; items&quot; (note the space)&lt;/dd&gt;&#xA;&lt;dt&gt;negativeFormat&lt;/dt&gt;&#xA;&lt;dd&gt;String used as a guide for how to indicate negative numbers.  The first &apos;#&apos; character in the string will be replaced by the number.  Default &apos;-#&apos;.&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="argument" name="oConfig" />
            </scope>
          </scope>
          <scope doc="The ObjectAssert object provides functions to test JavaScript objects&#xA;for a variety of cases." ilk="namespace" name="ObjectAssert">
            <scope doc="Asserts that an object has a property with the given name." ilk="function" name="hasProperty" signature="hasProperty(propertyName, object, message)">
              <variable citdl="String" doc="The name of the property to test." ilk="argument" name="propertyName" />
              <variable citdl="Object" doc="The object to search." ilk="argument" name="object" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
            <scope doc="Asserts that all properties in the object exist in another object." ilk="function" name="propertiesAreEqual" signature="propertiesAreEqual(expected, actual, message)">
              <variable citdl="Object" doc="An object with the expected properties." ilk="argument" name="expected" />
              <variable citdl="Object" doc="An object with the actual properties." ilk="argument" name="actual" />
              <variable citdl="String" doc="(Optional) The message to display if the assertion fails." ilk="argument" name="message" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.Region" doc="A point is a region that is special in that it represents a single point on &#xA;the grid." ilk="class" name="Point">
            <scope attributes="__ctor__" doc="A point is a region that is special in that it represents a single point on &#xA;the grid." ilk="function" name="Point" signature="Point(x, y)">
              <variable citdl="Int" doc="The X position of the point" ilk="argument" name="x" />
              <variable citdl="Int" doc="The Y position of the point" ilk="argument" name="y" />
            </scope>
          </scope>
          <scope doc="A region is a representation of an object on a grid.  It is defined&#xA;by the top, right, bottom, left extents, so is rectangular by default.  If &#xA;other shapes are required, this class could be extended to support it." ilk="class" name="Region">
            <scope attributes="__ctor__" doc="A region is a representation of an object on a grid.  It is defined&#xA;by the top, right, bottom, left extents, so is rectangular by default.  If &#xA;other shapes are required, this class could be extended to support it." ilk="function" name="Region" signature="Region(t, r, b, l)">
              <variable citdl="Int" doc="the top extent" ilk="argument" name="t" />
              <variable citdl="Int" doc="the right extent" ilk="argument" name="r" />
              <variable citdl="Int" doc="the bottom extent" ilk="argument" name="b" />
              <variable citdl="Int" doc="the left extent" ilk="argument" name="l" />
            </scope>
            <scope doc="Returns the area of the region" ilk="function" name="getArea" signature="getArea() =&gt; Int" />
            <scope doc="Returns a region that is occupied by the DOM element" ilk="function" name="getRegion" signature="getRegion(el) =&gt; Region">
              <variable citdl="HTMLElement" doc="The element" ilk="argument" name="el" />
            </scope>
            <scope doc="Returns true if this region contains the region passed in" ilk="function" name="contains" signature="contains(region) =&gt; Boolean">
              <variable citdl="Region" doc="The region to evaluate" ilk="argument" name="region" />
            </scope>
            <scope doc="Returns the region representing the smallest region that can contain both&#xA;the passed in region and this region." ilk="function" name="union" signature="union(region) =&gt; Region">
              <variable citdl="Region" doc="The region that to create the union with" ilk="argument" name="region" />
            </scope>
            <scope doc="toString" ilk="function" name="toString" signature="toString() =&gt; " />
            <scope doc="Returns the region where the passed in region overlaps with this one" ilk="function" name="intersect" signature="intersect(region) =&gt; Region">
              <variable citdl="Region" doc="The region that intersects" ilk="argument" name="region" />
            </scope>
            <variable citdl="int" doc="The region&apos;s right extent" name="right" />
            <variable citdl="Int" doc="The region&apos;s bottom extent" name="bottom" />
            <variable citdl="Int" doc="The region&apos;s top extent" name="top" />
            <variable citdl="Int" doc="The region&apos;s total height" name="height" />
            <variable citdl="Int" doc="The region&apos;s top extent as index, for symmetry with set/getXY" name="1" />
            <variable citdl="Int" doc="The region&apos;s left extent as index, for symmetry with set/getXY" name="0" />
            <variable citdl="Int" doc="The region&apos;s top extent" name="y" />
            <variable citdl="Int" doc="The region&apos;s left extent" name="x" />
            <variable citdl="Int" doc="The region&apos;s total width" name="width" />
            <variable citdl="Int" doc="The region&apos;s left extent" name="left" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="&lt;p&gt;Makes an element resizable&lt;/p&gt;" ilk="class" name="Resize">
            <scope attributes="__ctor__" doc="&lt;p&gt;Makes an element resizable&lt;/p&gt;" ilk="function" name="Resize" signature="Resize(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to make resizable." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Handles the sizes for the Bottom Left handle." ilk="function" name="_handle_for_bl" signature="_handle_for_bl(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <scope doc="Calculated the height based on the mouse event." ilk="function" name="_setHeight" signature="_setHeight(ev, flip) =&gt; Number">
              <variable citdl="Event" doc="The mouse event." ilk="argument" name="ev" />
              <variable citdl="Boolean" doc="Argument to determine the direction of the movement." ilk="argument" name="flip" />
            </scope>
            <scope doc="Lock the resize so it can&apos;t be resized" ilk="function" name="lock" signature="lock(dd) =&gt; &lt;a href=&quot;YAHOO.util.Resize.html&quot;&gt;YAHOO.util.Resize&lt;/a&gt;">
              <variable citdl="Boolean" doc="If the draggable config is set, lock it too" ilk="argument" name="dd" />
            </scope>
            <scope doc="Resizes the proxy, sets up the &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; handlers, updates the status div and preps the cache" ilk="function" name="_handleStartDrag" signature="_handleStartDrag(args, dd)">
              <variable citdl="Object" doc="The args passed from the CustomEvent." ilk="argument" name="args" />
              <variable citdl="Object" doc="The &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; object we are working with." ilk="argument" name="dd" />
            </scope>
            <scope doc="Handles the sizes for the Top handle." ilk="function" name="_handle_for_t" signature="_handle_for_t(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <scope doc="Unlock the resize so it can be resized" ilk="function" name="unlock" signature="unlock(dd) =&gt; &lt;a href=&quot;YAHOO.util.Resize.html&quot;&gt;YAHOO.util.Resize&lt;/a&gt;">
              <variable citdl="Boolean" doc="If the draggable config is set, unlock it too" ilk="argument" name="dd" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create a resizable element." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the utility." ilk="argument" name="attr" />
            </scope>
            <scope doc="Adds CSS class names to the handles" ilk="function" name="_handleMouseOver" signature="_handleMouseOver(ev)">
              <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            </scope>
            <scope doc="Handles the sizes for the Bottom Right handle." ilk="function" name="_handle_for_br" signature="_handle_for_br(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <scope doc="Get&apos;s a resize object by the HTML id of the element associated with the Resize object." ilk="function" name="getResizeById" signature="getResizeById() =&gt; Object" />
            <scope doc="This method preps the autoRatio on MouseDown." ilk="function" name="_handleMouseDown" signature="_handleMouseDown(ev)">
              <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            </scope>
            <scope doc="Adjusts the number based on the ticks used." ilk="function" name="_snapTick" signature="_snapTick(size, pix) =&gt; Number">
              <variable citdl="Number" doc="The size to tick against." ilk="argument" name="size" />
              <variable citdl="Number" doc="The tick pixels." ilk="argument" name="pix" />
            </scope>
            <scope doc="Handles the sizes for the Top Right handle." ilk="function" name="_handle_for_tr" signature="_handle_for_tr(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <scope doc="Check the locked status of the resize instance" ilk="function" name="isLocked" signature="isLocked() =&gt; Boolean" />
            <scope doc="The Resize class&apos;s initialization method" ilk="function" name="init" signature="init()" />
            <scope doc="Returns a string representing the Resize Object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Resizes the element, wrapper or proxy based on the data from the handlers." ilk="function" name="resize" signature="resize(ev, h, w, t, l, force, silent) =&gt; &lt;a href=&quot;YAHOO.util.Resize.html&quot;&gt;YAHOO.util.Resize&lt;/a&gt;">
              <variable citdl="Event" doc="The mouse event." ilk="argument" name="ev" />
              <variable citdl="Number" doc="The new height setting." ilk="argument" name="h" />
              <variable citdl="Number" doc="The new width setting." ilk="argument" name="w" />
              <variable citdl="Number" doc="The new top setting." ilk="argument" name="t" />
              <variable citdl="Number" doc="The new left setting." ilk="argument" name="l" />
              <variable citdl="Boolean" doc="Resize the element (used for proxy resize)." ilk="argument" name="force" />
              <variable citdl="Boolean" doc="Don&apos;t fire the beforeResize Event." ilk="argument" name="silent" />
            </scope>
            <scope doc="Destroys the resize object and all of it&apos;s elements &amp; listeners." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Cleans up listeners, hides proxy element and removes class names." ilk="function" name="_handleMouseUp" signature="_handleMouseUp(ev)">
              <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            </scope>
            <scope doc="This method checks to see if the &quot;autoRatio&quot; config is set. If it is, we will check to see if the &quot;Shift Key&quot; is pressed. If so, we will set the config ratio to true." ilk="function" name="_setAutoRatio" signature="_setAutoRatio(ev)">
              <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            </scope>
            <scope doc="The function we use as the onselectstart handler when we start a drag in Internet Explorer" ilk="function" name="_ieSelectFix" signature="_ieSelectFix()" />
            <scope doc="Resets the element to is start state." ilk="function" name="reset" signature="reset() =&gt; &lt;a href=&quot;YAHOO.util.Resize.html&quot;&gt;YAHOO.util.Resize&lt;/a&gt;" />
            <scope doc="Handles the sizes for the Top Left handle." ilk="function" name="_handle_for_tl" signature="_handle_for_tl(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <scope doc="Creates the wrap element if the wrap config is true. It will auto wrap the following element types: img, textarea, input, iframe, select" ilk="function" name="_createWrap" signature="_createWrap()" />
            <scope doc="Get the HTML reference for the status element." ilk="function" name="getStatusEl" signature="getStatusEl() =&gt; HTMLElement" />
            <scope doc="Get the HTML reference for the wrap element, returns the current element if not wrapped." ilk="function" name="getWrapEl" signature="getWrapEl() =&gt; HTMLElement" />
            <scope doc="Setup the &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; instance on the element" ilk="function" name="_setupDragDrop" signature="_setupDragDrop()" />
            <scope doc="Sets up the this._cache hash table." ilk="function" name="_setCache" signature="_setCache()" />
            <scope doc="Creates the handles as specified in the config" ilk="function" name="_createHandles" signature="_createHandles()" />
            <scope doc="Creates the proxy element if the proxy config is true" ilk="function" name="_createProxy" signature="_createProxy()" />
            <scope doc="Checks the value passed against the maxWidth and minWidth." ilk="function" name="_checkWidth" signature="_checkWidth(w) =&gt; Number">
              <variable citdl="Number" doc="The width to check." ilk="argument" name="w" />
            </scope>
            <scope doc="Using the Height, Width, Top &amp; Left, it recalcuates them based on the original element size." ilk="function" name="_setRatio" signature="_setRatio(h, w, t, l) =&gt; Array">
              <variable citdl="Number" doc="The height offset." ilk="argument" name="h" />
              <variable citdl="Number" doc="The with offset." ilk="argument" name="w" />
              <variable citdl="Number" doc="The top offset." ilk="argument" name="t" />
              <variable citdl="Number" doc="The left offset." ilk="argument" name="l" />
            </scope>
            <scope doc="Calculates the width based on the mouse event." ilk="function" name="_setWidth" signature="_setWidth(ev, flip) =&gt; Number">
              <variable citdl="Event" doc="The mouse event." ilk="argument" name="ev" />
              <variable citdl="Boolean" doc="Argument to determine the direction of the movement." ilk="argument" name="flip" />
            </scope>
            <scope doc="Checks the value passed against the maxHeight and minHeight." ilk="function" name="_checkHeight" signature="_checkHeight(h) =&gt; Number">
              <variable citdl="Number" doc="The height to check." ilk="argument" name="h" />
            </scope>
            <scope doc="Get the HTML reference for the currently active resize handle." ilk="function" name="getActiveHandleEl" signature="getActiveHandleEl() =&gt; HTMLElement" />
            <scope doc="Handles the sizes for the Right handle." ilk="function" name="_handle_for_r" signature="_handle_for_r(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <scope doc="Get the HTML reference for the proxy, returns null if no proxy." ilk="function" name="getProxyEl" signature="getProxyEl() =&gt; HTMLElement" />
            <scope doc="Using the Height, Width, Top &amp; Left, it updates the status element with the elements sizes." ilk="function" name="_updateStatus" signature="_updateStatus(h, w, t, l)">
              <variable citdl="Number" doc="The new height setting." ilk="argument" name="h" />
              <variable citdl="Number" doc="The new width setting." ilk="argument" name="w" />
              <variable citdl="Number" doc="The new top setting." ilk="argument" name="t" />
              <variable citdl="Number" doc="The new left setting." ilk="argument" name="l" />
            </scope>
            <scope doc="Returns true or false if a resize operation is currently active on the element." ilk="function" name="isActive" signature="isActive() =&gt; Boolean" />
            <scope doc="Handles the sizes for the Left handle." ilk="function" name="_handle_for_l" signature="_handle_for_l(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <scope doc="Removes CSS class names to the handles" ilk="function" name="_handleMouseOut" signature="_handleMouseOut(ev)">
              <variable citdl="Event" doc="A mouse event." ilk="argument" name="ev" />
            </scope>
            <scope doc="Handles the sizes for the Bottom handle." ilk="function" name="_handle_for_b" signature="_handle_for_b(args)">
              <variable citdl="Object" doc="The arguments from the CustomEvent." ilk="argument" name="args" />
            </scope>
            <variable citdl="String" doc="Class name given to the wrap element when a resize action is taking place." name="CSS_RESIZING" />
            <variable citdl="Object" doc="An lookup table containing key information for the element being resized. e.g. height, width, x position, y position, etc.." name="_cache" />
            <variable citdl="Object" doc="An Object containing references to all of the &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; instances used for the resize handles" name="_dds" />
            <variable citdl="String" doc="Class name given to the wrap element to make all handles hidden" name="CSS_HIDDEN" />
            <variable citdl="Object" doc="An object containing references to all of the resize handles." name="_handles" />
            <variable doc="We will hold a copy of the current &quot;onselectstart&quot; method on this property, and reset it after we are done using it." name="_ieSelectBack" />
            <variable citdl="String" doc="Class name given to the status element" name="CSS_STATUS" />
            <variable citdl="String" doc="Base CSS class name" name="CSS_RESIZE" />
            <variable citdl="String" doc="Class name given to the wrap element" name="CSS_WRAP" />
            <variable citdl="Object" doc="Internal hash table for all resize instances" name="_instances" />
            <variable citdl="String" doc="Class name added when dragging is enabled" name="CSS_DRAG" />
            <variable citdl="Event" doc="The mouse event used to resize with" name="_resizeEvent" />
            <variable citdl="HTMLElement" doc="The HTML reference of the element proxy" name="_proxy" />
            <variable citdl="Object" doc="The &lt;a href=&quot;YAHOO.util.DragDrop.html&quot;&gt;YAHOO.util.DragDrop&lt;/a&gt; instance used if draggable is true" name="dd" />
            <variable citdl="String" doc="Class name given to all handles, used as a base for single handle names as well.. Handle &quot;t&quot; will get this.CSS_HANDLE + &apos;-t&apos; as well as this.CSS_HANDLE" name="CSS_HANDLE" />
            <variable citdl="String" doc="Class name given to the proxy element" name="CSS_PROXY" />
            <variable citdl="String" doc="Class name given to the wrap element when the ghost property is active" name="CSS_GHOST" />
            <variable citdl="String" doc="Class name used for hover only handles" name="CSS_HOVER" />
            <variable citdl="Boolean" doc="A flag to show if the element is absolutely positioned" name="_positioned" />
            <variable citdl="String" doc="The string identifier of the currently active handle. e.g. &apos;r&apos;, &apos;br&apos;, &apos;tl&apos;" name="_currentHandle" />
            <variable citdl="Boolean" doc="Flag to show if the resize is active. Used for events." name="_active" />
            <variable citdl="Boolean" doc="A flag to show if the resize is locked" name="_locked" />
            <variable citdl="String" doc="Class name used to make the knob style handles" name="CSS_KNOB" />
            <variable citdl="HTMLElement" doc="The HTML reference of the element wrapper" name="_wrap" />
            <variable citdl="Object" doc="A link to the currently active DD object" name="_currentDD" />
            <variable citdl="Object" doc="A copy of the YAHOO.env.ua property" name="browser" />
          </scope>
          <scope doc="Flafh detection utility." ilk="namespace" name="SWFDetect" />
          <scope doc="Class for the YUI SWFStore util." ilk="class" name="SWFStore">
            <scope attributes="__ctor__" doc="Class for the YUI SWFStore util." ilk="function" name="SWFStore" signature="SWFStore(containerId, shareData, useCompression)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="Boolean" doc="Whether or not data should be shared across browsers" ilk="argument" name="shareData" />
              <variable citdl="Boolean" doc="Container element for the Flash Player instance." ilk="argument" name="useCompression" />
            </scope>
            <scope doc="Public accessor to the unique name of the SWFStore instance." ilk="function" name="setUseCompression" signature="setUseCompression(Whether)">
              <variable citdl="Boolean" doc="or to compress stored data" ilk="argument" name="Whether" />
            </scope>
            <scope doc="Method to attach listeners to events" ilk="function" name="on" signature="on(type, listener)">
              <variable citdl="String" doc="The tyep of event to listen for" ilk="argument" name="type" />
              <variable citdl="String" doc="The function to call" ilk="argument" name="listener" />
            </scope>
            <scope doc="Method to attach listeners to events" ilk="function" name="addListener" signature="addListener(type, listener)">
              <variable citdl="String" doc="The tyep of event to listen for" ilk="argument" name="type" />
              <variable citdl="String" doc="The function to call" ilk="argument" name="listener" />
            </scope>
            <scope doc="Gets the current size, in KB, of the amount of space taken by the current store.&#xA;Note that this is calculated, and may take time depending on the number of items stored" ilk="function" name="calculateCurrentSize" signature="calculateCurrentSize() =&gt; Number" />
            <scope doc="Displays the settings dialog to allow the user to configure&#xA;storage settings manually. If the SWF height and width are smaller than&#xA;what is allowable to display the local settings panel,&#xA;an openExternalDialog message will be sent to JavaScript." ilk="function" name="displaySettings" signature="displaySettings()" />
            <scope doc="Determines if SWF&apos;s visible area is large enough to fit the settings panel" ilk="function" name="hasAdequateDimensions" signature="hasAdequateDimensions() =&gt; Boolean" />
            <scope doc="Returns the number of items in storage, if any." ilk="function" name="getLength" signature="getLength() =&gt; Number" />
            <scope doc="Removes all data in local storage for this domain.&#xA;&lt;p&gt;Be careful when using this method, as it may &#xA;remove stored information that is used by other applications&#xA;in this domain &lt;/p&gt;" ilk="function" name="clear" signature="clear()" />
            <scope doc="Returns the value of the store at the specified index, if any." ilk="function" name="getValueAt" signature="getValueAt(index) =&gt; Object">
              <variable citdl="Number" doc="The index of the stored item" ilk="argument" name="index" />
            </scope>
            <scope doc="Returns the data type of of the storage.&#xA;&lt;p&gt;May be one of the following types:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;boolean&lt;/li&gt;&#xA;&lt;li&gt;function&lt;/li&gt;&#xA;&lt;li&gt;number&lt;/li&gt;&#xA;&lt;li&gt;object&lt;/li&gt;&#xA;&lt;li&gt;string&lt;/li&gt;&#xA;&lt;li&gt;number&lt;/li&gt;&#xA;&lt;li&gt;xml&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;" ilk="function" name="getTypeOf" signature="getTypeOf(location) =&gt; String">
              <variable citdl="String" doc="The name of the &quot;cookie&quot; or store" ilk="argument" name="location" />
            </scope>
            <scope doc="Public accessor to the unique name of the SWFStore instance." ilk="function" name="setShareData" signature="setShareData(Whether)">
              <variable citdl="Boolean" doc="or not to share among browsers" ilk="argument" name="Whether" />
            </scope>
            <scope doc="Returns the value of the item in storage, if any." ilk="function" name="getValueOf" signature="getValueOf(location) =&gt; Object">
              <variable citdl="String" doc="The name of the &quot;cookie&quot; or store" ilk="argument" name="location" />
            </scope>
            <scope doc="Returns the items in storage as an array." ilk="function" name="getItems" signature="getItems() =&gt; Object" />
            <scope doc="Returns the data type of of the storage.&#xA;&lt;p&gt;May be one of the following types:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;boolean&lt;/li&gt;&#xA;&lt;li&gt;function&lt;/li&gt;&#xA;&lt;li&gt;number&lt;/li&gt;&#xA;&lt;li&gt;object&lt;/li&gt;&#xA;&lt;li&gt;string&lt;/li&gt;&#xA;&lt;li&gt;number&lt;/li&gt;&#xA;&lt;li&gt;xml&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;" ilk="function" name="getTypeAt" signature="getTypeAt(location) =&gt; String">
              <variable citdl="Number" doc="The index of the &quot;cookie&quot; or store" ilk="argument" name="location" />
            </scope>
            <scope doc="Public accessor to the unique name of the SWFStore instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Public accessor to the unique name of the SWFStore instance." ilk="function" name="getUseCompression" signature="getUseCompression() =&gt; Boolean" />
            <scope doc="Saves data to local storage. It returns a String that can&#xA;be one of three values: &quot;true&quot; if the storage succeeded; &quot;false&quot; if the user&#xA;has denied storage on their machine or storage space allotted is not sufficient.&#xA;&lt;p&gt;The size limit for the passed parameters is ~40Kb.&lt;/p&gt;" ilk="function" name="setItem" signature="setItem(data, location) =&gt; Boolean">
              <variable citdl="Object" doc="The data to store" ilk="argument" name="data" />
              <variable citdl="String" doc="The name of the &quot;cookie&quot; or store" ilk="argument" name="location" />
            </scope>
            <scope doc="Removes the item in storage, if any." ilk="function" name="removeItem" signature="removeItem(location)">
              <variable citdl="String" doc="The name of the &quot;cookie&quot; or store" ilk="argument" name="location" />
            </scope>
            <scope doc="Public accessor to the unique name of the SWFStore instance." ilk="function" name="getShareData" signature="getShareData() =&gt; Boolean" />
            <scope doc="This method requests more storage (if the amount is above 100KB or the current setting).&#xA;The request dialog has to be displayed within the Flash player itself&#xA;so the SWF it is called from must be visible and at least 215px x 138px (w x h) in size." ilk="function" name="setSize" signature="setSize(value) =&gt; String">
              <variable citdl="Number" doc="The size, in KB" ilk="argument" name="value" />
            </scope>
            <scope doc="Gets the timestamp of the last store. This value is automatically set when &#xA;data is stored." ilk="function" name="getModificationDate" signature="getModificationDate() =&gt; Date" />
          </scope>
          <scope classrefs="YAHOO.util.DataSourceBase" doc="ScriptNodeDataSource class for accessing remote data via the YUI Get Utility." ilk="class" name="ScriptNodeDataSource">
            <scope attributes="__ctor__" doc="ScriptNodeDataSource class for accessing remote data via the YUI Get Utility." ilk="function" name="ScriptNodeDataSource" signature="ScriptNodeDataSource(oLiveData, oConfigs)">
              <variable citdl="HTMLElement" doc="Pointer to live data." ilk="argument" name="oLiveData" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Overridable method gives implementers access to modify the URI before the dynamic&#xA;script node gets inserted. Implementers should take care not to return an&#xA;invalid URI." ilk="function" name="doBeforeGetScriptNode" signature="doBeforeGetScriptNode(URI) =&gt; String">
              <variable citdl="String" doc="to the script" ilk="argument" name="URI" />
            </scope>
            <scope doc="Overriding method passes query to Get Utility. The returned&#xA;response is then forwarded to the handleResponse function." ilk="function" name="makeConnection" signature="makeConnection(oRequest, oCallback, oCaller) =&gt; Number">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Callback object literal." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
            </scope>
            <scope doc="Creates a request callback that gets appended to the script URI. Implementers&#xA;can customize this string to match their server&apos;s query syntax." ilk="function" name="generateRequestCallback" signature="generateRequestCallback() =&gt; String" />
            <variable citdl="Number" doc="Counter for pending requests. When this is 0, it is safe to purge callbacks&#xA;array." name="_nPending" />
            <variable citdl="String" doc="Callback string parameter name sent to the remote script. By default,&#xA;requests are sent to&#xA;&amp;#60;URI&amp;#62;?&amp;#60;scriptCallbackParam&amp;#62;=callback" name="scriptCallbackParam" />
            <variable citdl="Object" doc="Alias to YUI Get Utility, to allow implementers to use a custom class." name="getUtility" />
            <variable citdl="Number" doc="Unique ID to track requests." name="_nId" />
            <variable citdl="Function[]" doc="Global array of callback functions, one for each request sent." name="callbacks" />
            <variable citdl="String" doc="Defines request/response management in the following manner:&#xA;&lt;dl&gt;&#xA;&lt;!--&lt;dt&gt;queueRequests&lt;/dt&gt;&#xA;&lt;dd&gt;If a request is already in progress, wait until response is returned before sending the next request.&lt;/dd&gt;&#xA;&lt;dt&gt;cancelStaleRequests&lt;/dt&gt;&#xA;&lt;dd&gt;If a request is already in progress, cancel it before sending the next request.&lt;/dd&gt;--&gt;&#xA;&lt;dt&gt;ignoreStaleResponses&lt;/dt&gt;&#xA;&lt;dd&gt;Send all requests, but handle only the response for the most recently sent request.&lt;/dd&gt;&#xA;&lt;dt&gt;allowAll&lt;/dt&gt;&#xA;&lt;dd&gt;Send all requests and handle all responses.&lt;/dd&gt;&#xA;&lt;/dl&gt;" name="asyncMode" />
          </scope>
          <scope classrefs="YAHOO.util.ColorAnim" doc="Anim subclass for scrolling elements to a position defined by the &quot;scroll&quot;&#xA;member of &quot;attributes&quot;.  All &quot;scroll&quot; members are arrays with x, y scroll positions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="class" name="Scroll">
            <scope attributes="__ctor__" doc="Anim subclass for scrolling elements to a position defined by the &quot;scroll&quot;&#xA;member of &quot;attributes&quot;.  All &quot;scroll&quot; members are arrays with x, y scroll positions.&#xA;&lt;p&gt;Usage: &lt;code&gt;var myAnim = new YAHOO.util.Scroll(el, { scroll: { to: [0, 800] } }, 1, YAHOO.util.Easing.easeOut);&lt;/code&gt;&lt;/p&gt;" ilk="function" name="Scroll" signature="Scroll(el, attributes, duration, method)">
              <variable citdl="String or HTMLElement" doc="Reference to the element that will be animated" ilk="argument" name="el" />
              <variable citdl="Object" doc="The attribute(s) to be animated.  &#xA;Each attribute is an object with at minimum a &quot;to&quot; or &quot;by&quot; member defined.  &#xA;Additional optional members are &quot;from&quot; (defaults to current value), &quot;units&quot; (defaults to &quot;px&quot;).  &#xA;All attribute names use camelCase." ilk="argument" name="attributes" />
              <variable citdl="Number" doc="(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based" ilk="argument" name="duration" />
              <variable citdl="Function" doc="(optional, defaults to YAHOO.util.Easing.easeNone) Computes the values that are applied to the attributes per frame (generally a YAHOO.util.Easing method)" ilk="argument" name="method" />
            </scope>
          </scope>
          <scope doc="Provides helper methods for collecting and filtering DOM elements." ilk="namespace" name="Selector">
            <scope doc="Test if the supplied node matches the supplied selector." ilk="function" name="test" signature="test(node, selector) =&gt; boolean">
              <variable citdl="HTMLElement | String" doc="An id or node reference to the HTMLElement being tested." ilk="argument" name="node" />
              <variable citdl="string" doc="The CSS Selector to test the node against." ilk="argument" name="selector" />
            </scope>
            <scope doc="Filters a set of nodes based on a given CSS selector." ilk="function" name="filter" signature="filter(nodes, selector) =&gt; array">
              <variable citdl="array" doc="A set of nodes/ids to filter." ilk="argument" name="nodes" />
              <variable citdl="string" doc="The selector used to test each node." ilk="argument" name="selector" />
            </scope>
            <scope doc="Break selector into token units per simple selector.&#xA;Combinator is attached to left-hand selector." ilk="function" name="_tokenize" signature="_tokenize()" />
            <scope doc="Retrieves a set of nodes based on a given CSS selector." ilk="function" name="query" signature="query(selector, root, firstOnly) =&gt; Array">
              <variable citdl="string" doc="The CSS Selector to test the node against." ilk="argument" name="selector" />
              <variable citdl="HTMLElement | String" doc="optional An id or HTMLElement to start the query from. Defaults to Selector.document." ilk="argument" name="root" />
              <variable citdl="Boolean" doc="optional Whether or not to return only the first match." ilk="argument" name="firstOnly" />
            </scope>
            <variable citdl="object" doc="Mapping of attributes to aliases, normally to work around HTMLAttributes&#xA;that conflict with JS reserved words." name="attrAliases" />
            <variable citdl="object" doc="List of operators and corresponding boolean functions. &#xA;These functions are passed the attribute and the current node&apos;s value of the attribute." name="operators" />
            <variable citdl="object" doc="Default document for use queries" name="document" />
            <variable citdl="object" doc="Mapping of shorthand tokens to corresponding attribute selector" name="shorthand" />
            <variable citdl="object" doc="List of pseudo-classes and corresponding boolean functions. &#xA;These functions are called with the current node, and any value that was parsed with the pseudo regex." name="pseudos" />
          </scope>
          <scope classrefs="YAHOO.util.AssertionError" doc="ShouldError is subclass of AssertionError that is thrown whenever&#xA;a test is expected to throw an error but doesn&apos;t." ilk="class" name="ShouldError">
            <scope attributes="__ctor__" doc="ShouldError is subclass of AssertionError that is thrown whenever&#xA;a test is expected to throw an error but doesn&apos;t." ilk="function" name="ShouldError" signature="ShouldError(message)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
            </scope>
            <variable citdl="String" doc="The name of the error that occurred." name="name" />
          </scope>
          <scope classrefs="YAHOO.util.AssertionError" doc="ShouldFail is subclass of AssertionError that is thrown whenever&#xA;a test was expected to fail but did not." ilk="class" name="ShouldFail">
            <scope attributes="__ctor__" doc="ShouldFail is subclass of AssertionError that is thrown whenever&#xA;a test was expected to fail but did not." ilk="function" name="ShouldFail" signature="ShouldFail(message)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
            </scope>
            <variable citdl="String" doc="The name of the error that occurred." name="name" />
          </scope>
          <scope doc="Sort static utility to support Column sorting." ilk="namespace" name="Sort">
            <scope doc="Comparator function for simple case-insensitive string sorting." ilk="function" name="compare" signature="compare(a, b, desc)">
              <variable citdl="Object" doc="First sort argument." ilk="argument" name="a" />
              <variable citdl="Object" doc="Second sort argument." ilk="argument" name="b" />
              <variable citdl="Boolean" doc="True if sort direction is descending, false if&#xA;sort direction is ascending." ilk="argument" name="desc" />
            </scope>
          </scope>
          <scope doc="The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API." ilk="class" name="Storage">
            <scope attributes="__ctor__" doc="The Storage class is an HTML 5 storage API clone, used to wrap individual storage implementations with a common API." ilk="function" name="Storage" signature="Storage(location, conf)">
              <variable citdl="String" doc="Required. The storage location." ilk="argument" name="location" />
              <variable citdl="Object" doc="Required. A configuration object." ilk="argument" name="conf" />
            </scope>
            <scope doc="Retrieve the key stored at the provided index; should be overwritten by storage engine." ilk="function" name="key" signature="key(index) =&gt; String">
              <variable citdl="Number" doc="Required. The index to retrieve (unsigned long in HTML 5 spec)." ilk="argument" name="index" />
            </scope>
            <scope doc="Implementation of the clear login; should be overwritten by storage engine." ilk="function" name="_clear" signature="_clear()" />
            <scope doc="Clears any existing key/value pairs." ilk="function" name="clear" signature="clear()" />
            <scope doc="Remove an item from the data storage." ilk="function" name="setItem" signature="setItem(key)">
              <variable citdl="String" doc="Required. The key to remove (DOMString in HTML 5 spec)." ilk="argument" name="key" />
            </scope>
            <scope doc="Implementation of the getItem login; should be overwritten by storage engine." ilk="function" name="_getItem" signature="_getItem(key) =&gt; String|NULL">
              <variable citdl="String" doc="Required. The key used to reference this value." ilk="argument" name="key" />
            </scope>
            <scope doc="Implementation of the key logic; should be overwritten by storage engine." ilk="function" name="_key" signature="_key(index) =&gt; String|NULL">
              <variable citdl="Number" doc="Required. The index to retrieve (unsigned long in HTML 5 spec)." ilk="argument" name="index" />
            </scope>
            <scope doc="Converts the object into a string, with meta data (type), so it can be restored later." ilk="function" name="_createValue" signature="_createValue(s)">
              <variable citdl="Object" doc="Required. An object to store." ilk="argument" name="s" />
            </scope>
            <scope doc="Converts the stored value into its appropriate type." ilk="function" name="_getValue" signature="_getValue(s)">
              <variable citdl="String" doc="Required. The stored value." ilk="argument" name="s" />
            </scope>
            <scope doc="Fetches the data stored and the provided key." ilk="function" name="getItem" signature="getItem(key) =&gt; String|NULL">
              <variable citdl="String" doc="Required. The key used to reference this value (DOMString in HTML 5 spec)." ilk="argument" name="key" />
            </scope>
            <scope doc="Implementation of the removeItem login; should be overwritten by storage engine." ilk="function" name="_removeItem" signature="_removeItem(key)">
              <variable citdl="String" doc="Required. The key to remove." ilk="argument" name="key" />
            </scope>
            <scope doc="Tests if the key has been set (not in HTML 5 spec); should be overwritten by storage engine." ilk="function" name="hasKey" signature="hasKey(key) =&gt; Boolean">
              <variable citdl="String" doc="Required. The key to search for." ilk="argument" name="key" />
            </scope>
            <scope doc="Implementation of the setItem login; should be overwritten by storage engine." ilk="function" name="_setItem" signature="_setItem(key, data) =&gt; Boolean">
              <variable citdl="String" doc="Required. The key used to reference this value." ilk="argument" name="key" />
              <variable citdl="Object" doc="Required. The data to storage at key." ilk="argument" name="data" />
            </scope>
            <scope doc="Fetches the storage object&apos;s name; should be overwritten by storage engine." ilk="function" name="getName" signature="getName() =&gt; String" />
            <variable citdl="{String}" doc="The event name for when the storage item has changed." name="CE_CHANGE" />
            <variable citdl="{String}" doc="The location for this instance." name="_location" />
            <variable citdl="{Number}" doc="The current length of the keys." name="length" />
            <variable citdl="{String}" doc="The name of this engine." name="_name" />
            <variable citdl="{String}" doc="The event name for when the storage item is ready." name="CE_READY" />
            <variable citdl="{String}" doc="The delimiter uesed between the data type and the data." name="DELIMITER" />
            <variable citdl="{Object}" doc="The configuration of the engine." name="_cfg" />
            <variable citdl="{String}" doc="This engine singleton has been initialized already." name="isReady" />
          </scope>
          <scope doc="The StorageEngineGears class implements the Google Gears storage engine." ilk="class" name="StorageEngineGears">
            <scope attributes="__ctor__" doc="The StorageEngineGears class implements the Google Gears storage engine." ilk="function" name="StorageEngineGears" signature="StorageEngineGears(location, conf)">
              <variable citdl="String" doc="Required. The storage location." ilk="argument" name="location" />
              <variable citdl="Object" doc="Required. A configuration object." ilk="argument" name="conf" />
            </scope>
          </scope>
          <scope doc="The StorageEngineHTML5 class implements the HTML5 storage engine." ilk="class" name="StorageEngineHTML5">
            <scope attributes="__ctor__" doc="The StorageEngineHTML5 class implements the HTML5 storage engine." ilk="function" name="StorageEngineHTML5" signature="StorageEngineHTML5(location, conf)">
              <variable citdl="String" doc="Required. The storage location." ilk="argument" name="location" />
              <variable citdl="Object" doc="Required. A configuration object." ilk="argument" name="conf" />
            </scope>
          </scope>
          <scope doc="The StorageEngineKeyed class implements the interface necessary for managing keys." ilk="class" name="StorageEngineKeyed">
            <scope attributes="__ctor__" doc="The StorageEngineKeyed class implements the interface necessary for managing keys." ilk="function" name="StorageEngineKeyed" signature="StorageEngineKeyed()" />
            <scope doc="Evaluates if a key exists in the keys array; indexOf does not work in all flavors of IE." ilk="function" name="_indexOfKey" signature="_indexOfKey(key)">
              <variable citdl="String" doc="Required. The key to evaluate." ilk="argument" name="key" />
            </scope>
            <scope doc="Adds the key to the set." ilk="function" name="_addKey" signature="_addKey(key)">
              <variable citdl="String" doc="Required. The key to evaluate." ilk="argument" name="key" />
            </scope>
            <scope doc="Removes a key from the keys array." ilk="function" name="_removeKey" signature="_removeKey(key)">
              <variable citdl="String" doc="Required. The key to remove." ilk="argument" name="key" />
            </scope>
            <variable citdl="{Object}" doc="A map of keys to their applicable position in keys array. This should never be edited by the developer." name="_keyMap" />
            <variable citdl="{Array}" doc="A collection of keys applicable to the current location. This should never be edited by the developer." name="_keys" />
          </scope>
          <scope doc="The StorageEngineSWF class implements the SWF storage engine." ilk="class" name="StorageEngineSWF">
            <scope attributes="__ctor__" doc="The StorageEngineSWF class implements the SWF storage engine." ilk="function" name="StorageEngineSWF" signature="StorageEngineSWF(location, conf)">
              <variable citdl="String" doc="Required. The storage location." ilk="argument" name="location" />
              <variable citdl="Object" doc="Required. A configuration object." ilk="argument" name="conf" />
            </scope>
            <variable citdl="{Object}" doc="The underlying SWF of the engine, exposed so developers can modify the adapter behavior." name="_swf" />
          </scope>
          <scope doc="The StorageEvent class manages the storage events by emulating the HTML 5 implementation." ilk="class" name="StorageEvent">
            <scope attributes="__ctor__" doc="The StorageEvent class manages the storage events by emulating the HTML 5 implementation." ilk="function" name="StorageEvent" signature="StorageEvent(storageArea, key, oldValue, newValue, type)">
              <variable citdl="Object" doc="Required. The Storage object that was affected." ilk="argument" name="storageArea" />
              <variable citdl="String" doc="Required. The key being changed; DOMString in HTML 5 spec." ilk="argument" name="key" />
              <variable citdl="String" doc="Required. The old value of the key being changed; DOMString in HTML 5 spec." ilk="argument" name="oldValue" />
              <variable citdl="String" doc="Required. The new value of the key being changed; DOMString in HTML 5 spec." ilk="argument" name="newValue" />
              <variable citdl="String" doc="Required. The storage event type." ilk="argument" name="type" />
            </scope>
            <variable citdl="{String}" doc="The &apos;key&apos; attribute represents the key being changed." name="key" />
            <variable citdl="{String}" doc="The &apos;url&apos; attribute represents the address of the document whose key changed." name="url" />
            <variable citdl="{Object}" doc="The &apos;source&apos; attribute represents the WindowProxy object of the browsing context of the document whose key changed." name="source" />
            <variable citdl="{Object}" doc="The &apos;storageArea&apos; attribute represents the Storage object that was affected." name="storageArea" />
            <variable citdl="{String}" doc="The &apos;oldValue&apos; attribute represents the old value of the key being changed." name="oldValue" />
            <variable citdl="{Object}" doc="The &apos;type&apos; attribute represents the Storage event type." name="type" />
            <variable citdl="{String}" doc="The &apos;newValue&apos; attribute represents the new value of the key being changed." name="newValue" />
          </scope>
          <scope doc="The StorageManager class is a singleton that registers DataStorage objects and returns instances of those objects." ilk="namespace" name="StorageManager">
            <scope doc="Fetches the storage engine from the cache, or creates and caches it." ilk="function" name="_getStorageEngine" signature="_getStorageEngine(location, klass, conf)">
              <variable citdl="String" doc="Required. The location to store." ilk="argument" name="location" />
              <variable citdl="Function" doc="Required. A pointer to the engineType Class." ilk="argument" name="klass" />
              <variable citdl="Object" doc="Optional. Additional configuration for the data source engine." ilk="argument" name="conf" />
            </scope>
            <scope doc="Fetches a storage constructor if it is available, otherwise returns NULL." ilk="function" name="_getClass" signature="_getClass(klass) =&gt; Function">
              <variable citdl="Function" doc="Required. The storage constructor to test." ilk="argument" name="klass" />
            </scope>
            <scope doc="Registers a engineType Class with the StorageManager singleton; first in is the first out." ilk="function" name="register" signature="register(engineConstructor) =&gt; Boolean">
              <variable citdl="Function" doc="Required. The engine constructor function, see engines." ilk="argument" name="engineConstructor" />
            </scope>
            <scope doc="Ensures that the location is valid before returning it or a default value." ilk="function" name="_getValidLocation" signature="_getValidLocation(location)">
              <variable citdl="String" doc="Required. The location to evaluate." ilk="argument" name="location" />
            </scope>
            <scope doc="Fetches the desired engine type or first available engine type." ilk="function" name="get" signature="get(engineType, location, conf)">
              <variable citdl="String" doc="Optional. The engine type, see engines." ilk="argument" name="engineType" />
              <variable citdl="String" doc="Optional. The storage location - LOCATION_SESSION &amp; LOCATION_LOCAL; default is LOCAL." ilk="argument" name="location" />
              <variable citdl="Object} Optional. Additional configuration for the getting the storage engine.&#xA;{&#xA;engine: {Object} configuration parameters for the desired engine&#xA;order: {Array} an array of storage engine names; the desired order to try engines}&#xA;" ilk="argument" name="conf" />
            </scope>
            <variable citdl="{String}" doc="The storage location - session; data cleared at the end of a user&apos;s session." name="LOCATION_SESSION" />
            <variable citdl="{String}" doc="The storage location - local; data cleared on demand." name="LOCATION_LOCAL" />
          </scope>
          <scope doc="Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.&#xA;The constructor can be called using function or constructor syntax.&#xA;&lt;pre&gt;&lt;code&gt;var sheet = YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;&#xA;or&#xA;&lt;pre&gt;&lt;code&gt;var sheet = new YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;&#xA;The first parameter passed can be any of the following things:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The desired string name to register a new empty sheet&lt;/li&gt;&#xA;&lt;li&gt;The string name of an existing YAHOO.util.StyleSheet instance&lt;/li&gt;&#xA;&lt;li&gt;The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance&lt;/li&gt;&#xA;&lt;li&gt;The id of an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;&#xA;&lt;li&gt;The node reference for an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;&#xA;&lt;li&gt;A chunk of css text to create a new stylesheet from&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If a string is passed, StyleSheet will first look in its static name&#xA;registry for an existing sheet, then in the DOM for an element with that id.&#xA;If neither are found and the string contains the { character, it will be&#xA;used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty&#xA;StyleSheet is created, assigned the string value as a name, and registered&#xA;statically by that name.&lt;/p&gt;&#xA;&lt;p&gt;The optional second parameter is a string name to register the sheet as.&#xA;This param is largely useful when providing a node id/ref or chunk of css&#xA;text to create a populated instance.&lt;/p&gt;" ilk="class" name="StyleSheet">
            <scope attributes="__ctor__" doc="Create an instance of YAHOO.util.StyleSheet to encapsulate a css stylesheet.&#xA;The constructor can be called using function or constructor syntax.&#xA;&lt;pre&gt;&lt;code&gt;var sheet = YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;&#xA;or&#xA;&lt;pre&gt;&lt;code&gt;var sheet = new YAHOO.util.StyleSheet(..);&lt;/pre&gt;&lt;/code&gt;&#xA;The first parameter passed can be any of the following things:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The desired string name to register a new empty sheet&lt;/li&gt;&#xA;&lt;li&gt;The string name of an existing YAHOO.util.StyleSheet instance&lt;/li&gt;&#xA;&lt;li&gt;The unique yuiSSID generated for an existing YAHOO.util.StyleSheet instance&lt;/li&gt;&#xA;&lt;li&gt;The id of an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;&#xA;&lt;li&gt;The node reference for an existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; node&lt;/li&gt;&#xA;&lt;li&gt;A chunk of css text to create a new stylesheet from&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;If a string is passed, StyleSheet will first look in its static name&#xA;registry for an existing sheet, then in the DOM for an element with that id.&#xA;If neither are found and the string contains the { character, it will be&#xA;used as a the initial cssText for a new StyleSheet.  Otherwise, a new empty&#xA;StyleSheet is created, assigned the string value as a name, and registered&#xA;statically by that name.&lt;/p&gt;&#xA;&lt;p&gt;The optional second parameter is a string name to register the sheet as.&#xA;This param is largely useful when providing a node id/ref or chunk of css&#xA;text to create a populated instance.&lt;/p&gt;" ilk="function" name="StyleSheet" signature="StyleSheet(seed, name)">
              <variable citdl="String|HTMLElement" doc="a style or link node, its id, or a name or&#xA;yuiSSID of a StyleSheet, or a string of css text (see above)" ilk="argument" name="seed" />
              <variable citdl="String" doc="OPTIONAL name to register instance for future static&#xA;access" ilk="argument" name="name" />
            </scope>
            <scope doc="Enable all the rules in the sheet" ilk="function" name="enable" signature="enable() =&gt; StyleSheet" />
            <scope doc="&lt;p&gt;Set style properties for a provided selector string.&#xA;If the selector includes commas, it will be split into individual&#xA;selectors and applied accordingly.  If the selector string does not&#xA;have a corresponding rule in the sheet, it will be added.&lt;/p&gt;&#xA;&lt;p&gt;The second parameter can be either a string of CSS text,&#xA;formatted as CSS (&quot;font-size: 10px;&quot;), or an object collection of&#xA;properties and their new values.  Object properties must be in&#xA;JavaScript format ({ fontSize: &quot;10px&quot; }).&lt;/p&gt;&#xA;&lt;p&gt;The float style property will be set by any of &amp;quot;float&amp;quot;,&#xA;&amp;quot;styleFloat&amp;quot;, or &amp;quot;cssFloat&amp;quot; if passed in the&#xA;object map.  Use &quot;float: left;&quot; format when passing a CSS text&#xA;string.&lt;/p&gt;" ilk="function" name="set" signature="set(sel, css) =&gt; StyleSheet">
              <variable citdl="String" doc="the selector string to apply the changes to" ilk="argument" name="sel" />
              <variable citdl="Object|String" doc="Object literal of style properties and&#xA;new values, or a string of cssText" ilk="argument" name="css" />
            </scope>
            <scope doc="&lt;p&gt;Determines if a selector string is safe to use.  Used internally&#xA;in set to prevent IE from locking up when attempting to add a rule for a&#xA;&amp;quot;bad selector&amp;quot;.&lt;/p&gt;&#xA;&lt;p&gt;Bad selectors are considered to be any string containing unescaped&#xA;`~!@$%^&amp;()+=|{}[];&apos;&quot;?&lt; or space. Also forbidden are . or # followed by&#xA;anything other than an alphanumeric.  Additionally -abc or .-abc or&#xA;#_abc or &apos;# &apos; all fail.  There are likely more failure cases, so&#xA;please file a bug if you encounter one.&lt;/p&gt;" ilk="function" name="StyleSheet.isValidSelector" signature="StyleSheet.isValidSelector(sel) =&gt; Boolean">
              <variable citdl="String" doc="the selector string" ilk="argument" name="sel" />
            </scope>
            <scope doc="Returns boolean indicating whether the StyleSheet is enabled" ilk="function" name="isEnabled" signature="isEnabled() =&gt; Boolean" />
            <scope doc="Get the unique yuiSSID for this StyleSheet instance" ilk="function" name="getId" signature="getId() =&gt; Number" />
            <scope doc="Disable all the rules in the sheet.  Rules may be changed while the&#xA;StyleSheet is disabled." ilk="function" name="disable" signature="disable() =&gt; StyleSheet" />
            <scope doc="&lt;p&gt;Unset style properties for a provided selector string, removing&#xA;their effect from the style cascade.&lt;/p&gt;&#xA;&lt;p&gt;If the selector includes commas, it will be split into individual&#xA;selectors and applied accordingly.  If there are no properties&#xA;remaining in the rule after unsetting, the rule is removed.&lt;/p&gt;&#xA;&lt;p&gt;The style property or properties in the second parameter must be the&#xA;&lt;p&gt;JavaScript style property names. E.g. fontSize rather than font-size.&lt;/p&gt;&#xA;&lt;p&gt;The float style property will be unset by any of &amp;quot;float&amp;quot;,&#xA;&amp;quot;styleFloat&amp;quot;, or &amp;quot;cssFloat&amp;quot;.&lt;/p&gt;" ilk="function" name="unset" signature="unset(sel, css) =&gt; StyleSheet">
              <variable citdl="String" doc="the selector string to apply the changes to" ilk="argument" name="sel" />
              <variable citdl="String|Array" doc="style property name or Array of names" ilk="argument" name="css" />
            </scope>
            <scope doc="Registers a StyleSheet instance in the static registry by the given name" ilk="function" name="StyleSheet.register" signature="StyleSheet.register(name, sheet) =&gt; Boolean">
              <variable citdl="String" doc="the name to assign the StyleSheet in the registry" ilk="argument" name="name" />
              <variable citdl="StyleSheet" doc="The StyleSheet instance" ilk="argument" name="sheet" />
            </scope>
            <scope doc="Get the current cssText for a rule or the entire sheet.  If the&#xA;selector param is supplied, only the cssText for that rule will be&#xA;returned, if found.  If the selector string targets multiple&#xA;selectors separated by commas, the cssText of the first rule only&#xA;will be returned.  If no selector string, the stylesheet&apos;s full&#xA;cssText will be returned." ilk="function" name="getCssText" signature="getCssText(sel) =&gt; String">
              <variable citdl="String" doc="Selector string" ilk="argument" name="sel" />
            </scope>
            <scope doc="&lt;p&gt;Converts an object literal of style properties and values into a string&#xA;of css text.  This can then be assigned to el.style.cssText.&lt;/p&gt;&#xA;&lt;p&gt;The optional second parameter is a cssText string representing the&#xA;starting state of the style prior to alterations.  This is most often&#xA;extracted from the eventual target&apos;s current el.style.cssText.&lt;/p&gt;" ilk="function" name="StyleSheet.toCssText" signature="StyleSheet.toCssText(css, cssText) =&gt; String">
              <variable citdl="Object" doc="object literal of style properties and values" ilk="argument" name="css" />
              <variable citdl="String" doc="OPTIONAL starting cssText value" ilk="argument" name="cssText" />
            </scope>
            <variable citdl="HTMLElement" doc="The HTMLElement that this instance encapsulates" name="node" />
          </scope>
          <scope doc="Stores the subscriber information to be used when the event fires." ilk="class" name="Subscriber">
            <scope attributes="__ctor__" doc="Stores the subscriber information to be used when the event fires." ilk="function" name="Subscriber" signature="Subscriber(fn, obj, overrideContext)">
              <variable citdl="Function" doc="The function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="An object to be passed along when the event fires" ilk="argument" name="obj" />
              <variable citdl="boolean" doc="If true, the obj passed in becomes the execution&#xA;context of the listener" ilk="argument" name="overrideContext" />
            </scope>
            <scope doc="Returns the execution context for this listener.  If overrideContext was set to true&#xA;the custom obj will be the context.  If overrideContext is an object, that is the&#xA;context, otherwise the default context will be used." ilk="function" name="getScope" signature="getScope(defaultScope)">
              <variable citdl="Object" doc="the context to use if this listener does not&#xA;override it." ilk="argument" name="defaultScope" />
            </scope>
            <scope doc="Returns true if the fn and obj match this objects properties.&#xA;Used by the unsubscribe method to match the right subscriber." ilk="function" name="contains" signature="contains(fn, obj) =&gt; boolean">
              <variable citdl="Function" doc="the function to execute" ilk="argument" name="fn" />
              <variable citdl="Object" doc="an object to be passed along when the event fires" ilk="argument" name="obj" />
            </scope>
            <scope doc="" ilk="function" name="toString" signature="toString()" />
            <variable citdl="object" doc="An optional custom object that will passed to the callback when&#xA;the event fires" name="obj" />
            <variable citdl="function" doc="The callback that will be execute when the event fires" name="fn" />
            <variable citdl="boolean|object" doc="The default execution context for the event listener is defined when the&#xA;event is created (usually the object which contains the event).&#xA;By setting overrideContext to true, the execution context becomes the custom&#xA;object passed in by the subscriber.  If overrideContext is an object, that &#xA;object becomes the context." name="overrideContext" />
          </scope>
          <scope classrefs="YAHOO.util.AssertionError" doc="UnexpectedError is subclass of AssertionError that is thrown whenever&#xA;an error occurs within the course of a test and the test was not expected&#xA;to throw an error." ilk="class" name="UnexpectedError">
            <scope attributes="__ctor__" doc="UnexpectedError is subclass of AssertionError that is thrown whenever&#xA;an error occurs within the course of a test and the test was not expected&#xA;to throw an error." ilk="function" name="UnexpectedError" signature="UnexpectedError(cause)">
              <variable citdl="Error" doc="The unexpected error that caused this error to be &#xA;thrown." ilk="argument" name="cause" />
            </scope>
            <variable citdl="Error" doc="The unexpected error that occurred." name="cause" />
            <variable citdl="String" doc="The name of the error that occurred." name="name" />
            <variable citdl="String" doc="Stack information for the error (if provided)." name="stack" />
          </scope>
          <scope classrefs="YAHOO.util.AssertionError" doc="UnexpectedValue is subclass of AssertionError that is thrown whenever&#xA;a value was unexpected in its scope. This typically means that a test&#xA;was performed to determine that a value was *not* equal to a certain&#xA;value." ilk="class" name="UnexpectedValue">
            <scope attributes="__ctor__" doc="UnexpectedValue is subclass of AssertionError that is thrown whenever&#xA;a value was unexpected in its scope. This typically means that a test&#xA;was performed to determine that a value was *not* equal to a certain&#xA;value." ilk="function" name="UnexpectedValue" signature="UnexpectedValue(message, unexpected)">
              <variable citdl="String" doc="The message to display when the error occurs." ilk="argument" name="message" />
              <variable citdl="Object" doc="The unexpected value." ilk="argument" name="unexpected" />
            </scope>
            <scope doc="Returns a fully formatted error for an assertion failure. The message&#xA;contains information about the unexpected value that was encountered." ilk="function" name="getMessage" signature="getMessage() =&gt; String" />
            <variable citdl="Object" doc="The unexpected value." name="unexpected" />
            <variable citdl="String" doc="The name of the error that occurred." name="name" />
          </scope>
          <scope doc="The UserAction object provides functions that simulate events occurring in&#xA;the browser. Since these are simulated events, they do not behave exactly&#xA;as regular, user-initiated events do, but can be used to test simple&#xA;user interactions safely." ilk="namespace" name="UserAction">
            <scope doc="Fires an event that normally would be fired by the keyboard (keyup,&#xA;keydown, keypress). Make sure to specify either keyCode or charCode as&#xA;an option." ilk="function" name="fireKeyEvent" signature="fireKeyEvent(type, target, options)">
              <variable citdl="String" doc="The type of event (&quot;keyup&quot;, &quot;keydown&quot; or &quot;keypress&quot;)." ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="The target of the event." ilk="argument" name="target" />
              <variable citdl="Object" doc="Options for the event. Either keyCode or charCode&#xA;are required." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a mouse event on a particular element." ilk="function" name="mouseEvent" signature="mouseEvent(target, type, options)">
              <variable citdl="HTMLElement" doc="The element to click on." ilk="argument" name="target" />
              <variable citdl="String" doc="The type of event to fire. This can be any one of&#xA;the following: click, dblclick, mousedown, mouseup, mouseout,&#xA;mouseover, and mousemove." ilk="argument" name="type" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a keypress on a particular element." ilk="function" name="keypress" signature="keypress(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a keyup event on a particular element." ilk="function" name="keyup" signature="keyup(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a mouseup on a particular element." ilk="function" name="mouseup" signature="mouseup(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a keydown event on a particular element." ilk="function" name="keydown" signature="keydown(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a mousemove on a particular element." ilk="function" name="mousemove" signature="mousemove(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a mouse event using the given event information to populate&#xA;the generated event object. This method does browser-equalizing&#xA;calculations to account for differences in the DOM and IE event models&#xA;as well as different browser quirks." ilk="function" name="simulateMouseEvent" signature="simulateMouseEvent(target, type, bubbles, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget)">
              <variable citdl="HTMLElement" doc="The target of the given event." ilk="argument" name="target" />
              <variable citdl="String" doc="The type of event to fire. This can be any one of&#xA;the following: click, dblclick, mousedown, mouseup, mouseout,&#xA;mouseover, and mousemove." ilk="argument" name="type" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;bubbled up. DOM Level 2 specifies that all mouse events bubble by&#xA;default. The default is true." ilk="argument" name="bubbles" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;canceled using preventDefault(). DOM Level 2 specifies that all&#xA;mouse events except mousemove can be cancelled. The default &#xA;is true for all events except mousemove, for which the default &#xA;is false." ilk="argument" name="cancelable" />
              <variable citdl="Window" doc="(Optional) The view containing the target. This is&#xA;typically the window object. The default is window." ilk="argument" name="view" />
              <variable citdl="int" doc="(Optional) The number of times the mouse button has&#xA;been used. The default value is 1." ilk="argument" name="detail" />
              <variable citdl="int" doc="(Optional) The x-coordinate on the screen at which&#xA;point the event occured. The default is 0." ilk="argument" name="screenX" />
              <variable citdl="int" doc="(Optional) The y-coordinate on the screen at which&#xA;point the event occured. The default is 0." ilk="argument" name="screenY" />
              <variable citdl="int" doc="(Optional) The x-coordinate on the client at which&#xA;point the event occured. The default is 0." ilk="argument" name="clientX" />
              <variable citdl="int" doc="(Optional) The y-coordinate on the client at which&#xA;point the event occured. The default is 0." ilk="argument" name="clientY" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the CTRL keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="ctrlKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the ALT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="altKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the SHIFT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="shiftKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the META keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="metaKey" />
              <variable citdl="int" doc="(Optional) The button being pressed while the event&#xA;is executing. The value should be 0 for the primary mouse button&#xA;(typically the left button), 1 for the terciary mouse button&#xA;(typically the middle button), and 2 for the secondary mouse button&#xA;(typically the right button). The default is 0." ilk="argument" name="button" />
              <variable citdl="HTMLElement" doc="(Optional) For mouseout events,&#xA;this is the element that the mouse has moved to. For mouseover&#xA;events, this is the element that the mouse has moved from. This&#xA;argument is ignored for all other events. The default is null." ilk="argument" name="relatedTarget" />
            </scope>
            <scope doc="Simulates a mousedown on a particular element." ilk="function" name="mousedown" signature="mousedown(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a mouseout event on a particular element. Use &quot;relatedTarget&quot;&#xA;on the options object to specify where the mouse moved to.&#xA;Quirks: Firefox less than 2.0 doesn&apos;t set relatedTarget properly, so&#xA;toElement is assigned in its place. IE doesn&apos;t allow toElement to be&#xA;be assigned, so relatedTarget is assigned in its place. Both of these&#xA;concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly&#xA;in both browsers." ilk="function" name="mouseout" signature="mouseout(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a key event using the given event information to populate&#xA;the generated event object. This method does browser-equalizing&#xA;calculations to account for differences in the DOM and IE event models&#xA;as well as different browser quirks. Note: keydown causes Safari 2.x to&#xA;crash." ilk="function" name="simulateKeyEvent" signature="simulateKeyEvent(target, type, bubbles, cancelable, view, ctrlKey, altKey, shiftKey, metaKey, keyCode, charCode)">
              <variable citdl="HTMLElement" doc="The target of the given event." ilk="argument" name="target" />
              <variable citdl="String" doc="The type of event to fire. This can be any one of&#xA;the following: keyup, keydown, and keypress." ilk="argument" name="type" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;bubbled up. DOM Level 3 specifies that all key events bubble by&#xA;default. The default is true." ilk="argument" name="bubbles" />
              <variable citdl="Boolean" doc="(Optional) Indicates if the event can be&#xA;canceled using preventDefault(). DOM Level 3 specifies that all&#xA;key events can be cancelled. The default &#xA;is true." ilk="argument" name="cancelable" />
              <variable citdl="Window" doc="(Optional) The view containing the target. This is&#xA;typically the window object. The default is window." ilk="argument" name="view" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the CTRL keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="ctrlKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the ALT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="altKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the SHIFT keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="shiftKey" />
              <variable citdl="Boolean" doc="(Optional) Indicates if one of the META keys&#xA;is pressed while the event is firing. The default is false." ilk="argument" name="metaKey" />
              <variable citdl="int" doc="(Optional) The code for the key that is in use. &#xA;The default is 0." ilk="argument" name="keyCode" />
              <variable citdl="int" doc="(Optional) The Unicode code for the character&#xA;associated with the key being used. The default is 0." ilk="argument" name="charCode" />
            </scope>
            <scope doc="Simulates a mouseover event on a particular element. Use &quot;relatedTarget&quot;&#xA;on the options object to specify where the mouse moved from.&#xA;Quirks: Firefox less than 2.0 doesn&apos;t set relatedTarget properly, so&#xA;fromElement is assigned in its place. IE doesn&apos;t allow fromElement to be&#xA;be assigned, so relatedTarget is assigned in its place. Both of these&#xA;concessions allow YAHOO.util.Event.getRelatedTarget() to work correctly&#xA;in both browsers." ilk="function" name="mouseover" signature="mouseover(target, options)">
              <variable citdl="HTMLElement" doc="The element to act on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a click on a particular element." ilk="function" name="click" signature="click(target, options)">
              <variable citdl="HTMLElement" doc="The element to click on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
            <scope doc="Simulates a double click on a particular element." ilk="function" name="dblclick" signature="dblclick(target, options)">
              <variable citdl="HTMLElement" doc="The element to double click on." ilk="argument" name="target" />
              <variable citdl="Object" doc="Additional event options (use DOM standard names)." ilk="argument" name="options" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.DataSourceBase" doc="XHRDataSource class for accessing remote data via the YUI Connection Manager&#xA;Utility" ilk="class" name="XHRDataSource">
            <scope attributes="__ctor__" doc="XHRDataSource class for accessing remote data via the YUI Connection Manager&#xA;Utility" ilk="function" name="XHRDataSource" signature="XHRDataSource(oLiveData, oConfigs)">
              <variable citdl="HTMLElement" doc="Pointer to live data." ilk="argument" name="oLiveData" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Define Connection Manager failure handler" ilk="function" name="_xhrFailure" signature="_xhrFailure(oResponse)">
              <variable citdl="Object" doc="HTTPXMLRequest object" ilk="argument" name="oResponse" />
            </scope>
            <scope doc="Define Connection Manager success handler" ilk="function" name="_xhrSuccess" signature="_xhrSuccess(oResponse)">
              <variable citdl="Object" doc="HTTPXMLRequest object" ilk="argument" name="oResponse" />
            </scope>
            <scope doc="Overriding method passes query to Connection Manager. The returned&#xA;response is then forwarded to the handleResponse function." ilk="function" name="makeConnection" signature="makeConnection(oRequest, oCallback, oCaller) =&gt; Number">
              <variable citdl="Object" doc="Request object." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Callback object literal." ilk="argument" name="oCallback" />
              <variable citdl="Object" doc="(deprecated) Use oCallback.scope." ilk="argument" name="oCaller" />
            </scope>
            <variable citdl="Number" doc="The connection timeout defines how many  milliseconds the XHR connection will&#xA;wait for a server response. Any non-zero value will enable the Connection Manager&apos;s&#xA;Auto-Abort feature." name="connTimeout" />
            <variable citdl="Boolean" doc="True if data is to be sent via POST. By default, data will be sent via GET." name="connMethodPost" />
            <variable citdl="String" doc="Defines request/response management in the following manner:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;queueRequests&lt;/dt&gt;&#xA;&lt;dd&gt;If a request is already in progress, wait until response is returned&#xA;before sending the next request.&lt;/dd&gt;&#xA;&lt;dt&gt;cancelStaleRequests&lt;/dt&gt;&#xA;&lt;dd&gt;If a request is already in progress, cancel it before sending the next&#xA;request.&lt;/dd&gt;&#xA;&lt;dt&gt;ignoreStaleResponses&lt;/dt&gt;&#xA;&lt;dd&gt;Send all requests, but handle only the response for the most recently&#xA;sent request.&lt;/dd&gt;&#xA;&lt;dt&gt;allowAll&lt;/dt&gt;&#xA;&lt;dd&gt;Send all requests and handle all responses.&lt;/dd&gt;&#xA;&lt;/dl&gt;" name="connXhrMode" />
            <variable doc="Define Connection Manager callback object" name="_xhrCallback" />
            <variable citdl="Object" doc="Alias to YUI Connection Manager, to allow implementers to use a custom class." name="connMgr" />
          </scope>
          <scope doc="YUILoader provides dynamic loading for YUI." ilk="namespace" name="YUILoader">
            <scope doc="In IE, the onAvailable/onDOMReady events need help when Event is&#xA;loaded dynamically" ilk="function" name="_pushEvents" signature="_pushEvents(optional)">
              <variable citdl="Function" doc="function reference" ilk="argument" name="optional" />
            </scope>
            <scope doc="Returns an object containing properties for all modules required&#xA;in order to load the requested module" ilk="function" name="getRequires" signature="getRequires(mod)">
              <variable doc="The module definition from moduleInfo" ilk="argument" name="mod" />
            </scope>
            <scope doc="Returns the skin module name for the specified skin name.  If a&#xA;module name is supplied, the returned skin module name is &#xA;specific to the module passed in." ilk="function" name="formatSkin" signature="formatSkin(skin, mod) =&gt; string">
              <variable citdl="string" doc="the name of the skin" ilk="argument" name="skin" />
              <variable citdl="string" doc="optional: the name of a module to skin" ilk="argument" name="mod" />
            </scope>
            <scope doc="Callback that will be executed if a timeout occurs" ilk="function" name="onTimeout" signature="onTimeout()" />
            <scope doc="Returns an object literal of the modules the supplied module satisfies" ilk="function" name="getProvides" signature="getProvides(name, notMe) =&gt; ">
              <variable citdl="string" doc="The name of the module" ilk="argument" name="name" />
              <variable citdl="string" doc="don&apos;t add this module name, only include superseded modules" ilk="argument" name="notMe" />
            </scope>
            <scope doc="Remove superceded modules and loaded modules.  Called by&#xA;calculate() after we have the mega list of all dependencies" ilk="function" name="_reduce" signature="_reduce()" />
            <scope doc="Calculates the dependency tree, the result is stored in the sorted &#xA;property" ilk="function" name="calculate" signature="calculate(o)">
              <variable doc="optional options object" ilk="argument" name="o" />
            </scope>
            <scope doc="Applies filter&#xA;method _filter" ilk="function" name="_filter" signature="_filter() =&gt; string" />
            <scope doc="Adds the skin def to the module info" ilk="function" name="_addSkin" signature="_addSkin(skin, mod) =&gt; string">
              <variable citdl="string" doc="the name of the skin" ilk="argument" name="skin" />
              <variable citdl="string" doc="the name of the module" ilk="argument" name="mod" />
            </scope>
            <scope doc="Inspects the required modules list looking for additional &#xA;dependencies.  Expands the required list to include all &#xA;required modules.  Called by calculate()" ilk="function" name="_explode" signature="_explode()" />
            <scope doc="Callback that will be executed each time a new module is loaded" ilk="function" name="onProgress" signature="onProgress()" />
            <scope doc="Reverses &lt;code&gt;formatSkin&lt;/code&gt;, providing the skin name and&#xA;module name if the string matches the pattern for skins." ilk="function" name="parseSkin" signature="parseSkin(mod) =&gt; skin: string, module: string">
              <variable citdl="string" doc="the module name to parse" ilk="argument" name="mod" />
            </scope>
            <scope doc="Add a new module to the component metadata.         &#xA;&lt;dl&gt;&#xA;&lt;dt&gt;name:&lt;/dt&gt;       &lt;dd&gt;required, the component name&lt;/dd&gt;&#xA;&lt;dt&gt;type:&lt;/dt&gt;       &lt;dd&gt;required, the component type (js or css)&lt;/dd&gt;&#xA;&lt;dt&gt;path:&lt;/dt&gt;       &lt;dd&gt;required, the path to the script from &quot;base&quot;&lt;/dd&gt;&#xA;&lt;dt&gt;requires:&lt;/dt&gt;   &lt;dd&gt;array of modules required by this component&lt;/dd&gt;&#xA;&lt;dt&gt;optional:&lt;/dt&gt;   &lt;dd&gt;array of optional modules for this component&lt;/dd&gt;&#xA;&lt;dt&gt;supersedes:&lt;/dt&gt; &lt;dd&gt;array of the modules this component replaces&lt;/dd&gt;&#xA;&lt;dt&gt;after:&lt;/dt&gt;      &lt;dd&gt;array of modules the components which, if present, should be sorted above this one&lt;/dd&gt;&#xA;&lt;dt&gt;rollup:&lt;/dt&gt;     &lt;dd&gt;the number of superseded modules required for automatic rollup&lt;/dd&gt;&#xA;&lt;dt&gt;fullpath:&lt;/dt&gt;   &lt;dd&gt;If fullpath is specified, this is used instead of the configured base + path&lt;/dd&gt;&#xA;&lt;dt&gt;skinnable:&lt;/dt&gt;  &lt;dd&gt;flag to determine if skin assets should automatically be pulled in&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" name="addModule" signature="addModule(o) =&gt; boolean">
              <variable doc="An object containing the module data" ilk="argument" name="o" />
            </scope>
            <scope doc="Executed every time a module is loaded, and if we are in a load&#xA;cycle, we attempt to load the next script.  Public so that it&#xA;is possible to call this if using a method other than&#xA;YAHOO.register to determine when scripts are fully loaded" ilk="function" name="loadNext" signature="loadNext(mname)">
              <variable citdl="string" doc="optional the name of the module that has&#xA;been loaded (which is usually why it is time to load the next&#xA;one)" ilk="argument" name="mname" />
            </scope>
            <scope doc="Look for rollup packages to determine if all of the modules a&#xA;rollup supersedes are required.  If so, include the rollup to&#xA;help reduce the total number of connections required.  Called&#xA;by calculate()" ilk="function" name="_rollup" signature="_rollup()" />
            <scope doc="inserts the requested modules and their dependencies.  &#xA;&lt;code&gt;type&lt;/code&gt; can be &quot;js&quot; or &quot;css&quot;.  Both script and &#xA;css are inserted if type is not provided." ilk="function" name="insert" signature="insert(o, type)">
              <variable doc="optional options object" ilk="argument" name="o" />
              <variable citdl="string" doc="the type of dependency to insert" ilk="argument" name="type" />
            </scope>
            <scope doc="Callback that will be executed if there is a failure" ilk="function" name="onFailure" signature="onFailure()" />
            <scope doc="Sorts the dependency tree.  The last step of calculate()" ilk="function" name="_sort" signature="_sort()" />
            <scope doc="Add a requirement for one or more module" ilk="function" name="require" signature="require(what)">
              <variable citdl="string[] | string*" doc="the modules to load" ilk="argument" name="what" />
            </scope>
            <scope doc="Investigates the current YUI configuration on the page.  By default,&#xA;modules already detected will not be loaded again unless a force&#xA;option is encountered.  Called by calculate()" ilk="function" name="_setup" signature="_setup()" />
            <scope doc="Callback that will be executed when the loader is finished&#xA;with an insert" ilk="function" name="onSuccess" signature="onSuccess()" />
            <scope doc="Interns the script for the requested modules.  The callback is&#xA;provided a reference to the sandboxed YAHOO object.  This only&#xA;applies to the script: css can not be sandboxed; css will be&#xA;loaded into the page normally if specified." ilk="function" name="sandbox" signature="sandbox(callback)">
              <variable citdl="Function" doc="the callback to exectued when the load is&#xA;complete." ilk="argument" name="callback" />
            </scope>
            <scope doc="Generates the full url for a module&#xA;method _url" ilk="function" name="_url" signature="_url(path) =&gt; string">
              <variable citdl="string" doc="the path fragment" ilk="argument" name="path" />
            </scope>
            <variable citdl="string[]" doc="A list of modules that should always be loaded, even&#xA;if they have already been inserted into the page." name="force" />
            <variable citdl="string" doc="The name of the variable in a sandbox or script node &#xA;(for external script support in Safari 2.x and earlier)&#xA;to reference when the load is complete.  If this variable &#xA;is not available in the specified scripts, the operation will &#xA;fail." name="varName" />
            <variable doc="List of rollup files found in the library metadata" name="rollups" />
            <variable citdl="boolean" doc="Should we allow rollups" name="allowRollup" />
            <variable doc="Provides the information used to skin the skinnable components.&#xA;The following skin definition would result in &apos;skin1&apos; and &apos;skin2&apos;&#xA;being loaded for calendar (if calendar was requested), and&#xA;&apos;sam&apos; for all other skinnable components:&#xA;&lt;code&gt;&#xA;skin: {&#xA;// The default skin, which is automatically applied if not&#xA;// overriden by a component-specific skin definition.&#xA;// Change this in to apply a different skin globally&#xA;defaultSkin: &apos;sam&apos;, &#xA;// This is combined with the loader base property to get&#xA;// the default root directory for a skin. ex:&#xA;// http://yui.yahooapis.com/2.3.0/build/assets/skins/sam/&#xA;base: &apos;assets/skins/&apos;,&#xA;// The name of the rollup css file for the skin&#xA;path: &apos;skin.css&apos;,&#xA;// The number of skinnable components requested that are&#xA;// required before using the rollup file rather than the&#xA;// individual component css files&#xA;rollup: 3,&#xA;// Any component-specific overrides can be specified here,&#xA;// making it possible to load different skins for different&#xA;// components.  It is possible to load more than one skin&#xA;// for a given component as well.&#xA;overrides: {&#xA;calendar: [&apos;skin1&apos;, &apos;skin2&apos;]&#xA;}&#xA;}&#xA;&lt;/code&gt;" name="skin" />
            <variable citdl="{string: boolean}" doc="Set when beginning to compute the dependency tree. &#xA;Composed of what YAHOO reports to be loaded combined&#xA;with what has been loaded by the tool" name="loaded" />
            <variable doc="Internal callback to handle multiple internal insert() calls&#xA;so that css is inserted prior to js" name="_internalCallback" />
            <variable citdl="{string: boolean}" doc="List of modules inserted by the utility" name="inserted" />
            <variable citdl="string" doc="The charset attribute for inserted nodes" name="charset" />
            <variable citdl="boolean" doc="Whether or not to load optional dependencies for &#xA;the requested modules" name="loadOptional" />
            <variable citdl="boolean" doc="If configured, YUI will use the the combo handler on the&#xA;Yahoo! CDN to pontentially reduce the number of http requests&#xA;required." name="combine" />
            <variable doc="The library metadata" name="moduleInfo" />
            <variable doc="The execution scope for all callbacks" name="scope" />
            <variable citdl="string[]" doc="A list of modules that should not be loaded, even if&#xA;they turn up in the dependency tree" name="ignore" />
            <variable citdl="string" doc="Base path for the combo service" name="comboBase" />
            <variable citdl="string|HTMLElement" doc="Node reference or id where new nodes should be inserted before" name="insertBefore" />
            <variable citdl="string" doc="The base directory." name="base" />
            <variable citdl="string[]" doc="All of the derived dependencies in sorted order, which&#xA;will be populated when either calculate() or insert()&#xA;is called" name="sorted" />
            <variable doc="Data that is passed to all callbacks" name="data" />
            <variable doc="Use the YAHOO environment listener to detect script load.  This&#xA;is only switched on for Safari 2.x and below." name="_useYahooListener" />
            <variable citdl="{string: boolean}" doc="The list of requested modules" name="required" />
            <variable citdl="string|{searchExp: string, replaceStr: string}" doc="A filter to apply to result urls.  This filter will modify the default&#xA;path for all modules.  The default path for the YUI library is the&#xA;minified version of the files (e.g., event-min.js).  The filter property&#xA;can be a predefined filter or a custom filter.  The valid predefined &#xA;filters are:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;DEBUG&lt;/dt&gt;&#xA;&lt;dd&gt;Selects the debug versions of the library (e.g., event-debug.js).&#xA;This option will automatically include the logger widget&lt;/dd&gt;&#xA;&lt;dt&gt;RAW&lt;/dt&gt;&#xA;&lt;dd&gt;Selects the non-minified version of the library (e.g., event.js).&#xA;&lt;/dl&gt;&#xA;You can also define a custom filter, which must be an object literal &#xA;containing a search expression and a replace string:&#xA;&lt;pre&gt;&#xA;myFilter: &amp;#123; &#xA;&apos;searchExp&apos;: &quot;-min\\.js&quot;, &#xA;&apos;replaceStr&apos;: &quot;-debug.js&quot;&#xA;&amp;#125;&#xA;&lt;/pre&gt;" name="filter" />
            <variable citdl="boolean" doc="Flag to indicate the dependency tree needs to be recomputed&#xA;if insert is called again." name="dirty" />
            <variable citdl="int" doc="Timeout value in milliseconds.  If set, this value will be used by&#xA;the get utility.  the timeout event will fire if&#xA;a timeout occurs." name="timeout" />
            <variable citdl="string" doc="Root path to prepend to module path for the combo&#xA;service" name="root" />
          </scope>
        </scope>
        <scope ilk="namespace" name="widget">
          <scope doc="The AutoComplete class provides the customizable functionality of a plug-and-play DHTML&#xA;auto completion widget.  Some key features:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Navigate with up/down arrow keys and/or mouse to pick a selection&lt;/li&gt;&#xA;&lt;li&gt;The drop down container can &quot;roll down&quot; or &quot;fly out&quot; via configurable&#xA;animation&lt;/li&gt;&#xA;&lt;li&gt;UI look-and-feel customizable through CSS, including container&#xA;attributes, borders, position, fonts, etc&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="class" name="AutoComplete">
            <scope attributes="__ctor__" doc="The AutoComplete class provides the customizable functionality of a plug-and-play DHTML&#xA;auto completion widget.  Some key features:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Navigate with up/down arrow keys and/or mouse to pick a selection&lt;/li&gt;&#xA;&lt;li&gt;The drop down container can &quot;roll down&quot; or &quot;fly out&quot; via configurable&#xA;animation&lt;/li&gt;&#xA;&lt;li&gt;UI look-and-feel customizable through CSS, including container&#xA;attributes, borders, position, fonts, etc&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" name="AutoComplete" signature="AutoComplete(elInput, elInput, elContainer, elContainer, oDataSource, oConfigs)">
              <variable citdl="HTMLElement" doc="DOM element reference of an input field." ilk="argument" name="elInput" />
              <variable citdl="String" doc="String ID of an input field." ilk="argument" name="elInput" />
              <variable citdl="HTMLElement" doc="DOM element reference of an existing DIV." ilk="argument" name="elContainer" />
              <variable citdl="String" doc="String ID of an existing DIV." ilk="argument" name="elContainer" />
              <variable citdl="YAHOO.widget.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
              <variable citdl="Object" doc="(optional) Object literal of configuration params." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Handles textbox keypress events." ilk="function" name="_onTextboxKeyPress" signature="_onTextboxKeyPress(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keypress event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Selects text in the input field." ilk="function" name="_selectText" signature="_selectText(elTextbox, nStart, nEnd)">
              <variable citdl="HTMLElement" doc="Text input box element in which to select text." ilk="argument" name="elTextbox" />
              <variable citdl="Number" doc="Starting index of text string to select." ilk="argument" name="nStart" />
              <variable citdl="Number" doc="Ending index of text selection." ilk="argument" name="nEnd" />
            </scope>
            <scope doc="Snaps container to bottom-left corner of input element" ilk="function" name="snapContainer" signature="snapContainer()" />
            <scope doc="Initializes the results container once at object creation" ilk="function" name="_initContainerEl" signature="_initContainerEl()" />
            <scope doc="Cancels text input detection by intervals." ilk="function" name="_clearInterval" signature="_clearInterval(oSelf)">
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Populates the given &amp;lt;li&amp;gt; element with return value from formatResult()." ilk="function" name="_populateListItem" signature="_populateListItem(elListItem, oResult, sCurQuery)">
              <variable citdl="HTMLElement" doc="The LI element." ilk="argument" name="elListItem" />
              <variable citdl="Object" doc="The result object." ilk="argument" name="oResult" />
              <variable citdl="String" doc="The query string." ilk="argument" name="sCurQuery" />
            </scope>
            <scope doc="Clears out contents of container body and creates up to&#xA;YAHOO.widget.AutoComplete#maxResultsDisplayed &amp;lt;li&amp;gt; elements in an&#xA;&amp;lt;ul&amp;gt; element." ilk="function" name="_initListEl" signature="_initListEl()" />
            <scope doc="Handles subset matching for when queryMatchSubset is enabled." ilk="function" name="getSubsetMatches" signature="getSubsetMatches(sQuery) =&gt; Object">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
            </scope>
            <scope doc="Updates in the text input box with the first query result as the user types,&#xA;selecting the substring that the user has not typed." ilk="function" name="_typeAhead" signature="_typeAhead(elListItem, sQuery)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item whose data populates the input field." ilk="argument" name="elListItem" />
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
            </scope>
            <scope doc="" ilk="function" name="getListItems" signature="getListItems()" />
            <scope doc="Toggles the highlight on or off for an item in the container, and also cleans&#xA;up highlighting of any previous item." ilk="function" name="_toggleHighlight" signature="_toggleHighlight(elNewListItem, sType)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item to receive highlight behavior." ilk="argument" name="elNewListItem" />
              <variable citdl="String" doc="Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off." ilk="argument" name="sType" />
            </scope>
            <scope doc="Handles text input box receiving focus." ilk="function" name="_onTextboxFocus" signature="_onTextboxFocus(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Enables interval detection for a less performant but brute force mechanism to&#xA;detect input values at an interval set by queryInterval and send queries if&#xA;input value has changed. Needed to support right-click+paste or shift+insert&#xA;edge cases. Please note that intervals are cleared at the end of each interaction,&#xA;so enableIntervalDetection must be called for each new interaction. The&#xA;recommended approach is to call it in response to textboxFocusEvent." ilk="function" name="enableIntervalDetection" signature="enableIntervalDetection()" />
            <scope doc="Expands container." ilk="function" name="expandContainer" signature="expandContainer()" />
            <scope doc="Public accessor to the index of the associated with a given &amp;lt;li&amp;gt; result." ilk="function" name="getListItemIndex" signature="getListItemIndex(elListItem) =&gt; Number">
              <variable citdl="HTMLElement" doc="Reference to &amp;lt;LI&amp;gt; element." ilk="argument" name="elListItem" />
            </scope>
            <scope doc="Whether or not key is functional or should be ignored. Note that the right&#xA;arrow key is NOT an ignored key since it triggers queries for certain intl&#xA;charsets." ilk="function" name="_isIgnoreKey" signature="_isIgnoreKey(nKeycode) =&gt; Boolean">
              <variable citdl="Number" doc="Code of key pressed." ilk="argument" name="nKeycode" />
            </scope>
            <scope doc="Initializes the results container helpers if they are enabled and do&#xA;not exist" ilk="function" name="_initContainerHelperEls" signature="_initContainerHelperEls()" />
            <scope doc="Enables query triggers based on text input detection by intervals (rather&#xA;than by key events)." ilk="function" name="_onInterval" signature="_onInterval()" />
            <scope doc="Sets HTML markup for the results container body. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-bd&quot;." ilk="function" name="setBody" signature="setBody(sBody)">
              <variable citdl="String" doc="HTML markup for results container body." ilk="argument" name="sBody" />
            </scope>
            <scope doc="Executed by DataSource (within DataSource scope via doBeforeCallback()) to&#xA;filter results through a simple client-side matching algorithm." ilk="function" name="filterResults" signature="filterResults(sQuery, oFullResponse, oParsedResponse, oCallback) =&gt; Object">
              <variable citdl="String" doc="Original request." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="Full response object." ilk="argument" name="oFullResponse" />
              <variable citdl="Object" doc="Parsed response object." ilk="argument" name="oParsedResponse" />
              <variable citdl="Object" doc="Callback object." ilk="argument" name="oCallback" />
            </scope>
            <scope doc="Public accessor to the &amp;lt;ul&amp;gt; element that displays query results within the results container." ilk="function" name="getListEl" signature="getListEl() =&gt; HTMLElement[]" />
            <scope doc="Updates the text input box value with selected query result. If a delimiter&#xA;has been defined, then the value gets appended with the delimiter." ilk="function" name="_updateValue" signature="_updateValue(elListItem)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item with which to update the value." ilk="argument" name="elListItem" />
            </scope>
            <scope doc="Populates the array of &amp;lt;li&amp;gt; elements in the container with query&#xA;results." ilk="function" name="_populateList" signature="_populateList(sQuery, oResponse, oPayload)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="(optional) Additional argument(s)" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Focuses input field." ilk="function" name="_focus" signature="_focus()" />
            <scope doc="Overridable method called before container expands allows implementers to access data&#xA;and DOM elements." ilk="function" name="doBeforeExpandContainer" signature="doBeforeExpandContainer(elTextbox, elContainer, sQuery, aResults) =&gt; Boolean">
              <variable citdl="HTMLElement" doc="The text input box." ilk="argument" name="elTextbox" />
              <variable citdl="HTMLElement" doc="The container element." ilk="argument" name="elContainer" />
              <variable citdl="String" doc="The query string." ilk="argument" name="sQuery" />
              <variable citdl="Object[]" doc="An array of query results." ilk="argument" name="aResults" />
            </scope>
            <scope doc="Sets HTML markup for the results container footer. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-ft&quot;." ilk="function" name="setFooter" signature="setFooter(sFooter)">
              <variable citdl="String" doc="HTML markup for results container footer." ilk="argument" name="sFooter" />
            </scope>
            <scope doc="Public accessor to the unique name of the AutoComplete instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Returns true if container is in an expanded state, false otherwise." ilk="function" name="isContainerOpen" signature="isContainerOpen() =&gt; Boolean" />
            <scope doc="Nulls out the entire AutoComplete instance and related objects, removes attached&#xA;event listeners, and clears out DOM elements inside the container. After&#xA;calling this method, the instance reference should be expliclitly nulled by&#xA;implementer, as in myAutoComplete = null. Use with caution!" ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Clones object literal or array of object literals." ilk="function" name="AutoComplete._cloneObject" signature="AutoComplete._cloneObject(o)">
              <variable citdl="Object" doc="Object." ilk="argument" name="o" />
            </scope>
            <scope doc="" ilk="function" name="doBeforeSendQuery" signature="doBeforeSendQuery()" />
            <scope doc="Public accessor to the result data associated with a given &amp;lt;li&amp;gt; result." ilk="function" name="getListItemData" signature="getListItemData(elListItem) =&gt; Object">
              <variable citdl="HTMLElement" doc="Reference to &amp;lt;LI&amp;gt; element." ilk="argument" name="elListItem" />
            </scope>
            <scope doc="A function that converts an AutoComplete query into a request value which is then&#xA;passed to the DataSource&apos;s sendRequest method in order to retrieve data for &#xA;the query. By default, returns a String with the syntax: &quot;query={query}&quot;&#xA;Implementers can customize this method for custom request syntaxes." ilk="function" name="generateRequest" signature="generateRequest(sQuery) =&gt; MIXED">
              <variable citdl="String" doc="Query string" ilk="argument" name="sQuery" />
            </scope>
            <scope doc="Toggles the pre-highlight on or off for an item in the container, and also cleans&#xA;up pre-highlighting of any previous item." ilk="function" name="_togglePrehighlight" signature="_togglePrehighlight(elNewListItem, sType)">
              <variable citdl="HTMLElement" doc="The &amp;lt;li&amp;gt; element item to receive highlight behavior." ilk="argument" name="elNewListItem" />
              <variable citdl="String" doc="Type &quot;mouseover&quot; will toggle highlight on, and &quot;mouseout&quot; will toggle highlight off." ilk="argument" name="sType" />
            </scope>
            <scope doc="Handles container click events." ilk="function" name="_onContainerClick" signature="_onContainerClick(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Triggered by up and down arrow keys, changes the current highlighted&#xA;&amp;lt;li&amp;gt; element item. Scrolls container if necessary." ilk="function" name="_moveSelection" signature="_moveSelection(nKeyCode)">
              <variable citdl="Number" doc="Code of key pressed." ilk="argument" name="nKeyCode" />
            </scope>
            <scope doc="Selects a result item from the container" ilk="function" name="_selectItem" signature="_selectItem(elListItem)">
              <variable citdl="HTMLElement" doc="The selected &amp;lt;li&amp;gt; element item." ilk="argument" name="elListItem" />
            </scope>
            <scope doc="Handles window unload event." ilk="function" name="_onWindowUnload" signature="_onWindowUnload(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The unload event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Handles response for display. This is the callback function method passed to&#xA;YAHOO.util.DataSourceBase#sendRequest so results from the DataSource are&#xA;returned to the AutoComplete instance." ilk="function" name="handleResponse" signature="handleResponse(sQuery, oResponse, oPayload)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="(optional) Additional argument(s)" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Enables interval detection for IME support." ilk="function" name="_enableIntervalDetection" signature="_enableIntervalDetection()" />
            <scope doc="Makes query request to the DataSource." ilk="function" name="sendQuery" signature="sendQuery(sQuery)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
            </scope>
            <scope doc="Returns DOM reference to container element." ilk="function" name="getContainerEl" signature="getContainerEl() =&gt; HTMLELement" />
            <scope doc="Extracts rightmost query from delimited string." ilk="function" name="_extractQuery" signature="_extractQuery(sQuery) =&gt; Object">
              <variable citdl="String" doc="String to parse" ilk="argument" name="sQuery" />
            </scope>
            <scope doc="Returns DOM reference to input element." ilk="function" name="getInputEl" signature="getInputEl() =&gt; HTMLELement" />
            <scope doc="Handles container scroll events." ilk="function" name="_onContainerScroll" signature="_onContainerScroll(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The scroll event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Syncs results container with its helpers." ilk="function" name="_toggleContainerHelpers" signature="_toggleContainerHelpers(bShow)">
              <variable citdl="Boolean" doc="True if container is expanded, false if collapsed" ilk="argument" name="bShow" />
            </scope>
            <scope doc="When forceSelection is true and the user attempts&#xA;leave the text input box without selecting an item from the query results,&#xA;the user selection is cleared." ilk="function" name="_clearSelection" signature="_clearSelection()" />
            <scope doc="Updates and validates latest public config properties." ilk="function" name="__initProps" signature="__initProps()" />
            <scope doc="Overridable method called before container is loaded with result data." ilk="function" name="doBeforeLoadData" signature="doBeforeLoadData(sQuery, oResponse, oPayload) =&gt; Boolean">
              <variable citdl="String" doc="Original request." ilk="argument" name="sQuery" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="(optional) Additional argument(s)" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Executed by DataSource (within DataSource scope via doBeforeParseData()) to&#xA;handle responseStripAfter cleanup." ilk="function" name="preparseRawResponse" signature="preparseRawResponse(sQuery) =&gt; Object">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
            </scope>
            <scope doc="Animates expansion or collapse of the container." ilk="function" name="_toggleContainer" signature="_toggleContainer(bShow)">
              <variable citdl="Boolean" doc="True if container should be expanded, false if container should be collapsed" ilk="argument" name="bShow" />
            </scope>
            <scope doc="Overridable method that returns HTML markup for one result to be populated&#xA;as innerHTML of an &amp;lt;LI&amp;gt; element." ilk="function" name="formatResult" signature="formatResult(oResultData, sQuery, sResultMatch) =&gt; String">
              <variable citdl="Object" doc="Result data object." ilk="argument" name="oResultData" />
              <variable citdl="String" doc="The corresponding query string." ilk="argument" name="sQuery" />
              <variable citdl="HTMLElement" doc="The current query string." ilk="argument" name="sResultMatch" />
            </scope>
            <scope doc="Whether or not user-typed value in the text input box matches any of the&#xA;query results." ilk="function" name="_textMatchesOption" signature="_textMatchesOption() =&gt; HTMLElement" />
            <scope doc="Collapses container." ilk="function" name="collapseContainer" signature="collapseContainer()" />
            <scope doc="Handles textbox keydown events of functional keys, mainly for UI behavior." ilk="function" name="_onTextboxKeyDown" signature="_onTextboxKeyDown(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keydown event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Public accessor to the matching string associated with a given &amp;lt;li&amp;gt; result." ilk="function" name="getListItemMatch" signature="getListItemMatch(elListItem) =&gt; String">
              <variable citdl="HTMLElement" doc="Reference to &amp;lt;LI&amp;gt; element." ilk="argument" name="elListItem" />
            </scope>
            <scope doc="Handles text input box losing focus." ilk="function" name="_onTextboxBlur" signature="_onTextboxBlur(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Makes query request to the DataSource." ilk="function" name="_sendQuery" signature="_sendQuery(sQuery)">
              <variable citdl="String" doc="Query string." ilk="argument" name="sQuery" />
            </scope>
            <scope doc="Handles textbox keyup events to trigger queries." ilk="function" name="_onTextboxKeyUp" signature="_onTextboxKeyUp(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The keyup event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Returns true if widget instance is currently active." ilk="function" name="isFocused" signature="isFocused() =&gt; Boolean" />
            <scope doc="Called before container expands, by default snaps container to the&#xA;bottom-left corner of the input element, then calls public overrideable method." ilk="function" name="_doBeforeExpandContainer" signature="_doBeforeExpandContainer(elTextbox, elContainer, sQuery, aResults) =&gt; Boolean">
              <variable citdl="HTMLElement" doc="The text input box." ilk="argument" name="elTextbox" />
              <variable citdl="HTMLElement" doc="The container element." ilk="argument" name="elContainer" />
              <variable citdl="String" doc="The query string." ilk="argument" name="sQuery" />
              <variable citdl="Object[]" doc="An array of query results." ilk="argument" name="aResults" />
            </scope>
            <scope doc="Clears entire list of suggestions." ilk="function" name="clearList" signature="clearList()" />
            <scope doc="Handles container mouseout events." ilk="function" name="_onContainerMouseout" signature="_onContainerMouseout(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseout event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="If an item is highlighted in the container, the right arrow key jumps to the&#xA;end of the textbox and selects the highlighted item, otherwise the container&#xA;is closed." ilk="function" name="_jumpSelection" signature="_jumpSelection()" />
            <scope doc="Handles container mouseover events." ilk="function" name="_onContainerMouseover" signature="_onContainerMouseover(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseover event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Sets HTML markup for the results container header. This markup will be&#xA;inserted within a &amp;lt;div&amp;gt; tag with a class of &quot;yui-ac-hd&quot;." ilk="function" name="setHeader" signature="setHeader(sHeader)">
              <variable citdl="String" doc="HTML markup for results container header." ilk="argument" name="sHeader" />
            </scope>
            <scope doc="Handles container resize events." ilk="function" name="_onContainerResize" signature="_onContainerResize(v, oSelf)">
              <variable citdl="HTMLEvent" doc="The resize event." ilk="argument" name="v" />
              <variable citdl="YAHOO.widget.AutoComplete" doc="The AutoComplete instance." ilk="argument" name="oSelf" />
            </scope>
            <variable citdl="Boolean" doc="For XHR DataSources, AutoComplete will automatically insert a &quot;?&quot; between the server URI and &#xA;the &quot;query&quot; param/value pair. To prevent this behavior, implementers should&#xA;set this value to false. To more fully customize the query syntax, implementers&#xA;should override the generateRequest() method." name="queryQuestionMark" />
            <variable citdl="Boolean" doc="Whether or not to force the user&apos;s selection to match one of the query&#xA;results. Enabling this feature essentially transforms the input field into a&#xA;&amp;lt;select&amp;gt; field. This feature is not recommended with delimiter character(s)&#xA;defined." name="forceSelection" />
            <variable citdl="HTMLElement" doc="Reference to iframe element within container element." name="_elIFrame" />
            <variable citdl="Boolean" doc="Whether or not to animate the expansion/collapse of the results container in the&#xA;horizontal direction." name="animHoriz" />
            <variable citdl="Boolean" doc="Whether or not the results container should have a shadow." name="useShadow" />
            <variable citdl="Boolean" doc="Enables query subset matching. When the DataSource&apos;s cache is enabled and queryMatchSubset is&#xA;true, substrings of queries will return matching cached results. For&#xA;instance, if the first query is for &quot;abc&quot; susequent queries that start with&#xA;&quot;abc&quot;, like &quot;abcd&quot;, will be queried against the cache, and not the live data&#xA;source. Recommended only for DataSources that return comprehensive results&#xA;for queries with very few characters." name="queryMatchSubset" />
            <variable citdl="Boolean" doc="Whether or not to use an iFrame to layer over Windows form elements in&#xA;IE. Set to true only when the results container will be on top of a&#xA;&amp;lt;select&amp;gt; field in IE and thus exposed to the IE z-index bug (i.e.,&#xA;5.5 &lt; IE &lt; 7)." name="useIFrame" />
            <variable citdl="Number" doc="Number of characters that must be entered before querying for results. A negative value&#xA;effectively turns off the widget. A value of 0 allows queries of null or empty string&#xA;values." name="minQueryLength" />
            <variable citdl="HTMLElement" doc="Container DOM element." name="_elContainer" />
            <variable citdl="Number" doc="Delay timeout ID." name="_nDelayID" />
            <variable citdl="Boolean" doc="Animation instance for container expand/collapse." name="_oAnim" />
            <variable citdl="HTMLElement" doc="Reference to footer element within content element." name="_elFooter" />
            <variable citdl="Object" doc="For users typing via certain IMEs, queries must be triggered by intervals,&#xA;since key events yet supported across all browsers for all IMEs." name="_queryInterval" />
            <variable citdl="String" doc="Name of AutoComplete instance." name="_sName" />
            <variable citdl="HTMLElement" doc="Reference to shadow element within container element." name="_elShadow" />
            <variable citdl="Boolean" doc="By default, results from local DataSources will pass through the filterResults&#xA;method to apply a client-side matching algorithm." name="applyLocalFilter" />
            <variable citdl="Boolean" doc="When applyLocalFilter is true, the local filtering algorthim can have case sensitivity&#xA;enabled." name="queryMatchCase" />
            <variable citdl="Number" doc="Key code of the last key pressed in textbox." name="_nKeyCode" />
            <variable citdl="String" doc="Stores initial input value used to determine if textboxChangeEvent should be fired." name="_sInitInputValue" />
            <variable citdl="Boolean" doc="If autohighlight is enabled, whether or not the input field should be automatically updated&#xA;with the first query result as the user types, auto-selecting the substring portion&#xA;of the first result that the user has not yet typed." name="typeAhead" />
            <variable citdl="Number" doc="Number of &amp;lt;li&amp;gt; elements currently displayed in results container." name="_nDisplayedItems" />
            <variable citdl="Boolean" doc="Whether or not to animate the expansion/collapse of the results container in the&#xA;vertical direction." name="animVert" />
            <variable citdl="HTMLElement" doc="Reference to body element within content element." name="_elBody" />
            <variable citdl="String | String[]" doc="Query delimiter. A single character separator for multiple delimited&#xA;selections. Multiple delimiter characteres may be defined as an array of&#xA;strings. A null value or empty string indicates that query results cannot&#xA;be delimited. This feature is not recommended if you need forceSelection to&#xA;be true." name="delimChar" />
            <variable citdl="HTMLElement" doc="Reference to content element within container element." name="_elContent" />
            <variable citdl="Boolean" doc="Enabling this feature prevents the toggling of the container to a collapsed state.&#xA;Setting to true does not automatically trigger the opening of the container.&#xA;Implementers are advised to pre-load the container with an explicit &quot;sendQuery()&quot; call." name="alwaysShowContainer" />
            <variable citdl="String" doc="Class name of a highlighted item within results container." name="highlightClassName" />
            <variable citdl="Boolean" doc="Whether or not to allow browsers to cache user-typed input in the input&#xA;field. Disabling this feature will prevent the widget from setting the&#xA;autocomplete=&quot;off&quot; on the input field. When autocomplete=&quot;off&quot;&#xA;and users click the back button after form submission, user-typed input can&#xA;be prefilled by the browser from its cache. This caching of user input may&#xA;not be desired for sensitive data, such as credit card numbers, in which&#xA;case, implementers should consider setting allowBrowserAutocomplete to false." name="allowBrowserAutocomplete" />
            <variable citdl="Boolean" doc="For backward compatibility to pre-2.6.0 formatResults() signatures, setting&#xA;resultsTypeList to true will take each object literal result returned by&#xA;DataSource and flatten into an array." name="resultTypeList" />
            <variable citdl="Number" doc="If typeAhead is true, number of seconds to delay before updating input with&#xA;typeAhead value. In order to prevent certain race conditions, this value must&#xA;always be greater than the queryDelay." name="typeAheadDelay" />
            <variable citdl="Boolean" doc="Whether or not the mouse is currently over the results&#xA;container. This is necessary in order to prevent clicks on container items&#xA;from being text input field blur events." name="_bOverContainer" />
            <variable citdl="String" doc="Class name of a pre-highlighted item within results container." name="prehighlightClassName" />
            <variable citdl="Number" doc="TypeAhead delay timeout ID." name="_nTypeAheadDelayID" />
            <variable citdl="Boolean" doc="When applyLocalFilter is true, results can  be locally filtered to return&#xA;matching strings that &quot;contain&quot; the query string rather than simply &quot;start with&quot;&#xA;the query string." name="queryMatchContains" />
            <variable citdl="Boolean" doc="Whether or not the input field should be updated with selections." name="suppressInputUpdate" />
            <variable citdl="HTMLElement" doc="Pointer to the currently pre-highlighted &amp;lt;li&amp;gt; element in the container." name="_elCurPrehighlightItem" />
            <variable citdl="YAHOO.widget.DataSource" doc="The DataSource object that encapsulates the data used for auto completion.&#xA;This object should be an inherited object from YAHOO.widget.DataSource." name="dataSource" />
            <variable citdl="Boolean" doc="Whether or not the first item in results container should be automatically highlighted&#xA;on expand." name="autoHighlight" />
            <variable citdl="Number" doc="When IME usage is detected or interval detection is explicitly enabled,&#xA;AutoComplete will detect the input value at the given interval and send a&#xA;query if the value has changed." name="queryInterval" />
            <variable citdl="String" doc="Current query string" name="_sCurQuery" />
            <variable citdl="Boolean" doc="If true, before each time the container expands, the container element will be&#xA;positioned to snap to the bottom-left corner of the input element. If&#xA;autoSnapContainer is set to false, this positioning will not be done." name="autoSnapContainer" />
            <variable citdl="Number" doc="Internal class variable to index multiple AutoComplete instances." name="_nIndex" />
            <variable citdl="Boolean" doc="Whether or not the results container is currently open." name="_bContainerOpen" />
            <variable citdl="Number" doc="Speed of container expand/collapse animation, in seconds.." name="animSpeed" />
            <variable citdl="HTMLElement" doc="Reference to header element within content element." name="_elHeader" />
            <variable citdl="HTMLElement" doc="Internal reference to &amp;lt;ul&amp;gt; elements that contains query results within the&#xA;results container." name="_elList" />
            <variable citdl="String" doc="Src to iFrame used when useIFrame = true. Supports implementations over SSL&#xA;as well." name="_iFrameSrc" />
            <variable citdl="Number" doc="Maximum number of results to display in results container." name="maxResultsDisplayed" />
            <variable citdl="Boolean" doc="Whether or not an item has been selected since the container was populated&#xA;with results. Reset to false by _populateList, and set to true when item is&#xA;selected." name="_bItemSelected" />
            <variable citdl="String" doc="Selections from previous queries (for saving delimited queries)." name="_sPastSelections" />
            <variable citdl="Boolean" doc="Whether or not the widget instance is currently active. If query results come back&#xA;but the user has already moved on, do not proceed with auto complete behavior." name="_bFocused" />
            <variable citdl="Number" doc="Number of seconds to delay before submitting a query request.  If a query&#xA;request is received before a previous one has completed its delay, the&#xA;previous request is cancelled and the new request is set to the delay. If &#xA;typeAhead is also enabled, this value must always be less than the typeAheadDelay&#xA;in order to avoid certain race conditions." name="queryDelay" />
            <variable citdl="HTMLElement" doc="Text input field DOM element." name="_elTextbox" />
            <variable citdl="HTMLElement" doc="Pointer to the currently highlighted &amp;lt;li&amp;gt; element in the container." name="_elCurListItem" />
          </scope>
          <scope doc="Defines a CartesianChart&apos;s vertical or horizontal axis." ilk="class" name="Axis">
            <scope attributes="__ctor__" doc="Defines a CartesianChart&apos;s vertical or horizontal axis." ilk="function" name="Axis" signature="Axis()" />
            <variable citdl="Number" doc="The space, in pixels, between labels on an axis." name="labelSpacing" />
            <variable citdl="String" doc="A string reference to the globally-accessible function that may be called to&#xA;determine each of the label values for this axis. Also accepts function references." name="labelFunction" />
            <variable citdl="String" doc="The type of axis." name="type" />
            <variable citdl="Boolean" doc="If true, the items on the axis will be drawn in opposite direction." name="reverse" />
            <variable citdl="String" doc="The text that will appear next to the axis to indicate information about the data that it displays." name="title" />
          </scope>
          <scope doc="BarChart class for the YUI Charts widget." ilk="class" name="BarChart">
            <scope attributes="__ctor__" doc="BarChart class for the YUI Charts widget." ilk="function" name="BarChart" signature="BarChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
          </scope>
          <scope doc="BarSeries class for the YUI Charts widget." ilk="class" name="BarSeries">
            <scope attributes="__ctor__" doc="BarSeries class for the YUI Charts widget." ilk="function" name="BarSeries" signature="BarSeries()" />
          </scope>
          <scope doc="The BaseCellEditor class provides base functionality common to all inline cell&#xA;editors for a DataTable widget." ilk="class" name="BaseCellEditor">
            <scope attributes="__ctor__" doc="The BaseCellEditor class provides base functionality common to all inline cell&#xA;editors for a DataTable widget." ilk="function" name="BaseCellEditor" signature="BaseCellEditor(sType, oConfigs)">
              <variable citdl="String" doc="Type indicator, to map to YAHOO.widget.DataTable.Editors." ilk="argument" name="sType" />
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Initialize Custom Events." ilk="function" name="_initEvents" signature="_initEvents()" />
            <scope doc="Returns reference to associated Column instance." ilk="function" name="getColumn" signature="getColumn() =&gt; YAHOO.widget.Column" />
            <scope doc="Returns reference to associated DataTable instance." ilk="function" name="getDataTable" signature="getDataTable() =&gt; YAHOO.widget.DataTable" />
            <scope doc="Renders DOM elements and attaches event listeners." ilk="function" name="render" signature="render()" />
            <scope doc="Displays CellEditor UI in the correct position." ilk="function" name="show" signature="show()" />
            <scope doc="Moves container into position for display." ilk="function" name="move" signature="move()" />
            <scope doc="Sets focus in CellEditor." ilk="function" name="focus" signature="focus()" />
            <scope doc="Renders Save/Cancel buttons." ilk="function" name="renderBtns" signature="renderBtns()" />
            <scope doc="Fires unblockEvent" ilk="function" name="unblock" signature="unblock()" />
            <scope doc="Cancels CellEditor input and hides UI." ilk="function" name="cancel" signature="cancel()" />
            <scope doc="Access to add additional event listeners." ilk="function" name="doAfterRender" signature="doAfterRender()" />
            <scope doc="Renders form elements." ilk="function" name="renderForm" signature="renderForm()" />
            <scope doc="Returns reference to associated Record instance." ilk="function" name="getRecord" signature="getRecord() =&gt; YAHOO.widget.Record" />
            <scope doc="CellEditor unique ID." ilk="function" name="getId" signature="getId() =&gt; String" />
            <scope doc="Attach CellEditor for a new interaction." ilk="function" name="attach" signature="attach(oDataTable, elCell)">
              <variable citdl="YAHOO.widget.DataTable" doc="Associated DataTable instance." ilk="argument" name="oDataTable" />
              <variable citdl="HTMLElement" doc="Cell to edit." ilk="argument" name="elCell" />
            </scope>
            <scope doc="CellEditor instance name, for logging." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Retrieves input value from CellEditor." ilk="function" name="getInputValue" signature="getInputValue()" />
            <scope doc="Nulls out the entire CellEditor instance and related objects, removes attached&#xA;event listeners, and clears out DOM elements inside the container, removes&#xA;container from the DOM." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Saves value of CellEditor and hides UI." ilk="function" name="save" signature="save()" />
            <scope doc="After rendering form, if disabledBtns is set to true, then sets up a mechanism&#xA;to save input without them." ilk="function" name="handleDisabledBtns" signature="handleDisabledBtns()" />
            <scope doc="Resets CellEditor UI to initial state." ilk="function" name="resetForm" signature="resetForm()" />
            <scope doc="Returns container element." ilk="function" name="getContainerEl" signature="getContainerEl() =&gt; HTMLElement" />
            <scope doc="Returns reference to associated TD element." ilk="function" name="getTdEl" signature="getTdEl() =&gt; HTMLElement" />
            <scope doc="Initialize configs." ilk="function" name="_initConfigs" signature="_initConfigs()" />
            <scope doc="Fires blockEvent" ilk="function" name="block" signature="block()" />
            <variable citdl="String" doc="Text to display on Save button." name="LABEL_SAVE" />
            <variable citdl="Number" doc="Global instance counter." name="CellEditor._nCount" />
            <variable citdl="String" doc="Editor type." name="_sType" />
            <variable citdl="String" doc="Unique id assigned to instance &quot;yui-ceditorN&quot;, useful prefix for generating unique&#xA;DOM ID strings and log messages." name="_sId" />
            <variable citdl="MIXED" doc="Default value in case Record data is undefined. NB: Null values will not trigger&#xA;the default value." name="defaultValue" />
            <variable citdl="YAHOO.widget.Column" doc="Column instance." name="_oColumn" />
            <variable citdl="HTMLElement" doc="Container for inline editor." name="_elContainer" />
            <variable citdl="MIXED" doc="Current value." name="value" />
            <variable citdl="Boolean" doc="If validation is enabled, resets input field of invalid data." name="resetInvalidData" />
            <variable citdl="HTMLFunction" doc="Implementer defined function that can submit the input value to a server. This&#xA;function must accept the arguments fnCallback and oNewValue. When the submission&#xA;is complete, the function must also call fnCallback(bSuccess, oNewValue) to &#xA;finish the save routine in the CellEditor. This function can also be used to &#xA;perform extra validation or input value manipulation." name="asyncSubmitter" />
            <variable citdl="Boolean" doc="True if Save/Cancel buttons should not be displayed in the CellEditor." name="disableBtns" />
            <variable citdl="YAHOO.widget.DataTable" doc="DataTable instance." name="_oDataTable" />
            <variable citdl="HTMLElement" doc="Reference to Cancel button, if available." name="_elCancelBtn" />
            <variable citdl="HTMLElement" doc="TD element." name="_elTd" />
            <variable citdl="String" doc="Class applied to CellEditor container." name="CellEditor.CLASS_CELLEDITOR" />
            <variable citdl="YAHOO.widget.Record" doc="Record instance." name="_oRecord" />
            <variable citdl="HTMLElement" doc="Reference to Save button, if available." name="_elSaveBtn" />
            <variable citdl="String" doc="Text to display on Cancel button." name="LABEL_CANCEL" />
            <variable citdl="Boolean" doc="True if currently active." name="isActive" />
            <variable citdl="HTMLFunction" doc="Validator function for input data, called from the DataTable instance scope,&#xA;receives the arguments (inputValue, currentValue, editorInstance) and returns&#xA;either the validated (or type-converted) value or undefined." name="validator" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="The Button class creates a rich, graphical button." ilk="class" name="Button">
            <scope attributes="__ctor__" doc="The Button class creates a rich, graphical button." ilk="function" name="Button" signature="Button(p_oElement, p_oElement, p_oElement, p_oAttributes)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;,&#xA;&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to &#xA;be used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;|&lt;a href=&quot;http://www.w3.org&#xA;/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-34812697&quot;&gt;&#xA;HTMLButtonElement&lt;/a&gt;|&lt;a href=&quot;&#xA;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#&#xA;ID-33759296&quot;&gt;HTMLElement&lt;/a&gt;" doc="Object reference for the &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;, &#xA;&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to be &#xA;used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Object literal specifying a set of   &#xA;configuration attributes used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a set  &#xA;of configuration attributes used to create the button." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Shows the button&apos;s menu." ilk="function" name="_showMenu" signature="_showMenu(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object &#xA;passed back by the event utility (YAHOO.util.Event) that triggered &#xA;the display of the menu." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Determines if the specified keycode is one that toggles  &#xA;the display of the split button&apos;s menu." ilk="function" name="_isSplitButtonOptionKey" signature="_isSplitButtonOptionKey(p_oEvent) =&gt; Boolean">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Creates an &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element of the &#xA;specified type." ilk="function" name="createInputElement" signature="createInputElement(p_sType, p_sName, p_sValue, p_bChecked) =&gt; &lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;">
              <variable citdl="String" doc="String specifying the type of &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create." ilk="argument" name="p_sType" />
              <variable citdl="String" doc="String specifying the name of &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create." ilk="argument" name="p_sName" />
              <variable citdl="String" doc="String specifying the value of &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element to create." ilk="argument" name="p_sValue" />
              <variable citdl="String" doc="Boolean specifying if the  &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element is to be checked." ilk="argument" name="p_bChecked" />
            </scope>
            <scope doc="Creates the button&apos;s HTML elements." ilk="function" name="createButtonElement" signature="createButtonElement(p_sType) =&gt; &lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-58190037&quot;&gt;HTMLElement&lt;/a&gt;">
              <variable citdl="String" doc="String indicating the type of element &#xA;to create." ilk="argument" name="p_sType" />
            </scope>
            <scope doc="Determines if the specified keycode is one that toggles  &#xA;the button&apos;s &quot;active&quot; state." ilk="function" name="_isActivationKey" signature="_isActivationKey(p_nKeyCode) =&gt; Boolean">
              <variable citdl="Number" doc="Number representing the keycode to &#xA;be evaluated." ilk="argument" name="p_nKeyCode" />
            </scope>
            <scope doc="Returns a boolean indicating whether or not the button &#xA;has focus." ilk="function" name="hasFocus" signature="hasFocus() =&gt; Boolean" />
            <scope doc="Returns a reference to the button&apos;s parent form." ilk="function" name="getForm" signature="getForm() =&gt; &lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-&#xA;20000929/level-one-html.html#ID-40002357&quot;&gt;HTMLFormElement&lt;/a&gt;" />
            <scope doc="Hides the button&apos;s menu." ilk="function" name="_hideMenu" signature="_hideMenu()" />
            <scope doc="Adds event handlers to the button&apos;s form." ilk="function" name="_addListenersToForm" signature="_addListenersToForm()" />
            <scope doc="Sets the value of the button&apos;s &quot;label&quot; attribute." ilk="function" name="_setLabel" signature="_setLabel(p_sLabel)">
              <variable citdl="String" doc="String indicating the value for the button&apos;s &#xA;&quot;label&quot; attribute." ilk="argument" name="p_sLabel" />
            </scope>
            <scope doc="&quot;option&quot; event handler for the button." ilk="function" name="_onOption" signature="_onOption(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to  &#xA;create the button." ilk="function" name="initAttributes" signature="initAttributes(p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the button." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Initializes the set of configuration attributes that are &#xA;used to instantiate the button." ilk="function" name="initConfig" signature="initConfig(Object)">
              <variable citdl="Object" doc="representing the button&apos;s set of &#xA;configuration attributes." ilk="argument" name="Object" />
            </scope>
            <scope doc="&quot;selectedMenuItemChange&quot; event handler for the Button&apos;s&#xA;&quot;selectedMenuItem&quot; attribute." ilk="function" name="_onSelectedMenuItemChange" signature="_onSelectedMenuItemChange(event)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="event" />
            </scope>
            <scope doc="&quot;keyup&quot; event handler for the document." ilk="function" name="_onDocumentKeyUp" signature="_onDocumentKeyUp(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;click&quot; event handler for the button." ilk="function" name="_onClick" signature="_onClick(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Removes state-specific CSS classes to the button&apos;s root &#xA;DOM element." ilk="function" name="removeStateCSSClasses" signature="removeStateCSSClasses()" />
            <scope doc="Returns a button with the specified id." ilk="function" name="YAHOO.widget.Button.getButton" signature="YAHOO.widget.Button.getButton(p_sId) =&gt; YAHOO.widget.Button">
              <variable citdl="String" doc="String specifying the id of the root node of the &#xA;HTML element representing the button to be retrieved." ilk="argument" name="p_sId" />
            </scope>
            <scope doc="Searches the specified form and adds hidden fields for  &#xA;instances of YAHOO.widget.Button that are of type &quot;radio,&quot; &quot;checkbox,&quot; &#xA;&quot;menu,&quot; and &quot;split.&quot;" ilk="function" name="YAHOO.widget.Button.addHiddenFieldsToForm" signature="YAHOO.widget.Button.addHiddenFieldsToForm(p_oForm)">
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-40002357&quot;&gt;HTMLFormElement&lt;/a&gt;" doc="Object reference &#xA;for the form to search." ilk="argument" name="p_oForm" />
            </scope>
            <scope doc="Sets the value of the button&apos;s &quot;title&quot; attribute." ilk="function" name="_setTitle" signature="_setTitle(p_nTabIndex)">
              <variable citdl="String" doc="Number indicating the value for &#xA;the button&apos;s &quot;title&quot; attribute." ilk="argument" name="p_nTabIndex" />
            </scope>
            <scope doc="Sets the value of the button&apos;s &quot;disabled&quot; attribute." ilk="function" name="_setDisabled" signature="_setDisabled(p_bDisabled)">
              <variable citdl="Boolean" doc="Boolean indicating the value for &#xA;the button&apos;s &quot;disabled&quot; attribute." ilk="argument" name="p_bDisabled" />
            </scope>
            <scope doc="Returns a reference to the button&apos;s menu." ilk="function" name="getMenu" signature="getMenu() =&gt; &lt;a href=&quot;YAHOO.widget.Overlay.html&quot;&gt;&#xA;YAHOO.widget.Overlay&lt;/a&gt;|&lt;a &#xA;href=&quot;YAHOO.widget.Menu.html&quot;&gt;YAHOO.widget.Menu&lt;/a&gt;" />
            <scope doc="Sets the value of the button&apos;s &quot;target&quot; attribute." ilk="function" name="_setChecked" signature="_setChecked(p_bChecked)">
              <variable citdl="Boolean" doc="Boolean indicating the value for  &#xA;the button&apos;s &quot;checked&quot; attribute." ilk="argument" name="p_bChecked" />
            </scope>
            <scope doc="Sets the value of the button&apos;s &quot;href&quot; attribute." ilk="function" name="_setHref" signature="_setHref(p_sHref)">
              <variable citdl="String" doc="String indicating the value for the button&apos;s &#xA;&quot;href&quot; attribute." ilk="argument" name="p_sHref" />
            </scope>
            <scope doc="&quot;mouseover&quot; event handler for the button." ilk="function" name="_onMouseOver" signature="_onMouseOver(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Returns an &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; element or &#xA;array of form elements used to represent the button when its parent &#xA;form is submitted." ilk="function" name="getHiddenFields" signature="getHiddenFields() =&gt; &lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;|Array" />
            <scope doc="The Button class&apos;s initialization method." ilk="function" name="init" signature="init(p_oElement, p_oElement, p_oElement, p_oAttributes)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;,&#xA;&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to &#xA;be used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;|&lt;a href=&quot;http://&#xA;www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html&#xA;#ID-34812697&quot;&gt;HTMLButtonElement&lt;/a&gt;|&lt;a href=&quot;http://www.w3.org/TR&#xA;/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-33759296&quot;&gt;&#xA;HTMLElement&lt;/a&gt;" doc="Object reference for the &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt;, &#xA;&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;, or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element to be &#xA;used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a &#xA;set of configuration attributes used to create the button." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Returns a string representing the button." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Sets the value of the button&apos;s &quot;onclick&quot; attribute." ilk="function" name="_setOnClick" signature="_setOnClick(p_oObject)">
              <variable citdl="Object" doc="Object indicating the value for the button&apos;s &#xA;&quot;onclick&quot; attribute." ilk="argument" name="p_oObject" />
            </scope>
            <scope doc="Removes the button&apos;s element from its parent element and &#xA;removes all event handlers." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Sets the value of the button&apos;s &quot;menu&quot; attribute." ilk="function" name="_setMenu" signature="_setMenu(p_oMenu)">
              <variable citdl="Object" doc="Object indicating the value for the button&apos;s &#xA;&quot;menu&quot; attribute." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="&quot;hide&quot; event handler for the button&apos;s menu." ilk="function" name="_onMenuHide" signature="_onMenuHide(p_sType)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
            </scope>
            <scope doc="&quot;click&quot; event handler for the Button&apos;s&#xA;&lt;code&gt;&amp;#60;label&amp;#62;&lt;/code&gt; element." ilk="function" name="_onLabelClick" signature="_onLabelClick(event)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="event" />
            </scope>
            <scope doc="Submits the form to which the button belongs.  Returns  &#xA;true if the form was submitted successfully, false if the submission &#xA;was cancelled." ilk="function" name="submitForm" signature="submitForm() =&gt; Boolean" />
            <scope doc="&quot;dblclick&quot; event handler for the button." ilk="function" name="_onDblClick" signature="_onDblClick(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;submit&quot; event handler for the button&apos;s form." ilk="function" name="_onFormSubmit" signature="_onFormSubmit(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event &#xA;object passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;focus&quot; event handler for the button." ilk="function" name="_onFocus" signature="_onFocus(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;mousedown&quot; event handler for the button." ilk="function" name="_onMouseDown" signature="_onMouseDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Causes the button to lose focus and fires the button&apos;s&#xA;&quot;blur&quot; event." ilk="function" name="blur" signature="blur()" />
            <scope doc="&quot;show&quot; event handler for the button&apos;s menu." ilk="function" name="_onMenuShow" signature="_onMenuShow(p_sType)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
            </scope>
            <scope doc="Gets the values for all the attributes of the source element &#xA;(either &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt;) that &#xA;map to Button configuration attributes and sets them into a collection &#xA;that is passed to the Button constructor." ilk="function" name="setAttributesFromSrcElement" signature="setAttributesFromSrcElement(p_oElement, p_oAttributes)">
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;|&lt;a href=&quot;http://www.w3.org/&#xA;TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-&#xA;48250443&quot;&gt;HTMLAnchorElement&lt;/a&gt;" doc="Object reference to the HTML &#xA;element (either &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&#xA;&lt;/code&gt;) used to create the button." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Object reference for the collection of &#xA;configuration attributes used to create the button." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Causes the button to receive the focus and fires the &#xA;button&apos;s &quot;focus&quot; event." ilk="function" name="focus" signature="focus()" />
            <scope doc="Gets the value of the attributes from the form element  &#xA;and sets them into the collection of configuration attributes used to &#xA;configure the button." ilk="function" name="setFormElementProperties" signature="setFormElementProperties()" />
            <scope doc="&quot;reset&quot; event handler for the button&apos;s form." ilk="function" name="_onFormReset" signature="_onFormReset(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event &#xA;object passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;mouseup&quot; event handler for the button." ilk="function" name="_onMouseUp" signature="_onMouseUp(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Sets the value of the button&apos;s &quot;type&quot; attribute." ilk="function" name="_setType" signature="_setType(p_sType)">
              <variable citdl="String" doc="String indicating the value for the button&apos;s &#xA;&quot;type&quot; attribute." ilk="argument" name="p_sType" />
            </scope>
            <scope doc="&quot;render&quot; event handler for the button&apos;s menu." ilk="function" name="_onMenuRender" signature="_onMenuRender(p_sType)">
              <variable citdl="String" doc="String representing the name of the  &#xA;event thatwas fired." ilk="argument" name="p_sType" />
            </scope>
            <scope doc="&quot;mousedown&quot; event handler for the document." ilk="function" name="_onDocumentMouseDown" signature="_onDocumentMouseDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Returns a boolean indicating whether or not the button &#xA;is active." ilk="function" name="isActive" signature="isActive() =&gt; Boolean" />
            <scope doc="&quot;mousemove&quot; event handler for the button." ilk="function" name="_onMouseMove" signature="_onMouseMove(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;keydown&quot; event handler for the button&apos;s menu." ilk="function" name="_onMenuKeyDown" signature="_onMenuKeyDown(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Creates the button&apos;s hidden form field and appends it &#xA;to its parent form." ilk="function" name="createHiddenFields" signature="createHiddenFields() =&gt; &lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;|Array" />
            <scope doc="Appends state-specific CSS classes to the button&apos;s root &#xA;DOM element." ilk="function" name="addStateCSSClasses" signature="addStateCSSClasses()" />
            <scope doc="&quot;click&quot; event handler for the button&apos;s menu." ilk="function" name="_onMenuClick" signature="_onMenuClick(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="&quot;keypress&quot; event handler for the button&apos;s form." ilk="function" name="YAHOO.widget.Button.onFormKeyPress" signature="YAHOO.widget.Button.onFormKeyPress(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object passed &#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;mouseout&quot; event handler for the button." ilk="function" name="_onMouseOut" signature="_onMouseOut(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Gets the value of the specified DOM attribute and sets it &#xA;into the collection of configuration attributes used to configure &#xA;the button." ilk="function" name="setAttributeFromDOMAttribute" signature="setAttributeFromDOMAttribute(p_sAttribute)">
              <variable citdl="String" doc="String representing the name of the &#xA;attribute to retrieve from the DOM element." ilk="argument" name="p_sAttribute" />
            </scope>
            <scope doc="Sets the value of the button&apos;s &quot;tabindex&quot; attribute." ilk="function" name="_setTabIndex" signature="_setTabIndex(p_nTabIndex)">
              <variable citdl="Number" doc="Number indicating the value for the &#xA;button&apos;s &quot;tabindex&quot; attribute." ilk="argument" name="p_nTabIndex" />
            </scope>
            <scope doc="Sets the value of the button&apos;s &quot;target&quot; attribute." ilk="function" name="_setTarget" signature="_setTarget(p_sTarget)">
              <variable citdl="String" doc="String indicating the value for the button&apos;s &#xA;&quot;target&quot; attribute." ilk="argument" name="p_sTarget" />
            </scope>
            <scope doc="&quot;mouseup&quot; event handler for the button." ilk="function" name="_onDocumentMouseUp" signature="_onDocumentMouseUp(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Removes the button&apos;s hidden form field(s) from its &#xA;parent form." ilk="function" name="removeHiddenFields" signature="removeHiddenFields()" />
            <scope doc="&quot;keyup&quot; event handler for the button." ilk="function" name="_onKeyUp" signature="_onKeyUp(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;appendTo&quot; event handler for the button." ilk="function" name="_onAppendTo" signature="_onAppendTo(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;keydown&quot; event handler for the button." ilk="function" name="_onKeyDown" signature="_onKeyDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="&quot;blur&quot; event handler for the button." ilk="function" name="_onBlur" signature="_onBlur(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <variable citdl="{&lt;a href=&quot;YAHOO.widget.Overlay.html&quot;&gt;YAHOO.widget.Overlay&lt;/a&gt;|&#xA;&lt;a href=&quot;YAHOO.widget.Menu.html&quot;&gt;YAHOO.widget.Menu&lt;/a&gt;}" doc="Object reference to the button&apos;s menu." name="_menu" />
            <variable citdl="String" doc="Prefix used for all class names applied to a Button." name="CLASS_NAME_PREFIX" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;|Array" doc="Object reference to the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt;  &#xA;element, or array of HTML form elements used to represent the button&#xA;when its parent form is submitted." name="_hiddenFields" />
            <variable citdl="Boolean" doc="Boolean indicating if the key(s) that toggle the button&apos;s &#xA;&quot;active&quot; state have been pressed." name="_activationKeyPressed" />
            <variable citdl="Object" doc="Object reference to the button&apos;s current value for the &#xA;&quot;onclick&quot; configuration attribute." name="_onclickAttributeValue" />
            <variable citdl="String" doc="The name of the node to be used for the button&apos;s &#xA;root element." name="NODE_NAME" />
            <variable citdl="Array" doc="Array of numbers representing keys that (when pressed) &#xA;toggle the button&apos;s &quot;checked&quot; attribute." name="CHECK_ACTIVATION_KEYS" />
            <variable citdl="Boolean" doc="Boolean indicating if the mouse button that toggles &#xA;the button&apos;s &quot;active&quot; state has been pressed." name="_activationButtonPressed" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-48250443&quot;&gt;HTMLAnchorElement&lt;/a&gt;|&lt;a href=&quot;&#xA;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html&#xA;#ID-34812697&quot;&gt;HTMLButtonElement&lt;/a&gt;" doc="Object reference to the button&apos;s internal &#xA;&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;button&amp;#62;&lt;/code&gt; element." name="_button" />
            <variable citdl="Boolean" doc="Boolean indicating if the button&apos;s &quot;mouseout,&quot; &#xA;&quot;mousedown,&quot; and &quot;mouseup&quot; event handlers are assigned" name="_hasMouseEventHandlers" />
            <variable citdl="Array" doc="Array of numbers representing keys that (when presed) &#xA;toggle the button&apos;s &quot;active&quot; state." name="ACTIVATION_KEYS" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied to  &#xA;the button&apos;s root element." name="CSS_CLASS_NAME" />
            <variable citdl="Boolean" doc="Boolean indicating if the button&apos;s &quot;blur&quot;, &quot;keydown&quot; and &#xA;&quot;keyup&quot; event handlers are assigned" name="_hasKeyEventHandlers" />
            <variable citdl="Number" doc="Number representing the X coordinate of the leftmost edge of the Button&apos;s &#xA;option region.  Applies only to Buttons of type &quot;split&quot;." name="_nOptionRegionX" />
            <variable citdl="Number" doc="Width (in pixels) of the area of a split button that  &#xA;when pressed will display a menu." name="OPTION_AREA_WIDTH" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="The ButtonGroup class creates a set of buttons that are mutually &#xA;exclusive; checking one button in the set will uncheck all others in the &#xA;button group." ilk="class" name="ButtonGroup">
            <scope attributes="__ctor__" doc="The ButtonGroup class creates a set of buttons that are mutually &#xA;exclusive; checking one button in the set will uncheck all others in the &#xA;button group." ilk="function" name="ButtonGroup" signature="ButtonGroup(p_oElement, p_oElement, p_oElement, p_oAttributes)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a set &#xA;of configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Returns the button at the specified index." ilk="function" name="getButton" signature="getButton(p_nIndex) =&gt; &lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt;">
              <variable citdl="Number" doc="The index of the button to retrieve from the &#xA;button group." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="The ButtonGroup class&apos;s initialization method." ilk="function" name="init" signature="init(p_oElement, p_oElement, p_oElement, p_oAttributes)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Object literal specifying a set of  &#xA;configuration attributes used to create the button group." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying a&#xA;set of configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Sets the value of the button groups&apos;s &#xA;&quot;disabled&quot; attribute." ilk="function" name="_setDisabled" signature="_setDisabled(p_bDisabled)">
              <variable citdl="Boolean" doc="Boolean indicating the value for&#xA;the button group&apos;s &quot;disabled&quot; attribute." ilk="argument" name="p_bDisabled" />
            </scope>
            <scope doc="Returns an array of the buttons in the button group." ilk="function" name="getButtons" signature="getButtons() =&gt; Array" />
            <scope doc="Sets focus to the button at the specified index." ilk="function" name="focus" signature="focus(p_nIndex)">
              <variable citdl="Number" doc="Number indicating the index of the button &#xA;to focus." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="Adds the button to the button group." ilk="function" name="addButton" signature="addButton(p_oButton, p_oButton, p_oButton, p_oButton) =&gt; &lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt;">
              <variable citdl="&lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt;" doc="Object reference for the &lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;&#xA;YAHOO.widget.Button&lt;/a&gt; instance to be added to the button group." ilk="argument" name="p_oButton" />
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element &#xA;to be used to create the button to be added to the button group." ilk="argument" name="p_oButton" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-6043025&quot;&gt;HTMLInputElement&lt;/a&gt;|&lt;a href=&quot;&#xA;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#&#xA;ID-33759296&quot;&gt;HTMLElement&lt;/a&gt;" doc="Object reference for the &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; element &#xA;to be used to create the button to be added to the button group." ilk="argument" name="p_oButton" />
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;&lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt; &#xA;configuration attributes used to configure the button to be added to &#xA;the button group." ilk="argument" name="p_oButton" />
            </scope>
            <scope doc="&quot;appendTo&quot; event handler for the button group." ilk="function" name="_onAppendTo" signature="_onAppendTo(p_oEvent)">
              <variable citdl="Event" doc="Object representing the event that was fired." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Adds the array of buttons to the button group." ilk="function" name="addButtons" signature="addButtons(p_aButtons, p_aButtons, p_aButtons, p_aButtons) =&gt; Array">
              <variable citdl="Array" doc="Array of &lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;&#xA;YAHOO.widget.Button&lt;/a&gt; instances to be added &#xA;to the button group." ilk="argument" name="p_aButtons" />
              <variable citdl="Array" doc="Array of strings specifying the id &#xA;attribute of the &lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&#xA;&lt;/code&gt; elements to be used to create the buttons to be added to the &#xA;button group." ilk="argument" name="p_aButtons" />
              <variable citdl="Array" doc="Array of object references for the &#xA;&lt;code&gt;&amp;#60;input&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;span&amp;#62;&lt;/code&gt; elements &#xA;to be used to create the buttons to be added to the button group." ilk="argument" name="p_aButtons" />
              <variable citdl="Array" doc="Array of object literals, each containing&#xA;a set of &lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt;  &#xA;configuration attributes used to configure each button to be added &#xA;to the button group." ilk="argument" name="p_aButtons" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to  &#xA;create the button group." ilk="function" name="initAttributes" signature="initAttributes(p_oAttributes)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the button group." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Returns a string representing the button group." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="&quot;checkedChange&quot; event handler for each button in the &#xA;button group." ilk="function" name="_onButtonCheckedChange" signature="_onButtonCheckedChange(p_oEvent, p_oButton)">
              <variable citdl="Event" doc="Object representing the event that was fired." ilk="argument" name="p_oEvent" />
              <variable citdl="&lt;a href=&quot;YAHOO.widget.Button.html&quot;&gt;YAHOO.widget.Button&lt;/a&gt;" doc="Object representing the button that fired the event." ilk="argument" name="p_oButton" />
            </scope>
            <scope doc="Returns the number of buttons in the button group." ilk="function" name="getCount" signature="getCount() =&gt; Number" />
            <scope doc="Removes the button at the specified index from the &#xA;button group." ilk="function" name="removeButton" signature="removeButton(p_nIndex)">
              <variable citdl="Number" doc="Number specifying the index of the button &#xA;to be removed from the button group." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="Removes the button group&apos;s element from its parent &#xA;element and removes all event handlers." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="&quot;keydown&quot; event handler for the button group." ilk="function" name="_onKeyDown" signature="_onKeyDown(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Checks the button at the specified index." ilk="function" name="check" signature="check(p_nIndex)">
              <variable citdl="Number" doc="Number indicating the index of the button &#xA;to check." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="Creates the button group&apos;s element." ilk="function" name="_createGroupElement" signature="_createGroupElement() =&gt; &lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" />
            <variable citdl="String" doc="Prefix used for all class names applied to a ButtonGroup." name="CLASS_NAME_PREFIX" />
            <variable citdl="Array" doc="Array of buttons in the button group." name="_buttons" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied  &#xA;to the button group&apos;s element." name="CSS_CLASS_NAME" />
            <variable citdl="String" doc="The name of the tag to be used for the button &#xA;group&apos;s element." name="NODE_NAME" />
          </scope>
          <scope doc="Calendar is the base class for the Calendar widget. In its most basic&#xA;implementation, it has the ability to render a calendar widget on the page&#xA;that can be manipulated to select a single date, move back and forth between&#xA;months and years.&#xA;&lt;p&gt;To construct the placeholder for the calendar widget, the code is as&#xA;follows:&#xA;&lt;xmp&gt;&#xA;&lt;div id=&quot;calContainer&quot;&gt;&lt;/div&gt;&#xA;&lt;/xmp&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;strong&gt;NOTE: As of 2.4.0, the constructor&apos;s ID argument is optional.&lt;/strong&gt;&#xA;The Calendar can be constructed by simply providing a container ID string, &#xA;or a reference to a container DIV HTMLElement (the element needs to exist &#xA;in the document).&#xA;E.g.:&#xA;&lt;xmp&gt;&#xA;var c = new YAHOO.widget.Calendar(&quot;calContainer&quot;, configOptions);&#xA;&lt;/xmp&gt;&#xA;or:&#xA;&lt;xmp&gt;&#xA;var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);&#xA;var c = new YAHOO.widget.Calendar(containerDiv, configOptions);&#xA;&lt;/xmp&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.&#xA;For example if an ID is not provided, and the container&apos;s ID is &quot;calContainer&quot;, the Calendar&apos;s ID will be set to &quot;calContainer_t&quot;.&#xA;&lt;/p&gt;" ilk="class" name="Calendar">
            <scope attributes="__ctor__" doc="Calendar is the base class for the Calendar widget. In its most basic&#xA;implementation, it has the ability to render a calendar widget on the page&#xA;that can be manipulated to select a single date, move back and forth between&#xA;months and years.&#xA;&lt;p&gt;To construct the placeholder for the calendar widget, the code is as&#xA;follows:&#xA;&lt;xmp&gt;&#xA;&lt;div id=&quot;calContainer&quot;&gt;&lt;/div&gt;&#xA;&lt;/xmp&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;strong&gt;NOTE: As of 2.4.0, the constructor&apos;s ID argument is optional.&lt;/strong&gt;&#xA;The Calendar can be constructed by simply providing a container ID string, &#xA;or a reference to a container DIV HTMLElement (the element needs to exist &#xA;in the document).&#xA;E.g.:&#xA;&lt;xmp&gt;&#xA;var c = new YAHOO.widget.Calendar(&quot;calContainer&quot;, configOptions);&#xA;&lt;/xmp&gt;&#xA;or:&#xA;&lt;xmp&gt;&#xA;var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);&#xA;var c = new YAHOO.widget.Calendar(containerDiv, configOptions);&#xA;&lt;/xmp&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.&#xA;For example if an ID is not provided, and the container&apos;s ID is &quot;calContainer&quot;, the Calendar&apos;s ID will be set to &quot;calContainer_t&quot;.&#xA;&lt;/p&gt;" ilk="function" name="Calendar" signature="Calendar(id, container, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable citdl="String | HTMLElement" doc="The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document." ilk="argument" name="container" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the Calendar." ilk="argument" name="config" />
            </scope>
            <scope doc="Shows the Calendar&apos;s outer container." ilk="function" name="show" signature="show()" />
            <scope doc="Navigates to the next year in the currently selected month in the calendar widget." ilk="function" name="nextYear" signature="nextYear()" />
            <scope doc="The default handler for all configuration locale properties" ilk="function" name="configLocale" signature="configLocale()" />
            <scope doc="Subtcats the designated number of years from the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" name="subtractYears" signature="subtractYears(count)">
              <variable citdl="Number" doc="The number of years to subtract from the current calendar" ilk="argument" name="count" />
            </scope>
            <scope doc="Renders the Calendar&apos;s weekday headers." ilk="function" name="buildWeekdays" signature="buildWeekdays(html) =&gt; Array">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
            </scope>
            <scope doc="Protected helper used to parse Calendar constructor/init arguments.&#xA;As of 2.4.0, Calendar supports a simpler constructor &#xA;signature. This method reconciles arguments&#xA;received in the pre 2.4.0 and 2.4.0 formats." ilk="function" name="_parseArgs" signature="_parseArgs(Function) =&gt; Object">
              <variable citdl="Array" doc="&quot;arguments&quot; array" ilk="argument" name="Function" />
            </scope>
            <scope doc="Navigates to the previous month page in the calendar widget." ilk="function" name="previousMonth" signature="previousMonth()" />
            <scope doc="Gets the list of currently selected dates from the calendar." ilk="function" name="getSelectedDates" signature="getSelectedDates() =&gt; Date[]" />
            <scope doc="Renders a cell that falls before the minimum date or after the maximum date.&#xA;widget class." ilk="function" name="renderOutOfBoundsDate" signature="renderOutOfBoundsDate(workingDate, cell) =&gt; String">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="Navigates to the previous year in the currently selected month in the calendar widget." ilk="function" name="previousYear" signature="previousYear()" />
            <scope doc="Resets the render stack of the current calendar to its original pre-render value." ilk="function" name="resetRenderers" signature="resetRenderers()" />
            <scope doc="Renders the calendar body." ilk="function" name="renderBody" signature="renderBody(workingDate, html) =&gt; Array">
              <variable citdl="Date" doc="The current working Date being used for the render process" ilk="argument" name="workingDate" />
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
            </scope>
            <scope doc="Adds a month to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the month passed to this method." ilk="function" name="addMonthRenderer" signature="addMonthRenderer(month, fnRender)">
              <variable citdl="Number" doc="The month (1-12) to associate with this renderer" ilk="argument" name="month" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
            </scope>
            <scope doc="Adds a weekday to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the weekday passed to this method." ilk="function" name="addWeekdayRenderer" signature="addWeekdayRenderer(weekday, fnRender)">
              <variable citdl="Number" doc="The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer" ilk="argument" name="weekday" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
            </scope>
            <scope doc="Creates the title bar element and adds it to Calendar container DIV" ilk="function" name="createTitleBar" signature="createTitleBar(strTitle) =&gt; ">
              <variable citdl="String" doc="The title to display in the title bar" ilk="argument" name="strTitle" />
            </scope>
            <scope doc="Applies the Calendar&apos;s DOM listeners to applicable elements." ilk="function" name="applyListeners" signature="applyListeners()" />
            <scope doc="Removes all styles from all body cells in the current calendar table." ilk="function" name="clearAllBodyCellStyles" signature="clearAllBodyCellStyles(style)">
              <variable citdl="style" doc="The CSS class name to remove from all calendar body cells" ilk="argument" name="style" />
            </scope>
            <scope doc="Parses a pagedate configuration property value. The value can either be specified as a string of form &quot;mm/yyyy&quot; or a Date object &#xA;and is parsed into a Date object normalized to the first day of the month. If no value is passed in, the month and year from today&apos;s date are used to create the Date object" ilk="function" name="_parsePageDate" signature="_parsePageDate(date) =&gt; Date">
              <variable citdl="Date|String" doc="Pagedate value which needs to be parsed" ilk="argument" name="date" />
            </scope>
            <scope doc="Given the id used to mark each Calendar cell, this method&#xA;extracts the index number from the id." ilk="function" name="getIndexFromId" signature="getIndexFromId(strId) =&gt; Number">
              <variable citdl="String" doc="The cell id" ilk="argument" name="strId" />
            </scope>
            <scope doc="Adds a renderer to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the conditions specified in the date string for this renderer." ilk="function" name="addRenderer" signature="addRenderer(sDates, fnRender)">
              <variable citdl="String" doc="A date string to associate with the specified renderer. Valid formats&#xA;include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)" ilk="argument" name="sDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
            </scope>
            <scope doc="Event executed before a date is selected in the calendar widget." ilk="function" name="onBeforeSelect" signature="onBeforeSelect()" />
            <scope doc="Removes the close button HTML element from the DOM" ilk="function" name="removeCloseButton" signature="removeCloseButton()" />
            <scope doc="Renders a single standard calendar cell using the CSS hightlight2 style" ilk="function" name="renderCellStyleHighlight2" signature="renderCellStyleHighlight2(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight3 style" ilk="function" name="renderCellStyleHighlight3" signature="renderCellStyleHighlight3(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight1 style" ilk="function" name="renderCellStyleHighlight1" signature="renderCellStyleHighlight1(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="Renders a single standard calendar cell using the CSS hightlight4 style" ilk="function" name="renderCellStyleHighlight4" signature="renderCellStyleHighlight4(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="Renders the calendar header." ilk="function" name="renderHeader" signature="renderHeader(html) =&gt; Array">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
            </scope>
            <scope doc="Adds the designated number of years to the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" name="addYears" signature="addYears(count)">
              <variable citdl="Number" doc="The number of years to add to the current calendar" ilk="argument" name="count" />
            </scope>
            <scope doc="Deselects a date on the current calendar by referencing the index of the cell that should be deselected.&#xA;This method is used to easily deselect a single cell (usually with a mouse click) without having to do&#xA;a full render. The selected style is removed from the cell directly.&#xA;If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month &#xA;or out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and &#xA;deselect events will not be fired." ilk="function" name="deselectCell" signature="deselectCell(cellIndex) =&gt; Date[]">
              <variable citdl="Number" doc="The index of the cell to deselect in the current calendar." ilk="argument" name="cellIndex" />
            </scope>
            <scope doc="Default handler for the &quot;title&quot; property" ilk="function" name="configTitle" signature="configTitle()" />
            <scope doc="The default handler for all configuration options properties" ilk="function" name="configOptions" signature="configOptions()" />
            <scope doc="Deselects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once deselection has completed, render must be &#xA;called for the changes to be reflected visually.&#xA;The method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable) &#xA;and the array of deselected dates passed to the deselectEvent will not contain any OOB dates.&#xA;If all dates are OOB, beforeDeselect and deselect events will not be fired." ilk="function" name="deselect" signature="deselect(date) =&gt; Date[]">
              <variable citdl="String/Date/Date[]" doc="The date string of dates to deselect in the current calendar. Valid formats are&#xA;individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;This method can also take a JavaScript Date object or an array of Date objects." ilk="argument" name="date" />
            </scope>
            <scope doc="Gets the index of a date field array [yyyy,mm,dd] in the current list of selected dates." ilk="function" name="_indexOfSelectedFieldArray" signature="_indexOfSelectedFieldArray(find) =&gt; Number">
              <variable citdl="Number[]" doc="The date field array to search for" ilk="argument" name="find" />
            </scope>
            <scope doc="Converts a date range to the full list of included dates" ilk="function" name="_parseRange" signature="_parseRange(startDate, endDate) =&gt; ">
              <variable citdl="Number[]" doc="Date field array representing the first date in the range" ilk="argument" name="startDate" />
              <variable citdl="Number[]" doc="Date field array representing the last date in the range" ilk="argument" name="endDate" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Applies the default style used for rendering dates that are not a part of the current&#xA;month (preceding or trailing the cells for the current month)" ilk="function" name="renderCellNotThisMonth" signature="renderCellNotThisMonth(workingDate, cell) =&gt; String">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="The default handler for all configuration locale field length properties" ilk="function" name="configLocaleValues" signature="configLocaleValues()" />
            <scope doc="Builds the date label that will be displayed in the calendar header or&#xA;footer, depending on configuration." ilk="function" name="buildMonthLabel" signature="buildMonthLabel() =&gt; String" />
            <scope doc="Converts a multi or single-date string to an array of date field arrays" ilk="function" name="_parseDates" signature="_parseDates(sDates) =&gt; ">
              <variable citdl="String" doc="Date string with one or more comma-delimited dates. Valid formats are mm/dd, mm/dd/yyyy, mm/dd/yyyy-mm/dd/yyyy" ilk="argument" name="sDates" />
            </scope>
            <scope doc="Refreshes the locale values used to build the Calendar." ilk="function" name="refreshLocale" signature="refreshLocale()" />
            <scope doc="The default handler for the &quot;maxdate&quot; property" ilk="function" name="configMaxDate" signature="configMaxDate()" />
            <scope doc="The private method used for adding cell renderers to the local render stack.&#xA;This method is called by other methods that set the renderer type prior to the method call." ilk="function" name="_addRenderer" signature="_addRenderer(type, aDates, fnRender)">
              <variable citdl="String" doc="The type string that indicates the type of date renderer being added.&#xA;Values are YAHOO.widget.Calendar.DATE, YAHOO.widget.Calendar.MONTH_DAY, YAHOO.widget.Calendar.WEEKDAY,&#xA;YAHOO.widget.Calendar.RANGE, YAHOO.widget.Calendar.MONTH" ilk="argument" name="type" />
              <variable citdl="Array" doc="An array of dates used to construct the renderer. The format varies based&#xA;on the renderer type" ilk="argument" name="aDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
            </scope>
            <scope doc="Sets the calendar&apos;s month explicitly" ilk="function" name="setMonth" signature="setMonth(month)">
              <variable citdl="Number" doc="The numeric month, from 0 (January) to 11 (December)" ilk="argument" name="month" />
            </scope>
            <scope doc="Determines if 2 field arrays are equal." ilk="function" name="_fieldArraysAreEqual" signature="_fieldArraysAreEqual(array1, array2) =&gt; Boolean">
              <variable citdl="Number[]" doc="The first date field array to compare" ilk="argument" name="array1" />
              <variable citdl="Number[]" doc="The first date field array to compare" ilk="argument" name="array2" />
            </scope>
            <scope doc="Styles a selectable cell." ilk="function" name="styleCellDefault" signature="styleCellDefault(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="The event that is executed when the user hovers over a cell" ilk="function" name="doCellMouseOver" signature="doCellMouseOver(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
            </scope>
            <scope doc="The event that is executed when the user moves the mouse out of a cell" ilk="function" name="doCellMouseOut" signature="doCellMouseOut(e, cal)">
              <variable citdl="DOMEvent" doc="The event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar passed by the Event utility" ilk="argument" name="cal" />
            </scope>
            <scope doc="Event executed when the calendar widget is completely cleared to the current month with no selections." ilk="function" name="onClear" signature="onClear()" />
            <scope doc="Renders a single standard calendar cell in the calendar widget table.&#xA;All logic for determining how a standard default cell will be rendered is &#xA;encapsulated in this method, and must be accounted for when extending the&#xA;widget class." ilk="function" name="renderCellDefault" signature="renderCellDefault(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="Event executed when a date is deselected in the calendar widget." ilk="function" name="onDeselect" signature="onDeselect(selected)">
              <variable citdl="Array" doc="An array of date field arrays representing which date or dates were deselected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]" ilk="argument" name="selected" />
            </scope>
            <scope doc="The default handler for the &quot;navigator&quot; property" ilk="function" name="configNavigator" signature="configNavigator()" />
            <scope doc="Default handler for the &quot;close&quot; property" ilk="function" name="configClose" signature="configClose()" />
            <scope doc="Renders the calendar after it has been configured. The render() method has a specific call chain that will execute&#xA;when the method is called: renderHeader, renderBody, renderFooter.&#xA;Refer to the documentation for those methods for information on &#xA;individual render tasks." ilk="function" name="render" signature="render()" />
            <scope doc="Helper method, to format a Month Year string, given a JavaScript Date, based on the &#xA;Calendar localization settings" ilk="function" name="_buildMonthLabel" signature="_buildMonthLabel(date) =&gt; String">
              <variable citdl="Date" ilk="argument" name="date" />
            </scope>
            <scope doc="Defines the style constants for the Calendar" ilk="function" name="initStyles" signature="initStyles()" />
            <scope doc="Adds the designated number of months to the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" name="addMonths" signature="addMonths(count)">
              <variable citdl="Number" doc="The number of months to add to the current calendar" ilk="argument" name="count" />
            </scope>
            <scope doc="Selects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once selection has completed, render must be &#xA;called for the changes to be reflected visually.&#xA;Any dates which are OOB (out of bounds, not selectable) will not be selected and the array of &#xA;selected dates passed to the selectEvent will not contain OOB dates.&#xA;If all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired." ilk="function" name="select" signature="select(date) =&gt; Date[]">
              <variable citdl="String/Date/Date[]" doc="The date string of dates to select in the current calendar. Valid formats are&#xA;individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;This method can also take a JavaScript Date object or an array of Date objects." ilk="argument" name="date" />
            </scope>
            <scope doc="Retrieves the Date object for the specified Calendar cell" ilk="function" name="getDateFieldsByCellId" signature="getDateFieldsByCellId(id) =&gt; Array">
              <variable citdl="String" doc="The id of the cell" ilk="argument" name="id" />
            </scope>
            <scope doc="Initializes Calendar&apos;s built-in CustomEvents" ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Navigates to the next month page in the calendar widget." ilk="function" name="nextMonth" signature="nextMonth()" />
            <scope doc="Event executed when the calendar widget is reset to its original state." ilk="function" name="onReset" signature="onReset()" />
            <scope doc="Initializes the Calendar widget." ilk="function" name="init" signature="init(id, container, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the Calendar widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable citdl="String | HTMLElement" doc="The id of the container div element that will wrap the Calendar table, or a reference to a DIV element which exists in the document." ilk="argument" name="container" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the Calendar." ilk="argument" name="config" />
            </scope>
            <scope doc="Determines whether a given date is OOM (out of month)." ilk="function" name="isDateOOM" signature="isDateOOM(date) =&gt; Boolean">
              <variable citdl="Date" doc="The JavaScript Date object for which to check the OOM status" ilk="argument" name="date" />
            </scope>
            <scope doc="Find the Calendar&apos;s cell index for a given date.&#xA;If the date is not found, the method returns -1.&#xA;&lt;p&gt;&#xA;The returned index can be used to lookup the cell HTMLElement  &#xA;using the Calendar&apos;s cells array or passed to selectCell to select &#xA;cells by index. &#xA;&lt;/p&gt;&#xA;See &lt;a href=&quot;#cells&quot;&gt;cells&lt;/a&gt;, &lt;a href=&quot;#selectCell&quot;&gt;selectCell&lt;/a&gt;." ilk="function" name="getCellIndex" signature="getCellIndex(date) =&gt; Number">
              <variable citdl="Date" doc="JavaScript Date object, for which to find a cell index." ilk="argument" name="date" />
            </scope>
            <scope doc="Determines whether a given date is OOB (out of bounds - less than the mindate or more than the maxdate)." ilk="function" name="isDateOOB" signature="isDateOOB(date) =&gt; Boolean">
              <variable citdl="Date" doc="The JavaScript Date object for which to check the OOB status" ilk="argument" name="date" />
            </scope>
            <scope doc="The default event handler for date cell selection. Currently attached to &#xA;the Calendar&apos;s bounding box, referenced by it&apos;s &lt;a href=&quot;#property_oDomContainer&quot;&gt;oDomContainer&lt;/a&gt; property." ilk="function" name="doSelectCell" signature="doSelectCell(e, cal)">
              <variable citdl="DOMEvent" doc="The DOM event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar" ilk="argument" name="cal" />
            </scope>
            <scope doc="The default handler for the &quot;strings&quot; property" ilk="function" name="configStrings" signature="configStrings()" />
            <scope doc="Event executed when the calendar widget is rendered." ilk="function" name="onRender" signature="onRender()" />
            <scope doc="Renders the row header for a week." ilk="function" name="renderRowHeader" signature="renderRowHeader(weekNum, cell)">
              <variable citdl="Number" doc="The week number of the current row" ilk="argument" name="weekNum" />
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="cell" />
            </scope>
            <scope doc="Renders the calendar footer. In the default implementation, there is&#xA;no footer." ilk="function" name="renderFooter" signature="renderFooter(html) =&gt; Array">
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="html" />
            </scope>
            <scope doc="The default handler for the &quot;selected&quot; property" ilk="function" name="configSelected" signature="configSelected()" />
            <scope doc="Renders the row footer for a week." ilk="function" name="renderRowFooter" signature="renderRowFooter(weekNum, cell)">
              <variable citdl="Number" doc="The week number of the current row" ilk="argument" name="weekNum" />
              <variable citdl="Array" doc="The current working HTML array" ilk="argument" name="cell" />
            </scope>
            <scope doc="Resets the calendar widget to the originally selected month and year, and &#xA;sets the calendar to the initial selection(s)." ilk="function" name="reset" signature="reset()" />
            <scope doc="Deselects all dates on the current calendar." ilk="function" name="deselectAll" signature="deselectAll() =&gt; Date[]" />
            <scope doc="Renders the current calendar cell as a non-selectable &quot;black-out&quot; date using the default&#xA;restricted style." ilk="function" name="renderBodyCellRestricted" signature="renderBodyCellRestricted(workingDate, cell) =&gt; String">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="Event executed before a date is deselected in the calendar widget." ilk="function" name="onBeforeDeselect" signature="onBeforeDeselect()" />
            <scope doc="Event executed when the user navigates to a different calendar page." ilk="function" name="onChangePage" signature="onChangePage()" />
            <scope doc="Converts a date (either a JavaScript Date object, or a date string) to the internal data structure&#xA;used to represent dates: [[yyyy,mm,dd],[yyyy,mm,dd]]." ilk="function" name="_toFieldArray" signature="_toFieldArray(date) =&gt; Array[](Number[])">
              <variable citdl="String/Date/Date[]" doc="The date string of dates to deselect in the current calendar. Valid formats are&#xA;individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;This method can also take a JavaScript Date object or an array of Date objects." ilk="argument" name="date" />
            </scope>
            <scope doc="Applies the default style used for rendering selected dates to the current calendar cell" ilk="function" name="renderCellStyleSelected" signature="renderCellStyleSelected(workingDate, cell) =&gt; String">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="The default handler for the &quot;today&quot; property" ilk="function" name="configToday" signature="configToday()" />
            <scope doc="Clears the inner HTML, CSS class and style information from the specified cell." ilk="function" name="clearElement" signature="clearElement(cell)">
              <variable citdl="HTMLTableCellElement" doc="The cell to clear" ilk="argument" name="cell" />
            </scope>
            <scope doc="Converts a date string to a date field array" ilk="function" name="_parseDate" signature="_parseDate(sDate) =&gt; ">
              <variable citdl="String" doc="Date string. Valid formats are mm/dd and mm/dd/yyyy." ilk="argument" name="sDate" />
            </scope>
            <scope doc="Converts a date field array [yyyy,mm,dd] to a JavaScript Date object." ilk="function" name="_toDate" signature="_toDate(dateFieldArray) =&gt; Date">
              <variable citdl="Number[]" doc="The date field array to convert to a JavaScript Date." ilk="argument" name="dateFieldArray" />
            </scope>
            <scope doc="Builds the date digit that will be displayed in calendar cells" ilk="function" name="buildDayLabel" signature="buildDayLabel(workingDate) =&gt; String">
              <variable citdl="Date" doc="The current working date" ilk="argument" name="workingDate" />
            </scope>
            <scope doc="Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array&#xA;is the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners." ilk="function" name="toDate" signature="toDate(dateFieldArray) =&gt; Date">
              <variable citdl="Number[]" doc="The date field array to convert to a JavaScript Date." ilk="argument" name="dateFieldArray" />
            </scope>
            <scope doc="The default handler for the &quot;pagedate&quot; property" ilk="function" name="configPageDate" signature="configPageDate()" />
            <scope doc="Creates the close button HTML element and adds it to Calendar container DIV" ilk="function" name="createCloseButton" signature="createCloseButton() =&gt; " />
            <scope doc="Destroys the Calendar instance. The method will remove references&#xA;to HTML elements, remove any event listeners added by the Calendar,&#xA;and destroy the Config and CalendarNavigator instances it has created." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Removes all custom renderers added to the Calendar through the addRenderer, addMonthRenderer and &#xA;addWeekdayRenderer methods. Calendar&apos;s render method needs to be called after removing renderers &#xA;to re-render the Calendar without custom renderers applied." ilk="function" name="removeRenderers" signature="removeRenderers()" />
            <scope doc="Selects a date on the current calendar by referencing the index of the cell that should be selected.&#xA;This method is used to easily select a single cell (usually with a mouse click) without having to do&#xA;a full render. The selected style is applied to the cell directly.&#xA;If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month &#xA;or out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired." ilk="function" name="selectCell" signature="selectCell(cellIndex) =&gt; Date[]">
              <variable citdl="Number" doc="The index of the cell to select in the current calendar." ilk="argument" name="cellIndex" />
            </scope>
            <scope doc="The default event handler for clicks on the &quot;Previous Month&quot; navigation UI" ilk="function" name="doPreviousMonthNav" signature="doPreviousMonthNav(e, cal)">
              <variable citdl="DOMEvent" doc="The DOM event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar" ilk="argument" name="cal" />
            </scope>
            <scope doc="Removes the title bar element from the DOM" ilk="function" name="removeTitleBar" signature="removeTitleBar()" />
            <scope doc="The default handler for the &quot;mindate&quot; property" ilk="function" name="configMinDate" signature="configMinDate()" />
            <scope doc="Hides the Calendar&apos;s outer container from view." ilk="function" name="hide" signature="hide()" />
            <scope doc="Validates the calendar widget. This method has no default implementation&#xA;and must be extended by subclassing the widget." ilk="function" name="validate" signature="validate() =&gt; " />
            <scope doc="Retrieves the Date object for the specified Calendar cell" ilk="function" name="getDateByCellId" signature="getDateByCellId(id) =&gt; Date">
              <variable citdl="String" doc="The id of the cell" ilk="argument" name="id" />
            </scope>
            <scope doc="Clears the selected dates in the current calendar widget and sets the calendar&#xA;to the current month and year." ilk="function" name="clear" signature="clear()" />
            <scope doc="Default Config listener for the iframe property. If the iframe config property is set to true, &#xA;renders the built-in IFRAME shim if the container is relatively or absolutely positioned." ilk="function" name="configIframe" signature="configIframe()" />
            <scope doc="Subtracts the designated number of months from the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" name="subtractMonths" signature="subtractMonths(count)">
              <variable citdl="Number" doc="The number of months to subtract from the current calendar" ilk="argument" name="count" />
            </scope>
            <scope doc="Event executed when a date is selected in the calendar widget." ilk="function" name="onSelect" signature="onSelect(selected)">
              <variable citdl="Array" doc="An array of date field arrays representing which date or dates were selected. Example: [ [2006,8,6],[2006,8,7],[2006,8,8] ]" ilk="argument" name="selected" />
            </scope>
            <scope doc="Sets the calendar&apos;s year explicitly." ilk="function" name="setYear" signature="setYear(year)">
              <variable citdl="Number" doc="The numeric 4-digit year" ilk="argument" name="year" />
            </scope>
            <scope doc="Applies the default style used for rendering today&apos;s date to the current calendar cell" ilk="function" name="renderCellStyleToday" signature="renderCellStyleToday(workingDate, cell)">
              <variable citdl="Date" doc="The current working Date object being used to generate the calendar" ilk="argument" name="workingDate" />
              <variable citdl="HTMLTableCellElement" doc="The current working cell in the calendar" ilk="argument" name="cell" />
            </scope>
            <scope doc="The default event handler for clicks on the &quot;Next Month&quot; navigation UI" ilk="function" name="doNextMonthNav" signature="doNextMonthNav(e, cal)">
              <variable citdl="DOMEvent" doc="The DOM event" ilk="argument" name="e" />
              <variable citdl="Calendar" doc="A reference to the calendar" ilk="argument" name="cal" />
            </scope>
            <variable doc="" name="Style.CSS_HEADER_TEXT" />
            <variable doc="" name="Style.CSS_CELL_RIGHT" />
            <variable citdl="String" doc="Type constant used for renderers to represent a weekday" name="YAHOO.widget.Calendar.WEEKDAY" />
            <variable citdl="String" doc="Constant used to represent long date field string formats (e.g. Monday or February)" name="YAHOO.widget.Calendar.LONG" />
            <variable citdl="YAHOO.util.Config" doc="The Config object used to hold the configuration variables for the Calendar" name="cfg" />
            <variable doc="" name="Style.CSS_HEADER" />
            <variable doc="" name="Style.CSS_CONTAINER" />
            <variable citdl="String" doc="Type constant used for renderers to represent an individual date across any year (M/D)" name="YAHOO.widget.Calendar.MONTH_DAY" />
            <variable citdl="String" doc="The path to be used for images loaded for the Calendar" name="YAHOO.widget.Calendar.IMG_ROOT" />
            <variable doc="" name="Style.CSS_NAV_RIGHT" />
            <variable citdl="Object" doc="The configuration object used to set up the calendars various locale and style options." name="Config" />
            <variable citdl="String" doc="The id that uniquely identifies this Calendar." name="id" />
            <variable citdl="String" doc="The unique id associated with the Calendar&apos;s container" name="containerId" />
            <variable citdl="CalendarGroup" doc="The parent CalendarGroup, only to be set explicitly by the parent group" name="parent" />
            <variable citdl="Number" doc="The index of this item in the parent group" name="index" />
            <variable citdl="String" doc="Constant used to represent single character date field string formats (e.g. M, T, W)" name="YAHOO.widget.Calendar.ONE_CHAR" />
            <variable citdl="String" doc="Constant used for halting the execution of the remainder of the render stack" name="YAHOO.widget.Calendar.STOP_RENDER" />
            <variable citdl="CalendarNavigator" doc="A reference to the CalendarNavigator instance created for this Calendar.&#xA;Will be null if the &quot;navigator&quot; configuration property has not been set" name="oNavigator" />
            <variable citdl="String" doc="Type constant used for renderers to represent a month across any year" name="YAHOO.widget.Calendar.MONTH" />
            <variable doc="" name="Style.CSS_LINK_CLOSE" />
            <variable doc="" name="Style.CSS_CELL_OOM" />
            <variable doc="" name="Style.CSS_CELL" />
            <variable citdl="Array[]" doc="The list of render functions, along with required parameters, used to render cells." name="renderStack" />
            <variable doc="" name="Style.CSS_CELL_HIGHLIGHT4" />
            <variable doc="" name="Style.CSS_CELL_HIGHLIGHT3" />
            <variable doc="" name="Style.CSS_BODY" />
            <variable doc="" name="Style.CSS_CELL_HIGHLIGHT1" />
            <variable doc="" name="Style.CSS_SINGLE" />
            <variable citdl="Array" doc="A copy of the initial render functions created before rendering." name="_renderStack" />
            <variable citdl="Date" doc="A Date object representing today&apos;s date." name="today" />
            <variable doc="" name="Style.CSS_CELL_HIGHLIGHT2" />
            <variable doc="" name="Style.CSS_CELL_RESTRICTED" />
            <variable citdl="Object An object with name/value pairs for the class name identifier/value." doc="The set of default style constants for the Calendar" name="YAHOO.widget.Calendar.STYLES" />
            <variable citdl="Array" doc="The private list of initially selected dates." name="_selectedDates" />
            <variable doc="" name="Style.CSS_CELL_LEFT" />
            <variable doc="" name="Style.CSS_FIXED_SIZE" />
            <variable doc="" name="Style.CSS_CELL_OOB" />
            <variable citdl="Object" doc="The set of Custom Event types supported by the Calendar" name="YAHOO.widget.Calendar._EVENT_TYPES" />
            <variable doc="" name="Style.CSS_CLOSE" />
            <variable doc="" name="Style.CSS_CALENDAR" />
            <variable doc="" name="Style.CSS_CELL_TODAY" />
            <variable citdl="Array[](Number[])" doc="The collection of calendar cell dates that is parallel to the cells collection. The array contains dates field arrays in the format of [YYYY, M, D]." name="cellDates" />
            <variable citdl="Object" doc="The set of default Config property keys and values for the Calendar" name="YAHOO.widget.Calendar._DEFAULT_CONFIG" />
            <variable citdl="String" doc="Constant used to represent medium date field string formats (e.g. Mon)" name="YAHOO.widget.Calendar.MEDIUM" />
            <variable doc="" name="Style.CSS_ROW_HEADER" />
            <variable citdl="String" doc="Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)" name="YAHOO.widget.Calendar.RANGE" />
            <variable citdl="String" doc="Type constant used for renderers to represent an individual date (M/D/Y)" name="YAHOO.widget.Calendar.DATE" />
            <variable doc="" name="Style.CSS_CELL_HOVER" />
            <variable doc="" name="Style.CSS_CELL_SELECTOR" />
            <variable doc="" name="Style.CSS_WITH_TITLE" />
            <variable citdl="Object" doc="The local object which contains the Calendar&apos;s options" name="Options" />
            <variable doc="" name="Style.CSS_WEEKDAY_ROW" />
            <variable doc="" name="Style.CSS_WEEKDAY_CELL" />
            <variable doc="" name="Style.CSS_FOOTER" />
            <variable doc="" name="Style.CSS_CELL_SELECTABLE" />
            <variable doc="" name="Style.CSS_ROW_FOOTER" />
            <variable doc="" name="Style.CSS_CELL_TOP" />
            <variable citdl="Object" doc="The local object which contains the Calendar&apos;s locale settings" name="Locale" />
            <variable citdl="HTMLTableCellElement[]" doc="The collection of calendar table cells" name="cells" />
            <variable citdl="String" doc="Constant used to represent short date field string formats (e.g. Tu or Feb)" name="YAHOO.widget.Calendar.SHORT" />
            <variable doc="" name="Style.CSS_CELL_SELECTED" />
            <variable doc="" name="Style.CSS_CELL_BOTTOM" />
            <variable citdl="Object" doc="The set of default Config property keys and values for the Calendar.&#xA;&lt;p&gt;&#xA;NOTE: This property is made public in order to allow users to change &#xA;the default values of configuration properties. Users should not &#xA;modify the key string, unless they are overriding the Calendar implementation&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The property is an object with key/value pairs, the key being the &#xA;uppercase configuration property name and the value being an object &#xA;literal with a key string property, and a value property, specifying the &#xA;default value of the property. To override a default value, you can set&#xA;the value property, for example, &lt;code&gt;YAHOO.widget.Calendar.DEFAULT_CONFIG.MULTI_SELECT.value = true;&lt;/code&gt;" name="YAHOO.widget.Calendar.DEFAULT_CONFIG" />
            <variable citdl="Object" doc="A map of DOM event handlers to attach to cells associated with specific CSS class names" name="domEventMap" />
            <variable citdl="Number" doc="Constant that represents the total number of date cells that are displayed in a given month" name="YAHOO.widget.Calendar.DISPLAY_DAYS" />
            <variable citdl="HTMLElement" doc="The DOM element reference that points to this calendar&apos;s container element. The calendar will be inserted into this element when the shell is rendered." name="oDomContainer" />
            <variable citdl="Object" doc="The set of default style constants for the Calendar" name="YAHOO.widget.Calendar._STYLES" />
            <variable doc="" name="Style.CSS_NAV_LEFT" />
            <variable doc="" name="Style.CSS_NAV" />
            <variable citdl="String" doc="Returns a string representing the current browser." name="browser" />
          </scope>
          <scope doc="" ilk="namespace" name="Calendar2up">
            <variable doc="" name="Cal2up" />
          </scope>
          <scope doc="YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates&#xA;the ability to have multi-page calendar views that share a single dataset and are&#xA;dependent on each other.&#xA;The calendar group instance will refer to each of its elements using a 0-based index.&#xA;For example, to construct the placeholder for a calendar group widget with id &quot;cal1&quot; and&#xA;containerId of &quot;cal1Container&quot;, the markup would be as follows:&#xA;&lt;xmp&gt;&#xA;&lt;div id=&quot;cal1Container_0&quot;&gt;&lt;/div&gt;&#xA;&lt;div id=&quot;cal1Container_1&quot;&gt;&lt;/div&gt;&#xA;&lt;/xmp&gt;&#xA;The tables for the calendars (&quot;cal1_0&quot; and &quot;cal1_1&quot;) will be inserted into those containers.&#xA;&lt;p&gt;&#xA;&lt;strong&gt;NOTE: As of 2.4.0, the constructor&apos;s ID argument is optional.&lt;/strong&gt;&#xA;The CalendarGroup can be constructed by simply providing a container ID string, &#xA;or a reference to a container DIV HTMLElement (the element needs to exist &#xA;in the document).&#xA;E.g.:&#xA;&lt;xmp&gt;&#xA;var c = new YAHOO.widget.CalendarGroup(&quot;calContainer&quot;, configOptions);&#xA;&lt;/xmp&gt;&#xA;or:&#xA;&lt;xmp&gt;&#xA;var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);&#xA;var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);&#xA;&lt;/xmp&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.&#xA;For example if an ID is not provided, and the container&apos;s ID is &quot;calContainer&quot;, the CalendarGroup&apos;s ID will be set to &quot;calContainer_t&quot;.&#xA;&lt;/p&gt;" ilk="class" name="CalendarGroup">
            <scope attributes="__ctor__" doc="YAHOO.widget.CalendarGroup is a special container class for YAHOO.widget.Calendar. This class facilitates&#xA;the ability to have multi-page calendar views that share a single dataset and are&#xA;dependent on each other.&#xA;The calendar group instance will refer to each of its elements using a 0-based index.&#xA;For example, to construct the placeholder for a calendar group widget with id &quot;cal1&quot; and&#xA;containerId of &quot;cal1Container&quot;, the markup would be as follows:&#xA;&lt;xmp&gt;&#xA;&lt;div id=&quot;cal1Container_0&quot;&gt;&lt;/div&gt;&#xA;&lt;div id=&quot;cal1Container_1&quot;&gt;&lt;/div&gt;&#xA;&lt;/xmp&gt;&#xA;The tables for the calendars (&quot;cal1_0&quot; and &quot;cal1_1&quot;) will be inserted into those containers.&#xA;&lt;p&gt;&#xA;&lt;strong&gt;NOTE: As of 2.4.0, the constructor&apos;s ID argument is optional.&lt;/strong&gt;&#xA;The CalendarGroup can be constructed by simply providing a container ID string, &#xA;or a reference to a container DIV HTMLElement (the element needs to exist &#xA;in the document).&#xA;E.g.:&#xA;&lt;xmp&gt;&#xA;var c = new YAHOO.widget.CalendarGroup(&quot;calContainer&quot;, configOptions);&#xA;&lt;/xmp&gt;&#xA;or:&#xA;&lt;xmp&gt;&#xA;var containerDiv = YAHOO.util.Dom.get(&quot;calContainer&quot;);&#xA;var c = new YAHOO.widget.CalendarGroup(containerDiv, configOptions);&#xA;&lt;/xmp&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;If not provided, the ID will be generated from the container DIV ID by adding an &quot;_t&quot; suffix.&#xA;For example if an ID is not provided, and the container&apos;s ID is &quot;calContainer&quot;, the CalendarGroup&apos;s ID will be set to &quot;calContainer_t&quot;.&#xA;&lt;/p&gt;" ilk="function" name="CalendarGroup" signature="CalendarGroup(id, container, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable citdl="String | HTMLElement" doc="The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document." ilk="argument" name="container" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the CalendarGroup." ilk="argument" name="config" />
            </scope>
            <scope doc="Deselects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.&#xA;deselectCell will deselect the cell at the specified index on each displayed Calendar page." ilk="function" name="deselectCell" signature="deselectCell(cellIndex) =&gt; Date[]">
              <variable citdl="Number" doc="The index of the cell to deselect." ilk="argument" name="cellIndex" />
            </scope>
            <scope doc="Adds a weekday to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the weekday passed to this method." ilk="function" name="addWeekdayRenderer" signature="addWeekdayRenderer(weekday, fnRender)">
              <variable citdl="Number" doc="The weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc." ilk="argument" name="weekday" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
            </scope>
            <scope doc="Calls the render function of all child calendars within the group." ilk="function" name="render" signature="render()" />
            <scope doc="Navigates to the next year in the currently selected month in the calendar widget." ilk="function" name="nextYear" signature="nextYear()" />
            <scope doc="Delegates a configuration property to the CustomEvents associated with the CalendarGroup&apos;s children" ilk="function" name="delegateConfig" signature="delegateConfig(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The default Config handler for the &quot;pagedate&quot; property" ilk="function" name="configPageDate" signature="configPageDate(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Subtcats the designated number of years from the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" name="subtractYears" signature="subtractYears(count)">
              <variable citdl="Number" doc="The number of years to subtract from the current calendar" ilk="argument" name="count" />
            </scope>
            <scope doc="Navigates to the previous month page in the calendar widget." ilk="function" name="previousMonth" signature="previousMonth()" />
            <scope doc="Selects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once selection has completed, render must be &#xA;called for the changes to be reflected visually." ilk="function" name="select" signature="select(date) =&gt; Date[]">
              <variable citdl="String/Date/Date[]" doc="The date string of dates to select in the current calendar. Valid formats are&#xA;individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;This method can also take a JavaScript Date object or an array of Date objects." ilk="argument" name="date" />
            </scope>
            <scope doc="Calls a function within all child Calendars within this CalendarGroup." ilk="function" name="callChildFunction" signature="callChildFunction(fnName, args)">
              <variable citdl="String" doc="The name of the function" ilk="argument" name="fnName" />
              <variable citdl="Array" doc="The arguments to pass to the function" ilk="argument" name="args" />
            </scope>
            <scope doc="Deselects a date or a collection of dates on the current calendar. This method, by default,&#xA;does not call the render method explicitly. Once deselection has completed, render must be &#xA;called for the changes to be reflected visually." ilk="function" name="deselect" signature="deselect(date) =&gt; Date[]">
              <variable citdl="String/Date/Date[]" doc="The date string of dates to deselect in the current calendar. Valid formats are&#xA;individual date(s) (12/24/2005,12/26/2005) or date range(s) (12/24/2005-1/1/2006).&#xA;Multiple comma-delimited dates can also be passed to this method (12/24/2005,12/11/2005-12/13/2005).&#xA;This method can also take a JavaScript Date object or an array of Date objects." ilk="argument" name="date" />
            </scope>
            <scope doc="Proxy subscriber to subscribe to the CalendarGroup&apos;s child Calendars&apos; CustomEvents" ilk="function" name="sub" signature="sub(fn, obj, bOverride)">
              <variable citdl="Function" doc="The function to subscribe to this CustomEvent" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The CustomEvent&apos;s scope object" ilk="argument" name="obj" />
              <variable citdl="Boolean" doc="Whether or not to apply scope correction" ilk="argument" name="bOverride" />
            </scope>
            <scope doc="Initializes CalendarGroup&apos;s built-in CustomEvents" ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Navigates to the previous year in the currently selected month in the calendar widget." ilk="function" name="previousYear" signature="previousYear()" />
            <scope doc="Navigates to the next month page in the calendar widget." ilk="function" name="nextMonth" signature="nextMonth()" />
            <scope doc="The default Config handler for the &quot;pages&quot; property" ilk="function" name="configPages" signature="configPages(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Adds a function to all child Calendars within this CalendarGroup." ilk="function" name="setChildFunction" signature="setChildFunction(fnName, fn)">
              <variable citdl="String" doc="The name of the function" ilk="argument" name="fnName" />
              <variable citdl="Function" doc="The function to apply to each Calendar page object" ilk="argument" name="fn" />
            </scope>
            <scope doc="Adds a month to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the month passed to this method." ilk="function" name="addMonthRenderer" signature="addMonthRenderer(month, fnRender)">
              <variable citdl="Number" doc="The month (1-12) to associate with this renderer" ilk="argument" name="month" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
            </scope>
            <scope doc="Initializes the calendar group. All subclasses must call this method in order for the&#xA;group to be initialized properly." ilk="function" name="init" signature="init(id, container, config)">
              <variable citdl="String" doc="optional The id of the table element that will represent the CalendarGroup widget. As of 2.4.0, this argument is optional." ilk="argument" name="id" />
              <variable citdl="String | HTMLElement" doc="The id of the container div element that will wrap the CalendarGroup table, or a reference to a DIV element which exists in the document." ilk="argument" name="container" />
              <variable citdl="Object" doc="optional The configuration object containing the initial configuration values for the CalendarGroup." ilk="argument" name="config" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Destroys the CalendarGroup instance. The method will remove references&#xA;to HTML elements, remove any event listeners added by the CalendarGroup.&#xA;It will also destroy the Config and CalendarNavigator instances created by the &#xA;CalendarGroup and the individual Calendar instances created for each page." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Adds a renderer to the render stack. The function reference passed to this method will be executed&#xA;when a date cell matches the conditions specified in the date string for this renderer." ilk="function" name="addRenderer" signature="addRenderer(sDates, fnRender)">
              <variable citdl="String" doc="A date string to associate with the specified renderer. Valid formats&#xA;include date (12/24/2005), month/day (12/24), and range (12/1/2004-1/1/2005)" ilk="argument" name="sDates" />
              <variable citdl="Function" doc="The function executed to render cells that match the render rules for this renderer." ilk="argument" name="fnRender" />
            </scope>
            <scope doc="Removes all custom renderers added to the CalendarGroup through the addRenderer, addMonthRenderer and &#xA;addWeekRenderer methods. CalendarGroup&apos;s render method needs to be called to after removing renderers &#xA;to see the changes applied." ilk="function" name="removeRenderers" signature="removeRenderers()" />
            <scope doc="Selects dates in the CalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.&#xA;The value of the MULTI_SELECT Configuration attribute will determine the set of dates which get selected. &#xA;&lt;ul&gt;&#xA;&lt;li&gt;If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed Calendar page.&lt;/li&gt;&#xA;&lt;li&gt;If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed Calendar page.&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" name="selectCell" signature="selectCell(cellIndex) =&gt; Date[]">
              <variable citdl="Number" doc="The index of the cell to be selected." ilk="argument" name="cellIndex" />
            </scope>
            <scope doc="Renders a footer for the 2-up calendar container. By default, this method is&#xA;unimplemented." ilk="function" name="renderFooter" signature="renderFooter()" />
            <scope doc="The default Config handler for the CalendarGroup &quot;selected&quot; property" ilk="function" name="configSelected" signature="configSelected(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Proxy unsubscriber to unsubscribe from the CalendarGroup&apos;s child Calendars&apos; CustomEvents" ilk="function" name="unsub" signature="unsub(fn, obj)">
              <variable citdl="Function" doc="The function to subscribe to this CustomEvent" ilk="argument" name="fn" />
              <variable citdl="Object" doc="The CustomEvent&apos;s scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="Gets the list of currently selected dates from the calendar." ilk="function" name="getSelectedDates" signature="getSelectedDates() =&gt; " />
            <scope doc="Constructs a child calendar. This method can be overridden if a subclassed version of the default&#xA;calendar is to be used." ilk="function" name="constructChild" signature="constructChild(id, containerId, config) =&gt; YAHOO.widget.Calendar">
              <variable citdl="String" doc="The id of the table element that will represent the calendar widget" ilk="argument" name="id" />
              <variable citdl="String" doc="The id of the container div element that will wrap the calendar table" ilk="argument" name="containerId" />
              <variable citdl="Object" doc="The configuration object containing the Calendar&apos;s arguments" ilk="argument" name="config" />
            </scope>
            <scope doc="Sets the month on a Date object, taking into account year rollover if the month is less than 0 or greater than 11.&#xA;The Date object passed in is modified. It should be cloned before passing it into this method if the original value needs to be maintained" ilk="function" name="_setMonthOnDate" signature="_setMonthOnDate(date, iMonth)">
              <variable citdl="Date" doc="The Date object on which to set the month index" ilk="argument" name="date" />
              <variable citdl="Number" doc="The month index to set" ilk="argument" name="iMonth" />
            </scope>
            <scope doc="Resets the calendar widget to the originally selected month and year, and &#xA;sets the calendar to the initial selection(s)." ilk="function" name="reset" signature="reset()" />
            <scope doc="Deselects all dates on the current calendar." ilk="function" name="deselectAll" signature="deselectAll() =&gt; Date[]" />
            <scope doc="Sets the calendar group&apos;s month explicitly. This month will be set into the first&#xA;page of the multi-page calendar, and all other months will be iterated appropriately." ilk="function" name="setMonth" signature="setMonth(month)">
              <variable citdl="Number" doc="The numeric month, from 0 (January) to 11 (December)" ilk="argument" name="month" />
            </scope>
            <scope doc="Clears the selected dates in the current calendar widget and sets the calendar&#xA;to the current month and year." ilk="function" name="clear" signature="clear()" />
            <scope doc="Returns the Calendar page instance which has a pagedate (month/year) matching the given date. &#xA;Returns null if no match is found." ilk="function" name="getCalendarPage" signature="getCalendarPage(date) =&gt; Calendar">
              <variable citdl="Date" doc="The JavaScript Date object for which a Calendar page is to be found." ilk="argument" name="date" />
            </scope>
            <scope doc="Adds the designated number of months to the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" name="addMonths" signature="addMonths(count)">
              <variable citdl="Number" doc="The number of months to add to the current calendar" ilk="argument" name="count" />
            </scope>
            <scope doc="Subtracts the designated number of months from the current calendar month, and sets the current&#xA;calendar page date to the new month." ilk="function" name="subtractMonths" signature="subtractMonths(count)">
              <variable citdl="Number" doc="The number of months to subtract from the current calendar" ilk="argument" name="count" />
            </scope>
            <scope doc="Fixes the width of the CalendarGroup container element, to account for miswrapped floats" ilk="function" name="_fixWidth" signature="_fixWidth()" />
            <scope doc="Sets the calendar group&apos;s year explicitly. This year will be set into the first&#xA;page of the multi-page calendar, and all other months will be iterated appropriately." ilk="function" name="setYear" signature="setYear(year)">
              <variable citdl="Number" doc="The numeric 4-digit year" ilk="argument" name="year" />
            </scope>
            <scope doc="Renders the header for the CalendarGroup." ilk="function" name="renderHeader" signature="renderHeader()" />
            <scope doc="Adds the designated number of years to the current calendar, and sets the current&#xA;calendar page date to the new month." ilk="function" name="addYears" signature="addYears(count)">
              <variable citdl="Number" doc="The number of years to add to the current calendar" ilk="argument" name="count" />
            </scope>
            <variable citdl="String" doc="CSS class representing the close icon for the 2-up calendar" name="YAHOO.widget.CalendarGroup.CSS_2UPCLOSE" />
            <variable citdl="String" doc="The unique id associated with the CalendarGroup container" name="containerId" />
            <variable citdl="Object" doc="The local object which contains the CalendarGroup&apos;s locale settings" name="Locale" />
            <variable citdl="YAHOO.util.Config" doc="The Config object used to hold the configuration variables for the CalendarGroup" name="cfg" />
            <variable citdl="YAHOO.widget.Calendar[]" doc="The collection of Calendar pages contained within the CalendarGroup" name="pages" />
            <variable citdl="String" doc="CSS class representing the title for the 2-up calendar" name="YAHOO.widget.CalendarGroup.CSS_2UPTITLE" />
            <variable citdl="String" doc="The unique id associated with the CalendarGroup" name="id" />
            <variable citdl="Object An object with key/value pairs, the key being the &#xA;uppercase configuration property name and the value being an objec &#xA;literal with a key string property, and a value property, specifying the &#xA;default value of the property" doc="The set of default Config property keys and values for the CalendarGroup.&#xA;&lt;p&gt;&#xA;NOTE: This property is made public in order to allow users to change &#xA;the default values of configuration properties. Users should not &#xA;modify the key string, unless they are overriding the Calendar implementation&#xA;&lt;/p&gt;" name="YAHOO.widget.CalendarGroup.DEFAULT_CONFIG" />
            <variable citdl="String" doc="CSS class representing the container for the calendar" name="YAHOO.widget.CalendarGroup.CSS_CONTAINER" />
            <variable citdl="String" doc="CSS class representing the container for the calendar" name="YAHOO.widget.CalendarGroup.CSS_MULTI_UP" />
            <variable citdl="Object" doc="The set of default Config property keys and values for the CalendarGroup" name="YAHOO.widget.CalendarGroup._DEFAULT_CONFIG" />
            <variable citdl="Object" doc="The local object which contains the CalendarGroup&apos;s options" name="Options" />
          </scope>
          <scope doc="The CalendarNavigator is used along with a Calendar/CalendarGroup to &#xA;provide a Month/Year popup navigation control, allowing the user to navigate &#xA;to a specific month/year in the Calendar/CalendarGroup without having to &#xA;scroll through months sequentially" ilk="class" name="CalendarNavigator">
            <scope attributes="__ctor__" doc="The CalendarNavigator is used along with a Calendar/CalendarGroup to &#xA;provide a Month/Year popup navigation control, allowing the user to navigate &#xA;to a specific month/year in the Calendar/CalendarGroup without having to &#xA;scroll through months sequentially" ilk="function" name="CalendarNavigator" signature="CalendarNavigator(cal)">
              <variable citdl="Calendar|CalendarGroup" doc="The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached." ilk="argument" name="cal" />
            </scope>
            <scope doc="Returns the month value (index), from the month UI element" ilk="function" name="_getMonthFromUI" signature="_getMonthFromUI() =&gt; Number" />
            <scope doc="Creates the navigator&apos;s containing HTMLElement, it&apos;s contents, and appends &#xA;the containg element to the Calendar/CalendarGroup&apos;s container." ilk="function" name="createNav" signature="createNav()" />
            <scope doc="Updates the Calendar rendered state, based on the state of the CalendarNavigator" ilk="function" name="_update" signature="_update(cal)">
              <variable doc="The Calendar instance to update" ilk="argument" name="cal" />
            </scope>
            <scope doc="Default Keyboard event handler to capture up/down/pgup/pgdown&#xA;on the Navigator&apos;s year control (yearEl)." ilk="function" name="_handleDirectionKeys" signature="_handleDirectionKeys(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
            </scope>
            <scope doc="Renders the HTML for the navigator, adding it to the &#xA;document and attaches event listeners if it has not &#xA;already been rendered." ilk="function" name="render" signature="render()" />
            <scope doc="Displays the navigator and mask, updating the input controls to reflect the &#xA;currently set month and year. The show method will invoke the render method&#xA;if the navigator has not been renderered already, allowing for lazy rendering&#xA;of the control.&#xA;The show method will fire the Calendar/CalendarGroup&apos;s beforeShowNav and showNav events" ilk="function" name="show" signature="show()" />
            <scope doc="Removes all renderered HTML elements for the Navigator from&#xA;the DOM, purges event listeners and clears (nulls) any property&#xA;references to HTML references" ilk="function" name="erase" signature="erase()" />
            <scope doc="Default Keyboard event handler to capture Shift-Tab &#xA;on the first control (firstCtrl) in the Navigator." ilk="function" name="_handleShiftTabKey" signature="_handleShiftTabKey(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
            </scope>
            <scope doc="Hides the navigator and mask, without updating the Calendar/CalendarGroup&apos;s state" ilk="function" name="cancel" signature="cancel()" />
            <scope doc="Attaches DOM listeners for keyboard support. &#xA;Tab/Shift-Tab looping, Enter Key Submit on Year element,&#xA;Up/Down/PgUp/PgDown year increment on Year element&#xA;&lt;p&gt;&#xA;NOTE: MacOSX Safari 2.x doesn&apos;t let you tab to buttons and &#xA;MacOSX Gecko does not let you tab to buttons or select controls,&#xA;so for these browsers, Tab/Shift-Tab looping is limited to the &#xA;elements which can be reached using the tab key.&#xA;&lt;/p&gt;" ilk="function" name="applyKeyListeners" signature="applyKeyListeners()" />
            <scope doc="Validates the current state of the UI controls" ilk="function" name="validate" signature="validate() =&gt; Boolean" />
            <scope doc="Hides the navigator&apos;s mask element" ilk="function" name="hideMask" signature="hideMask()" />
            <scope doc="Updates the Navigator&apos;s month UI, based on the month value set on the Navigator object" ilk="function" name="_updateMonthUI" signature="_updateMonthUI()" />
            <scope doc="Hides the navigator and mask&#xA;The show method will fire the Calendar/CalendarGroup&apos;s beforeHideNav event and hideNav events" ilk="function" name="hide" signature="hide()" />
            <scope doc="Updates the Calendar/CalendarGroup&apos;s pagedate with the currently set month and year if valid.&#xA;&lt;p&gt;&#xA;If the currently set month/year is invalid, a validation error will be displayed and the &#xA;Calendar/CalendarGroup&apos;s pagedate will not be updated.&#xA;&lt;/p&gt;" ilk="function" name="submit" signature="submit()" />
            <scope doc="Renders the contents of the navigator" ilk="function" name="renderNavContents" signature="renderNavContents(html) =&gt; Array">
              <variable citdl="Array" doc="The HTML buffer to append the HTML to." ilk="argument" name="html" />
            </scope>
            <scope doc="Init lifecycle method called as part of construction" ilk="function" name="init" signature="init(cal)">
              <variable citdl="Calendar" doc="The instance of the Calendar or CalendarGroup to which this CalendarNavigator should be attached" ilk="argument" name="cal" />
            </scope>
            <scope doc="Displays the validation error UI for the year control" ilk="function" name="setYearError" signature="setYearError()" />
            <scope doc="Returns the year value, from the Navitator&apos;s year UI element" ilk="function" name="_getYearFromUI" signature="_getYearFromUI() =&gt; Number" />
            <scope doc="Used to set the width/height of the mask in pixels to match the Calendar Container.&#xA;Currently only used for IE6 or IE in quirks mode. The other A-Grade browser are handled using CSS (width/height 100%).&#xA;&lt;p&gt;&#xA;The method is also registered as an HTMLElement resize listener on the Calendars container element.&#xA;&lt;/p&gt;" ilk="function" name="_syncMask" signature="_syncMask()" />
            <scope doc="Returns the current year set on the navigator&#xA;Note: This may not be the year set in the UI, if &#xA;the UI contains an invalid value." ilk="function" name="getYear" signature="getYear() =&gt; Number" />
            <scope doc="Destroys the Navigator object and any HTML references" ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Returns the current month set on the navigator&#xA;Note: This may not be the month set in the UI, if &#xA;the UI contains an invalid value." ilk="function" name="getMonth" signature="getMonth() =&gt; Number" />
            <scope doc="Displays the navigator&apos;s mask element" ilk="function" name="showMask" signature="showMask()" />
            <scope doc="Renders the submit/cancel buttons for the navigator" ilk="function" name="renderButton" signature="renderButton() =&gt; String" />
            <scope doc="Clears all validation and error messages in the UI" ilk="function" name="clearErrors" signature="clearErrors()" />
            <scope doc="Attaches DOM event listeners to the rendered elements&#xA;&lt;p&gt;&#xA;The method will call applyKeyListeners, to setup keyboard specific &#xA;listeners&#xA;&lt;/p&gt;" ilk="function" name="applyListeners" signature="applyListeners()" />
            <scope doc="Sets the current month on the Navigator, and updates the UI" ilk="function" name="setMonth" signature="setMonth(nMonth)">
              <variable citdl="Number" doc="The month index, from 0 (Jan) through 11 (Dec)." ilk="argument" name="nMonth" />
            </scope>
            <scope doc="Removes the validation error UI for the year control" ilk="function" name="clearYearError" signature="clearYearError()" />
            <scope doc="Clears the navigator&apos;s error message and hides the error panel" ilk="function" name="clearError" signature="clearError()" />
            <scope doc="Displays an error message in the Navigator&apos;s error panel" ilk="function" name="setError" signature="setError(msg)">
              <variable citdl="String" doc="The error message to display" ilk="argument" name="msg" />
            </scope>
            <scope doc="Removes/purges DOM event listeners from the rendered elements" ilk="function" name="purgeListeners" signature="purgeListeners()" />
            <scope doc="Sets up references to the first and last focusable element in the Navigator&apos;s UI&#xA;in terms of tab order (Naviagator&apos;s firstEl and lastEl properties). The references&#xA;are used to control modality by looping around from the first to the last control&#xA;and visa versa for tab/shift-tab navigation.&#xA;&lt;p&gt;&#xA;See &lt;a href=&quot;#applyKeyListeners&quot;&gt;applyKeyListeners&lt;/a&gt;&#xA;&lt;/p&gt;" ilk="function" name="_setFirstLastElements" signature="_setFirstLastElements()" />
            <scope doc="Protected implementation to handle how UI elements are &#xA;hidden/shown." ilk="function" name="_show" signature="_show()" />
            <scope doc="Sets the initial focus, based on the configured value" ilk="function" name="setInitialFocus" signature="setInitialFocus()" />
            <scope doc="Default Keyboard event handler to capture Enter &#xA;on the Navigator&apos;s year control (yearEl)" ilk="function" name="_handleEnterKey" signature="_handleEnterKey(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
            </scope>
            <scope doc="Retrieve Navigator configuration values from &#xA;the parent Calendar/CalendarGroup&apos;s config value.&#xA;&lt;p&gt;&#xA;If it has not been set in the user provided configuration, the method will &#xA;return the default value of the configuration property, as set in DEFAULT_CONFIG&#xA;&lt;/p&gt;" ilk="function" name="__getCfg" signature="__getCfg(Case, true,) =&gt; ">
              <variable citdl="String" doc="sensitive property name." ilk="argument" name="Case" />
              <variable citdl="Boolean" doc="if the property is a string property, false if not." ilk="argument" name="true," />
            </scope>
            <scope doc="Sets the current year on the Navigator, and updates the UI. If the &#xA;provided year is invalid, it will not be set." ilk="function" name="setYear" signature="setYear(nYear)">
              <variable citdl="Number" doc="The full year value to set the Navigator to." ilk="argument" name="nYear" />
            </scope>
            <scope doc="Default Keyboard event handler to capture Tab &#xA;on the last control (lastCtrl) in the Navigator." ilk="function" name="_handleTabKey" signature="_handleTabKey(e)">
              <variable citdl="Event" doc="The DOM event being handled" ilk="argument" name="e" />
            </scope>
            <scope doc="Creates the Mask HTMLElement and appends it to the Calendar/CalendarGroups&#xA;container." ilk="function" name="createMask" signature="createMask()" />
            <scope doc="Removes/purges DOM listeners for keyboard support" ilk="function" name="purgeKeyListeners" signature="purgeKeyListeners()" />
            <scope doc="Renders the year label and control for the navigator" ilk="function" name="renderYear" signature="renderYear(html) =&gt; Array">
              <variable citdl="Array" doc="The HTML buffer to append the HTML to." ilk="argument" name="html" />
            </scope>
            <scope doc="Updates the Navigator&apos;s year UI, based on the year value set on the Navigator object" ilk="function" name="_updateYearUI" signature="_updateYearUI()" />
            <variable citdl="Object" doc="Object literal containing the default configuration values for the CalendarNavigator" name="_DEFAULT_CFG" />
            <variable citdl="RegExp" doc="Regular expression used to validate the year input" name="YAHOO.widget.CalendarNavigator.YR_PATTERN" />
            <variable citdl="Number" doc="Artificial delay (in ms) between the time the Navigator is hidden&#xA;and the Calendar/CalendarGroup state is updated. Allows the user&#xA;the see the Calendar/CalendarGroup page changing. If set to 0&#xA;the Calendar/CalendarGroup page will be updated instantly" name="YAHOO.widget.CalendarNavigator.UPDATE_DELAY" />
            <variable citdl="HTMLElement" doc="Reference to the last focusable control in the navigator (by default cancelEl)" name="lastCtrl" />
            <variable citdl="String" doc="The suffix added to the Navigator&apos;s ID, to generate&#xA;a unique ID for the month control." name="YAHOO.widget.CalendarNavigator.MONTH_SUFFIX" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to display validation errors" name="errorEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to update the Calendar/Calendar group&#xA;with the month/year values" name="submitEl" />
            <variable citdl="String" doc="Class applied to default controls" name="YAHOO.widget.CalendarNavigator.CLASSES.DEFAULT" />
            <variable citdl="String" doc="The suffix added to the Calendar/CalendarGroup&apos;s ID, to generate&#xA;a unique ID for the Navigator and it&apos;s bounding box." name="YAHOO.widget.CalendarNavigator.ID_SUFFIX" />
            <variable citdl="String" doc="Class applied to the Calendar/CalendarGroup&apos;s bounding box to indicate&#xA;the Navigator is currently visible" name="YAHOO.widget.CalendarNavigator.CLASSES.NAV_VISIBLE" />
            <variable citdl="String" doc="The unique ID for this CalendarNavigator instance" name="id" />
            <variable citdl="String" doc="The suffix added to the Navigator&apos;s ID, to generate&#xA;a unique ID for the year control." name="YAHOO.widget.CalendarNavigator.YEAR_SUFFIX" />
            <variable citdl="HTMLElement" doc="Reference to the first focusable control in the navigator (by default monthEl)" name="firstCtrl" />
            <variable doc="Private flag, to identify IE Quirks" name="__isIEQuirks" />
            <variable citdl="RegExp" doc="Regular expression used to trim strings" name="YAHOO.widget.CalendarNavigator.TRIM" />
            <variable citdl="String" doc="Class applied to the month label/control bounding box" name="YAHOO.widget.CalendarNavigator.CLASSES.MONTH" />
            <variable citdl="Number" doc="The amount by which to increment the current year value,&#xA;when the arrow up/down key is pressed on the year control" name="YAHOO.widget.CalendarNavigator.YR_MINOR_INC" />
            <variable citdl="Object" doc="Object literal containing the default configuration values for the CalendarNavigator&#xA;The configuration object is expected to follow the format below, with the properties being&#xA;case sensitive.&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;strings&lt;/dt&gt;&#xA;&lt;dd&gt;&lt;em&gt;Object&lt;/em&gt; :  An object with the properties shown below, defining the string labels to use in the Navigator&apos;s UI&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;month&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the month label. Defaults to &quot;Month&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;year&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the year label. Defaults to &quot;Year&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;submit&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the submit button label. Defaults to &quot;Okay&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;cancel&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for the cancel button label. Defaults to &quot;Cancel&quot;.&lt;/dd&gt;&#xA;&lt;dt&gt;invalidYear&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The string to use for invalid year values. Defaults to &quot;Year needs to be a number&quot;.&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;monthFormat&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : The month format to use. Either YAHOO.widget.Calendar.LONG, or YAHOO.widget.Calendar.SHORT. Defaults to YAHOO.widget.Calendar.LONG&lt;/dd&gt;&#xA;&lt;dt&gt;initialFocus&lt;/dt&gt;&lt;dd&gt;&lt;em&gt;String&lt;/em&gt; : Either &quot;year&quot; or &quot;month&quot; specifying which input control should get initial focus. Defaults to &quot;year&quot;&lt;/dd&gt;&#xA;&lt;/dl&gt;" name="DEFAULT_CONFIG" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to render the navigator&apos;s bounding box" name="navEl" />
            <variable citdl="String" doc="Class applied to the Navigator mask&apos;s bounding box" name="YAHOO.widget.CalendarNavigator.CLASSES.MASK" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to input the month" name="monthEl" />
            <variable citdl="Number" doc="The amount by which to increment the current year value,&#xA;when the page up/down key is pressed on the year control" name="YAHOO.widget.CalendarNavigator.YR_MAJOR_INC" />
            <variable citdl="Object" doc="YAHOO.widget.CalendarNavigator.CLASSES contains constants&#xA;for the class values applied to the CalendarNaviatgator&apos;s &#xA;DOM elements" name="YAHOO.widget.CalendarNavigator.CLASSES" />
            <variable citdl="String" doc="Class applied to the validation error area&apos;s bounding box" name="YAHOO.widget.CalendarNavigator.CLASSES.ERROR" />
            <variable citdl="String" doc="Class applied to the submit/cancel button&apos;s bounding box" name="YAHOO.widget.CalendarNavigator.CLASSES.BUTTONS" />
            <variable citdl="String" doc="Class applied to the Calendar Navigator&apos;s bounding box" name="YAHOO.widget.CalendarNavigator.CLASSES.NAV" />
            <variable citdl="String" doc="Class applied to controls with invalid data (e.g. a year input field with invalid an year)" name="YAHOO.widget.CalendarNavigator.CLASSES.INVALID" />
            <variable citdl="String" doc="The suffix added to the Navigator&apos;s ID, to generate&#xA;a unique ID for the error bounding box." name="YAHOO.widget.CalendarNavigator.ERROR_SUFFIX" />
            <variable citdl="String" doc="Class applied to buttons wrapping element" name="YAHOO.widget.CalendarNavigator.CLASSES.BUTTON" />
            <variable citdl="String" doc="Class applied to the year input control" name="YAHOO.widget.CalendarNavigator.CLASSES.YEAR_CTRL" />
            <variable citdl="Number" doc="Internal state property for the current year displayed in the navigator" name="_year" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to render the navigator&apos;s mask" name="maskEl" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to input the year" name="yearEl" />
            <variable citdl="String" doc="Class applied to the year label/control bounding box" name="YAHOO.widget.CalendarNavigator.CLASSES.YEAR" />
            <variable citdl="String" doc="The suffix added to the Navigator&apos;s ID, to generate&#xA;a unique ID for the &quot;Cancel&quot; button." name="YAHOO.widget.CalendarNavigator.CANCEL_SUFFIX" />
            <variable doc="Private flag, to identify MacOS" name="__isMac" />
            <variable citdl="HTMLDocument" doc="The document containing the Calendar/Calendar group instance" name="_doc" />
            <variable citdl="String" doc="Class applied to the month input control" name="YAHOO.widget.CalendarNavigator.CLASSES.MONTH_CTRL" />
            <variable citdl="Number" doc="Internal state property for the current month index displayed in the navigator" name="_month" />
            <variable citdl="Boolean" doc="Private internal state property which indicates whether or not the &#xA;Navigator has been rendered." name="__rendered" />
            <variable citdl="Number" doc="The number of digits to which the year input control is to be limited." name="YAHOO.widget.CalendarNavigator.YR_MAX_DIGITS" />
            <variable citdl="{Calendar|CalendarGroup}" doc="The Calendar/CalendarGroup instance to which the navigator belongs" name="cal" />
            <variable citdl="HTMLElement" doc="Reference to the HTMLElement used to hide the navigator without updating the &#xA;Calendar/Calendar group" name="cancelEl" />
            <variable citdl="String" doc="The suffix added to the Navigator&apos;s ID, to generate&#xA;a unique ID for the &quot;Submit&quot; button." name="YAHOO.widget.CalendarNavigator.SUBMIT_SUFFIX" />
          </scope>
          <scope doc="" ilk="namespace" name="Calendar_Core" />
          <scope classrefs="YAHOO.util.Element" doc="The Carousel widget." ilk="class" name="Carousel">
            <scope attributes="__ctor__" doc="The Carousel widget." ilk="function" name="Carousel" signature="Carousel(el, cfg)">
              <variable citdl="HTMLElement | String" doc="The HTML element that represents the&#xA;the container that houses the Carousel." ilk="argument" name="el" />
              <variable citdl="Object" doc="(optional) The configuration values" ilk="argument" name="cfg" />
            </scope>
            <scope doc="Register carousels pagination template, append to interface, and populate." ilk="function" name="registerPagination" signature="registerPagination(template)">
              <variable citdl="String" doc="Pagination template as passed to lang.substitute" ilk="argument" name="template" />
            </scope>
            <scope doc="Display the Carousel." ilk="function" name="show" signature="show()" />
            <scope doc="Set focus on the Carousel." ilk="function" name="focus" signature="focus()" />
            <scope doc="Setup/Create the Carousel navigation element (if needed)." ilk="function" name="_setupCarouselNavigation" signature="_setupCarouselNavigation()" />
            <scope doc="Initialize the configuration attributes used to create the Carousel." ilk="function" name="initAttributes" signature="initAttributes(attrs)">
              <variable citdl="Object" doc="The set of configuration attributes for&#xA;creating the Carousel." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Set the value for the reveal amount percentage in the Carousel." ilk="function" name="_setRevealAmount" signature="_setRevealAmount(val) =&gt; Number">
              <variable citdl="Number" doc="The new value for revealAmount" ilk="argument" name="val" />
            </scope>
            <scope doc="Scroll the Carousel by a page backward." ilk="function" name="scrollPageBackward" signature="scrollPageBackward(ev, obj)">
              <variable citdl="Event" doc="The event object" ilk="argument" name="ev" />
              <variable citdl="Object" doc="The context object" ilk="argument" name="obj" />
            </scope>
            <scope doc="Validate the scrollIncrement value." ilk="function" name="_validateScrollIncrement" signature="_validateScrollIncrement(val) =&gt; Boolean">
              <variable citdl="Number" doc="The scrollIncrement value" ilk="argument" name="val" />
            </scope>
            <scope doc="Synchronize and redraw the Pager UI if necessary." ilk="function" name="syncPagerUi" signature="syncPagerUi()" />
            <scope doc="Set the correct class for the navigation buttons." ilk="function" name="_updateNavButtons" signature="_updateNavButtons(el, setFocus)">
              <variable citdl="Object" doc="The target button" ilk="argument" name="el" />
              <variable citdl="Boolean" doc="True to set focus ring, false otherwise." ilk="argument" name="setFocus" />
            </scope>
            <scope doc="Initialize the Carousel." ilk="function" name="init" signature="init(el, attrs)">
              <variable citdl="HTMLElement | String" doc="The html element that represents&#xA;the Carousel container." ilk="argument" name="el" />
              <variable citdl="Object" doc="The set of configuration attributes for&#xA;creating the Carousel." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Return true if the Carousel is still animating, or false otherwise." ilk="function" name="isAnimating" signature="isAnimating() =&gt; Boolean" />
            <scope doc="Fire custom events for enabling/disabling navigation elements." ilk="function" name="syncNavigation" signature="syncNavigation()" />
            <scope doc="Validate and navigation parameters." ilk="function" name="_validateNavigation" signature="_validateNavigation(cfg) =&gt; Boolean">
              <variable citdl="Object" doc="The navigation configuration" ilk="argument" name="cfg" />
            </scope>
            <scope doc="Update the state variables after scrolling the Carousel view port." ilk="function" name="updateStateAfterScroll" signature="updateStateAfterScroll(item, sentinel)">
              <variable citdl="Integer" doc="The index to which the Carousel has scrolled to." ilk="argument" name="item" />
              <variable citdl="Integer" doc="The last element in the view port." ilk="argument" name="sentinel" />
            </scope>
            <scope doc="Find the items within the Carousel and add them to the items table.&#xA;A Carousel item is identified by elements that matches the carousel&#xA;item element tag." ilk="function" name="parseCarouselItems" signature="parseCarouselItems()" />
            <scope doc="Synchronize and redraw the UI after an item is replaced." ilk="function" name="_syncUiForItemReplace" signature="_syncUiForItemReplace()" />
            <scope doc="Get full dimensions of an element." ilk="function" name="getDimensions" signature="getDimensions(el, which)">
              <variable citdl="Object" doc="The element to get the dimensions of" ilk="argument" name="el" />
              <variable citdl="String" doc="Get the height or width of an element" ilk="argument" name="which" />
            </scope>
            <scope doc="The &quot;click&quot; handler for anchor pagination." ilk="function" name="_pagerClickHandler" signature="_pagerClickHandler(ev)">
              <variable citdl="Event" doc="The event object" ilk="argument" name="ev" />
            </scope>
            <scope doc="Remove an item at index from the Carousel." ilk="function" name="removeItem" signature="removeItem(index) =&gt; Boolean">
              <variable citdl="Number" doc="The position to where in the list (starts from&#xA;zero)." ilk="argument" name="index" />
            </scope>
            <scope doc="Validate the revealAmount value." ilk="function" name="_validateRevealAmount" signature="_validateRevealAmount(val) =&gt; Boolean">
              <variable citdl="Number" doc="The revealAmount value" ilk="argument" name="val" />
            </scope>
            <scope doc="Stop auto-playing the Carousel." ilk="function" name="stopAutoPlay" signature="stopAutoPlay()" />
            <scope doc="Return true if the auto-scrolling of Carousel is &quot;on&quot;, or false&#xA;otherwise." ilk="function" name="isAutoPlayOn" signature="isAutoPlayOn() =&gt; Boolean" />
            <scope doc="Refresh the widget UI if it is not already rendered, on first item&#xA;addition." ilk="function" name="_refreshUi" signature="_refreshUi()" />
            <scope doc="Return the carouselItemEl for all items in the Carousel." ilk="function" name="getElementForItems" signature="getElementForItems() =&gt; Array" />
            <scope doc="Validate the numVisible value." ilk="function" name="_validateNumVisible" signature="_validateNumVisible(val) =&gt; Boolean">
              <variable citdl="Number" doc="The numVisible value" ilk="argument" name="val" />
            </scope>
            <scope doc="Get the page an item is on within carousel." ilk="function" name="getPageForItem" signature="getPageForItem(index) =&gt; Number">
              <variable citdl="Number" doc="Index of item" ilk="argument" name="index" />
            </scope>
            <scope doc="Handle the animation complete event." ilk="function" name="_animationCompleteHandler" signature="_animationCompleteHandler(ev, p, o)">
              <variable citdl="Event" doc="The event." ilk="argument" name="ev" />
              <variable citdl="Array" doc="The event parameters." ilk="argument" name="p" />
              <variable citdl="Object" doc="The object that has the state of the Carousel" ilk="argument" name="o" />
            </scope>
            <scope doc="The &quot;onchange&quot; handler for select box pagination." ilk="function" name="_pagerChangeHandler" signature="_pagerChangeHandler(ev)">
              <variable citdl="Event" doc="The event object" ilk="argument" name="ev" />
            </scope>
            <scope doc="Automatically scroll the contents of the Carousel." ilk="function" name="_autoScroll" signature="_autoScroll()" />
            <scope doc="Hide the Carousel." ilk="function" name="hide" signature="hide()" />
            <scope doc="Scroll the Carousel by an item forward." ilk="function" name="scrollForward" signature="scrollForward()" />
            <scope doc="Compute and return the position of a Carousel item based on its&#xA;position." ilk="function" name="getCarouselItemPosition" signature="getCarouselItemPosition(position)">
              <variable citdl="Number" doc="The position of the Carousel item." ilk="argument" name="position" />
            </scope>
            <scope doc="Set the value for the selected item." ilk="function" name="_setSelectedItem" signature="_setSelectedItem(val)">
              <variable citdl="Number" doc="The new value for &quot;selected&quot; item" ilk="argument" name="val" />
            </scope>
            <scope doc="Set the value for the number of visible items in the Carousel." ilk="function" name="_numVisibleSetter" signature="_numVisibleSetter(val) =&gt; Number">
              <variable citdl="Number" doc="The new value for numVisible" ilk="argument" name="val" />
            </scope>
            <scope doc="Return all items as an array." ilk="function" name="getItems" signature="getItems() =&gt; Array" />
            <scope doc="Return the string representation of the Carousel." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Replace an item at index witin Carousel." ilk="function" name="replaceItem" signature="replaceItem(item, index) =&gt; Boolean">
              <variable citdl="String | Object | HTMLElement" doc="The item to be appended&#xA;to the Carousel. If the parameter is a string, it is assumed to be&#xA;the content of the newly created item. If the parameter is an&#xA;object, it is assumed to supply the content and an optional class&#xA;and an optional id of the newly created item." ilk="argument" name="item" />
              <variable citdl="Number" doc="The position to where in the list (starts from&#xA;zero)." ilk="argument" name="index" />
            </scope>
            <scope doc="Remove focus from the Carousel." ilk="function" name="blur" signature="blur()" />
            <scope doc="Insert or append multiple items to the Carousel." ilk="function" name="addItems" signature="addItems(items) =&gt; Boolean">
              <variable citdl="Array} An array containing an array of new items each linked to the&#xA;index where the insertion should take place.&#xA;E.g. [[{content:&apos;&lt;img/&gt;&apos;}, index1], [{content:&apos;&lt;img/&gt;&apos;" doc=", index2]]&#xA;NOTE: An item at index must already exist." ilk="argument" name="items" />
            </scope>
            <scope doc="Update the UI for the pager buttons based on the current page and&#xA;the number of pages." ilk="function" name="_updatePagerButtons" signature="_updatePagerButtons()" />
            <scope doc="Redraw the UI for item positioning." ilk="function" name="_syncUiItems" signature="_syncUiItems()" />
            <scope doc="Insert or append an item to the Carousel.&#xA;E.g. if Object: ({content:&quot;Your Content&quot;, id:&quot;&quot;, className:&quot;&quot;}, index)" ilk="function" name="addItem" signature="addItem(item, index) =&gt; Boolean">
              <variable citdl="String | Object | HTMLElement" doc="The item to be appended&#xA;to the Carousel. If the parameter is a string, it is assumed to be&#xA;the content of the newly created item. If the parameter is an&#xA;object, it is assumed to supply the content and an optional class&#xA;and an optional id of the newly created item." ilk="argument" name="item" />
              <variable citdl="Number" doc="optional The position to where in the list&#xA;(starts from zero)." ilk="argument" name="index" />
            </scope>
            <scope doc="Set the container size." ilk="function" name="_setContainerSize" signature="_setContainerSize(clip, attr)">
              <variable citdl="HTMLElement" doc="The clip container element." ilk="argument" name="clip" />
              <variable citdl="String" doc="Either set the height or width." ilk="argument" name="attr" />
            </scope>
            <scope doc="Set the number of items in the Carousel.&#xA;Warning: Setting this to a lower number than the current removes&#xA;items from the end." ilk="function" name="_setNumItems" signature="_setNumItems(val) =&gt; Number">
              <variable citdl="Number" doc="The new value for numItems" ilk="argument" name="val" />
            </scope>
            <scope doc="Return all loading items as an array." ilk="function" name="getLoadingItems" signature="getLoadingItems() =&gt; Array" />
            <scope doc="Scroll the Carousel by an item backward." ilk="function" name="scrollBackward" signature="scrollBackward()" />
            <scope doc="Select the next item in the Carousel." ilk="function" name="selectNextItem" signature="selectNextItem()" />
            <scope doc="Set the Carousel offset to the passed offset after animating." ilk="function" name="_animateAndSetCarouselOffset" signature="_animateAndSetCarouselOffset(offset, item, sentinel)">
              <variable citdl="Integer" doc="The offset to which the Carousel has to be&#xA;scrolled to." ilk="argument" name="offset" />
              <variable citdl="Integer" doc="The index to which the Carousel will scroll." ilk="argument" name="item" />
              <variable citdl="Integer" doc="The last element in the view port." ilk="argument" name="sentinel" />
            </scope>
            <scope doc="Set the value for selectedItem." ilk="function" name="_selectedItemSetter" signature="_selectedItemSetter(val) =&gt; Number">
              <variable citdl="Number" doc="The new value for selectedItem" ilk="argument" name="val" />
            </scope>
            <scope doc="Validate the firstVisible value." ilk="function" name="_validateFirstVisible" signature="_validateFirstVisible(val) =&gt; Boolean">
              <variable citdl="Number" doc="The first visible value" ilk="argument" name="val" />
            </scope>
            <scope doc="Update interface&apos;s pagination data within a registered template." ilk="function" name="updatePagination" signature="updatePagination()" />
            <scope doc="Return all visible items as an array." ilk="function" name="getVisibleItems" signature="getVisibleItems() =&gt; Array" />
            <scope doc="Return the index of the first item in the view port for displaying item&#xA;in &quot;pos&quot;." ilk="function" name="getFirstVisibleForPosition" signature="getFirstVisibleForPosition(pos)">
              <variable citdl="Number" doc="The position of the item to be displayed" ilk="argument" name="pos" />
            </scope>
            <scope doc="Render the Carousel." ilk="function" name="render" signature="render(appendTo) =&gt; Boolean">
              <variable citdl="HTMLElement | String" doc="The element to which the&#xA;Carousel should be appended prior to rendering." ilk="argument" name="appendTo" />
            </scope>
            <scope doc="Replace multiple items at specified indexes.&#xA;NOTE: item at index must already exist." ilk="function" name="replaceItems" signature="replaceItems(items) =&gt; Boolean">
              <variable citdl="Array} An array containing an array of replacement items each linked to the&#xA;index where the substitution should take place.&#xA;E.g. [[{content:&apos;&lt;img/&gt;&apos;}, index1], [{content:&apos;&lt;img/&gt;&apos;" doc=", index2]]" ilk="argument" name="items" />
            </scope>
            <scope doc="Return the carouselItemEl at index or null if the index is not&#xA;found." ilk="function" name="getElementForItem" signature="getElementForItem(index) =&gt; Element">
              <variable citdl="Number" doc="The index of the item to be returned" ilk="argument" name="index" />
            </scope>
            <scope doc="Clip the container size every time numVisible is set." ilk="function" name="_setNumVisible" signature="_setNumVisible(val) =&gt; Number">
              <variable citdl="Number" doc="The new value for numVisible" ilk="argument" name="val" />
            </scope>
            <scope doc="The keyboard event handler for Carousel." ilk="function" name="_keyboardEventHandler" signature="_keyboardEventHandler(ev)">
              <variable citdl="Event" doc="The event that is being handled." ilk="argument" name="ev" />
            </scope>
            <scope doc="Get the first visible item&apos;s index on any given page." ilk="function" name="getFirstVisibleOnpage" signature="getFirstVisibleOnpage(page) =&gt; Number">
              <variable citdl="Number" doc="Page" ilk="argument" name="page" />
            </scope>
            <scope doc="Scroll the Carousel by a page forward." ilk="function" name="scrollPageForward" signature="scrollPageForward(ev, obj)">
              <variable citdl="Event" doc="The event object" ilk="argument" name="ev" />
              <variable citdl="Object" doc="The context object" ilk="argument" name="obj" />
            </scope>
            <scope doc="Initialize and bind the event handlers." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Get the value for the selected item." ilk="function" name="_getSelectedItem" signature="_getSelectedItem(val) =&gt; Number">
              <variable citdl="Number" doc="The new value for &quot;selected&quot; item" ilk="argument" name="val" />
            </scope>
            <scope doc="Synchronize and redraw the UI for lazy loading." ilk="function" name="_syncUiForLazyLoading" signature="_syncUiForLazyLoading()" />
            <scope doc="Create the Carousel clip container." ilk="function" name="createCarouselClip" signature="createCarouselClip()" />
            <scope doc="Update the UI for the pager menu based on the current page and&#xA;the number of pages.  If the number of pages is greater than&#xA;MAX_PAGER_BUTTONS, then the selection of pages is provided by a drop&#xA;down menu instead of a set of buttons." ilk="function" name="_updatePagerMenu" signature="_updatePagerMenu()" />
            <scope doc="Find the Carousel within a container. The Carousel is identified by&#xA;the first element that matches the carousel element tag or the&#xA;element that has the Carousel class." ilk="function" name="parseCarousel" signature="parseCarousel(parent) =&gt; Boolean">
              <variable citdl="HTMLElement" doc="The parent element to look under" ilk="argument" name="parent" />
            </scope>
            <scope doc="Return the scrolling offset size given the number of elements to&#xA;scroll." ilk="function" name="getScrollOffset" signature="getScrollOffset(delta)">
              <variable citdl="Number" doc="The delta number of elements to scroll by." ilk="argument" name="delta" />
            </scope>
            <scope doc="Return a valid item for a possibly out of bounds index considering&#xA;the isCircular property." ilk="function" name="_getValidIndex" signature="_getValidIndex(index) =&gt; Object">
              <variable citdl="Number" doc="The index of the item to be returned" ilk="argument" name="index" />
            </scope>
            <scope doc="Create an element, set its class name and optionally install the element&#xA;to its parent." ilk="function" name="createElement" signature="createElement(el, attrs)">
              <variable citdl="String" doc="The element to be created" ilk="argument" name="el" />
              <variable citdl="Object" doc="Configuration of parent, class and id attributes.&#xA;If the content is specified, it is inserted after creation of the&#xA;element. The content can also be an HTML element in which case it would&#xA;be appended as a child node of the created element." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Set the selected item." ilk="function" name="setItemSelection" signature="setItemSelection(newpos, oldpos)">
              <variable citdl="Number" doc="The index of the new position" ilk="argument" name="newpos" />
              <variable citdl="Number" doc="The index of the previous position" ilk="argument" name="oldpos" />
            </scope>
            <scope doc="Synchronize and redraw the UI after an item is added." ilk="function" name="_syncUiForItemAdd" signature="_syncUiForItemAdd()" />
            <scope doc="Create the Carousel item." ilk="function" name="createCarouselItem" signature="createCarouselItem(obj)">
              <variable citdl="Object" doc="The attributes of the element to be created" ilk="argument" name="obj" />
            </scope>
            <scope doc="Set the value for the Carousel&apos;s first visible item." ilk="function" name="_setFirstVisible" signature="_setFirstVisible(val) =&gt; Number">
              <variable citdl="Number" doc="The new value for firstVisible" ilk="argument" name="val" />
            </scope>
            <scope doc="Validate the numItems value." ilk="function" name="_validateNumItems" signature="_validateNumItems(val) =&gt; Boolean">
              <variable citdl="Number" doc="The numItems value" ilk="argument" name="val" />
            </scope>
            <scope doc="Return the position of the Carousel item that has the id &quot;id&quot;, or -1&#xA;if the id is not found." ilk="function" name="getItemPositionById" signature="getItemPositionById(index)">
              <variable citdl="Number" doc="The index of the item to be returned" ilk="argument" name="index" />
            </scope>
            <scope doc="Scroll the Carousel to make the item the first visible item." ilk="function" name="scrollTo" signature="scrollTo(item, dontSelect)">
              <variable doc="Number The index of the element to position at." ilk="argument" name="item" />
              <variable doc="Boolean True if select should be avoided" ilk="argument" name="dontSelect" />
            </scope>
            <scope doc="Get the total number of pages." ilk="function" name="_getNumPages" signature="_getNumPages()" />
            <scope doc="Select the previous item in the Carousel." ilk="function" name="selectPreviousItem" signature="selectPreviousItem()" />
            <scope doc="Return the size of a part of the item (reveal)." ilk="function" name="getRevealSize" signature="getRevealSize()" />
            <scope doc="Handle UI update.&#xA;Call the appropriate methods on events fired when an item is added, or&#xA;removed for synchronizing the DOM." ilk="function" name="syncUi" signature="syncUi(o)">
              <variable citdl="Object" doc="The item that needs to be added or removed" ilk="argument" name="o" />
            </scope>
            <scope doc="Set the correct tab index for the Carousel items." ilk="function" name="_updateTabIndex" signature="_updateTabIndex(el)">
              <variable citdl="Object" doc="The element to be focussed" ilk="argument" name="el" />
            </scope>
            <scope doc="Clears the items from Carousel." ilk="function" name="clearItems" signature="clearItems()" />
            <scope doc="Validate animation parameters." ilk="function" name="_validateAnimation" signature="_validateAnimation(cfg) =&gt; Boolean">
              <variable citdl="Object" doc="The animation configuration" ilk="argument" name="cfg" />
            </scope>
            <scope doc="Get the index of the last visible item" ilk="function" name="_getLastVisible" signature="_getLastVisible()" />
            <scope doc="Set multiple styles on one element." ilk="function" name="setStyles" signature="setStyles(el, style)">
              <variable citdl="HTMLElement" doc="The element to set styles on" ilk="argument" name="el" />
              <variable citdl="Object" doc="top:&quot;10px&quot;, left:&quot;0px&quot;, etc." ilk="argument" name="style" />
            </scope>
            <scope doc="Set the value for the Carousel&apos;s navigation." ilk="function" name="_setNavigation" signature="_setNavigation(cfg) =&gt; Object">
              <variable citdl="Object" doc="The navigation configuration" ilk="argument" name="cfg" />
            </scope>
            <scope doc="Return the appropriate Carousel object based on the id associated with&#xA;the Carousel element or false if none match." ilk="function" name="getById" signature="getById()" />
            <scope doc="Set the orientation of the Carousel." ilk="function" name="_setOrientation" signature="_setOrientation(val) =&gt; Boolean">
              <variable citdl="Boolean" doc="The new value for isVertical" ilk="argument" name="val" />
            </scope>
            <scope doc="The &quot;click&quot; handler for the item." ilk="function" name="_itemClickHandler" signature="_itemClickHandler(ev)">
              <variable citdl="Event" doc="The event object" ilk="argument" name="ev" />
            </scope>
            <scope doc="Set the Carousel offset to the passed offset." ilk="function" name="_setCarouselOffset" signature="_setCarouselOffset()" />
            <scope doc="Get the computed style of an element." ilk="function" name="getStyle" signature="getStyle(el, style, type)">
              <variable citdl="HTMLElement" doc="The element for which the style needs to be&#xA;returned." ilk="argument" name="el" />
              <variable citdl="String" doc="The style attribute" ilk="argument" name="style" />
              <variable citdl="String" doc="&quot;int&quot;, &quot;float&quot;, etc. (defaults to int)" ilk="argument" name="type" />
            </scope>
            <scope doc="Create the Carousel." ilk="function" name="createCarousel" signature="createCarousel(elId)">
              <variable citdl="String" doc="The id of the element to be created" ilk="argument" name="elId" />
            </scope>
            <scope doc="Return the item at index or null if the index is not found." ilk="function" name="getItem" signature="getItem(index) =&gt; Object">
              <variable citdl="Number" doc="The index of the item to be returned" ilk="argument" name="index" />
            </scope>
            <scope doc="The load the required set of items that are needed for display." ilk="function" name="_loadItems" signature="_loadItems()" />
            <scope doc="Find the Carousel navigation within a container. The navigation&#xA;elements need to match the carousel navigation class names." ilk="function" name="parseCarouselNavigation" signature="parseCarouselNavigation(parent) =&gt; Boolean">
              <variable citdl="HTMLElement" doc="The parent element to look under" ilk="argument" name="parent" />
            </scope>
            <scope doc="Compute and return the height or width of a single Carousel item&#xA;depending upon the orientation." ilk="function" name="getCarouselItemSize" signature="getCarouselItemSize(which)">
              <variable citdl="String" doc="&quot;height&quot; or &quot;width&quot; to be returned.  If this is&#xA;passed explicitly, the calculated size is not cached." ilk="argument" name="which" />
            </scope>
            <scope doc="Set the clip container size (based on the new numVisible value)." ilk="function" name="_setClipContainerSize" signature="_setClipContainerSize(clip, num)">
              <variable citdl="HTMLElement" doc="The clip container element." ilk="argument" name="clip" />
              <variable citdl="Number" doc="optional The number of items per page." ilk="argument" name="num" />
            </scope>
            <scope doc="Start auto-playing the Carousel." ilk="function" name="startAutoPlay" signature="startAutoPlay()" />
            <variable doc="The class name of the next navigation link. This variable is&#xA;not only used for styling, but also for identifying the link&#xA;within the Carousel container." name="NEXT_PAGE" />
            <variable doc="Number of rows for a multirow carousel." name="_rows" />
            <variable doc="Does the Carousel element have focus?" name="_hasFocus" />
            <variable doc="The Animation object." name="_animObj" />
            <variable doc="The table of items in the Carousel.&#xA;The numItems is the number of items in the Carousel, items being the&#xA;array of items in the Carousel.  The size is the size of a single&#xA;item in the Carousel.  It is cached here for efficiency (to avoid&#xA;computing the size multiple times)." name="_itemsTable" />
            <variable doc="The minimum width of the vertical Carousel container to support&#xA;the navigation buttons." name="VERT_MIN_WIDTH" />
            <variable doc="The internal table of Carousel instances." name="instances" />
            <variable doc="Cache the Carousel item attributes." name="_itemAttrCache" />
            <variable doc="Is the auto-scrolling of Carousel in progress?" name="_isAutoPlayInProgress" />
            <variable doc="The class name that will be set if the Carousel adjusts itself&#xA;for a minimum width." name="MIN_WIDTH" />
            <variable doc="The class name of a horizontally oriented Carousel." name="HORIZONTAL" />
            <variable doc="Is the animation still in progress?" name="_isAnimationInProgress" />
            <variable doc="Status of the previous navigation item." name="_prevEnabled" />
            <variable doc="The next navigation button name/text." name="NEXT_BUTTON_TEXT" />
            <variable doc="The prefix text for the pager in case the UI is a drop-down." name="PAGER_PREFIX_TEXT" />
            <variable doc="The class name of the previous navigation link. This variable&#xA;is not only used for styling, but also for identifying the link&#xA;within the Carousel container." name="PREV_PAGE" />
            <variable doc="The class name of a visible Carousel." name="VISIBLE" />
            <variable doc="The previous navigation button name/text." name="PREVIOUS_BUTTON_TEXT" />
            <variable doc="The content to be used as the progress indicator when the item&#xA;is still being loaded." name="ITEM_LOADING_CONTENT" />
            <variable doc="The Carousel pagination structure." name="_pagination" />
            <variable doc="The class name of a first disabled navigation button." name="FIRST_NAV_DISABLED" />
            <variable doc="The class name of a first page element." name="FIRST_PAGE" />
            <variable doc="The Carousel navigation buttons." name="_navBtns" />
            <variable doc="The class name of the Carousel element." name="CAROUSEL" />
            <variable doc="Status of the next navigation item." name="_nextEnabled" />
            <variable doc="The class name of the container of the items in the Carousel." name="CAROUSEL_EL" />
            <variable doc="The class name of a multirow Carousel." name="MULTI_ROW" />
            <variable doc="The class name of a vertical Carousel&apos;s container element." name="VERTICAL_CONTAINER" />
            <variable doc="The Carousel element." name="_carouselEl" />
            <variable doc="The class name of a row in a multirow Carousel." name="ROW" />
            <variable doc="The number of visible items in the Carousel." name="NUM_VISIBLE" />
            <variable doc="The class name of the Carousel&apos;s container element." name="CONTAINER" />
            <variable doc="The Carousel navigation." name="_navEl" />
            <variable doc="The class name of a vertically oriented Carousel." name="VERTICAL" />
            <variable doc="The widget name." name="WidgetName" />
            <variable doc="The element to be used as the progress indicator when the item&#xA;is still being loaded." name="ITEM_LOADING" />
            <variable doc="Whether the Carousel size needs to be recomputed or not?" name="_recomputeSize" />
            <variable doc="The class name for an item in the pager UL or dropdown menu." name="PAGER_ITEM" />
            <variable doc="Number of cols for a multirow carousel." name="_cols" />
            <variable doc="The class name of the Carousel&apos;s container element." name="CONTENT" />
            <variable doc="The class name of the selected paging navigation." name="SELECTED_NAV" />
            <variable doc="The class name of the next Carousel navigation button." name="NEXT_NAV" />
            <variable doc="The maximum number of pager buttons allowed beyond which the UI&#xA;of the pager would be a drop-down of pages instead of buttons." name="MAX_PAGER_BUTTONS" />
            <variable doc="The offset of the first visible item in the Carousel." name="FIRST_VISIBLE" />
            <variable doc="The class name of a disabled navigation button." name="DISABLED" />
            <variable doc="The class name for the pagination container" name="PAGINATION" />
            <variable doc="The Carousel pages structure.&#xA;This is an object of the total number of pages and the current page." name="_pages" />
            <variable doc="The class name of the focussed page navigation.  This class is&#xA;specifically used for the ugly focus handling in Opera." name="PAGE_FOCUS" />
            <variable doc="The navigation element container class name." name="NAVIGATION" />
            <variable doc="The class name of the Carousel navigation buttons." name="BUTTON" />
            <variable doc="The current first index of the Carousel." name="_firstItem" />
            <variable doc="The class name of the selected item." name="SELECTED_ITEM" />
            <variable doc="The class name of the first Carousel navigation button." name="FIRST_NAV" />
            <variable doc="The class name for the navigation container for prev/next." name="NAV_CONTAINER" />
            <variable doc="The class name of the Carousel navigation button that has focus." name="FOCUSSED_BUTTON" />
            <variable doc="Is the Carousel rendered already?" name="_hasRendered" />
            <variable doc="The Carousel clipping container element." name="_clipEl" />
            <variable doc="The minimum width of the horizontal Carousel container to support&#xA;the navigation buttons." name="HORZ_MIN_WIDTH" />
          </scope>
          <scope doc="CartesianChart class for the YUI Charts widget." ilk="class" name="CartesianChart">
            <scope attributes="__ctor__" doc="CartesianChart class for the YUI Charts widget." ilk="function" name="CartesianChart" signature="CartesianChart(type, containerId, dataSource, attributes)">
              <variable citdl="String" doc="The char type. May be &quot;line&quot;, &quot;column&quot;, or &quot;bar&quot;" ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
            <scope doc="Setter for the yAxis attribute." ilk="function" name="_setYAxis" signature="_setYAxis()" />
            <scope doc="Setter for the xField attribute." ilk="function" name="_setXField" signature="_setXField()" />
            <scope doc="Sets the style object for a single series based on its index" ilk="function" name="setSeriesStylesByIndex" signature="setSeriesStylesByIndex(index, style)">
              <variable citdl="Number" doc="The position within the series definition to apply the style" ilk="argument" name="index" />
              <variable citdl="object" doc="Style object to be applied to the selected series" ilk="argument" name="style" />
            </scope>
            <scope doc="Setter for the xAxes attribute" ilk="function" name="_setXAxes" signature="_setXAxes()" />
            <scope doc="Setter for the constrainViewport attribute" ilk="function" name="_setConstrainViewport" signature="_setConstrainViewport()" />
            <scope doc="Getter for the yField attribute." ilk="function" name="_getYField" signature="_getYField()" />
            <scope doc="Setter for the yAxes attribute." ilk="function" name="_setYAxes" signature="_setYAxes()" />
            <scope doc="Initializes the attributes." ilk="function" name="_initAttributes" signature="_initAttributes()" />
            <scope doc="Setter for the xAxis attribute." ilk="function" name="_setXAxis" signature="_setXAxis()" />
            <scope doc="Getter for the xField attribute." ilk="function" name="_getXField" signature="_getXField()" />
            <scope doc="Removes axis functions contained in an array" ilk="function" name="_removeAxisFunctions" signature="_removeAxisFunctions()" />
            <scope doc="Setter for the yField attribute." ilk="function" name="_setYField" signature="_setYField()" />
            <scope doc="Receives an axis object, creates a proxy function for &#xA;the labelFunction and returns the updated object." ilk="function" name="_getClonedAxis" signature="_getClonedAxis()" />
            <variable citdl="Array" doc="Stores a reference to the yAxis labelFunctions created by&#xA;YAHOO.widget.Chart.createProxyFunction()" name="_yAxisLabelFunctions" />
            <variable citdl="String" doc="Stores a reference to the xAxis labelFunction created by&#xA;YAHOO.widget.Chart.createProxyFunction()" name="_xAxisLabelFunctions" />
          </scope>
          <scope doc="Functionality common to most series appearing in cartesian charts.&#xA;Generally, a &lt;code&gt;CartesianSeries&lt;/code&gt; object shouldn&apos;t be&#xA;instantiated directly. Instead, a subclass with a concrete implementation&#xA;should be used." ilk="class" name="CartesianSeries">
            <scope attributes="__ctor__" doc="Functionality common to most series appearing in cartesian charts.&#xA;Generally, a &lt;code&gt;CartesianSeries&lt;/code&gt; object shouldn&apos;t be&#xA;instantiated directly. Instead, a subclass with a concrete implementation&#xA;should be used." ilk="function" name="CartesianSeries" signature="CartesianSeries()" />
            <variable citdl="String" doc="The field used to access the y-axis value from the items from the data source." name="yField" />
            <variable citdl="String" doc="The field used to access the x-axis value from the items from the data source." name="xField" />
            <variable citdl="Boolean" doc="When a Legend is present, indicates whether the series will show in the legend." name="showInLegend" />
            <variable citdl="String" doc="Indicates which axis the series will bind to" name="axis" />
          </scope>
          <scope doc="A type of axis that displays items in categories." ilk="class" name="CategoryAxis">
            <scope attributes="__ctor__" doc="A type of axis that displays items in categories." ilk="function" name="CategoryAxis" signature="CategoryAxis()" />
            <variable citdl="Array" doc="A list of category names to display along this axis." name="categoryNames" />
            <variable citdl="Boolean" doc="Indicates whether or not to calculate the number of categories (ticks and labels)&#xA;when there is not enough room to display all labels on the axis. If set to true, the axis &#xA;will determine the number of categories to plot. If not, all categories will be plotted." name="calculateCategoryCount" />
          </scope>
          <scope classrefs="YAHOO.widget.BaseCellEditor" doc="Factory class for instantiating a BaseCellEditor subclass." ilk="class" name="CellEditor">
            <scope attributes="__ctor__" doc="Factory class for instantiating a BaseCellEditor subclass." ilk="function" name="CellEditor" signature="CellEditor(sType, oConfigs)">
              <variable citdl="String" doc="Type indicator, to map to YAHOO.widget.DataTable.Editors." ilk="argument" name="sType" />
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
          </scope>
          <scope doc="Chart class for the YUI Charts widget." ilk="class" name="Chart">
            <scope attributes="__ctor__" doc="Chart class for the YUI Charts widget." ilk="function" name="Chart" signature="Chart(type, containerId, dataSource, attributes)">
              <variable citdl="String" doc="The char type. May be &quot;line&quot;, &quot;column&quot;, &quot;bar&quot;, or &quot;pie&quot;" ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
            <scope doc="Called when the SWF is ready for communication. Sets the type, initializes&#xA;the styles, and sets the DataSource." ilk="function" name="_loadHandler" signature="_loadHandler()" />
            <scope doc="Getter for the dataSource attribute." ilk="function" name="_getDataSource" signature="_getDataSource()" />
            <scope doc="Sends (or resends) the request to the DataSource." ilk="function" name="refreshData" signature="refreshData()" />
            <scope doc="Initializes the attributes." ilk="function" name="_initAttributes" signature="_initAttributes()" />
            <scope doc="Setter for the legendLabelFunction attribute." ilk="function" name="_setLegendLabelFunction" signature="_setLegendLabelFunction()" />
            <scope doc="Setter for the polling attribute." ilk="function" name="_setPolling" signature="_setPolling()" />
            <scope doc="Getter for the series attribute." ilk="function" name="_getSeriesDefs" signature="_getSeriesDefs()" />
            <scope doc="Setter for the categoryNames attribute." ilk="function" name="_setCategoryNames" signature="_setCategoryNames()" />
            <scope doc="Resets all styles on the Chart instance." ilk="function" name="setStyles" signature="setStyles(styles)">
              <variable citdl="Object" doc="Initializer for all Chart styles." ilk="argument" name="styles" />
            </scope>
            <scope doc="Public accessor to the unique name of the Chart instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Handles swfReady event from SWF." ilk="function" name="_eventHandler" signature="_eventHandler()" />
            <scope doc="Getter for altText attribute." ilk="function" name="_getAltText" signature="_getAltText()" />
            <scope doc="Getter for the request attribute." ilk="function" name="_getRequest" signature="_getRequest()" />
            <scope doc="Setter for altText attribute." ilk="function" name="_setAltText" signature="_setAltText()" />
            <scope doc="Setter for the dataTipFunction attribute." ilk="function" name="_setDataTipFunction" signature="_setDataTipFunction()" />
            <scope doc="Setter for the series attribute." ilk="function" name="_setSeriesDefs" signature="_setSeriesDefs()" />
            <scope doc="Setter for the request attribute." ilk="function" name="_setRequest" signature="_setRequest()" />
            <scope doc="Uses YAHOO.widget.Chart.createProxyFunction to return string&#xA;reference to a function." ilk="function" name="YAHOO.widget.Chart.getFunctionReference" signature="YAHOO.widget.Chart.getFunctionReference()" />
            <scope doc="Called when the DataSource receives new data. The series definitions are used&#xA;to build a data provider for the SWF chart." ilk="function" name="_loadDataHandler" signature="_loadDataHandler()" />
            <scope doc="Getter for swfURL attribute." ilk="function" name="_getSWFURL" signature="_getSWFURL()" />
            <scope doc="Sets the styles on all series in the Chart." ilk="function" name="setSeriesStyles" signature="setSeriesStyles(styles)">
              <variable citdl="Array" doc="Initializer for all Chart series styles." ilk="argument" name="styles" />
            </scope>
            <scope doc="Creates a globally accessible function that wraps a function reference.&#xA;Returns the proxy function&apos;s name as a string for use by the SWF through&#xA;ExternalInterface." ilk="function" name="YAHOO.widget.Chart.createProxyFunction" signature="YAHOO.widget.Chart.createProxyFunction()" />
            <scope doc="Getter for the polling attribute." ilk="function" name="_getPolling" signature="_getPolling()" />
            <scope doc="Getter for the categoryNames attribute." ilk="function" name="_getCategoryNames" signature="_getCategoryNames()" />
            <scope doc="Sets a single style value on the Chart instance." ilk="function" name="setStyle" signature="setStyle(name, value)">
              <variable citdl="String" doc="Name of the Chart style value to change." ilk="argument" name="name" />
              <variable citdl="Object" doc="New value to pass to the Chart style." ilk="argument" name="value" />
            </scope>
            <scope doc="Setter for the dataSource attribute." ilk="function" name="_setDataSource" signature="_setDataSource()" />
            <scope doc="Removes a function created with createProxyFunction()" ilk="function" name="YAHOO.widget.Chart.removeProxyFunction" signature="YAHOO.widget.Chart.removeProxyFunction()" />
            <variable citdl="String" doc="The type of this chart instance." name="_type" />
            <variable citdl="Array" doc="Stores references to series function values created by&#xA;YAHOO.widget.Chart.createProxyFunction()" name="_seriesFunctions" />
            <variable doc="Storage for the request attribute." name="_request" />
            <variable citdl="Number" doc="The time, in ms, between requests for data." name="_pollingInterval" />
            <variable citdl="String" doc="Stores a reference to the dataTipFunction created by&#xA;YAHOO.widget.Chart.createProxyFunction()" name="_dataTipFunction" />
            <variable citdl="String" doc="Stores a reference to the legendLabelFunction created by&#xA;YAHOO.widget.Chart.createProxyFunction()" name="_legendLabelFunction" />
            <variable citdl="Object" doc="The initializing attributes are stored here until the SWF is ready." name="_attributes" />
            <variable citdl="Boolean" doc="Indicates whether the SWF has been initialized and is ready&#xA;to communicate with JavaScript" name="_initialized" />
            <variable citdl="String" doc="The URL of the SWF file." name="_swfURL" />
            <variable citdl="String" doc="The ID of the containing DIV." name="_containerID" />
            <variable doc="A reference to the embedded SWF file." name="_swf" />
            <variable citdl="swf" doc="The javascript wrapper for the swf object" name="_swfEmbed" />
            <variable doc="Storage for the series attribute." name="_seriesDefs" />
            <variable doc="Storage for the dataSource attribute." name="_dataSource" />
            <variable doc="Storage for the dataTipFunction attribute." name="Chart.SWFURL" />
            <variable citdl="String" doc="The id of this instance." name="_id" />
            <variable citdl="Number" doc="The id returned from the DataSource&apos;s setInterval function." name="_pollingID" />
            <variable doc="The number of proxy functions that have been created." name="proxyFunctionCount" />
          </scope>
          <scope classrefs="YAHOO.widget.BaseCellEditor" doc="The CheckboxCellEditor class provides functionality for inline editing&#xA;DataTable cell data with checkboxes." ilk="class" name="CheckboxCellEditor">
            <scope attributes="__ctor__" doc="The CheckboxCellEditor class provides functionality for inline editing&#xA;DataTable cell data with checkboxes." ilk="function" name="CheckboxCellEditor" signature="CheckboxCellEditor(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Render a form with input(s) type=checkbox." ilk="function" name="renderForm" signature="renderForm()" />
            <scope doc="After rendering form, if disabledBtns is set to true, then sets up a mechanism&#xA;to save input without them." ilk="function" name="handleDisabledBtns" signature="handleDisabledBtns()" />
            <scope doc="Sets focus in CheckboxCellEditor." ilk="function" name="focus" signature="focus()" />
            <scope doc="Retrieves input value from CheckboxCellEditor." ilk="function" name="getInputValue" signature="getInputValue()" />
            <scope doc="Resets CheckboxCellEditor UI to initial state." ilk="function" name="resetForm" signature="resetForm()" />
            <variable citdl="String[] | Object[]" doc="Array of checkbox values. Can either be a simple array (e.g., [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;])&#xA;or a an array of objects (e.g., [{label:&quot;red&quot;, value:&quot;#FF0000&quot;},&#xA;{label:&quot;green&quot;, value:&quot;#00FF00&quot;}, {label:&quot;blue&quot;, value:&quot;#0000FF&quot;}])." name="checkboxOptions" />
            <variable citdl="HTMLElement[]" doc="Reference to the checkbox elements." name="checkboxes" />
            <variable citdl="String[]" doc="Array of checked values" name="value" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="A widget to select colors" ilk="class" name="ColorPicker">
            <scope attributes="__ctor__" doc="A widget to select colors" ilk="function" name="ColorPicker" signature="ColorPicker(el(optional), attr)">
              <variable citdl="HTMLElement | String | Object" doc="The html &#xA;element that represents the colorpicker, or the attribute object to use. &#xA;An element will be created if none provided." ilk="argument" name="el(optional)" />
              <variable citdl="Object" doc="(optional) A key map of the colorpicker&apos;s &#xA;initial attributes.  Ignored if first arg is attributes object." ilk="argument" name="attr" />
            </scope>
            <scope doc="Handle keydown on the hex field" ilk="function" name="_hexFieldKeypress" signature="_hexFieldKeypress(e, el, prop)">
              <variable citdl="Event" doc="the keypress event" ilk="argument" name="e" />
              <variable citdl="HTMLElement" doc="the field" ilk="argument" name="el" />
              <variable citdl="string" doc="the key to the linked property" ilk="argument" name="prop" />
            </scope>
            <scope doc="Updates the RGB values from the current state of the HSV&#xA;values.  Executed when the one of the HSV form fields are&#xA;updated&#xA;_updateRGBFromHSV" ilk="function" name="_updateRGBFromHSV" signature="_updateRGBFromHSV()" />
            <scope doc="Sets up the config attributes and the change listeners for this&#xA;properties" ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable doc="An object containing default attribute values" ilk="argument" name="attr" />
            </scope>
            <scope doc="Creates the Hue and Value/Saturation Sliders." ilk="function" name="_initSliders" signature="_initSliders()" />
            <scope doc="Event handler for the hue slider." ilk="function" name="_onHueSliderChange" signature="_onHueSliderChange(newOffset)">
              <variable citdl="int" doc="pixels from the start position" ilk="argument" name="newOffset" />
            </scope>
            <scope doc="Moves the picker slider into the position dictated by the current state&#xA;of the control" ilk="function" name="_updatePickerSlider" signature="_updatePickerSlider()" />
            <scope doc="Key map to well-known commands for txt field input" ilk="function" name="_getCommand" signature="_getCommand(e) =&gt; int">
              <variable citdl="Event" doc="the keypress or keydown event" ilk="argument" name="e" />
            </scope>
            <scope doc="Use the value of the text field to update the control" ilk="function" name="_useFieldValue" signature="_useFieldValue(e, el, prop)">
              <variable citdl="Event" doc="an event" ilk="argument" name="e" />
              <variable citdl="HTMLElement" doc="the field" ilk="argument" name="el" />
              <variable citdl="string" doc="the key to the linked property" ilk="argument" name="prop" />
            </scope>
            <scope doc="Returns the element reference that is saved.  The id can be either&#xA;the element id, or the key for this id in the &quot;id&quot; config attribute.&#xA;For instance, the host element id can be obtained by passing its&#xA;id (default: &quot;yui_picker&quot;) or by its key &quot;YUI_PICKER&quot;." ilk="function" name="getElement" signature="getElement(id) =&gt; HTMLElement">
              <variable citdl="string" doc="the element id, or key" ilk="argument" name="id" />
            </scope>
            <scope doc="Adds event listeners to Sliders and UI elements.  Wires everything&#xA;up." ilk="function" name="_bindUI" signature="_bindUI()" />
            <scope doc="Updates the background of the swatch with the current rbg value.&#xA;Also updates the websafe swatch to the closest websafe color" ilk="function" name="_updateSwatch" signature="_updateSwatch()" />
            <scope doc="Creates any missing DOM structure." ilk="function" name="_initElements" signature="_initElements()" />
            <scope doc="Moves the sliders into the position dictated by the current state&#xA;of the control" ilk="function" name="_updateSliders" signature="_updateSliders()" />
            <scope doc="Creates the host element if it doesn&apos;t exist" ilk="function" name="_createHostElement" signature="_createHostElement()" />
            <scope doc="Event handler for the picker slider, which controls the&#xA;saturation and value/brightness." ilk="function" name="_onPickerSliderChange" signature="_onPickerSliderChange(newOffset)">
              <variable citdl="{x: int, y: int}" doc="x/y pixels from the start position" ilk="argument" name="newOffset" />
            </scope>
            <scope doc="Updates the rgb attribute with the current state of the r,g,b&#xA;fields.  This is invoked from change listeners on these&#xA;attributes to facilitate updating these values from the&#xA;individual form fields" ilk="function" name="_updateRGB" signature="_updateRGB()" />
            <scope doc="Sets the control to the specified rgb value and&#xA;moves the sliders to the proper positions" ilk="function" name="setValue" signature="setValue(rgb, silent)">
              <variable citdl="[int, int, int]" doc="the rgb value" ilk="argument" name="rgb" />
              <variable citdl="boolean" doc="whether or not to fire the change event" ilk="argument" name="silent" />
            </scope>
            <scope doc="Parses the hex string to normalize shorthand values, converts&#xA;the hex value to rgb and updates the rgb attribute (which&#xA;updates the state for all of the other values)&#xA;method _updateHex" ilk="function" name="_updateHex" signature="_updateHex()" />
            <scope doc="Updates the form field controls with the state data contained&#xA;in the control." ilk="function" name="_updateFormFields" signature="_updateFormFields()" />
            <scope doc="Allows numbers and special chars, and by default allows a-f.  &#xA;Used for the hex field keypress handler." ilk="function" name="_hexOnly" signature="_hexOnly(e, numbersOnly) =&gt; boolean">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
              <variable doc="omits a-f if set to true" ilk="argument" name="numbersOnly" />
            </scope>
            <scope doc="Sets the initial state of the sliders" ilk="function" name="initPicker" signature="initPicker()" />
            <scope doc="Returns the cached element reference.  If the id is not a string, it&#xA;is assumed that it is an element and this is returned." ilk="function" name="_hideShowEl" signature="_hideShowEl(id, on)">
              <variable citdl="string|HTMLElement" doc="the element key, id, or ref" ilk="argument" name="id" />
              <variable citdl="boolean" doc="hide or show.  If true, show" ilk="argument" name="on" />
            </scope>
            <scope doc="Moves the hue slider into the position dictated by the current state&#xA;of the control" ilk="function" name="_updateHueSlider" signature="_updateHueSlider()" />
            <scope doc="Allows numbers and special chars only.  Used for the&#xA;rgb and hsv fields keypress handler." ilk="function" name="_numbersOnly" signature="_numbersOnly(e) =&gt; boolean">
              <variable citdl="Event" doc="the event" ilk="argument" name="e" />
            </scope>
            <scope doc="Wrapper for _updateRGB, but allows setting" ilk="function" name="syncUI" signature="syncUI(skipAnim)">
              <variable citdl="Boolean" doc="Omit Slider animation for this action" ilk="argument" name="skipAnim" />
            </scope>
            <scope doc="Translates the slider value into saturation, int[0,1], left to right" ilk="function" name="_getS" signature="_getS() =&gt; int" />
            <scope doc="Reads the sliders and converts the values to RGB, updating the&#xA;internal state for all the individual form fields" ilk="function" name="_getValuesFromSliders" signature="_getValuesFromSliders()" />
            <scope doc="Translates the slider value into value/brightness, int[0,1], top&#xA;to bottom" ilk="function" name="_getV" signature="_getV() =&gt; int" />
            <scope doc="Translates the slider value into hue, int[0,359]" ilk="function" name="_getH" signature="_getH() =&gt; int" />
            <scope doc="Handle keypress on one of the rgb or hsv fields." ilk="function" name="_rgbFieldKeypress" signature="_rgbFieldKeypress(e, el, prop)">
              <variable citdl="Event" doc="the keypress event" ilk="argument" name="e" />
              <variable citdl="HTMLElement" doc="the field" ilk="argument" name="el" />
              <variable citdl="string" doc="the key to the linked property" ilk="argument" name="prop" />
            </scope>
            <variable doc="Constants for the control&apos;s default default values" name="DEFAULT" />
            <variable citdl="YAHOO.widget.Slider" doc="The picker region" name="pickerSlider" />
            <variable citdl="String" doc="The id for the picker region slider" name="ID.PICKER_BG" />
            <variable citdl="Boolean" doc="Flag to allow individual UI updates to forego animation if available.&#xA;True during construction for initial thumb placement.  Set to false&#xA;after that." name="skipAnim" />
            <variable citdl="String" doc="The id for the &quot;green&quot; form field" name="ID.G" />
            <variable citdl="String" doc="The id for the &quot;green&quot; hex pair output" name="ID.G_HEX" />
            <variable doc="The id for the hsv controls" name="ID.HSV_CONTROLS" />
            <variable citdl="String" doc="The id for the color swatch" name="ID.SWATCH" />
            <variable doc="The id for the hsv controls" name="ID.HEX_CONTROLS" />
            <variable doc="Constants for the default image locations for img tags that are&#xA;generated by the control.  They can be modified by passing the&#xA;complete list to the contructor for the &quot;images&quot; attribute" name="IMAGE" />
            <variable citdl="String" doc="The id for the &quot;blue&quot; hex pair output" name="ID.B_HEX" />
            <variable doc="Constants for any script-generated messages.  The values here&#xA;are the default messages.  They can be updated by providing&#xA;the complete list to the constructor for the &quot;txt&quot; attribute." name="TXT" />
            <variable citdl="String" doc="The id for the hex value form field" name="ID.HEX" />
            <variable citdl="String" doc="The id for the hue slider" name="ID.HUE_BG" />
            <variable doc="The id for the control details" name="ID.CONTROLS" />
            <variable citdl="String" doc="The id for the &quot;value&quot; form field" name="ID.V" />
            <variable citdl="String" doc="The id for the &quot;saturation&quot; form field" name="ID.S" />
            <variable citdl="String" doc="The id for the &quot;red&quot; form field" name="ID.R" />
            <variable citdl="String" doc="The id for the &quot;hue&quot; form field" name="ID.H" />
            <variable citdl="String" doc="The id for the websafe color swatch" name="ID.WEBSAFE_SWATCH" />
            <variable doc="The element ids used by this control" name="ID" />
            <variable citdl="String" doc="The id for the &quot;blue&quot; form field" name="ID.B" />
            <variable doc="Constants for the control&apos;s configuration attributes" name="OPT" />
            <variable citdl="String" doc="The id for the hue thumb" name="ID.HUE_THUMB" />
            <variable citdl="String" doc="The id for the &quot;red&quot; hex pair output" name="ID.R_HEX" />
            <variable doc="The id for the rgb controls" name="ID.RGB_CONTROLS" />
            <variable citdl="String" doc="The id for the picker region thumb" name="ID.PICKER_THUMB" />
            <variable citdl="YAHOO.widget.Slider" doc="The hue slider" name="hueSlider" />
            <variable doc="The id for the hex summary" name="ID.HEX_SUMMARY" />
            <variable doc="The id for the controls section header" name="ID.CONTROLS_LABEL" />
          </scope>
          <scope doc="The Column class defines and manages attributes of DataTable Columns" ilk="class" name="Column">
            <scope attributes="__ctor__" doc="The Column class defines and manages attributes of DataTable Columns" ilk="function" name="Column" signature="Column(oConfigs)">
              <variable citdl="Object" doc="Object literal of definitions." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Returns Column key which has been sanitized for DOM (class and ID) usage&#xA;starts with letter, contains only letters, numbers, hyphen, or period." ilk="function" name="getSanitizedKey" signature="getSanitizedKey() =&gt; String" />
            <scope doc="Public accessor returns Column&apos;s current position index within its&#xA;ColumnSet&apos;s tree array, if applicable. Only non-nested and top-level parent&#xA;Columns will return a value;" ilk="function" name="getTreeIndex" signature="getTreeIndex() =&gt; Number" />
            <scope doc="Public accessor returns Column&apos;s parent instance if any, or null otherwise." ilk="function" name="getParent" signature="getParent() =&gt; YAHOO.widget.Column" />
            <scope doc="Returns field." ilk="function" name="getField" signature="getField() =&gt; String" />
            <scope doc="Returns object literal definition." ilk="function" name="getDefinition" signature="getDefinition() =&gt; Object" />
            <scope doc="Returns unique ID string." ilk="function" name="getId" signature="getId() =&gt; String" />
            <scope doc="Returns unique Column key." ilk="function" name="getKey" signature="getKey() =&gt; String" />
            <scope doc="Public accessor returns Column&apos;s current position index within its&#xA;ColumnSet&apos;s keys array, if applicable. Only non-nested and bottom-level&#xA;child Columns will return a value." ilk="function" name="getKeyIndex" signature="getKeyIndex() =&gt; Number" />
            <scope doc="Public accessor returns Column&apos;s calculated COLSPAN value." ilk="function" name="getColspan" signature="getColspan() =&gt; Number" />
            <scope doc="Public accessor returns Column&apos;s calculated ROWSPAN value." ilk="function" name="getRowspan" signature="getRowspan() =&gt; Number" />
            <scope doc="Column instance name, for logging." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="" ilk="function" name="getColEl" signature="getColEl()" />
            <scope doc="Returns DOM reference to the TH&apos;s liner DIV element. Introduced since&#xA;resizeable Columns may have an extra resizer liner, making the DIV liner&#xA;not reliably the TH element&apos;s first child." ilk="function" name="getThLInerEl" signature="getThLInerEl() =&gt; HTMLElement" />
            <scope doc="Returns DOM reference to the key TH element." ilk="function" name="getThEl" signature="getThEl() =&gt; HTMLElement" />
            <scope doc="Returns DOM reference to the resizer element, or null." ilk="function" name="getResizerEl" signature="getResizerEl() =&gt; HTMLElement" />
            <variable citdl="Function" doc="Custom sort handler. Signature: sortFunction(a, b, desc, field) where field is the sortOptions.field value" name="sortOptions.sortFunction" />
            <variable citdl="String" doc="Unique name, required." name="key" />
            <variable citdl="HTMLElement" doc="The DOM reference to the associated resizerelement (if any)." name="_elResizer" />
            <variable citdl="Boolean" doc="True if Column is resizeable, false otherwise. The Drag &amp; Drop Utility is&#xA;required to enable this feature. Only bottom-level and non-nested Columns are&#xA;resizeble." name="resizeable" />
            <variable citdl="Object[]" doc="Array of object literals that define children (nested headers) of a Column." name="children" />
            <variable citdl="String[] | Object[]" doc="Array of dropdown values for formatter:&quot;dropdown&quot; cases. Can either be a simple array (e.g.,&#xA;[&quot;Alabama&quot;,&quot;Alaska&quot;,&quot;Arizona&quot;,&quot;Arkansas&quot;]) or a an array of objects (e.g.,&#xA;[{label:&quot;Alabama&quot;, value:&quot;AL&quot;}, {label:&quot;Alaska&quot;, value:&quot;AK&quot;},&#xA;{label:&quot;Arizona&quot;, value:&quot;AZ&quot;}, {label:&quot;Arkansas&quot;, value:&quot;AR&quot;}])." name="dropdownOptions" />
            <variable citdl="HTMLElement" doc="The DOM reference to the associated TH element&apos;s liner DIV element." name="_elThLiner" />
            <variable citdl="HTMLElement" doc="The DOM reference to the associated TH element." name="_elTh" />
            <variable doc="" name="sortOptions.defaultOrder" />
            <variable citdl="String" doc="Custom field to sort on." name="sortOptions.field" />
            <variable citdl="Boolean" doc="True if Column is in selected state." name="selected" />
            <variable citdl="String" doc="Default sort direction for Column: YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC." name="sortOptions.defaultDir" />
            <variable citdl="String" doc="Text or HTML for display as Column&apos;s label in the TH element." name="label" />
            <variable citdl="Number" doc="Minimum Column width (in pixels)." name="minWidth" />
            <variable citdl="Number" doc="Column width (in pixels)." name="width" />
            <variable citdl="YAHOO.widget.CellEditor" doc="A CellEditor instance, otherwise Column is not editable." name="editor" />
            <variable citdl="Number" doc="Number of table rows the Column spans." name="_nRowspan" />
            <variable citdl="Number" doc="Number of table cells the Column spans." name="_nColspan" />
            <variable citdl="String || HTMLFunction" doc="Defines a format function." name="formatter" />
            <variable citdl="String" doc="Associated database field, or null." name="field" />
            <variable citdl="Number" doc="Internal class variable to index multiple Column instances." name="Column._nCount" />
            <variable citdl="YAHOO.util.DragDrop" doc="For unreg() purposes, a reference to the Column&apos;s DragDrop instance." name="_dd" />
            <variable citdl="Object" doc="Config passed to YAHOO.util.Number.format() by the &apos;currency&apos; Column formatter." name="currencyOptions" />
            <variable citdl="Number" doc="Reference to Column&apos;s current position index within its ColumnSet&apos;s keys&#xA;array, if applicable. This property only applies to non-nested and bottom-&#xA;level child Columns." name="_nKeyIndex" />
            <variable citdl="String" doc="Column head cell ABBR for accessibility." name="abbr" />
            <variable citdl="Number" doc="Reference to Column&apos;s current position index within its ColumnSet&apos;s tree&#xA;array, if applicable. This property only applies to non-nested and top-&#xA;level parent Columns." name="_nTreeIndex" />
            <variable citdl="Boolean" doc="True if Column is in hidden state." name="hidden" />
            <variable citdl="HTMLElement" doc="The DOM reference to the associated TH element&apos;s label SPAN element." name="_elThLabel" />
            <variable citdl="YAHOO.util.DragDrop" doc="For unreg() purposes, a reference to the Column resizer&apos;s DragDrop instance." name="_ddResizer" />
            <variable citdl="Boolean" doc="True if Column is sortable, false otherwise." name="sortable" />
            <variable citdl="String" doc="Unique String identifier assigned at instantiation." name="_sId" />
            <variable citdl="String || String[]" doc="Custom CSS class or array of classes to be applied to every cell in the Column." name="className" />
            <variable citdl="Object" doc="Config passed to YAHOO.util.Date.format() by the &apos;date&apos; Column formatter." name="dateOptions" />
            <variable citdl="Number" doc="Internal width tracker." name="_nWidth" />
            <variable citdl="YAHOO.widget.Column" doc="Column&apos;s parent Column instance, or null." name="_oParent" />
            <variable citdl="Number" doc="When a width is not defined for a Column, maxAutoWidth defines an upper&#xA;limit that the Column should be auto-sized to. If resizeable is enabled, &#xA;users may still resize to a greater width. Most useful for Columns intended&#xA;to hold long unbroken, unwrapped Strings, such as URLs, to prevent very&#xA;wide Columns from disrupting visual readability by inducing truncation." name="maxAutoWidth" />
          </scope>
          <scope doc="ColumnChart class for the YUI Charts widget." ilk="class" name="ColumnChart">
            <scope attributes="__ctor__" doc="ColumnChart class for the YUI Charts widget." ilk="function" name="ColumnChart" signature="ColumnChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
          </scope>
          <scope doc="ColumnSeries class for the YUI Charts widget." ilk="class" name="ColumnSeries">
            <scope attributes="__ctor__" doc="ColumnSeries class for the YUI Charts widget." ilk="function" name="ColumnSeries" signature="ColumnSeries()" />
          </scope>
          <scope doc="The ColumnSet class defines and manages a DataTable&apos;s Columns,&#xA;including nested hierarchies and access to individual Column instances." ilk="class" name="ColumnSet">
            <scope attributes="__ctor__" doc="The ColumnSet class defines and manages a DataTable&apos;s Columns,&#xA;including nested hierarchies and access to individual Column instances." ilk="function" name="ColumnSet" signature="ColumnSet(aDefinitions)">
              <variable citdl="Object[]" doc="Array of object literals that define cells in&#xA;the THEAD." ilk="argument" name="aDefinitions" />
            </scope>
            <scope doc="Returns Column instance with given key or ColumnSet key index." ilk="function" name="getColumn" signature="getColumn(column) =&gt; YAHOO.widget.Column">
              <variable citdl="String | Number" doc="Column key or ColumnSet key index." ilk="argument" name="column" />
            </scope>
            <scope doc="Public accessor to the definitions array." ilk="function" name="getDefinitions" signature="getDefinitions() =&gt; Object[]" />
            <scope doc="Initializes ColumnSet instance with data from Column definitions." ilk="function" name="_init" signature="_init(aDefinitions)">
              <variable citdl="Object[]" doc="Array of object literals that define cells in&#xA;the THEAD ." ilk="argument" name="aDefinitions" />
            </scope>
            <scope doc="Returns unique name of the ColumnSet instance." ilk="function" name="getId" signature="getId() =&gt; String" />
            <scope doc="Returns Column instance with given ID." ilk="function" name="getColumnById" signature="getColumnById(column) =&gt; YAHOO.widget.Column">
              <variable citdl="String" doc="Column ID." ilk="argument" name="column" />
            </scope>
            <scope doc="ColumnSet instance name, for logging." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Public accessor returns array of given Column&apos;s desendants (if any), including itself." ilk="function" name="getDescendants" signature="getDescendants() =&gt; Array" />
            <variable citdl="YAHOO.widget.Column[]" doc="Flattened representation of all Columns." name="flat" />
            <variable citdl="Object[]" doc="Array of object literal Column definitions passed to the constructor." name="_aDefinitions" />
            <variable citdl="YAHOO.widget.Column[]" doc="Array of Columns that map one-to-one to a table column." name="keys" />
            <variable citdl="String" doc="Unique instance name." name="_sId" />
            <variable citdl="YAHOO.widget.Column[]" doc="Top-down tree representation of Column hierarchy." name="tree" />
            <variable citdl="Number" doc="Internal class variable to index multiple ColumnSet instances." name="ColumnSet._nCount" />
            <variable citdl="String[]" doc="ID index of nested parent hierarchies for HEADERS accessibility attribute." name="headers" />
          </scope>
          <scope doc="ContainerEffect encapsulates animation transitions that are executed when &#xA;an Overlay is shown or hidden." ilk="class" name="ContainerEffect">
            <scope attributes="__ctor__" doc="ContainerEffect encapsulates animation transitions that are executed when &#xA;an Overlay is shown or hidden." ilk="function" name="ContainerEffect" signature="ContainerEffect(overlay, attrIn, attrOut, targetElement, Optional.)">
              <variable citdl="YAHOO.widget.Overlay" doc="The Overlay that the animation &#xA;should be associated with" ilk="argument" name="overlay" />
              <variable citdl="Object" doc="The object literal representing the animation &#xA;arguments to be used for the animate-in transition. The arguments for &#xA;this literal are: attributes(object, see YAHOO.util.Anim for description), &#xA;duration(Number), and method(i.e. Easing.easeIn)." ilk="argument" name="attrIn" />
              <variable citdl="Object" doc="The object literal representing the animation &#xA;arguments to be used for the animate-out transition. The arguments for  &#xA;this literal are: attributes(object, see YAHOO.util.Anim for description), &#xA;duration(Number), and method(i.e. Easing.easeIn)." ilk="argument" name="attrOut" />
              <variable citdl="HTMLElement" doc="Optional. The target element that  &#xA;should be animated during the transition. Defaults to overlay.element." ilk="argument" name="targetElement" />
              <variable citdl="class" doc="The animation class to instantiate. Defaults to &#xA;YAHOO.util.Anim. Other options include YAHOO.util.Motion." ilk="argument" name="Optional." />
            </scope>
            <scope doc="The default onStart handler for the in-animation." ilk="function" name="handleStartAnimateIn" signature="handleStartAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="The default onStart handler for the out-animation." ilk="function" name="handleStartAnimateOut" signature="handleStartAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="Triggers the out-animation." ilk="function" name="animateOut" signature="animateOut()" />
            <scope doc="A pre-configured ContainerEffect instance that can be used for sliding an &#xA;overlay in and out." ilk="function" name="SLIDE" signature="SLIDE(overlay, dur) =&gt; YAHOO.widget.ContainerEffect">
              <variable citdl="YAHOO.widget.Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
              <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
            </scope>
            <scope doc="The default onComplete handler for the out-animation." ilk="function" name="handleCompleteAnimateOut" signature="handleCompleteAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="The default onTween handler for the out-animation." ilk="function" name="handleTweenAnimateOut" signature="handleTweenAnimateOut(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="The default onTween handler for the in-animation." ilk="function" name="handleTweenAnimateIn" signature="handleTweenAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="Initializes the animation classes and events." ilk="function" name="init" signature="init()" />
            <scope doc="Returns a string representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="A pre-configured ContainerEffect instance that can be used for fading &#xA;an overlay in and out." ilk="function" name="FADE" signature="FADE(overlay, dur) =&gt; YAHOO.widget.ContainerEffect">
              <variable citdl="YAHOO.widget.Overlay" doc="The Overlay object to animate" ilk="argument" name="overlay" />
              <variable citdl="Number" doc="The duration of the animation" ilk="argument" name="dur" />
            </scope>
            <scope doc="The default onComplete handler for the in-animation." ilk="function" name="handleCompleteAnimateIn" signature="handleCompleteAnimateIn(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments" ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="Triggers the in-animation." ilk="function" name="animateIn" signature="animateIn()" />
            <variable citdl="Object" doc="The animation attributes to use when transitioning out of view" name="attrOut" />
            <variable citdl="HTMLElement" doc="The target element to be animated" name="targetElement" />
            <variable citdl="class" doc="The animation class to use for animating the overlay" name="animClass" />
            <variable citdl="Object" doc="The animation attributes to use when transitioning into view" name="attrIn" />
            <variable citdl="YAHOO.widget.Overlay" doc="The overlay to animate" name="overlay" />
          </scope>
          <scope classrefs="YAHOO.widget.Menu" doc="Creates a list of options or commands which are made visible in response to &#xA;an HTML element&apos;s &quot;contextmenu&quot; event (&quot;mousedown&quot; for Opera)." ilk="class" name="ContextMenu">
            <scope attributes="__ctor__" doc="Creates a list of options or commands which are made visible in response to &#xA;an HTML element&apos;s &quot;contextmenu&quot; event (&quot;mousedown&quot; for Opera)." ilk="function" name="ContextMenu" signature="ContextMenu(p_oElement, p_oElement, p_oElement, p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the &#xA;context menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-&#xA;html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object specifying the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-&#xA;html.html#ID-94282980&quot;&gt;HTMLSelectElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for &#xA;the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the context menu. See configuration class documentation &#xA;for more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Initializes the custom events for the context menu." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="&quot;click&quot; event handler for the HTML element(s) identified as the &#xA;&quot;trigger&quot; for the context menu.  Used to cancel default behaviors in Opera." ilk="function" name="_onTriggerClick" signature="_onTriggerClick(p_oEvent, p_oMenu)">
              <variable citdl="Event" doc="Object representing the DOM event object passed back &#xA;by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context &#xA;menu that is handling the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="The ContextMenu class&apos;s initialization method. This method is &#xA;automatically called by the constructor, and sets up all DOM references for &#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" name="init" signature="init(p_oElement, p_oElement, p_oElement, p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for &#xA;the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-&#xA;html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object specifying the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-&#xA;html.html#ID-94282980&quot;&gt;HTMLSelectElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for &#xA;the context menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the context menu. See configuration class documentation &#xA;for more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Returns a string representing the context menu." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Removes all of the DOM event handlers from the HTML element(s) &#xA;whose &quot;context menu&quot; event (&quot;click&quot; for Opera) trigger the display of &#xA;the context menu." ilk="function" name="_removeEventHandlers" signature="_removeEventHandlers()" />
            <scope doc="&quot;beforeShow&quot; event handler used to position the contextmenu." ilk="function" name="position" signature="position(p_sType, p_aArgs, p_aPos)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="Array" doc="Array representing the xy position for the context menu." ilk="argument" name="p_aPos" />
            </scope>
            <scope doc="Cancels the display of the context menu." ilk="function" name="cancel" signature="cancel()" />
            <scope doc="Removes the context menu&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element &#xA;(and accompanying child nodes) from the document." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="&quot;contextmenu&quot; event handler (&quot;mousedown&quot; for Opera) for the HTML &#xA;element(s) that trigger the display of the context menu." ilk="function" name="_onTriggerContextMenu" signature="_onTriggerContextMenu(p_oEvent, p_oMenu)">
              <variable citdl="Event" doc="Object representing the DOM event object passed back &#xA;by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context &#xA;menu that is handling the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be &#xA;changed using the context menu&apos;s Config object (&quot;cfg&quot;)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <scope doc="Event handler for when the value of the &quot;trigger&quot; configuration &#xA;property changes." ilk="function" name="configTrigger" signature="configTrigger(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.ContextMenu" doc="Object representing the context &#xA;menu that fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <variable citdl="Object" doc="Constant representing the ContextMenu&apos;s configuration properties" name="DEFAULT_CONFIG" />
            <variable citdl="String|&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/leve&#xA;l-one-html.html#ID-58190037&quot;&gt;HTMLElement&lt;/a&gt;|Array" doc="Object reference to the current value of the &quot;trigger&quot; &#xA;configuration property." name="_oTrigger" />
            <variable citdl="Object" doc="Constant representing the name of the ContextMenu&apos;s events" name="EVENT_TYPES" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-&#xA;html.html#ID-58190037&quot;&gt;HTMLElement&lt;/a&gt;" doc="Object reference for the HTML element that was the target of the&#xA;&quot;contextmenu&quot; DOM event (&quot;mousedown&quot; for Opera) that triggered the display of &#xA;the context menu." name="contextEventTarget" />
            <variable citdl="Boolean" doc="Boolean indicating if the display of the context menu should &#xA;be cancelled." name="_bCancelled" />
          </scope>
          <scope classrefs="YAHOO.widget.MenuItem" doc="Creates an item for a context menu." ilk="class" name="ContextMenuItem">
            <scope attributes="__ctor__" doc="Creates an item for a context menu." ilk="function" name="ContextMenuItem" signature="ContextMenuItem(p_oObject, p_oObject, p_oObject, p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the context menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-74680021&quot;&gt;HTMLLIElement&lt;/a&gt;" doc="Object specifying the &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the context menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-38450247&quot;&gt;HTMLOptGroupElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the context &#xA;menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-70901257&quot;&gt;HTMLOptionElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the context menu item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the context menu item. See configuration class &#xA;documentation for more details." ilk="argument" name="p_oConfig" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="DataTable class for the YUI DataTable widget." ilk="class" name="DataTable">
            <scope attributes="__ctor__" doc="DataTable class for the YUI DataTable widget." ilk="function" name="DataTable" signature="DataTable(elContainer, aColumnDefs, oDataSource, oConfigs)">
              <variable citdl="HTMLElement" doc="Container element for the TABLE." ilk="argument" name="elContainer" />
              <variable citdl="Object[]" doc="Array of object literal Column definitions." ilk="argument" name="aColumnDefs" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Sorts given Column. If &quot;dynamicData&quot; is true, current selections are purged before&#xA;a request is sent to the DataSource for data for the new state (using the&#xA;request returned by &quot;generateRequest()&quot;)." ilk="function" name="sortColumn" signature="sortColumn(oColumn, sDir)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="String" doc="(Optional) YAHOO.widget.DataTable.CLASS_ASC or&#xA;YAHOO.widget.DataTable.CLASS_DESC" ilk="argument" name="sDir" />
            </scope>
            <scope doc="Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED&#xA;from all TD elements in the internal tracker." ilk="function" name="_unselectAllTdEls" signature="_unselectAllTdEls()" />
            <scope doc="For the given Column ID, returns the associated Column instance. Note: For&#xA;getting Columns by key, please use the method getColumn()." ilk="function" name="getColumnById" signature="getColumnById(column) =&gt; YAHOO.widget.Column">
              <variable citdl="String" doc="Column ID string." ilk="argument" name="column" />
            </scope>
            <scope doc="Renders the Paginator to the DataTable UI" ilk="function" name="renderPaginator" signature="renderPaginator()" />
            <scope doc="Determines selection behavior resulting from a key event when selection mode&#xA;is set to &quot;cellrange&quot;." ilk="function" name="_handleCellRangeSelectionByKey" signature="_handleCellRangeSelectionByKey(e)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="e" />
            </scope>
            <scope doc="For the given row and column, updates the Record with the given data. If the&#xA;cell is on current page, the corresponding DOM elements are also updated." ilk="function" name="updateCell" signature="updateCell(oRecord, oColumn, oData)">
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column | String | Number" doc="A Column key, or a ColumnSet key index." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="New data value for the cell." ilk="argument" name="oData" />
            </scope>
            <scope doc="Clones object literal or array of object literals." ilk="function" name="DataTable._cloneObject" signature="DataTable._cloneObject(o)">
              <variable citdl="Object" doc="Object." ilk="argument" name="o" />
            </scope>
            <scope doc="Sets given Column to given pixel width. If new width is less than minimum&#xA;width, sets to minimum width. Updates oColumn.width value." ilk="function" name="setColumnWidth" signature="setColumnWidth(oColumn, nWidth)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="New width in pixels. A null value auto-sizes Column,&#xA;subject to minWidth and maxAutoWidth validations." ilk="argument" name="nWidth" />
            </scope>
            <scope doc="Brings focus to the TBODY element. Alias to focusTbodyEl." ilk="function" name="focus" signature="focus()" />
            <scope doc="Determines selection behavior resulting from a mouse event when selection mode&#xA;is set to &quot;singlecell&quot;." ilk="function" name="_handleSingleCellSelectionByMouse" signature="_handleSingleCellSelectionByMouse(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Updates width of a Column&apos;s liner DIV elements by dynamically creating a&#xA;STYLE node and writing and updating CSS style rules to it. If this fails during&#xA;runtime, the fallback method _setColumnWidthDynFunction() will be called.&#xA;Notes: This technique is not performant in IE6. IE7 crashes if DataTable is&#xA;nested within another TABLE element. For these cases, it is recommended to&#xA;use the method _setColumnWidthDynFunction by setting _bDynStylesFallback to TRUE." ilk="function" name="_setColumnWidthDynStyles" signature="_setColumnWidthDynStyles(oColumn, sWidth)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="String" doc="New width value." ilk="argument" name="sWidth" />
            </scope>
            <scope doc="Formats TEXTAREA elements." ilk="function" name="DataTable.formatTextarea" signature="DataTable.formatTextarea(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="(Optional) Data value for the cell." ilk="argument" name="oData" />
            </scope>
            <scope doc="Implementation of Element&apos;s abstract method. Sets up config values." ilk="function" name="initAttributes" signature="initAttributes(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal definition of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Overridable custom event handler to select cell." ilk="function" name="onEventSelectCell" signature="onEventSelectCell(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Returns unique id assigned to instance, which is a useful prefix for&#xA;generating unique DOM ID strings." ilk="function" name="getId" signature="getId() =&gt; String" />
            <scope doc="Forces Gecko repaint." ilk="function" name="_repaintGecko" signature="_repaintGecko()" />
            <scope doc="Formats a basic TD element." ilk="function" name="_formatTdEl" signature="_formatTdEl(oColumn, elTd, index, isLast) =&gt; HTMLElement">
              <variable citdl="YAHOO.widget.Column" doc="Associated Column instance." ilk="argument" name="oColumn" />
              <variable citdl="HTMLElement" doc="An unformatted TD element." ilk="argument" name="elTd" />
              <variable citdl="Number" doc="Column key index." ilk="argument" name="index" />
              <variable citdl="Boolean" doc="True if Column is last key of the ColumnSet." ilk="argument" name="isLast" />
            </scope>
            <scope doc="Destroy&apos;s the DataTable message TBODY element, if available." ilk="function" name="_destroyMsgTbodyEl" signature="_destroyMsgTbodyEl()" />
            <scope doc="Returns the page row index of given row. Returns null if the row is not on the&#xA;current DataTable page." ilk="function" name="getTrIndex" signature="getTrIndex(row) =&gt; Number">
              <variable citdl="HTMLElement | String | YAHOO.widget.Record | Number" doc="DOM or ID&#xA;string reference to an element within the DataTable page, a Record instance,&#xA;or a Record&apos;s RecordSet index." ilk="argument" name="row" />
            </scope>
            <scope doc="Handles click events on the THEAD element." ilk="function" name="_onTheadClick" signature="_onTheadClick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Determines selection behavior resulting from a key event when selection mode&#xA;is set to &quot;singlecell&quot;." ilk="function" name="_handleSingleCellSelectionByKey" signature="_handleSingleCellSelectionByKey(e)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="e" />
            </scope>
            <scope doc="Handles click events on the primary TBODY element." ilk="function" name="_onTbodyClick" signature="_onTbodyClick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Returns last selected Record ID." ilk="function" name="getLastSelectedRecord" signature="getLastSelectedRecord() =&gt; String" />
            <scope doc="Overridable custom event handler to save active CellEditor input." ilk="function" name="onEventSaveCellEditor" signature="onEventSaveCellEditor()" />
            <scope doc="Initializes THEAD element." ilk="function" name="_initTheadEl" signature="_initTheadEl(elTable, Initialized)">
              <variable citdl="HTMLElement" doc="TABLE element into which to create COLGROUP." ilk="argument" name="elTable" />
              <variable citdl="HTMLElement" doc="THEAD element." ilk="argument" name="Initialized" />
            </scope>
            <scope doc="Adds a COL element to COLGROUP at given index." ilk="function" name="_insertColgroupColEl" signature="_insertColgroupColEl(index)">
              <variable citdl="Number" doc="Index of new COL element." ilk="argument" name="index" />
            </scope>
            <scope doc="Outputs markup into the given TH based on given Column." ilk="function" name="DataTable.formatTheadCell" signature="DataTable.formatTheadCell(elCellLabel, oColumn, oSortedBy)">
              <variable citdl="HTMLElement" doc="The label SPAN element within the TH liner,&#xA;not the liner DIV element." ilk="argument" name="elCellLabel" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Sort state object literal." ilk="argument" name="oSortedBy" />
            </scope>
            <scope doc="Displays message within secondary TBODY." ilk="function" name="showTableMessage" signature="showTableMessage(sHTML, sClassName)">
              <variable citdl="String" doc="(optional) Value for innerHTMlang." ilk="argument" name="sHTML" />
              <variable citdl="String" doc="(optional) Classname." ilk="argument" name="sClassName" />
            </scope>
            <scope doc="Reorders a COL element from old index(es) to new index." ilk="function" name="_reorderColgroupColEl" signature="_reorderColgroupColEl(aKeyIndexes, newIndex)">
              <variable citdl="Number[]" doc="Array of indexes of removed COL element." ilk="argument" name="aKeyIndexes" />
              <variable citdl="Number" doc="New index." ilk="argument" name="newIndex" />
            </scope>
            <scope doc="Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given cell." ilk="function" name="unhighlightCell" signature="unhighlightCell(cell)">
              <variable citdl="HTMLElement | String" doc="DOM element reference or ID string." ilk="argument" name="cell" />
            </scope>
            <scope doc="" ilk="function" name="getCell" signature="getCell()" />
            <scope doc="Returns DOM reference to the DataTable&apos;s TABLE element." ilk="function" name="getTableEl" signature="getTableEl() =&gt; HTMLElement" />
            <scope doc="Passes through cancelEvent of the active CellEditor." ilk="function" name="_onEditorCancelEvent" signature="_onEditorCancelEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="" ilk="function" name="DataTable.editTextarea" signature="DataTable.editTextarea()" />
            <scope doc="Handles keydown events on the THEAD element." ilk="function" name="_onTheadKeydown" signature="_onTheadKeydown(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Clears browser text selection. Useful to call on rowSelectEvent or&#xA;cellSelectEvent to prevent clicks or dblclicks from selecting text in the&#xA;browser." ilk="function" name="clearTextSelection" signature="clearTextSelection()" />
            <scope doc="" ilk="function" name="DataTable.editCheckbox" signature="DataTable.editCheckbox()" />
            <scope doc="Returns DOM reference to the below TD element from the given cell, or null." ilk="function" name="getBelowTdEl" signature="getBelowTdEl(cell) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" doc="from which to get previous TD element." ilk="argument" name="cell" />
            </scope>
            <scope doc="Returns DOM reference to the first TD element in the DataTable page (by default),&#xA;the first TD element of the optionally given row, or null." ilk="function" name="getFirstTdEl" signature="getFirstTdEl(row) =&gt; HTMLElement">
              <variable citdl="HTMLElement" doc="(optional) row from which to get first TD" ilk="argument" name="row" />
            </scope>
            <scope doc="Formats INPUT TYPE=RADIO elements." ilk="function" name="DataTable.formatRadio" signature="DataTable.formatRadio(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="(Optional) Data value for the cell." ilk="argument" name="oData" />
            </scope>
            <scope doc="Passes through revertEvent of the active CellEditor." ilk="function" name="_onEditorRevertEvent" signature="_onEditorRevertEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Determines selection behavior resulting from a mouse event when selection mode&#xA;is set to &quot;standard&quot;." ilk="function" name="_handleStandardSelectionByMouse" signature="_handleStandardSelectionByMouse(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Destroy&apos;s the DataTable TBODY element, if available." ilk="function" name="_destroyTbodyEl" signature="_destroyTbodyEl()" />
            <scope doc="Method executed during set() operation for the &quot;paginator&quot; attribute.&#xA;Adds and/or severs event listeners between DataTable and Paginator" ilk="function" name="_updatePaginator" signature="_updatePaginator(newPag)">
              <variable citdl="Paginator" doc="Paginator instance (or null) for DataTable to use" ilk="argument" name="newPag" />
            </scope>
            <scope doc="Handles keydown events on the TBODY element. Handles selection behavior,&#xA;provides hooks for ENTER to edit functionality." ilk="function" name="_onTbodyKeydown" signature="_onTbodyKeydown(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Creates HTML markup CAPTION element." ilk="function" name="_initCaptionEl" signature="_initCaptionEl(sCaption)">
              <variable citdl="String" doc="Text for caption." ilk="argument" name="sCaption" />
            </scope>
            <scope doc="Removes given Column. NOTE: You cannot remove nested Columns. You can only remove&#xA;non-nested Columns, and top-level parent Columns (which will remove all&#xA;children Columns)." ilk="function" name="removeColumn" signature="removeColumn(oColumn) =&gt; YAHOO.widget.Column">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Overridable custom event handler to highlight row. Accounts for spurious&#xA;caused-by-child events." ilk="function" name="onEventHighlightRow" signature="onEventHighlightRow(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Backward compatibility." ilk="function" name="_initCellEditorEl" signature="_initCellEditorEl()" />
            <scope doc="Clears minWidth." ilk="function" name="_clearMinWidth" signature="_clearMinWidth(oColumn)">
              <variable citdl="YAHOO.widget.Column" doc="Which Column." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Activates and shows CellEditor instance for the given cell while deactivating and&#xA;canceling previous CellEditor. It is baked into DataTable that only one CellEditor&#xA;can be active at any given time." ilk="function" name="showCellEditor" signature="showCellEditor(elCell)">
              <variable citdl="HTMLElement | String" doc="Cell to edit." ilk="argument" name="elCell" />
            </scope>
            <scope doc="Returns DOM reference to a TD liner element." ilk="function" name="getTdLinerEl" signature="getTdLinerEl(cell) =&gt; HTMLElement">
              <variable citdl="HTMLElement | Object} TD element or child of a TD element, or&#xA;object literal of syntax {record:oRecord, column:oColumn" doc="." ilk="argument" name="cell" />
            </scope>
            <scope doc="Sets liner DIV elements of given Column to given width. When value should be&#xA;auto-calculated to fit content overflow is set to visible, otherwise overflow&#xA;is set to hidden. No validations against minimum width and no updating&#xA;Column.width value." ilk="function" name="_setColumnWidth" signature="_setColumnWidth(oColumn, sWidth, sOverflow)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="String" doc="New width value." ilk="argument" name="sWidth" />
              <variable citdl="String" doc="Should be &quot;hidden&quot; when Column width is explicitly&#xA;being set to a value, but should be &quot;visible&quot; when Column is meant to auto-fit content." ilk="argument" name="sOverflow" />
            </scope>
            <scope doc="Returns selected rows as an array of Record IDs." ilk="function" name="getSelectedRows" signature="getSelectedRows() =&gt; String[]" />
            <scope doc="Returns DOM reference to a TD element." ilk="function" name="getTdEl" signature="getTdEl(cell) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Object} TD element or child of a TD element, or&#xA;object literal of syntax {record:oRecord, column:oColumn" doc="." ilk="argument" name="cell" />
            </scope>
            <scope doc="Callback function receives reponse from DataSource, replaces all existing&#xA;Records in  RecordSet, updates TR elements with new data, and updates state&#xA;UI for pagination and sorting from payload data, if necessary." ilk="function" name="onDataReturnReplaceRows" signature="onDataReturnReplaceRows(oRequest, oResponse, oPayload)">
              <variable citdl="MIXED" doc="Original generated request." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="(optional) Additional argument(s)" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Convenience method to add multiple rows." ilk="function" name="addRows" signature="addRows(aData, index)">
              <variable citdl="Object[]" doc="Array of object literal data for the rows." ilk="argument" name="aData" />
              <variable citdl="Number" doc="(optional) RecordSet position index at which to add data." ilk="argument" name="index" />
            </scope>
            <scope doc="Overridable custom event handler to highlight cell. Accounts for spurious&#xA;caused-by-child events." ilk="function" name="onEventHighlightCell" signature="onEventHighlightCell(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Returns the default containers used for Paginators.  If create param is&#xA;passed, the containers will be created and added to the DataTable container." ilk="function" name="_defaultPaginatorContainers" signature="_defaultPaginatorContainers(create)">
              <variable citdl="boolean" doc="Create the default containers if not found" ilk="argument" name="create" />
            </scope>
            <scope doc="Handles focus events on the THEAD element." ilk="function" name="_onTheadFocus" signature="_onTheadFocus(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Initializes the DataTable outer container element, including a mask." ilk="function" name="_initContainerEl" signature="_initContainerEl(elContainer)">
              <variable citdl="HTMLElement | String" doc="HTML DIV element by reference or ID." ilk="argument" name="elContainer" />
            </scope>
            <scope doc="Passes through saveEvent of the active CellEditor." ilk="function" name="_onEditorSaveEvent" signature="_onEditorSaveEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Handles mousedown events on the DataTable instance." ilk="function" name="_onTableMousedown" signature="_onTableMousedown(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The mousedown event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Initializes DataSource." ilk="function" name="_initDataSource" signature="_initDataSource(oDataSource)">
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
            </scope>
            <scope doc="Handles change events on SELECT elements within DataTable." ilk="function" name="_onDropdownChange" signature="_onDropdownChange(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The change event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="" ilk="function" name="getBody" signature="getBody()" />
            <scope doc="Destroys shared Column resizer proxy." ilk="function" name="DataTable._destroyColumnResizerProxyEl" signature="DataTable._destroyColumnResizerProxyEl() =&gt; HTMLElement" />
            <scope doc="Initialize internal event listeners" ilk="function" name="_initEvents" signature="_initEvents()" />
            <scope doc="Initializes TBODY element for messaging." ilk="function" name="_initMsgTbodyEl" signature="_initMsgTbodyEl(elTable)">
              <variable citdl="HTMLElement" doc="TABLE element into which to create TBODY" ilk="argument" name="elTable" />
            </scope>
            <scope doc="Starting with the given row, updates associated Records with the given data.&#xA;The number of rows to update are determined by the array of data provided.&#xA;Undefined data (i.e., not an object literal) causes a row to be skipped. If&#xA;any of the rows are on current page, the corresponding DOM elements are also&#xA;updated." ilk="function" name="updateRows" signature="updateRows(startrow, aData)">
              <variable citdl="YAHOO.widget.Record | Number | HTMLElement | String" doc="Starting row to update: By Record instance, by Record&apos;s RecordSet&#xA;position index, by HTMLElement reference to the TR element, or by ID string&#xA;of the TR element." ilk="argument" name="startrow" />
              <variable citdl="Object[]" doc="Array of object literal of data for the rows." ilk="argument" name="aData" />
            </scope>
            <scope doc="Handles mouseup events on the DataTable instance." ilk="function" name="_onTableMouseup" signature="_onTableMouseup(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseup event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Convenience method to delete multiple rows." ilk="function" name="deleteRows" signature="deleteRows(row, count)">
              <variable citdl="HTMLElement | String | Number" doc="DOM element reference or ID string&#xA;to DataTable page element or RecordSet index." ilk="argument" name="row" />
              <variable citdl="Number" doc="(optional) How many rows to delete. A negative value&#xA;will delete towards the beginning." ilk="argument" name="count" />
            </scope>
            <scope doc="Overridable custom event handler to cancel active CellEditor." ilk="function" name="onEventCancelCellEditor" signature="onEventCancelCellEditor()" />
            <scope doc="Initializes Column sorting." ilk="function" name="_initColumnSort" signature="_initColumnSort()" />
            <scope doc="Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.&#xA;NOTE: You cannot highlight/unhighlight nested Columns. You can only&#xA;highlight/unhighlight non-nested Columns, and bottom-level key Columns." ilk="function" name="highlightColumn" signature="highlightColumn(column)">
              <variable citdl="HTMLElement | String | Number" doc="DOM reference or ID string to a&#xA;TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index." ilk="argument" name="column" />
            </scope>
            <scope doc="Public handler of the editorBlurEvent. By default, saves on blur if&#xA;disableBtns is true, otherwise cancels on blur." ilk="function" name="onEditorBlurEvent" signature="onEditorBlurEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Formats text strings." ilk="function" name="DataTable.formatText" signature="DataTable.formatText(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="(Optional) Data value for the cell." ilk="argument" name="oData" />
            </scope>
            <scope doc="Returns DOM reference to a TH liner element. Needed to normalize for resizeable &#xA;Columns, which have an additional resizer liner DIV element between the TH&#xA;element and the liner DIV element." ilk="function" name="getThLinerEl" signature="getThLinerEl(theadCell) =&gt; HTMLElement">
              <variable citdl="YAHOO.widget.Column | HTMLElement | String" doc="Column instance,&#xA;DOM element reference, or string ID." ilk="argument" name="theadCell" />
            </scope>
            <scope doc="Returns the DataTable instance&apos;s RecordSet instance." ilk="function" name="getRecordSet" signature="getRecordSet() =&gt; YAHOO.widget.RecordSet" />
            <scope doc="Initializes CellEditor integration." ilk="function" name="_initCellEditing" signature="_initCellEditing()" />
            <scope doc="For the given row, updates the associated Record with the given data. If the&#xA;row is on current page, the corresponding DOM elements are also updated." ilk="function" name="updateRow" signature="updateRow(row, oData)">
              <variable citdl="YAHOO.widget.Record | Number | HTMLElement | String" doc="Which row to update: By Record instance, by Record&apos;s RecordSet&#xA;position index, by HTMLElement reference to the TR element, or by ID string&#xA;of the TR element." ilk="argument" name="row" />
              <variable citdl="Object" doc="Object literal of data for the row." ilk="argument" name="oData" />
            </scope>
            <scope doc="Destroys shared Column drag target." ilk="function" name="DataTable._destroyColumnDragTargetEl" signature="DataTable._destroyColumnDragTargetEl()" />
            <scope doc="Initializes elements associated with Column functionality: ColumnDD and ColumnResizers." ilk="function" name="_initColumnHelpers" signature="_initColumnHelpers()" />
            <scope doc="Hides secondary TBODY." ilk="function" name="hideTableMessage" signature="hideTableMessage()" />
            <scope doc="Retruns classnames to represent current Column states." ilk="function" name="_getColumnClassnames" signature="_getColumnClassnames(oColumn, aAddClasses) =&gt; String">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="String[]" doc="An array of additional classnames to add to the&#xA;return value." ilk="argument" name="aAddClasses" />
            </scope>
            <scope doc="Returns DOM reference to the TD element within the secondary TBODY that is&#xA;used to display messages." ilk="function" name="getMsgTdEl" signature="getMsgTdEl() =&gt; HTMLElement" />
            <scope doc="Overridable custom event handler to select Column." ilk="function" name="onEventSelectColumn" signature="onEventSelectColumn(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Initializes TBODY element for data." ilk="function" name="_initTbodyEl" signature="_initTbodyEl(elTable)">
              <variable citdl="HTMLElement" doc="TABLE element into which to create TBODY ." ilk="argument" name="elTable" />
            </scope>
            <scope doc="Handles mouseover events on the DataTable instance." ilk="function" name="_onTableMouseover" signature="_onTableMouseover(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseover event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Formats currency. Default unit is USD." ilk="function" name="DataTable.formatCurrency" signature="DataTable.formatCurrency(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="Data value for the cell." ilk="argument" name="oData" />
            </scope>
            <scope doc="Returns true if given item is selected, false otherwise." ilk="function" name="isSelected" signature="isSelected(o) =&gt; Boolean">
              <variable citdl="String | HTMLElement | YAHOO.widget.Record | Number&#xA;{record:YAHOO.widget.Record, column:YAHOO.widget.Column} " doc="TR or TD element by&#xA;reference or ID string, a Record instance, a RecordSet position index,&#xA;or an object literal representation&#xA;of a cell." ilk="argument" name="o" />
            </scope>
            <scope doc="Deletes the given row&apos;s Record from the RecordSet. If the row is on current page,&#xA;the corresponding DOM elements are also deleted." ilk="function" name="deleteRow" signature="deleteRow(row)">
              <variable citdl="HTMLElement | String | Number" doc="DOM element reference or ID string&#xA;to DataTable page element or RecordSet index." ilk="argument" name="row" />
            </scope>
            <scope doc="Validates minWidths whenever the render chain ends." ilk="function" name="_onRenderChainEnd" signature="_onRenderChainEnd()" />
            <scope doc="DataSource instance name, for logging." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Returns DOM reference to the DataTable&apos;s primary TBODY element." ilk="function" name="getTbodyEl" signature="getTbodyEl() =&gt; HTMLElement" />
            <scope doc="Formats links." ilk="function" name="DataTable.formatLink" signature="DataTable.formatLink(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null." ilk="argument" name="oData" />
            </scope>
            <scope doc="Convenience method to remove the class YAHOO.widget.DataTable.CLASS_SELECTED&#xA;from all TR elements on the page." ilk="function" name="_unselectAllTrEls" signature="_unselectAllTrEls()" />
            <scope doc="Shows given Column. NOTE: You cannot hide/show nested Columns. You can only&#xA;hide/show non-nested Columns, and top-level parent Columns (which will&#xA;hide/show all children Columns)." ilk="function" name="showColumn" signature="showColumn(oColumn)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Returns the DataTable instance&apos;s ColumnSet instance." ilk="function" name="getColumnSet" signature="getColumnSet() =&gt; YAHOO.widget.ColumnSet" />
            <scope doc="Responds to new Pagination states. By default, updates the UI to reflect the&#xA;new state. If &quot;dynamicData&quot; is true, current selections are purged before&#xA;a request is sent to the DataSource for data for the new state (using the&#xA;request returned by &quot;generateRequest()&quot;)." ilk="function" name="onPaginatorChangeRequest" signature="onPaginatorChangeRequest(oPaginatorState)">
              <variable citdl="Object" doc="An object literal describing the proposed pagination state." ilk="argument" name="oPaginatorState" />
            </scope>
            <scope doc="Overridable custom event handler to edit cell." ilk="function" name="onEventShowCellEditor" signature="onEventShowCellEditor(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Initializes ColumnSet." ilk="function" name="_initColumnSet" signature="_initColumnSet(aColumnDefs)">
              <variable citdl="Object[]" doc="Array of object literal Column definitions." ilk="argument" name="aColumnDefs" />
            </scope>
            <scope doc="Returns DOM reference to the previous TR element from the given TR element, or null." ilk="function" name="getPreviousTrEl" signature="getPreviousTrEl(row) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Number | YAHOO.widget.Record" doc="Element&#xA;reference, ID string, page row index, or Record from which to get previous TR element." ilk="argument" name="row" />
            </scope>
            <scope doc="Overridable custom event handler to unhighlight cell. Accounts for spurious&#xA;caused-by-child events." ilk="function" name="onEventUnhighlightCell" signature="onEventUnhighlightCell(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Sets given row to the unselected state." ilk="function" name="unselectRow" signature="unselectRow(row)">
              <variable citdl="HTMLElement | String | YAHOO.widget.Record | Number" doc="HTML element&#xA;reference or ID string, Record instance, or RecordSet position index." ilk="argument" name="row" />
            </scope>
            <scope doc="Sets given cell to the unselected state." ilk="function" name="unselectCell" signature="unselectCell(cell)">
              <variable citdl="HTMLElement | String" doc="DOM element reference or ID string&#xA;to DataTable page element or RecordSet index." ilk="argument" name="cell" />
            </scope>
            <scope doc="Handles mouseout events on the DataTable instance." ilk="function" name="_onTableMouseout" signature="_onTableMouseout(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The mouseout event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Returns current CellEditor instance, or null." ilk="function" name="getCellEditor" signature="getCellEditor() =&gt; YAHOO.widget.CellEditor" />
            <scope doc="Unselects given Column. NOTE: You cannot select/unselect nested Columns. You can only&#xA;select/unselect non-nested Columns, and bottom-level key Columns." ilk="function" name="unselectColumn" signature="unselectColumn(column)">
              <variable citdl="HTMLElement | String | Number" doc="DOM reference or ID string to a&#xA;TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index." ilk="argument" name="column" />
            </scope>
            <scope doc="Returns DOM reference to the above TD element from the given cell, or null." ilk="function" name="getAboveTdEl" signature="getAboveTdEl(cell) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" doc="from which to get next TD element." ilk="argument" name="cell" />
            </scope>
            <scope doc="Passes through keydownEvent of the active CellEditor." ilk="function" name="_onEditorKeydownEvent" signature="_onEditorKeydownEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Assigns the classes DT.CLASS_EVEN and DT.CLASS_ODD to one, many, or all TR elements." ilk="function" name="_setRowStripes" signature="_setRowStripes(row, range)">
              <variable citdl="HTMLElement | String | Number" doc="(optional) HTML TR element reference&#xA;or string ID, or page row index of where to start striping." ilk="argument" name="row" />
              <variable citdl="Number" doc="(optional) If given, how many rows to stripe, otherwise&#xA;stripe all the rows until the end." ilk="argument" name="range" />
            </scope>
            <scope doc="Deletes TR element by DOM reference or by DataTable page row index." ilk="function" name="_deleteTrEl" signature="_deleteTrEl(row) =&gt; Boolean">
              <variable citdl="HTMLElement | Number" doc="TR element reference or Datatable page row index." ilk="argument" name="row" />
            </scope>
            <scope doc="Calls Paginator&apos;s destroy() method" ilk="function" name="_destroyPaginator" signature="_destroyPaginator()" />
            <scope doc="Clears TR element template in response to any Column state change." ilk="function" name="_clearTrTemplateEl" signature="_clearTrTemplateEl()" />
            <scope doc="Overridable custom event handler to unhighlight row. Accounts for spurious&#xA;caused-by-child events." ilk="function" name="onEventUnhighlightRow" signature="onEventUnhighlightRow(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Returns DOM reference to the previous TD element from the given cell, or null." ilk="function" name="getPreviousTdEl" signature="getPreviousTdEl(cell) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" doc="from which to get previous TD element." ilk="argument" name="cell" />
            </scope>
            <scope doc="Destroy&apos;s the DataTable outer container element, if available." ilk="function" name="_destroyContainerEl" signature="_destroyContainerEl(elContainer)">
              <variable citdl="HTMLElement" doc="Reference to the container element." ilk="argument" name="elContainer" />
            </scope>
            <scope doc="Returns a new TR element template with TD elements classed with current&#xA;Column states." ilk="function" name="_getTrTemplateEl" signature="_getTrTemplateEl() =&gt; HTMLElement" />
            <scope doc="Formats the contents of the given TR&apos;s TD elements with data from the given&#xA;Record. Only innerHTML should change, nothing structural." ilk="function" name="_updateTrEl" signature="_updateTrEl(elTr, oRecord) =&gt; HTMLElement">
              <variable citdl="HTMLElement" doc="The TR element to update." ilk="argument" name="elTr" />
              <variable citdl="YAHOO.widget.Record" doc="The associated Record instance." ilk="argument" name="oRecord" />
            </scope>
            <scope doc="Returns array of selected TD elements on the page." ilk="function" name="getSelectedTdEls" signature="getSelectedTdEls() =&gt; HTMLElement[]" />
            <scope doc="Destroys active CellEditor instance and UI." ilk="function" name="destroyCellEditor" signature="destroyCellEditor()" />
            <scope doc="Callback function receives data from DataSource and populates an entire&#xA;DataTable with Records and TR elements, clearing previous Records, if any." ilk="function" name="onDataReturnInitializeTable" signature="onDataReturnInitializeTable(sRequest, oResponse, oPayload)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="(optional) Additional argument(s)" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Callback function receives data from DataSource and appends to an existing&#xA;DataTable new Records and, if applicable, creates or updates&#xA;corresponding TR elements." ilk="function" name="onDataReturnAppendRows" signature="onDataReturnAppendRows(sRequest, oResponse, oPayload)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="(optional) Additional argument(s)" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Assigns the class YAHOO.widget.DataTable.CLASS_FIRST to the first TR element&#xA;of the DataTable page and updates internal tracker." ilk="function" name="_setFirstRow" signature="_setFirstRow()" />
            <scope doc="Removes given Column and inserts into given tree index. NOTE: You&#xA;can only reorder non-nested Columns and top-level parent Columns. You cannot&#xA;reorder a nested Column to an existing parent." ilk="function" name="reorderColumn" signature="reorderColumn(oColumn, index) =&gt; YAHOO.widget.Column">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="New tree index." ilk="argument" name="index" />
            </scope>
            <scope doc="Restores minWidth." ilk="function" name="_restoreMinWidth" signature="_restoreMinWidth(oColumn)">
              <variable citdl="YAHOO.widget.Column" doc="Which Column." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Handles click events on the DOCUMENT." ilk="function" name="_onDocumentClick" signature="_onDocumentClick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The click event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Validates data value to type Number, doing type conversion as&#xA;necessary. A valid Number value is return, else null is returned&#xA;if input value does not validate." ilk="function" name="DataTable.validateNumber" signature="DataTable.validateNumber(oData)">
              <variable citdl="Object" doc="Data to validate." ilk="argument" name="oData" />
            </scope>
            <scope doc="Creates HTML markup for shared Column drag target." ilk="function" name="DataTable._initColumnDragTargetEl" signature="DataTable._initColumnDragTargetEl() =&gt; HTMLElement" />
            <scope doc="Undisables DataTable UI." ilk="function" name="undisable" signature="undisable()" />
            <scope doc="Destroy&apos;s the DataTable THEAD element, if available." ilk="function" name="_destroyTheadEl" signature="_destroyTheadEl()" />
            <scope doc="Handles focus events on the DataTable instance." ilk="function" name="_onTableFocus" signature="_onTableFocus(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="For the given identifier, returns the associated Column instance. Note: For&#xA;getting Columns by Column ID string, please use the method getColumnById()." ilk="function" name="getColumn" signature="getColumn(column) =&gt; YAHOO.widget.Column">
              <variable citdl="HTMLElement | String | Number" doc="TH/TD element (or child of a&#xA;TH/TD element), a Column key, or a ColumnSet key index." ilk="argument" name="column" />
            </scope>
            <scope doc="Formats numbers." ilk="function" name="DataTable.formatNumber" signature="DataTable.formatNumber(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null." ilk="argument" name="oData" />
            </scope>
            <scope doc="Removes a COL element to COLGROUP at given index." ilk="function" name="_removeColgroupColEl" signature="_removeColgroupColEl(index)">
              <variable citdl="Number" doc="Index of removed COL element." ilk="argument" name="index" />
            </scope>
            <scope doc="Determines selection behavior resulting from a mouse event when selection mode&#xA;is set to &quot;cellblock&quot;." ilk="function" name="_handleCellBlockSelectionByMouse" signature="_handleCellBlockSelectionByMouse(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="For one or all Columns, when Column is not hidden, width is not set, and minWidth&#xA;and/or maxAutoWidth is set, validates auto-width against minWidth and maxAutoWidth." ilk="function" name="validateColumnWidths" signature="validateColumnWidths(oArg.column)">
              <variable citdl="YAHOO.widget.Column" doc="(optional) One Column to validate. If null, all Columns&apos; widths are validated." ilk="argument" name="oArg.column" />
            </scope>
            <scope doc="Overridable custom event handler to manage selection according to desktop paradigm." ilk="function" name="onEventSelectRow" signature="onEventSelectRow(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Returns the DataTable instance&apos;s DataSource instance." ilk="function" name="getDataSource" signature="getDataSource() =&gt; YAHOO.util.DataSource" />
            <scope doc="For the given Column instance, returns next direction to sort." ilk="function" name="getColumnSortDir" signature="getColumnSortDir(oColumn, oSortedBy) =&gt; String">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="(optional) Specify the state, or use current state." ilk="argument" name="oSortedBy" />
            </scope>
            <scope doc="Determines selection behavior resulting from a key event when selection mode&#xA;is set to &quot;cellblock&quot;." ilk="function" name="_handleCellBlockSelectionByKey" signature="_handleCellBlockSelectionByKey(e)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="e" />
            </scope>
            <scope doc="Default cell formatter" ilk="function" name="DataTable.formatDefault" signature="DataTable.formatDefault(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="(Optional) Data value for the cell." ilk="argument" name="oData" />
            </scope>
            <scope doc="" ilk="function" name="select" signature="select()" />
            <scope doc="Initializes RecordSet." ilk="function" name="_initRecordSet" signature="_initRecordSet()" />
            <scope doc="Returns DOM reference to the next TR element from the given TR element, or null." ilk="function" name="getNextTrEl" signature="getNextTrEl(row) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Number | YAHOO.widget.Record" doc="Element&#xA;reference, ID string, page row index, or Record from which to get next TR element." ilk="argument" name="row" />
            </scope>
            <scope doc="Clears out all row selections." ilk="function" name="unselectAllRows" signature="unselectAllRows()" />
            <scope doc="Creates HTML markup for TABLE, COLGROUP, THEAD and TBODY elements in outer&#xA;container element." ilk="function" name="_initTableEl" signature="_initTableEl(elContainer)">
              <variable citdl="HTMLElement" doc="Container element into which to create TABLE." ilk="argument" name="elContainer" />
            </scope>
            <scope doc="Returns an array selected Column instances." ilk="function" name="getSelectedColumns" signature="getSelectedColumns() =&gt; YAHOO.widget.Column[]" />
            <scope doc="Determines selection behavior resulting from a key event when selection mode&#xA;is set to &quot;single&quot;." ilk="function" name="_handleSingleSelectionByKey" signature="_handleSingleSelectionByKey(e)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="e" />
            </scope>
            <scope doc="Removes the class YAHOO.widget.DataTable.CLASS_FIRST from the first TR element&#xA;of the DataTable page and updates internal tracker." ilk="function" name="_unsetFirstRow" signature="_unsetFirstRow()" />
            <scope doc="" ilk="function" name="DataTable.editDropdown" signature="DataTable.editDropdown()" />
            <scope doc="Returns object literal of values that represent the selection anchor. Used&#xA;to determine selection behavior resulting from a user event." ilk="function" name="_getSelectionAnchor" signature="_getSelectionAnchor(oTrigger)">
              <variable citdl="Object" doc="(Optional) Object literal of selection trigger values&#xA;(for key events)." ilk="argument" name="oTrigger" />
            </scope>
            <scope doc="Passes through blurEvent of the active CellEditor." ilk="function" name="_onEditorBlurEvent" signature="_onEditorBlurEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Returns DOM reference to the next TD element from the given cell, or null." ilk="function" name="getNextTdEl" signature="getNextTdEl(cell) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Object} DOM element reference or string ID, or&#xA;object literal of syntax {record:oRecord, column:oColumn" doc="from which to get next TD element." ilk="argument" name="cell" />
            </scope>
            <scope doc="Disables resizeability on key Column TH elements." ilk="function" name="_destroyResizeableColumns" signature="_destroyResizeableColumns()" />
            <scope doc="Callback function receives data from DataSource and inserts new records&#xA;starting at the index specified in oPayload.insertIndex. The value for&#xA;oPayload.insertIndex can be populated when sending the request to the DataSource,&#xA;or by accessing oPayload.insertIndex with the doBeforeLoadData() method at runtime.&#xA;If applicable, creates or updates corresponding TR elements." ilk="function" name="onDataReturnInsertRows" signature="onDataReturnInsertRows(sRequest, oResponse, oPayload)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="Argument payload, looks in oPayload.insertIndex." ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Formats a CHECKBOX element." ilk="function" name="DataTable.formatCheckbox" signature="DataTable.formatCheckbox(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object | Boolean} Data value for the cell. Can be a simple&#xA;Boolean to indicate whether checkbox is checked or not. Can be object literal&#xA;{checked:bBoolean, label:sLabel" doc=". Other forms of oData require a custom&#xA;formatter." ilk="argument" name="oData" />
            </scope>
            <scope doc="Saves active CellEditor input to Record and upates DOM UI." ilk="function" name="saveCellEditor" signature="saveCellEditor()" />
            <scope doc="Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED from the given row." ilk="function" name="unhighlightRow" signature="unhighlightRow(row)">
              <variable citdl="HTMLElement | String" doc="DOM element reference or ID string." ilk="argument" name="row" />
            </scope>
            <scope doc="Assigns the class DT.CLASS_SELECTED to TR and TD elements." ilk="function" name="_setSelections" signature="_setSelections()" />
            <scope doc="Removes the class YAHOO.widget.DataTable.CLASS_LAST from the last TR element&#xA;of the DataTable page and updates internal tracker." ilk="function" name="_unsetLastRow" signature="_unsetLastRow()" />
            <scope doc="Returns selected cells as an array of object literals:&#xA;{recordId:sRecordId, columnKey:sColumnKey}." ilk="function" name="getSelectedCells" signature="getSelectedCells() =&gt; Object[]" />
            <scope doc="Formats INPUT TYPE=TEXT elements." ilk="function" name="DataTable.formatTextbox" signature="DataTable.formatTextbox(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="(Optional) Data value for the cell." ilk="argument" name="oData" />
            </scope>
            <scope doc="Assigns the class YAHOO.widget.DataTable.CLASS_LAST to the last TR element&#xA;of the DataTable page and updates internal tracker." ilk="function" name="_setLastRow" signature="_setLastRow()" />
            <scope doc="Destroy&apos;s the DataTable COLGROUP element, if available." ilk="function" name="_destroyColgroupEl" signature="_destroyColgroupEl()" />
            <scope doc="Initializes top-level Column TH elements into DD instances." ilk="function" name="_initDraggableColumns" signature="_initDraggableColumns()" />
            <scope doc="Creates HTML markup for shared Column resizer proxy." ilk="function" name="DataTable._initColumnResizerProxyEl" signature="DataTable._initColumnResizerProxyEl() =&gt; HTMLElement" />
            <scope doc="Handles focus events on the TBODY element." ilk="function" name="_onTbodyFocus" signature="_onTbodyFocus(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The focus event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Returns DOM reference to the last TD element in the DataTable page (by default),&#xA;the first TD element of the optionally given row, or null." ilk="function" name="getLastTdEl" signature="getLastTdEl() =&gt; HTMLElement" />
            <scope doc="Callback function receives data from DataSource and incrementally updates Records&#xA;starting at the index specified in oPayload.updateIndex. The value for&#xA;oPayload.updateIndex can be populated when sending the request to the DataSource,&#xA;or by accessing oPayload.updateIndex with the doBeforeLoadData() method at runtime.&#xA;If applicable, creates or updates corresponding TR elements." ilk="function" name="onDataReturnUpdateRows" signature="onDataReturnUpdateRows(sRequest, oResponse, oPayload)">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="Argument payload, looks in oPayload.updateIndex." ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Sets given row to the selected state." ilk="function" name="selectRow" signature="selectRow(row)">
              <variable citdl="HTMLElement | String | YAHOO.widget.Record | Number" doc="HTML element&#xA;reference or ID string, Record instance, or RecordSet position index." ilk="argument" name="row" />
            </scope>
            <scope doc="Internal wrapper calls run() on render Chain instance." ilk="function" name="_runRenderChain" signature="_runRenderChain()" />
            <scope doc="Returns object literal of values that represent the selection trigger. Used&#xA;to determine selection behavior resulting from a key event." ilk="function" name="_getSelectionTrigger" signature="_getSelectionTrigger()" />
            <scope doc="Create a new TR element for a given Record and appends it with the correct&#xA;number of Column-state-classed TD elements. Striping is the responsibility of&#xA;the calling function, which may decide to stripe the single row, a subset of&#xA;rows, or all the rows." ilk="function" name="_createTrEl" signature="_createTrEl(oRecord) =&gt; HTMLElement">
              <variable citdl="YAHOO.widget.Record" doc="Record instance" ilk="argument" name="oRecord" />
            </scope>
            <scope doc="Returns DOM reference to the last TR element in the DataTable page, or null." ilk="function" name="getLastTrEl" signature="getLastTrEl() =&gt; HTMLElement" />
            <scope doc="Selects given Column. NOTE: You cannot select/unselect nested Columns. You can only&#xA;select/unselect non-nested Columns, and bottom-level key Columns." ilk="function" name="selectColumn" signature="selectColumn(column)">
              <variable citdl="HTMLElement | String | Number" doc="DOM reference or ID string to a&#xA;TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index." ilk="argument" name="column" />
            </scope>
            <scope doc="Formats JavaScript Dates." ilk="function" name="DataTable.formatDate" signature="DataTable.formatDate(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null." ilk="argument" name="oData" />
            </scope>
            <scope doc="" ilk="function" name="onEventEditCell" signature="onEventEditCell()" />
            <scope doc="Adds one new Record of data into the RecordSet at the index if given,&#xA;otherwise at the end. If the new Record is in page view, the&#xA;corresponding DOM elements are also updated." ilk="function" name="addRow" signature="addRow(oData, index)">
              <variable citdl="Object" doc="Object literal of data for the row." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) RecordSet position index at which to add data." ilk="argument" name="index" />
            </scope>
            <scope doc="Resets a RecordSet with the given data and populates the page view&#xA;with the new data. Any previous data, and selection and sort states are&#xA;cleared. New data should be added as a separate step." ilk="function" name="initializeTable" signature="initializeTable()" />
            <scope doc="Updates width of a Column&apos;s liner DIV elements by dynamically creating a&#xA;function to update all element style properties in one pass. Note: This&#xA;technique is not supported in sandboxed environments that prohibit EVALs." ilk="function" name="_setColumnWidthDynFunction" signature="_setColumnWidthDynFunction(oColumn, sWidth)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="String" doc="New width value." ilk="argument" name="sWidth" />
            </scope>
            <scope doc="Disables DD from top-level Column TH elements." ilk="function" name="_destroyDraggableColumns" signature="_destroyDraggableColumns()" />
            <scope doc="Initializes object literal of config values." ilk="function" name="_initConfigs" signature="_initConfigs(oConfig)">
              <variable citdl="Object" doc="Object literal of config values." ilk="argument" name="oConfig" />
            </scope>
            <scope doc="Populates TH element as defined by Column." ilk="function" name="_initThEl" signature="_initThEl(elTh, oColumn)">
              <variable citdl="HTMLElement" doc="TH element reference." ilk="argument" name="elTh" />
              <variable citdl="YAHOO.widget.Column" doc="Column object." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Alias for onPaginatorChange for backward compatibility" ilk="function" name="onPaginatorChange" signature="onPaginatorChange()" />
            <scope doc="Overridable method gives implementers a hook to show loading message before&#xA;sorting Column." ilk="function" name="doBeforeSortColumn" signature="doBeforeSortColumn(oColumn, sSortDir) =&gt; Boolean">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="String" doc="YAHOO.widget.DataTable.CLASS_ASC or&#xA;YAHOO.widget.DataTable.CLASS_DESC." ilk="argument" name="sSortDir" />
            </scope>
            <scope doc="Setting display:none on DataTable or any parent may impact width validations.&#xA;After setting display back to &quot;&quot;, implementers should call this method to &#xA;manually perform those validations." ilk="function" name="onShow" signature="onShow()" />
            <scope doc="Overridable abstract method to customize CellEditor before showing." ilk="function" name="doBeforeShowCellEditor" signature="doBeforeShowCellEditor(oCellEditor) =&gt; Boolean">
              <variable citdl="YAHOO.widget.CellEditor" doc="The CellEditor instance." ilk="argument" name="oCellEditor" />
            </scope>
            <scope doc="Returns DOM reference to the DataTable&apos;s THEAD element." ilk="function" name="getTheadEl" signature="getTheadEl() =&gt; HTMLElement" />
            <scope doc="Forces Webkit repaint." ilk="function" name="_repaintWebkit" signature="_repaintWebkit()" />
            <scope doc="Determines selection behavior resulting from a key event when selection mode&#xA;is set to &quot;standard&quot;." ilk="function" name="_handleStandardSelectionByKey" signature="_handleStandardSelectionByKey(e)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="e" />
            </scope>
            <scope doc="" ilk="function" name="DataTable.editTextbox" signature="DataTable.editTextbox()" />
            <scope doc="Inserts given Column at the index if given, otherwise at the end. NOTE: You&#xA;can only add non-nested Columns and top-level parent Columns. You cannot add&#xA;a nested Column to an existing parent." ilk="function" name="insertColumn" signature="insertColumn(oColumn, index) =&gt; YAHOO.widget.Column">
              <variable citdl="Object | YAHOO.widget.Column" doc="Object literal Column&#xA;definition or a Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="(optional) New tree index." ilk="argument" name="index" />
            </scope>
            <scope doc="Returns on object literal representing the DataTable instance&apos;s current&#xA;state with the following properties:&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;pagination&lt;/dt&gt;&#xA;&lt;dd&gt;Instance of YAHOO.widget.Paginator&lt;/dd&gt;&#xA;&lt;dt&gt;sortedBy&lt;/dt&gt;&#xA;&lt;dd&gt;&#xA;&lt;dl&gt;&#xA;&lt;dt&gt;sortedBy.key&lt;/dt&gt;&#xA;&lt;dd&gt;{String} Key of sorted Column&lt;/dd&gt;&#xA;&lt;dt&gt;sortedBy.dir&lt;/dt&gt;&#xA;&lt;dd&gt;{String} Initial sort direction, either YAHOO.widget.DataTable.CLASS_ASC or YAHOO.widget.DataTable.CLASS_DESC&lt;/dd&gt;&#xA;&lt;/dl&gt;&#xA;&lt;/dd&gt;&#xA;&lt;dt&gt;selectedRows&lt;/dt&gt;&#xA;&lt;dd&gt;Array of selected rows by Record ID.&lt;/dd&gt;&#xA;&lt;dt&gt;selectedCells&lt;/dt&gt;&#xA;&lt;dd&gt;Selected cells as an array of object literals:&#xA;{recordId:sRecordId, columnKey:sColumnKey}&lt;/dd&gt;&#xA;&lt;/dl&gt;" ilk="function" name="getState" signature="getState() =&gt; Object" />
            <scope doc="Public handler of the editorUnblockEvent. By default, undisables DataTable UI." ilk="function" name="onEditorUnblockEvent" signature="onEditorUnblockEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Returns array of selected TR elements on the page." ilk="function" name="getSelectedTrEls" signature="getSelectedTrEls() =&gt; HTMLElement[]" />
            <scope doc="Returns DOM reference to a TH element." ilk="function" name="getThEl" signature="getThEl(theadCell) =&gt; HTMLElement">
              <variable citdl="YAHOO.widget.Column | HTMLElement | String" doc="Column instance,&#xA;DOM element reference, or string ID." ilk="argument" name="theadCell" />
            </scope>
            <scope doc="Determines selection behavior resulting from a mouse event when selection mode&#xA;is set to &quot;cellrange&quot;." ilk="function" name="_handleCellRangeSelectionByMouse" signature="_handleCellRangeSelectionByMouse(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Formats emails." ilk="function" name="DataTable.formatEmail" signature="DataTable.formatEmail(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null." ilk="argument" name="oData" />
            </scope>
            <scope doc="Sets focus on the given element." ilk="function" name="_focusEl" signature="_focusEl(el)">
              <variable citdl="HTMLElement" doc="Element." ilk="argument" name="el" />
            </scope>
            <scope doc="Returns DOM reference to the first TR element in the DataTable page, or null." ilk="function" name="getFirstTrEl" signature="getFirstTrEl() =&gt; HTMLElement" />
            <scope doc="Passes through unblockEvent of the active CellEditor." ilk="function" name="_onEditorUnblockEvent" signature="_onEditorUnblockEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Hides given Column. NOTE: You cannot hide/show nested Columns. You can only&#xA;hide/show non-nested Columns, and top-level parent Columns (which will&#xA;hide/show all children Columns)." ilk="function" name="hideColumn" signature="hideColumn(oColumn)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Alias for onDataReturnSetRows for backward compatibility" ilk="function" name="onDataReturnSetRecords" signature="onDataReturnSetRecords()" />
            <scope doc="" ilk="function" name="resetCellEditor" signature="resetCellEditor()" />
            <scope doc="Brings focus to the THEAD element." ilk="function" name="focusTheadEl" signature="focusTheadEl()" />
            <scope doc="For the given identifier, returns the associated Record instance." ilk="function" name="getRecord" signature="getRecord(row) =&gt; YAHOO.widget.Record">
              <variable citdl="HTMLElement | Number | String" doc="DOM reference to a TR element (or&#xA;child of a TR element), RecordSet position index, or Record ID." ilk="argument" name="row" />
            </scope>
            <scope doc="" ilk="function" name="getRow" signature="getRow()" />
            <scope doc="Brings focus to the TBODY element." ilk="function" name="focusTbodyEl" signature="focusTbodyEl()" />
            <scope doc="Overridable custom event handler to format cell." ilk="function" name="onEventFormatCell" signature="onEventFormatCell(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Overridable custom event handler to unhighlight Column. Accounts for spurious&#xA;caused-by-child events." ilk="function" name="onEventUnhighlightColumn" signature="onEventUnhighlightColumn(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given cell." ilk="function" name="highlightCell" signature="highlightCell(cell)">
              <variable citdl="HTMLElement | String" doc="DOM element reference or ID string." ilk="argument" name="cell" />
            </scope>
            <scope doc="Initializes resizeability on key Column TH elements." ilk="function" name="_initResizeableColumns" signature="_initResizeableColumns()" />
            <scope doc="Nulls out the entire DataTable instance and related objects, removes attached&#xA;event listeners, and clears out DOM elements inside the container. After&#xA;calling this method, the instance reference should be expliclitly nulled by&#xA;implementer, as in myDataTable = null. Use with caution!" ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Update the UI infrastructure in response to a &quot;paginator&quot; attribute change." ilk="function" name="_handlePaginatorChange" signature="_handlePaginatorChange(e)">
              <variable citdl="Object" doc="Change event object containing keys &apos;type&apos;,&apos;newValue&apos;,&#xA;and &apos;prevValue&apos;" ilk="argument" name="e" />
            </scope>
            <scope doc="Formats a BUTTON element." ilk="function" name="DataTable.formatButton" signature="DataTable.formatButton(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object | Boolean" doc="Data value for the cell. By default, the value&#xA;is what gets written to the BUTTON." ilk="argument" name="oData" />
            </scope>
            <scope doc="Formats SELECT elements." ilk="function" name="DataTable.formatDropdown" signature="DataTable.formatDropdown(el, oRecord, oColumn, oData)">
              <variable citdl="HTMLElement" doc="The element to format with markup." ilk="argument" name="el" />
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Object" doc="Data value for the cell, or null." ilk="argument" name="oData" />
            </scope>
            <scope doc="Removes the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to cells of the given Column.&#xA;NOTE: You cannot highlight/unhighlight nested Columns. You can only&#xA;highlight/unhighlight non-nested Columns, and bottom-level key Columns." ilk="function" name="unhighlightColumn" signature="unhighlightColumn(column)">
              <variable citdl="HTMLElement | String | Number" doc="DOM reference or ID string to a&#xA;TH/TD element (or child of a TH/TD element), a Column key, or a ColumnSet key index." ilk="argument" name="column" />
            </scope>
            <scope doc="Determines selection behavior resulting from a mouse event when selection mode&#xA;is set to &quot;single&quot;." ilk="function" name="_handleSingleSelectionByMouse" signature="_handleSingleSelectionByMouse(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Sets given cell to the selected state." ilk="function" name="selectCell" signature="selectCell(cell)">
              <variable citdl="HTMLElement | String" doc="DOM element reference or ID string&#xA;to DataTable page element or RecordSet index." ilk="argument" name="cell" />
            </scope>
            <scope doc="Public handler of the editorBlockEvent. By default, disables DataTable UI." ilk="function" name="onEditorBlockEvent" signature="onEditorBlockEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Cancels active CellEditor." ilk="function" name="cancelCellEditor" signature="cancelCellEditor()" />
            <scope doc="" ilk="function" name="DataTable.editRadio" signature="DataTable.editRadio()" />
            <scope doc="Destroys elements associated with Column functionality: ColumnDD and ColumnResizers." ilk="function" name="_destroyColumnHelpers" signature="_destroyColumnHelpers()" />
            <scope doc="Passes through showEvent of the active CellEditor." ilk="function" name="_onEditorShowEvent" signature="_onEditorShowEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Initializes DOM elements." ilk="function" name="_initDomElements" signature="_initDomElements(elContainer)">
              <variable citdl="HTMLElement | String} HTML DIV element by reference or ID. &#xA;return {Boolean" doc="False in case of error, otherwise true" ilk="argument" name="elContainer" />
            </scope>
            <scope doc="" ilk="function" name="DataTable.editDate" signature="DataTable.editDate()" />
            <scope doc="Renders the view with existing Records from the RecordSet while&#xA;maintaining sort, pagination, and selection states. For performance, reuses&#xA;existing DOM elements when possible while deleting extraneous elements." ilk="function" name="render" signature="render()" />
            <scope doc="Disables DataTable UI." ilk="function" name="disable" signature="disable()" />
            <scope doc="Destroy&apos;s the DataTable TABLE element, if available." ilk="function" name="_destroyTableEl" signature="_destroyTableEl()" />
            <scope doc="Overridable method gives implementers a hook to show loading message before&#xA;changing Paginator value." ilk="function" name="doBeforePaginatorChange" signature="doBeforePaginatorChange(oPaginatorState) =&gt; Boolean">
              <variable citdl="Object" doc="An object literal describing the proposed pagination state." ilk="argument" name="oPaginatorState" />
            </scope>
            <scope doc="Overridable custom event handler to sort Column." ilk="function" name="onEventSortColumn" signature="onEventSortColumn(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="Returns Record index for given TR element or page row index." ilk="function" name="getRecordIndex" signature="getRecordIndex(row) =&gt; Number">
              <variable citdl="YAHOO.widget.Record | HTMLElement | Number" doc="Record instance, TR&#xA;element reference or page row index." ilk="argument" name="row" />
            </scope>
            <scope doc="Forces Opera repaint." ilk="function" name="_repaintOpera" signature="_repaintOpera()" />
            <scope doc="Hook to update oPayload before consumption." ilk="function" name="handleDataReturnPayload" signature="handleDataReturnPayload(oRequest, oResponse, oPayload) =&gt; MIXED">
              <variable citdl="MIXED" doc="Original generated request." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="State values." ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Overridable method gives implementers a hook to access data before&#xA;it gets added to RecordSet and rendered to the TBODY." ilk="function" name="doBeforeLoadData" signature="doBeforeLoadData(sRequest, oResponse, oPayload) =&gt; Boolean">
              <variable citdl="String" doc="Original request." ilk="argument" name="sRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="additional arguments" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Callback function receives reponse from DataSource and populates the&#xA;RecordSet with the results." ilk="function" name="onDataReturnSetRows" signature="onDataReturnSetRows(oRequest, oResponse, oPayload)">
              <variable citdl="MIXED" doc="Original generated request." ilk="argument" name="oRequest" />
              <variable citdl="Object" doc="Response object." ilk="argument" name="oResponse" />
              <variable citdl="MIXED" doc="(optional) Additional argument(s)" ilk="argument" name="oPayload" />
            </scope>
            <scope doc="Returns DOM reference to the DataTable&apos;s container element." ilk="function" name="getContainerEl" signature="getContainerEl() =&gt; HTMLElement" />
            <scope doc="Handles dblclick events on the DataTable instance." ilk="function" name="_onTableDblclick" signature="_onTableDblclick(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The dblclick event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Returns DOM reference to the DataTable&apos;s secondary TBODY element that is&#xA;used to display messages." ilk="function" name="getMsgTbodyEl" signature="getMsgTbodyEl() =&gt; HTMLElement" />
            <scope doc="Returns last selected cell as an object literal:&#xA;{recordId:sRecordId, columnKey:sColumnKey}." ilk="function" name="getLastSelectedCell" signature="getLastSelectedCell() =&gt; Object" />
            <scope doc="Handles keypress events on the TABLE. Mainly to support stopEvent on Mac." ilk="function" name="_onTableKeypress" signature="_onTableKeypress(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.wiget.DataTable" doc="DataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Initializes COLGROUP and COL elements for managing minWidth." ilk="function" name="_initColgroupEl" signature="_initColgroupEl(elTable)">
              <variable citdl="HTMLElement" doc="TABLE element into which to create COLGROUP." ilk="argument" name="elTable" />
            </scope>
            <scope doc="Overridable custom event handler to highlight Column. Accounts for spurious&#xA;caused-by-child events." ilk="function" name="onEventHighlightColumn" signature="onEventHighlightColumn(oArgs.event, oArgs.target)">
              <variable citdl="HTMLEvent" doc="Event object." ilk="argument" name="oArgs.event" />
              <variable citdl="HTMLElement" doc="Target element." ilk="argument" name="oArgs.target" />
            </scope>
            <scope doc="" ilk="function" name="_syncColWidths" signature="_syncColWidths()" />
            <scope doc="Returns the corresponding TR reference for a given DOM element, ID string or&#xA;directly page row index. If the given identifier is a child of a TR element,&#xA;then DOM tree is traversed until a parent TR element is returned, otherwise&#xA;null." ilk="function" name="getTrEl" signature="getTrEl(row) =&gt; HTMLElement">
              <variable citdl="HTMLElement | String | Number | YAHOO.widget.Record" doc="Which row to&#xA;get: by element reference, ID string, page row index, or Record." ilk="argument" name="row" />
            </scope>
            <scope doc="Outputs markup into the given TD based on given Record." ilk="function" name="formatCell" signature="formatCell(elLiner, oRecord, oColumn)">
              <variable citdl="HTMLElement" doc="The liner DIV element within the TD." ilk="argument" name="elLiner" />
              <variable citdl="YAHOO.widget.Record" doc="(Optional) Record instance." ilk="argument" name="oRecord" />
              <variable citdl="YAHOO.widget.Column" doc="(Optional) Column instance." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="" ilk="function" name="refreshView" signature="refreshView()" />
            <scope doc="Assigns the class YAHOO.widget.DataTable.CLASS_HIGHLIGHTED to the given row." ilk="function" name="highlightRow" signature="highlightRow(row)">
              <variable citdl="HTMLElement | String" doc="DOM element reference or ID string." ilk="argument" name="row" />
            </scope>
            <scope doc="Clears out all cell selections." ilk="function" name="unselectAllCells" signature="unselectAllCells()" />
            <scope doc="Passes through blockEvent of the active CellEditor." ilk="function" name="_onEditorBlockEvent" signature="_onEditorBlockEvent(oArgs)">
              <variable citdl="Object" doc="Custom Event args." ilk="argument" name="oArgs" />
            </scope>
            <variable citdl="String" doc="Class name assigned to mask element when DataTable is disabled." name="DataTable.CLASS_MASK" />
            <variable citdl="String" doc="Class name assigned to display label elements." name="DataTable.CLASS_LABEL" />
            <variable citdl="String" doc="ID string of first TR element of the current DataTable page." name="_sFirstTrId" />
            <variable citdl="String" doc="Class name assigned to liner DIV elements." name="DataTable.CLASS_LINER" />
            <variable citdl="HTMLElement" doc="Reference to the STYLE node that is dynamically created and updated&#xA;in order to manage Column widths." name="DataTable._elDynStyleNode" />
            <variable citdl="String" doc="Class name assigned to ascending elements." name="DataTable.CLASS_ASC" />
            <variable citdl="String" doc="Class name assigned to previous indicators." name="DataTable.CLASS_PREVIOUS" />
            <variable citdl="Object" doc="Object literal hash of Columns and their dynamically create style rules." name="DataTable._oDynStyles" />
            <variable citdl="Boolean" doc="True if instance is initialized, so as to fire the initEvent after render." name="_bInit" />
            <variable citdl="HTMLElement" doc="DOM reference to the CAPTION element for the DataTable instance." name="_elCaption" />
            <variable citdl="String" doc="Class name assigned to disabled elements." name="DataTable.CLASS_DISABLED" />
            <variable citdl="String" doc="Class name assigned to default indicators." name="DataTable.CLASS_DEFAULT" />
            <variable citdl="String" doc="Class name assigned to INPUT TYPE=CHECKBOX elements and/or container elements." name="DataTable.CLASS_CHECKBOX" />
            <variable citdl="String" doc="Class name assigned to paginator container elements." name="DataTable.CLASS_PAGINATOR" />
            <variable citdl="String" doc="Class name assigned to error indicators." name="DataTable.CLASS_ERROR" />
            <variable citdl="String" doc="Class name assigned to odd elements." name="DataTable.CLASS_ODD" />
            <variable citdl="Number" doc="Internal class variable tracking current number of DataTable instances,&#xA;so that certain class values can be reset when all instances are destroyed." name="DataTable._nCurrentCount" />
            <variable citdl="String" doc="Class name assigned to data elements." name="DataTable.CLASS_DATA" />
            <variable citdl="String" doc="Class name assigned to highlighted elements." name="DataTable.CLASS_HIGHLIGHTED" />
            <variable citdl="String" doc="Class name assigned to even elements." name="DataTable.CLASS_EVEN" />
            <variable citdl="boolean" doc="Set to true if _elDynStyleNode cannot be populated due to browser incompatibility." name="DataTable._bDynStylesFallback" />
            <variable citdl="HTMLElement" doc="DOM reference to the container element for the DataTable instance into which&#xA;all other elements get created." name="_elContainer" />
            <variable citdl="String" doc="Class name assigned to sortable elements." name="DataTable.CLASS_SORTABLE" />
            <variable citdl="String" doc="Class name assigned to hidden elements." name="DataTable.CLASS_HIDDEN" />
            <variable citdl="String" doc="Class name assigned to SELECT elements and/or container elements." name="DataTable.CLASS_DROPDOWN" />
            <variable citdl="String" doc="Class name assigned next indicators." name="DataTable.CLASS_NEXT" />
            <variable citdl="String" doc="Class name assigned to Column drag target." name="DataTable.CLASS_COLTARGET" />
            <variable citdl="String" doc="Class name assigned to draggable elements." name="DataTable.CLASS_DRAGGABLE" />
            <variable citdl="Object" doc="Object literal representing cell selection anchor:&#xA;{recordId:sRecordId, columnKey:sColumnKey}." name="_oAnchorCell" />
            <variable citdl="String" doc="Class name assigned to descending elements." name="DataTable.CLASS_DESC" />
            <variable citdl="YAHOO.widget.CellEditor" doc="The active CellEditor instance for the DataTable instance." name="_oCellEditor" />
            <variable citdl="HTMLElement" doc="Element reference to shared Column resizer proxy." name="DataTable._elColumnResizerProxy" />
            <variable citdl="String" doc="Class name assigned to selected elements." name="DataTable.CLASS_SELECTED" />
            <variable citdl="String" doc="Class name assigned to messaging elements." name="DataTable.CLASS_MESSAGE" />
            <variable citdl="HTMLElement" doc="DOM reference to the secondary TBODY element used to display DataTable messages." name="_elMsgTbody" />
            <variable citdl="Object" doc="Cell formatting functions." name="DataTable.Formatter" />
            <variable citdl="String" doc="Class name assigned to resizer handle elements." name="DataTable.CLASS_RESIZER" />
            <variable citdl="String" doc="Class name assigned to resizer liner elements." name="DataTable.CLASS_RESIZERLINER" />
            <variable citdl="HTMLElement" doc="DOM reference to the secondary TBODY element&apos;s single TD element used to display DataTable messages." name="_elMsgTd" />
            <variable citdl="String" doc="ID string of the last TR element of the current DataTable page." name="_sLastTrId" />
            <variable citdl="HTMLElement" doc="Element reference to shared Column drag target." name="DataTable._elColumnDragTarget" />
            <variable citdl="String" doc="Class name assigned to resizeable elements." name="DataTable.CLASS_RESIZEABLE" />
            <variable citdl="YAHOO.util.Chain" doc="Render chain." name="_oChainRender" />
            <variable citdl="Number" doc="Internal class variable for indexing multiple DataTable instances." name="DataTable._nCount" />
            <variable citdl="String" doc="Class name assigned to page number indicators." name="DataTable.CLASS_PAGE" />
            <variable citdl="Object[]" doc="Array to track row selections (by sRecordId) and/or cell selections&#xA;(by {recordId:sRecordId, columnKey:sColumnKey})" name="_aSelections" />
            <variable citdl="YAHOO.widget.ColumnSet" doc="ColumnSet instance for the DataTable instance." name="_oColumnSet" />
            <variable citdl="HTMLElement" doc="DOM reference to the TABLE element for the DataTable instance." name="_elTable" />
            <variable citdl="Object" doc="Returns object literal of initial configs." name="configs" />
            <variable citdl="HTMLElement" doc="DOM reference to the mask element for the DataTable instance which disables it." name="_elMask" />
            <variable citdl="String" doc="Class name assigned to empty indicators." name="DataTable.CLASS_EMPTY" />
            <variable citdl="String" doc="Class name assigned to outer DataTable container." name="DataTable.CLASS_DATATABLE" />
            <variable citdl="YAHOO.widget.RecordSet" doc="RecordSet instance for the DataTable instance." name="_oRecordSet" />
            <variable citdl="Number" doc="Index assigned to instance." name="_nIndex" />
            <variable citdl="String" doc="Unique id assigned to instance &quot;yui-dtN&quot;, useful prefix for generating unique&#xA;DOM ID strings and log messages." name="_sId" />
            <variable citdl="YAHOO.util.DataSource" doc="DataSource instance for the DataTable instance." name="_oDataSource" />
            <variable citdl="HTMLElement" doc="DOM reference to the THEAD element for the DataTable instance." name="_elThead" />
            <variable citdl="String" doc="Class name assigned to scrollable elements." name="DataTable.CLASS_SCROLLABLE" />
            <variable citdl="HTMLElement" doc="DOM reference to the secondary TBODY element&apos;s single TR element used to display DataTable messages." name="_elMsgTr" />
            <variable citdl="YAHOO.widget.Record" doc="Record instance of the row selection anchor." name="_oAnchorRecord" />
            <variable citdl="String" doc="Class name assigned to CellEditor container elements." name="DataTable.CLASS_EDITOR" />
            <variable citdl="String" doc="Class name assigned to last elements." name="DataTable.CLASS_LAST" />
            <variable citdl="String" doc="Class name assigned to INPUT TYPE=RADIO elements and/or container elements." name="DataTable.CLASS_RADIO" />
            <variable citdl="String" doc="Class name assigned to first elements." name="DataTable.CLASS_FIRST" />
            <variable citdl="Array" doc="Sparse array of custom functions to set column widths for browsers that don&apos;t&#xA;support dynamic CSS rules.  Functions are added at the index representing&#xA;the number of rows they update." name="_aDynFunctions" />
            <variable citdl="String" doc="Class name assigned to resizer proxy elements." name="DataTable.CLASS_RESIZERPROXY" />
            <variable citdl="HTMLElement" doc="DOM reference to the primary TBODY element for the DataTable instance." name="_elTbody" />
            <variable citdl="HTMLElement" doc="DOM reference to the COLGROUP element for the DataTable instance." name="_elColgroup" />
            <variable citdl="String" doc="Class name assigned to BUTTON elements and/or container elements." name="DataTable.CLASS_BUTTON" />
            <variable citdl="String" doc="Class name assigned to loading indicatorx." name="DataTable.CLASS_LOADING" />
            <variable citdl="Number" doc="Counter for IDs assigned to TR elements." name="_nTrCount" />
            <variable citdl="String" doc="Class name assigned to editable elements." name="DataTable.CLASS_EDITABLE" />
            <variable citdl="{HTMLElement}" doc="Template row to create all new rows from." name="_elTrTemplate" />
            <variable citdl="Number" doc="Counter for IDs assigned to TD elements." name="_nTdCount" />
          </scope>
          <scope classrefs="YAHOO.widget.BaseCellEditor" doc="The DataCellEditor class provides functionality for inline editing&#xA;DataTable cell data with a YUI Calendar." ilk="class" name="DateCellEditor">
            <scope attributes="__ctor__" doc="The DataCellEditor class provides functionality for inline editing&#xA;DataTable cell data with a YUI Calendar." ilk="function" name="DateCellEditor" signature="DateCellEditor(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Render a Calendar." ilk="function" name="renderForm" signature="renderForm()" />
            <scope doc="After rendering form, if disabledBtns is set to true, then sets up a mechanism&#xA;to save input without them." ilk="function" name="handleDisabledBtns" signature="handleDisabledBtns()" />
            <scope doc="Sets focus in DateCellEditor." ilk="function" name="focus" signature="focus()" />
            <scope doc="Retrieves input value from DateCellEditor." ilk="function" name="getInputValue" signature="getInputValue()" />
            <scope doc="Resets DateCellEditor UI to initial state." ilk="function" name="resetForm" signature="resetForm()" />
            <variable citdl="YAHOO.widget.Calendar" doc="Reference to Calendar instance." name="calendar" />
            <variable citdl="Date" doc="Default value." name="defaultValue" />
            <variable citdl="Object" doc="Configs for the calendar instance, to be passed to Calendar constructor." name="calendarOptions" />
          </scope>
          <scope doc="YAHOO.widget.DateMath is used for simple date manipulation. The class is a static utility&#xA;used for adding, subtracting, and comparing dates." ilk="namespace" name="DateMath">
            <scope doc="Determines if a given week overlaps two different years." ilk="function" name="isYearOverlapWeek" signature="isYearOverlapWeek(weekBeginDate) =&gt; Boolean">
              <variable citdl="Date" doc="The JavaScript Date representing the first day of the week." ilk="argument" name="weekBeginDate" />
            </scope>
            <scope doc="Calculates the week number for the given date. Can currently support standard&#xA;U.S. week numbers, based on Jan 1st defining the 1st week of the year, and &#xA;ISO8601 week numbers, based on Jan 4th defining the 1st week of the year." ilk="function" name="getWeekNumber" signature="getWeekNumber(date, firstDayOfWeek, janDate) =&gt; Number">
              <variable citdl="Date" doc="The JavaScript date for which to find the week number" ilk="argument" name="date" />
              <variable citdl="Number" doc="The index of the first day of the week (0 = Sun, 1 = Mon ... 6 = Sat).&#xA;Defaults to 0" ilk="argument" name="firstDayOfWeek" />
              <variable citdl="Number" doc="The date in the first week of January which defines week one for the year&#xA;Defaults to the value of YAHOO.widget.DateMath.WEEK_ONE_JAN_DATE, which is 1 (Jan 1st). &#xA;For the U.S, this is normally Jan 1st. ISO8601 uses Jan 4th to define the first week of the year." ilk="argument" name="janDate" />
            </scope>
            <scope doc="Calculates the number of days the specified date is from January 1 of the specified calendar year.&#xA;Passing January 1 to this function would return an offset value of zero." ilk="function" name="getDayOffset" signature="getDayOffset(date, calendarYear) =&gt; Number">
              <variable citdl="Date" doc="The JavaScript date for which to find the offset" ilk="argument" name="date" />
              <variable citdl="Number" doc="The calendar year to use for determining the offset" ilk="argument" name="calendarYear" />
            </scope>
            <scope doc="Gets the last day of a month containing a given date." ilk="function" name="findMonthEnd" signature="findMonthEnd(date) =&gt; Date">
              <variable citdl="Date" doc="The JavaScript Date used to calculate the month end" ilk="argument" name="date" />
            </scope>
            <scope doc="Get the first day of the week, for the give date." ilk="function" name="getFirstDayOfWeek" signature="getFirstDayOfWeek(dt, startOfWeek) =&gt; Date">
              <variable citdl="Date" doc="The date in the week for which the first day is required." ilk="argument" name="dt" />
              <variable citdl="Number" doc="The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)" ilk="argument" name="startOfWeek" />
            </scope>
            <scope doc="Determines whether a given date is after another date on the calendar." ilk="function" name="after" signature="after(date, compareTo) =&gt; Boolean">
              <variable citdl="Date" doc="The Date object to compare with the compare argument" ilk="argument" name="date" />
              <variable citdl="Date" doc="The Date object to use for the comparison" ilk="argument" name="compareTo" />
            </scope>
            <scope doc="Clears the time fields from a given date, effectively setting the time to 12 noon." ilk="function" name="clearTime" signature="clearTime(date) =&gt; Date">
              <variable citdl="Date" doc="The JavaScript Date for which the time fields will be cleared" ilk="argument" name="date" />
            </scope>
            <scope doc="Determines if a given week overlaps two different months." ilk="function" name="isMonthOverlapWeek" signature="isMonthOverlapWeek(weekBeginDate) =&gt; Boolean">
              <variable citdl="Date" doc="The JavaScript Date representing the first day of the week." ilk="argument" name="weekBeginDate" />
            </scope>
            <scope doc="Adds the specified amount of time to the this instance." ilk="function" name="add" signature="add(date, field, amount) =&gt; Date">
              <variable citdl="Date" doc="The JavaScript Date object to perform addition on" ilk="argument" name="date" />
              <variable citdl="String" doc="The field constant to be used for performing addition." ilk="argument" name="field" />
              <variable citdl="Number" doc="The number of units (measured in the field constant) to add to the date." ilk="argument" name="amount" />
            </scope>
            <scope doc="Retrieves a JavaScript Date object representing January 1 of any given year." ilk="function" name="getJan1" signature="getJan1(calendarYear) =&gt; Date">
              <variable citdl="Number" doc="The calendar year for which to retrieve January 1" ilk="argument" name="calendarYear" />
            </scope>
            <scope doc="Determines whether a given date is between two other dates on the calendar." ilk="function" name="between" signature="between(date, dateBegin, dateEnd) =&gt; Boolean">
              <variable citdl="Date" doc="The date to check for" ilk="argument" name="date" />
              <variable citdl="Date" doc="The start of the range" ilk="argument" name="dateBegin" />
              <variable citdl="Date" doc="The end of the range" ilk="argument" name="dateEnd" />
            </scope>
            <scope doc="Gets the first day of a month containing a given date." ilk="function" name="findMonthStart" signature="findMonthStart(date) =&gt; Date">
              <variable citdl="Date" doc="The JavaScript Date used to calculate the month start" ilk="argument" name="date" />
            </scope>
            <scope doc="Determines whether a given date is before another date on the calendar." ilk="function" name="before" signature="before(date, compareTo) =&gt; Boolean">
              <variable citdl="Date" doc="The Date object to compare with the compare argument" ilk="argument" name="date" />
              <variable citdl="Date" doc="The Date object to use for the comparison" ilk="argument" name="compareTo" />
            </scope>
            <scope doc="Subtracts the specified amount of time from the this instance." ilk="function" name="subtract" signature="subtract(date, field, amount) =&gt; Date">
              <variable citdl="Date" doc="The JavaScript Date object to perform subtraction on" ilk="argument" name="date" />
              <variable citdl="Number" doc="The this field constant to be used for performing subtraction." ilk="argument" name="field" />
              <variable citdl="Number" doc="The number of units (measured in the field constant) to subtract from the date." ilk="argument" name="amount" />
            </scope>
            <scope doc="Private helper method to account for bug in Safari 2 (webkit &lt; 420)&#xA;when Date.setDate(n) is called with n less than -128 or greater than 127.&#xA;&lt;p&gt;&#xA;Fix approach and original findings are available here:&#xA;http://brianary.blogspot.com/2006/03/safari-date-bug.html&#xA;&lt;/p&gt;" ilk="function" name="_addDays" signature="_addDays(d, nDays)">
              <variable citdl="Date" doc="JavaScript date object" ilk="argument" name="d" />
              <variable citdl="Number" doc="The number of days to add to the date object (can be negative)" ilk="argument" name="nDays" />
            </scope>
            <scope doc="Returns a new JavaScript Date object, representing the given year, month and date. Time fields (hr, min, sec, ms) on the new Date object&#xA;are set to 0. The method allows Date instances to be created with the a year less than 100. &quot;new Date(year, month, date)&quot; implementations &#xA;set the year to 19xx if a year (xx) which is less than 100 is provided.&#xA;&lt;p&gt;&#xA;&lt;em&gt;NOTE:&lt;/em&gt;Validation on argument values is not performed. It is the caller&apos;s responsibility to ensure&#xA;arguments are valid as per the ECMAScript-262 Date object specification for the new Date(year, month[, date]) constructor.&#xA;&lt;/p&gt;" ilk="function" name="getDate" signature="getDate(y, m, d) =&gt; Date">
              <variable citdl="Number" doc="Year." ilk="argument" name="y" />
              <variable citdl="Number" doc="Month index from 0 (Jan) to 11 (Dec)." ilk="argument" name="m" />
              <variable citdl="Number" doc="(optional) Date from 1 to 31. If not provided, defaults to 1." ilk="argument" name="d" />
            </scope>
            <variable citdl="String" doc="Constant field representing Week" name="WEEK" />
            <variable citdl="String" doc="Constant field representing Year" name="YEAR" />
            <variable citdl="String" doc="Constant field representing Month" name="MONTH" />
            <variable citdl="Number" doc="Constant field representing one day, in milliseconds" name="ONE_DAY_MS" />
            <variable citdl="Number" doc="Constant field representing the date in first week of January&#xA;which identifies the first week of the year.&#xA;&lt;p&gt;&#xA;In the U.S, Jan 1st is normally used based on a Sunday start of week.&#xA;ISO 8601, used widely throughout Europe, uses Jan 4th, based on a Monday start of week.&#xA;&lt;/p&gt;" name="WEEK_ONE_JAN_DATE" />
            <variable citdl="String" doc="Constant field representing Day" name="DAY" />
          </scope>
          <scope classrefs="YAHOO.widget.TextNode" doc="A Date-specific implementation that differs from TextNode in that it uses &#xA;YAHOO.widget.Calendar as an in-line editor, if available&#xA;If Calendar is not available, it behaves as a plain TextNode." ilk="class" name="DateNode">
            <scope attributes="__ctor__" doc="A Date-specific implementation that differs from TextNode in that it uses &#xA;YAHOO.widget.Calendar as an in-line editor, if available&#xA;If Calendar is not available, it behaves as a plain TextNode." ilk="function" name="DateNode" signature="DateNode(oData, oParent, expanded)">
              <variable citdl="object" doc="a string or object containing the data that will&#xA;be used to render this node.&#xA;Providing a string is the same as providing an object with a single property named label.&#xA;All values in the oData will be used to set equally named properties in the node&#xA;as long as the node does have such properties, they are not undefined, private nor functions.&#xA;All attributes are made available in noderef.data, which&#xA;can be used to store custom attributes.  TreeView.getNode(s)ByProperty&#xA;can be used to retrieve a node by one of the attributes." ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="boolean" doc="the initial expanded/collapsed state (deprecated; use oData.expanded)" ilk="argument" name="expanded" />
            </scope>
            <scope doc="Returns the value from the input element.&#xA;Overrides Node.getEditorValue." ilk="function" name="getEditorValue" signature="getEditorValue(editorData) =&gt; string">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="If YAHOO.widget.Calendar is available, it will pop up a Calendar to enter a new date.  Otherwise, it falls back to a plain &amp;lt;input&amp;gt;  textbox" ilk="function" name="fillEditorContainer" signature="fillEditorContainer(editorData) =&gt; ">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Finally displays the newly entered date in the tree.&#xA;Overrides Node.displayEditedValue." ilk="function" name="displayEditedValue" signature="displayEditedValue(value, editorData)">
              <variable citdl="string" doc="date to be displayed and stored in the node" ilk="argument" name="value" />
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Returns an object which could be used to build a tree out of this node and its children.&#xA;It can be passed to the tree constructor to reproduce this node as a tree.&#xA;It will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not." ilk="function" name="getNodeDefinition" signature="getNodeDefinition() =&gt; Object | false" />
            <variable citdl="string" doc="The node type" name="_type" />
            <variable doc="Configuration object for the Calendar editor, if used.&#xA;See &lt;a href=&quot;http://developer.yahoo.com/yui/calendar/#internationalization&quot;&gt;http://developer.yahoo.com/yui/calendar/#internationalization&lt;/a&gt;" name="calendarConfig" />
          </scope>
          <scope classrefs="YAHOO.widget.Panel" doc="&lt;p&gt;&#xA;Dialog is an implementation of Panel that can be used to submit form &#xA;data.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Built-in functionality for buttons with event handlers is included. &#xA;If the optional YUI Button dependancy is included on the page, the buttons&#xA;created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons&#xA;will be created.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Forms can be processed in 3 ways -- via an asynchronous Connection utility call, &#xA;a simple form POST or GET, or manually. The YUI Connection utility should be&#xA;included if you&apos;re using the default &quot;async&quot; postmethod, but is not required if&#xA;you&apos;re using any of the other postmethod values.&#xA;&lt;/p&gt;" ilk="class" name="Dialog">
            <scope attributes="__ctor__" doc="&lt;p&gt;&#xA;Dialog is an implementation of Panel that can be used to submit form &#xA;data.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Built-in functionality for buttons with event handlers is included. &#xA;If the optional YUI Button dependancy is included on the page, the buttons&#xA;created will be instances of YAHOO.widget.Button, otherwise regular HTML buttons&#xA;will be created.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Forms can be processed in 3 ways -- via an asynchronous Connection utility call, &#xA;a simple form POST or GET, or manually. The YUI Connection utility should be&#xA;included if you&apos;re using the default &quot;async&quot; postmethod, but is not required if&#xA;you&apos;re using any of the other postmethod values.&#xA;&lt;/p&gt;" ilk="function" name="Dialog" signature="Dialog(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Dialog &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Dialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing &#xA;the configuration that should be set for this Dialog. See configuration &#xA;documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="The default event handler for the &quot;buttons&quot; configuration property" ilk="function" name="configButtons" signature="configButtons(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Returns an array containing each of the Dialog&apos;s &#xA;buttons, by default an array of HTML &lt;code&gt;&amp;#60;BUTTON&amp;#62;&lt;/code&gt; &#xA;elements.  If the Dialog&apos;s buttons were created using the &#xA;YAHOO.widget.Button class (via the inclusion of the optional Button &#xA;dependancy on the page), an array of YAHOO.widget.Button instances &#xA;is returned." ilk="function" name="getButtons" signature="getButtons() =&gt; Array" />
            <scope doc="Submits the Dialog&apos;s form depending on the value of the &#xA;&quot;postmethod&quot; configuration property.  &lt;strong&gt;Please note:&#xA;&lt;/strong&gt; As of version 2.3 this method will automatically handle &#xA;asyncronous file uploads should the Dialog instance&apos;s form contain &#xA;&lt;code&gt;&amp;#60;input type=&quot;file&quot;&amp;#62;&lt;/code&gt; elements.  If a Dialog &#xA;instance will be handling asyncronous file uploads, its &#xA;&lt;code&gt;callback&lt;/code&gt; property will need to be setup with a &#xA;&lt;code&gt;upload&lt;/code&gt; handler rather than the standard &#xA;&lt;code&gt;success&lt;/code&gt; and, or &lt;code&gt;failure&lt;/code&gt; handlers.  For more &#xA;information, see the &lt;a href=&quot;http://developer.yahoo.com/yui/&#xA;connection/#file&quot;&gt;Connection Manager documenation on file uploads&lt;/a&gt;." ilk="function" name="doSubmit" signature="doSubmit()" />
            <scope doc="The default event handler fired when the &quot;close&quot; property is &#xA;changed. The method controls the appending or hiding of the close&#xA;icon at the top right of the Dialog." ilk="function" name="configClose" signature="configClose(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For &#xA;configuration handlers, args[0] will equal the newly applied value &#xA;for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Internal handler for the form submit event" ilk="function" name="_submitHandler" signature="_submitHandler(e)">
              <variable citdl="DOMEvent" doc="The DOM Event object" ilk="argument" name="e" />
            </scope>
            <scope doc="Event handler for the close icon" ilk="function" name="_doClose" signature="_doClose(e)">
              <variable citdl="DOMEvent" ilk="argument" name="e" />
            </scope>
            <scope doc="Executes the cancel of the Dialog followed by a hide." ilk="function" name="cancel" signature="cancel()" />
            <scope doc="The default event handler for the &quot;postmethod&quot; configuration property" ilk="function" name="configPostMethod" signature="configPostMethod(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For &#xA;configuration handlers, args[0] will equal the newly applied value &#xA;for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Sets the focus to the first button created via the &quot;buttons&quot;&#xA;configuration property." ilk="function" name="focusFirstButton" signature="focusFirstButton()" />
            <scope doc="Initializes the custom events for Dialog which are fired &#xA;automatically at appropriate times by the Dialog class." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="&lt;p&gt;&#xA;Sets focus to the first focusable element in the Dialog&apos;s form if found, &#xA;else, the default button if found, else the first button defined via the &#xA;&quot;buttons&quot; configuration property.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;This method is invoked when the Dialog is made visible.&#xA;&lt;/p&gt;" ilk="function" name="focusFirst" signature="focusFirst()" />
            <scope doc="Executes a submit of the Dialog if validation &#xA;is successful. By default the Dialog is hidden&#xA;after submission, but you can set the &quot;hideaftersubmit&quot;&#xA;configuration property to false, to prevent the Dialog&#xA;from being hidden." ilk="function" name="submit" signature="submit()" />
            <scope doc="The Dialog initialization method, which is executed for Dialog and &#xA;all of its subclasses. This method is automatically called by the &#xA;constructor, and  sets up all DOM references for pre-existing markup, &#xA;and creates required markup if it is not already present." ilk="function" name="init" signature="init(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Dialog &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Dialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal &#xA;containing the configuration that should be set for this Dialog. &#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Removes the Panel element from the DOM and sets all child elements &#xA;to null." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Returns a JSON-compatible data structure representing the data &#xA;currently contained in the form." ilk="function" name="getData" signature="getData() =&gt; Object" />
            <scope doc="Blurs all the buttons defined via the &quot;buttons&quot; &#xA;configuration property." ilk="function" name="blurButtons" signature="blurButtons()" />
            <scope doc="Sets focus to the last element in the Dialog&apos;s form or the last &#xA;button defined via the &quot;buttons&quot; configuration property." ilk="function" name="focusLast" signature="focusLast()" />
            <scope doc="Configures instance properties, pointing to the &#xA;first and last focusable elements in the Dialog&apos;s form." ilk="function" name="setFirstLastFocusable" signature="setFirstLastFocusable()" />
            <scope doc="Sets the focus to the button that is designated as the default via &#xA;the &quot;buttons&quot; configuration property. By default, this method is &#xA;called when the Dialog is made visible." ilk="function" name="focusDefaultButton" signature="focusDefaultButton()" />
            <scope doc="Built-in function hook for writing a validation function that will &#xA;be checked for a &quot;true&quot; value prior to a submit. This function, as &#xA;implemented by default, always returns true, so it should be &#xA;overridden if validation is necessary." ilk="function" name="validate" signature="validate()" />
            <scope doc="Prepares the Dialog&apos;s internal FORM object, creating one if one is&#xA;not currently present." ilk="function" name="registerForm" signature="registerForm()" />
            <scope doc="Sets the focus to the last button created via the &quot;buttons&quot; &#xA;configuration property." ilk="function" name="focusLastButton" signature="focusLastButton()" />
            <scope doc="Initializes the class&apos;s configurable properties which can be changed &#xA;using the Dialog&apos;s Config object (cfg)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <scope doc="Sets up a tab, shift-tab loop between the first and last elements&#xA;provided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener&#xA;instance properties, which are reset everytime this method is invoked." ilk="function" name="setTabLoop" signature="setTabLoop(firstElement, lastElement)">
              <variable citdl="HTMLElement" ilk="argument" name="firstElement" />
              <variable citdl="HTMLElement" ilk="argument" name="lastElement" />
            </scope>
            <scope doc="Retrieves important attributes (currently method and action) from&#xA;the form element, accounting for any elements which may have the same name &#xA;as the attributes. Defaults to &quot;POST&quot; and &quot;&quot; for method and action respectively&#xA;if the attribute cannot be retrieved." ilk="function" name="_getFormAttributes" signature="_getFormAttributes(oForm) =&gt; Object">
              <variable citdl="HTMLFormElement" doc="The HTML Form element from which to retrieve the attributes" ilk="argument" name="oForm" />
            </scope>
            <scope doc="Helper method to normalize button references. It either returns the &#xA;YUI Button instance for the given element if found,&#xA;or the passes back the HTMLElement reference if a corresponding YUI Button&#xA;reference is not found or YAHOO.widget.Button does not exist on the page." ilk="function" name="_getButton" signature="_getButton(button) =&gt; YAHOO.widget.Button|HTMLElement">
              <variable citdl="HTMLElement" ilk="argument" name="button" />
            </scope>
            <variable citdl="String" doc="Constant representing the default CSS class used for a Dialog" name="YAHOO.widget.Dialog.CSS_DIALOG" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-40002357&quot;&gt;HTMLFormElement&lt;/a&gt;" doc="Object reference to the Dialog&apos;s &#xA;&lt;code&gt;&amp;#60;form&amp;#62;&lt;/code&gt; element." name="form" />
            <variable citdl="Function" doc="The function to execute upon success of the &#xA;Connection submission (when the form does not&#xA;contain a file input element)." name="callback.success" />
            <variable citdl="Function" doc="The function to execute upon failure of the &#xA;Connection submission" name="callback.failure" />
            <variable citdl="Object" doc="The internally maintained callback object for use with the &#xA;Connection utility. The format of the callback object is &#xA;similar to Connection Manager&apos;s callback object and is &#xA;simply passed through to Connection Manager when the async &#xA;request is made." name="callback" />
            <variable citdl="Object" doc="Constant representing the name of the Dialog&apos;s events" name="EVENT_TYPES" />
            <variable citdl="Function" doc="&lt;p&gt;&#xA;The function to execute upon success of the &#xA;Connection submission, when the form contains&#xA;a file input element.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;&lt;em&gt;NOTE:&lt;/em&gt; Connection manager will not&#xA;invoke the success or failure handlers for the file&#xA;upload use case. This will be the only callback&#xA;handler invoked.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;For more information, see the &lt;a href=&quot;http://developer.yahoo.com/yui/connection/#file&quot;&gt;&#xA;Connection Manager documenation on file uploads&lt;/a&gt;.&#xA;&lt;/p&gt;" name="callback.upload" />
            <variable citdl="Object" doc="Constant representing the Dialog&apos;s configuration properties" name="DEFAULT_CONFIG" />
            <variable citdl="Object" doc="The arbitraty argument or arguments to pass to the Connection &#xA;callback functions" name="callback.argument" />
          </scope>
          <scope classrefs="YAHOO.widget.BaseCellEditor" doc="The DropdownCellEditor class provides functionality for inline editing&#xA;DataTable cell data a SELECT element." ilk="class" name="DropdownCellEditor">
            <scope attributes="__ctor__" doc="The DropdownCellEditor class provides functionality for inline editing&#xA;DataTable cell data a SELECT element." ilk="function" name="DropdownCellEditor" signature="DropdownCellEditor(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Render a form with select element." ilk="function" name="renderForm" signature="renderForm()" />
            <scope doc="After rendering form, if disabledBtns is set to true, then sets up a mechanism&#xA;to save input without them." ilk="function" name="handleDisabledBtns" signature="handleDisabledBtns()" />
            <scope doc="Sets focus in DropdownCellEditor." ilk="function" name="focus" signature="focus()" />
            <scope doc="Retrieves input value from DropdownCellEditor." ilk="function" name="getInputValue" signature="getInputValue()" />
            <scope doc="Resets DropdownCellEditor UI to initial state." ilk="function" name="resetForm" signature="resetForm()" />
            <variable citdl="String[] | Object[]" doc="Array of dropdown values. Can either be a simple array (e.g.,&#xA;[&quot;Alabama&quot;,&quot;Alaska&quot;,&quot;Arizona&quot;,&quot;Arkansas&quot;]) or a an array of objects (e.g., &#xA;[{label:&quot;Alabama&quot;, value:&quot;AL&quot;}, {label:&quot;Alaska&quot;, value:&quot;AK&quot;},&#xA;{label:&quot;Arizona&quot;, value:&quot;AZ&quot;}, {label:&quot;Arkansas&quot;, value:&quot;AR&quot;}])." name="dropdownOptions" />
            <variable citdl="HTMLElement" doc="Reference to Dropdown element." name="dropdown" />
            <variable citdl="Boolean" doc="Enables multi-select." name="multiple" />
            <variable citdl="Number" doc="Specifies number of visible options." name="size" />
          </scope>
          <scope doc="A slider with two thumbs, one that represents the min value and &#xA;the other the max.  Actually a composition of two sliders, both with&#xA;the same background.  The constraints for each slider are adjusted&#xA;dynamically so that the min value of the max slider is equal or greater&#xA;to the current value of the min slider, and the max value of the min&#xA;slider is the current value of the max slider.&#xA;Constructor assumes both thumbs are positioned absolutely at the 0 mark on&#xA;the background." ilk="class" name="DualSlider">
            <scope attributes="__ctor__" doc="A slider with two thumbs, one that represents the min value and &#xA;the other the max.  Actually a composition of two sliders, both with&#xA;the same background.  The constraints for each slider are adjusted&#xA;dynamically so that the min value of the max slider is equal or greater&#xA;to the current value of the min slider, and the max value of the min&#xA;slider is the current value of the max slider.&#xA;Constructor assumes both thumbs are positioned absolutely at the 0 mark on&#xA;the background." ilk="function" name="DualSlider" signature="DualSlider(minSlider, maxSlider, range, initVals)">
              <variable citdl="Slider" doc="The Slider instance used for the min value thumb" ilk="argument" name="minSlider" />
              <variable citdl="Slider" doc="The Slider instance used for the max value thumb" ilk="argument" name="maxSlider" />
              <variable citdl="int" doc="The number of pixels the thumbs may move within" ilk="argument" name="range" />
              <variable citdl="Array" doc="(optional) [min,max] Initial thumb placement" ilk="argument" name="initVals" />
            </scope>
            <scope doc="Executed when one of the sliders fires the slideStart event" ilk="function" name="_handleSlideStart" signature="_handleSlideStart()" />
            <scope doc="Delegates the onMouseDown to the appropriate Slider" ilk="function" name="_handleMouseDown" signature="_handleMouseDown(e)">
              <variable citdl="Event" doc="mouseup event" ilk="argument" name="e" />
            </scope>
            <scope doc="Schedule an event callback that will execute once, then unsubscribe&#xA;itself." ilk="function" name="_oneTimeCallback" signature="_oneTimeCallback(o, evt, fn)">
              <variable citdl="EventProvider" doc="Object to attach the event to" ilk="argument" name="o" />
              <variable citdl="string" doc="Name of the event" ilk="argument" name="evt" />
              <variable citdl="Function" doc="function to execute once" ilk="argument" name="fn" />
            </scope>
            <scope doc="Executed when one of the sliders fires the slideEnd event" ilk="function" name="_handleSlideEnd" signature="_handleSlideEnd()" />
            <scope doc="Overrides the onDrag method for both sliders" ilk="function" name="_handleDrag" signature="_handleDrag()" />
            <scope doc="Set up the listeners for the keydown and keypress events." ilk="function" name="_bindKeyEvents" signature="_bindKeyEvents()" />
            <scope doc="Executed when the min slider fires the change event" ilk="function" name="_handleMinChange" signature="_handleMinChange()" />
            <scope doc="Set the min thumb position to a new value." ilk="function" name="setMinValue" signature="setMinValue(min, skipAnim, force, silent)">
              <variable citdl="int" doc="Pixel offset for min thumb" ilk="argument" name="min" />
              <variable citdl="boolean" doc="(optional) Set to true to skip thumb animation.&#xA;Default false" ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="(optional) ignore the locked setting and set&#xA;value anyway. Default false" ilk="argument" name="force" />
              <variable citdl="boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
            </scope>
            <scope doc="Set the max thumb position to a new value." ilk="function" name="setMaxValue" signature="setMaxValue(max, skipAnim, force, silent)">
              <variable citdl="int" doc="Pixel offset for max thumb" ilk="argument" name="max" />
              <variable citdl="boolean" doc="(optional) Set to true to skip thumb animation.&#xA;Default false" ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="(optional) ignore the locked setting and set&#xA;value anyway. Default false" ilk="argument" name="force" />
              <variable citdl="boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
            </scope>
            <scope doc="Executed when the max slider fires the change event" ilk="function" name="_handleMaxChange" signature="_handleMaxChange()" />
            <scope doc="Delegate event handling to the active Slider.  See Slider.handleKeyDown." ilk="function" name="_handleKeyDown" signature="_handleKeyDown(e)">
              <variable citdl="Event" doc="the mousedown DOM event" ilk="argument" name="e" />
            </scope>
            <scope doc="Executed when one of the sliders is moved" ilk="function" name="updateValue" signature="updateValue(silent)">
              <variable citdl="boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
            </scope>
            <scope doc="Delegate event handling to the active Slider.  See Slider.handleKeyPress." ilk="function" name="_handleKeyPress" signature="_handleKeyPress(e)">
              <variable citdl="Event" doc="the mousedown DOM event" ilk="argument" name="e" />
            </scope>
            <scope doc="A background click will move the slider thumb nearest to the click.&#xA;Override if you need different behavior." ilk="function" name="selectActiveSlider" signature="selectActiveSlider(e)">
              <variable citdl="Event" doc="the mousedown event" ilk="argument" name="e" />
            </scope>
            <scope doc="Sets the min and max thumbs to new values." ilk="function" name="setValues" signature="setValues(min, max, skipAnim, force, silent)">
              <variable citdl="int" doc="Pixel offset to assign to the min thumb" ilk="argument" name="min" />
              <variable citdl="int" doc="Pixel offset to assign to the max thumb" ilk="argument" name="max" />
              <variable citdl="boolean" doc="(optional) Set to true to skip thumb animation.&#xA;Default false" ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="(optional) ignore the locked setting and set&#xA;value anyway. Default false" ilk="argument" name="force" />
              <variable citdl="boolean" doc="(optional) Set to true to skip firing change&#xA;events.  Default false" ilk="argument" name="silent" />
            </scope>
            <scope doc="Clean up the slideEnd event subscribers array, since each one-time&#xA;callback will be replaced in the event&apos;s subscribers property with&#xA;null.  This will cause memory bloat and loss of performance." ilk="function" name="_cleanEvent" signature="_cleanEvent(o, evt)">
              <variable citdl="EventProvider" doc="object housing the CustomEvent" ilk="argument" name="o" />
              <variable citdl="string" doc="name of the CustomEvent" ilk="argument" name="evt" />
            </scope>
            <scope doc="Delegates the onMouseUp to the active Slider" ilk="function" name="_handleMouseUp" signature="_handleMouseUp(e)">
              <variable citdl="Event" doc="mouseup event" ilk="argument" name="e" />
            </scope>
            <variable citdl="int" doc="The current value of the max thumb. &lt;strong&gt;read only&lt;/strong&gt;." name="maxVal" />
            <variable citdl="int" doc="Pixel distance to maintain between thumbs." name="minRange" />
            <variable citdl="int" doc="The current value of the min thumb. &lt;strong&gt;read only&lt;/strong&gt;." name="minVal" />
            <variable citdl="Slider" doc="A slider instance that keeps track of the upper value of the range.&#xA;&lt;strong&gt;read only&lt;/strong&gt;" name="maxSlider" />
            <variable citdl="Slider" doc="A slider instance that keeps track of the lower value of the range.&#xA;&lt;strong&gt;read only&lt;/strong&gt;" name="minSlider" />
            <variable citdl="Slider" doc="The currently active slider (min or max). &lt;strong&gt;read only&lt;/strong&gt;" name="activeSlider" />
            <variable citdl="boolean" doc="Is the DualSlider oriented horizontally or vertically?&#xA;&lt;strong&gt;read only&lt;/strong&gt;" name="isHoriz" />
          </scope>
          <scope classrefs="YAHOO.widget.SimpleEditor" doc="The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization." ilk="class" name="Editor">
            <scope attributes="__ctor__" doc="The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization." ilk="function" name="Editor" signature="Editor(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The textarea element to turn into an editor." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Disables/Enables all fields inside Editor windows. Used in show/hide events to keep window fields from submitting when the parent form is submitted." ilk="function" name="_handleWindowInputs" signature="_handleWindowInputs(disable)">
              <variable citdl="Boolean" doc="The state to set all inputs in all Editor windows to. Defaults to: false." ilk="argument" name="disable" />
            </scope>
            <scope doc="Fix href and imgs as well as remove invalid HTML." ilk="function" name="_fixNodes" signature="_fixNodes()" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;justifyright&apos;) is used." ilk="function" name="cmd_justifyright" signature="cmd_justifyright(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="A reference to the Toolbar Object inside Image Editor Window." ilk="function" name="_defaultImageToolbar" signature="_defaultImageToolbar()" />
            <scope doc="Realign the window with the currentElement and reposition the knob above the panel." ilk="function" name="moveWindow" signature="moveWindow(force)">
              <variable citdl="Boolean" doc="Boolean to tell it to move but not use any animation (Usually done the first time the window is loaded.)" ilk="argument" name="force" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create &#xA;the editor." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the editor." ilk="argument" name="attr" />
            </scope>
            <scope doc="Opens a new &quot;window/panel&quot;" ilk="function" name="openWindow" signature="openWindow(win)">
              <variable citdl="&lt;a href=&quot;YAHOO.widget.EditorWindow.html&quot;&gt;YAHOO.widget.EditorWindow&lt;/a&gt;" doc="A &lt;a href=&quot;YAHOO.widget.EditorWindow.html&quot;&gt;YAHOO.widget.EditorWindow&lt;/a&gt; instance" ilk="argument" name="win" />
            </scope>
            <scope doc="Pulls an item from the Undo stack and updates the Editor" ilk="function" name="cmd_redo" signature="cmd_redo(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;superscript&apos;) is used." ilk="function" name="cmd_superscript" signature="cmd_superscript(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Pre renders the CreateLink window so we get faster window opening." ilk="function" name="_renderCreateLinkWindow" signature="_renderCreateLinkWindow()" />
            <scope doc="Checks to see if we have an undo level available" ilk="function" name="_hasUndoLevel" signature="_hasUndoLevel() =&gt; " />
            <scope doc="Config to be used for the default Image Editor Window." ilk="function" name="_defaultImageToolbarConfig" signature="_defaultImageToolbarConfig()" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;justifycenter&apos;) is used." ilk="function" name="cmd_justifycenter" signature="cmd_justifycenter(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked." ilk="function" name="_handleInsertImageClick" signature="_handleInsertImageClick()" />
            <scope doc="Renders the panel used for Editor Windows to the document so we can start using it.." ilk="function" name="_renderPanel" signature="_renderPanel() =&gt; &lt;a href=&quot;YAHOO.widget.Overlay.html&quot;&gt;YAHOO.widget.Overlay&lt;/a&gt;" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;justifyleft&apos;) is used." ilk="function" name="cmd_justifyleft" signature="cmd_justifyleft(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="The Editor class&apos; initialization method" ilk="function" name="init" signature="init()" />
            <scope doc="Close the currently open EditorWindow." ilk="function" name="closeWindow" signature="closeWindow()" />
            <scope doc="This is a combined execCommand override method. It is called from the cmd_superscript and cmd_subscript methods." ilk="function" name="cmd_script" signature="cmd_script(action, value)">
              <variable doc="action passed from the execCommand method" ilk="argument" name="action" />
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="A reference to the HTML elements used for the body of Editor Windows." ilk="function" name="_windows" signature="_windows()" />
            <scope doc="Pre renders the InsertImage window so we get faster window opening." ilk="function" name="_renderInsertImageWindow" signature="_renderInsertImageWindow()" />
            <scope doc="Returns a string representing the editor." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;hiddenelements&apos;) is used." ilk="function" name="cmd_hiddenelements" signature="cmd_hiddenelements(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Handles the closing of the Link Properties Window." ilk="function" name="_handleCreateLinkWindowClose" signature="_handleCreateLinkWindowClose()" />
            <scope doc="Handles the closing of the Image Properties Window." ilk="function" name="_handleInsertImageWindowClose" signature="_handleInsertImageWindowClose()" />
            <scope doc="Method to call when you want to store an undo state. Currently called from nodeChange and _handleKeyUp" ilk="function" name="_storeUndo" signature="_storeUndo()" />
            <scope doc="Prunes the undo cache when it reaches the maxUndo config" ilk="function" name="_checkUndo" signature="_checkUndo()" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;indent&apos;) is used." ilk="function" name="cmd_indent" signature="cmd_indent(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Get&apos;s a level from the undo cache." ilk="function" name="_getUndo" signature="_getUndo(index) =&gt; String">
              <variable citdl="Number" doc="The index of the undo level we want to get." ilk="argument" name="index" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;heading&apos;) is used." ilk="function" name="cmd_heading" signature="cmd_heading(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is a factory method for the justify family of commands." ilk="function" name="cmd_justify" signature="cmd_justify(dir)">
              <variable doc="The direction to justify" ilk="argument" name="dir" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;subscript&apos;) is used." ilk="function" name="cmd_subscript" signature="cmd_subscript(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Puts the content of the Editor into the _undoCache.&#xA;//TODO Convert the hash to a series of TEXTAREAS to store state in." ilk="function" name="_putUndo" signature="_putUndo(str)">
              <variable citdl="String" doc="The content of the Editor" ilk="argument" name="str" />
            </scope>
            <scope doc="Pulls an item from the Undo stack and updates the Editor" ilk="function" name="cmd_undo" signature="cmd_undo(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="nodeChange listener for undo processing" ilk="function" name="_undoNodeChange" signature="_undoNodeChange()" />
            <scope doc="Override method that handles some new keydown events inside the iFrame document." ilk="function" name="_handleKeyDown" signature="_handleKeyDown(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;outdent&apos;) is used." ilk="function" name="cmd_outdent" signature="cmd_outdent(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Close the currently open EditorWindow with the Escape key." ilk="function" name="_closeWindow" signature="_closeWindow(ev)">
              <variable citdl="Event" doc="The keypress Event that we are trapping" ilk="argument" name="ev" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;removeformat&apos;) is used." ilk="function" name="cmd_removeformat" signature="cmd_removeformat(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <variable citdl="Object" doc="The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor." name="_alwaysDisabled" />
            <variable citdl="String" doc="The label string for the local file warning." name="STR_LOCAL_FILE_WARNING" />
            <variable citdl="String" doc="A note appearing in the Editor Window to tell the user that the Escape key will close the window" name="STR_CLOSE_WINDOW_NOTE" />
            <variable citdl="String" doc="The string for the word none." name="STR_NONE" />
            <variable citdl="String" doc="CSS class applied to the body when the hiddenelements button is pressed." name="CLASS_HIDDEN" />
            <variable citdl="String" doc="The label string for Image Size" name="STR_IMAGE_SIZE" />
            <variable citdl="String" doc="The label string for the image copy and paste message for Opera and Safari" name="STR_IMAGE_COPY" />
            <variable citdl="String" doc="The string for the open in a new window label." name="STR_LINK_NEW_WINDOW" />
            <variable citdl="String" doc="The Title of the close button in the Editor Window" name="STR_CLOSE_WINDOW" />
            <variable citdl="String" doc="The string for the link description." name="STR_LINK_TITLE" />
            <variable citdl="String" doc="The label string for the Remove link from text link inside the property editor." name="STR_LINK_PROP_REMOVE" />
            <variable citdl="Array" doc="The Toolbar items that should be disabled if there is no selection present in the editor." name="_disabled" />
            <variable citdl="Number" doc="The index of the current undo state." name="_undoLevel" />
            <variable citdl="String" doc="The label string for Original Image Size" name="STR_IMAGE_ORIG_SIZE" />
            <variable citdl="String" doc="The label string for Image Description" name="STR_IMAGE_TITLE" />
            <variable citdl="Object" doc="The Toolbar items that should ALWAYS be enabled event if there isn&apos;t a selection present in the editor." name="_alwaysEnabled" />
            <variable citdl="String" doc="The accessibility string for the element before the iFrame" name="STR_BEFORE_EDITOR" />
            <variable citdl="String" doc="The label string for the image text flow." name="STR_IMAGE_TEXTFLOW" />
            <variable citdl="String" doc="The label string for the Link Property Editor Window." name="STR_LINK_PROP_TITLE" />
            <variable citdl="String" doc="The label string for the image border type." name="STR_IMAGE_BORDER_TYPE" />
            <variable citdl="String" doc="HTML id to give the properties window in the DOM." name="EDITOR_PANEL_ID" />
            <variable citdl="String" doc="The label string for the image border." name="STR_IMAGE_BORDER" />
            <variable citdl="String" doc="The label string for the image padding." name="STR_IMAGE_PADDING" />
            <variable citdl="String" doc="The title for the Image Property Editor Window" name="STR_IMAGE_PROP_TITLE" />
            <variable citdl="String" doc="CSS class applied to an element when it&apos;s found to have a local url." name="CLASS_LOCAL_FILE" />
            <variable citdl="Array" doc="An Array hash of the Undo Levels." name="_undoCache" />
            <variable citdl="String" doc="The label string for the image border size." name="STR_IMAGE_BORDER_SIZE" />
          </scope>
          <scope doc="Singleton object used to track the open window objects and panels across the various open editors" ilk="namespace" name="EditorInfo">
            <scope doc="Saves all Editor instances on the page. If a form reference is passed, only Editor&apos;s bound to this form will be saved." ilk="function" name="saveAll" signature="saveAll(form)">
              <variable citdl="HTMLElement" doc="The form to check if this Editor instance belongs to" ilk="argument" name="form" />
            </scope>
            <scope doc="Returns a string representing the EditorInfo." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Returns a reference to the Editor object associated with the given textarea" ilk="function" name="getEditorById" signature="getEditorById(id) =&gt; ">
              <variable citdl="String/HTMLElement" doc="The id or reference of the textarea to return the Editor instance of" ilk="argument" name="id" />
            </scope>
            <variable citdl="Object" doc="A reference to all editors on the page." name="_instances" />
            <variable citdl="Object &lt;a href=&quot;YAHOO.widget.EditorWindow.html&quot;&gt;YAHOO.widget.EditorWindow&lt;/a&gt;" doc="A reference to the currently open window object in any editor on the page." name="window" />
            <variable citdl="String" doc="A reference to the blankImage url" name="blankImage" />
            <variable citdl="Object &lt;a href=&quot;YAHOO.widget.Overlay.html&quot;&gt;YAHOO.widget.Overlay&lt;/a&gt;" doc="A reference to the currently open panel in any editor on the page." name="panel" />
          </scope>
          <scope doc="Class to hold Window information between uses. We use the same panel to show the windows, so using this will allow you to configure a window before it is shown.&#xA;This is what you pass to Editor.openWindow();. These parameters will not take effect until the openWindow() is called in the editor." ilk="namespace" name="EditorWindow">
            <scope doc="Sets the footer for the window." ilk="function" name="setFooter" signature="setFooter(str)">
              <variable citdl="String/HTMLElement" doc="The string or DOM reference to be used as the windows footer." ilk="argument" name="str" />
            </scope>
            <scope doc="Sets the body for the window." ilk="function" name="setBody" signature="setBody(str)">
              <variable citdl="String/HTMLElement" doc="The string or DOM reference to be used as the windows body." ilk="argument" name="str" />
            </scope>
            <scope doc="Returns a string representing the EditorWindow." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Sets the header for the window." ilk="function" name="setHeader" signature="setHeader(str)">
              <variable citdl="String/HTMLElement" doc="The string or DOM reference to be used as the windows header." ilk="argument" name="str" />
            </scope>
            <variable doc="Holder for the body of the window, used in Editor.openWindow" name="body" />
            <variable doc="Holder for the header of the window, used in Editor.openWindow" name="header" />
            <variable doc="The window attributes" name="attrs" />
            <variable doc="A unique name for the window" name="name" />
            <variable doc="Holder for the footer of the window, used in Editor.openWindow" name="footer" />
          </scope>
          <scope doc="Wraps Flash embedding functionality and allows communication with SWF through&#xA;attributes." ilk="namespace" name="FlashAdapter">
            <scope doc="Called when the SWF has been initialized." ilk="function" name="_loadHandler" signature="_loadHandler()" />
            <scope doc="Setter for altText attribute." ilk="function" name="_setAltText" signature="_setAltText()" />
            <scope doc="Removes a function created with createProxyFunction()" ilk="function" name="YAHOO.widget.FlashAdapter.removeProxyFunction" signature="YAHOO.widget.FlashAdapter.removeProxyFunction()" />
            <scope doc="Initializes the attributes." ilk="function" name="_initAttributes" signature="_initAttributes()" />
            <scope doc="Getter for swfURL attribute." ilk="function" name="_getSWFURL" signature="_getSWFURL()" />
            <scope doc="Public accessor to the unique name of the FlashAdapter instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Receives event messages from SWF and passes them to the correct instance&#xA;of FlashAdapter." ilk="function" name="YAHOO.widget.FlashAdapter.eventHandler" signature="YAHOO.widget.FlashAdapter.eventHandler()" />
            <scope doc="Handles or re-dispatches events received from the SWF." ilk="function" name="_eventHandler" signature="_eventHandler()" />
            <scope doc="Embeds the SWF in the page and associates it with this instance." ilk="function" name="_embedSWF" signature="_embedSWF()" />
            <scope doc="Getter for altText attribute." ilk="function" name="_getAltText" signature="_getAltText()" />
            <scope doc="Nulls out the entire FlashAdapter instance and related objects and removes attached&#xA;event listeners and clears out DOM elements inside the container. After calling&#xA;this method, the instance reference should be expliclitly nulled by implementer,&#xA;as in myChart = null. Use with caution!" ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Creates a globally accessible function that wraps a function reference.&#xA;Returns the proxy function&apos;s name as a string for use by the SWF through&#xA;ExternalInterface." ilk="function" name="YAHOO.widget.FlashAdapter.createProxyFunction" signature="YAHOO.widget.FlashAdapter.createProxyFunction()" />
            <variable citdl="String" doc="The URL of the SWF file." name="_swfURL" />
            <variable citdl="Boolean" doc="Indicates whether the SWF has been initialized and is ready&#xA;to communicate with JavaScript" name="_initialized" />
            <variable citdl="Object" doc="The initializing attributes are stored here until the SWF is ready." name="_attributes" />
            <variable citdl="String" doc="The ID of the containing DIV." name="_containerID" />
            <variable doc="A reference to the embedded SWF file." name="_swf" />
            <variable citdl="String" doc="The id of this instance." name="_id" />
            <variable doc="The number of proxy functions that have been created." name="proxyFunctionCount" />
          </scope>
          <scope classrefs="YAHOO.widget.Node" doc="This implementation takes either a string or object for the&#xA;oData argument.  If is it a string, it will use it for the display&#xA;of this node (and it can contain any html code).  If the parameter&#xA;is an object,it looks for a parameter called &quot;html&quot; that will be&#xA;used for this node&apos;s display." ilk="class" name="HTMLNode">
            <scope attributes="__ctor__" doc="This implementation takes either a string or object for the&#xA;oData argument.  If is it a string, it will use it for the display&#xA;of this node (and it can contain any html code).  If the parameter&#xA;is an object,it looks for a parameter called &quot;html&quot; that will be&#xA;used for this node&apos;s display." ilk="function" name="HTMLNode" signature="HTMLNode(oData, oParent, expanded, hasIcon)">
              <variable citdl="object" doc="a string or object containing the data that will&#xA;be used to render this node.  &#xA;Providing a string is the same as providing an object with a single property named html.&#xA;All values in the oData will be used to set equally named properties in the node&#xA;as long as the node does have such properties, they are not undefined, private or functions.&#xA;All other attributes are made available in noderef.data, which&#xA;can be used to store custom attributes.  TreeView.getNode(s)ByProperty&#xA;can be used to retrieve a node by one of the attributes." ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="boolean" doc="the initial expanded/collapsed state (deprecated; use oData.expanded)" ilk="argument" name="expanded" />
              <variable citdl="boolean" doc="specifies whether or not leaf nodes should&#xA;be rendered with or without a horizontal line line and/or toggle icon. If the icon&#xA;is not displayed, the content fills the space it would have occupied.&#xA;This option operates independently of the leaf node presentation logic&#xA;for dynamic nodes.&#xA;(deprecated; use oData.hasIcon)" ilk="argument" name="hasIcon" />
            </scope>
            <scope doc="Returns an object which could be used to build a tree out of this node and its children.&#xA;It can be passed to the tree constructor to reproduce this node as a tree.&#xA;It will return false if any node loads dynamically, regardless of whether it is loaded or not." ilk="function" name="getNodeDefinition" signature="getNodeDefinition() =&gt; Object | false" />
            <variable doc="Synchronizes the node.html, and the node&apos;s content" name="setHtml" />
            <variable citdl="string" doc="The node type" name="_type" />
            <variable citdl="string" doc="The HTML content to use for this node&apos;s display" name="html" />
            <variable doc="Sets up the node label" name="initContent" />
            <variable citdl="string" doc="The CSS class for the html content container.  Defaults to ygtvhtml, but &#xA;can be overridden to provide a custom presentation for a specific node." name="contentStyle" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="&lt;p&gt;Creates a Image Cropper control.&lt;/p&gt;" ilk="class" name="ImageCropper">
            <scope attributes="__ctor__" doc="&lt;p&gt;Creates a Image Cropper control.&lt;/p&gt;" ilk="function" name="ImageCropper" signature="ImageCropper(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The image element to make croppable." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Handles the Resize Utilitys startResize event" ilk="function" name="_handleStartResizeEvent" signature="_handleStartResizeEvent()" />
            <scope doc="Sets the background image of the resize element" ilk="function" name="_setBackgroundImage" signature="_setBackgroundImage(String)">
              <variable doc="url The url of the image" ilk="argument" name="String" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create a croppable element." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the widget." ilk="argument" name="attr" />
            </scope>
            <scope doc="Handles the Resize Utilitys Resize event" ilk="function" name="_handleResizeEvent" signature="_handleResizeEvent(Event)">
              <variable doc="ev The Resize Utilitys resize event." ilk="argument" name="Event" />
            </scope>
            <scope doc="Get the Resize Utility object." ilk="function" name="getResizeObject" signature="getResizeObject() =&gt; &lt;a href=&quot;YAHOO.util.Resize.html&quot;&gt;YAHOO.util.Resize&lt;/a&gt;" />
            <scope doc="Get the HTML reference for the resizable object&apos;s mask element." ilk="function" name="getResizeMaskEl" signature="getResizeMaskEl() =&gt; HTMLElement" />
            <scope doc="Handles the Resize Utilitys beforeResize event" ilk="function" name="_handleBeforeResizeEvent" signature="_handleBeforeResizeEvent()" />
            <scope doc="Syncs the packground position of the resize element with the resize elements top and left style position" ilk="function" name="_syncBackgroundPosition" signature="_syncBackgroundPosition()" />
            <scope doc="Handles the mouseout event" ilk="function" name="_handleMouseOut" signature="_handleMouseOut()" />
            <scope doc="The ImageCropper class&apos;s initialization method" ilk="function" name="init" signature="init()" />
            <scope doc="Moves the resize element based on the arrow keys" ilk="function" name="_moveEl" signature="_moveEl()" />
            <scope doc="Get&apos;s an ImageCropper object by the HTML id of the image associated with the ImageCropper object." ilk="function" name="getCropperById" signature="getCropperById() =&gt; Object" />
            <scope doc="Get the HTML reference for the image element." ilk="function" name="getEl" signature="getEl() =&gt; HTMLElement" />
            <scope doc="Get the HTML reference for the resize element." ilk="function" name="getResizeEl" signature="getResizeEl() =&gt; HTMLElement" />
            <scope doc="Returns a string representing the ImageCropper Object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Handles the keypress event" ilk="function" name="_handleKeyPress" signature="_handleKeyPress()" />
            <scope doc="Handles the DragDrop DragEvent event" ilk="function" name="_handleDragEvent" signature="_handleDragEvent()" />
            <scope doc="Creates the resize element and the instance of the Resize Utility" ilk="function" name="_createResize" signature="_createResize()" />
            <scope doc="Creates the wrapper element used to wrap the image" ilk="function" name="_createWrap" signature="_createWrap()" />
            <scope doc="Get the HTML reference for the mask element." ilk="function" name="getMaskEl" signature="getMaskEl() =&gt; HTMLElement" />
            <scope doc="Handles the DragDrop b4DragEvent event" ilk="function" name="_handleB4DragEvent" signature="_handleB4DragEvent()" />
            <scope doc="Get the HTML reference for the wrap element." ilk="function" name="getWrapEl" signature="getWrapEl() =&gt; HTMLElement" />
            <scope doc="Destroys the ImageCropper object and all of it&apos;s elements &amp; listeners." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Returns the coordinates needed to crop the image" ilk="function" name="getCropCoords" signature="getCropCoords() =&gt; Object" />
            <scope doc="Sets the background image position to the top and left position" ilk="function" name="_setBackgroundPosition" signature="_setBackgroundPosition(Number, Number)">
              <variable doc="l The left position" ilk="argument" name="Number" />
              <variable doc="t The top position" ilk="argument" name="Number" />
            </scope>
            <scope doc="Handles the mouseover event" ilk="function" name="_handleMouseOver" signature="_handleMouseOver()" />
            <scope doc="Resets the crop element back to it&apos;s original position" ilk="function" name="reset" signature="reset() =&gt; &lt;a href=&quot;YAHOO.widget.ImageCropper.html&quot;&gt;YAHOO.widget.ImageCropper&lt;/a&gt;" />
            <scope doc="Resizes the inner mask element" ilk="function" name="_handleResizeMaskEl" signature="_handleResizeMaskEl()" />
            <scope doc="Set the DragDrop constraints to keep the element inside the crop area." ilk="function" name="_setConstraints" signature="_setConstraints(Boolean) =&gt; Object">
              <variable doc="inside Used when called from inside a resize event, false by default (dragging)" ilk="argument" name="Boolean" />
            </scope>
            <scope doc="Creates the mask element used to mask the image" ilk="function" name="_createMask" signature="_createMask()" />
            <scope doc="Handles the Resize Utilitys endResize event" ilk="function" name="_handleEndResizeEvent" signature="_handleEndResizeEvent()" />
            <variable citdl="HTMLElement" doc="The HTML Element used to create the Resize Oject" name="_resizeEl" />
            <variable citdl="String" doc="The CSS class for the mask inside the resize element" name="CSS_RESIZE_MASK" />
            <variable citdl="HTMLElement" doc="The HTML Element used to create the Resize mask" name="_resizeMaskEl" />
            <variable citdl="Boolean" doc="Flag to determine if the crop region is active" name="_active" />
            <variable citdl="HTMLElement" doc="The HTML Element created to &quot;mask&quot; the image being cropped" name="_mask" />
            <variable citdl="String" doc="The url of the image we are cropping" name="_image" />
            <variable citdl="Object" doc="Internal hash table for all ImageCropper instances" name="_instances" />
            <variable citdl="String" doc="The CSS class for the mask element" name="CSS_MASK" />
            <variable citdl="Object" doc="A reference to the Resize Utility used in this Cropper Instance" name="_resize" />
            <variable citdl="HTMLElement" doc="The HTML Element created to wrap the image" name="_wrap" />
            <variable citdl="String" doc="The CSS class used to wrap the element" name="CSS_MAIN" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="&lt;p&gt;Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.&lt;/p&gt;" ilk="class" name="Layout">
            <scope attributes="__ctor__" doc="&lt;p&gt;Provides a fixed layout containing, top, bottom, left, right and center layout units. It can be applied to either the body or an element.&lt;/p&gt;" ilk="function" name="Layout" signature="Layout(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to make contain a layout." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Stamps the root node with a secure classname for ease of use. Also sets the this.browser.standardsMode variable." ilk="function" name="_stamp" signature="_stamp()" />
            <scope doc="Sets up the main doc element when using the body as the main element." ilk="function" name="_setupBodyElements" signature="_setupBodyElements()" />
            <scope doc="Add a unit to this layout and if the layout is rendered, resize the layout." ilk="function" name="addUnit" signature="addUnit(cfg) =&gt; &lt;a href=&quot;YAHOO.widget.LayoutUnit.html&quot;&gt;YAHOO.widget.LayoutUnit&lt;/a&gt;">
              <variable citdl="Object" doc="The config for the LayoutUnit that you want to add" ilk="argument" name="cfg" />
            </scope>
            <scope doc="This method starts the render process, applying classnames and creating elements" ilk="function" name="render" signature="render() =&gt; &lt;a href=&quot;YAHOO.widget.Layout.html&quot;&gt;YAHOO.widget.Layout&lt;/a&gt;" />
            <scope doc="Remove the unit from this layout and resize the layout." ilk="function" name="removeUnit" signature="removeUnit(unit)">
              <variable citdl="Object" doc="The LayoutUnit that you want to remove" ilk="argument" name="unit" />
            </scope>
            <scope doc="Get the LayoutUnit by it&apos;s position in this layout" ilk="function" name="getUnitByPosition" signature="getUnitByPosition(pos) =&gt; &lt;a href=&quot;YAHOO.widget.LayoutUnit.html&quot;&gt;YAHOO.widget.LayoutUnit&lt;/a&gt;">
              <variable citdl="String" doc="The position of the unit in this layout" ilk="argument" name="pos" />
            </scope>
            <scope doc="Used to set the body size of the layout, sets the height and width of the parent container" ilk="function" name="_setBodySize" signature="_setBodySize(set)">
              <variable citdl="Boolean" doc="If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)" ilk="argument" name="set" />
            </scope>
            <scope doc="Get&apos;s a layout object by the HTML id of the element associated with the Layout object." ilk="function" name="getLayoutById" signature="getLayoutById() =&gt; Object" />
            <scope doc="Used to set the size and position of the center unit" ilk="function" name="_setCenter" signature="_setCenter(set)">
              <variable citdl="Boolean" doc="If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)" ilk="argument" name="set" />
            </scope>
            <scope doc="Private method to create units from the config that was passed in." ilk="function" name="_createUnits" signature="_createUnits()" />
            <scope doc="The Layout class&apos; initialization method" ilk="function" name="init" signature="init()" />
            <scope doc="Processes the config" ilk="function" name="initAttributes" signature="initAttributes()" />
            <scope doc="Returns a string representing the Layout." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Get a reference to the internal Layout Unit sizes object used to build the layout wireframe" ilk="function" name="getSizes" signature="getSizes() =&gt; Object" />
            <scope doc="Get the LayoutUnit by it&apos;s HTML id" ilk="function" name="getUnitById" signature="getUnitById(id) =&gt; &lt;a href=&quot;YAHOO.widget.LayoutUnit.html&quot;&gt;YAHOO.widget.LayoutUnit&lt;/a&gt;">
              <variable citdl="String" doc="The HTML element id of the unit" ilk="argument" name="id" />
            </scope>
            <scope doc="Removes this layout from the page and destroys all units that it contains. This will destroy all data inside the layout and it&apos;s children." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Sets up the main doc element when not using the body as the main element." ilk="function" name="_setupElements" signature="_setupElements()" />
            <scope doc="Used to set the size and position of the left, right, top and bottom units" ilk="function" name="_setSides" signature="_setSides(set)">
              <variable citdl="Boolean" doc="If set to false, it will NOT set the size, just perform the calculations (used for collapsing units)" ilk="argument" name="set" />
            </scope>
            <scope doc="Starts the chain of resize routines that will resize all the units." ilk="function" name="resize" signature="resize(Boolean/Event) =&gt; &lt;a href=&quot;YAHOO.widget.Layout.html&quot;&gt;YAHOO.widget.Layout&lt;/a&gt;">
              <variable doc="set If set to false, it will NOT set the size, just perform the calculations (used for collapsing units). This can also have an attribute event passed to it." ilk="argument" name="Boolean/Event" />
            </scope>
            <variable citdl="Object" doc="A collection of the current sizes of all usable LayoutUnits to be used for calculations" name="_sizes" />
            <variable citdl="Object" doc="An object literal that contains a list of units in the layout" name="_units" />
            <variable citdl="HTMLElement" doc="Reference to the root element" name="_doc" />
            <variable citdl="Boolean" doc="Set to true when the layout is rendered" name="_rendered" />
            <variable citdl="Number" doc="The zIndex to set all LayoutUnits to" name="_zIndex" />
            <variable citdl="Object" doc="Internal hash table for all layout instances" name="_instances" />
            <variable citdl="Boolean" doc="Flag to determine if we are using the body as the root element." name="_isBody" />
            <variable citdl="Object" doc="A modified version of the YAHOO.env.ua object" name="browser" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="&lt;p&gt;Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.&lt;/p&gt;" ilk="class" name="LayoutUnit">
            <scope attributes="__ctor__" doc="&lt;p&gt;Provides a fixed position unit containing a header, body and footer for use with a YAHOO.widget.Layout instance.&lt;/p&gt;" ilk="function" name="LayoutUnit" signature="LayoutUnit(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to make a unit." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Get&apos;s the elements clientHeight and clientWidth plus the size of the borders" ilk="function" name="_getBoxSize" signature="_getBoxSize(el) =&gt; Array">
              <variable citdl="HTMLElement" doc="The HTMLElement to get the size of" ilk="argument" name="el" />
            </scope>
            <scope doc="Creates the HTMLElement for the header" ilk="function" name="_createHeader" signature="_createHeader() =&gt; HTMLElement" />
            <scope doc="Get the CSS border size of the element passed." ilk="function" name="_getBorderSizes" signature="_getBorderSizes(el) =&gt; Array">
              <variable citdl="HTMLElement" doc="The element to get the border size of" ilk="argument" name="el" />
            </scope>
            <scope doc="Sets the height of the element based on the border size of the element." ilk="function" name="_setHeight" signature="_setHeight(el, h) =&gt; Number">
              <variable citdl="HTMLElement" doc="The HTMLElement to have it&apos;s height set" ilk="argument" name="el" />
              <variable citdl="Number" doc="The height that you want it the element set to" ilk="argument" name="h" />
            </scope>
            <scope doc="Sets the width of the element based on the border size of the element." ilk="function" name="_setWidth" signature="_setWidth(el, w) =&gt; Number">
              <variable citdl="HTMLElement" doc="The HTMLElement to have it&apos;s width set" ilk="argument" name="el" />
              <variable citdl="Number" doc="The width that you want it the element set to" ilk="argument" name="w" />
            </scope>
            <scope doc="Toggle th current state of the Clip element and set it&apos;s height, width and position" ilk="function" name="_toggleClip" signature="_toggleClip()" />
            <scope doc="Close the unit, removing it from the parent Layout." ilk="function" name="close" signature="close() =&gt; &lt;a href=&quot;YAHOO.widget.Layout.html&quot;&gt;YAHOO.widget.Layout&lt;/a&gt;" />
            <scope doc="The initalization method inherited from Element." ilk="function" name="init" signature="init()" />
            <scope doc="Get&apos;s a layout unit object by the HTML id of the element associated with the Layout Unit object." ilk="function" name="getLayoutUnitById" signature="getLayoutUnitById() =&gt; Object" />
            <scope doc="Toggles the Unit, replacing it with a clipped version." ilk="function" name="toggle" signature="toggle() =&gt; &lt;a href=&quot;YAHOO.widget.LayoutUnit.html&quot;&gt;YAHOO.widget.LayoutUnit&lt;/a&gt;" />
            <scope doc="Processes the config" ilk="function" name="initAttributes" signature="initAttributes()" />
            <scope doc="Create the clip element used when the Unit is collapsed" ilk="function" name="_createClip" signature="_createClip()" />
            <scope doc="Expand the Unit if it is collapsed." ilk="function" name="expand" signature="expand() =&gt; &lt;a href=&quot;YAHOO.widget.LayoutUnit.html&quot;&gt;YAHOO.widget.LayoutUnit&lt;/a&gt;" />
            <scope doc="This method attempts to clean up the first level of the YUI CSS Grids, YAHOO.util.Selector is required for this operation." ilk="function" name="_cleanGrids" signature="_cleanGrids()" />
            <scope doc="Removes this unit from the parent and cleans up after itself." ilk="function" name="destroy" signature="destroy(force) =&gt; &lt;a href=&quot;YAHOO.widget.Layout.html&quot;&gt;YAHOO.widget.Layout&lt;/a&gt;">
              <variable citdl="Boolean" doc="Don&apos;t report to the parent, because we are being called from the parent." ilk="argument" name="force" />
            </scope>
            <scope doc="Loading the content of the unit using the connection manager" ilk="function" name="loadContent" signature="loadContent() =&gt; object" />
            <scope doc="Returns a string representing the LayoutUnit." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Fixes the box calculations for IE in QuirksMode" ilk="function" name="_fixQuirks" signature="_fixQuirks(el, dim, side) =&gt; Number">
              <variable citdl="HTMLElement" doc="The HTMLElement to set the dimension on" ilk="argument" name="el" />
              <variable citdl="Number" doc="The number of the dimension to fix" ilk="argument" name="dim" />
              <variable citdl="String" doc="The dimension (h or w) to fix. Defaults to h" ilk="argument" name="side" />
            </scope>
            <scope doc="Resize either the unit or it&apos;s clipped state, also updating the box inside" ilk="function" name="resize" signature="resize(force) =&gt; &lt;a href=&quot;YAHOO.widget.LayoutUnit.html&quot;&gt;YAHOO.widget.LayoutUnit&lt;/a&gt;">
              <variable citdl="Boolean" doc="This will force full calculations even when the unit is collapsed" ilk="argument" name="force" />
            </scope>
            <scope doc="Get a reference to the internal sizes object for this unit" ilk="function" name="getSizes" signature="getSizes() =&gt; Object" />
            <scope doc="Collapse the Unit if it is not collapsed." ilk="function" name="collapse" signature="collapse() =&gt; &lt;a href=&quot;YAHOO.widget.LayoutUnit.html&quot;&gt;YAHOO.widget.LayoutUnit&lt;/a&gt;" />
            <variable citdl="Number" doc="A holder for the last known width of the unit" name="_lastWidth" />
            <variable citdl="String" doc="The class name applied to dynamic tabs while loading." name="LOADING_CLASSNAME" />
            <variable citdl="HTMLELement" doc="A reference to the HTML element used for the Header" name="header" />
            <variable citdl="YAHOO.util.Anim" doc="A reference to the Animation instance used by this LayouUnit" name="_anim" />
            <variable citdl="{String}" doc="String used for collapse button title" name="STR_COLLAPSE" />
            <variable citdl="Boolean" doc="Flag to determine if the unit is collapsed or not." name="_collapsed" />
            <variable citdl="Boolean" doc="A holder for the last known scroll state of the unit" name="_lastScroll" />
            <variable citdl="Number" doc="A holder for the last known left of the unit" name="_lastLeft" />
            <variable citdl="Object" doc="Internal hash table for all layout unit instances" name="_instances" />
            <variable citdl="Number" doc="A holder for the last known height of the unit" name="_lastHeight" />
            <variable citdl="Number" doc="During the loading process this variable will be true" name="_loading" />
            <variable citdl="HTMLElement" doc="A reference to the HTML element used for the body" name="body" />
            <variable citdl="Boolean" doc="A holder for the last known scroll state of the center unit" name="_lastCenetrScroll" />
            <variable citdl="YAHOO.util.Resize" doc="A reference to the Resize instance used by this LayoutUnit" name="_resize" />
            <variable citdl="Object" doc="A collection of the current sizes of the contents of this Layout Unit" name="_sizes" />
            <variable citdl="{String}" doc="String used for close button title" name="STR_CLOSE" />
            <variable citdl="Number" doc="A holder for the last known top of the unit" name="_lastTop" />
            <variable citdl="Object" doc="Callback method for the YUI Connection Manager used for load the body using AJAX" name="loadHandler" />
            <variable citdl="Boolean" doc="A flag set while the unit is being collapsed, used so we don&apos;t fire events while animating the size" name="_collapsing" />
            <variable citdl="Number" doc="A holder for the last known scrollTop state of the unit" name="_lastScrollTop" />
            <variable citdl="Object" doc="A simple hash table used to store the gutter to apply to the Unit" name="_gutter" />
            <variable citdl="HTMLElement" doc="A reference to the HTML element used for the footer" name="footer" />
            <variable citdl="{String}" doc="String used for expand button title" name="STR_EXPAND" />
            <variable citdl="HTMLElement" doc="A reference to the clip element used when collapsing the unit" name="_clip" />
            <variable citdl="Object" doc="YUI Connection Manager handler" name="dataConnection" />
            <variable citdl="Object" doc="A modified version of the YAHOO.env.ua object" name="browser" />
          </scope>
          <scope doc="LineChart class for the YUI Charts widget." ilk="class" name="LineChart">
            <scope attributes="__ctor__" doc="LineChart class for the YUI Charts widget." ilk="function" name="LineChart" signature="LineChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
          </scope>
          <scope doc="LineSeries class for the YUI Charts widget." ilk="class" name="LineSeries">
            <scope attributes="__ctor__" doc="LineSeries class for the YUI Charts widget." ilk="function" name="LineSeries" signature="LineSeries()" />
          </scope>
          <scope doc="The singleton Logger class provides core log management functionality. Saves&#xA;logs written through the global YAHOO.log function or written by a LogWriter&#xA;instance. Provides access to logs for reading by a LogReader instance or&#xA;native browser console such as the Firebug extension to Firefox or Safari&apos;s&#xA;JavaScript console through integration with the console.log() method." ilk="namespace" name="Logger">
            <scope doc="Resets internal stack and startTime, enables Logger, and fires logResetEvent." ilk="function" name="reset" signature="reset()" />
            <scope doc="Checks to see if a source already exists." ilk="function" name="_isNewSource" signature="_isNewSource(sSource) =&gt; Boolean">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
            </scope>
            <scope doc="Public accessor to internal stack of log message objects." ilk="function" name="getStack" signature="getStack() =&gt; Object[]" />
            <scope doc="Saves a log message to the stack and fires newLogEvent. If the log message is&#xA;assigned to an unknown category, creates a new category. If the log message is&#xA;from an unknown source, creates a new source.  If browser console is enabled,&#xA;outputs the log message to browser console." ilk="function" name="log" signature="log(sMsg, sCategory, sSource)">
              <variable citdl="String" doc="The log message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="Category of log message, or null." ilk="argument" name="sCategory" />
              <variable citdl="String" doc="Source of LogWriter, or null if global." ilk="argument" name="sSource" />
            </scope>
            <scope doc="Handles logging of messages due to window error events." ilk="function" name="_onWindowError" signature="_onWindowError(sMsg, sUrl, sLine)">
              <variable citdl="String" doc="The error message." ilk="argument" name="sMsg" />
              <variable citdl="String" doc="URL of the error." ilk="argument" name="sUrl" />
              <variable citdl="String" doc="Line number of the error." ilk="argument" name="sLine" />
            </scope>
            <scope doc="Checks to see if a category has already been created." ilk="function" name="_isNewCategory" signature="_isNewCategory(sCategory) =&gt; Boolean">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
            </scope>
            <scope doc="Surpresses native JavaScript errors and outputs to console. By default,&#xA;Logger does not handle JavaScript window error events.&#xA;NB: Not all browsers support the window.onerror event." ilk="function" name="handleWindowErrors" signature="handleWindowErrors()" />
            <scope doc="Outputs a log message to global console.log() function." ilk="function" name="_printToBrowserConsole" signature="_printToBrowserConsole(oEntry)">
              <variable citdl="Object" doc="Log entry object." ilk="argument" name="oEntry" />
            </scope>
            <scope doc="Creates a new category of log messages and fires categoryCreateEvent." ilk="function" name="_createNewCategory" signature="_createNewCategory(sCategory)">
              <variable citdl="String" doc="Category name." ilk="argument" name="sCategory" />
            </scope>
            <scope doc="Creates a new source of log messages and fires sourceCreateEvent." ilk="function" name="_createNewSource" signature="_createNewSource(sSource)">
              <variable citdl="String" doc="Source name." ilk="argument" name="sSource" />
            </scope>
            <scope doc="Enables output to the browser&apos;s global console.log() function, which is used&#xA;by the Firebug extension to Firefox as well as Safari." ilk="function" name="enableBrowserConsole" signature="enableBrowserConsole()" />
            <scope doc="Disables output to the browser&apos;s global console.log() function, which is used&#xA;by the Firebug extension to Firefox as well as Safari." ilk="function" name="disableBrowserConsole" signature="disableBrowserConsole()" />
            <scope doc="Unsurpresses native JavaScript errors. By default,&#xA;Logger does not handle JavaScript window error events.&#xA;NB: Not all browsers support the window.onerror event." ilk="function" name="unhandleWindowErrors" signature="unhandleWindowErrors()" />
            <scope doc="Public accessor to internal start time." ilk="function" name="getStartTime" signature="getStartTime() =&gt; Date" />
            <variable citdl="Number" doc="Upper limit on size of internal stack." name="maxStackEntries" />
            <variable citdl="String[]" doc="Array of sources." name="sources" />
            <variable citdl="Date" doc="Static timestamp of Logger initialization." name="_startTime" />
            <variable citdl="Boolean" doc="Internal property to track whether output to browser console is enabled." name="_browserConsoleEnabled" />
            <variable citdl="Boolean" doc="True if Logger is enabled, false otherwise." name="loggerEnabled" />
            <variable citdl="Date" doc="Timestamp of last logged message." name="_lastTime" />
            <variable citdl="Array" doc="Array to hold all log messages." name="_stack" />
            <variable citdl="String[]" doc="Array of categories." name="categories" />
          </scope>
          <scope classrefs="YAHOO.widget.Overlay" doc="The Menu class creates a container that holds a vertical list representing &#xA;a set of options or commands.  Menu is the base class for all &#xA;menu containers." ilk="class" name="Menu">
            <scope attributes="__ctor__" doc="The Menu class creates a container that holds a vertical list representing &#xA;a set of options or commands.  Menu is the base class for all &#xA;menu containers." ilk="function" name="Menu" signature="Menu(p_oElement, p_oElement, p_oElement, p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu." ilk="argument" name="p_oElement" />
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source &#xA;for the menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-94282980&quot;&gt;HTMLSelectElement&lt;/a&gt;" doc="Object specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as &#xA;the data source for the menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu. See configuration class documentation for &#xA;more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Appends an item to the menu." ilk="function" name="addItem" signature="addItem(p_oItem, p_oItem, p_oItem, p_nGroupIndex) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem &#xA;instance to be added to the menu." ilk="argument" name="p_oItem" />
              <variable citdl="String" doc="String specifying the text of the item to be added &#xA;to the menu." ilk="argument" name="p_oItem" />
              <variable citdl="Object" doc="Object literal containing a set of menu item &#xA;configuration properties." ilk="argument" name="p_oItem" />
              <variable citdl="Number" doc="Optional. Number indicating the group to&#xA;which the item belongs." ilk="argument" name="p_nGroupIndex" />
            </scope>
            <scope doc="&quot;render&quot; event handler for the menu." ilk="function" name="_onRender" signature="_onRender(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Iterates the childNodes of the source element to find nodes &#xA;used to instantiate menu and menu items." ilk="function" name="_initSubTree" signature="_initSubTree()" />
            <scope doc="&quot;mouseout&quot; event handler for the menu&apos;s &quot;header&quot; and &quot;footer&quot; &#xA;elements.  Used to stop scrolling the body of the menu up and down when the &#xA;menu&apos;s &quot;maxheight&quot; configuration property is set to a value greater than 0." ilk="function" name="_onScrollTargetMouseOut" signature="_onScrollTargetMouseOut(p_oEvent, p_oMenu)">
              <variable citdl="Event" doc="Object representing the DOM event object passed &#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Event handler for when the &quot;maxheight&quot; configuration property of &#xA;a Menu changes." ilk="function" name="configMaxHeight" signature="configMaxHeight(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="The Menu instance fired&#xA;the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Returns a boolean indicating whether or not the menu has focus." ilk="function" name="hasFocus" signature="hasFocus() =&gt; Boolean" />
            <scope doc="Change event handler for the the menu&apos;s &quot;visible&quot; configuration&#xA;property." ilk="function" name="_onVisibleChange" signature="_onVisibleChange(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Removes the specified item from the menu." ilk="function" name="removeItem" signature="removeItem(p_oObject, p_oObject, p_nGroupIndex) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem &#xA;instance to be removed from the menu." ilk="argument" name="p_oObject" />
              <variable citdl="Number" doc="Number specifying the index of the item &#xA;to be removed." ilk="argument" name="p_oObject" />
              <variable citdl="Number" doc="Optional. Number specifying the group to &#xA;which the item belongs." ilk="argument" name="p_nGroupIndex" />
            </scope>
            <scope doc="Positions the menu outside of the boundaries of the browser&apos;s &#xA;viewport.  Called automatically when a menu is hidden to ensure that &#xA;it doesn&apos;t force the browser to render uncessary scrollbars." ilk="function" name="positionOffScreen" signature="positionOffScreen()" />
            <scope doc="Sets the &quot;selected&quot; configuration property of the menu&apos;s first &#xA;enabled item to &quot;true.&quot;" ilk="function" name="setInitialSelection" signature="setInitialSelection()" />
            <scope doc="Adds the specified CustomEvent subscriber to the menu and each of &#xA;its submenus." ilk="function" name="subscribe" signature="subscribe(p_type, p_fn, p_obj, p_override)">
              <variable citdl="string" doc="the type, or name of the event" ilk="argument" name="p_type" />
              <variable citdl="function" doc="the function to exectute when the event fires" ilk="argument" name="p_fn" />
              <variable citdl="Object" doc="An object to be passed along when the event &#xA;fires" ilk="argument" name="p_obj" />
              <variable citdl="boolean" doc="If true, the obj passed in becomes the &#xA;execution scope of the listener" ilk="argument" name="p_override" />
            </scope>
            <scope doc="&quot;beforerender&quot; event handler for the menu.  Appends all of the &#xA;&lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; and their accompanying &#xA;title elements to the body element of the menu." ilk="function" name="_onBeforeRender" signature="_onBeforeRender(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Cancels the call to the &quot;showMenu.&quot;" ilk="function" name="_cancelShowDelay" signature="_cancelShowDelay()" />
            <scope doc="Returns the menu item group at the specified index." ilk="function" name="_getItemGroup" signature="_getItemGroup(p_nIndex) =&gt; Array">
              <variable citdl="Number" doc="Number indicating the index of the menu item group &#xA;to be retrieved." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="Enables the header used for scrolling the body of the menu." ilk="function" name="_enableScrollHeader" signature="_enableScrollHeader()" />
            <scope doc="&quot;click&quot; event handler for the menu." ilk="function" name="_onClick" signature="_onClick(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="&quot;init&quot; event handler for the menu." ilk="function" name="_onInit" signature="_onInit(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Updates the &quot;index,&quot; &quot;groupindex,&quot; and &quot;className&quot; properties &#xA;of the menu items in the specified group." ilk="function" name="_updateItemProperties" signature="_updateItemProperties(p_nGroupIndex)">
              <variable citdl="Number" doc="Number indicating the group of items to update." ilk="argument" name="p_nGroupIndex" />
            </scope>
            <scope doc="&quot;y&quot; event handler for a Menu instance." ilk="function" name="_onYChange" signature="_onYChange(p_sType, p_aArgs)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="&quot;hide&quot; event handler for the menu." ilk="function" name="_onHide" signature="_onHide(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Removes a menu item from a group by index.  Returns the menu &#xA;item that was removed." ilk="function" name="_removeItemFromGroupByIndex" signature="_removeItemFromGroupByIndex(p_nGroupIndex, p_nItemIndex) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="Number" doc="Number indicating the group to which the menu &#xA;item belongs." ilk="argument" name="p_nGroupIndex" />
              <variable citdl="Number" doc="Number indicating the index of the menu item &#xA;to be removed." ilk="argument" name="p_nItemIndex" />
            </scope>
            <scope doc="Removes a menu item from a group by reference.  Returns the &#xA;menu item that was removed." ilk="function" name="_removeItemFromGroupByValue" signature="_removeItemFromGroupByValue(p_nGroupIndex, p_oItem) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="Number" doc="Number indicating the group to which the&#xA;menu item belongs." ilk="argument" name="p_nGroupIndex" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem &#xA;instance to be removed." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="&quot;mouseover&quot; event handler for the menu." ilk="function" name="_onMouseOver" signature="_onMouseOver(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="The Menu class&apos;s initialization method. This method is &#xA;automatically called by the constructor, and sets up all DOM references &#xA;for pre-existing markup, and creates required markup if it is not &#xA;already present." ilk="function" name="init" signature="init(p_oElement, p_oElement, p_oElement, p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu." ilk="argument" name="p_oElement" />
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source &#xA;for the menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-94282980&quot;&gt;HTMLSelectElement&lt;/a&gt;" doc="Object specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as &#xA;the data source for the menu." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu. See configuration class documentation for &#xA;more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Sets the &quot;selected&quot; configuration property of the menu&apos;s active&#xA;item to &quot;false&quot; and hides the item&apos;s submenu." ilk="function" name="clearActiveItem" signature="clearActiveItem(p_bBlur)">
              <variable citdl="Boolean" doc="Boolean indicating if the menu&apos;s active item &#xA;should be blurred." ilk="argument" name="p_bBlur" />
            </scope>
            <scope doc="&quot;configchange&quot; event handler for the menu&apos;s items." ilk="function" name="_onMenuItemConfigChange" signature="_onMenuItemConfigChange(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item &#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="&quot;render&quot; event handler for a submenu.  Renders a  &#xA;submenu in response to the firing of its parent&apos;s &quot;render&quot; event." ilk="function" name="_onParentMenuRender" signature="_onParentMenuRender(p_sType, p_aArgs, p_oSubmenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the submenu that &#xA;subscribed to the event." ilk="argument" name="p_oSubmenu" />
            </scope>
            <scope doc="Returns a string representing the menu." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Cancels the call to &quot;hideMenu.&quot;" ilk="function" name="_cancelHideDelay" signature="_cancelHideDelay()" />
            <scope doc="Causes the menu to lose focus and fires the &quot;blur&quot; event." ilk="function" name="blur" signature="blur()" />
            <scope doc="Removes the menu&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element &#xA;(and accompanying child nodes) from the document." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Event handler for when the &quot;visible&quot; configuration property &#xA;the menu changes." ilk="function" name="configVisible" signature="configVisible(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Adds an array of items to the menu." ilk="function" name="addItems" signature="addItems(p_aItems, p_nGroupIndex) =&gt; Array">
              <variable citdl="Array" doc="Array of items to be added to the menu.  The array &#xA;can contain strings specifying the text for each item to be created, object&#xA;literals specifying each of the menu item configuration properties, &#xA;or MenuItem instances." ilk="argument" name="p_aItems" />
              <variable citdl="Number" doc="Optional. Number specifying the group to &#xA;which the items belongs." ilk="argument" name="p_nGroupIndex" />
            </scope>
            <scope doc="&quot;beforehide&quot; event handler for the menu." ilk="function" name="_onBeforeHide" signature="_onBeforeHide(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Returns the first enabled item in the menu." ilk="function" name="_getFirstEnabledItem" signature="_getFirstEnabledItem() =&gt; YAHOO.widget.MenuItem" />
            <scope doc="Checks to make sure that the value of the &quot;position&quot; property &#xA;is one of the supported strings. Returns true if the position is supported." ilk="function" name="checkPosition" signature="checkPosition(p_sPosition) =&gt; Boolean">
              <variable citdl="Object" doc="String specifying the position of the menu." ilk="argument" name="p_sPosition" />
            </scope>
            <scope doc="Creates a new menu item group (array) and its associated &#xA;&lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element. Returns an aray of menu item groups." ilk="function" name="_createItemGroup" signature="_createItemGroup(p_nIndex) =&gt; Array">
              <variable citdl="Number" doc="Number indicating the group to create." ilk="argument" name="p_nIndex" />
            </scope>
            <scope doc="Multi-dimensional Array representing the menu items as they &#xA;are grouped in the menu." ilk="function" name="getItemGroups" signature="getItemGroups() =&gt; Array" />
            <scope doc="Returns an array of all of the items in the menu." ilk="function" name="getItems" signature="getItems() =&gt; Array" />
            <scope doc="Subscribes the menu item&apos;s submenu to its parent menu&apos;s events." ilk="function" name="_configureSubmenu" signature="_configureSubmenu(p_oItem)">
              <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem &#xA;instance with the submenu to be configured." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Adds a menu item to a group." ilk="function" name="_addItemToGroup" signature="_addItemToGroup(p_nGroupIndex, p_oItem, p_oItem, p_oItem, p_nItemIndex) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="Number" doc="Number indicating the group to which the &#xA;item belongs." ilk="argument" name="p_nGroupIndex" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem &#xA;instance to be added to the menu." ilk="argument" name="p_oItem" />
              <variable citdl="String" doc="String specifying the text of the item to be added &#xA;to the menu." ilk="argument" name="p_oItem" />
              <variable citdl="Object" doc="Object literal containing a set of menu item &#xA;configuration properties." ilk="argument" name="p_oItem" />
              <variable citdl="Number" doc="Optional. Number indicating the index at &#xA;which the menu item should be added." ilk="argument" name="p_nItemIndex" />
            </scope>
            <scope doc="Event handler for when the &quot;disabled&quot; configuration property of &#xA;a menu changes." ilk="function" name="configDisabled" signature="configDisabled(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="The Menu instance fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Disables the header used for scrolling the body of the menu." ilk="function" name="_disableScrollHeader" signature="_disableScrollHeader()" />
            <scope doc="Causes the menu to receive focus and fires the &quot;focus&quot; event." ilk="function" name="focus" signature="focus()" />
            <scope doc="Event handler for when the &quot;container&quot; configuration property &#xA;of the menu changes." ilk="function" name="configContainer" signature="configContainer(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Removes all of the content from the menu, including the menu &#xA;items, group titles, header and footer." ilk="function" name="clearContent" signature="clearContent()" />
            <scope doc="Event handler for when the &quot;position&quot; configuration property &#xA;of the menu changes." ilk="function" name="configPosition" signature="configPosition(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="&quot;click&quot; event handler for the menu." ilk="function" name="_onMouseMove" signature="_onMouseMove(p_oEvent, p_oMenu)">
              <variable citdl="Event" doc="Object representing the DOM event object passed &#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Returns the item at the specified index." ilk="function" name="getItem" signature="getItem(p_nItemIndex, p_nGroupIndex) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="Number" doc="Number indicating the ordinal position of the &#xA;item to be retrieved." ilk="argument" name="p_nItemIndex" />
              <variable citdl="Number" doc="Optional. Number indicating the group to which &#xA;the item belongs." ilk="argument" name="p_nGroupIndex" />
            </scope>
            <scope doc="Returns an array of all of the submenus that are immediate &#xA;children of the menu." ilk="function" name="getSubmenus" signature="getSubmenus() =&gt; Array" />
            <scope doc="Inserts an item into the menu at the specified index." ilk="function" name="insertItem" signature="insertItem(p_oItem, p_oItem, p_oItem, p_nItemIndex, p_nGroupIndex) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem &#xA;instance to be added to the menu." ilk="argument" name="p_oItem" />
              <variable citdl="String" doc="String specifying the text of the item to be added &#xA;to the menu." ilk="argument" name="p_oItem" />
              <variable citdl="Object" doc="Object literal containing a set of menu item &#xA;configuration properties." ilk="argument" name="p_oItem" />
              <variable citdl="Number" doc="Number indicating the ordinal position at which&#xA;the item should be added." ilk="argument" name="p_nItemIndex" />
              <variable citdl="Number" doc="Optional. Number indicating the group to which &#xA;the item belongs." ilk="argument" name="p_nGroupIndex" />
            </scope>
            <scope doc="&quot;destroy&quot; event handler for the menu&apos;s items." ilk="function" name="_onMenuItemDestroy" signature="_onMenuItemDestroy(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item &#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="" ilk="function" name="_setScrollHeight" signature="_setScrollHeight(p_nScrollHeight)">
              <variable citdl="String" doc="Number representing the scrolling height of the Menu." ilk="argument" name="p_nScrollHeight" />
            </scope>
            <scope doc="&quot;show&quot; event handler for the menu." ilk="function" name="_onShow" signature="_onShow(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="&quot;configchange&quot; event handler for a submenu." ilk="function" name="_onParentMenuConfigChange" signature="_onParentMenuConfigChange(p_sType, p_aArgs, p_oSubmenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the submenu that &#xA;subscribed to the event." ilk="argument" name="p_oSubmenu" />
            </scope>
            <scope doc="Sets the title of a group of menu items." ilk="function" name="setItemGroupTitle" signature="setItemGroupTitle(p_sGroupTitle, p_nGroupIndex)">
              <variable citdl="String" doc="String specifying the title of the group." ilk="argument" name="p_sGroupTitle" />
              <variable citdl="Number" doc="Optional. Number specifying the group to which&#xA;the title belongs." ilk="argument" name="p_nGroupIndex" />
            </scope>
            <scope doc="Disables the footer used for scrolling the body of the menu." ilk="function" name="_disableScrollFooter" signature="_disableScrollFooter()" />
            <scope doc="Finds the menu&apos;s root menu." ilk="function" name="getRoot" signature="getRoot()" />
            <scope doc="Hides the menu after the number of milliseconds specified by &#xA;the &quot;hidedelay&quot; configuration property." ilk="function" name="_execHideDelay" signature="_execHideDelay()" />
            <scope doc="Event handler for when the &quot;shadow&quot; configuration property of &#xA;a menu changes." ilk="function" name="configShadow" signature="configShadow(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="The Menu instance fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="&quot;renderEvent&quot; handler used to defer the setting of the &#xA;&quot;maxheight&quot; configuration property until the menu is rendered in lazy &#xA;load scenarios." ilk="function" name="_setMaxHeight" signature="_setMaxHeight(p_sType, p_aArgs, p_nMaxHeight)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="Number" doc="Number representing the value to set for the &#xA;&quot;maxheight&quot; configuration property." ilk="argument" name="p_nMaxHeight" />
            </scope>
            <scope doc="Change event listener for the &quot;width&quot; configuration property.  This listener is &#xA;added when a Menu&apos;s &quot;width&quot; configuration property is set by the &quot;_setScrollHeight&quot; method, and &#xA;is used to set the &quot;_widthSetForScroll&quot; property to &quot;false&quot; if the &quot;width&quot; configuration property &#xA;is changed after it was set by the &quot;_setScrollHeight&quot; method.  If the &quot;_widthSetForScroll&quot; &#xA;property is set to &quot;false&quot;, and the &quot;_setScrollHeight&quot; method is in the process of tearing down &#xA;scrolling functionality, it will maintain the Menu&apos;s new width rather than reseting it." ilk="function" name="_clearSetWidthFlag" signature="_clearSetWidthFlag()" />
            <scope doc="Sets focus to the menu&apos;s first enabled item." ilk="function" name="setInitialFocus" signature="setInitialFocus()" />
            <scope doc="&quot;mouseout&quot; event handler for the menu." ilk="function" name="_onMouseOut" signature="_onMouseOut(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="&quot;itemadded&quot; event handler for a Menu instance." ilk="function" name="_onItemAdded" signature="_onItemAdded(p_sType, p_aArgs)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Event handler for when the &quot;iframe&quot; configuration property of &#xA;the menu changes." ilk="function" name="configIframe" signature="configIframe(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="&quot;mouseover&quot; event handler for the menu&apos;s &quot;header&quot; and &quot;footer&quot; &#xA;elements.  Used to scroll the body of the menu up and down when the &#xA;menu&apos;s &quot;maxheight&quot; configuration property is set to a value greater than 0." ilk="function" name="_onScrollTargetMouseOver" signature="_onScrollTargetMouseOver(p_oEvent, p_oMenu)">
              <variable citdl="Event" doc="Object representing the DOM event object passed &#xA;back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="Event handler for when the &quot;classname&quot; configuration property of &#xA;a menu changes." ilk="function" name="configClassName" signature="configClassName(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="The Menu instance fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="&quot;keypress&quot; event handler for a Menu instance." ilk="function" name="_onKeyPress" signature="_onKeyPress(p_sType, p_aArgs)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Initializes the custom events for the menu." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Enables the footer used for scrolling the body of the menu." ilk="function" name="_enableScrollFooter" signature="_enableScrollFooter()" />
            <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the menu&apos;s Config object (&quot;cfg&quot;)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <scope doc="Hides a submenu after the number of milliseconds specified by &#xA;the &quot;submenuhidedelay&quot; configuration property have ellapsed." ilk="function" name="_execSubmenuHideDelay" signature="_execSubmenuHideDelay(p_oSubmenu, p_nMouseX, p_nHideDelay)">
              <variable citdl="YAHOO.widget.Menu" doc="Object specifying the submenu that  &#xA;should be hidden." ilk="argument" name="p_oSubmenu" />
              <variable citdl="Number" doc="The x coordinate of the mouse when it left &#xA;the specified submenu&apos;s parent menu item." ilk="argument" name="p_nMouseX" />
              <variable citdl="Number" doc="The number of milliseconds that should ellapse&#xA;before the submenu is hidden." ilk="argument" name="p_nHideDelay" />
            </scope>
            <scope doc="&quot;keydown&quot; event handler for the menu." ilk="function" name="_onKeyDown" signature="_onKeyDown(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="&quot;blur&quot; event handler for a Menu instance." ilk="function" name="_onBlur" signature="_onBlur(p_sType, p_aArgs)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Subscribes a menu to a menu item&apos;s event." ilk="function" name="_subscribeToItemEvents" signature="_subscribeToItemEvents(p_oItem)">
              <variable citdl="YAHOO.widget.MenuItem" doc="Object reference for the MenuItem &#xA;instance whose events should be subscribed to." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="&quot;beforeshow&quot; event handler for the menu." ilk="function" name="_onBeforeShow" signature="_onBeforeShow(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Event handler for when the &quot;hidedelay&quot; configuration property &#xA;of the menu changes." ilk="function" name="configHideDelay" signature="configHideDelay(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="Object representing the menu that &#xA;fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <variable citdl="YAHOO.widget.MenuItem" doc="Object reference to the item in the menu that has is selected." name="activeItem" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied to the &#xA;menu&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element." name="CSS_CLASS_NAME" />
            <variable citdl="Array" doc="Array of items to be added to the menu.  The array can contain &#xA;strings representing the text for each item to be created, object literals &#xA;representing the menu item configuration properties, or MenuItem instances.  &#xA;This property should be set via the constructor using the configuration &#xA;object literal." name="itemData" />
            <variable citdl="YAHOO.widget.MenuItem" doc="Object reference to the menu&apos;s parent menu or menu item.  &#xA;This property can be set via the constructor using the configuration &#xA;object literal." name="parent" />
            <variable citdl="String" doc="String representing the tagname of the HTML element used to &#xA;title the menu&apos;s item groups." name="GROUP_TITLE_TAG_NAME" />
            <variable citdl="Boolean" doc="Boolean indicating the current state of the menu&apos;s &#xA;&quot;mouseover&quot; event." name="_bHandledMouseOverEvent" />
            <variable citdl="Boolean" doc="Boolean indicating the current state of the menu&apos;s&#xA;&quot;mouseout&quot; event." name="_bHandledMouseOutEvent" />
            <variable citdl="Array" doc="Multi-dimensional Array representing the menu items as they&#xA;are grouped in the menu." name="_aItemGroups" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-94282980&quot;&gt;HTMLSelectElement&lt;/a&gt;|&lt;a &#xA;href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.&#xA;html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object reference to the HTML element (either &#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; or &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt;) used to &#xA;create the menu." name="srcElement" />
            <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the type of menu item to instantiate and &#xA;add when parsing the child nodes (either &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element, &#xA;&lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element or &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt;) &#xA;of the menu&apos;s source HTML element." name="ITEM_TYPE" />
            <variable citdl="Boolean" doc="Stops &quot;mouseover,&quot; &quot;mouseout,&quot; and &quot;mousemove&quot; event handlers &#xA;from executing." name="_bStopMouseEventHandlers" />
            <variable citdl="Array" doc="Array of HTML element used to title groups of menu items." name="_aGroupTitleElements" />
            <variable citdl="Boolean" doc="Boolean indicating if the menu&apos;s &quot;lazy load&quot; feature is &#xA;enabled.  If set to &quot;true,&quot; initialization and rendering of the menu&apos;s &#xA;items will be deferred until the first time it is made visible.  This &#xA;property should be set via the constructor using the configuration &#xA;object literal." name="lazyLoad" />
            <variable citdl="String" doc="The current value of the &quot;classname&quot; configuration attribute." name="_sClassName" />
            <variable citdl="Array" doc="Array of &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; elements, each of which is &#xA;the parent node for each item&apos;s &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element." name="_aListElements" />
            <variable citdl="Boolean" doc="Boolean indicating if the &quot;mouseover&quot; and &quot;mouseout&quot; event &#xA;handlers used for hiding the menu via a call to &quot;YAHOO.lang.later&quot; have &#xA;already been assigned." name="_useHideDelay" />
            <variable citdl="Number" doc="The current x coordinate of the mouse inside the area of &#xA;the menu." name="_nCurrentMouseX" />
            <variable citdl="String" doc="Array representing the default x and y position that a menu &#xA;should have when it is positioned outside the viewport by the &#xA;&quot;poistionOffScreen&quot; method." name="OFF_SCREEN_POSITION" />
          </scope>
          <scope classrefs="YAHOO.widget.Menu" doc="Horizontal collection of items, each of which can contain a submenu." ilk="class" name="MenuBar">
            <scope attributes="__ctor__" doc="Horizontal collection of items, each of which can contain a submenu." ilk="function" name="MenuBar" signature="MenuBar(p_oElement, p_oElement, p_oElement, p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the &#xA;menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-94282980&quot;&gt;HTMLSelectElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data &#xA;source for the menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu bar. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Event handler for when the &quot;submenutoggleregion&quot; configuration property of &#xA;a MenuBar changes." ilk="function" name="configSubmenuToggle" signature="configSubmenuToggle(p_sType, p_aArgs)">
              <variable citdl="String" doc="The name of the event that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Collection of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="The MenuBar class&apos;s initialization method. This method is &#xA;automatically called by the constructor, and sets up all DOM references for &#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" name="init" signature="init(p_oElement, p_oElement, p_oElement, p_oElement, p_oConfig)">
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="String" doc="String specifying the id attribute of the &#xA;&lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data source for the &#xA;menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-22445964&quot;&gt;HTMLDivElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element of the menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-94282980&quot;&gt;HTMLSelectElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;select&amp;#62;&lt;/code&gt; element to be used as the data &#xA;source for the menu bar." ilk="argument" name="p_oElement" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu bar. See configuration class documentation for&#xA;more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Checks to make sure that the value of the &quot;position&quot; property &#xA;is one of the supported strings. Returns true if the position is supported." ilk="function" name="checkPosition" signature="checkPosition(p_sPosition) =&gt; Boolean">
              <variable citdl="Object" doc="String specifying the position of the menu." ilk="argument" name="p_sPosition" />
            </scope>
            <scope doc="&quot;click&quot; event handler for the menu bar." ilk="function" name="_onClick" signature="_onClick(p_sType, p_aArgs, p_oMenuBar)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuBar" doc="Object representing the menu bar &#xA;that fired the event." ilk="argument" name="p_oMenuBar" />
            </scope>
            <scope doc="Returns a string representing the menu bar." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="&quot;keydown&quot; Custom Event handler for the menu bar." ilk="function" name="_onKeyDown" signature="_onKeyDown(p_sType, p_aArgs, p_oMenuBar)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuBar" doc="Object representing the menu bar &#xA;that fired the event." ilk="argument" name="p_oMenuBar" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be&#xA;changed using the menu bar&apos;s Config object (&quot;cfg&quot;)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <variable citdl="Number" doc="Width (in pixels) of the area of a MenuBarItem that, when pressed, will toggle the&#xA;display of the MenuBarItem&apos;s submenu." name="SUBMENU_TOGGLE_REGION_WIDTH" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied to the menu &#xA;bar&apos;s &lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element." name="CSS_CLASS_NAME" />
          </scope>
          <scope classrefs="YAHOO.widget.MenuItem" doc="Creates an item for a menu bar." ilk="class" name="MenuBarItem">
            <scope attributes="__ctor__" doc="Creates an item for a menu bar." ilk="function" name="MenuBarItem" signature="MenuBarItem(p_oObject, p_oObject, p_oObject, p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-74680021&quot;&gt;HTMLLIElement&lt;/a&gt;" doc="Object specifying the &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-38450247&quot;&gt;HTMLOptGroupElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-70901257&quot;&gt;HTMLOptionElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu bar item. See configuration class documentation &#xA;for more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="The MenuBarItem class&apos;s initialization method. This method is &#xA;automatically called by the constructor, and sets up all DOM references for &#xA;pre-existing markup, and creates required markup if it is not already present." ilk="function" name="init" signature="init(p_oObject, p_oObject, p_oObject, p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-74680021&quot;&gt;HTMLLIElement&lt;/a&gt;" doc="Object specifying the &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-38450247&quot;&gt;HTMLOptGroupElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-70901257&quot;&gt;HTMLOptionElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu bar item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu bar item. See configuration class documentation &#xA;for more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Returns a string representing the menu bar item." ilk="function" name="toString" signature="toString() =&gt; String" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied to the &#xA;menu bar item&apos;s &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element." name="CSS_LABEL_CLASS_NAME" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied to the &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu bar item." name="CSS_CLASS_NAME" />
          </scope>
          <scope doc="Creates an item for a menu." ilk="class" name="MenuItem">
            <scope attributes="__ctor__" doc="Creates an item for a menu." ilk="function" name="MenuItem" signature="MenuItem(p_oObject, p_oObject, p_oObject, p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-74680021&quot;&gt;HTMLLIElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-38450247&quot;&gt;HTMLOptGroupElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-70901257&quot;&gt;HTMLOptionElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu item. See configuration class documentation &#xA;for more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Creates the core DOM structure for the menu item." ilk="function" name="_createRootNodeStructure" signature="_createRootNodeStructure()" />
            <scope doc="Returns a boolean indicating whether or not the menu item&#xA;has focus." ilk="function" name="hasFocus" signature="hasFocus() =&gt; Boolean" />
            <scope doc="Event handler for when the &quot;url&quot; configuration property of &#xA;the menu item changes." ilk="function" name="configURL" signature="configURL(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Causes the menu item to receive the focus and fires the &#xA;focus event." ilk="function" name="focus" signature="focus()" />
            <scope doc="Event handler for when the &quot;emphasis&quot; configuration property&#xA;of the menu item changes." ilk="function" name="configEmphasis" signature="configEmphasis(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Dispatches a DOM &quot;click&quot; event to the anchor element of a &#xA;MenuItem instance." ilk="function" name="_dispatchClickEvent" signature="_dispatchClickEvent()" />
            <scope doc="Event handler for when the &quot;target&quot; configuration property &#xA;of the menu item changes." ilk="function" name="configTarget" signature="configTarget(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Removes a class name from a MenuItem instance&apos;s &amp;#60;LI&amp;#62; and &amp;#60;A&amp;#62; elements&#xA;that represents a MenuItem&apos;s state - &quot;disabled,&quot; &quot;checked,&quot; etc." ilk="function" name="removeClassNameForState" signature="removeClassNameForState(state)">
              <variable citdl="String" doc="String representing a state - &quot;disabled,&quot; &quot;checked,&quot; etc." ilk="argument" name="state" />
            </scope>
            <scope doc="Returns a class name for the specified prefix and state.  If the class name does not &#xA;yet exist, it is created and stored in the CLASS_NAMES object to increase performance." ilk="function" name="getClassNameForState" signature="getClassNameForState(prefix, state)">
              <variable citdl="String" doc="String representing the prefix for the class name" ilk="argument" name="prefix" />
              <variable citdl="String" doc="String representing a state - &quot;disabled,&quot; &quot;checked,&quot; etc." ilk="argument" name="state" />
            </scope>
            <scope doc="Event handler for when the &quot;strongemphasis&quot; configuration &#xA;property of the menu item changes." ilk="function" name="configStrongEmphasis" signature="configStrongEmphasis(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="&quot;show&quot; event handler for a Menu instance - responsible for &#xA;setting up the KeyListener instance for a MenuItem." ilk="function" name="_createKeyListener" signature="_createKeyListener(type, args, keyData)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="type" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="args" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="keyData" />
            </scope>
            <scope doc="Event handler for when the &quot;submenu&quot; configuration property &#xA;of the menu item changes." ilk="function" name="configSubmenu" signature="configSubmenu(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Finds the menu item&apos;s next sibling." ilk="function" name="getNextSibling" signature="getNextSibling() =&gt; " />
            <scope doc="Event handler for when the &quot;onclick&quot; configuration property &#xA;of the menu item changes." ilk="function" name="configOnClick" signature="configOnClick(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Finds the menu item&apos;s previous enabled sibling." ilk="function" name="getPreviousEnabledSibling" signature="getPreviousEnabledSibling() =&gt; YAHOO.widget.MenuItem" />
            <scope doc="The MenuItem class&apos;s initialization method. This method is &#xA;automatically called by the constructor, and sets up all DOM references &#xA;for pre-existing markup, and creates required markup if it is not &#xA;already present." ilk="function" name="init" signature="init(p_oObject, p_oObject, p_oObject, p_oObject, p_oConfig)">
              <variable citdl="String" doc="String specifying the text of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-74680021&quot;&gt;HTMLLIElement&lt;/a&gt;" doc="Object specifying &#xA;the &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-38450247&quot;&gt;HTMLOptGroupElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; element of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-70901257&quot;&gt;HTMLOptionElement&lt;/a&gt;" doc="Object &#xA;specifying the &lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt; element of the menu item." ilk="argument" name="p_oObject" />
              <variable citdl="Object" doc="Optional. Object literal specifying the &#xA;configuration for the menu item. See configuration class documentation &#xA;for more details." ilk="argument" name="p_oConfig" />
            </scope>
            <scope doc="Returns a string representing the menu item." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Applies a class name to a MenuItem instance&apos;s &amp;#60;LI&amp;#62; and &amp;#60;A&amp;#62; elements&#xA;that represents a MenuItem&apos;s state - &quot;disabled,&quot; &quot;checked,&quot; etc." ilk="function" name="addClassNameForState" signature="addClassNameForState(state)">
              <variable citdl="String" doc="String representing a state - &quot;disabled,&quot; &quot;checked,&quot; etc." ilk="argument" name="state" />
            </scope>
            <scope doc="&quot;beforehide&quot; Custom Event handler for a submenu." ilk="function" name="_onSubmenuBeforeHide" signature="_onSubmenuBeforeHide(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Causes the menu item to lose focus and fires the &#xA;blur event." ilk="function" name="blur" signature="blur()" />
            <scope doc="Event handler for when the &quot;helptext&quot; configuration property &#xA;of the menu item changes." ilk="function" name="configHelpText" signature="configHelpText(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Removes the menu item&apos;s &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element &#xA;from its parent &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Finds the menu item&apos;s next enabled sibling." ilk="function" name="getNextEnabledSibling" signature="getNextEnabledSibling() =&gt; " />
            <scope doc="Event handler for when the &quot;checked&quot; configuration property &#xA;of the menu item changes." ilk="function" name="configChecked" signature="configChecked(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Event handler for when the &quot;keylistener&quot; configuration &#xA;property of a menu item changes." ilk="function" name="configKeyListener" signature="configKeyListener(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Event handler for when the &quot;disabled&quot; configuration property &#xA;of the menu item changes." ilk="function" name="configDisabled" signature="configDisabled(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Event handler for when the &quot;selected&quot; configuration property &#xA;of the menu item changes." ilk="function" name="configSelected" signature="configSelected(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Finds the menu item&apos;s previous sibling." ilk="function" name="getPreviousSibling" signature="getPreviousSibling() =&gt; YAHOO.widget.MenuItem" />
            <scope doc="Iterates the source element&apos;s childNodes collection and uses &#xA;the child nodes to instantiate other menus." ilk="function" name="_initSubTree" signature="_initSubTree()" />
            <scope doc="Event handler for when the &quot;classname&quot; configuration &#xA;property of a menu item changes." ilk="function" name="configClassName" signature="configClassName(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Event handler for when the &quot;text&quot; configuration property of &#xA;the menu item changes." ilk="function" name="configText" signature="configText(p_sType, p_aArgs, p_oItem)">
              <variable citdl="String" doc="String representing the name of the event that &#xA;was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.MenuItem" doc="Object representing the menu item&#xA;that fired the event." ilk="argument" name="p_oItem" />
            </scope>
            <scope doc="Initializes an item&apos;s configurable properties." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <variable citdl="YAHOO.widget.Menu" doc="Object reference to the menu item&apos;s submenu." name="_oSubmenu" />
            <variable citdl="Number" doc="Number indicating the ordinal position of the menu item in &#xA;its group." name="index" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied to the &#xA;menu item&apos;s &lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element." name="CSS_LABEL_CLASS_NAME" />
            <variable citdl="String" doc="String representing the CSS class(es) to be applied to the &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element of the menu item." name="CSS_CLASS_NAME" />
            <variable citdl="YAHOO.widget.Menu" doc="Object reference to the menu item&apos;s parent menu." name="parent" />
            <variable citdl="YAHOO.widget.Menu" doc="Object representing the type of menu to instantiate and &#xA;add when parsing the child nodes of the menu item&apos;s source HTML element." name="SUBMENU_TYPE" />
            <variable citdl="YAHOO.widget.MenuItem" doc="Object reference to the menu item&apos;s constructor function." name="constructor" />
            <variable citdl="Object" doc="Object reference to the menu item&apos;s value." name="value" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-74680021&quot;&gt;HTMLLIElement&lt;/a&gt;" doc="Object reference to the menu item&apos;s &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element." name="element" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-74680021&quot;&gt;HTMLLIElement&lt;/a&gt;|&lt;a href=&quot;http://www.w3.&#xA;org/TR/2000/WD-DOM-Level-1-20000929/level-one-html.html#ID-38450247&quot;&gt;&#xA;HTMLOptGroupElement&lt;/a&gt;|&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-&#xA;Level-1-20000929/level-one-html.html#ID-70901257&quot;&gt;HTMLOptionElement&lt;/a&gt;" doc="Object reference to the HTML element (either &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt;, &lt;code&gt;&amp;#60;optgroup&amp;#62;&lt;/code&gt; or &#xA;&lt;code&gt;&amp;#60;option&amp;#62;&lt;/code&gt;) used create the menu item." name="srcElement" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-48250443&quot;&gt;HTMLAnchorElement&lt;/a&gt;" doc="Object reference to the menu item&apos;s &#xA;&lt;code&gt;&amp;#60;a&amp;#62;&lt;/code&gt; element." name="_oAnchor" />
            <variable citdl="String" doc="The current value of the &quot;classname&quot; configuration attribute." name="_sClassName" />
            <variable citdl="Number" doc="Number indicating the index of the group to which the menu &#xA;item belongs." name="groupIndex" />
            <variable citdl="Object" doc="Object reference to the menu item&apos;s current value for the &#xA;&quot;onclick&quot; configuration attribute." name="_oOnclickAttributeValue" />
            <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-&#xA;one-html.html#ID-58190037&quot;&gt;HTMLElement&lt;/a&gt;" doc="Object reference to the menu item&apos;s help text &#xA;&lt;code&gt;&amp;#60;em&amp;#62;&lt;/code&gt; element." name="_oHelpTextEM" />
            <variable citdl="String" doc="Id of the menu item&apos;s root &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; &#xA;element.  This property should be set via the constructor using the &#xA;configuration object literal.  If an id is not specified, then one will &#xA;be created using the &quot;generateId&quot; method of the Dom utility." name="id" />
            <variable citdl="String" doc="String representing the browser." name="browser" />
          </scope>
          <scope doc="Singleton that manages a collection of all menus and menu items.  Listens &#xA;for DOM events at the document level and dispatches the events to the &#xA;corresponding menu or menu item." ilk="namespace" name="MenuManager">
            <scope doc="Returns a collection of all visible menus registered&#xA;with the menu manger." ilk="function" name="getVisible" signature="getVisible() =&gt; Object" />
            <scope doc="&quot;focus&quot; event handler for a MenuItem instance." ilk="function" name="onMenuFocus" signature="onMenuFocus(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="&quot;destroy&quot; event handler for a MenuItem instance." ilk="function" name="onItemDestroy" signature="onItemDestroy(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Generic, global event handler for all of a menu&apos;s &#xA;DOM-based events.  This listens for events against the document &#xA;object.  If the target of a given event is a member of a menu or &#xA;menu item&apos;s DOM, the instance&apos;s corresponding Custom Event is fired." ilk="function" name="onDOMEvent" signature="onDOMEvent(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event object  &#xA;passed back by the event utility (YAHOO.util.Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Returns a menu with the specified id." ilk="function" name="getMenu" signature="getMenu(p_sId) =&gt; YAHOO.widget.Menu">
              <variable citdl="String" doc="String specifying the id of the &#xA;&lt;code&gt;&amp;#60;div&amp;#62;&lt;/code&gt; element representing the menu to&#xA;be retrieved." ilk="argument" name="p_sId" />
            </scope>
            <scope doc="Event handler for when the &quot;visible&quot; configuration  &#xA;property of a Menu instance changes." ilk="function" name="onMenuVisibleConfigChange" signature="onMenuVisibleConfigChange(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Finds the root DIV node of a menu or the root LI node of &#xA;a menu item." ilk="function" name="getMenuRootElement" signature="getMenuRootElement(p_oElement)">
              <variable citdl="&lt;a href=&quot;http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/&#xA;level-one-html.html#ID-58190037&quot;&gt;HTMLElement&lt;/a&gt;" doc="Object &#xA;specifying an HTML element." ilk="argument" name="p_oElement" />
            </scope>
            <scope doc="Removes a MenuItem instance from the MenuManager&apos;s collection of MenuItems." ilk="function" name="removeItem" signature="removeItem(p_oMenuItem)">
              <variable citdl="MenuItem" doc="The MenuItem instance to be removed." ilk="argument" name="p_oMenuItem" />
            </scope>
            <scope doc="Adds a menu to the collection of known menus." ilk="function" name="addMenu" signature="addMenu(p_oMenu)">
              <variable citdl="YAHOO.widget.Menu" doc="Object specifying the Menu  &#xA;instance to be added." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="&quot;destroy&quot; event handler for a menu." ilk="function" name="onMenuDestroy" signature="onMenuDestroy(p_sType, p_aArgs, p_oMenu)">
              <variable citdl="String" doc="String representing the name of the event &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="YAHOO.widget.Menu" doc="The menu that fired the event." ilk="argument" name="p_oMenu" />
            </scope>
            <scope doc="&quot;blur&quot; event handler for a MenuItem instance." ilk="function" name="onMenuBlur" signature="onMenuBlur(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Returns a reference to the menu that currently &#xA;has focus." ilk="function" name="getFocusedMenu" signature="getFocusedMenu() =&gt; YAHOO.widget.Menu" />
            <scope doc="Returns a string representing the menu manager." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Returns a menu item with the specified id." ilk="function" name="getMenuItem" signature="getMenuItem(p_sId) =&gt; YAHOO.widget.MenuItem">
              <variable citdl="String" doc="String specifying the id of the &#xA;&lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; element representing the menu item to&#xA;be retrieved." ilk="argument" name="p_sId" />
            </scope>
            <scope doc="Returns a collection of all menus registered with the &#xA;menu manger." ilk="function" name="getMenus" signature="getMenus() =&gt; Object" />
            <scope doc="Returns a reference to the menu item that currently &#xA;has focus." ilk="function" name="getFocusedMenuItem" signature="getFocusedMenuItem() =&gt; YAHOO.widget.MenuItem" />
            <scope doc="&quot;itemadded&quot; event handler for a Menu instance." ilk="function" name="onItemAdded" signature="onItemAdded(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Returns an array of menu item instances whose &#xA;corresponding &lt;code&gt;&amp;#60;li&amp;#62;&lt;/code&gt; elements are child &#xA;nodes of the &lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element with the &#xA;specified id." ilk="function" name="getMenuItemGroup" signature="getMenuItemGroup(p_sId) =&gt; Array">
              <variable citdl="String" doc="String specifying the id of the &#xA;&lt;code&gt;&amp;#60;ul&amp;#62;&lt;/code&gt; element representing the group of &#xA;menu items to be retrieved." ilk="argument" name="p_sId" />
            </scope>
            <scope doc="Hides all visible, dynamically positioned menus &#xA;(excluding instances of YAHOO.widget.MenuBar)." ilk="function" name="hideVisible" signature="hideVisible()" />
            <scope doc="Removes a menu from the collection of known menus." ilk="function" name="removeMenu" signature="removeMenu(p_oMenu)">
              <variable citdl="YAHOO.widget.Menu" doc="Object specifying the Menu  &#xA;instance to be removed." ilk="argument" name="p_oMenu" />
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.TextNode" doc="A menu-specific implementation that differs from TextNode in that only &#xA;one sibling can be expanded at a time." ilk="class" name="MenuNode">
            <scope attributes="__ctor__" doc="A menu-specific implementation that differs from TextNode in that only &#xA;one sibling can be expanded at a time." ilk="function" name="MenuNode" signature="MenuNode(oData, oParent, expanded)">
              <variable citdl="object" doc="a string or object containing the data that will&#xA;be used to render this node.&#xA;Providing a string is the same as providing an object with a single property named label.&#xA;All values in the oData will be used to set equally named properties in the node&#xA;as long as the node does have such properties, they are not undefined, private or functions.&#xA;All attributes are made available in noderef.data, which&#xA;can be used to store custom attributes.  TreeView.getNode(s)ByProperty&#xA;can be used to retrieve a node by one of the attributes." ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="boolean" doc="the initial expanded/collapsed state (deprecated; use oData.expanded)" ilk="argument" name="expanded" />
            </scope>
            <variable doc="The node type" name="_type" />
          </scope>
          <scope doc="Module is a JavaScript representation of the Standard Module Format. &#xA;Standard Module Format is a simple standard for markup containers where &#xA;child nodes representing the header, body, and footer of the content are &#xA;denoted using the CSS classes &quot;hd&quot;, &quot;bd&quot;, and &quot;ft&quot; respectively. &#xA;Module is the base class for all other classes in the YUI &#xA;Container package." ilk="class" name="Module">
            <scope attributes="__ctor__" doc="Module is a JavaScript representation of the Standard Module Format. &#xA;Standard Module Format is a simple standard for markup containers where &#xA;child nodes representing the header, body, and footer of the content are &#xA;denoted using the CSS classes &quot;hd&quot;, &quot;bd&quot;, and &quot;ft&quot; respectively. &#xA;Module is the base class for all other classes in the YUI &#xA;Container package." ilk="function" name="Module" signature="Module(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Module &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Module" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration Object literal containing &#xA;the configuration that should be set for this module. See configuration &#xA;documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Renders the Module by inserting the elements that are not already &#xA;in the main Module into their correct places. Optionally appends &#xA;the Module to the specified node prior to the render&apos;s execution. &#xA;&lt;p&gt;&#xA;For Modules without existing markup, the appendToNode argument &#xA;is REQUIRED. If this argument is ommitted and the current element is &#xA;not present in the document, the function will return false, &#xA;indicating that the render was a failure.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;NOTE: As of 2.3.1, if the appendToNode is the document&apos;s body element&#xA;then the module is rendered as the first child of the body element, &#xA;and not appended to it, to avoid Operation Aborted errors in IE when &#xA;rendering the module before window&apos;s load event is fired. You can &#xA;use the appendtodocumentbody configuration property to change this &#xA;to append to document.body if required.&#xA;&lt;/p&gt;" ilk="function" name="render" signature="render(appendToNode, appendToNode, moduleElement) =&gt; Boolean">
              <variable citdl="String" doc="The element id to which the Module &#xA;should be appended to prior to rendering &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="appendToNode" />
              <variable citdl="HTMLElement" doc="The element to which the Module &#xA;should be appended to prior to rendering" ilk="argument" name="appendToNode" />
              <variable citdl="HTMLElement" doc="OPTIONAL. The element that &#xA;represents the actual Standard Module container." ilk="argument" name="moduleElement" />
            </scope>
            <scope doc="Shows the Module element by setting the visible configuration &#xA;property to true. Also fires two events: beforeShowEvent prior to &#xA;the visibility change, and showEvent after." ilk="function" name="show" signature="show()" />
            <scope doc="Renders the currently set body into it&apos;s proper position under the &#xA;module element. If the module element is not provided, &quot;this.element&quot; &#xA;is used." ilk="function" name="_renderBody" signature="_renderBody(moduleElement)">
              <variable citdl="HTMLElement" doc="Optional. A reference to the module element." ilk="argument" name="moduleElement" />
            </scope>
            <scope doc="Renders the currently set header into it&apos;s proper position under the &#xA;module element. If the module element is not provided, &quot;this.element&quot; &#xA;is used." ilk="function" name="_renderHeader" signature="_renderHeader(moduleElement)">
              <variable citdl="HTMLElement" doc="Optional. A reference to the module element" ilk="argument" name="moduleElement" />
            </scope>
            <scope doc="Sets the Module&apos;s body content to the HTML specified. &#xA;If no body is present, one will be automatically created. &#xA;An empty string can be passed to the method to clear the contents of the body." ilk="function" name="setBody" signature="setBody(bodyContent, bodyContent, bodyContent)">
              <variable citdl="String" doc="The HTML used to set the body. &#xA;As a convenience, non HTMLElement objects can also be passed into &#xA;the method, and will be treated as strings, with the body innerHTML&#xA;set to their default toString implementations.&#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="bodyContent" />
              <variable citdl="HTMLElement" doc="The HTMLElement to add as the first and only&#xA;child of the body element.&#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="bodyContent" />
              <variable citdl="DocumentFragment" doc="The document fragment &#xA;containing elements which are to be added to the body" ilk="argument" name="bodyContent" />
            </scope>
            <scope doc="Hides the Module element by setting the visible configuration &#xA;property to false. Also fires two events: beforeHideEvent prior to &#xA;the visibility change, and hideEvent after." ilk="function" name="hide" signature="hide()" />
            <scope doc="Initializes the custom events for Module which are fired &#xA;automatically at appropriate times by the Module class." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Initialize an empty IFRAME that is placed out of the visible area &#xA;that can be used to detect text resize." ilk="function" name="initResizeMonitor" signature="initResizeMonitor()" />
            <scope doc="Text resize monitor helper method.&#xA;Determines if the browser supports resize events on iframe content windows." ilk="function" name="_supportsCWResize" signature="_supportsCWResize()" />
            <scope doc="The Module class&apos;s initialization method, which is executed for&#xA;Module and all of its subclasses. This method is automatically &#xA;called by the constructor, and  sets up all DOM references for &#xA;pre-existing markup, and creates required markup if it is not &#xA;already present.&#xA;&lt;p&gt;&#xA;If the element passed in does not have an id, one will be generated&#xA;for it.&#xA;&lt;/p&gt;" ilk="function" name="init" signature="init(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Module &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Module" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration Object literal &#xA;containing the configuration that should be set for this module. &#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Returns a String representation of the Object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Removes the Module element from the DOM and sets all child elements &#xA;to null." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Renders the currently set footer into it&apos;s proper position under the &#xA;module element. If the module element is not provided, &quot;this.element&quot; &#xA;is used." ilk="function" name="_renderFooter" signature="_renderFooter(moduleElement)">
              <variable citdl="HTMLElement" doc="Optional. A reference to the module element" ilk="argument" name="moduleElement" />
            </scope>
            <scope doc="Appends the passed element to the header. If no header is present, &#xA;one will be automatically created." ilk="function" name="appendToHeader" signature="appendToHeader(element)">
              <variable citdl="HTMLElement | DocumentFragment" doc="The element to &#xA;append to the header. In the case of a document fragment, the&#xA;children of the fragment will be appended to the header." ilk="argument" name="element" />
            </scope>
            <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" name="onDomResize" signature="onDomResize(e, obj)">
              <variable citdl="DOMEvent" doc="The DOM resize event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The scope object passed to the handler" ilk="argument" name="obj" />
            </scope>
            <scope doc="Sets the Module&apos;s footer content to the HTML specified, or appends &#xA;the passed element to the footer. If no footer is present, one will &#xA;be automatically created. An empty string can be passed to the method&#xA;to clear the contents of the footer." ilk="function" name="setFooter" signature="setFooter(footerContent, footerContent, footerContent)">
              <variable citdl="String" doc="The HTML used to set the footer &#xA;As a convenience, non HTMLElement objects can also be passed into &#xA;the method, and will be treated as strings, with the footer innerHTML&#xA;set to their default toString implementations.&#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="footerContent" />
              <variable citdl="HTMLElement" doc="The HTMLElement to append to &#xA;the footer&#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="footerContent" />
              <variable citdl="DocumentFragment" doc="The document fragment containing &#xA;elements which are to be added to the footer" ilk="argument" name="footerContent" />
            </scope>
            <scope doc="Helper utility method, which forces a document level &#xA;redraw for Opera, which can help remove repaint&#xA;irregularities after applying DOM changes." ilk="function" name="YAHOO.widget.Module.forceDocumentRedraw" signature="YAHOO.widget.Module.forceDocumentRedraw()" />
            <scope doc="Default event handler for the &quot;monitorresize&quot; configuration property" ilk="function" name="configMonitorResize" signature="configMonitorResize(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Appends the passed element to the footer. If no footer is present, &#xA;one will be automatically created." ilk="function" name="appendToFooter" signature="appendToFooter(element)">
              <variable citdl="HTMLElement | DocumentFragment" doc="The element to &#xA;append to the footer. In the case of a document fragment, the&#xA;children of the fragment will be appended to the footer" ilk="argument" name="element" />
            </scope>
            <scope doc="Default event handler for changing the visibility property of a &#xA;Module. By default, this is achieved by switching the &quot;display&quot; style &#xA;between &quot;block&quot; and &quot;none&quot;.&#xA;This method is responsible for firing showEvent and hideEvent." ilk="function" name="configVisible" signature="configVisible(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="This method is a protected helper, used when constructing the DOM structure for the module &#xA;to account for situations which may cause Operation Aborted errors in IE. It should not &#xA;be used for general DOM construction.&#xA;&lt;p&gt;&#xA;If the parentNode is not document.body, the element is appended as the last element.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;If the parentNode is document.body the element is added as the first child to help&#xA;prevent Operation Aborted errors in IE.&#xA;&lt;/p&gt;" ilk="function" name="_addToParent" signature="_addToParent(The, The)">
              <variable citdl="parentNode" doc="HTML element to which the element will be added" ilk="argument" name="The" />
              <variable citdl="element" doc="HTML element to be added to parentNode&apos;s children" ilk="argument" name="The" />
            </scope>
            <scope doc="Appends the passed element to the body. If no body is present, one &#xA;will be automatically created." ilk="function" name="appendToBody" signature="appendToBody(element)">
              <variable citdl="HTMLElement | DocumentFragment" doc="The element to &#xA;append to the body. In the case of a document fragment, the&#xA;children of the fragment will be appended to the body." ilk="argument" name="element" />
            </scope>
            <scope doc="Create and initialize the text resize monitoring iframe." ilk="function" name="_initResizeMonitor" signature="_initResizeMonitor()" />
            <scope doc="Sets the Module&apos;s header content to the string specified, or appends &#xA;the passed element to the header. If no header is present, one will &#xA;be automatically created. An empty string can be passed to the method&#xA;to clear the contents of the header." ilk="function" name="setHeader" signature="setHeader(headerContent, headerContent, headerContent)">
              <variable citdl="String" doc="The string used to set the header.&#xA;As a convenience, non HTMLElement objects can also be passed into &#xA;the method, and will be treated as strings, with the header innerHTML&#xA;set to their default toString implementations.&#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="headerContent" />
              <variable citdl="HTMLElement" doc="The HTMLElement to append to &#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="headerContent" />
              <variable citdl="DocumentFragment" doc="The document fragment &#xA;containing elements which are to be added to the header" ilk="argument" name="headerContent" />
            </scope>
            <scope doc="Initializes the custom events for Module which are fired &#xA;automatically at appropriate times by the Module class." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <variable citdl="HTMLElement" doc="The body element, denoted with CSS class &quot;bd&quot;" name="body" />
            <variable citdl="String" doc="String representing the user-agent of the browser" name="browser" />
            <variable citdl="Boolean" doc="Boolean representing whether or not the current browsing context is &#xA;secure (https)" name="isSecure" />
            <variable citdl="String" doc="Constant for the default CSS class name that represents a Module" name="YAHOO.widget.Module.CSS_MODULE" />
            <variable citdl="String" doc="Constant representing the prefix path to use for securely served images" name="YAHOO.widget.Module.IMG_ROOT_SSL" />
            <variable citdl="String" doc="Constant representing the module header" name="YAHOO.widget.Module.CSS_HEADER" />
            <variable citdl="String" doc="Constant representing the module footer" name="YAHOO.widget.Module.CSS_FOOTER" />
            <variable citdl="Function" doc="The class&apos;s constructor function" name="contructor" />
            <variable citdl="HTMLElement" doc="The header element, denoted with CSS class &quot;hd&quot;" name="header" />
            <variable citdl="HTMLElement" doc="The main module element that contains the header, body, and footer" name="element" />
            <variable citdl="String" doc="Constant representing the url for the &quot;src&quot; attribute of the iframe &#xA;used to monitor changes to the browser&apos;s base font size" name="YAHOO.widget.Module.RESIZE_MONITOR_SECURE_URL" />
            <variable citdl="String" doc="String representing the current user-agent platform" name="platform" />
            <variable citdl="Object" doc="Constant representing the Module&apos;s configuration properties" name="DEFAULT_CONFIG" />
            <variable citdl="String" doc="Constant representing the prefix path to use for non-secure images" name="YAHOO.widget.Module.IMG_ROOT" />
            <variable citdl="String" doc="A string representing the root path for all images created by&#xA;a Module instance." name="imageRoot" />
            <variable citdl="YAHOO.util.Config" doc="The Module&apos;s Config object used for monitoring &#xA;configuration properties." name="cfg" />
            <variable citdl="HTMLElement" doc="The footer element, denoted with CSS class &quot;ft&quot;" name="footer" />
            <variable citdl="Number" doc="Constant representing the buffer amount (in pixels) to use when positioning&#xA;the text resize monitor offscreen. The resize monitor is positioned&#xA;offscreen by an amount eqaul to its offsetHeight + the buffer value." name="YAHOO.widget.Module.RESIZE_MONITOR_BUFFER" />
            <variable citdl="String" doc="The id of the element" name="id" />
            <variable citdl="String" doc="Constant representing the module body" name="YAHOO.widget.Module.CSS_BODY" />
            <variable citdl="Object" doc="Constant representing the name of the Module&apos;s events" name="EVENT_TYPES" />
          </scope>
          <scope doc="The base class for all tree nodes.  The node&apos;s presentation and behavior in&#xA;response to mouse events is handled in Node subclasses." ilk="class" name="Node">
            <scope attributes="__ctor__" doc="The base class for all tree nodes.  The node&apos;s presentation and behavior in&#xA;response to mouse events is handled in Node subclasses." ilk="function" name="Node" signature="Node(oData, oParent, expanded)">
              <variable citdl="object" doc="a string or object containing the data that will&#xA;be used to render this node, and any custom attributes that should be&#xA;stored with the node (which is available in noderef.data).&#xA;All values in oData will be used to set equally named properties in the node&#xA;as long as the node does have such properties, they are not undefined, private or functions,&#xA;the rest of the values will be stored in noderef.data" ilk="argument" name="oData" />
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="boolean" doc="the initial expanded/collapsed state (deprecated, use oData.expanded)" ilk="argument" name="expanded" />
            </scope>
            <scope doc="Sets the value of property for this node and all loaded descendants.  &#xA;Only public and defined properties can be set, not methods.  &#xA;Values for unknown properties will be assigned to the refNode.data object" ilk="function" name="setNodesProperty" signature="setNodesProperty(name, value, refresh)">
              <variable citdl="string" doc="Name of the property to be set" ilk="argument" name="name" />
              <variable citdl="any" doc="value to be set" ilk="argument" name="value" />
              <variable citdl="boolean" doc="if present and true, it does a refresh" ilk="argument" name="refresh" />
            </scope>
            <scope doc="Appends a node to the child collection." ilk="function" name="appendChild" signature="appendChild(childNode) =&gt; Node">
              <variable citdl="Node" doc="the new node" ilk="argument" name="childNode" />
            </scope>
            <scope doc="Configures this node for dynamically obtaining the child data&#xA;when the node is first expanded.  Calling it without the callback&#xA;will turn off dynamic load for the node." ilk="function" name="setDynamicLoad" signature="setDynamicLoad(fmDataLoader, iconMode)">
              <variable citdl="function" doc="the function that will be used to get the data." ilk="argument" name="fmDataLoader" />
              <variable citdl="int" doc="configures the icon that is displayed when a dynamic&#xA;load node is expanded the first time without children.  By default, the &#xA;&quot;collapse&quot; icon will be used.  If set to 1, the leaf node icon will be&#xA;displayed." ilk="argument" name="iconMode" />
            </scope>
            <scope doc="Turns highlighting off a node." ilk="function" name="unhighlight" signature="unhighlight(_silent)">
              <variable citdl="boolean" doc="optional, don&apos;t fire the highlightEvent" ilk="argument" name="_silent" />
            </scope>
            <scope doc="Checks whether all or part of the children of a node are highlighted and&#xA;sets the node highlight to full, none or partial highlight.&#xA;If set to propagate it will further call the parent" ilk="function" name="_childrenHighlighted" signature="_childrenHighlighted()" />
            <scope doc="Returns the div that was generated for this node&apos;s children" ilk="function" name="getChildrenEl" signature="getChildrenEl() =&gt; HTMLElement" />
            <scope doc="Removes the focus of previously selected Node" ilk="function" name="_removeFocus" signature="_removeFocus()" />
            <scope doc="Expands if node is collapsed, collapses otherwise." ilk="function" name="toggle" signature="toggle()" />
            <scope doc="Saves the value entered into the editor." ilk="function" name="saveEditorValue" signature="saveEditorValue(editorData) =&gt; false or none">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Count of nodes in a branch" ilk="function" name="getNodeCount" signature="getNodeCount() =&gt; int" />
            <scope doc="Hides this nodes children (creating them if necessary), changes the toggle style." ilk="function" name="collapse" signature="collapse()" />
            <scope doc="Returns the value(s) from the input element(s) .&#xA;Should be overridden by each node type." ilk="function" name="getEditorValue" signature="getEditorValue(editorData) =&gt; any">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Toggles the highlighted state of a Node" ilk="function" name="toggleHighlight" signature="toggleHighlight()" />
            <scope doc="Returns the markup for this node and its children." ilk="function" name="getHtml" signature="getHtml() =&gt; string" />
            <scope doc="Returns a node array of this node&apos;s siblings, null if none." ilk="function" name="getSiblings" signature="getSiblings() =&gt; " />
            <scope doc="Checks if this node has children.  If this node is lazy-loading and the&#xA;children have not been rendered, we do not know whether or not there&#xA;are actual children.  In most cases, we need to assume that there are&#xA;children (for instance, the toggle needs to show the expandable &#xA;presentation state).  In other times we want to know if there are rendered&#xA;children.  For the latter, &quot;checkForLazyLoad&quot; should be false." ilk="function" name="hasChildren" signature="hasChildren(checkForLazyLoad) =&gt; boolean">
              <variable citdl="boolean" doc="should we check for unloaded children?" ilk="argument" name="checkForLazyLoad" />
            </scope>
            <scope doc="Evaluates if this node&apos;s children should be loaded dynamically.  Looks for&#xA;the property both in this instance and the root node.  If the tree is&#xA;defined to load all children dynamically, the data callback function is&#xA;defined in the root node" ilk="function" name="isDynamic" signature="isDynamic() =&gt; boolean" />
            <scope doc="Returns this node&apos;s container html element" ilk="function" name="getEl" signature="getEl() =&gt; HTMLElement" />
            <scope doc="Load complete is the callback function we pass to the data provider&#xA;in dynamic load situations." ilk="function" name="loadComplete" signature="loadComplete()" />
            <scope doc="Initializes this node, gets some of the properties from the parent" ilk="function" name="init" signature="init(oData, oParent, expanded)">
              <variable citdl="object" doc="a string or object containing the data that will&#xA;be used to render this node" ilk="argument" name="oData" />
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="boolean" doc="the initial expanded/collapsed state" ilk="argument" name="expanded" />
            </scope>
            <scope doc="Appends this node to the supplied node&apos;s child collection" ilk="function" name="appendTo" signature="appendTo(parentNode) =&gt; Node">
              <variable citdl="Node" doc="the node to append to." ilk="argument" name="parentNode" />
            </scope>
            <scope doc="Returns the outer html element for this node&apos;s content" ilk="function" name="getContentEl" signature="getContentEl() =&gt; HTMLElement" />
            <scope doc="Shows this nodes children (creating them if necessary), changes the&#xA;toggle style, and collapses its siblings if multiExpand is not set." ilk="function" name="expand" signature="expand()" />
            <scope doc="Inserts this node after the supplied node" ilk="function" name="insertAfter" signature="insertAfter(node) =&gt; Node">
              <variable citdl="Node" doc="the node to insert after" ilk="argument" name="node" />
            </scope>
            <scope doc="Node toString" ilk="function" name="toString" signature="toString() =&gt; string" />
            <scope doc="Returns the id for this node&apos;s children div" ilk="function" name="getChildrenElId" signature="getChildrenElId() =&gt; string" />
            <scope doc="Returns the css class for the spacer at the specified depth for&#xA;this node.  If this node&apos;s ancestor at the specified depth&#xA;has a next sibling the presentation is different than if it&#xA;does not have a next sibling" ilk="function" name="getDepthStyle" signature="getDepthStyle(depth) =&gt; string">
              <variable citdl="int" doc="the depth of the ancestor." ilk="argument" name="depth" />
            </scope>
            <scope doc="Get the markup for the contents of the node.  This is designed to be overrided so that we can&#xA;support different types of nodes." ilk="function" name="getContentHtml" signature="getContentHtml() =&gt; string" />
            <scope doc="Recursively expands all of this node&apos;s children." ilk="function" name="expandAll" signature="expandAll()" />
            <scope doc="Returns the element that is being used for this node&apos;s toggle." ilk="function" name="getToggleEl" signature="getToggleEl() =&gt; HTMLElement" />
            <scope doc="Generates the link that will invoke this node&apos;s toggle method" ilk="function" name="getToggleLink" signature="getToggleLink() =&gt; string" />
            <scope doc="Inserts this node before this supplied node" ilk="function" name="insertBefore" signature="insertBefore(node) =&gt; Node">
              <variable citdl="Node" doc="the node to insert this node before" ilk="argument" name="node" />
            </scope>
            <scope doc="pops up the contents editor, if there is one and the node is declared editable" ilk="function" name="editNode" signature="editNode()" />
            <scope doc="Returns true if there are any elements in the node that can &#xA;accept the real actual browser focus" ilk="function" name="_canHaveFocus" signature="_canHaveFocus() =&gt; boolean" />
            <scope doc="Sets the focus on the node element.&#xA;It will only be able to set the focus on nodes that have anchor elements in it.  &#xA;Toggle or branch icons have anchors and can be focused on.  &#xA;If will fail in nodes that have no anchor" ilk="function" name="focus" signature="focus() =&gt; boolean" />
            <scope doc="Finally displays the newly edited value(s) in the tree.&#xA;Should be overridden by each node type." ilk="function" name="displayEditedValue" signature="displayEditedValue(value, editorData)">
              <variable citdl="any" doc="value to be displayed and stored in the node" ilk="argument" name="value" />
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Returns the css style name for the toggle" ilk="function" name="getStyle" signature="getStyle() =&gt; string" />
            <scope doc="Get the markup for the node.  This may be overrided so that we can&#xA;support different types of nodes." ilk="function" name="getNodeHtml" signature="getNodeHtml() =&gt; string" />
            <scope doc="Returns the current icon mode.  This refers to the way childless dynamic&#xA;load nodes appear (this comes into play only after the initial dynamic&#xA;load request produced no children)." ilk="function" name="getIconMode" signature="getIconMode() =&gt; int" />
            <scope doc="Changes the classNames on the toggle and content containers to reflect the current highlighting" ilk="function" name="_setHighlightClassName" signature="_setHighlightClassName()" />
            <scope doc="Hides this node&apos;s children" ilk="function" name="hideChildren" signature="hideChildren()" />
            <scope doc="Returns this node&apos;s ancestor at the specified depth." ilk="function" name="getAncestor" signature="getAncestor(depth) =&gt; Node">
              <variable citdl="int" doc="the depth of the ancestor." ilk="argument" name="depth" />
            </scope>
            <scope doc="Node-specific destroy function to empty the contents of the inline editor panel.&#xA;This function is the worst case alternative that will purge all possible events and remove the editor contents.&#xA;Method Event.purgeElement is somewhat costly so if it can be replaced by specifc Event.removeListeners, it is better to do so." ilk="function" name="destroyEditorContents" signature="destroyEditorContents(editorData)">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Shows this node&apos;s children" ilk="function" name="showChildren" signature="showChildren()" />
            <scope doc="Returns the id for this node&apos;s container div" ilk="function" name="getElId" signature="getElId() =&gt; string" />
            <scope doc="Evaluates if this node is the root node of the tree" ilk="function" name="isRoot" signature="isRoot() =&gt; boolean" />
            <scope doc="Placeholder for a function that should provide the inline node label editor.&#xA;Leaving it set to null will indicate that this node type is not editable.&#xA;It should be overridden by nodes that provide inline editing.&#xA;The Node-specific editing element (input box, textarea or whatever) should be inserted into editorData.inputContainer." ilk="function" name="fillEditorContainer" signature="fillEditorContainer(editorData) =&gt; ">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Called when we know we have all the child data." ilk="function" name="completeRender" signature="completeRender() =&gt; string" />
            <scope doc="Returns true if the Node is a child of supplied Node" ilk="function" name="isChildOf" signature="isChildOf(parentNode) =&gt; boolean">
              <variable citdl="Node" doc="the Node to check" ilk="argument" name="parentNode" />
            </scope>
            <scope doc="Called when first rendering the tree.  We always build the div that will&#xA;contain this nodes children, but we don&apos;t render the children themselves&#xA;unless this node is expanded." ilk="function" name="getChildrenHtml" signature="getChildrenHtml() =&gt; string" />
            <scope doc="Regenerates the html for this node and its children.  To be used when the&#xA;node is expanded and new children have been added." ilk="function" name="refresh" signature="refresh()" />
            <scope doc="Returns the id for this node&apos;s toggle element" ilk="function" name="getToggleElId" signature="getToggleElId() =&gt; string" />
            <scope doc="Returns an object which could be used to build a tree out of this node and its children.&#xA;It can be passed to the tree constructor to reproduce this node as a tree.&#xA;It will return false if the node or any children loads dynamically, regardless of whether it is loaded or not." ilk="function" name="getNodeDefinition" signature="getNodeDefinition() =&gt; Object | false" />
            <scope doc="Turns highlighting on node." ilk="function" name="highlight" signature="highlight(_silent)">
              <variable citdl="boolean" doc="optional, don&apos;t fire the highlightEvent" ilk="argument" name="_silent" />
            </scope>
            <scope doc="Generates the markup for the child nodes.  This is not done until the node&#xA;is expanded." ilk="function" name="renderChildren" signature="renderChildren() =&gt; string" />
            <scope doc="Returns the hover style for the icon" ilk="function" name="getHoverStyle" signature="getHoverStyle() =&gt; string" />
            <scope doc="Recursively collapses all of this node&apos;s children." ilk="function" name="collapseAll" signature="collapseAll()" />
            <scope doc="Certain properties for the node cannot be set until the parent&#xA;is known. This is called after the node is inserted into a tree.&#xA;the parent is also applied to this node&apos;s children in order to&#xA;make it possible to move a branch from one tree to another." ilk="function" name="applyParent" signature="applyParent(parentNode) =&gt; boolean">
              <variable citdl="Node" doc="this node&apos;s parent node" ilk="argument" name="parentNode" />
            </scope>
            <variable citdl="boolean" doc="This flag is set to true when the html is generated for this node&apos;s&#xA;children, and set to false when new children are added." name="childrenRendered" />
            <variable citdl="DOM element" doc="DOM element that actually got the browser focus" name="_focusedItem" />
            <variable citdl="Node" doc="This node&apos;s next sibling" name="nextSibling" />
            <variable citdl="boolean" doc="Should we render children for a collapsed node?  It is possible that the&#xA;implementer will want to render the hidden data...  @todo verify that we &#xA;need this, and implement it if we do." name="renderHidden" />
            <variable citdl="boolean" doc="Enables node highlighting.  If true, the node can be highlighted and/or propagate highlighting" name="enableHighlight" />
            <variable citdl="int" doc="Used to configure what happens when a dynamic load node is expanded&#xA;and we discover that it does not have children.  By default, it is&#xA;treated as if it still could have children (plus/minus icon).  Set&#xA;iconMode to have it display like a leaf node instead." name="iconMode" />
            <variable citdl="boolean" doc="This is true for dynamically loading nodes while waiting for the&#xA;callback to return." name="isLoading" />
            <variable citdl="boolean" doc="Specifies whether or not the content area of the node should be allowed&#xA;to wrap." name="nowrap" />
            <variable citdl="Node[]" doc="This node&apos;s child node collection." name="children" />
            <variable citdl="boolean" doc="Can multiple children be expanded at once?" name="multiExpand" />
            <variable citdl="int" doc="The index for this instance obtained from global counter in YAHOO.widget.TreeView." name="index" />
            <variable citdl="int" doc="The depth of this node.  We start at -1 for the root node." name="depth" />
            <variable citdl="boolean" doc="Tells whether highlighting will be propagated down to the children of the clicked node" name="propagateHighlightDown" />
            <variable citdl="boolean" doc="We can set the node up to call an external method to get the child&#xA;data dynamically." name="_dynLoad" />
            <variable citdl="Node" doc="This node&apos;s previous sibling" name="previousSibling" />
            <variable citdl="string" doc="The CSS class for the html content container.  Defaults to ygtvhtml, but &#xA;can be overridden to provide a custom presentation for a specific node." name="contentStyle" />
            <variable citdl="string" doc="The node type" name="_type" />
            <variable citdl="boolean" doc="Tells whether highlighting will be propagated up to the parents of the clicked node" name="propagateHighlightUp" />
            <variable citdl="Node" doc="Parent node" name="parent" />
            <variable citdl="integer" doc="Stores the highlight state.  Can be any of:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;0 - not highlighted&lt;/li&gt;&#xA;&lt;li&gt;1 - highlighted&lt;/li&gt;&#xA;&lt;li&gt;2 - some children highlighted&lt;/li&gt;&#xA;&lt;/ul&gt;" name="highlightState" />
            <variable citdl="function" doc="Function to execute when we need to get this node&apos;s child data." name="dataLoader" />
            <variable citdl="boolean" doc="Signals if the label is editable.  (Ignored on TextNodes with href set.)" name="editable" />
            <variable citdl="object" doc="The data linked to this node.  This can be any object or primitive&#xA;value, and the data can be used in getNodeHtml()." name="data" />
            <variable citdl="boolean" doc="Dynamically loaded nodes only fetch the data the first time they are&#xA;expanded.  This flag is set to true once the data has been fetched." name="dynamicLoadComplete" />
            <variable citdl="boolean" doc="If true, the node will alway be rendered as a leaf node.  This can be&#xA;used to override the presentation when dynamically loading the entire&#xA;tree.  Setting this to true also disables the dynamic load call for the&#xA;node." name="isLeaf" />
            <variable citdl="boolean" doc="The toggle/branch icon will not show if this is set to false.  This&#xA;could be useful if the implementer wants to have the child contain&#xA;extra info about the parent, rather than an actual node." name="hasIcon" />
            <variable citdl="string" doc="The generated id that will contain the data passed in by the implementer." name="contentElId" />
            <variable citdl="boolean" doc="The node&apos;s expanded/collapsed state" name="expanded" />
            <variable citdl="TreeView" doc="Tree instance this node is part of" name="tree" />
            <variable citdl="string" doc="User-defined className to be added to the Node" name="className" />
            <variable citdl="Array of DOM elements" doc="array of items that had the focus set on them&#xA;so that they can be cleaned when focus is lost" name="_focusHighlightedItems" />
          </scope>
          <scope classrefs="YAHOO.widget.Axis" doc="A type of axis whose units are measured in numeric values." ilk="class" name="NumericAxis">
            <scope attributes="__ctor__" doc="A type of axis whose units are measured in numeric values." ilk="function" name="NumericAxis" signature="NumericAxis()" />
            <variable citdl="String" doc="The scaling algorithm to use on this axis. May be &quot;linear&quot; or &quot;logarithmic&quot;." name="scale" />
            <variable citdl="Boolean" doc="Series that are stackable will only stack when this value is set to true." name="stackingEnabled" />
            <variable citdl="Boolean" doc="Indicates whether to factor in the size of the labels when calculating a major unit." name="calculateByLabelSize" />
            <variable citdl="Number" doc="The maximum value drawn by the axis. If not set explicitly, the axis maximum&#xA;will be calculated automatically." name="maximum" />
            <variable citdl="Boolean" doc="Indicates whether to extend maximum beyond data&apos;s maximum to the nearest &#xA;majorUnit." name="adjustMaximumByMajorUnit" />
            <variable citdl="Number" doc="The spacing between minor intervals on this axis." name="minorUnit" />
            <variable citdl="Number" doc="The minimum value drawn by the axis. If not set explicitly, the axis minimum&#xA;will be calculated automatically." name="minimum" />
            <variable citdl="Number" doc="The spacing between major intervals on this axis." name="majorUnit" />
            <variable citdl="Boolean" doc="Indicates whether to extend the minimum beyond data&apos;s minimum to the nearest&#xA;majorUnit." name="adjustMinimumByMajorUnit" />
            <variable citdl="Boolean" doc="If true, the labels, ticks, gridlines, and other objects will snap to&#xA;the nearest major or minor unit. If false, their position will be based&#xA;on the minimum value." name="snapToUnits" />
            <variable citdl="String" doc="Indicates the position of the axis relative to the chart" name="position" />
            <variable citdl="Boolean" doc="Indicates whether to round the major unit." name="roundMajorUnit" />
            <variable citdl="Boolean" doc="If true, and the bounds are calculated automatically, either the minimum or&#xA;maximum will be set to zero." name="alwaysShowZero" />
          </scope>
          <scope classrefs="YAHOO.widget.Module" doc="Overlay is a Module that is absolutely positioned above the page flow. It &#xA;has convenience methods for positioning and sizing, as well as options for &#xA;controlling zIndex and constraining the Overlay&apos;s position to the current &#xA;visible viewport. Overlay also contains a dynamicly generated IFRAME which &#xA;is placed beneath it for Internet Explorer 6 and 5.x so that it will be &#xA;properly rendered above SELECT elements." ilk="class" name="Overlay">
            <scope attributes="__ctor__" doc="Overlay is a Module that is absolutely positioned above the page flow. It &#xA;has convenience methods for positioning and sizing, as well as options for &#xA;controlling zIndex and constraining the Overlay&apos;s position to the current &#xA;visible viewport. Overlay also contains a dynamicly generated IFRAME which &#xA;is placed beneath it for Internet Explorer 6 and 5.x so that it will be &#xA;properly rendered above SELECT elements." ilk="function" name="Overlay" signature="Overlay(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Overlay &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing &#xA;the configuration that should be set for this Overlay. See configuration &#xA;documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Moves the Overlay to the specified position. This function is  &#xA;identical to calling this.cfg.setProperty(&quot;xy&quot;, [x,y]);" ilk="function" name="moveTo" signature="moveTo(x, y)">
              <variable citdl="Number" doc="The Overlay&apos;s new x position" ilk="argument" name="x" />
              <variable citdl="Number" doc="The Overlay&apos;s new y position" ilk="argument" name="y" />
            </scope>
            <scope doc="Sets the zindex of the iframe shim, if it exists, based on the zindex of&#xA;the Overlay element. The zindex of the iframe is set to be one less &#xA;than the Overlay element&apos;s zindex.&#xA;&lt;p&gt;NOTE: This method will not bump up the zindex of the Overlay element&#xA;to ensure that the iframe shim has a non-negative zindex.&#xA;If you require the iframe zindex to be 0 or higher, the zindex of &#xA;the Overlay element should be set to a value greater than 0, before &#xA;this method is called.&#xA;&lt;/p&gt;" ilk="function" name="stackIframe" signature="stackIframe()" />
            <scope doc="Shows the iframe shim, if it has been enabled." ilk="function" name="showIframe" signature="showIframe()" />
            <scope doc="The default event handler fired when the &quot;fixedcenter&quot; property &#xA;is changed." ilk="function" name="configFixedCenter" signature="configFixedCenter(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The DOM event handler used to fire the CustomEvent for window resize" ilk="function" name="YAHOO.widget.Overlay.windowResizeHandler" signature="YAHOO.widget.Overlay.windowResizeHandler(e)">
              <variable citdl="DOMEvent" doc="The DOM resize event" ilk="argument" name="e" />
            </scope>
            <scope doc="Adds a CSS class (&quot;show-scrollbars&quot;) and removes a CSS class &#xA;(&quot;hide-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X &#xA;(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)" ilk="function" name="showMacGeckoScrollbars" signature="showMacGeckoScrollbars()" />
            <scope doc="Shared implementation method for getConstrainedX and getConstrainedY.&#xA;&lt;p&gt;&#xA;Given a coordinate value, returns the calculated coordinate required to &#xA;position the Overlay if it is to be constrained to the viewport, based on the &#xA;current element size, viewport dimensions, scroll values and preventoverlap &#xA;settings&#xA;&lt;/p&gt;" ilk="function" name="_getConstrainedPos" signature="_getConstrainedPos(pos, The) =&gt; Number">
              <variable citdl="String" doc="The coordinate which needs to be constrained, either &quot;x&quot; or &quot;y&quot;" ilk="argument" name="pos" />
              <variable citdl="Number" doc="coordinate value which needs to be constrained" ilk="argument" name="The" />
            </scope>
            <scope doc="Adds a CSS class (&quot;hide-scrollbars&quot;) and removes a CSS class &#xA;(&quot;show-scrollbars&quot;) to the Overlay to fix a bug in Gecko on Mac OS X &#xA;(https://bugzilla.mozilla.org/show_bug.cgi?id=187435)" ilk="function" name="hideMacGeckoScrollbars" signature="hideMacGeckoScrollbars()" />
            <scope doc="Internal implementation to set the visibility of the overlay in the DOM." ilk="function" name="_setDomVisibility" signature="_setDomVisibility(visible)">
              <variable citdl="boolean" doc="Whether to show or hide the Overlay&apos;s outer element" ilk="argument" name="visible" />
            </scope>
            <scope doc="Initializes the custom events for Overlay which are fired  &#xA;automatically at appropriate times by the Overlay class." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Determines if the Overlay (including the offset value defined by Overlay.VIEWPORT_OFFSET) &#xA;will fit entirely inside the viewport, in both dimensions - width and height." ilk="function" name="fitsInViewport" signature="fitsInViewport() =&gt; " />
            <scope doc="Places the Overlay on top of all other instances of &#xA;YAHOO.widget.Overlay." ilk="function" name="bringToTop" signature="bringToTop()" />
            <scope doc="Utility method that subscribes or unsubscribes the given &#xA;function from the list of trigger events provided." ilk="function" name="_processTriggers" signature="_processTriggers(triggers, mode, fn)">
              <variable citdl="Array[String|CustomEvent]" doc="An array of either CustomEvents, event type strings &#xA;(e.g. &quot;beforeShow&quot;, &quot;windowScroll&quot;) to/from which the provided function should be &#xA;subscribed/unsubscribed respectively." ilk="argument" name="triggers" />
              <variable citdl="String" doc="Either &quot;subscribe&quot; or &quot;unsubscribe&quot;, specifying whether or not&#xA;we are subscribing or unsubscribing trigger listeners" ilk="argument" name="mode" />
              <variable citdl="Function" doc="The function to be subscribed/unsubscribed to/from the trigger event.&#xA;Context is always set to the overlay instance, and no additional object argument &#xA;get passed to the subscribed function." ilk="argument" name="fn" />
            </scope>
            <scope doc="The Overlay initialization method, which is executed for Overlay and  &#xA;all of its subclasses. This method is automatically called by the &#xA;constructor, and  sets up all DOM references for pre-existing markup, &#xA;and creates required markup if it is not already present." ilk="function" name="init" signature="init(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Overlay &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal &#xA;containing the configuration that should be set for this Overlay. &#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="The default event handler fired when the &quot;xy&quot; property is changed." ilk="function" name="configXY" signature="configXY(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Returns a String representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="&lt;p&gt;&#xA;Sets the height on the provided header, body or footer element to &#xA;fill out the height of the container. It determines the height of the &#xA;containers content box, based on it&apos;s configured height value, and &#xA;sets the height of the autofillheight element to fill out any &#xA;space remaining after the other standard module element heights &#xA;have been accounted for.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This method is not designed to work if an explicit &#xA;height has not been set on the container, since for an &quot;auto&quot; height container, &#xA;the heights of the header/body/footer will drive the height of the container.&lt;/p&gt;" ilk="function" name="fillHeight" signature="fillHeight(el)">
              <variable citdl="HTMLElement" doc="The element which should be resized to fill out the height&#xA;of the container element." ilk="argument" name="el" />
            </scope>
            <scope doc="Returns the sub-pixel height of the el, using getBoundingClientRect, if available,&#xA;otherwise returns the offsetHeight" ilk="function" name="_getPreciseHeight" signature="_getPreciseHeight(el) =&gt; Float">
              <variable citdl="HTMLElement" ilk="argument" name="el" />
            </scope>
            <scope doc="Hides the iframe shim, if it has been enabled." ilk="function" name="hideIframe" signature="hideIframe()" />
            <scope doc="The default event handler fired when the &quot;height&quot; property is changed." ilk="function" name="configHeight" signature="configHeight(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Given x, y coordinate values, returns the calculated coordinates required to &#xA;position the Overlay if it is to be constrained to the viewport, based on the &#xA;current element size, viewport dimensions and scroll values." ilk="function" name="getConstrainedXY" signature="getConstrainedXY(x, y) =&gt; Array">
              <variable citdl="Number" doc="The X coordinate value to be constrained" ilk="argument" name="x" />
              <variable citdl="Number" doc="The Y coordinate value to be constrained" ilk="argument" name="y" />
            </scope>
            <scope doc="The default event handler fired when the &quot;context&quot; property&#xA;is changed." ilk="function" name="configContext" signature="configContext(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Helper method, used to position the Overlap to prevent overlap with the &#xA;context element (used when preventcontextoverlap is enabled)" ilk="function" name="_preventOverlap" signature="_preventOverlap(pos, contextEl, overlaySize, viewportSize, docScroll) =&gt; Number">
              <variable citdl="String" doc="The coordinate to prevent overlap for, either &quot;x&quot; or &quot;y&quot;." ilk="argument" name="pos" />
              <variable citdl="HTMLElement" doc="The context element" ilk="argument" name="contextEl" />
              <variable citdl="Number" doc="The related overlay dimension value (for &quot;x&quot;, the width, for &quot;y&quot;, the height)" ilk="argument" name="overlaySize" />
              <variable citdl="Number" doc="The related viewport dimension value (for &quot;x&quot;, the width, for &quot;y&quot;, the height)" ilk="argument" name="viewportSize" />
              <variable citdl="Object" doc="The related document scroll value (for &quot;x&quot;, the scrollLeft, for &quot;y&quot;, the scrollTop)" ilk="argument" name="docScroll" />
            </scope>
            <scope doc="Event handler fired when the resize monitor element is resized." ilk="function" name="onDomResize" signature="onDomResize(e, obj)">
              <variable citdl="DOMEvent" doc="The resize DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The scope object" ilk="argument" name="obj" />
            </scope>
            <scope doc="The default event handler fired when the &quot;autofillheight&quot; property is changed." ilk="function" name="configAutoFillHeight" signature="configAutoFillHeight(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The default event handler fired when the &quot;zIndex&quot; property is changed." ilk="function" name="configzIndex" signature="configzIndex(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The default event handler fired when the &quot;visible&quot; property is &#xA;changed.  This method is responsible for firing showEvent&#xA;and hideEvent." ilk="function" name="configVisible" signature="configVisible(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="autofillheight validator. Verifies that the autofill value is either null &#xA;or one of the strings : &quot;body&quot;, &quot;header&quot; or &quot;footer&quot;." ilk="function" name="_validateAutoFillHeight" signature="_validateAutoFillHeight(val) =&gt; ">
              <variable citdl="String" ilk="argument" name="val" />
            </scope>
            <scope doc="Custom Event handler for context alignment triggers. Invokes the align method" ilk="function" name="_alignOnTrigger" signature="_alignOnTrigger(type, args)">
              <variable citdl="String" doc="The event type (not used by the default implementation)" ilk="argument" name="type" />
              <variable citdl="Any[]" doc="The array of arguments for the trigger event (not used by the default implementation)" ilk="argument" name="args" />
            </scope>
            <scope doc="The default event handler fired when the &quot;width&quot; property is changed." ilk="function" name="configWidth" signature="configWidth(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Removes the Overlay element from the DOM and sets all child &#xA;elements to null." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="The default event handler fired when the &quot;x&quot; property is changed." ilk="function" name="configX" signature="configX(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Can be used to force the container to repaint/redraw it&apos;s contents.&#xA;&lt;p&gt;&#xA;By default applies and then removes a 1px bottom margin through the &#xA;application/removal of a &quot;yui-force-redraw&quot; class.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;It is currently used by Overlay to force a repaint for webkit &#xA;browsers, when centering.&#xA;&lt;/p&gt;" ilk="function" name="forceContainerRedraw" signature="forceContainerRedraw()" />
            <scope doc="Set&apos;s the container&apos;s XY value from DOM if not already set.&#xA;Differs from syncPosition, in that the XY value is only sync&apos;d with DOM if &#xA;not already set. The method also refire&apos;s the XY config property event, so any&#xA;beforeMove, Move event listeners are invoked." ilk="function" name="_primeXYFromDOM" signature="_primeXYFromDOM()" />
            <scope doc="The default event handler fired when the &quot;constraintoviewport&quot; &#xA;property is changed." ilk="function" name="configConstrainToViewport" signature="configConstrainToViewport(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for &#xA;the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The DOM event handler used to fire the CustomEvent for window scroll" ilk="function" name="YAHOO.widget.Overlay.windowScrollHandler" signature="YAHOO.widget.Overlay.windowScrollHandler(e)">
              <variable citdl="DOMEvent" doc="The DOM scroll event" ilk="argument" name="e" />
            </scope>
            <scope doc="Centers the container in the viewport." ilk="function" name="center" signature="center()" />
            <scope doc="The default custom event handler executed when the overlay&apos;s height is changed, &#xA;if the autofillheight property has been set." ilk="function" name="_autoFillOnHeightChange" signature="_autoFillOnHeightChange(type, args, el)">
              <variable citdl="String" doc="The event type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The array of arguments passed to event subscribers" ilk="argument" name="args" />
              <variable citdl="HTMLElement" doc="The header, body or footer element which is to be resized to fill&#xA;out the containers height" ilk="argument" name="el" />
            </scope>
            <scope doc="Aligns the Overlay to its context element using the specified corner &#xA;points (represented by the constants TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, &#xA;and BOTTOM_RIGHT." ilk="function" name="align" signature="align(elementAlign, contextAlign, xyOffset)">
              <variable citdl="String" doc="The String representing the corner of &#xA;the Overlay that should be aligned to the context element" ilk="argument" name="elementAlign" />
              <variable citdl="String" doc="The corner of the context element &#xA;that the elementAlign corner should stick to." ilk="argument" name="contextAlign" />
              <variable citdl="Number[]" doc="Optional. A 2 element array specifying the x and y pixel offsets which should be applied&#xA;after aligning the element and context corners. For example, passing in [5, -10] for this value, would offset the &#xA;Overlay by 5 pixels along the X axis (horizontally) and -10 pixels along the Y axis (vertically) after aligning the specified corners." ilk="argument" name="xyOffset" />
            </scope>
            <scope doc="Syncronizes the size and position of iframe shim to that of its &#xA;corresponding Overlay instance." ilk="function" name="syncIframe" signature="syncIframe()" />
            <scope doc="The default event handler fired when the &quot;iframe&quot; property is changed." ilk="function" name="configIframe" signature="configIframe(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Determines the content box height of the given element (height of the element, without padding or borders) in pixels." ilk="function" name="_getComputedHeight" signature="_getComputedHeight(el) =&gt; Number">
              <variable citdl="HTMLElement" doc="The element for which the content height needs to be determined" ilk="argument" name="el" />
            </scope>
            <scope doc="The default event handler fired when the &quot;y&quot; property is changed." ilk="function" name="configY" signature="configY(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Helper method to locate the custom event instance for the event name string&#xA;passed in. As a convenience measure, any custom events passed in are returned." ilk="function" name="_findTriggerCE" signature="_findTriggerCE(t)">
              <variable citdl="String|CustomEvent" doc="Either a CustomEvent, or event type (e.g. &quot;windowScroll&quot;) for which a &#xA;custom event instance needs to be looked up from the Overlay._TRIGGER_MAP." ilk="argument" name="t" />
            </scope>
            <scope doc="Given y coordinate value, returns the calculated y coordinate required to &#xA;position the Overlay if it is to be constrained to the viewport, based on the &#xA;current element size, viewport dimensions and scroll values." ilk="function" name="getConstrainedY" signature="getConstrainedY(y) =&gt; Number">
              <variable citdl="Number" doc="The Y coordinate value to be constrained" ilk="argument" name="y" />
            </scope>
            <scope doc="Given x coordinate value, returns the calculated x coordinate required to &#xA;position the Overlay if it is to be constrained to the viewport, based on the &#xA;current element size, viewport dimensions and scroll values." ilk="function" name="getConstrainedX" signature="getConstrainedX(x) =&gt; Number">
              <variable citdl="Number" doc="The X coordinate value to be constrained" ilk="argument" name="x" />
            </scope>
            <scope doc="Synchronizes the Panel&apos;s &quot;xy&quot;, &quot;x&quot;, and &quot;y&quot; properties with the &#xA;Panel&apos;s position in the DOM. This is primarily used to update  &#xA;position information during drag &amp; drop." ilk="function" name="syncPosition" signature="syncPosition()" />
            <scope doc="Fixed center event handler used for centering on scroll/resize, but only if &#xA;the overlay is visible and, if &quot;fixedcenter&quot; is set to &quot;contained&quot;, only if &#xA;the overlay fits within the viewport." ilk="function" name="doCenterOnDOMEvent" signature="doCenterOnDOMEvent()" />
            <scope doc="The default event handler executed when the moveEvent is fired, if the &#xA;&quot;constraintoviewport&quot; is set to true." ilk="function" name="enforceConstraints" signature="enforceConstraints(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be changed &#xA;using the Overlay&apos;s Config object (cfg)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <variable citdl="Boolean" doc="A boolean that indicated whether the window resize and scroll events have &#xA;already been subscribed to." name="YAHOO.widget.Overlay._initialized" />
            <variable citdl="String" doc="Constant representing the default CSS class used for an Overlay iframe shim." name="YAHOO.widget.Overlay.CSS_IFRAME" />
            <variable citdl="RegExp" doc="Constant representing the names of the standard module elements&#xA;used in the overlay." name="YAHOO.widget.Overlay.STD_MOD_RE" />
            <variable citdl="String" doc="The URL that will be placed in the iframe" name="YAHOO.widget.Overlay.IFRAME_SRC" />
            <variable citdl="String" doc="Constant representing the default hidden CSS class used for an Overlay. This class is &#xA;applied to the overlay&apos;s outer DIV whenever it&apos;s hidden." name="YAHOO.widget.Overlay.CSS_HIDDEN" />
            <variable citdl="Array" doc="&lt;p&gt;&#xA;Array of default event types which will trigger&#xA;context alignment for the Overlay class.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;The array is empty by default for Overlay,&#xA;but maybe populated in future releases, so classes extending&#xA;Overlay which need to define their own set of CONTEXT_TRIGGERS&#xA;should concatenate their super class&apos;s prototype.CONTEXT_TRIGGERS &#xA;value with their own array of values.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;E.g.:&#xA;&lt;code&gt;CustomOverlay.prototype.CONTEXT_TRIGGERS = YAHOO.widget.Overlay.prototype.CONTEXT_TRIGGERS.concat([&quot;windowScroll&quot;]);&lt;/code&gt;&#xA;&lt;/p&gt;" name="CONTEXT_TRIGGERS" />
            <variable citdl="Object" doc="Internal map of special event types, which are provided&#xA;by the instance. It maps the event type to the custom event &#xA;instance. Contains entries for the &quot;windowScroll&quot;, &quot;windowResize&quot; and&#xA;&quot;textResize&quot; static container events." name="YAHOO.widget.Overlay._TRIGGER_MAP" />
            <variable citdl="String" doc="Constant representing the default CSS class used for an Overlay" name="YAHOO.widget.Overlay.CSS_OVERLAY" />
            <variable citdl="String" doc="Constant representing the bottom right corner of an element, used for &#xA;configuring the context element alignment" name="YAHOO.widget.Overlay.BOTTOM_RIGHT" />
            <variable citdl="Object" doc="Constant representing the name of the Overlay&apos;s events" name="EVENT_TYPES" />
            <variable citdl="Number" doc="Number representing the minimum distance an Overlay instance should be &#xA;positioned relative to the boundaries of the browser&apos;s viewport, in pixels." name="YAHOO.widget.Overlay.VIEWPORT_OFFSET" />
            <variable citdl="String" doc="Constant representing the top right corner of an element, used for &#xA;configuring the context element alignment" name="YAHOO.widget.Overlay.TOP_RIGHT" />
            <variable citdl="String" doc="Constant representing the top left corner of an element, used for &#xA;configuring the context element alignment" name="YAHOO.widget.Overlay.TOP_LEFT" />
            <variable citdl="Object" doc="Constant representing the Overlay&apos;s configuration properties" name="DEFAULT_CONFIG" />
            <variable citdl="String" doc="Constant representing the top bottom left corner of an element, used for &#xA;configuring the context element alignment" name="YAHOO.widget.Overlay.BOTTOM_LEFT" />
          </scope>
          <scope doc="OverlayManager is used for maintaining the focus status of &#xA;multiple Overlays." ilk="class" name="OverlayManager">
            <scope attributes="__ctor__" doc="OverlayManager is used for maintaining the focus status of &#xA;multiple Overlays." ilk="function" name="OverlayManager" signature="OverlayManager(overlays, userConfig)">
              <variable citdl="Array" doc="Optional. A collection of Overlays to register &#xA;with the manager." ilk="argument" name="overlays" />
              <variable citdl="Object" doc="The object literal representing the user &#xA;configuration of the OverlayManager" ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Removes focus from all registered Overlays in the manager" ilk="function" name="blurAll" signature="blurAll()" />
            <scope doc="Focuses the specified Overlay" ilk="function" name="focus" signature="focus(overlay, overlay)">
              <variable citdl="Overlay" doc="The Overlay to focus" ilk="argument" name="overlay" />
              <variable citdl="String" doc="The id of the Overlay to focus" ilk="argument" name="overlay" />
            </scope>
            <scope doc="Subscribes to the Overlay based instance&apos;s blurEvent to allow the OverlayManager to&#xA;monitor blur state.&#xA;If the instance already has a blurEvent (e.g. Menu), OverlayManager will subscribe &#xA;to the existing blurEvent, however if a blurEvent or blur method does not exist&#xA;on the instance, the _bindBlur method will add them, and the blur method &#xA;update the OverlayManager&apos;s state directly." ilk="function" name="_bindBlur" signature="_bindBlur(overlay)">
              <variable citdl="Overlay" doc="The overlay for which blur needs to be managed" ilk="argument" name="overlay" />
            </scope>
            <scope doc="Updates the state of the OverlayManager and overlay, as a result of the overlay&#xA;being blurred." ilk="function" name="_manageBlur" signature="_manageBlur(overlay)">
              <variable citdl="Overlay" doc="The overlay instance which got blurred." ilk="argument" name="overlay" />
            </scope>
            <scope doc="blurEvent Handler, used to delegate to _manageBlur with the correct arguments." ilk="function" name="_onOverlayBlurHandler" signature="_onOverlayBlurHandler(p_sType, p_aArgs, p_oOverlay)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="Overlay" doc="Object representing the overlay that &#xA;fired the event." ilk="argument" name="p_oOverlay" />
            </scope>
            <scope doc="Updates the state of the OverlayManager and overlay, as a result of the overlay &#xA;receiving focus." ilk="function" name="_manageFocus" signature="_manageFocus(overlay)">
              <variable citdl="Overlay" doc="The overlay instance which got focus." ilk="argument" name="overlay" />
            </scope>
            <scope doc="Attempts to locate an Overlay by instance or ID." ilk="function" name="find" signature="find(overlay, overlay) =&gt; Overlay">
              <variable citdl="Overlay" doc="An Overlay to locate within the manager" ilk="argument" name="overlay" />
              <variable citdl="String" doc="An Overlay id to locate within the manager" ilk="argument" name="overlay" />
            </scope>
            <scope doc="Places the specified Overlay instance on top of all other &#xA;Overlay instances." ilk="function" name="bringToTop" signature="bringToTop(p_oOverlay, p_oOverlay)">
              <variable citdl="YAHOO.widget.Overlay" doc="Object representing an &#xA;Overlay instance." ilk="argument" name="p_oOverlay" />
              <variable citdl="String" doc="String representing the id of an &#xA;Overlay instance." ilk="argument" name="p_oOverlay" />
            </scope>
            <scope doc="Initializes the OverlayManager" ilk="function" name="init" signature="init(overlays, userConfig)">
              <variable citdl="Overlay[]" doc="Optional. A collection of Overlays to &#xA;register with the manager." ilk="argument" name="overlays" />
              <variable citdl="Object" doc="The object literal representing the user &#xA;configuration of the OverlayManager" ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Returns the currently focused Overlay" ilk="function" name="getActive" signature="getActive() =&gt; Overlay" />
            <scope doc="Subscribes to the Overlay based instance focusEvent, to allow the OverlayManager to&#xA;monitor focus state.&#xA;If the instance already has a focusEvent (e.g. Menu), OverlayManager will subscribe &#xA;to the existing focusEvent, however if a focusEvent or focus method does not exist&#xA;on the instance, the _bindFocus method will add them, and the focus method will &#xA;update the OverlayManager&apos;s state directly." ilk="function" name="_bindFocus" signature="_bindFocus(overlay)">
              <variable citdl="Overlay" doc="The overlay for which focus needs to be managed" ilk="argument" name="overlay" />
            </scope>
            <scope doc="&quot;destroy&quot; event handler for the Overlay." ilk="function" name="_onOverlayDestroy" signature="_onOverlayDestroy(p_sType, p_aArgs, p_oOverlay)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="Overlay" doc="Object representing the overlay that &#xA;fired the event." ilk="argument" name="p_oOverlay" />
            </scope>
            <scope doc="Subscribes to the Overlay based instance&apos;s destroyEvent, to allow the Overlay&#xA;to be removed for the OverlayManager when destroyed." ilk="function" name="_bindDestroy" signature="_bindDestroy(overlay)">
              <variable citdl="Overlay" doc="The overlay instance being managed" ilk="argument" name="overlay" />
            </scope>
            <scope doc="Hides all Overlays in the manager." ilk="function" name="hideAll" signature="hideAll()" />
            <scope doc="Ensures the zIndex configuration property on the managed overlay based instance&#xA;is set to the computed zIndex value from the DOM (with &quot;auto&quot; translating to 0)." ilk="function" name="_syncZIndex" signature="_syncZIndex(overlay)">
              <variable citdl="Overlay" doc="The overlay instance being managed" ilk="argument" name="overlay" />
            </scope>
            <scope doc="Shows all Overlays in the manager." ilk="function" name="showAll" signature="showAll()" />
            <scope doc="focusEvent Handler, used to delegate to _manageFocus with the correct arguments." ilk="function" name="_onOverlayFocusHandler" signature="_onOverlayFocusHandler(p_sType, p_aArgs, p_oOverlay)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
              <variable citdl="Overlay" doc="Object representing the overlay that &#xA;fired the event." ilk="argument" name="p_oOverlay" />
            </scope>
            <scope doc="Registers an Overlay or an array of Overlays with the manager. Upon &#xA;registration, the Overlay receives functions for focus and blur, &#xA;along with CustomEvents for each." ilk="function" name="register" signature="register(overlay, overlay) =&gt; boolean">
              <variable citdl="Overlay" doc="An Overlay to register with the manager." ilk="argument" name="overlay" />
              <variable citdl="Overlay[]" doc="An array of Overlays to register with &#xA;the manager." ilk="argument" name="overlay" />
            </scope>
            <scope doc="Removes the specified Overlay from the manager" ilk="function" name="remove" signature="remove(overlay, overlay)">
              <variable citdl="Overlay" doc="The Overlay to remove" ilk="argument" name="overlay" />
              <variable citdl="String" doc="The id of the Overlay to remove" ilk="argument" name="overlay" />
            </scope>
            <scope doc="Used for sorting the manager&apos;s Overlays by z-index." ilk="function" name="compareZIndexDesc" signature="compareZIndexDesc() =&gt; Number" />
            <scope doc="Event handler for the DOM event that is used to focus &#xA;the Overlay instance as specified by the &quot;focusevent&quot; &#xA;configuration property." ilk="function" name="_onOverlayElementFocus" signature="_onOverlayElementFocus(p_oEvent)">
              <variable citdl="Event" doc="Object representing the DOM event &#xA;object passed back by the event utility (Event)." ilk="argument" name="p_oEvent" />
            </scope>
            <scope doc="Initializes the default configuration of the OverlayManager" ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <variable citdl="Config" doc="The OverlayManager&apos;s Config object used for monitoring &#xA;configuration properties." name="cfg" />
            <variable citdl="YAHOO.widget.Overlay" doc="The currently activated Overlay" name="activeOverlay" />
            <variable citdl="Function" doc="The class&apos;s constructor function" name="contructor" />
            <variable citdl="YAHOO.widget.Overlay[]" doc="The array of Overlays that are currently registered" name="overlays" />
            <variable citdl="String" doc="The CSS class representing a focused Overlay" name="OverlayManager.CSS_FOCUSED" />
          </scope>
          <scope doc="Instantiate a Paginator, passing a configuration object to the contructor.&#xA;The configuration object should contain the following properties:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;rowsPerPage : &lt;em&gt;n&lt;/em&gt; (int)&lt;/li&gt;&#xA;&lt;li&gt;totalRecords : &lt;em&gt;n&lt;/em&gt; (int or Paginator.VALUE_UNLIMITED)&lt;/li&gt;&#xA;&lt;li&gt;containers : &lt;em&gt;id | el | arr&lt;/em&gt; (HTMLElement reference, its id, or an array of either)&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="class" name="Paginator">
            <scope attributes="__ctor__" doc="Instantiate a Paginator, passing a configuration object to the contructor.&#xA;The configuration object should contain the following properties:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;rowsPerPage : &lt;em&gt;n&lt;/em&gt; (int)&lt;/li&gt;&#xA;&lt;li&gt;totalRecords : &lt;em&gt;n&lt;/em&gt; (int or Paginator.VALUE_UNLIMITED)&lt;/li&gt;&#xA;&lt;li&gt;containers : &lt;em&gt;id | el | arr&lt;/em&gt; (HTMLElement reference, its id, or an array of either)&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" name="Paginator" signature="Paginator(config)">
              <variable citdl="Object" doc="Object literal to set instance and ui component&#xA;configuration." ilk="argument" name="config" />
            </scope>
            <scope doc="Render the pagination controls per the format attribute into the&#xA;specified container nodes." ilk="function" name="render" signature="render() =&gt; " />
            <scope doc="Get the number of rows per page." ilk="function" name="getRowsPerPage" signature="getRowsPerPage() =&gt; number" />
            <scope doc="Creates the individual ui components and renders them into a container." ilk="function" name="_renderTemplate" signature="_renderTemplate(container, template, id_base, hide)">
              <variable citdl="HTMLElement" doc="where to add the ui components" ilk="argument" name="container" />
              <variable citdl="String" doc="the template to use as a guide for rendering" ilk="argument" name="template" />
              <variable citdl="String" doc="id base for the container&apos;s ui components" ilk="argument" name="id_base" />
              <variable citdl="Boolean" doc="leave the container hidden after assembly" ilk="argument" name="hide" />
            </scope>
            <scope doc="Get the total number of records." ilk="function" name="getTotalRecords" signature="getTotalRecords() =&gt; number" />
            <scope doc="Get the page number of the previous page, or null if the current page&#xA;is the first page." ilk="function" name="getPreviousPage" signature="getPreviousPage() =&gt; number" />
            <scope doc="Get the total number of pages in the data set according to the current&#xA;rowsPerPage and totalRecords values.  If totalRecords is not set, or&#xA;set to YAHOO.widget.Paginator.VALUE_UNLIMITED, returns&#xA;YAHOO.widget.Paginator.VALUE_UNLIMITED." ilk="function" name="getTotalPages" signature="getTotalPages() =&gt; number" />
            <scope doc="Convenience method to facilitate setting state attributes rowsPerPage,&#xA;totalRecords, recordOffset in batch.  Also supports calculating&#xA;recordOffset from state.page if state.recordOffset is not provided.&#xA;Fires only a single pageChange event, if appropriate.&#xA;This will not fire a changeRequest event." ilk="function" name="setState" signature="setState(state)">
              <variable citdl="Object" doc="Object literal of attribute:value pairs to set" ilk="argument" name="state" />
            </scope>
            <scope doc="Hides the containers if there is only one page of data and attribute&#xA;alwaysVisible is false.  Conversely, it displays the containers if either&#xA;there is more than one page worth of data or alwaysVisible is turned on." ilk="function" name="updateVisibility" signature="updateVisibility()" />
            <scope doc="Subscribes to instance attribute change events to automate certain&#xA;behaviors." ilk="function" name="_selfSubscribe" signature="_selfSubscribe()" />
            <scope doc="Initialize this instance&apos;s CustomEvents." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Fires a pageChange event in the form of a standard attribute change&#xA;event with additional properties prevState and newState." ilk="function" name="_firePageChange" signature="_firePageChange(state)">
              <variable citdl="Object" doc="the result of getState(oldState)" ilk="argument" name="state" />
            </scope>
            <scope doc="Move the record offset to a new starting index.  This will likely cause&#xA;the calculated current page to change.  You should probably use setPage." ilk="function" name="setStartIndex" signature="setStartIndex(offset, silent)">
              <variable citdl="number" doc="the new record offset" ilk="argument" name="offset" />
              <variable citdl="boolean" doc="whether to forcibly avoid firing the changeRequest event" ilk="argument" name="silent" />
            </scope>
            <scope doc="Removes controls from the page and unhooks events." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Initialize registered ui components onto this instance." ilk="function" name="initUIComponents" signature="initUIComponents()" />
            <scope doc="Get an object literal describing the current state of the paginator.  If&#xA;an object literal of proposed values is passed, the proposed state will&#xA;be returned as an object literal with the following keys:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;paginator - instance of the Paginator&lt;/li&gt;&#xA;&lt;li&gt;page - number&lt;/li&gt;&#xA;&lt;li&gt;totalRecords - number&lt;/li&gt;&#xA;&lt;li&gt;recordOffset - number&lt;/li&gt;&#xA;&lt;li&gt;rowsPerPage - number&lt;/li&gt;&#xA;&lt;li&gt;records - [ start_index, end_index ]&lt;/li&gt;&#xA;&lt;li&gt;before - (OPTIONAL) { state object literal for current state }&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="function" name="getState" signature="getState(changes) =&gt; object">
              <variable citdl="object" doc="OPTIONAL object literal with proposed values&#xA;Supported change keys include:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;rowsPerPage&lt;/li&gt;&#xA;&lt;li&gt;totalRecords&lt;/li&gt;&#xA;&lt;li&gt;recordOffset OR&lt;/li&gt;&#xA;&lt;li&gt;page&lt;/li&gt;&#xA;&lt;/ul&gt;" ilk="argument" name="changes" />
            </scope>
            <scope doc="Is there a page before the current page?" ilk="function" name="hasPreviousPage" signature="hasPreviousPage() =&gt; boolean" />
            <scope doc="Get the index of the first record on the current page" ilk="function" name="getStartIndex" signature="getStartIndex() =&gt; number" />
            <scope doc="Set the total number of records." ilk="function" name="setTotalRecords" signature="setTotalRecords(total, silent)">
              <variable citdl="number" doc="the new total number of records" ilk="argument" name="total" />
              <variable citdl="boolean" doc="whether to forcibly avoid firing the changeRequest event" ilk="argument" name="silent" />
            </scope>
            <scope doc="Does the requested page have any records?" ilk="function" name="hasPage" signature="hasPage(page) =&gt; boolean">
              <variable citdl="number" doc="the page in question" ilk="argument" name="page" />
            </scope>
            <scope doc="Set the number of rows per page." ilk="function" name="setRowsPerPage" signature="setRowsPerPage(rpp, silent)">
              <variable citdl="number" doc="the new number of rows per page" ilk="argument" name="rpp" />
              <variable citdl="boolean" doc="whether to forcibly avoid firing the&#xA;changeRequest event" ilk="argument" name="silent" />
            </scope>
            <scope doc="Set the current page to the provided page number if possible." ilk="function" name="setPage" signature="setPage(newPage, silent)">
              <variable citdl="number" doc="the new page number" ilk="argument" name="newPage" />
              <variable citdl="boolean" doc="whether to forcibly avoid firing the&#xA;changeRequest event" ilk="argument" name="silent" />
            </scope>
            <scope doc="Are there records on the next page?" ilk="function" name="hasNextPage" signature="hasNextPage() =&gt; boolean" />
            <scope doc="Get the page number corresponding to the current record offset." ilk="function" name="getCurrentPage" signature="getCurrentPage() =&gt; number" />
            <scope doc="Sets recordOffset to the starting index of the previous page when&#xA;totalRecords is reduced below the current recordOffset." ilk="function" name="_syncRecordOffset" signature="_syncRecordOffset(e)">
              <variable citdl="Event" doc="totalRecordsChange event" ilk="argument" name="e" />
            </scope>
            <scope doc="Fires the pageChange event when the state attributes have changed in&#xA;such a way as to locate the current recordOffset on a new page." ilk="function" name="_handleStateChange" signature="_handleStateChange(e)">
              <variable citdl="Event" doc="the attribute change event" ilk="argument" name="e" />
            </scope>
            <scope doc="Similar to YAHOO.lang.isNumber, but allows numeric strings.  This is&#xA;is used for attribute validation in conjunction with getters that return&#xA;numbers." ilk="function" name="Paginator.isNumeric" signature="Paginator.isNumeric(v)">
              <variable citdl="Number|String" doc="value to be checked for number or numeric string" ilk="argument" name="v" />
            </scope>
            <scope doc="Initialize the Paginator&apos;s attributes (see YAHOO.util.Element class&#xA;AttributeProvider)." ilk="function" name="initConfig" signature="initConfig()" />
            <scope doc="Get the configured container nodes" ilk="function" name="getContainerNodes" signature="getContainerNodes() =&gt; Array" />
            <scope doc="Get the start and end record indexes of the specified page." ilk="function" name="getPageRecords" signature="getPageRecords(page) =&gt; Array">
              <variable citdl="number" doc="(optional) The page (current page if not specified)" ilk="argument" name="page" />
            </scope>
            <scope doc="Get the page number of the next page, or null if the current page is the&#xA;last page." ilk="function" name="getNextPage" signature="getNextPage() =&gt; number" />
            <scope doc="Replaces a marker node with a rendered UI component, determined by the&#xA;yui-pg-ui-(UI component class name) in the marker&apos;s className. e.g.&#xA;yui-pg-ui-PageLinks =&gt; new YAHOO.widget.Paginator.ui.PageLinks(this)" ilk="function" name="renderUIComponent" signature="renderUIComponent(marker, id_base)">
              <variable citdl="HTMLElement" doc="the marker node to replace" ilk="argument" name="marker" />
              <variable citdl="String" doc="string base the component&apos;s generated id" ilk="argument" name="id_base" />
            </scope>
            <scope doc="Return a number or null from input" ilk="function" name="Paginator.toNumber" signature="Paginator.toNumber(n) =&gt; ">
              <variable citdl="Number|String" doc="a number or numeric string" ilk="argument" name="n" />
            </scope>
            <variable citdl="boolean" doc="Used by setState to indicate when a page change has occurred" name="_pageChanged" />
            <variable citdl="string" doc="Default template used by Paginator instances.  Update this if you want&#xA;all new Paginators to use a different default template." name="Paginator.TEMPLATE_DEFAULT" />
            <variable citdl="string" doc="Common alternate pagination format, including page links, links for&#xA;previous, next, first and last pages as well as a rows-per-page&#xA;dropdown.  Offered as a convenience." name="Paginator.TEMPLATE_ROWS_PER_PAGE" />
            <variable citdl="boolean" doc="Flag used to indicate multiple attributes are being updated via setState" name="_batch" />
            <variable citdl="Array(HTMLElement)" doc="Array of nodes in which to render pagination controls.  This is set via&#xA;the &amp;quot;containers&amp;quot; attribute." name="_containers" />
            <variable citdl="number" doc="Incrementing index used to give instances unique ids." name="Paginator.id" />
            <variable citdl="Object" doc="Temporary state cache used by setState to keep track of the previous&#xA;state for eventual pageChange event firing" name="_state" />
            <variable doc="Storage object for UI Components" name="Paginator.ui" />
            <variable citdl="number" doc="Used to identify unset, optional configurations, or used explicitly in&#xA;the case of totalRecords to indicate unlimited pagination." name="Paginator.VALUE_UNLIMITED" />
            <variable citdl="string" doc="Base of id strings used for ui components." name="Paginator.ID_BASE" />
            <scope ilk="namespace" name="ui">
              <scope doc="ui Component to generate the textual report of current pagination status.&#xA;E.g. &quot;Now viewing page 1 of 13&quot;." ilk="class" name="CurrentPageReport">
                <scope attributes="__ctor__" doc="ui Component to generate the textual report of current pagination status.&#xA;E.g. &quot;Now viewing page 1 of 13&quot;." ilk="function" name="CurrentPageReport" signature="CurrentPageReport(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Removes the link/span node and clears event listeners&#xA;removal." ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(p)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
                </scope>
                <scope doc="Replace place holders in a string with the named values found in an&#xA;object literal." ilk="function" name="sprintf" signature="sprintf(template, values) =&gt; string">
                  <variable citdl="string" doc="The content string containing place holders" ilk="argument" name="template" />
                  <variable citdl="object" doc="The key:value pairs used to replace the place holders" ilk="argument" name="values" />
                </scope>
                <scope doc="Generate the span containing info formatted per the pageReportTemplate&#xA;attribute." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Regenerate the content of the span if appropriate. Calls&#xA;CurrentPageReport.sprintf with the value of the pageReportTemplate&#xA;attribute and the value map returned from pageReportValueGenerator&#xA;function." ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <variable citdl="HTMLElement" doc="Span node containing the formatted info" name="span" />
              </scope>
              <scope doc="ui Component to generate the link to jump to the first page." ilk="class" name="FirstPageLink">
                <scope attributes="__ctor__" doc="ui Component to generate the link to jump to the first page." ilk="function" name="FirstPageLink" signature="FirstPageLink(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Removes the link/span node and clears event listeners&#xA;removal." ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(p)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
                </scope>
                <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Swap the link and span nodes if appropriate." ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Listener for the link&apos;s onclick event.  Pass new value to setPage method." ilk="function" name="onClick" signature="onClick(e)">
                  <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
                </scope>
                <variable citdl="HTMLElement" doc="The currently placed HTMLElement node" name="current" />
                <variable citdl="HTMLElement" doc="Link node" name="link" />
                <variable citdl="HTMLElement" doc="Span node (inactive link)" name="span" />
              </scope>
              <scope doc="ui Component to generate the link to jump to the last page." ilk="class" name="LastPageLink">
                <scope attributes="__ctor__" doc="ui Component to generate the link to jump to the last page." ilk="function" name="LastPageLink" signature="LastPageLink(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Removes the link/span node and clears event listeners" ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(paginator)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="paginator" />
                </scope>
                <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Swap the link, span, and na nodes if appropriate." ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event (ignored)" ilk="argument" name="e" />
                </scope>
                <scope doc="Listener for the link&apos;s onclick event.  Passes to setPage method." ilk="function" name="onClick" signature="onClick(e)">
                  <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
                </scope>
                <variable citdl="HTMLElement" doc="Currently placed HTMLElement node" name="current" />
                <variable citdl="HTMLElement" doc="Link HTMLElement node" name="link" />
                <variable citdl="HTMLElement" doc="Span node (inactive link)" name="span" />
                <variable citdl="HTMLElement" doc="Empty place holder node for when the last page link is inappropriate to&#xA;display in any form (unlimited paging)." name="na" />
              </scope>
              <scope doc="ui Component to generate the link to jump to the next page." ilk="class" name="NextPageLink">
                <scope attributes="__ctor__" doc="ui Component to generate the link to jump to the next page." ilk="function" name="NextPageLink" signature="NextPageLink(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Removes the link/span node and clears event listeners" ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(p)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
                </scope>
                <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Swap the link and span nodes if appropriate." ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Listener for the link&apos;s onclick event.  Passes to setPage method." ilk="function" name="onClick" signature="onClick(e)">
                  <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
                </scope>
                <variable citdl="HTMLElement" doc="Currently placed HTMLElement node" name="current" />
                <variable citdl="HTMLElement" doc="Link node" name="link" />
                <variable citdl="HTMLElement" doc="Span node (inactive link)" name="span" />
              </scope>
              <scope doc="ui Component to generate the page links" ilk="class" name="PageLinks">
                <scope attributes="__ctor__" doc="ui Component to generate the page links" ilk="function" name="PageLinks" signature="PageLinks(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Generate the nodes and return the container node containing page links&#xA;appropriate to the current pagination state." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Force a rebuild of the page links." ilk="function" name="rebuild" signature="rebuild(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Update the links if appropriate" ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(p)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
                </scope>
                <scope doc="Listener for the container&apos;s onclick event.  Looks for qualifying link&#xA;clicks, and pulls the page number from the link&apos;s page attribute.&#xA;Sends link&apos;s page attribute to the Paginator&apos;s setPage method." ilk="function" name="onClick" signature="onClick(e)">
                  <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
                </scope>
                <scope doc="Removes the page links container node and clears event listeners" ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Calculates start and end page numbers given a current page, attempting&#xA;to keep the current page in the middle" ilk="function" name="calculateRange" signature="calculateRange(currentPage, totalPages, numPages) =&gt; Array">
                  <variable citdl="int" doc="The current page" ilk="argument" name="currentPage" />
                  <variable citdl="int" doc="(optional) Maximum number of pages" ilk="argument" name="totalPages" />
                  <variable citdl="int" doc="(optional) Preferred number of pages in range" ilk="argument" name="numPages" />
                </scope>
                <variable citdl="number" doc="Current page" name="current" />
                <variable citdl="HTMLElement" doc="Span node containing the page links" name="container" />
              </scope>
              <scope doc="ui Component to generate the link to jump to the previous page." ilk="class" name="PreviousPageLink">
                <scope attributes="__ctor__" doc="ui Component to generate the link to jump to the previous page." ilk="function" name="PreviousPageLink" signature="PreviousPageLink(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Removes the link/span node and clears event listeners" ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(p)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
                </scope>
                <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Swap the link and span nodes if appropriate." ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Listener for the link&apos;s onclick event.  Passes to setPage method." ilk="function" name="onClick" signature="onClick(e)">
                  <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
                </scope>
                <variable citdl="HTMLElement" doc="Currently placed HTMLElement node" name="current" />
                <variable citdl="HTMLElement" doc="Link node" name="link" />
                <variable citdl="HTMLElement" doc="Span node (inactive link)" name="span" />
              </scope>
              <scope doc="ui Component to generate the rows-per-page dropdown" ilk="class" name="RowsPerPageDropdown">
                <scope attributes="__ctor__" doc="ui Component to generate the rows-per-page dropdown" ilk="function" name="RowsPerPageDropdown" signature="RowsPerPageDropdown(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Generate the select and option nodes and returns the select node." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="(Re)generate the select options." ilk="function" name="rebuild" signature="rebuild()" />
                <scope doc="Select the appropriate option if changed." ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(p)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
                </scope>
                <scope doc="Removes the select node and clears event listeners" ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Listener for the select&apos;s onchange event.  Sent to setRowsPerPage method." ilk="function" name="onChange" signature="onChange(e)">
                  <variable citdl="DOMEvent" doc="The change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Updates the all option value (and Paginator&apos;s rowsPerPage attribute if&#xA;necessary) in response to a change in the Paginator&apos;s totalRecords." ilk="function" name="_handleTotalRecordsChange" signature="_handleTotalRecordsChange(e)">
                  <variable citdl="Event" doc="attribute change event" ilk="argument" name="e" />
                </scope>
                <variable citdl="HTMLElement" doc="option node for the optional All value" name="all" />
                <variable citdl="HTMLElement" doc="select node" name="select" />
              </scope>
              <scope doc="Describe the ui Component" ilk="class" name="YourComponent">
                <scope attributes="__ctor__" doc="Describe the ui Component" ilk="function" name="YourComponent" signature="YourComponent(p)">
                  <variable citdl="Pagintor" doc="Paginator instance to attach to" ilk="argument" name="p" />
                </scope>
                <scope doc="Subscribe to the Paginator&apos;s events that will affect this component&apos;s ui" ilk="function" name="initListeners" signature="initListeners()" />
                <scope doc="Generate the nodes and return the appropriate node given the current&#xA;pagination state." ilk="function" name="render" signature="render(id_base) =&gt; HTMLElement">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Initialize the DOM nodes managed by this component" ilk="function" name="initUI" signature="initUI(id_base)">
                  <variable citdl="string" doc="used to create unique ids for generated nodes" ilk="argument" name="id_base" />
                </scope>
                <scope doc="Make any necessary changes to the component nodes" ilk="function" name="update" signature="update(e)">
                  <variable citdl="CustomEvent" doc="The calling change event" ilk="argument" name="e" />
                </scope>
                <scope doc="Decorates Paginator instances with new attributes. Called during&#xA;Paginator instantiation." ilk="function" name="init" signature="init(p)">
                  <variable citdl="Paginator" doc="Paginator instance to decorate" ilk="argument" name="p" />
                </scope>
                <scope doc="Listener for a DOM event from a managed element.  Pass new value to&#xA;Paginator.setStartIndex(..), .setPage(..) etc to fire off changeRequest&#xA;events.  DO NOT modify the managed element&apos;s state here.  That should&#xA;happen in response to the Paginator&apos;s recordOffsetChange event (et al)" ilk="function" name="onClick" signature="onClick(e)">
                  <variable citdl="DOMEvent" doc="The click event" ilk="argument" name="e" />
                </scope>
                <scope doc="Attach DOM event listeners to the nodes managed by this component" ilk="function" name="bindUI" signature="bindUI()" />
                <scope doc="Remove the generated DOM structure" ilk="function" name="destroy" signature="destroy()" />
                <scope doc="Make more substantial changes in a separate method if necessary" ilk="function" name="rebuild" signature="rebuild(e)">
                  <variable citdl="CustomEvent" doc="the calling change event" ilk="argument" name="e" />
                </scope>
                <variable citdl="HTMLElement" doc="Describe the node that will be stored in this property" name="button" />
              </scope>
            </scope>
          </scope>
          <scope classrefs="YAHOO.widget.Overlay" doc="Panel is an implementation of Overlay that behaves like an OS window, &#xA;with a draggable header and an optional close icon at the top right." ilk="class" name="Panel">
            <scope attributes="__ctor__" doc="Panel is an implementation of Overlay that behaves like an OS window, &#xA;with a draggable header and an optional close icon at the top right." ilk="function" name="Panel" signature="Panel(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Panel &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Panel" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing &#xA;the configuration that should be set for this Panel. See configuration &#xA;documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="&quot;hideMask&quot; event handler that removes all &quot;focus&quot; event handlers added &#xA;by the &quot;addFocusEventHandlers&quot; method." ilk="function" name="_removeFocusHandlers" signature="_removeFocusHandlers(p_sType, p_aArgs)">
              <variable citdl="String" doc="Event type" ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Event Arguments" ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Sets the firstElement and lastElement instance properties&#xA;to the first and last focusable elements in the Panel." ilk="function" name="setFirstLastFocusable" signature="setFirstLastFocusable()" />
            <scope doc="The default event handler fired when the &quot;close&quot; property is changed.&#xA;The method controls the appending or hiding of the close icon at the &#xA;top right of the Panel." ilk="function" name="configClose" signature="configClose(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Renders the Panel by inserting the elements that are not already in &#xA;the main Panel into their correct places. Optionally appends the &#xA;Panel to the specified node prior to the render&apos;s execution. NOTE: &#xA;For Panels without existing markup, the appendToNode argument is &#xA;REQUIRED. If this argument is ommitted and the current element is &#xA;not present in the document, the function will return false, &#xA;indicating that the render was a failure." ilk="function" name="render" signature="render(appendToNode, appendToNode) =&gt; boolean">
              <variable citdl="String" doc="The element id to which the Module &#xA;should be appended to prior to rendering &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="appendToNode" />
              <variable citdl="HTMLElement" doc="The element to which the Module &#xA;should be appended to prior to rendering" ilk="argument" name="appendToNode" />
            </scope>
            <scope doc="Event handler for the close icon" ilk="function" name="_doClose" signature="_doClose(e)">
              <variable citdl="DOMEvent" ilk="argument" name="e" />
            </scope>
            <scope doc="Sets the zindex of the mask, if it exists, based on the zindex of &#xA;the Panel element. The zindex of the mask is set to be one less &#xA;than the Panel element&apos;s zindex.&#xA;&lt;p&gt;NOTE: This method will not bump up the zindex of the Panel&#xA;to ensure that the mask has a non-negative zindex. If you require the&#xA;mask zindex to be 0 or higher, the zindex of the Panel &#xA;should be set to a value higher than 0, before this method is called.&#xA;&lt;/p&gt;" ilk="function" name="stackMask" signature="stackMask()" />
            <scope doc="Renders the currently set body into it&apos;s proper position under the &#xA;module element. If the module element is not provided, &quot;this.innerElement&quot; &#xA;is used." ilk="function" name="_renderBody" signature="_renderBody(moduleElement)">
              <variable citdl="HTMLElement" doc="Optional. A reference to the module element." ilk="argument" name="moduleElement" />
            </scope>
            <scope doc="Creates a hidden focusable element, used to focus on,&#xA;to enforce modality for browsers in which focus cannot&#xA;be applied to the container box." ilk="function" name="_createHiddenFocusElement" signature="_createHiddenFocusElement()" />
            <scope doc="Renders the currently set header into it&apos;s proper position under the &#xA;module element. If the module element is not provided, &quot;this.innerElement&quot; &#xA;is used." ilk="function" name="_renderHeader" signature="_renderHeader(moduleElement)">
              <variable citdl="HTMLElement" doc="Optional. A reference to the module element" ilk="argument" name="moduleElement" />
            </scope>
            <scope doc="Hides the modality mask." ilk="function" name="hideMask" signature="hideMask()" />
            <scope doc="Sets the size of the modality mask to cover the entire scrollable &#xA;area of the document" ilk="function" name="sizeMask" signature="sizeMask()" />
            <scope doc="Sets focus to the first element in the Panel." ilk="function" name="focusFirst" signature="focusFirst()" />
            <scope doc="The default event handler fired when the &quot;modal&quot; property is &#xA;changed. This handler subscribes or unsubscribes to the show and hide&#xA;events to handle the display or hide of the modality mask." ilk="function" name="configModal" signature="configModal(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The default event handler fired when the &quot;keylisteners&quot; property &#xA;is changed." ilk="function" name="configKeyListeners" signature="configKeyListeners(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration&#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The Overlay initialization method, which is executed for Overlay and &#xA;all of its subclasses. This method is automatically called by the &#xA;constructor, and  sets up all DOM references for pre-existing markup, &#xA;and creates required markup if it is not already present." ilk="function" name="init" signature="init(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Overlay &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Overlay" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal &#xA;containing the configuration that should be set for this Overlay. &#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Returns a String representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Builds the wrapping container around the Panel that is used for &#xA;positioning the shadow and matte underlays. The container element is &#xA;assigned to a  local instance variable called container, and the &#xA;element is reinserted inside of it." ilk="function" name="buildWrapper" signature="buildWrapper()" />
            <scope doc="Removes the Panel element from the DOM and sets all child elements&#xA;to null." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Removes the modality mask." ilk="function" name="removeMask" signature="removeMask()" />
            <scope doc="The default event handler fired when the &quot;height&quot; property is changed." ilk="function" name="configHeight" signature="configHeight(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="&quot;showMask&quot; event handler that adds a &quot;focus&quot; event handler to all&#xA;focusable elements in the document to enforce a Panel instance&apos;s &#xA;modality from being compromised." ilk="function" name="_addFocusHandlers" signature="_addFocusHandlers(p_sType, p_aArgs)">
              <variable citdl="String" doc="Custom event type" ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Custom event arguments" ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Shows the modality mask." ilk="function" name="showMask" signature="showMask()" />
            <scope doc="The default handler for the &quot;strings&quot; property" ilk="function" name="configStrings" signature="configStrings()" />
            <scope doc="&quot;focus&quot; event handler for a focuable element. Used to automatically&#xA;blur the element when it receives focus to ensure that a Panel&#xA;instance&apos;s modality is not compromised." ilk="function" name="_onElementFocus" signature="_onElementFocus(e)">
              <variable citdl="Event" doc="The DOM event object" ilk="argument" name="e" />
            </scope>
            <scope doc="Registers the Panel&apos;s header for drag &amp; drop capability." ilk="function" name="registerDragDrop" signature="registerDragDrop()" />
            <scope doc="Forces the underlay element to be repainted through the application/removal &#xA;of a yui-force-redraw class to the underlay element." ilk="function" name="forceUnderlayRedraw" signature="forceUnderlayRedraw()" />
            <scope doc="The default event handler fired when the &quot;underlay&quot; property &#xA;is changed." ilk="function" name="configUnderlay" signature="configUnderlay(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Sets focus to the last element in the Panel." ilk="function" name="focusLast" signature="focusLast()" />
            <scope doc="The default event handler fired when the &quot;width&quot; property is changed." ilk="function" name="configWidth" signature="configWidth(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The default event handler fired when the &quot;draggable&quot; property &#xA;is changed." ilk="function" name="configDraggable" signature="configDraggable(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Renders the currently set footer into it&apos;s proper position under the &#xA;module element. If the module element is not provided, &quot;this.innerElement&quot; &#xA;is used." ilk="function" name="_renderFooter" signature="_renderFooter(moduleElement)">
              <variable citdl="HTMLElement" doc="Optional. A reference to the module element" ilk="argument" name="moduleElement" />
            </scope>
            <scope doc="Builds the mask that is laid over the document when the Panel is &#xA;configured to be modal." ilk="function" name="buildMask" signature="buildMask()" />
            <scope doc="The default custom event handler executed when the Panel&apos;s height is changed, &#xA;if the autofillheight property has been set." ilk="function" name="_autoFillOnHeightChange" signature="_autoFillOnHeightChange(type, args, el)">
              <variable citdl="String" doc="The event type" ilk="argument" name="type" />
              <variable citdl="Array" doc="The array of arguments passed to event subscribers" ilk="argument" name="args" />
              <variable citdl="HTMLElement" doc="The header, body or footer element which is to be resized to fill&#xA;out the containers height" ilk="argument" name="el" />
            </scope>
            <scope doc="Initializes the custom events for Module which are fired &#xA;automatically at appropriate times by the Module class." ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Returns an array of the currently focusable items which reside within&#xA;Panel. The set of focusable elements the method looks for are defined&#xA;in the Panel.FOCUSABLE static property" ilk="function" name="getFocusableElements" signature="getFocusableElements(root)">
              <variable citdl="HTMLElement" doc="element to start from." ilk="argument" name="root" />
            </scope>
            <scope doc="The default event handler fired when the &quot;zIndex&quot; property is changed." ilk="function" name="configzIndex" signature="configzIndex(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Adjusts the size of the shadow based on the size of the element." ilk="function" name="sizeUnderlay" signature="sizeUnderlay()" />
            <scope doc="Sets up a tab, shift-tab loop between the first and last elements&#xA;provided. NOTE: Sets up the preventBackTab and preventTabOut KeyListener&#xA;instance properties, which are reset everytime this method is invoked." ilk="function" name="setTabLoop" signature="setTabLoop(firstElement, lastElement)">
              <variable citdl="HTMLElement" ilk="argument" name="firstElement" />
              <variable citdl="HTMLElement" ilk="argument" name="lastElement" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be changed &#xA;using the Panel&apos;s Config object (cfg)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <variable citdl="String" doc="Constant representing the default CSS class used for a Panel&apos;s &#xA;wrapping container" name="YAHOO.widget.Panel.CSS_PANEL_CONTAINER" />
            <variable citdl="YAHOO.util.DD" doc="The YAHOO.util.DD instance, used to implement the draggable header for the panel if draggable is enabled" name="dd" />
            <variable citdl="String" doc="Constant representing the default CSS class used for a Panel" name="YAHOO.widget.Panel.CSS_PANEL" />
            <variable citdl="Object" doc="Constant representing the name of the Panel&apos;s events" name="EVENT_TYPES" />
            <variable citdl="Array" doc="Constant representing the default set of focusable elements &#xA;on the pagewhich Modal Panels will prevent access to, when&#xA;the modal mask is displayed" name="YAHOO.widget.Panel.FOCUSABLE" />
            <variable citdl="Object" doc="Constant representing the Panel&apos;s configuration properties" name="DEFAULT_CONFIG" />
          </scope>
          <scope doc="PieChart class for the YUI Charts widget." ilk="class" name="PieChart">
            <scope attributes="__ctor__" doc="PieChart class for the YUI Charts widget." ilk="function" name="PieChart" signature="PieChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
            <scope doc="Getter for the dataField attribute." ilk="function" name="_getDataField" signature="_getDataField()" />
            <scope doc="Setter for the dataField attribute." ilk="function" name="_setDataField" signature="_setDataField()" />
            <scope doc="Setter for the categoryField attribute." ilk="function" name="_setCategoryField" signature="_setCategoryField()" />
            <scope doc="Getter for the categoryField attribute." ilk="function" name="_getCategoryField" signature="_getCategoryField()" />
            <scope doc="Initializes the attributes." ilk="function" name="_initAttributes" signature="_initAttributes()" />
          </scope>
          <scope doc="PieSeries class for the YUI Charts widget." ilk="class" name="PieSeries">
            <scope attributes="__ctor__" doc="PieSeries class for the YUI Charts widget." ilk="function" name="PieSeries" signature="PieSeries()" />
            <variable citdl="String" doc="The field used to access the category value from the items from the data source." name="categoryField" />
            <variable citdl="String" doc="A string reference to the globally-accessible function that may be called to&#xA;determine each of the label values for this series. Also accepts function references." name="labelFunction" />
            <variable citdl="String" doc="The field used to access the data value from the items from the data source." name="dataField" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="A widget to view YUI Profiler output." ilk="class" name="ProfilerViewer">
            <scope attributes="__ctor__" doc="A widget to view YUI Profiler output." ilk="function" name="ProfilerViewer" signature="ProfilerViewer(el(optional), attr)">
              <variable citdl="HTMLElement | String | Object" doc="The html &#xA;element into which the ProfileViewer should be rendered. &#xA;An element will be created if none provided." ilk="argument" name="el(optional)" />
              <variable citdl="Object" doc="(optional) A key map of the ProfilerViewer&apos;s &#xA;initial attributes.  Ignored if first arg is an attributes object." ilk="argument" name="attr" />
            </scope>
            <scope doc="Returns the element containing the console&apos;s DataTable&#xA;instance." ilk="function" name="getDataTable" signature="getDataTable() =&gt; " />
            <scope doc="Shows the viewer canvas." ilk="function" name="show" signature="show() =&gt; " />
            <scope doc="Refreshes the data displayed in the ProfilerViewer. When called,&#xA;this will invoke a refresh of the DataTable and (if displayed)&#xA;the Chart." ilk="function" name="refreshData" signature="refreshData() =&gt; " />
            <scope doc="Set up the DOM structure for the ProfilerViewer canvas,&#xA;including the holder for the DataTable." ilk="function" name="_initViewerDOM" signature="_initViewerDOM()" />
            <scope doc="Set up the Chart&apos;s legend" ilk="function" name="_drawChartLegend" signature="_drawChartLegend()" />
            <scope doc="Event handler for clicks on the DataTable&apos;s sortable column&#xA;heads." ilk="function" name="_thClickHandler" signature="_thClickHandler()" />
            <scope doc="setAttributeConfigs TabView specific properties." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Hash of initial attributes" ilk="argument" name="attr" />
            </scope>
            <scope doc="Returns the element containing the console&apos;s header." ilk="function" name="getHeadEl" signature="getHeadEl() =&gt; " />
            <scope doc="Returns the element containing the console&apos;s chart." ilk="function" name="getChartEl" signature="getChartEl() =&gt; " />
            <scope doc="Create anchor elements for use as buttons. Args: label&#xA;is text to appear on the face of the button, parentEl&#xA;is the el to which the anchor will be attached, position&#xA;is true for inserting as the first node and false for&#xA;inserting as the last node of the parentEl." ilk="function" name="_createButton" signature="_createButton()" />
            <scope doc="Refresh DataTable, getting new data from Profiler." ilk="function" name="_refreshDataTable" signature="_refreshDataTable()" />
            <scope doc="Proxy the sort event in DataTable into the ProfilerViewer&#xA;attribute." ilk="function" name="_sortedByChange" signature="_sortedByChange()" />
            <scope doc="Set up the DataTable." ilk="function" name="_initDataTable" signature="_initDataTable()" />
            <scope doc="Toggles visibility of the viewer canvas." ilk="function" name="_toggleVisible" signature="_toggleVisible() =&gt; " />
            <scope doc="Returns the element containing the console&apos;s body, including&#xA;the chart and the datatable.." ilk="function" name="getBodyEl" signature="getBodyEl() =&gt; " />
            <scope doc="Hides the viewer canvas." ilk="function" name="hide" signature="hide() =&gt; " />
            <scope doc="Set up the Chart." ilk="function" name="_initChart" signature="_initChart()" />
            <scope doc="Get data for the Chart from DataTable recordset" ilk="function" name="_getChartData" signature="_getChartData()" />
            <scope doc="Proxy the render event in DataTable into the ProfilerViewer&#xA;attribute." ilk="function" name="_dataTableRenderHandler" signature="_dataTableRenderHandler()" />
            <scope doc="Resize the chart&apos;s canvas if based on number of records&#xA;returned from the chart&apos;s datasource." ilk="function" name="_sizeChartCanvas" signature="_sizeChartCanvas()" />
            <scope doc="Provides a readable name for the ProfilerViewer instance." ilk="function" name="toString" signature="toString() =&gt; " />
            <scope doc="Set up the DOM structure for the ProfilerViewer launcher." ilk="function" name="_initLauncherDOM" signature="_initLauncherDOM()" />
            <scope doc="Utility function for array sums." ilk="function" name="_arraySum" signature="_arraySum()" />
            <scope doc="If no element is passed in, create it as the first element&#xA;in the document." ilk="function" name="_createProfilerViewerElement" signature="_createProfilerViewerElement() =&gt; " />
            <scope doc="Build series definition based on current configuration attributes." ilk="function" name="_getSeriesDef" signature="_getSeriesDef()" />
            <scope doc="Set up the DOM structure for the ProfilerViewer canvas." ilk="function" name="_initChartDOM" signature="_initChartDOM()" />
            <scope doc="Returns the element containing the console&apos;s dataTable." ilk="function" name="getTableEl" signature="getTableEl() =&gt; " />
            <scope doc="Set&apos;s console busy state." ilk="function" name="_setBusyState" signature="_setBusyState()" />
            <scope doc="Refresh chart, getting new data from table." ilk="function" name="_refreshChart" signature="_refreshChart()" />
            <scope doc="Render the viewer canvas" ilk="function" name="_render" signature="_render() =&gt; " />
            <scope doc="Retrieves data from Profiler, filtering and sorting as needed&#xA;based on current widget state.  Adds calculated percentage&#xA;column and function name to data returned by Profiler." ilk="function" name="_getProfilerData" signature="_getProfilerData()" />
            <scope doc="Returns the element containing the console&apos;s Chart instance." ilk="function" name="getChart" signature="getChart() =&gt; " />
            <variable citdl="string" doc="Classname for element containing the chart." name="CLASS_CHART" />
            <variable citdl="string" doc="Classname for ProfilerViewer containing element." name="CLASS" />
            <variable citdl="string" doc="Classname for busy indicator in the dashboard." name="CLASS_BUSY" />
            <variable citdl="function" doc="Function used to format numbers in milliseconds&#xA;for chart; must be publicly accessible, per Charts spec." name="timeAxisLabelFunction" />
            <variable doc="Strings used in the UI." name="STRINGS" />
            <variable citdl="string" doc="Classname for the &quot;refresh data&quot; button." name="CLASS_REFRESH" />
            <variable citdl="string" doc="Classname for element containing the chart and chart&#xA;legend elements." name="CLASS_CHART_CONTAINER" />
            <variable citdl="string" doc="Classname for element containing the datatable." name="CLASS_TABLE" />
            <variable citdl="string" doc="Classname for ProfilerViewer button dashboard." name="CLASS_DASHBOARD" />
            <variable citdl="string" doc="Classname for element containing the chart&apos;s legend." name="CLASS_CHART_LEGEND" />
            <variable citdl="function" doc="Function used to format percent numbers for chart; must&#xA;be publicly accessible, per Charts spec." name="percentAxisLabelFunction" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,&#xA;a level meter, rating or any such simple linear measure.&#xA;It allows for highly customized styles including animation, vertical or horizontal and forward or reverse." ilk="class" name="ProgressBar">
            <scope attributes="__ctor__" doc="The ProgressBar widget provides an easy way to draw a bar depicting progress of an operation,&#xA;a level meter, rating or any such simple linear measure.&#xA;It allows for highly customized styles including animation, vertical or horizontal and forward or reverse." ilk="function" name="ProgressBar" signature="ProgressBar(oConfigs)">
              <variable citdl="object" doc="An object containing any configuration attributes to be set" ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Recalculates the bar size and position and redraws it" ilk="function" name="redraw" signature="redraw() =&gt; " />
            <scope doc="Renders the ProgressBar into the given container.  &#xA;If the container has other content, the ProgressBar will be appended to it.&#xA;If the second argument is provided, the ProgressBar will be inserted before the given child.&#xA;The method is chainable since it returns a reference to this instance." ilk="function" name="render" signature="render(el, before) =&gt; YAHOO.widget.ProgressBar">
              <variable citdl="HTML Element" doc="HTML element that will contain the ProgressBar" ilk="argument" name="el" />
              <variable citdl="HTML Element" doc="(optional) If present, the ProgressBar will be inserted before this element." ilk="argument" name="before" />
            </scope>
            <scope doc="Initialization code for the widget, separate from the constructor to allow for overriding/patching.&#xA;It is called after &lt;a href=&quot;#method_initAttributes&quot;&gt;initAttributes&lt;/a&gt;" ilk="function" name="_init" signature="_init(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal definition of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Called in response to a change in the &lt;a href=&quot;#config_value&quot;&gt;value&lt;/a&gt; attribute.&#xA;Moves the bar to reflect the new value" ilk="function" name="_valueChange" signature="_valueChange() =&gt; " />
            <scope doc="Due to rounding differences, some browsers fail to cover the whole area &#xA;with the mask quadrants when the width or height is odd.  This method&#xA;stretches the lower and/or right quadrants to make the difference." ilk="function" name="_fixEdges" signature="_fixEdges() =&gt; " />
            <scope doc="Implementation of Element&apos;s abstract method. Sets up config values." ilk="function" name="initAttributes" signature="initAttributes(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal definition of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Method called when the height attribute is changed" ilk="function" name="_heightChange" signature="_heightChange(value) =&gt; ">
              <variable citdl="int or string" doc="New height, in pixels if int or string including units" ilk="argument" name="value" />
            </scope>
            <scope doc="Destroys the ProgressBar, related objects and unsubscribes from all events" ilk="function" name="destroy" signature="destroy() =&gt; " />
            <scope doc="Called in response to a change in the &lt;a href=&quot;#config_anim&quot;&gt;anim&lt;/a&gt; attribute.&#xA;It creates and sets up or destroys the instance of the animation utility that will move the bar" ilk="function" name="_animSetter" signature="_animSetter() =&gt; " />
            <scope doc="Utility method to set the ARIA value attributes" ilk="function" name="_setAriaText" signature="_setAriaText() =&gt; " />
            <scope doc="Method called when the height attribute is changed" ilk="function" name="_widthChange" signature="_widthChange(value) =&gt; ">
              <variable citdl="int or string" doc="New width, in pixels if int or string including units" ilk="argument" name="value" />
            </scope>
            <scope doc="Calculates some auxiliary values to make the rendering faster" ilk="function" name="_recalculateConstants" signature="_recalculateConstants() =&gt; " />
            <variable citdl="String" doc="String containing the HTML string which is the basis for the Progress Bar." name="ProgressBar.MARKUP" />
            <variable citdl="Number" doc="The previous value setting for the bar.  Used mostly as information to event listeners" name="_previousValue" />
            <variable citdl="{function}" doc="Function to be used to calculate bar size.  &#xA;It is picked from &lt;a href=&quot;#property_barSizeFunctions&quot;&gt;_barSizeFunctions&lt;/a&gt;&#xA;depending on direction and whether animation is active." name="_barSizeFunction" />
            <variable citdl="Number" doc="The actual space (in pixels) available for the bar within the mask (excludes margins)" name="_barSpace" />
            <variable citdl="boolean" doc="A flag to signal that rendering has already happened" name="_rendered" />
            <variable citdl="{collection of functions}" doc="Collection of functions used by to calculate the size of the bar.&#xA;One of this will be used depending on direction and whether animation is active." name="_barSizeFunctions" />
          </scope>
          <scope classrefs="YAHOO.widget.BaseCellEditor" doc="The RadioCellEditor class provides functionality for inline editing&#xA;DataTable cell data with radio buttons." ilk="class" name="RadioCellEditor">
            <scope attributes="__ctor__" doc="The RadioCellEditor class provides functionality for inline editing&#xA;DataTable cell data with radio buttons." ilk="function" name="RadioCellEditor" signature="RadioCellEditor(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Render a form with input(s) type=radio." ilk="function" name="renderForm" signature="renderForm()" />
            <scope doc="After rendering form, if disabledBtns is set to true, then sets up a mechanism&#xA;to save input without them." ilk="function" name="handleDisabledBtns" signature="handleDisabledBtns()" />
            <scope doc="Sets focus in RadioCellEditor." ilk="function" name="focus" signature="focus()" />
            <scope doc="Retrieves input value from RadioCellEditor." ilk="function" name="getInputValue" signature="getInputValue()" />
            <scope doc="Resets RadioCellEditor UI to initial state." ilk="function" name="resetForm" signature="resetForm()" />
            <variable citdl="String[] | Object[]" doc="Array of radio values. Can either be a simple array (e.g., [&quot;yes&quot;,&quot;no&quot;,&quot;maybe&quot;])&#xA;or a an array of objects (e.g., [{label:&quot;yes&quot;, value:1}, {label:&quot;no&quot;, value:-1},&#xA;{label:&quot;maybe&quot;, value:0}])." name="radioOptions" />
            <variable citdl="HTMLElement[]" doc="Reference to radio elements." name="radios" />
          </scope>
          <scope doc="The Record class defines a DataTable record." ilk="class" name="Record">
            <scope attributes="__ctor__" doc="The Record class defines a DataTable record." ilk="function" name="Record" signature="Record(oConfigs)">
              <variable citdl="Object" doc="(optional) Object literal of key/value pairs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Returns unique count assigned at instantiation." ilk="function" name="getCount" signature="getCount() =&gt; " />
            <scope doc="Returns data for the Record for a field if given, or the entire object&#xA;literal otherwise." ilk="function" name="getData" signature="getData(sField) =&gt; ">
              <variable citdl="String" doc="(Optional) The field from which to retrieve data value." ilk="argument" name="sField" />
            </scope>
            <scope doc="Returns unique ID assigned at instantiation." ilk="function" name="getId" signature="getId() =&gt; " />
            <scope doc="Sets given data at the given key. Use the RecordSet method updateRecordValue to trigger&#xA;events." ilk="function" name="setData" signature="setData(sKey, oData)">
              <variable citdl="String" doc="The key of the new value." ilk="argument" name="sKey" />
              <variable citdl="MIXED" doc="The new value." ilk="argument" name="oData" />
            </scope>
            <variable citdl="String" doc="Immutable unique ID assigned at instantiation. Remains constant while a&#xA;Record&apos;s position index can change from sorting." name="_sId" />
            <variable citdl="Number" doc="Internal class variable to give unique IDs to Record instances." name="Record._nCount" />
            <variable citdl="Object" doc="Holds data for the Record in an object literal." name="_oData" />
            <variable citdl="Number" doc="Immutable unique count assigned at instantiation. Remains constant while a&#xA;Record&apos;s position index can change from sorting." name="_nCount" />
          </scope>
          <scope doc="A RecordSet defines and manages a set of Records." ilk="class" name="RecordSet">
            <scope attributes="__ctor__" doc="A RecordSet defines and manages a set of Records." ilk="function" name="RecordSet" signature="RecordSet(data)">
              <variable citdl="Object || Object[]" doc="An object literal or an array of data." ilk="argument" name="data" />
            </scope>
            <scope doc="Returns a boolean indicating whether Records exist in the RecordSet at the&#xA;specified index range.  Returns true if and only if a Record exists at each&#xA;index in the range." ilk="function" name="hasRecords" signature="hasRecords(index, range) =&gt; Boolean">
              <variable ilk="argument" name="index" />
              <variable ilk="argument" name="range" />
            </scope>
            <scope doc="Updates given Record with given data." ilk="function" name="updateRecord" signature="updateRecord(record, oData) =&gt; YAHOO.widget.Record">
              <variable citdl="YAHOO.widget.Record | Number | String" doc="A Record instance,&#xA;a RecordSet position index, or a Record ID." ilk="argument" name="record" />
              <variable citdl="Object" doc="Object literal of new data." ilk="argument" name="oData" />
            </scope>
            <scope doc="Replaces all Records in RecordSet with new object literal data." ilk="function" name="replaceRecords" signature="replaceRecords(data) =&gt; YAHOO.widget.Record || YAHOO.widget.Record[]">
              <variable citdl="Object || Object[]" doc="An object literal of data or an array of&#xA;data object literals." ilk="argument" name="data" />
            </scope>
            <scope doc="Adds one Record to the RecordSet at the given index. If index is null,&#xA;then adds the Record to the end of the RecordSet." ilk="function" name="addRecord" signature="addRecord(oData, index) =&gt; YAHOO.widget.Record">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
            </scope>
            <scope doc="" ilk="function" name="updateKey" signature="updateKey()" />
            <scope doc="Removes the Record at the given position index from the RecordSet. If a range&#xA;is also provided, removes that many Records, starting from the index. Length&#xA;of RecordSet is correspondingly shortened." ilk="function" name="deleteRecord" signature="deleteRecord(index, range) =&gt; Object">
              <variable citdl="Number" doc="Record&apos;s RecordSet position index." ilk="argument" name="index" />
              <variable citdl="Number" doc="(optional) How many Records to delete." ilk="argument" name="range" />
            </scope>
            <scope doc="Sets/replaces one Record to the RecordSet at the given index.  Existing&#xA;Records with higher indexes are not shifted.  If no index specified, the&#xA;Record is added to the end of the RecordSet." ilk="function" name="_setRecord" signature="_setRecord(oData, index) =&gt; YAHOO.widget.Record">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
            </scope>
            <scope doc="Returns the number of Records held in the RecordSet." ilk="function" name="getLength" signature="getLength() =&gt; Number" />
            <scope doc="Returns Record by ID or RecordSet position index." ilk="function" name="getRecord" signature="getRecord(record) =&gt; YAHOO.widget.Record">
              <variable citdl="YAHOO.widget.Record | Number | String" doc="Record instance,&#xA;RecordSet position index, or Record ID." ilk="argument" name="record" />
            </scope>
            <scope doc="Returns unique name of the RecordSet instance." ilk="function" name="getId" signature="getId() =&gt; String" />
            <scope doc="Public accessor to the unique name of the RecordSet instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Reverses all Records, so [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] becomes [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]." ilk="function" name="reverseRecords" signature="reverseRecords() =&gt; YAHOO.widget.Record[]" />
            <scope doc="Adds multiple Records at once to the RecordSet at the given index with the&#xA;given object literal data. If index is null, then the new Records are&#xA;added to the end of the RecordSet." ilk="function" name="addRecords" signature="addRecords(aData, index) =&gt; YAHOO.widget.Record[]">
              <variable citdl="Object[]" doc="An object literal data or an array of data object literals." ilk="argument" name="aData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
            </scope>
            <scope doc="Sets or replaces multiple Records at once to the RecordSet with the given&#xA;data, starting at the given index. If index is not specified, then the new&#xA;Records are added to the end of the RecordSet." ilk="function" name="setRecords" signature="setRecords(aData, index) =&gt; YAHOO.widget.Record[]">
              <variable citdl="Object[]" doc="An array of object literal data." ilk="argument" name="aData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
            </scope>
            <scope doc="Deletes Records from the RecordSet at the given index. If range is null,&#xA;then only one Record is deleted." ilk="function" name="_deleteRecord" signature="_deleteRecord(index, range)">
              <variable citdl="Number" doc="Position index." ilk="argument" name="index" />
              <variable citdl="Number" doc="(optional) How many Records to delete" ilk="argument" name="range" />
            </scope>
            <scope doc="Returns an array of Records from the RecordSet." ilk="function" name="getRecords" signature="getRecords(index, range) =&gt; YAHOO.widget.Record[]">
              <variable citdl="Number" doc="(optional) Recordset position index of which Record to&#xA;start at." ilk="argument" name="index" />
              <variable citdl="Number" doc="(optional) Number of Records to get." ilk="argument" name="range" />
            </scope>
            <scope doc="Sorts all Records by given function. Records keep their unique IDs but will&#xA;have new RecordSet position indexes." ilk="function" name="sortRecords" signature="sortRecords(fnSort, desc, field) =&gt; YAHOO.widget.Record[]">
              <variable citdl="Function" doc="Reference to a sort function." ilk="argument" name="fnSort" />
              <variable citdl="Boolean" doc="True if sort direction is descending, false if sort&#xA;direction is ascending." ilk="argument" name="desc" />
              <variable citdl="String" doc="The field to sort by, from sortOptions.field" ilk="argument" name="field" />
            </scope>
            <scope doc="Sets given Record at given key to given data." ilk="function" name="updateRecordValue" signature="updateRecordValue(record, sKey, oData)">
              <variable citdl="YAHOO.widget.Record | Number | String" doc="A Record instance,&#xA;a RecordSet position index, or a Record ID." ilk="argument" name="record" />
              <variable citdl="String" doc="Key name." ilk="argument" name="sKey" />
              <variable citdl="Object" doc="New data." ilk="argument" name="oData" />
            </scope>
            <scope doc="Returns current position index for the given Record." ilk="function" name="getRecordIndex" signature="getRecordIndex(oRecord) =&gt; Number">
              <variable citdl="YAHOO.widget.Record" doc="Record instance." ilk="argument" name="oRecord" />
            </scope>
            <scope doc="Sets or replaces one Record to the RecordSet at the given index. Unlike&#xA;addRecord, an existing Record at that index is not shifted to preserve it.&#xA;If no index is specified, it adds the Record to the end of the RecordSet." ilk="function" name="setRecord" signature="setRecord(oData, index) =&gt; YAHOO.widget.Record">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
            </scope>
            <scope doc="Deletes all Records from the RecordSet." ilk="function" name="reset" signature="reset()" />
            <scope doc="Removes the Record at the given position index from the RecordSet. If a range&#xA;is also provided, removes that many Records, starting from the index. Length&#xA;of RecordSet is correspondingly shortened." ilk="function" name="deleteRecords" signature="deleteRecords(index, range) =&gt; Object[]">
              <variable citdl="Number" doc="Record&apos;s RecordSet position index." ilk="argument" name="index" />
              <variable citdl="Number" doc="(optional) How many Records to delete." ilk="argument" name="range" />
            </scope>
            <scope doc="Adds one Record to the RecordSet at the given index. If index is null,&#xA;then adds the Record to the end of the RecordSet." ilk="function" name="_addRecord" signature="_addRecord(oData, index) =&gt; YAHOO.widget.Record">
              <variable citdl="Object" doc="An object literal of data." ilk="argument" name="oData" />
              <variable citdl="Number" doc="(optional) Position index." ilk="argument" name="index" />
            </scope>
            <variable citdl="Number" doc="Internal counter of how many Records are in the RecordSet." name="_length" />
            <variable citdl="String" doc="Unique String identifier assigned at instantiation." name="_sId" />
            <variable citdl="Number" doc="Internal class variable to name multiple Recordset instances." name="RecordSet._nCount" />
          </scope>
          <scope classrefs="YAHOO.widget.Node" doc="A custom YAHOO.widget.Node that handles the unique nature of &#xA;the virtual, presentationless root node." ilk="class" name="RootNode">
            <scope attributes="__ctor__" doc="A custom YAHOO.widget.Node that handles the unique nature of &#xA;the virtual, presentationless root node." ilk="function" name="RootNode" signature="RootNode(oTree)">
              <variable citdl="YAHOO.widget.TreeView" doc="The tree instance this node belongs to" ilk="argument" name="oTree" />
            </scope>
            <scope doc="Count of nodes in tree.  &#xA;It overrides Nodes.getNodeCount because the root node should not be counted." ilk="function" name="getNodeCount" signature="getNodeCount() =&gt; int" />
            <scope doc="Returns an object which could be used to build a tree out of this node and its children.&#xA;It can be passed to the tree constructor to reproduce this node as a tree.&#xA;Since the RootNode is automatically created by treeView, &#xA;its own definition is excluded from the returned node definition&#xA;which only contains its children." ilk="function" name="getNodeDefinition" signature="getNodeDefinition() =&gt; Object | false" />
            <variable citdl="string" doc="The node type" name="_type" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="Creates the SWF instance and keeps the configuration data" ilk="class" name="SWF">
            <scope attributes="__ctor__" doc="Creates the SWF instance and keeps the configuration data" ilk="function" name="SWF" signature="SWF(id, swfURL, p_oAttributes)">
              <variable citdl="String|HTMLElement" doc="The id of the element, or the element itself that the SWF will be inserted into.  &#xA;The width and height of the SWF will be set to the width and height of this container element." ilk="argument" name="id" />
              <variable citdl="String" doc="The URL of the SWF to be embedded into the page." ilk="argument" name="swfURL" />
              <variable citdl="Object" doc="(optional) Configuration parameters for the Flash application and values for Flashvars&#xA;to be passed to the SWF." ilk="argument" name="p_oAttributes" />
            </scope>
            <scope doc="Handles an event coming from within the SWF and delegate it&#xA;to a specific instance of SWF." ilk="function" name="eventHandler" signature="eventHandler(swfid, event)">
              <variable citdl="String" doc="the id of the SWF dispatching the event" ilk="argument" name="swfid" />
              <variable citdl="Object" doc="the event being transmitted." ilk="argument" name="event" />
            </scope>
            <scope doc="Calls a specific function exposed by the SWF&apos;s&#xA;ExternalInterface." ilk="function" name="callSWF" signature="callSWF(func, args)">
              <variable citdl="String" doc="the name of the function to call" ilk="argument" name="func" />
              <variable citdl="Object" doc="the set of arguments to pass to the function." ilk="argument" name="args" />
            </scope>
            <scope doc="Public accessor to the unique name of the SWF instance." ilk="function" name="toString" signature="toString() =&gt; String" />
            <variable citdl="Object" doc="The static collection of all instances of the SWFs on the page." name="_instances" />
            <variable citdl="String" doc="The DOM id of this instance of the element. Automatically generated." name="_id" />
          </scope>
          <scope classrefs="YAHOO.widget.DataTable" doc="The ScrollingDataTable class extends the DataTable class to provide&#xA;functionality for x-scrolling, y-scrolling, and xy-scrolling." ilk="class" name="ScrollingDataTable">
            <scope attributes="__ctor__" doc="The ScrollingDataTable class extends the DataTable class to provide&#xA;functionality for x-scrolling, y-scrolling, and xy-scrolling." ilk="function" name="ScrollingDataTable" signature="ScrollingDataTable(elContainer, aColumnDefs, oDataSource, oConfigs)">
              <variable citdl="HTMLElement" doc="Container element for the TABLE." ilk="argument" name="elContainer" />
              <variable citdl="Object[]" doc="Array of object literal Column definitions." ilk="argument" name="aColumnDefs" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="oDataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Clears stored scroll positions to interrupt the automatic restore mechanism.&#xA;Useful for setting scroll positions programmatically rather than as part of&#xA;the post-render cleanup process." ilk="function" name="clearScrollPositions" signature="clearScrollPositions()" />
            <scope doc="Handles Column mutations" ilk="function" name="onColumnChange" signature="onColumnChange(oArgs)">
              <variable citdl="Object" doc="Custom Event data." ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Scrolls to given row or cell" ilk="function" name="scrollTo" signature="scrollTo(to)">
              <variable citdl="YAHOO.widget.Record | HTMLElement " doc="Itme to scroll to." ilk="argument" name="to" />
            </scope>
            <scope doc="Sets given Column to given pixel width. If new width is less than minWidth&#xA;width, sets to minWidth. Updates oColumn.width value." ilk="function" name="setColumnWidth" signature="setColumnWidth(oColumn, nWidth)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="New width in pixels." ilk="argument" name="nWidth" />
            </scope>
            <scope doc="For one or all Columns of a ScrollingDataTable, when Column is not hidden,&#xA;and width is not set, syncs widths of header and body cells and &#xA;validates that width against minWidth and/or maxAutoWidth as necessary." ilk="function" name="validateColumnWidths" signature="validateColumnWidths(oArg.column)">
              <variable citdl="YAHOO.widget.Column" doc="(optional) One Column to validate. If null, all Columns&apos; widths are validated." ilk="argument" name="oArg.column" />
            </scope>
            <scope doc="Inserts given Column at the index if given, otherwise at the end. NOTE: You&#xA;can only add non-nested Columns and top-level parent Columns. You cannot add&#xA;a nested Column to an existing parent." ilk="function" name="insertColumn" signature="insertColumn(oColumn, index) =&gt; YAHOO.widget.Column">
              <variable citdl="Object | YAHOO.widget.Column" doc="Object literal Column&#xA;definition or a Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="(optional) New tree index." ilk="argument" name="index" />
            </scope>
            <scope doc="Implementation of Element&apos;s abstract method. Sets up config values." ilk="function" name="initAttributes" signature="initAttributes(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal definition of configuration values." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Helper function calculates and sets a validated width for a Column in a ScrollingDataTable." ilk="function" name="_validateColumnWidth" signature="_validateColumnWidth(oColumn, elTd)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="HTMLElement" doc="TD element to validate against." ilk="argument" name="elTd" />
            </scope>
            <scope doc="Sets focus on the given element." ilk="function" name="_focusEl" signature="_focusEl(el)">
              <variable citdl="HTMLElement" doc="Element." ilk="argument" name="el" />
            </scope>
            <scope doc="Snaps container height for x-scrolling tables in IE. Syncs message TBODY width." ilk="function" name="_syncScrollX" signature="_syncScrollX()" />
            <scope doc="Populates TH element for the body THEAD element." ilk="function" name="_initBdThEl" signature="_initBdThEl(elTh, oColumn)">
              <variable citdl="HTMLElement" doc="TH element reference." ilk="argument" name="elTh" />
              <variable citdl="YAHOO.widget.Column" doc="Column object." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Destroy&apos;s the DataTable body THEAD element, if available." ilk="function" name="_destroyBdTheadEl" signature="_destroyBdTheadEl()" />
            <scope doc="Initializes ScrollingDataTable TABLE elements into the two inner containers." ilk="function" name="_initTableEl" signature="_initTableEl()" />
            <scope doc="Initializes ScrollingDataTable THEAD elements into the two inner containers." ilk="function" name="_initTheadEl" signature="_initTheadEl(elHdTable, elTable)">
              <variable citdl="HTMLElement" doc="(optional) Fixed header TABLE element reference." ilk="argument" name="elHdTable" />
              <variable citdl="HTMLElement" doc="(optional) TABLE element reference." ilk="argument" name="elTable" />
            </scope>
            <scope doc="Displays message within secondary TBODY." ilk="function" name="showTableMessage" signature="showTableMessage(sHTML, sClassName)">
              <variable citdl="String" doc="(optional) Value for innerHTMlang." ilk="argument" name="sHTML" />
              <variable citdl="String" doc="(optional) Classname." ilk="argument" name="sClassName" />
            </scope>
            <scope doc="Snaps container width for y-scrolling tables." ilk="function" name="_syncScrollY" signature="_syncScrollY()" />
            <scope doc="Destroy&apos;s the DataTable head TABLE element, if available." ilk="function" name="_destroyHdTableEl" signature="_destroyHdTableEl()" />
            <scope doc="Returns DOM reference to the DataTable&apos;s fixed header TABLE element." ilk="function" name="getHdTableEl" signature="getHdTableEl() =&gt; HTMLElement" />
            <scope doc="Handles keydown events on the THEAD element." ilk="function" name="_onTheadKeydown" signature="_onTheadKeydown(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The key event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.ScrollingDataTable" doc="ScrollingDataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Returns DOM reference to the DataTable&apos;s scrolling body container element." ilk="function" name="getBdContainerEl" signature="getBdContainerEl() =&gt; HTMLElement" />
            <scope doc="Initializes DOM elements for a ScrollingDataTable, including creation of&#xA;two separate TABLE elements." ilk="function" name="_initDomElements" signature="_initDomElements(elContainer)">
              <variable citdl="HTMLElement | String} HTML DIV element by reference or ID. &#xA;return {Boolean" doc="False in case of error, otherwise true" ilk="argument" name="elContainer" />
            </scope>
            <scope doc="Syncs padding around scrollable tables, including Column header right-padding&#xA;and container width and height." ilk="function" name="_syncScroll" signature="_syncScroll()" />
            <scope doc="Disables ScrollingDataTable UI." ilk="function" name="disable" signature="disable()" />
            <scope doc="Sets Column header overhang to given width." ilk="function" name="_setOverhangValue" signature="_setOverhangValue(nBorderWidth)">
              <variable citdl="Number" doc="Value of new border for overhang." ilk="argument" name="nBorderWidth" />
            </scope>
            <scope doc="Creates HTML markup CAPTION element." ilk="function" name="_initCaptionEl" signature="_initCaptionEl(sCaption)">
              <variable citdl="String" doc="Text for caption." ilk="argument" name="sCaption" />
            </scope>
            <scope doc="Removes given Column. NOTE: You cannot remove nested Columns. You can only remove&#xA;non-nested Columns, and top-level parent Columns (which will remove all&#xA;children Columns)." ilk="function" name="removeColumn" signature="removeColumn(oColumn) =&gt; YAHOO.widget.Column">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Internal wrapper calls run() on render Chain instance." ilk="function" name="_runRenderChain" signature="_runRenderChain()" />
            <scope doc="Destroy&apos;s the DataTable outer and inner container elements, if available." ilk="function" name="_destroyContainerEl" signature="_destroyContainerEl(elContainer)">
              <variable citdl="HTMLElement" doc="Reference to the container element." ilk="argument" name="elContainer" />
            </scope>
            <scope doc="Returns DOM reference to the DataTable&apos;s scrolling body TABLE element." ilk="function" name="getBdTableEl" signature="getBdTableEl() =&gt; HTMLElement" />
            <scope doc="Returns DOM reference to the DataTable&apos;s fixed header container element." ilk="function" name="getHdContainerEl" signature="getHdContainerEl() =&gt; HTMLElement" />
            <scope doc="Syncs scrolltop and scrollleft of all TABLEs." ilk="function" name="_onScroll" signature="_onScroll(e, oSelf)">
              <variable citdl="HTMLEvent" doc="The scroll event." ilk="argument" name="e" />
              <variable citdl="YAHOO.widget.ScrollingDataTable" doc="ScrollingDataTable instance." ilk="argument" name="oSelf" />
            </scope>
            <scope doc="Restores scroll positions to stored value." ilk="function" name="_retoreScrollPositions" signature="_retoreScrollPositions()" />
            <scope doc="Initializes body THEAD element." ilk="function" name="_initBdTheadEl" signature="_initBdTheadEl(elTable) =&gt; HTMLElement">
              <variable citdl="HTMLElement" doc="TABLE element into which to create THEAD." ilk="argument" name="elTable" />
            </scope>
            <scope doc="Initializes ScrollingDataTable TBODY element for data" ilk="function" name="_initTbodyEl" signature="_initTbodyEl(elTable)">
              <variable citdl="HTMLElement" doc="TABLE element into which to create TBODY ." ilk="argument" name="elTable" />
            </scope>
            <scope doc="Stores scroll positions so they can be restored after a render." ilk="function" name="_storeScrollPositions" signature="_storeScrollPositions()" />
            <scope doc="Initializes the DataTable outer container element and creates inner header&#xA;and body container elements." ilk="function" name="_initContainerEl" signature="_initContainerEl(elContainer)">
              <variable citdl="HTMLElement | String" doc="HTML DIV element by reference or ID." ilk="argument" name="elContainer" />
            </scope>
            <scope doc="Removes given Column and inserts into given tree index. NOTE: You&#xA;can only reorder non-nested Columns and top-level parent Columns. You cannot&#xA;reorder a nested Column to an existing parent." ilk="function" name="reorderColumn" signature="reorderColumn(oColumn, index)">
              <variable citdl="YAHOO.widget.Column" doc="Column instance." ilk="argument" name="oColumn" />
              <variable citdl="Number" doc="New tree index." ilk="argument" name="index" />
            </scope>
            <scope doc="SDT changes ID so as not to duplicate the accessibility TH IDs." ilk="function" name="_initThEl" signature="_initThEl(elTh, oColumn)">
              <variable citdl="HTMLElement" doc="TH element reference." ilk="argument" name="elTh" />
              <variable citdl="YAHOO.widget.Column" doc="Column object." ilk="argument" name="oColumn" />
            </scope>
            <scope doc="Adds/removes Column header overhang as necesary." ilk="function" name="_syncScrollOverhang" signature="_syncScrollOverhang()" />
            <variable citdl="String" doc="Class name assigned to inner DataTable body container." name="DataTable.CLASS_BODY" />
            <variable citdl="HTMLElement" doc="Body THEAD element." name="_elBdThead" />
            <variable citdl="String" doc="Class name assigned to inner DataTable header container." name="DataTable.CLASS_HEADER" />
            <variable citdl="HTMLElement" doc="Container for fixed header TABLE element." name="_elHdContainer" />
            <variable citdl="HTMLElement" doc="Fixed header TABLE element." name="_elHdTable" />
            <variable citdl="HTMLElement" doc="Offscreen TABLE element for auto-width calculation." name="_elTmpTable" />
            <variable citdl="HTMLElement" doc="Offscreen container to temporarily clone SDT for auto-width calculation." name="_elTmpContainer" />
            <variable citdl="HTMLElement" doc="Container for scrolling body TABLE element." name="_elBdContainer" />
            <variable citdl="Boolean" doc="True if x-scrollbar is currently visible." name="_bScrollbarX" />
          </scope>
          <scope doc="Functionality common to most series. Generally, a &lt;code&gt;Series&lt;/code&gt; &#xA;object shouldn&apos;t be instantiated directly. Instead, a subclass with a &#xA;concrete implementation should be used." ilk="class" name="Series">
            <scope attributes="__ctor__" doc="Functionality common to most series. Generally, a &lt;code&gt;Series&lt;/code&gt; &#xA;object shouldn&apos;t be instantiated directly. Instead, a subclass with a &#xA;concrete implementation should be used." ilk="function" name="Series" signature="Series()" />
            <variable citdl="String" doc="The type of series." name="type" />
            <variable citdl="String" doc="The human-readable name of the series." name="displayName" />
          </scope>
          <scope classrefs="YAHOO.widget.Dialog" doc="SimpleDialog is a simple implementation of Dialog that can be used to &#xA;submit a single value. Forms can be processed in 3 ways -- via an &#xA;asynchronous Connection utility call, a simple form POST or GET, &#xA;or manually." ilk="class" name="SimpleDialog">
            <scope attributes="__ctor__" doc="SimpleDialog is a simple implementation of Dialog that can be used to &#xA;submit a single value. Forms can be processed in 3 ways -- via an &#xA;asynchronous Connection utility call, a simple form POST or GET, &#xA;or manually." ilk="function" name="SimpleDialog" signature="SimpleDialog(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the SimpleDialog &#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the SimpleDialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing &#xA;the configuration that should be set for this SimpleDialog. See &#xA;configuration documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="Fired when the &quot;icon&quot; property is set." ilk="function" name="configIcon" signature="configIcon(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The SimpleDialog initialization method, which is executed for &#xA;SimpleDialog and all of its subclasses. This method is automatically &#xA;called by the constructor, and  sets up all DOM references for &#xA;pre-existing markup, and creates required markup if it is not &#xA;already present." ilk="function" name="init" signature="init(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the SimpleDialog &#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the SimpleDialog" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal &#xA;containing the configuration that should be set for this &#xA;SimpleDialog. See configuration documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="&lt;p&gt;&#xA;Sets the SimpleDialog&apos;s body content to the HTML specified. &#xA;If no body is present, one will be automatically created. &#xA;An empty string can be passed to the method to clear the contents of the body.&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; SimpleDialog provides the &lt;a href=&quot;#config_text&quot;&gt;text&lt;/a&gt;&#xA;and &lt;a href=&quot;#config_icon&quot;&gt;icon&lt;/a&gt; configuration properties to set the contents&#xA;of it&apos;s body element in accordance with the UI design for a SimpleDialog (an &#xA;icon and message text). Calling setBody on the SimpleDialog will not enforce this &#xA;UI design constraint and will replace the entire contents of the SimpleDialog body. &#xA;It should only be used if you wish the replace the default icon/text body structure &#xA;of a SimpleDialog with your own custom markup.&lt;/p&gt;" ilk="function" name="setBody" signature="setBody(bodyContent, bodyContent, bodyContent)">
              <variable citdl="String" doc="The HTML used to set the body. &#xA;As a convenience, non HTMLElement objects can also be passed into &#xA;the method, and will be treated as strings, with the body innerHTML&#xA;set to their default toString implementations.&#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="bodyContent" />
              <variable citdl="HTMLElement" doc="The HTMLElement to add as the first and only child of the body element.&#xA;&lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="bodyContent" />
              <variable citdl="DocumentFragment" doc="The document fragment &#xA;containing elements which are to be added to the body" ilk="argument" name="bodyContent" />
            </scope>
            <scope doc="Returns a string representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Fired when the &quot;text&quot; property is set." ilk="function" name="configText" signature="configText(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Prepares the SimpleDialog&apos;s internal FORM object, creating one if one &#xA;is not currently present, and adding the value hidden field." ilk="function" name="registerForm" signature="registerForm()" />
            <scope doc="Initializes the class&apos;s configurable properties which can be changed &#xA;using the SimpleDialog&apos;s Config object (cfg)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <variable citdl="String" doc="Constant representing the default CSS class used for a SimpleDialog" name="YAHOO.widget.SimpleDialog.CSS_SIMPLEDIALOG" />
            <variable citdl="String" doc="Constant for the standard network icon for info" name="YAHOO.widget.SimpleDialog.ICON_INFO" />
            <variable citdl="String" doc="Constant representing the name of the CSS class applied to the element &#xA;created by the &quot;icon&quot; configuration property." name="YAHOO.widget.SimpleDialog.ICON_CSS_CLASSNAME" />
            <variable citdl="String" doc="Constant for the standard network icon for a blocking action" name="YAHOO.widget.SimpleDialog.ICON_BLOCK" />
            <variable citdl="String" doc="Constant for the standard network icon for warn" name="YAHOO.widget.SimpleDialog.ICON_WARN" />
            <variable citdl="String" doc="Constant for the standard network icon for alarm" name="YAHOO.widget.SimpleDialog.ICON_ALARM" />
            <variable citdl="String" doc="Constant for the standard network icon for a tip" name="YAHOO.widget.SimpleDialog.ICON_TIP" />
            <variable citdl="String" doc="Constant for the standard network icon for help" name="YAHOO.widget.SimpleDialog.ICON_HELP" />
            <variable citdl="Object" doc="Constant representing the SimpleDialog&apos;s configuration properties" name="DEFAULT_CONFIG" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization." ilk="class" name="SimpleEditor">
            <scope attributes="__ctor__" doc="The Rich Text Editor is a UI control that replaces a standard HTML textarea; it allows for the rich formatting of text content, including common structural treatments like lists, formatting treatments like bold and italic text, and drag-and-drop inclusion and sizing of images. The Rich Text Editor&apos;s toolbar is extensible via a plugin architecture so that advanced implementations can achieve a high degree of customization." ilk="function" name="SimpleEditor" signature="SimpleEditor(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The textarea element to turn into an editor." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Sets the current event property" ilk="function" name="_setCurrentEvent" signature="_setCurrentEvent(ev)">
              <variable citdl="Event" doc="The event to cache" ilk="argument" name="ev" />
            </scope>
            <scope doc="This method needs to be called if the Editor was hidden (like in a TabView or Panel). It is used to reset the editor after being in a container that was set to display none." ilk="function" name="show" signature="show()" />
            <scope doc="Attempt to set the focus of the iframes window." ilk="function" name="focus" signature="focus()" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;inserthtml&apos;) is used." ilk="function" name="cmd_inserthtml" signature="cmd_inserthtml(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create &#xA;the editor." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the editor." ilk="argument" name="attr" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;bold&apos;) is used." ilk="function" name="cmd_bold" signature="cmd_bold(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Filters invalid ol and ul list markup, converts this: &lt;li&gt;&lt;/li&gt;&lt;ol&gt;..&lt;/ol&gt; to this: &lt;li&gt;&lt;/li&gt;&lt;li&gt;&lt;ol&gt;..&lt;/ol&gt;&lt;/li&gt;" ilk="function" name="filter_invalid_lists" signature="filter_invalid_lists(String)">
              <variable doc="html The HTML string to filter" ilk="argument" name="String" />
            </scope>
            <scope doc="Called from a setTimeout loop to check if the iframes body.onload event has fired, then it will init the editor." ilk="function" name="_checkLoaded" signature="_checkLoaded(raw)">
              <variable citdl="Boolean" doc="Don&apos;t add events." ilk="argument" name="raw" />
            </scope>
            <scope doc="This method removes the listeners on the Editors document (for disabling)." ilk="function" name="_removeEditorEvents" signature="_removeEditorEvents()" />
            <scope doc="Toggles the designMode property of the iFrame document on and off." ilk="function" name="_toggleDesignMode" signature="_toggleDesignMode() =&gt; String" />
            <scope doc="Sets up the DD instance used from the &apos;drag&apos; config option." ilk="function" name="_setupDD" signature="_setupDD()" />
            <scope doc="Fix href and imgs as well as remove invalid HTML." ilk="function" name="_fixNodes" signature="_fixNodes()" />
            <scope doc="Fires after a nodeChange happens to setup the things that where reset on the node change (button state)." ilk="function" name="_handleAfterNodeChange" signature="_handleAfterNodeChange()" />
            <scope doc="Some browsers will duplicate the id of an LI when created in designMode.&#xA;This method will fix the duplicate id issue. However it will only preserve the first element &#xA;in the document list with the unique id." ilk="function" name="_fixListDupIds" signature="_fixListDupIds()" />
            <scope doc="The Editor class&apos; initialization method" ilk="function" name="init" signature="init()" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;insertunorderedlist&apos;) is used." ilk="function" name="cmd_insertunorderedlist" signature="cmd_insertunorderedlist(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Handles the form submission." ilk="function" name="_handleFormSubmit" signature="_handleFormSubmit(ev)">
              <variable citdl="Object" doc="The Form Submit Event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Handles all mousedown events inside the iFrame document." ilk="function" name="_handleMouseDown" signature="_handleMouseDown(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="Handles the focus of the iframe. Note, this is window focus event, not an Editor focus event." ilk="function" name="_handleFocus" signature="_handleFocus(e)">
              <variable citdl="Event" doc="The DOM Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Handles the font size button in the toolbar." ilk="function" name="_handleFontSize" signature="_handleFontSize(o)">
              <variable citdl="Object" doc="Object returned from Toolbar&apos;s buttonClick Event" ilk="argument" name="o" />
            </scope>
            <scope doc="This method sets up the listeners on the Editors document." ilk="function" name="_initEditorEvents" signature="_initEditorEvents()" />
            <scope doc="Handles setting up the toolbar buttons, getting the Dom path, fixing nodes." ilk="function" name="nodeChange" signature="nodeChange(force)">
              <variable citdl="Boolean" doc="Optional paramenter to skip the threshold counter" ilk="argument" name="force" />
            </scope>
            <scope doc="Gets the menu from a button instance, if the menu is not rendered it will render it. It will then search the menu for the specified value, unchecking all other items and checking the specified on." ilk="function" name="_updateMenuChecked" signature="_updateMenuChecked(button, value, The)">
              <variable citdl="Object" doc="The command identifier of the button you want to check" ilk="argument" name="button" />
              <variable citdl="String" doc="The value of the menu item you want to check" ilk="argument" name="value" />
              <variable citdl="&lt;a href=&quot;YAHOO.widget.Toolbar.html&quot;&gt;YAHOO.widget.Toolbar&lt;/a&gt;" doc="Toolbar instance the button belongs to (defaults to this.toolbar)" ilk="argument" name="The" />
            </scope>
            <scope doc="Makes a useable classname from dynamic data, by dropping it to lowercase and replacing spaces with -&apos;s." ilk="function" name="_cleanClassName" signature="_cleanClassName(str) =&gt; String">
              <variable citdl="String" doc="The classname to clean up" ilk="argument" name="str" />
            </scope>
            <scope doc="Sets the designMode property of the iFrame document&apos;s body." ilk="function" name="_setDesignMode" signature="_setDesignMode(state)">
              <variable citdl="String" doc="This should be either on or off" ilk="argument" name="state" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;fontname&apos;) is used." ilk="function" name="cmd_fontname" signature="cmd_fontname(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Handles all mouseup events inside the iFrame document." ilk="function" name="_handleMouseUp" signature="_handleMouseUp(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="Causes the toolbar and the editor to render and replace the textarea." ilk="function" name="_render" signature="_render()" />
            <scope doc="Handles the different selection objects across the A-Grade list." ilk="function" name="_getSelection" signature="_getSelection() =&gt; Object" />
            <scope doc="_createIframe" ilk="function" name="_createIframe" signature="_createIframe(id) =&gt; Object">
              <variable citdl="String" doc="The string ID to prefix the iframe with" ilk="argument" name="id" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;forecolor&apos;) is used." ilk="function" name="cmd_forecolor" signature="cmd_forecolor(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Handles the blur of the iframe. Note, this is window blur event, not an Editor blur event." ilk="function" name="_handleBlur" signature="_handleBlur(e)">
              <variable citdl="Event" doc="The DOM Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Get the Document of the IFRAME" ilk="function" name="_getDoc" signature="_getDoc() =&gt; Object" />
            <scope doc="Converts all RGB color strings found in passed string to a hex color, example: style=&quot;color: rgb(0, 255, 0)&quot; converts to style=&quot;color: #00ff00&quot;" ilk="function" name="filter_all_rgb" signature="filter_all_rgb(String) =&gt; ">
              <variable doc="str The HTML string to filter" ilk="argument" name="String" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;italic&apos;) is used." ilk="function" name="cmd_italic" signature="cmd_italic(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Handles the closing of the Image Properties Window." ilk="function" name="_handleInsertImageWindowClose" signature="_handleInsertImageWindowClose()" />
            <scope doc="This is an event handler attached to the Toolbar&apos;s buttonClick event. It will fire execCommand with the command identifier from the Toolbar Button." ilk="function" name="_handleToolbarClick" signature="_handleToolbarClick(ev)">
              <variable citdl="Event" doc="The event that triggered the button click" ilk="argument" name="ev" />
            </scope>
            <scope doc="Converts an RGB color string to a hex color, example: rgb(0, 255, 0) converts to #00ff00" ilk="function" name="filter_rgb" signature="filter_rgb(String) =&gt; ">
              <variable doc="css The CSS string containing rgb(#,#,#);" ilk="argument" name="String" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;createlink&apos;) is used." ilk="function" name="cmd_createlink" signature="cmd_createlink(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;insertorderedlist &apos;) is used." ilk="function" name="cmd_insertorderedlist" signature="cmd_insertorderedlist(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Creates a mask to place over the Editor." ilk="function" name="_disableEditor" signature="_disableEditor(disabled)">
              <variable citdl="Boolean" doc="Pass true to disable, false to enable" ilk="argument" name="disabled" />
            </scope>
            <scope doc="Override Method for Advanced Editor" ilk="function" name="closeWindow" signature="closeWindow()" />
            <scope doc="Returns a string representing the editor." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;insertimage&apos;) is used." ilk="function" name="cmd_insertimage" signature="cmd_insertimage(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Gets the unprocessed/unfiltered HTML from the editor" ilk="function" name="getEditorHTML" signature="getEditorHTML()" />
            <scope doc="Cleans the HTML with the cleanHTML method then places that string back into the textarea." ilk="function" name="saveHTML" signature="saveHTML() =&gt; " />
            <scope doc="Creates the accessibility h2 header and places it after the iframe in the Dom for navigation." ilk="function" name="_setupAfterElement" signature="_setupAfterElement()" />
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;underline&apos;) is used." ilk="function" name="cmd_underline" signature="cmd_underline(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This method will attempt to build the DOM path from the currently selected element." ilk="function" name="_getDomPath" signature="_getDomPath(HTMLElement) =&gt; Array">
              <variable doc="el The element to start with, if not provided _getSelectedElement is used" ilk="argument" name="HTMLElement" />
            </scope>
            <scope doc="_hasParent" ilk="function" name="_hasParent" signature="_hasParent(el, tag) =&gt; ">
              <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="el" />
              <variable citdl="String" doc="The tag that the element needs to be" ilk="argument" name="tag" />
            </scope>
            <scope doc="Handles the Enter key, Tab Key and Shift + Tab keys for List Items." ilk="function" name="_listFix" signature="_listFix(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="This is a work around for the various browser issues with execCommand. This method will run &lt;code&gt;execCommand(&apos;fontname&apos;, false, &apos;yui-tmp&apos;)&lt;/code&gt; on the given selection.&#xA;It will then search the document for an element with the font-family set to &lt;strong&gt;yui-tmp&lt;/strong&gt; and replace that with another span that has other information in it, then assign the new span to the &#xA;&lt;code&gt;this.currentElement&lt;/code&gt; array, so we now have element references to the elements that were just modified. At this point we can use standard DOM manipulation to change them as we see fit." ilk="function" name="_createCurrentElement" signature="_createCurrentElement(tagName, tagStyle)">
              <variable citdl="String" doc="(optional defaults to a) The tagname of the element that you wish to create" ilk="argument" name="tagName" />
              <variable citdl="Object" doc="(optional) Object literal containing styles to apply to the new element." ilk="argument" name="tagStyle" />
            </scope>
            <scope doc="Process the HTML with a few regexes to clean it up and stabilize the output" ilk="function" name="cleanHTML" signature="cleanHTML(html) =&gt; String">
              <variable citdl="String" doc="The unfiltered HTML" ilk="argument" name="html" />
            </scope>
            <scope doc="Handles all keydown events inside the iFrame document." ilk="function" name="_handleKeyDown" signature="_handleKeyDown(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="Override Method for Advanced Editor" ilk="function" name="_closeWindow" signature="_closeWindow()" />
            <scope doc="Fired from nodeChange in a setTimeout." ilk="function" name="_nodeChange" signature="_nodeChange(force)">
              <variable citdl="Boolean" doc="Optional paramenter to skip the threshold counter" ilk="argument" name="force" />
            </scope>
            <scope doc="Calls the private method _render in a setTimeout to allow for other things on the page to continue to load." ilk="function" name="render" signature="render()" />
            <scope doc="Loads HTML into the editors body" ilk="function" name="setEditorHTML" signature="setEditorHTML(incomingHTML)">
              <variable citdl="String" doc="The html content to load into the editor" ilk="argument" name="incomingHTML" />
            </scope>
            <scope doc="Process the HTML with a few regexes to clean it up and stabilize the input" ilk="function" name="_cleanIncomingHTML" signature="_cleanIncomingHTML(html) =&gt; String">
              <variable citdl="String" doc="The unfiltered HTML" ilk="argument" name="html" />
            </scope>
            <scope doc="Checks to see if a string (href or img src) is possibly a local file reference.." ilk="function" name="_isLocalFile" signature="_isLocalFile(url)">
              <variable citdl="String" doc="THe url/string to check" ilk="argument" name="url" />
            </scope>
            <scope doc="This function will create a new element in the DOM and populate it with the contents of another element. Then it will assume it&apos;s place." ilk="function" name="_swapEl" signature="_swapEl(el, tagName, callback)">
              <variable citdl="HTMLElement" doc="The element to swap with" ilk="argument" name="el" />
              <variable citdl="String" doc="The tagname of the element that you wish to create" ilk="argument" name="tagName" />
              <variable citdl="Function" doc="(optional) A function to run on the element after it is created, but before it is replaced. An element reference is passed to this function." ilk="argument" name="callback" />
            </scope>
            <scope doc="Override Method for Advanced Editor" ilk="function" name="openWindow" signature="openWindow()" />
            <scope doc="HTML Pre Filter" ilk="function" name="pre_filter_linebreaks" signature="pre_filter_linebreaks(String, String) =&gt; ">
              <variable doc="html The HTML to filter" ilk="argument" name="String" />
              <variable doc="markup The markup type to filter to" ilk="argument" name="String" />
            </scope>
            <scope doc="This method will attempt to locate the element that was last interacted with, either via selection, location or event." ilk="function" name="_getSelectedElement" signature="_getSelectedElement() =&gt; HTMLElement" />
            <scope doc="Clear the doc of the Editor" ilk="function" name="clearEditorDoc" signature="clearEditorDoc()" />
            <scope doc="Opens the Image Properties Window when the insert Image button is clicked or an Image is Double Clicked." ilk="function" name="_handleInsertImageClick" signature="_handleInsertImageClick()" />
            <scope doc="Handles all keypress events inside the iFrame document." ilk="function" name="_handleKeyPress" signature="_handleKeyPress(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="Determines if there is a selection in the editor document." ilk="function" name="_hasSelection" signature="_hasSelection() =&gt; Boolean" />
            <scope doc="Handles the colorpicker buttons in the toolbar." ilk="function" name="_handleColorPicker" signature="_handleColorPicker(o)">
              <variable citdl="Object" doc="Object returned from Toolbar&apos;s buttonClick Event" ilk="argument" name="o" />
            </scope>
            <scope doc="Places the highlight around a given node" ilk="function" name="_selectNode" signature="_selectNode(node)">
              <variable citdl="HTMLElement" doc="The node to select" ilk="argument" name="node" />
            </scope>
            <scope doc="Handles resizing the editor&apos;s height based on the content" ilk="function" name="_handleAutoHeight" signature="_handleAutoHeight()" />
            <scope doc="Handles the alignment buttons in the toolbar." ilk="function" name="_handleAlign" signature="_handleAlign(o)">
              <variable citdl="Object" doc="Object returned from Toolbar&apos;s buttonClick Event" ilk="argument" name="o" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;backcolor&apos;) is used." ilk="function" name="cmd_backcolor" signature="cmd_backcolor(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Override Method for Advanced Editor" ilk="function" name="moveWindow" signature="moveWindow()" />
            <scope doc="Attempt to set the focus of the iframes window." ilk="function" name="_focusWindow" signature="_focusWindow()" />
            <scope doc="Creates a new &quot;currentElement&quot; then adds some text (and other things) to make it selectable and stylable. Then the user can continue typing." ilk="function" name="_createInsertElement" signature="_createInsertElement(css) =&gt; HTMLElement">
              <variable citdl="Object" doc="(optional) Object literal containing styles to apply to the new element." ilk="argument" name="css" />
            </scope>
            <scope doc="Method is called at the beginning of all event handlers to check if this element or a parent element has the class yui-noedit (this.CLASS_NOEDIT) applied.&#xA;If it does, then this method will stop the event and return true. The event handlers will then return false and stop the nodeChange from occuring. This method will also&#xA;disable and enable the Editor&apos;s toolbar based on the noedit state." ilk="function" name="_isNonEditable" signature="_isNonEditable(Event) =&gt; ">
              <variable doc="ev The Dom event being checked" ilk="argument" name="Event" />
            </scope>
            <scope doc="_isElement" ilk="function" name="_isElement" signature="_isElement(el, tag) =&gt; Boolean">
              <variable citdl="HTMLElement" doc="The element to check" ilk="argument" name="el" />
              <variable citdl="String" doc="The tag that the element needs to be" ilk="argument" name="tag" />
            </scope>
            <scope doc="This method is fired from _checkLoaded when the document is ready. It turns on designMode and set&apos;s up the listeners." ilk="function" name="_initEditor" signature="_initEditor(raw)">
              <variable citdl="Boolean" doc="Don&apos;t add events." ilk="argument" name="raw" />
            </scope>
            <scope doc="Handles all keyup events inside the iFrame document." ilk="function" name="_handleKeyUp" signature="_handleKeyUp(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="The click listener assigned to each submit button in the Editor&apos;s parent form." ilk="function" name="_handleFormButtonClick" signature="_handleFormButtonClick(ev)">
              <variable citdl="Event" doc="The click event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Handles the opening of the Link Properties Window when the Create Link button is clicked or an href is doubleclicked." ilk="function" name="_handleCreateLinkClick" signature="_handleCreateLinkClick()" />
            <scope doc="Retrieves the full url of the image to use as the blank image." ilk="function" name="_getBlankImage" signature="_getBlankImage() =&gt; String" />
            <scope doc="This method will turn on/off the useCSS execCommand." ilk="function" name="_setMarkupType" signature="_setMarkupType(action)">
              <variable citdl="String" doc="The action to take. Possible values are: css, default or semantic" ilk="argument" name="action" />
            </scope>
            <scope doc="Filters strings specific to Safari" ilk="function" name="filter_safari" signature="filter_safari(String) =&gt; ">
              <variable doc="html The HTML string to filter" ilk="argument" name="String" />
            </scope>
            <scope doc="Destroys the editor, all of it&apos;s elements and objects." ilk="function" name="destroy" signature="destroy() =&gt; Boolean" />
            <scope doc="Handles the closing of the Link Properties Window." ilk="function" name="_handleCreateLinkWindowClose" signature="_handleCreateLinkWindowClose()" />
            <scope doc="Filters internal RTE strings and bogus attrs we don&apos;t want" ilk="function" name="filter_internals" signature="filter_internals(String) =&gt; ">
              <variable doc="html The HTML string to filter" ilk="argument" name="String" />
            </scope>
            <scope doc="This is a combined execCommand override method. It is called from the cmd_insertorderedlist and cmd_insertunorderedlist methods." ilk="function" name="cmd_list" signature="cmd_list(tag)">
              <variable doc="The tag of the list you want to create (eg, ul or ol)" ilk="argument" name="tag" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;fontsize&apos;) is used." ilk="function" name="cmd_fontsize" signature="cmd_fontsize(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="This method will open the iframes content document and write the textareas value into it, then start the body.onload checking." ilk="function" name="_setInitialContent" signature="_setInitialContent(raw)">
              <variable citdl="Boolean" doc="Don&apos;t add events." ilk="argument" name="raw" />
            </scope>
            <scope doc="Handles all doubleclick events inside the iFrame document." ilk="function" name="_handleDoubleClick" signature="_handleDoubleClick(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="Filters out msword html attributes and other junk. Activate with filterWord: true in config" ilk="function" name="filter_msword" signature="filter_msword(String)">
              <variable doc="html The HTML string to filter" ilk="argument" name="String" />
            </scope>
            <scope doc="This method needs to be called if the Editor is to be hidden (like in a TabView or Panel). It should be called to clear timeouts and close open editor windows." ilk="function" name="hide" signature="hide()" />
            <scope doc="HTML Pre Filter" ilk="function" name="post_filter_linebreaks" signature="post_filter_linebreaks(String, String) =&gt; ">
              <variable doc="html The HTML to filter" ilk="argument" name="String" />
              <variable doc="markup The markup type to filter to" ilk="argument" name="String" />
            </scope>
            <scope doc="This is an execCommand override method. It is called from execCommand when the execCommand(&apos;unlink&apos;) is used." ilk="function" name="cmd_unlink" signature="cmd_unlink(value)">
              <variable doc="Value passed from the execCommand method" ilk="argument" name="value" />
            </scope>
            <scope doc="Get the Window of the IFRAME" ilk="function" name="_getWindow" signature="_getWindow() =&gt; Object" />
            <scope doc="Write the current DOM path out to the dompath container below the editor." ilk="function" name="_writeDomPath" signature="_writeDomPath()" />
            <scope doc="Handles all click events inside the iFrame document." ilk="function" name="_handleClick" signature="_handleClick(ev)">
              <variable citdl="Event" doc="The event we are working on." ilk="argument" name="ev" />
            </scope>
            <scope doc="This method attempts to try and level the differences in the various browsers and their support for execCommand actions" ilk="function" name="execCommand" signature="execCommand(action, value)">
              <variable citdl="String" doc="The &quot;execCommand&quot; action to try to execute (Example: bold, insertimage, inserthtml)" ilk="argument" name="action" />
              <variable citdl="String" doc="(optional) The value for a given action such as action: fontname value: &apos;Verdana&apos;" ilk="argument" name="value" />
            </scope>
            <scope doc="Checks a keyMap entry against a key event" ilk="function" name="_checkKey" signature="_checkKey(k, e) =&gt; Boolean">
              <variable citdl="Object" doc="The _keyMap object" ilk="argument" name="k" />
              <variable citdl="Event" doc="The Mouse Event" ilk="argument" name="e" />
            </scope>
            <scope doc="Handles the different range objects across the A-Grade list." ilk="function" name="_getRange" signature="_getRange() =&gt; Object" />
            <scope doc="Creates the Resize instance and binds its events." ilk="function" name="_setupResize" signature="_setupResize()" />
            <scope doc="Set the editor to use CSS instead of HTML" ilk="function" name="_setEditorStyle" signature="_setEditorStyle(stat)">
              <variable citdl="Booleen" doc="True/False" ilk="argument" name="stat" />
            </scope>
            <variable citdl="String" doc="Default CSS class to apply to the editors iframe&apos;s parent element" name="CLASS_EDITABLE_CONT" />
            <variable citdl="Object" doc="The Toolbar items that should ALWAYS be disabled event if there is a selection present in the editor." name="_alwaysDisabled" />
            <variable citdl="Boolean" doc="Don&apos;t load the blank image more than once.." name="_blankImageLoaded" />
            <variable citdl="Boolean" doc="Status of the hidden elements button" name="_showingHiddenElements" />
            <variable citdl="HTMLElement" doc="A reference to the H2 placed after the editor for Accessibilty." name="afterElement" />
            <variable citdl="String" doc="The base location of the editable page (this page) so that relative paths for image work." name="_baseHREF" />
            <variable citdl="Array" doc="The Toolbar items that should be disabled if there is no selection present in the editor." name="_disabled" />
            <variable citdl="Object" doc="Holder for caching iframe selections" name="_selection" />
            <variable citdl="String" doc="The default CSS used in the config for &apos;css&apos;. This way you can add to the config like this: { css: YAHOO.widget.SimpleEditor.prototype._defaultCSS + &apos;ADD MYY CSS HERE&apos; }" name="_defaultCSS" />
            <variable citdl="Array" doc="Array of buttons that are in the Editor&apos;s parent form (for handleSubmit)" name="_formButtons" />
            <variable citdl="Boolean" doc="Flag to determine if DOM is ready or not" name="DOMReady" />
            <variable citdl="Object" doc="A tag map of HTML tags to convert to the different types of commands so we can select the proper toolbar button." name="_tag2cmd" />
            <variable doc="The default config for the Resize Utility" name="_resizeConfig" />
            <variable citdl="Event" doc="Flag to determine the last event that fired a node change" name="_lastNodeChangeEvent" />
            <variable citdl="Boolean" doc="Set to true when you want the default nodeChange function to not process anything" name="STOP_NODE_CHANGE" />
            <variable citdl="Boolean" doc="Flag to determine if we are using a textarea or an HTML Node." name="_textarea" />
            <variable citdl="Event" doc="A reference to the current editor event" name="currentEvent" />
            <variable citdl="String" doc="The Title of the HTML document that is created in the iFrame" name="STR_TITLE" />
            <variable citdl="Boolean" doc="Flag to determine if editor has been rendered or not" name="_rendered" />
            <variable citdl="String" doc="The label string for the Link URL." name="STR_LINK_URL" />
            <variable citdl="String" doc="Default prefix for dynamically created class names" name="CLASS_PREFIX" />
            <variable citdl="Boolean" doc="Keeps more than one _fixListDupIds from running at the same time." name="_fixListRunning" />
            <variable citdl="Boolean" doc="Set to true when you want the default execCommand function to not process anything" name="STOP_EXEC_COMMAND" />
            <variable citdl="YAHOO.util.Resize" doc="A reference to the Resize object" name="resize" />
            <variable citdl="String" doc="The accessibility string for the element before the iFrame" name="STR_BEFORE_EDITOR" />
            <variable citdl="Object" doc="The Toolbar commands that we should attempt to make tags out of instead of using styles." name="_semantic" />
            <variable citdl="Object" doc="The Toolbar items that should ALWAYS be enabled event if there isn&apos;t a selection present in the editor." name="_alwaysEnabled" />
            <variable citdl="String" doc="The value to place in between the Dom path items" name="SEP_DOMPATH" />
            <variable citdl="Boolean" doc="This flag will be set when certain things in the Editor happen. It is to be used by the developer to check to see if content has changed." name="editorDirty" />
            <variable citdl="HTMLElement" doc="Safari reference for the last image selected (for styling as selected)." name="_lastImage" />
            <variable citdl="Date" doc="Flag to determine when the last node change was fired" name="_lastNodeChange" />
            <variable citdl="YAHOO.util.DD/YAHOO.util.DDProxy" doc="A reference to the DragDrop object." name="dd" />
            <variable citdl="Number" doc="Counter to check the number of times the body is polled for before giving up" name="_contentTimerCounter" />
            <variable citdl="Object" doc="The last button pressed, so we don&apos;t disable it." name="_lastButton" />
            <variable citdl="Number" doc="Holds a reference to the nodeChange setTimeout call" name="_nodeChangeTimer" />
            <variable citdl="Date" doc="Holder for the fixNodes timer" name="_fixNodesTimer" />
            <variable doc="The number of times the loaded content should be checked before giving up. Default: 500" name="_contentTimerMax" />
            <variable citdl="Object" doc="A reference to the currently open EditorWindow" name="currentWindow" />
            <variable citdl="String" doc="The accessibility string for the element after the iFrame" name="STR_LEAVE_EDITOR" />
            <variable citdl="Number" doc="Holds a reference to the nodeChangeDelay setTimeout call" name="_nodeChangeDelayTimer" />
            <variable citdl="String" doc="Default CSS class to apply to the editors container element" name="CLASS_CONTAINER" />
            <variable citdl="{Object/Mixed}" doc="Named key maps for various actions in the Editor. Example: &lt;code&gt;CLOSE_WINDOW: { key: 87, mods: [&apos;shift&apos;, &apos;ctrl&apos;] }&lt;/code&gt;. &#xA;This entry shows that when key 87 (W) is found with the modifiers of shift and control, the window will close. You can customize this object to tweak keyboard shortcuts." name="_keyMap" />
            <variable citdl="HTMLElement" doc="The form button that was clicked to submit the form." name="_formButtonClicked" />
            <variable citdl="&lt;a href=&quot;YAHOO.widget.Toolbar.html&quot;&gt;YAHOO.widget.Toolbar&lt;/a&gt;" doc="Local property containing the &lt;a href=&quot;YAHOO.widget.Toolbar.html&quot;&gt;YAHOO.widget.Toolbar&lt;/a&gt; instance" name="toolbar" />
            <variable citdl="String" doc="The DOCTYPE to use in the editable container." name="_docType" />
            <variable citdl="String" doc="The label string for Image URL" name="STR_IMAGE_URL" />
            <variable citdl="String" doc="Default CSS class to apply to the editors iframe element" name="CLASS_EDITABLE" />
            <variable citdl="String" doc="The text to place in the URL textbox when using the blankimage." name="STR_IMAGE_HERE" />
            <variable citdl="Object" doc="DOM Element holder for the editor Mask when disabled" name="_mask" />
            <variable citdl="Object" doc="setTimeout holder for Opera and Image DoubleClick event.." name="operaEvent" />
            <variable citdl="String" doc="CSS class applied to elements that are not editable." name="CLASS_NOEDIT" />
            <variable citdl="HTMLElement" doc="A reference to the H2 placed before the editor for Accessibilty." name="beforeElement" />
            <variable citdl="Array" doc="A reference to the current working element in the editor" name="currentElement" />
            <variable doc="setTimeout holder for documentReady check" name="_contentTimer" />
            <variable citdl="HTMLElement" doc="A reference to the dompath container for writing the current working dom path to." name="dompath" />
            <variable citdl="Boolean" doc="Holder for trapping focus/blur state and prevent double events" name="_focused" />
            <variable citdl="String" doc="A cache of the last execCommand (used for Undo/Redo so they don&apos;t mark an undo level)" name="_lastCommand" />
            <variable citdl="Object" doc="Default toolbar config." name="_defaultToolbar" />
            <variable citdl="Object" doc="Contains a list of HTML elements that are invalid inside the editor. They will be removed when they are found. If you set the value of a key to &quot;{ keepContents: true }&quot;, then the element will be replaced with a yui-non span to be filtered out when cleanHTML is called. The only tag that is ignored here is the span tag as it will force the Editor into a loop and freeze the browser. However.. all of these tags will be removed in the cleanHTML routine." name="invalidHTML" />
            <variable citdl="HTMLElement" doc="A reference to the last font selected from the Toolbar" name="currentFont" />
            <variable citdl="Object" doc="Standard browser detection" name="browser" />
          </scope>
          <scope classrefs="YAHOO.util.DragDrop" doc="A DragDrop implementation that can be used as a background for a&#xA;slider.  It takes a reference to the thumb instance &#xA;so it can delegate some of the events to it.  The goal is to make the &#xA;thumb jump to the location on the background when the background is &#xA;clicked." ilk="class" name="Slider">
            <scope attributes="__ctor__" doc="A DragDrop implementation that can be used as a background for a&#xA;slider.  It takes a reference to the thumb instance &#xA;so it can delegate some of the events to it.  The goal is to make the &#xA;thumb jump to the location on the background when the background is &#xA;clicked." ilk="function" name="Slider" signature="Slider(id, sGroup, oThumb, sType)">
              <variable citdl="String" doc="The id of the element linked to this instance" ilk="argument" name="id" />
              <variable citdl="String" doc="The group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="SliderThumb" doc="The thumb for this slider" ilk="argument" name="oThumb" />
              <variable citdl="String" doc="The type of slider (horiz, vert, region)" ilk="argument" name="sType" />
            </scope>
            <scope doc="Factory method for creating a horizontal dual-thumb slider" ilk="function" name="YAHOO.widget.Slider.getHorizDualSlider" signature="YAHOO.widget.Slider.getHorizDualSlider(bg, minthumb, maxthumb, range, iTickSize, initVals) =&gt; DualSlider">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="bg" />
              <variable citdl="String" doc="the id of the min thumb" ilk="argument" name="minthumb" />
              <variable citdl="String" doc="the id of the thumb thumb" ilk="argument" name="maxthumb" />
              <variable citdl="int" doc="the number of pixels the thumbs can move within" ilk="argument" name="range" />
              <variable citdl="int" doc="(optional) the element should move this many pixels&#xA;at a time" ilk="argument" name="iTickSize" />
              <variable citdl="Array" doc="(optional) [min,max] Initial thumb placement" ilk="argument" name="initVals" />
            </scope>
            <scope doc="Fires the change event if the value has been changed.  Ignored if we are in&#xA;the middle of an animation as the event will fire when the animation is&#xA;complete" ilk="function" name="fireEvents" signature="fireEvents(thumbEvent)">
              <variable citdl="boolean" doc="set to true if this event is fired from an event&#xA;that occurred on the thumb.  If it is, the state of the&#xA;thumb dd object should be correct.  Otherwise, the event&#xA;originated on the background, so the thumb state needs to&#xA;be refreshed before proceeding." ilk="argument" name="thumbEvent" />
            </scope>
            <scope doc="Move the slider one tick mark towards its final coordinate.  Used&#xA;for the animation when tick marks are defined" ilk="function" name="moveOneTick" signature="moveOneTick(the)">
              <variable citdl="int[]" doc="destination coordinate" ilk="argument" name="the" />
            </scope>
            <scope doc="Factory method for creating a horizontal slider" ilk="function" name="YAHOO.widget.Slider.getHorizSlider" signature="YAHOO.widget.Slider.getHorizSlider(sBGElId, sHandleElId, iLeft, iRight, iTickSize) =&gt; Slider">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="int" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="int" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="int" doc="optional parameter for specifying that the element &#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
            </scope>
            <scope doc="Try to focus the element when clicked so we can add&#xA;accessibility features" ilk="function" name="focus" signature="focus()" />
            <scope doc="Handles the mousedown event for the slider background" ilk="function" name="onMouseDown" signature="onMouseDown()" />
            <scope doc="Worker function to execute the value set operation.  Accepts type of&#xA;set operation in addition to the usual setValue params." ilk="function" name="_setValue" signature="_setValue(source, newOffset, skipAnim, force, silent) =&gt; boolean">
              <variable citdl="int" doc="what triggered the set (e.g. Slider.SOURCE_SET_VALUE)" ilk="argument" name="source" />
              <variable citdl="int" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point" ilk="argument" name="newOffset" />
              <variable citdl="boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable citdl="boolean" doc="when true, do not fire events" ilk="argument" name="silent" />
            </scope>
            <scope doc="Executed when a keydown event happens with the control focused.&#xA;Updates the slider value and display when the keypress is an&#xA;arrow key, home, or end as long as enableKeys is set to true." ilk="function" name="handleKeyDown" signature="handleKeyDown(e)">
              <variable citdl="Event" doc="the keydown event" ilk="argument" name="e" />
            </scope>
            <scope doc="Resets the X and Y contraints for the thumb.  Used in lieu of the thumb&#xA;instance&apos;s inherited resetConstraints because some logic was not&#xA;applicable." ilk="function" name="resetThumbConstraints" signature="resetThumbConstraints()" />
            <scope doc="Returns the slider&apos;s thumb X offset from the start position" ilk="function" name="getXValue" signature="getXValue() =&gt; int" />
            <scope doc="Move the associated slider moved to a timeout to try to get around the &#xA;mousedown stealing moz does when I move the slider element between the &#xA;cursor and the background during the mouseup event" ilk="function" name="moveThumb" signature="moveThumb(x, y, skipAnim, midMove)">
              <variable citdl="int" doc="the X coordinate of the click" ilk="argument" name="x" />
              <variable citdl="int" doc="the Y coordinate of the click" ilk="argument" name="y" />
              <variable citdl="boolean" doc="don&apos;t animate if the move happend onDrag" ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="set to true if this is not terminating&#xA;the slider movement" ilk="argument" name="midMove" />
            </scope>
            <scope doc="Provides a way to set the value of the region slider in code." ilk="function" name="setRegionValue" signature="setRegionValue(newOffset, newOffset2, skipAnim, force, silent) =&gt; boolean">
              <variable citdl="int" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (x axis for region)" ilk="argument" name="newOffset" />
              <variable citdl="int" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (y axis for region)" ilk="argument" name="newOffset2" />
              <variable citdl="boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable citdl="boolean" doc="when true, do not fire events" ilk="argument" name="silent" />
            </scope>
            <scope doc="Event that fires at the end of a slider thumb move" ilk="function" name="onSliderEnd" signature="onSliderEnd()" />
            <scope doc="Handles mouseup event on the thumb" ilk="function" name="thumbMouseUp" signature="thumbMouseUp()" />
            <scope doc="Factory method for creating a slider region like the one in the color&#xA;picker example" ilk="function" name="YAHOO.widget.Slider.getSliderRegion" signature="YAHOO.widget.Slider.getSliderRegion(sBGElId, sHandleElId, iLeft, iRight, iUp, iDown, iTickSize) =&gt; Slider">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="int" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="int" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="int" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="int" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="int" doc="optional parameter for specifying that the element &#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
            </scope>
            <scope doc="Checks the background position element position.  If it has moved from the&#xA;baseline position, the constraints for the thumb are reset" ilk="function" name="verifyOffset" signature="verifyOffset() =&gt; boolean" />
            <scope doc="Initializes the slider&apos;s thumb. Executed in the constructor." ilk="function" name="initThumb" signature="initThumb(t)">
              <variable citdl="YAHOO.widget.SliderThumb" doc="the slider thumb" ilk="argument" name="t" />
            </scope>
            <scope doc="Slider toString" ilk="function" name="toString" signature="toString() =&gt; string" />
            <scope doc="Locks the slider, overrides YAHOO.util.DragDrop" ilk="function" name="lock" signature="lock()" />
            <scope doc="Event that fires when the value of the slider has changed" ilk="function" name="onChange" signature="onChange(firstOffset, secondOffset)">
              <variable citdl="int" doc="the number of pixels the thumb has moved&#xA;from its start position. Normal horizontal and vertical sliders will only&#xA;have the firstOffset.  Regions will have both, the first is the horizontal&#xA;offset, the second the vertical." ilk="argument" name="firstOffset" />
              <variable citdl="int" doc="the y offset for region sliders" ilk="argument" name="secondOffset" />
            </scope>
            <scope doc="Initializes the slider.  Executed in the constructor" ilk="function" name="initSlider" signature="initSlider(sType)">
              <variable citdl="string" doc="the type of slider (horiz, vert, region)" ilk="argument" name="sType" />
            </scope>
            <scope doc="Provides a way to set the value of the slider in code." ilk="function" name="setValue" signature="setValue(newOffset, skipAnim, force, silent) =&gt; boolean">
              <variable citdl="int" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point" ilk="argument" name="newOffset" />
              <variable citdl="boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable citdl="boolean" doc="when true, do not fire events" ilk="argument" name="silent" />
            </scope>
            <scope doc="When the thumb is available, we cache the centerpoint of the element so&#xA;we can position the element correctly when the background is clicked" ilk="function" name="setThumbCenterPoint" signature="setThumbCenterPoint()" />
            <scope doc="Sets up the listeners for keydown and key press events." ilk="function" name="_bindKeyEvents" signature="_bindKeyEvents()" />
            <scope doc="Fired when the slider movement ends" ilk="function" name="endMove" signature="endMove()" />
            <scope doc="Worker function to execute the value set operation.  Accepts type of&#xA;set operation in addition to the usual setValue params." ilk="function" name="_setRegionValue" signature="_setRegionValue(source, newOffset, newOffset2, skipAnim, force, silent) =&gt; boolean">
              <variable citdl="int" doc="what triggered the set (e.g. Slider.SOURCE_SET_VALUE)" ilk="argument" name="source" />
              <variable citdl="int" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (x axis for region)" ilk="argument" name="newOffset" />
              <variable citdl="int" doc="the number of pixels the thumb should be&#xA;positioned away from the initial start point (y axis for region)" ilk="argument" name="newOffset2" />
              <variable citdl="boolean" doc="set to true to disable the animation&#xA;for this move action (but not others)." ilk="argument" name="skipAnim" />
              <variable citdl="boolean" doc="ignore the locked setting and set value anyway" ilk="argument" name="force" />
              <variable citdl="boolean" doc="when true, do not fire events" ilk="argument" name="silent" />
            </scope>
            <scope doc="Returns the slider&apos;s thumb Y offset from the start position" ilk="function" name="getYValue" signature="getYValue() =&gt; int" />
            <scope doc="Executed when the slider element is available" ilk="function" name="onAvailable" signature="onAvailable()" />
            <scope doc="Event that fires when the at the beginning of the slider thumb move" ilk="function" name="onSlideStart" signature="onSlideStart()" />
            <scope doc="Handles the onDrag event for the slider background" ilk="function" name="onDrag" signature="onDrag()" />
            <scope doc="Returns a reference to this slider&apos;s thumb" ilk="function" name="getThumb" signature="getThumb() =&gt; SliderThumb" />
            <scope doc="Factory method for creating a vertical slider" ilk="function" name="YAHOO.widget.Slider.getVertSlider" signature="YAHOO.widget.Slider.getVertSlider(sBGElId, sHandleElId, iUp, iDown, iTickSize) =&gt; Slider">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="sBGElId" />
              <variable citdl="String" doc="the id of the thumb element" ilk="argument" name="sHandleElId" />
              <variable citdl="int" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="int" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="int" doc="optional parameter for specifying that the element &#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
            </scope>
            <scope doc="Executed when a keypress event happens with the control focused.&#xA;Prevents the default behavior for navigation keys.  The actual&#xA;logic for moving the slider thumb in response to a key event&#xA;happens in handleKeyDown." ilk="function" name="handleKeyPress" signature="handleKeyPress(e)">
              <variable citdl="Event" doc="the keypress event" ilk="argument" name="e" />
            </scope>
            <scope doc="Initialization that sets up the value offsets once the elements are ready" ilk="function" name="setStartSliderState" signature="setStartSliderState()" />
            <scope doc="Returns the slider&apos;s thumb offset from the start position" ilk="function" name="getValue" signature="getValue() =&gt; int" />
            <scope doc="Resets the constraints before moving the thumb." ilk="function" name="b4MouseDown" signature="b4MouseDown()" />
            <scope doc="Unlocks the slider, overrides YAHOO.util.DragDrop" ilk="function" name="unlock" signature="unlock()" />
            <scope doc="Factory method for creating a vertical dual-thumb slider." ilk="function" name="YAHOO.widget.Slider.getVertDualSlider" signature="YAHOO.widget.Slider.getVertDualSlider(bg, minthumb, maxthumb, range, iTickSize, initVals) =&gt; DualSlider">
              <variable citdl="String" doc="the id of the slider&apos;s background element" ilk="argument" name="bg" />
              <variable citdl="String" doc="the id of the min thumb" ilk="argument" name="minthumb" />
              <variable citdl="String" doc="the id of the thumb thumb" ilk="argument" name="maxthumb" />
              <variable citdl="int" doc="the number of pixels the thumbs can move within" ilk="argument" name="range" />
              <variable citdl="int" doc="(optional) the element should move this many pixels&#xA;at a time" ilk="argument" name="iTickSize" />
              <variable citdl="Array" doc="(optional) [min,max] Initial thumb placement" ilk="argument" name="initVals" />
            </scope>
            <scope doc="Returns the next Y tick value based on the current coord and the target coord." ilk="function" name="_getNextY" signature="_getNextY()" />
            <scope doc="Returns the next X tick value based on the current coord and the target coord." ilk="function" name="_getNextX" signature="_getNextX()" />
            <variable citdl="int" doc="Specifies the number of pixels the arrow keys will move the slider.&#xA;Default is 20." name="keyIncrement" />
            <variable doc="Overrides the isTarget property in YAHOO.util.DragDrop" name="isTarget" />
            <variable citdl="boolean" doc="Set to false to disable a background click thumb move" name="backgroundEnabled" />
            <variable citdl="int" doc="If animation is configured, specifies the length of the animation&#xA;in seconds." name="animationDuration" />
            <variable citdl="boolean" doc="Flag that determines if the thumb will animate when moved" name="animate" />
            <variable citdl="Boolean" doc="moveComplete is set to true when the slider has moved to its final&#xA;destination.  For animated slider, this value can be checked in &#xA;the onChange handler to make it possible to execute logic only&#xA;when the move is complete rather than at all points along the way.&#xA;Deprecated because this flag is only useful when the background is&#xA;clicked and the slider is animated.  If the user drags the thumb,&#xA;the flag is updated when the drag is over ... the final onDrag event&#xA;fires before the mouseup the ends the drag, so the implementer will&#xA;never see it." name="moveComplete" />
            <variable citdl="YAHOO.widget.SliderThumb" doc="A YAHOO.widget.SliderThumb instance that we will use to &#xA;reposition the thumb when the background is clicked" name="thumb" />
            <variable doc="Constant for valueChangeSource, indicating that the value was altered&#xA;by a programmatic call to setValue/setRegionValue." name="SOURCE_SET_VALUE" />
            <variable doc="Constant for valueChangeSource, indicating that the user clicked or&#xA;dragged the slider to change the value." name="SOURCE_UI_EVENT" />
            <variable citdl="boolean" doc="Tracks the state of the mouse button to aid in when events are fired." name="_mouseDown" />
            <variable citdl="boolean" doc="By default, animation is available if the animation utility is detected." name="Slider.ANIM_AVAIL" />
            <variable doc="Constant for valueChangeSource, indicating that the user clicked or&#xA;dragged the slider to change the value." name="Slider.SOURCE_UI_EVENT" />
            <variable doc="Constant for valueChangeSource, indicating that the value was altered&#xA;by a programmatic call to setValue/setRegionValue." name="Slider.SOURCE_SET_VALUE" />
            <variable citdl="boolean" doc="Enables the arrow, home and end keys, defaults to true." name="enableKeys" />
            <variable citdl="boolean" doc="Indicates whether or not events will be supressed for the current&#xA;slide operation" name="_silent" />
            <variable citdl="[int, int]" doc="The basline position of the background element, used&#xA;to determine if the background has moved since the last&#xA;operation." name="baselinePos" />
            <variable citdl="boolean" doc="Override the default setting of dragOnly to true." name="dragOnly" />
            <variable citdl="[int, int]" doc="Saved offset used to protect against NaN problems when slider is&#xA;set to display:none" name="lastOffset" />
            <variable citdl="{&quot;x&quot;: int, &quot;y&quot;: int}" doc="The center of the slider element is stored so we can &#xA;place it in the correct position when the background is clicked." name="thumbCenterPoint" />
            <variable citdl="string" doc="The type of the slider (horiz, vert, region)" name="type" />
            <variable doc="Constant for valueChangeSource, indicating that the value was altered&#xA;by hitting any of the supported keyboard characters." name="Slider.SOURCE_KEY_EVENT" />
            <variable citdl="int" doc="When the slider value changes, this property is set to identify where&#xA;the update came from.  This will be either 1, meaning the slider was&#xA;clicked or dragged, or 2, meaning that it was set via a setValue() call.&#xA;This can be used within event handlers to apply some of the logic only&#xA;when dealing with one source or another." name="valueChangeSource" />
            <variable citdl="int" doc="Adjustment factor for tick animation, the more ticks, the&#xA;faster the animation (by default)" name="tickPause" />
          </scope>
          <scope classrefs="YAHOO.util.DD" doc="A drag and drop implementation to be used as the thumb of a slider." ilk="class" name="SliderThumb">
            <scope attributes="__ctor__" doc="A drag and drop implementation to be used as the thumb of a slider." ilk="function" name="SliderThumb" signature="SliderThumb(id, sGroup, iLeft, iRight, iUp, iDown, iTickSize)">
              <variable citdl="String" doc="the id of the slider html element" ilk="argument" name="id" />
              <variable citdl="String" doc="the group of related DragDrop items" ilk="argument" name="sGroup" />
              <variable citdl="int" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="int" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="int" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="int" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="int" doc="optional parameter for specifying that the element &#xA;should move a certain number pixels at a time." ilk="argument" name="iTickSize" />
            </scope>
            <scope doc="Clear&apos;s the slider&apos;s ticks" ilk="function" name="clearTicks" signature="clearTicks()" />
            <scope doc="Gets the current offset from the element&apos;s start position in&#xA;pixels." ilk="function" name="getValue" signature="getValue() =&gt; int" />
            <scope doc="Returns the difference between the location of the thumb and its parent." ilk="function" name="getOffsetFromParent" signature="getOffsetFromParent(parentPos)">
              <variable citdl="[int, int]" doc="Optionally accepts the position of the parent" ilk="argument" name="parentPos" />
            </scope>
            <scope doc="Thumb toString" ilk="function" name="toString" signature="toString() =&gt; string" />
            <scope doc="Gets the current Y offset from the element&apos;s start position in&#xA;pixels." ilk="function" name="getYValue" signature="getYValue() =&gt; int" />
            <scope doc="The onchange event for the handle/thumb is delegated to the YAHOO.widget.Slider&#xA;instance it belongs to." ilk="function" name="onChange" signature="onChange()" />
            <scope doc="Gets the current X offset from the element&apos;s start position in&#xA;pixels." ilk="function" name="getXValue" signature="getXValue() =&gt; int" />
            <scope doc="Set up the slider, must be called in the constructor of all subclasses" ilk="function" name="initSlider" signature="initSlider(iLeft, iRight, iUp, iDown, iTickSize)">
              <variable citdl="int" doc="the number of pixels the element can move left" ilk="argument" name="iLeft" />
              <variable citdl="int" doc="the number of pixels the element can move right" ilk="argument" name="iRight" />
              <variable citdl="int" doc="the number of pixels the element can move up" ilk="argument" name="iUp" />
              <variable citdl="int" doc="the number of pixels the element can move down" ilk="argument" name="iDown" />
              <variable citdl="int" doc="the width of the tick interval." ilk="argument" name="iTickSize" />
            </scope>
            <variable doc="Overrides the isTarget property in YAHOO.util.DragDrop" name="isTarget" />
            <variable citdl="boolean" doc="Informs the drag and drop util that the offsets should remain when&#xA;resetting the constraints.  This preserves the slider value when&#xA;the constraints are reset" name="maintainOffset" />
            <variable citdl="string" doc="The id of the thumbs parent HTML element (the slider background &#xA;element)." name="parentElId" />
            <variable citdl="boolean" doc="Flag used to figure out if this is a horizontal or vertical slider" name="_isHoriz" />
            <variable citdl="int" doc="The tick size for this slider" name="tickSize" />
            <variable citdl="int" doc="Cache the last value so we can check for change" name="_prevVal" />
            <variable citdl="[int, int]" doc="The (X and Y) difference between the thumb location and its parent &#xA;(the slider background) when the control is instantiated." name="startOffset" />
            <variable citdl="boolean" doc="Override the default setting of dragOnly to true." name="dragOnly" />
            <variable citdl="boolean" doc="The slider is _graduated if there is a tick interval defined" name="_graduated" />
            <variable doc="Turns off the autoscroll feature in drag and drop" name="scroll" />
          </scope>
          <scope doc="StackedBarChart class for the YUI Charts widget." ilk="class" name="StackedBarChart">
            <scope attributes="__ctor__" doc="StackedBarChart class for the YUI Charts widget." ilk="function" name="StackedBarChart" signature="StackedBarChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
          </scope>
          <scope doc="StackedBarSeries class for the YUI Charts widget." ilk="class" name="StackedBarSeries">
            <scope attributes="__ctor__" doc="StackedBarSeries class for the YUI Charts widget." ilk="function" name="StackedBarSeries" signature="StackedBarSeries()" />
          </scope>
          <scope doc="StackedColumnChart class for the YUI Charts widget." ilk="class" name="StackedColumnChart">
            <scope attributes="__ctor__" doc="StackedColumnChart class for the YUI Charts widget." ilk="function" name="StackedColumnChart" signature="StackedColumnChart(containerId, dataSource, attributes)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="YAHOO.util.DataSource" doc="DataSource instance." ilk="argument" name="dataSource" />
              <variable citdl="object" doc="(optional) Object literal of configuration values." ilk="argument" name="attributes" />
            </scope>
          </scope>
          <scope doc="StackedColumnSeries class for the YUI Charts widget." ilk="class" name="StackedColumnSeries">
            <scope attributes="__ctor__" doc="StackedColumnSeries class for the YUI Charts widget." ilk="function" name="StackedColumnSeries" signature="StackedColumnSeries()" />
          </scope>
          <scope doc="A static factory class for tree view expand/collapse animations" ilk="namespace" name="TVAnim">
            <scope doc="Returns true if the specified animation class is available" ilk="function" name="isValid" signature="isValid(type) =&gt; boolean">
              <variable citdl="string" doc="the type of animation" ilk="argument" name="type" />
            </scope>
            <scope doc="Returns a ygAnim instance of the given type" ilk="function" name="getAnim" signature="getAnim(type, el, callback) =&gt; YAHOO.util.Animation">
              <variable citdl="string" doc="the type of animation" ilk="argument" name="type" />
              <variable citdl="HTMLElement" doc="the element to element (probably the children div)" ilk="argument" name="el" />
              <variable citdl="function" doc="function to invoke when the animation is done." ilk="argument" name="callback" />
            </scope>
            <variable citdl="string" doc="Constant for the fade in animation" name="FADE_IN" />
            <variable citdl="string" doc="Constant for the fade out animation" name="FADE_OUT" />
          </scope>
          <scope doc="A 1/2 second fade-in animation." ilk="class" name="TVFadeIn">
            <scope attributes="__ctor__" doc="A 1/2 second fade-in animation." ilk="function" name="TVFadeIn" signature="TVFadeIn(el, callback)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="function" doc="function to invoke when the animation is finished" ilk="argument" name="callback" />
            </scope>
            <scope doc="Clean up and invoke callback" ilk="function" name="onComplete" signature="onComplete()" />
            <scope doc="Performs the animation" ilk="function" name="animate" signature="animate()" />
            <scope doc="toString" ilk="function" name="toString" signature="toString() =&gt; string" />
            <variable citdl="HTMLElement" doc="The element to animate" name="el" />
            <variable citdl="function" doc="the callback to invoke when the animation is complete" name="callback" />
          </scope>
          <scope doc="A 1/2 second fade out animation." ilk="class" name="TVFadeOut">
            <scope attributes="__ctor__" doc="A 1/2 second fade out animation." ilk="function" name="TVFadeOut" signature="TVFadeOut(el, callback)">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="Function" doc="function to invoke when the animation is finished" ilk="argument" name="callback" />
            </scope>
            <scope doc="Clean up and invoke callback" ilk="function" name="onComplete" signature="onComplete()" />
            <scope doc="Performs the animation" ilk="function" name="animate" signature="animate()" />
            <scope doc="toString" ilk="function" name="toString" signature="toString() =&gt; string" />
            <variable citdl="HTMLElement" doc="The element to animate" name="el" />
            <variable citdl="function" doc="the callback to invoke when the animation is complete" name="callback" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="A representation of a Tab&apos;s label and content." ilk="class" name="Tab">
            <scope attributes="__ctor__" doc="A representation of a Tab&apos;s label and content." ilk="function" name="Tab" signature="Tab(element, properties)">
              <variable citdl="HTMLElement | String" doc="(optional) The html element that &#xA;represents the Tab. An element will be created if none provided." ilk="argument" name="element" />
              <variable citdl="Object" doc="A key map of initial properties" ilk="argument" name="properties" />
            </scope>
            <scope doc="setAttributeConfigs Tab specific properties." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Hash of initial attributes" ilk="argument" name="attr" />
            </scope>
            <scope doc="Provides a readable name for the tab." ilk="function" name="toString" signature="toString() =&gt; " />
            <variable citdl="String" doc="The class name applied to active tabs." name="HIDDEN_CLASSNAME" />
            <variable citdl="String" doc="The title applied to active tabs." name="ACTIVE_TITLE" />
            <variable citdl="String" doc="The class name applied to disabled tabs." name="DISABLED_CLASSNAME" />
            <variable citdl="String" doc="The class name applied to dynamic tabs while loading." name="LOADING_CLASSNAME" />
            <variable citdl="String" doc="The default tag name for a Tab&apos;s inner element." name="LABEL_INNER_TAGNAME" />
            <variable citdl="String" doc="The class name applied to active tabs." name="ACTIVE_CLASSNAME" />
            <variable citdl="object" doc="Object containing success and failure callbacks for loading data." name="loadHandler" />
            <variable citdl="Object" doc="Provides a reference to the connection request object when data is&#xA;loaded dynamically." name="dataConnection" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="A widget to control tabbed views." ilk="class" name="TabView">
            <scope attributes="__ctor__" doc="A widget to control tabbed views." ilk="function" name="TabView" signature="TabView(el(optional), attr)">
              <variable citdl="HTMLElement | String | Object" doc="The html &#xA;element that represents the TabView, or the attribute object to use. &#xA;An element will be created if none provided." ilk="argument" name="el(optional)" />
              <variable citdl="Object" doc="(optional) A key map of the tabView&apos;s &#xA;initial attributes.  Ignored if first arg is attributes object." ilk="argument" name="attr" />
            </scope>
            <scope doc="Returns the index of given tab." ilk="function" name="getTabIndex" signature="getTabIndex(tab) =&gt; ">
              <variable citdl="YAHOO.widget.Tab" doc="The tab whose index will be returned." ilk="argument" name="tab" />
            </scope>
            <scope doc="Removes the specified Tab from the TabView." ilk="function" name="removeTab" signature="removeTab(item) =&gt; ">
              <variable citdl="YAHOO.widget.Tab" doc="The Tab instance to be removed." ilk="argument" name="item" />
            </scope>
            <scope doc="The transiton to use when switching between tabs." ilk="function" name="contentTransition" signature="contentTransition()" />
            <scope doc="Creates Tab instances from a collection of HTMLElements." ilk="function" name="_initTabs" signature="_initTabs() =&gt; " />
            <scope doc="Removes selected state from the given tab if it is the activeTab" ilk="function" name="deselectTab" signature="deselectTab(index)">
              <variable citdl="Int" doc="The tab index to deselect" ilk="argument" name="index" />
            </scope>
            <scope doc="setAttributeConfigs TabView specific properties." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Hash of initial attributes" ilk="argument" name="attr" />
            </scope>
            <scope doc="Provides a readable name for the TabView instance." ilk="function" name="toString" signature="toString() =&gt; " />
            <scope doc="Routes childNode events." ilk="function" name="DOMEventHandler" signature="DOMEventHandler(e) =&gt; ">
              <variable citdl="event" doc="The Dom event that is being handled." ilk="argument" name="e" />
            </scope>
            <scope doc="Adds a Tab to the TabView instance.  &#xA;If no index is specified, the tab is added to the end of the tab list." ilk="function" name="addTab" signature="addTab(tab, index) =&gt; ">
              <variable citdl="YAHOO.widget.Tab" doc="A Tab instance to add." ilk="argument" name="tab" />
              <variable citdl="Integer" doc="The position to add the tab." ilk="argument" name="index" />
            </scope>
            <scope doc="Makes the tab at the given index the active tab" ilk="function" name="selectTab" signature="selectTab(index)">
              <variable citdl="Int" doc="The tab index to be made active" ilk="argument" name="index" />
            </scope>
            <scope doc="Returns the Tab instance at the specified index." ilk="function" name="getTab" signature="getTab(index) =&gt; ">
              <variable citdl="Integer" doc="The position of the Tab." ilk="argument" name="index" />
            </scope>
            <variable doc="The className to add when building from scratch." name="CLASSNAME" />
            <variable doc="The className of the HTMLElement containing the TabView&apos;s tab elements&#xA;to look for when building from existing markup, or to add when building&#xA;from scratch. &#xA;All childNodes of the tab container are treated as Tabs when building&#xA;from existing markup." name="TAB_PARENT_CLASSNAME" />
            <variable doc="The className of the HTMLElement containing the TabView&apos;s label elements&#xA;to look for when building from existing markup, or to add when building&#xA;from scratch. &#xA;All childNodes of the content container are treated as content elements when&#xA;building from existing markup." name="CONTENT_PARENT_CLASSNAME" />
            <variable citdl="HTMLElement" doc="The container of the tabView&apos;s label elements." name="_tabParent" />
            <variable citdl="HTMLElement" doc="The container of the tabView&apos;s content elements." name="_contentParent" />
          </scope>
          <scope classrefs="YAHOO.widget.Node" doc="The default node presentation.  The first parameter should be&#xA;either a string that will be used as the node&apos;s label, or an object&#xA;that has at least a string property called label.  By default,  clicking the&#xA;label will toggle the expanded/collapsed state of the node.  By&#xA;setting the href property of the instance, this behavior can be&#xA;changed so that the label will go to the specified href." ilk="class" name="TextNode">
            <scope attributes="__ctor__" doc="The default node presentation.  The first parameter should be&#xA;either a string that will be used as the node&apos;s label, or an object&#xA;that has at least a string property called label.  By default,  clicking the&#xA;label will toggle the expanded/collapsed state of the node.  By&#xA;setting the href property of the instance, this behavior can be&#xA;changed so that the label will go to the specified href." ilk="function" name="TextNode" signature="TextNode(oData, oParent, expanded)">
              <variable citdl="object" doc="a string or object containing the data that will&#xA;be used to render this node.&#xA;Providing a string is the same as providing an object with a single property named label.&#xA;All values in the oData will be used to set equally named properties in the node&#xA;as long as the node does have such properties, they are not undefined, private or functions.&#xA;All attributes are made available in noderef.data, which&#xA;can be used to store custom attributes.  TreeView.getNode(s)ByProperty&#xA;can be used to retrieve a node by one of the attributes." ilk="argument" name="oData" />
              <variable citdl="YAHOO.widget.Node" doc="this node&apos;s parent node" ilk="argument" name="oParent" />
              <variable citdl="boolean" doc="the initial expanded/collapsed state (deprecated; use oData.expanded)" ilk="argument" name="expanded" />
            </scope>
            <scope doc="Returns the value from the input element.&#xA;Overrides Node.getEditorValue." ilk="function" name="getEditorValue" signature="getEditorValue(editorData) =&gt; string">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Places an &amp;lt;input&amp;gt;  textbox in the input container and loads the label text into it." ilk="function" name="fillEditorContainer" signature="fillEditorContainer(editorData) =&gt; ">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Returns an object which could be used to build a tree out of this node and its children.&#xA;It can be passed to the tree constructor to reproduce this node as a tree.&#xA;It will return false if the node or any descendant loads dynamically, regardless of whether it is loaded or not." ilk="function" name="getNodeDefinition" signature="getNodeDefinition() =&gt; Object | false" />
            <scope doc="Finally displays the newly edited value in the tree.&#xA;Overrides Node.displayEditedValue." ilk="function" name="displayEditedValue" signature="displayEditedValue(value, editorData)">
              <variable citdl="string" doc="value to be displayed and stored in the node" ilk="argument" name="value" />
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Destroys the contents of the inline editor panel.&#xA;Overrides Node.destroyEditorContent.&#xA;Since we didn&apos;t set any event listeners on this inline editor, it is more efficient to avoid the generic method in Node." ilk="function" name="destroyEditorContents" signature="destroyEditorContents(editorData)">
              <variable citdl="YAHOO.widget.TreeView.editorData" doc="a shortcut to the static object holding editing information" ilk="argument" name="editorData" />
            </scope>
            <scope doc="Returns the label element" ilk="function" name="getLabelEl" signature="getLabelEl() =&gt; object" />
            <scope doc="Sets up the node label" ilk="function" name="setUpLabel" signature="setUpLabel(oData)">
              <variable doc="string containing the label, or an object with a label property" ilk="argument" name="oData" />
            </scope>
            <variable citdl="string" doc="The node type" name="_type" />
            <variable citdl="string" doc="The label href target, defaults to current window" name="target" />
            <variable citdl="string" doc="The text for the title (tooltip) for the label element" name="title" />
            <variable citdl="string" doc="The CSS class for the label href.  Defaults to ygtvlabel, but can be&#xA;overridden to provide a custom presentation for a specific node." name="labelStyle" />
            <variable citdl="string" doc="The text for the label.  It is assumed that the oData parameter will&#xA;either be a string that will be used as the label, or an object that&#xA;has a property called &quot;label&quot; that we will use." name="label" />
            <variable citdl="string" doc="The href for the node&apos;s label.  If one is not specified, the href will&#xA;be set so that it toggles the node." name="href" />
            <variable citdl="string" doc="The derived element id of the label for this node" name="labelElId" />
          </scope>
          <scope classrefs="YAHOO.widget.BaseCellEditor" doc="The TextareaCellEditor class provides functionality for inline editing&#xA;DataTable cell data with a TEXTAREA element." ilk="class" name="TextareaCellEditor">
            <scope attributes="__ctor__" doc="The TextareaCellEditor class provides functionality for inline editing&#xA;DataTable cell data with a TEXTAREA element." ilk="function" name="TextareaCellEditor" signature="TextareaCellEditor(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="After rendering form, if disabledBtns is set to true, then sets up a mechanism&#xA;to save input without them." ilk="function" name="handleDisabledBtns" signature="handleDisabledBtns()" />
            <scope doc="Render a form with textarea." ilk="function" name="renderForm" signature="renderForm()" />
            <scope doc="Moves TextareaCellEditor UI to a cell." ilk="function" name="move" signature="move()" />
            <scope doc="Sets focus in TextareaCellEditor." ilk="function" name="focus" signature="focus()" />
            <scope doc="Resets TextareaCellEditor UI to initial state." ilk="function" name="resetForm" signature="resetForm()" />
            <scope doc="Retrieves input value from TextareaCellEditor." ilk="function" name="getInputValue" signature="getInputValue()" />
            <variable citdl="HTMLElement" doc="Reference to textarea element." name="textarea" />
          </scope>
          <scope classrefs="YAHOO.widget.BaseCellEditor" doc="The TextboxCellEditor class provides functionality for inline editing&#xA;DataTable cell data with an INPUT TYPE=TEXT element." ilk="class" name="TextboxCellEditor">
            <scope attributes="__ctor__" doc="The TextboxCellEditor class provides functionality for inline editing&#xA;DataTable cell data with an INPUT TYPE=TEXT element." ilk="function" name="TextboxCellEditor" signature="TextboxCellEditor(oConfigs)">
              <variable citdl="Object" doc="(Optional) Object literal of configs." ilk="argument" name="oConfigs" />
            </scope>
            <scope doc="Render a form with input type=text." ilk="function" name="renderForm" signature="renderForm()" />
            <scope doc="Moves TextboxCellEditor UI to a cell." ilk="function" name="move" signature="move()" />
            <scope doc="Sets focus in TextboxCellEditor." ilk="function" name="focus" signature="focus()" />
            <scope doc="Returns new value for TextboxCellEditor." ilk="function" name="getInputValue" signature="getInputValue()" />
            <scope doc="Resets TextboxCellEditor UI to initial state." ilk="function" name="resetForm" signature="resetForm()" />
            <variable citdl="Object" doc="CellEditor subclasses." name="DataTable.Editors" />
            <variable doc="Reference to the textbox element." name="textbox" />
          </scope>
          <scope doc="A type of axis whose units are measured in time-based values." ilk="class" name="TimeAxis">
            <scope attributes="__ctor__" doc="A type of axis whose units are measured in time-based values." ilk="function" name="TimeAxis" signature="TimeAxis()" />
            <variable citdl="Boolean" doc="Series that are stackable will only stack when this value is set to true." name="stackingEnabled" />
            <variable citdl="Boolean" doc="Indicates whether to factor in the size of the labels when calculating a major unit." name="calculateByLabelSize" />
            <variable citdl="Number" doc="The maximum value drawn by the axis. If not set explicitly, the axis maximum&#xA;will be calculated automatically." name="maximum" />
            <variable citdl="Date" doc="The minimum value drawn by the axis. If not set explicitly, the axis minimum&#xA;will be calculated automatically." name="minimum" />
            <variable citdl="String" doc="The time unit used by the majorUnit." name="majorTimeUnit" />
            <variable citdl="Number" doc="The spacing between major intervals on this axis." name="majorUnit" />
            <variable citdl="Boolean" doc="If true, the labels, ticks, gridlines, and other objects will snap to&#xA;the nearest major or minor unit. If false, their position will be based&#xA;on the minimum value." name="snapToUnits" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="Provides a rich toolbar widget based on the button and menu widgets" ilk="class" name="Toolbar">
            <scope attributes="__ctor__" doc="Provides a rich toolbar widget based on the button and menu widgets" ilk="function" name="Toolbar" signature="Toolbar(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to turn into a toolbar." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Returns an array of buttons in the current toolbar" ilk="function" name="getButtons" signature="getButtons() =&gt; Array" />
            <scope doc="Enables a button in the toolbar." ilk="function" name="enableButton" signature="enableButton(id) =&gt; Boolean">
              <variable citdl="String/Number" doc="Enable a button by it&apos;s id, index or value." ilk="argument" name="id" />
            </scope>
            <scope doc="Destroy a button in the toolbar." ilk="function" name="destroyButton" signature="destroyButton(id) =&gt; Boolean">
              <variable citdl="String/Number" doc="Destroy a button by it&apos;s id or index." ilk="argument" name="id" />
            </scope>
            <scope doc="Click handler for all buttons in the toolbar." ilk="function" name="_buttonClick" signature="_buttonClick(ev, info)">
              <variable citdl="String" doc="The event that was passed in." ilk="argument" name="ev" />
              <variable citdl="Object" doc="Object literal of information about the button that was clicked." ilk="argument" name="info" />
            </scope>
            <scope doc="Add a new button to the toolbar. Buttons supported:&#xA;push, split, menu, select, color, spin" ilk="function" name="addButton" signature="addButton(oButton, after)">
              <variable citdl="Object" doc="Object literal reference to the Button&apos;s Config" ilk="argument" name="oButton" />
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button after in the DOM." ilk="argument" name="after" />
            </scope>
            <scope doc="Initializes all of the configuration attributes used to create &#xA;the toolbar." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the toolbar." ilk="argument" name="attr" />
            </scope>
            <scope doc="Enables all buttons in the toolbar." ilk="function" name="enableAllButtons" signature="enableAllButtons() =&gt; Boolean" />
            <scope doc="Selects a button in the toolbar." ilk="function" name="selectButton" signature="selectButton(id, value) =&gt; Boolean">
              <variable citdl="String/Number" doc="Select a button by it&apos;s id, index or value." ilk="argument" name="id" />
              <variable citdl="String" doc="If this is a Menu Button, check this item in the menu" ilk="argument" name="value" />
            </scope>
            <scope doc="Handles the navigation/focus of toolbar buttons with the Arrow Keys" ilk="function" name="_navigateButtons" signature="_navigateButtons(ev)">
              <variable citdl="Event" doc="The Key Event" ilk="argument" name="ev" />
            </scope>
            <scope doc="Tells if a button is selected or not." ilk="function" name="isSelected" signature="isSelected(id) =&gt; Boolean">
              <variable citdl="String/Number" doc="A button by it&apos;s id, index or value." ilk="argument" name="id" />
            </scope>
            <scope doc="The Toolbar class&apos;s initialization method" ilk="function" name="init" signature="init()" />
            <scope doc="Add a new button to a toolbar group. Buttons supported:&#xA;push, split, menu, select, color, spin" ilk="function" name="addButtonToGroup" signature="addButtonToGroup(oButton, group, after)">
              <variable citdl="Object" doc="Object literal reference to the Button&apos;s Config" ilk="argument" name="oButton" />
              <variable citdl="String" doc="The Group identifier passed into the initial config" ilk="argument" name="group" />
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button after in the DOM." ilk="argument" name="after" />
            </scope>
            <scope doc="Returns a string representing the toolbar." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Clears the currently selected color or mouseover color in the color picker." ilk="function" name="_resetColorPicker" signature="_resetColorPicker()" />
            <scope doc="Destroys the toolbar, all of it&apos;s elements and objects." ilk="function" name="destroy" signature="destroy() =&gt; Boolean" />
            <scope doc="Sets up the listeners for the arrow key navigation" ilk="function" name="_handleFocus" signature="_handleFocus()" />
            <scope doc="Programatically collapse the toolbar." ilk="function" name="collapse" signature="collapse(collapse)">
              <variable citdl="Boolean" doc="True to collapse, false to expand." ilk="argument" name="collapse" />
            </scope>
            <scope doc="Add a new button separator to the toolbar." ilk="function" name="addSeparator" signature="addSeparator(cont, after)">
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button into." ilk="argument" name="cont" />
              <variable citdl="HTMLElement" doc="Optional HTML element to insert this button after in the DOM." ilk="argument" name="after" />
            </scope>
            <scope doc="Gets a button instance from the toolbar by is index in _buttonList." ilk="function" name="getButtonByIndex" signature="getButtonByIndex(index) =&gt; &lt;a href=&quot;YAHOO.widget.ToolbarButton.html&quot;&gt;YAHOO.widget.ToolbarButton&lt;/a&gt;">
              <variable citdl="Number" doc="The index of the button in _buttonList." ilk="argument" name="index" />
            </scope>
            <scope doc="Gets a button instance from the toolbar by is Dom id." ilk="function" name="getButtonById" signature="getButtonById(id) =&gt; &lt;a href=&quot;YAHOO.widget.ToolbarButton.html&quot;&gt;YAHOO.widget.ToolbarButton&lt;/a&gt;">
              <variable citdl="String" doc="The Dom id to query for." ilk="argument" name="id" />
            </scope>
            <scope doc="Resets all buttons to their initial state." ilk="function" name="resetAllButtons" signature="resetAllButtons(_ex) =&gt; Boolean">
              <variable citdl="Object" doc="Except these buttons" ilk="argument" name="_ex" />
            </scope>
            <scope doc="Deselects all buttons in the toolbar." ilk="function" name="deselectAllButtons" signature="deselectAllButtons() =&gt; Boolean" />
            <scope doc="Disables a button in the toolbar." ilk="function" name="disableButton" signature="disableButton(id) =&gt; Boolean">
              <variable citdl="String/Number" doc="Disable a button by it&apos;s id, index or value." ilk="argument" name="id" />
            </scope>
            <scope doc="This method is called from Menu&apos;s renderEvent to add a few more classes to the menu items" ilk="function" name="_addMenuClasses" signature="_addMenuClasses(ev, na, o)">
              <variable citdl="String" doc="The event that fired." ilk="argument" name="ev" />
              <variable citdl="Array" doc="Array of event information." ilk="argument" name="na" />
              <variable citdl="Object" doc="Button config object." ilk="argument" name="o" />
            </scope>
            <scope doc="Create a button similar to an OS Spin button.. It has an up/down arrow combo to scroll through a range of int values." ilk="function" name="_makeSpinButton" signature="_makeSpinButton(_button, oButton)">
              <variable citdl="Object" doc="&lt;a href=&quot;YAHOO.widget.ToolbarButton.html&quot;&gt;YAHOO.widget.ToolbarButton&lt;/a&gt; reference" ilk="argument" name="_button" />
              <variable citdl="Object" doc="Object literal containing the buttons initial config" ilk="argument" name="oButton" />
            </scope>
            <scope doc="Deselects a button in the toolbar." ilk="function" name="deselectButton" signature="deselectButton(id) =&gt; Boolean">
              <variable citdl="String/Number" doc="Deselect a button by it&apos;s id, index or value." ilk="argument" name="id" />
            </scope>
            <scope doc="Add a new button group to the toolbar. (uses addButton)" ilk="function" name="addButtonGroup" signature="addButtonGroup(oGroup)">
              <variable citdl="Object" doc="Object literal reference to the Groups Config (contains an array of button configs as well as the group label)" ilk="argument" name="oGroup" />
            </scope>
            <scope doc="Creates the core DOM reference to the color picker menu item." ilk="function" name="_createColorPicker" signature="_createColorPicker(id)">
              <variable citdl="String" doc="the id of the toolbar to prefix this DOM container with." ilk="argument" name="id" />
            </scope>
            <scope doc="Called to turn a &quot;color&quot; button into a menu button with an Overlay for the menu." ilk="function" name="_makeColorButton" signature="_makeColorButton(_oButton)">
              <variable citdl="Object" doc="&lt;a href=&quot;YAHOO.widget.ToolbarButton.html&quot;&gt;YAHOO.widget.ToolbarButton&lt;/a&gt; reference" ilk="argument" name="_oButton" />
            </scope>
            <scope doc="Disables all buttons in the toolbar." ilk="function" name="disableAllButtons" signature="disableAllButtons() =&gt; Boolean" />
            <scope doc="Gets a button instance or a menuitem instance from the toolbar by it&apos;s value." ilk="function" name="getButtonByValue" signature="getButtonByValue(value) =&gt; &lt;a href=&quot;YAHOO.widget.ToolbarButton.html&quot;&gt;YAHOO.widget.ToolbarButton&lt;/a&gt; or &lt;a href=&quot;YAHOO.widget.MenuItem.html&quot;&gt;YAHOO.widget.MenuItem&lt;/a&gt;">
              <variable citdl="String" doc="The button value to query for." ilk="argument" name="value" />
            </scope>
            <variable citdl="Array" doc="" name="_configuredButtons" />
            <variable citdl="String" doc="String for spinbutton dynamic label. Note the {VALUE} will be replaced with YAHOO.lang.substitute" name="STR_SPIN_LABEL" />
            <variable citdl="Object" doc="" name="_toolbarConfigs" />
            <variable citdl="String" doc="String for spinbutton up" name="STR_SPIN_UP" />
            <variable citdl="Array" doc="Internal property list of current buttons in the toolbar" name="_buttonList" />
            <variable citdl="HTMLElement" doc="The HTML Element containing the colorPicker" name="_colorPicker" />
            <variable citdl="String" doc="String for Toolbar Collapse Button" name="STR_COLLAPSE" />
            <variable citdl="Number" doc="Internal counter for walking the buttons in the toolbar with the arrow keys" name="_navCounter" />
            <variable citdl="String" doc="Default prefix for dynamically created class names" name="CLASS_PREFIX" />
            <variable citdl="String" doc="Default CSS class to apply to the toolbar&apos;s drag handle element" name="CLASS_DRAGHANDLE" />
            <variable citdl="Object" doc="Object reference containing colors hex and text values." name="_colorData" />
            <variable citdl="Number" doc="Internal refernce for counting separators, so we can give them a useful class name for styling" name="_sepCount" />
            <variable citdl="Object" doc="The DragDrop instance associated with the Toolbar" name="dd" />
            <variable citdl="Boolean" doc="Flag to determine if the arrow nav listeners have been attached" name="_keyNav" />
            <variable citdl="HTMLElement" doc="Object reference to the titlebar" name="_titlebar" />
            <variable citdl="String" doc="Default CSS class to apply to the toolbar container element" name="CLASS_CONTAINER" />
            <variable citdl="Array" doc="Internal property list of current button groups in the toolbar" name="_buttonGroupList" />
            <variable citdl="String" doc="Default CSS class to apply when the toolbar is disabled" name="CLASS_DISABLED" />
            <variable citdl="Object" doc="The default button to use" name="buttonType" />
            <variable citdl="String" doc="String for Toolbar Collapse Button - Expand" name="STR_EXPAND" />
            <variable citdl="HTMLElement" doc="Internal reference to the separator HTML Element for cloning" name="_sep" />
            <variable citdl="String" doc="String for spinbutton down" name="STR_SPIN_DOWN" />
            <variable citdl="String" doc="Default CSS class to apply to all separators in the toolbar" name="CLASS_SEPARATOR" />
            <variable citdl="HTMLElement" doc="" name="draghandle" />
            <variable citdl="Object" doc="Standard browser detection" name="browser" />
          </scope>
          <scope classrefs="YAHOO.util.Element" doc="&lt;p&gt;Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor&apos;s Toolbar&lt;/p&gt;&lt;p&gt;Provides a toolbar button based on the button and menu widgets, &amp;lt;select&amp;gt; elements are used in place of menu&apos;s.&lt;/p&gt;" ilk="class" name="ToolbarButton">
            <scope attributes="__ctor__" doc="&lt;p&gt;Creates a basic custom Toolbar Button. Primarily used with the Rich Text Editor&apos;s Toolbar&lt;/p&gt;&lt;p&gt;Provides a toolbar button based on the button and menu widgets, &amp;lt;select&amp;gt; elements are used in place of menu&apos;s.&lt;/p&gt;" ilk="function" name="ToolbarButton" signature="ToolbarButton(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to turn into a button." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="The event fired when a change event gets fired on a select element" ilk="function" name="_handleSelect" signature="_handleSelect(ev)">
              <variable citdl="Event" doc="The change event." ilk="argument" name="ev" />
            </scope>
            <scope doc="A stub function to mimic YAHOO.widget.Button&apos;s getMenu method" ilk="function" name="getMenu" signature="getMenu()" />
            <scope doc="Removes classes from the button elements on mouseout (hover)" ilk="function" name="_handleMouseOut" signature="_handleMouseOut()" />
            <scope doc="The ToolbarButton class&apos;s initialization method" ilk="function" name="init" signature="init()" />
            <scope doc="Initializes all of the configuration attributes used to create &#xA;the toolbar." ilk="function" name="initAttributes" signature="initAttributes(attr)">
              <variable citdl="Object" doc="Object literal specifying a set of &#xA;configuration attributes used to create the toolbar." ilk="argument" name="attr" />
            </scope>
            <scope doc="Returns a string representing the toolbar." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="Select an option by value" ilk="function" name="checkValue" signature="checkValue(value)">
              <variable citdl="String" doc="The value of the option that we want to mark as selected" ilk="argument" name="value" />
            </scope>
            <scope doc="Destroy the button" ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Adds classes to the button elements on mouseover (hover)" ilk="function" name="_handleMouseOver" signature="_handleMouseOver()" />
            <scope doc="Overridden fireEvent method to prevent DOM events from firing if the button is disabled." ilk="function" name="fireEvent" signature="fireEvent()" />
            <variable doc="Tells if the Button is a Rich Button or a Simple Button" name="buttonType" />
          </scope>
          <scope doc="&lt;p&gt;Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor&apos;s Toolbar&lt;/p&gt;" ilk="class" name="ToolbarButtonAdvanced">
            <scope attributes="__ctor__" doc="&lt;p&gt;Creates a rich custom Toolbar Button. Primarily used with the Rich Text Editor&apos;s Toolbar&lt;/p&gt;" ilk="function" name="ToolbarButtonAdvanced" signature="ToolbarButtonAdvanced(el, attrs)">
              <variable citdl="String/HTMLElement" doc="The element to turn into a button." ilk="argument" name="el" />
              <variable citdl="Object" doc="Object liternal containing configuration parameters." ilk="argument" name="attrs" />
            </scope>
            <scope doc="Select an option by value" ilk="function" name="checkValue" signature="checkValue(value)">
              <variable citdl="String" doc="The value of the option that we want to mark as selected" ilk="argument" name="value" />
            </scope>
            <variable doc="Tells if the Button is a Rich Button or a Simple Button" name="buttonType" />
          </scope>
          <scope classrefs="YAHOO.widget.Overlay" doc="Tooltip is an implementation of Overlay that behaves like an OS tooltip, &#xA;displaying when the user mouses over a particular element, and &#xA;disappearing on mouse out." ilk="class" name="Tooltip">
            <scope attributes="__ctor__" doc="Tooltip is an implementation of Overlay that behaves like an OS tooltip, &#xA;displaying when the user mouses over a particular element, and &#xA;disappearing on mouse out." ilk="function" name="Tooltip" signature="Tooltip(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Tooltip &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Tooltip" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal containing &#xA;the configuration that should be set for this Overlay. See configuration &#xA;documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="The default event handler fired when the user mouses over the &#xA;context element." ilk="function" name="onContextMouseOver" signature="onContextMouseOver(e, obj)">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
            </scope>
            <scope doc="&quot;render&quot; event handler for the Tooltip." ilk="function" name="onRender" signature="onRender(p_sType, p_aArgs)">
              <variable citdl="String" doc="String representing the name of the event  &#xA;that was fired." ilk="argument" name="p_sType" />
              <variable citdl="Array" doc="Array of arguments sent when the event &#xA;was fired." ilk="argument" name="p_aArgs" />
            </scope>
            <scope doc="Initializes the class&apos;s configurable properties which can be &#xA;changed using the Overlay&apos;s Config object (cfg)." ilk="function" name="initDefaultConfig" signature="initDefaultConfig()" />
            <scope doc="Processes the showing of the Tooltip by setting the timeout delay &#xA;and offset of the Tooltip." ilk="function" name="doShow" signature="doShow(e, context) =&gt; Number">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable citdl="HTMLElement" doc="The current context element" ilk="argument" name="context" />
            </scope>
            <scope doc="Initializes the custom events for Tooltip" ilk="function" name="initEvents" signature="initEvents()" />
            <scope doc="Removes all of the DOM event handlers from the HTML&#xA;element(s) that trigger the display of the tooltip." ilk="function" name="_removeEventListeners" signature="_removeEventListeners()" />
            <scope doc="Sets the timeout for the auto-dismiss delay, which by default is 5 &#xA;seconds, meaning that a tooltip will automatically dismiss itself &#xA;after 5 seconds of being displayed." ilk="function" name="doHide" signature="doHide()" />
            <scope doc="The default event handler fired when the user mouses out of &#xA;the context element." ilk="function" name="onContextMouseOut" signature="onContextMouseOut(e, obj)">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
            </scope>
            <scope doc="Forces the underlay element to be repainted, through the application/removal&#xA;of a yui-force-redraw class to the underlay element." ilk="function" name="forceUnderlayRedraw" signature="forceUnderlayRedraw()" />
            <scope doc="The default event handler fired when the &quot;container&quot; property &#xA;is changed." ilk="function" name="configContainer" signature="configContainer(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For &#xA;configuration handlers, args[0] will equal the newly applied value &#xA;for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="The Tooltip initialization method. This method is automatically &#xA;called by the constructor. A Tooltip is automatically rendered by &#xA;the init method, and it also is set to be invisible by default, &#xA;and constrained to viewport by default as well." ilk="function" name="init" signature="init(el, el, userConfig)">
              <variable citdl="String" doc="The element ID representing the Tooltip &lt;em&gt;OR&lt;/em&gt;" ilk="argument" name="el" />
              <variable citdl="HTMLElement" doc="The element representing the Tooltip" ilk="argument" name="el" />
              <variable citdl="Object" doc="The configuration object literal &#xA;containing the configuration that should be set for this Tooltip. &#xA;See configuration documentation for more details." ilk="argument" name="userConfig" />
            </scope>
            <scope doc="The default event handler fired when the user moves the mouse while &#xA;over the context element." ilk="function" name="onContextMouseMove" signature="onContextMouseMove(e, obj)">
              <variable citdl="DOMEvent" doc="The current DOM event" ilk="argument" name="e" />
              <variable citdl="Object" doc="The object argument" ilk="argument" name="obj" />
            </scope>
            <scope doc="The default event handler fired when the &quot;text&quot; property is changed." ilk="function" name="configText" signature="configText(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers, &#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <scope doc="Fired when the Tooltip is moved, this event handler is used to &#xA;prevent the Tooltip from overlapping with its context element." ilk="function" name="preventOverlay" signature="preventOverlay(pageX, pageY)">
              <variable citdl="Number" doc="The x coordinate position of the mouse pointer" ilk="argument" name="pageX" />
              <variable citdl="Number" doc="The y coordinate position of the mouse pointer" ilk="argument" name="pageY" />
            </scope>
            <scope doc="Removes the Tooltip element from the DOM and sets all child &#xA;elements to null." ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Returns a string representation of the object." ilk="function" name="toString" signature="toString() =&gt; String" />
            <scope doc="The default event handler fired when the &quot;context&quot; property &#xA;is changed." ilk="function" name="configContext" signature="configContext(type, args, obj)">
              <variable citdl="String" doc="The CustomEvent type (usually the property name)" ilk="argument" name="type" />
              <variable citdl="Object[]" doc="The CustomEvent arguments. For configuration &#xA;handlers, args[0] will equal the newly applied value for the property." ilk="argument" name="args" />
              <variable citdl="Object" doc="The scope object. For configuration handlers,&#xA;this will usually equal the owner." ilk="argument" name="obj" />
            </scope>
            <variable citdl="int" doc="The unique process ID associated with the thread responsible &#xA;for showing the Tooltip." name="showProcId" />
            <variable citdl="String" doc="Constant representing the Tooltip CSS class" name="YAHOO.widget.Tooltip.CSS_TOOLTIP" />
            <variable citdl="Object" doc="Constant representing the Tooltip&apos;s configuration properties" name="DEFAULT_CONFIG" />
            <variable citdl="Object" doc="Constant representing the name of the Tooltip&apos;s events" name="EVENT_TYPES" />
          </scope>
          <scope doc="Contains the tree view state data and the root node." ilk="class" name="TreeView">
            <scope attributes="__ctor__" doc="Contains the tree view state data and the root node." ilk="function" name="TreeView" signature="TreeView(id, oConfig)">
              <variable citdl="string|HTMLElement" doc="The id of the element, or the element itself that the tree will be inserted into.  &#xA;Existing markup in this element, if valid, will be used to build the tree" ilk="argument" name="id" />
              <variable citdl="Array|Object|String" doc="(optional)  If present, it will be used to build the tree via method &lt;a href=&quot;#method_buildTreeFromObject&quot;&gt;buildTreeFromObject&lt;/a&gt;" ilk="argument" name="oConfig" />
            </scope>
            <scope doc="Perform the expand animation if configured, or just show the&#xA;element if not configured or too many animations are in progress" ilk="function" name="animateExpand" signature="animateExpand(el, node) =&gt; boolean">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="YAHOO.util.Node" doc="the node that was expanded" ilk="argument" name="node" />
            </scope>
            <scope doc="Configures this tree to dynamically load all child data" ilk="function" name="setDynamicLoad" signature="setDynamicLoad(fnDataLoader, iconMode)">
              <variable citdl="function" doc="the function that will be called to get the data" ilk="argument" name="fnDataLoader" />
              <variable citdl="int" doc="configures the icon that is displayed when a dynamic&#xA;load node is expanded the first time without children.  By default, the &#xA;&quot;collapse&quot; icon will be used.  If set to 1, the leaf node icon will be&#xA;displayed." ilk="argument" name="iconMode" />
            </scope>
            <scope doc="Renders the tree boilerplate and visible nodes" ilk="function" name="render" signature="render()" />
            <scope doc="Returns a node in the tree that has the specified index (this index&#xA;is created internally, so this function probably will only be used&#xA;in html generated for a given node.)" ilk="function" name="getNodeByIndex" signature="getNodeByIndex(nodeIndex) =&gt; Node">
              <variable citdl="int" doc="the index of the node wanted" ilk="argument" name="nodeIndex" />
            </scope>
            <scope doc="Event listener for mouse over events" ilk="function" name="_onMouseOverEvent" signature="_onMouseOverEvent()" />
            <scope doc="Function executed when the collapse animation completes" ilk="function" name="collapseComplete" signature="collapseComplete()" />
            <scope doc="Sets the value of a property for all loaded nodes in the tree." ilk="function" name="setNodesProperty" signature="setNodesProperty(name, value, refresh)">
              <variable citdl="string" doc="Name of the property to be set" ilk="argument" name="name" />
              <variable citdl="any" doc="value to be set" ilk="argument" name="value" />
              <variable citdl="boolean" doc="if present and true, it does a refresh" ilk="argument" name="refresh" />
            </scope>
            <scope doc="Event listener for double-click events" ilk="function" name="_onDblClickEvent" signature="_onDblClickEvent()" />
            <scope doc="Nodes register themselves with the tree instance when they are created." ilk="function" name="regNode" signature="regNode(node)">
              <variable citdl="Node" doc="the node to register" ilk="argument" name="node" />
            </scope>
            <scope doc="Abstract method that is executed when a node is expanded" ilk="function" name="onExpand" signature="onExpand(node)">
              <variable citdl="Node" doc="the node that was expanded" ilk="argument" name="node" />
            </scope>
            <scope doc="Entry point for initializing the editing plug-in.  &#xA;TreeView will call this method on initializing if it exists" ilk="function" name="_initEditor" signature="_initEditor()" />
            <scope doc="Sets up the animation for expanding children" ilk="function" name="setExpandAnim" signature="setExpandAnim(type)">
              <variable citdl="string" doc="the type of animation (acceptable values defined &#xA;in YAHOO.widget.TVAnim)" ilk="argument" name="type" />
            </scope>
            <scope doc="Global method for getting a tree by its id.  Used in the generated&#xA;tree html." ilk="function" name="YAHOO.widget.TreeView.getTree" signature="YAHOO.widget.TreeView.getTree(treeId) =&gt; TreeView">
              <variable citdl="String" doc="the id of the tree instance" ilk="argument" name="treeId" />
            </scope>
            <scope doc="Event listener for mouse out events" ilk="function" name="_onMouseOutEvent" signature="_onMouseOutEvent()" />
            <scope doc="Removes the node and its children, and optionally refreshes the &#xA;branch of the tree that was affected." ilk="function" name="removeNode" signature="removeNode(node, autoRefresh) =&gt; boolean">
              <variable citdl="Node" doc="to remove" ilk="argument" name="node" />
              <variable citdl="boolean" doc="automatically refreshes branch if true" ilk="argument" name="autoRefresh" />
            </scope>
            <scope doc="Returns the TD element where the event has occurred" ilk="function" name="_getEventTargetTdEl" signature="_getEventTargetTdEl()" />
            <scope doc="Removes the node from the tree, preserving the child collection &#xA;to make it possible to insert the branch into another part of the &#xA;tree, or another tree." ilk="function" name="popNode" signature="popNode(node)">
              <variable citdl="Node" doc="to remove" ilk="argument" name="node" />
            </scope>
            <scope doc="Abstract method that is executed when a node is collapsed." ilk="function" name="onCollapse" signature="onCollapse(node)">
              <variable citdl="Node" doc="the node that was collapsed." ilk="argument" name="node" />
            </scope>
            <scope doc="Returns the tree&apos;s host element" ilk="function" name="getEl" signature="getEl() =&gt; HTMLElement" />
            <scope doc="Initializes the tree" ilk="function" name="init" signature="init()" />
            <scope doc="Deletes this nodes child collection, recursively.  Also collapses&#xA;the node, and resets the dynamic load flag.  The primary use for&#xA;this method is to purge a node and allow it to fetch its data&#xA;dynamically again." ilk="function" name="removeChildren" signature="removeChildren(node)">
              <variable citdl="Node" doc="the node to purge" ilk="argument" name="node" />
            </scope>
            <scope doc="TreeView instance toString" ilk="function" name="toString" signature="toString() =&gt; string" />
            <scope doc="Event listener for key down events" ilk="function" name="_onKeyDownEvent" signature="_onKeyDownEvent()" />
            <scope doc="Perform the collapse animation if configured, or just show the&#xA;element if not configured or too many animations are in progress" ilk="function" name="animateCollapse" signature="animateCollapse(el, node) =&gt; boolean">
              <variable citdl="HTMLElement" doc="the element to animate" ilk="argument" name="el" />
              <variable citdl="YAHOO.util.Node" doc="the node that was expanded" ilk="argument" name="node" />
            </scope>
            <scope doc="When in singleNodeHighlight it returns the node highlighted&#xA;or null if none.  Returns null if singleNodeHighlight is false." ilk="function" name="getHighlightedNode" signature="getHighlightedNode() =&gt; YAHOO.widget.Node" />
            <scope doc="Expands all child nodes.  Note: this conflicts with the &quot;multiExpand&quot;&#xA;node property.  If expand all is called in a tree with nodes that&#xA;do not allow multiple siblings to be displayed, only the last sibling&#xA;will be expanded." ilk="function" name="expandAll" signature="expandAll()" />
            <scope doc="Event listener to toggle node highlight.&#xA;Can be assigned as listener to clickEvent, dblClickEvent and enterKeyPressed.&#xA;It returns false to prevent the default action." ilk="function" name="onEventToggleHighlight" signature="onEventToggleHighlight(oArgs) =&gt; false">
              <variable citdl="any" doc="it takes the arguments of any of the events mentioned above" ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Renders the tree boilerplate and visible nodes.&#xA;Alias for render" ilk="function" name="draw" signature="draw()" />
            <scope doc="Builds the TreeView from an object.  &#xA;This is the method called by the constructor to build the tree when it has a second argument.&#xA;A tree can be described by an array of objects, each object corresponding to a node.&#xA;Node descriptions may contain values for any property of a node plus the following extra properties: &lt;ul&gt;&#xA;&lt;li&gt;type:  can be one of the following:&lt;ul&gt;&#xA;&lt;li&gt; A shortname for a node type (&lt;code&gt;&apos;text&apos;,&apos;menu&apos;,&apos;html&apos;&lt;/code&gt;) &lt;/li&gt;&#xA;&lt;li&gt;The name of a Node class under YAHOO.widget (&lt;code&gt;&apos;TextNode&apos;, &apos;MenuNode&apos;, &apos;DateNode&apos;&lt;/code&gt;, etc) &lt;/li&gt;&#xA;&lt;li&gt;a reference to an actual class: &lt;code&gt;YAHOO.widget.DateNode&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&lt;/li&gt;&#xA;&lt;li&gt;children: an array containing further node definitions&lt;/li&gt;&lt;/ul&gt;&#xA;A string instead of an object will produce a node of type &apos;text&apos; with the given string as its label." ilk="function" name="buildTreeFromObject" signature="buildTreeFromObject(oConfig)">
              <variable citdl="Array|Object|String" doc="array containing a full description of the tree.&#xA;An object or a string will be turned into an array with the given object or string as its only element." ilk="argument" name="oConfig" />
            </scope>
            <scope doc="Global method for getting a node by its id.  Used in the generated&#xA;tree html." ilk="function" name="YAHOO.widget.TreeView.getNode" signature="YAHOO.widget.TreeView.getNode(treeId, nodeIndex) =&gt; Node">
              <variable citdl="String" doc="the id of the tree instance" ilk="argument" name="treeId" />
              <variable citdl="String" doc="the index of the node to return" ilk="argument" name="nodeIndex" />
            </scope>
            <scope doc="Returns a node that has a matching property and value in the data&#xA;object that was passed into its constructor." ilk="function" name="getNodeByProperty" signature="getNodeByProperty(property, value) =&gt; Node">
              <variable citdl="object" doc="the property to search (usually a string)" ilk="argument" name="property" />
              <variable citdl="object" doc="the value we want to find (usuall an int or string)" ilk="argument" name="value" />
            </scope>
            <scope doc="Returns a collection of nodes that have passed the test function&#xA;passed as its only argument.  &#xA;The function will receive a reference to each node to be tested." ilk="function" name="getNodesBy" signature="getNodesBy(a) =&gt; Array">
              <variable citdl="function" doc="boolean function that receives a Node instance and returns true to add the node to the results list" ilk="argument" name="a" />
            </scope>
            <scope doc="wait until the animation is complete before deleting &#xA;to avoid javascript errors" ilk="function" name="_removeChildren_animComplete" signature="_removeChildren_animComplete(o)">
              <variable doc="the custom event payload" ilk="argument" name="o" />
            </scope>
            <scope doc="Method to be called when the inline editing is finished and the editor is to be closed" ilk="function" name="_closeEditor" signature="_closeEditor(save)">
              <variable citdl="Boolean" doc="true if the edited value is to be saved, false if discarded" ilk="argument" name="save" />
            </scope>
            <scope doc="Nulls out the entire TreeView instance and related objects, removes attached&#xA;event listeners, and clears out DOM elements inside the container. After&#xA;calling this method, the instance reference should be expliclitly nulled by&#xA;implementer, as in myDataTable = null. Use with caution!" ilk="function" name="destroy" signature="destroy()" />
            <scope doc="Returns a collection of nodes that have a matching property &#xA;and value in the data object that was passed into its constructor." ilk="function" name="getNodesByProperty" signature="getNodesByProperty(property, value) =&gt; Array">
              <variable citdl="object" doc="the property to search (usually a string)" ilk="argument" name="property" />
              <variable citdl="object" doc="the value we want to find (usuall an int or string)" ilk="argument" name="value" />
            </scope>
            <scope doc="Method to be associated with an event (clickEvent, dblClickEvent or enterKeyPressed) to pop up the contents editor&#xA;It calls the corresponding node editNode method." ilk="function" name="onEventEditNode" signature="onEventEditNode(oArgs)">
              <variable citdl="object" doc="Object passed as arguments to TreeView event listeners" ilk="argument" name="oArgs" />
            </scope>
            <scope doc="Deletes the node and recurses children" ilk="function" name="_deleteNode" signature="_deleteNode()" />
            <scope doc="Returns the root node of this tree" ilk="function" name="getRoot" signature="getRoot() =&gt; Node" />
            <scope doc="Event listener for click events" ilk="function" name="_onClickEvent" signature="_onClickEvent()" />
            <scope doc="Collapses all expanded child nodes in the entire tree." ilk="function" name="collapseAll" signature="collapseAll()" />
            <scope doc="Sets up the animation for collapsing children" ilk="function" name="setCollapseAnim" signature="setCollapseAnim(type)">
              <variable citdl="string" doc="of animation (acceptable values defined in &#xA;YAHOO.widget.TVAnim)" ilk="argument" name="type" />
            </scope>
            <scope doc="Returns an object which could be used to rebuild the tree.&#xA;It can be passed to the tree constructor to reproduce the same tree.&#xA;It will return false if any node loads dynamically, regardless of whether it is loaded or not." ilk="function" name="getTreeDefinition" signature="getTreeDefinition() =&gt; Object | false" />
            <scope doc="Count of nodes in tree" ilk="function" name="getNodeCount" signature="getNodeCount() =&gt; int" />
            <scope doc="Entry point of the editing plug-in.  &#xA;TreeView will call this method if it exists when a node label is clicked" ilk="function" name="_nodeEditing" signature="_nodeEditing(node) =&gt; Boolean">
              <variable citdl="YAHOO.widget.Node" doc="the node to be edited" ilk="argument" name="node" />
            </scope>
            <scope doc="Function executed when the expand animation completes" ilk="function" name="expandComplete" signature="expandComplete()" />
            <scope doc="Returns the treeview node reference for an ancestor element&#xA;of the node, or null if it is not contained within any node&#xA;in this tree." ilk="function" name="getNodeByElement" signature="getNodeByElement(el) =&gt; YAHOO.widget.Node">
              <variable citdl="HTMLElement" doc="the element to test" ilk="argument" name="el" />
            </scope>
            <scope doc="Entry point for TreeView&apos;s destroy method to destroy whatever the editing plug-in has created" ilk="function" name="_destroyEditor" signature="_destroyEditor()" />
            <scope doc="Builds the TreeView from existing markup.   Markup should consist of &amp;lt;UL&amp;gt; or &amp;lt;OL&amp;gt; elements containing &amp;lt;LI&amp;gt; elements.  &#xA;Each &amp;lt;LI&amp;gt; can have one element used as label and a second optional element which is to be a &amp;lt;UL&amp;gt; or &amp;lt;OL&amp;gt;&#xA;containing nested nodes.&#xA;Depending on what the first element of the &amp;lt;LI&amp;gt; element is, the following Nodes will be created: &lt;ul&gt;&#xA;&lt;li&gt;plain text:  a regular TextNode&lt;/li&gt;&#xA;&lt;li&gt;anchor &amp;lt;A&amp;gt;: a TextNode with its &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;target&lt;/code&gt; taken from the anchor&lt;/li&gt;&#xA;&lt;li&gt;anything else: an HTMLNode&lt;/li&gt;&lt;/ul&gt;&#xA;Only the first  outermost (un-)ordered list in the markup and its children will be parsed.&#xA;Nodes will be collapsed unless  an  &amp;lt;LI&amp;gt;  tag has a className called &apos;expanded&apos;.&#xA;All other className attributes will be copied over to the Node className property.&#xA;If the &amp;lt;LI&amp;gt; element contains an attribute called &lt;code&gt;yuiConfig&lt;/code&gt;, its contents should be a JSON-encoded object&#xA;as the one used in method &lt;a href=&quot;#method_buildTreeFromObject&quot;&gt;buildTreeFromObject&lt;/a&gt;." ilk="function" name="buildTreeFromMarkup" signature="buildTreeFromMarkup(id)">
              <variable citdl="string|HTMLElement" doc="The id of the element that contains the markup or a reference to it." ilk="argument" name="id" />
            </scope>
            <variable citdl="window.timer object" doc="Stores the timer used to check for double clicks" name="_dblClickTimer" />
            <variable citdl="YAHOO.widget.Node" doc="A reference to the Node that is currently highlighted.&#xA;It is only meaningful if singleNodeHighlight is enabled" name="_currentlyHighlighted" />
            <variable citdl="boolean" doc="We lock the tree control while waiting for the dynamic loader to return" name="locked" />
            <variable citdl="string" doc="The animation to use for expanding children, if any" name="_expandAnim" />
            <variable citdl="string" doc="The animation to use for collapsing children, if any" name="_collapseAnim" />
            <variable doc="An object to store information used for in-line editing&#xA;for all Nodes of all TreeViews. It contains:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;active {boolean}, whether there is an active cell editor &lt;/li&gt;&#xA;&lt;li&gt;whoHasIt {YAHOO.widget.TreeView} TreeView instance that is currently using the editor&lt;/li&gt;&#xA;&lt;li&gt;nodeType {string} value of static Node._type property, allows reuse of input element if node is of the same type.&lt;/li&gt;&#xA;&lt;li&gt;editorPanel {HTMLelement (&amp;lt;div&amp;gt;)} element holding the in-line editor&lt;/li&gt;&#xA;&lt;li&gt;inputContainer {HTMLelement (&amp;lt;div&amp;gt;)} element which will hold the type-specific input element(s) to be filled by the fillEditorContainer method&lt;/li&gt;&#xA;&lt;li&gt;buttonsContainer {HTMLelement (&amp;lt;div&amp;gt;)} element which holds the &amp;lt;button&amp;gt; elements for Ok/Cancel.  If you don&apos;t want any of the buttons, hide it via CSS styles, don&apos;t destroy it&lt;/li&gt;&#xA;&lt;li&gt;node {YAHOO.widget.Node} reference to the Node being edited&lt;/li&gt;&#xA;&lt;li&gt;saveOnEnter {boolean}, whether the Enter key should be accepted as a Save command (Esc. is always taken as Cancel), disable for multi-line input elements &lt;/li&gt;&#xA;&lt;li&gt;oldValue {any}  value before editing&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;Editors are free to use this object to store additional data." name="editorData" />
            <variable citdl="int" doc="Running count of all nodes created in all trees.  This is &#xA;used to provide unique identifies for all nodes.  Deleting&#xA;nodes does not change the nodeCount." name="YAHOO.widget.TreeView.nodeCount" />
            <variable citdl="YAHOO.widget.Node" doc="A reference to the Node currently having the focus or null if none." name="currentFocus" />
            <variable citdl="Array" doc="Global cache of tree instances" name="YAHOO.widget.TreeView.trees" />
            <variable citdl="Node[]" doc="Flat collection of all nodes in this tree.  This is a sparse&#xA;array, so the length property can&apos;t be relied upon for a&#xA;node count for the tree." name="_nodes" />
            <variable citdl="int" doc="The current number of animations that are executing" name="_animCount" />
            <variable citdl="function" doc="Validator function for edited data, called from the TreeView instance scope, &#xA;receives the arguments (newValue, oldValue, nodeInstance) &#xA;and returns either the validated (or type-converted) value or undefined. &#xA;An undefined return will prevent the editor from closing" name="validator" />
            <variable citdl="boolean" doc="Whether there is any subscriber to dblClickEvent" name="_hasDblClickSubscriber" />
            <variable citdl="int" doc="The maximum number of animations to run at one time." name="maxAnim" />
            <variable citdl="boolean" doc="If true, only one Node can be highlighted at a time" name="singleNodeHighlight" />
            <variable citdl="String" doc="The id of tree container element" name="id" />
            <variable citdl="HTMLelement" doc="The host element for this tree" name="_el" />
            <variable citdl="String" doc="Class name assigned to elements that have the focus" name="TreeView.FOCUS_CLASS_NAME" />
          </scope>
          <scope doc="Uploader class for the YUI Uploader component." ilk="class" name="Uploader">
            <scope attributes="__ctor__" doc="Uploader class for the YUI Uploader component." ilk="function" name="Uploader" signature="Uploader(containerId, buttonSkin, forceTransparent)">
              <variable citdl="HTMLElement" doc="Container element for the Flash Player instance." ilk="argument" name="containerId" />
              <variable citdl="String" doc="[optional]. If defined, the uploader is &#xA;rendered as a button. This parameter must provide the URL of a button&#xA;skin sprite image. Acceptable types are: jpg, gif, png and swf. The &#xA;sprite is divided evenly into four sections along its height (e.g., if&#xA;the sprite is 200 px tall, it&apos;s divided into four sections 50px each).&#xA;Each section is used as a skin for a specific state of the button: top&#xA;section is &quot;up&quot;, second section is &quot;over&quot;, third section is &quot;down&quot;, and&#xA;fourth section is &quot;disabled&quot;. &#xA;If the parameter is not supplied, the uploader is rendered transparent,&#xA;and it&apos;s the developer&apos;s responsibility to create a visible UI below it." ilk="argument" name="buttonSkin" />
              <variable citdl="Boolean" doc="This parameter, if true, forces the Flash&#xA;UI to be rendered with wmode set to &quot;transparent&quot;. This behavior is useful &#xA;in conjunction with non-rectangular button skins with PNG transparency. &#xA;The parameter is false by default, and ignored if no buttonSkin is defined." ilk="argument" name="forceTransparent" />
            </scope>
            <scope doc="Starts uploading all files in the queue. If this function is called, the upload queue is automatically managed." ilk="function" name="uploadAll" signature="uploadAll(uploadScriptPath, method, vars, fieldName)">
              <variable citdl="String" doc="The URL of the upload location." ilk="argument" name="uploadScriptPath" />
              <variable citdl="String" doc="Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default." ilk="argument" name="method" />
              <variable citdl="Object" doc="The object containing variables to be sent in the same request as the file upload." ilk="argument" name="vars" />
              <variable citdl="String" doc="The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default.&#xA;&lt;/code&gt;" ilk="argument" name="fieldName" />
            </scope>
            <scope doc="Enables the mouse events on the Uploader.&#xA;If the uploader is being rendered as a button,&#xA;then the button&apos;s skin is set to &quot;up&quot;&#xA;(first section of the button skin sprite)." ilk="function" name="enable" signature="enable()" />
            <scope doc="Turns the logging functionality on.&#xA;Uses Flash internal trace logging, as well as YUI Logger, if available." ilk="function" name="setAllowLogging" signature="setAllowLogging(allowLogging)">
              <variable citdl="Boolean" doc="If true, logs are output; otherwise, no logs are produced." ilk="argument" name="allowLogging" />
            </scope>
            <scope doc="Clears the list of files queued for upload." ilk="function" name="clearFileList" signature="clearFileList()" />
            <scope doc="Starts the upload of the file specified by fileID to the location specified by uploadScriptPath." ilk="function" name="upload" signature="upload(fileID, uploadScriptPath, method, vars, fieldName)">
              <variable citdl="String" doc="The id of the file to start uploading." ilk="argument" name="fileID" />
              <variable citdl="String" doc="The URL of the upload location." ilk="argument" name="uploadScriptPath" />
              <variable citdl="String" doc="Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default." ilk="argument" name="method" />
              <variable citdl="Object" doc="The object containing variables to be sent in the same request as the file upload." ilk="argument" name="vars" />
              <variable citdl="String" doc="The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default.&#xA;&lt;/code&gt;" ilk="argument" name="fieldName" />
            </scope>
            <scope doc="Removes the specified file from the upload queue." ilk="function" name="removeFile" signature="removeFile(fileID)">
              <variable citdl="String" doc="The id of the file to remove from the upload queue." ilk="argument" name="fileID" />
            </scope>
            <scope doc="Sets the number of simultaneous uploads when using uploadAll()&#xA;The minimum value is 1, and maximum value is 5. The default value is 2." ilk="function" name="setSimUploadLimit" signature="setSimUploadLimit(simUploadLimit)">
              <variable citdl="int" doc="Number of simultaneous uploads, between 1 and 5." ilk="argument" name="simUploadLimit" />
            </scope>
            <scope doc="Disables the mouse events on the Uploader.&#xA;If the uploader is being rendered as a button,&#xA;then the button&apos;s skin is set to &quot;disabled&quot;&#xA;(fourth section of the button skin sprite)." ilk="function" name="disable" signature="disable()" />
            <scope doc="Sets the flag allowing users to select multiple files for the upload." ilk="function" name="setAllowMultipleFiles" signature="setAllowMultipleFiles(allowMultipleFiles)">
              <variable citdl="Boolean" doc="If true, multiple files can be selected. False by default." ilk="argument" name="allowMultipleFiles" />
            </scope>
            <scope doc="Starts the upload of the files specified by fileIDs, or adds them to a currently running queue. The upload queue is automatically managed." ilk="function" name="uploadThese" signature="uploadThese(fileIDs, uploadScriptPath, method, vars, fieldName)">
              <variable citdl="Array" doc="The ids of the files to start uploading." ilk="argument" name="fileIDs" />
              <variable citdl="String" doc="The URL of the upload location." ilk="argument" name="uploadScriptPath" />
              <variable citdl="String" doc="Either &quot;GET&quot; or &quot;POST&quot;, specifying how the variables accompanying the file upload POST request should be submitted. &quot;GET&quot; by default." ilk="argument" name="method" />
              <variable citdl="Object" doc="The object containing variables to be sent in the same request as the file upload." ilk="argument" name="vars" />
              <variable citdl="String" doc="The name of the variable in the POST request containing the file data. &quot;Filedata&quot; by default.&#xA;&lt;/code&gt;" ilk="argument" name="fieldName" />
            </scope>
            <scope doc="Cancels the upload of a specified file. If no file id is specified, all ongoing uploads are cancelled." ilk="function" name="cancel" signature="cancel(fileID)">
              <variable citdl="String" doc="The ID of the file whose upload should be cancelled." ilk="argument" name="fileID" />
            </scope>
            <scope doc="Sets the file filters for the &quot;Browse&quot; dialog." ilk="function" name="setFileFilters" signature="setFileFilters(newFilterArray)">
              <variable citdl="extensions: extensionString, description: descriptionString, [optional]macType: macTypeString" doc="An array of sets of key-value pairs of the form&#xA;&#xA;The extensions string is a semicolon-delimited list of elements of the form &quot;*.xxx&quot;, &#xA;e.g. &quot;*.jpg;*.gif;*.png&quot;." ilk="argument" name="newFilterArray" />
            </scope>
            <variable doc="Location of the Uploader SWF" name="Chart.SWFURL" />
          </scope>
        </scope>
      </scope>
      <scope doc="YAHOO_config is not included as part of the library.  Instead it is an &#xA;object that can be defined by the implementer immediately before &#xA;including the YUI library.  The properties included in this object&#xA;will be used to configure global properties needed as soon as the &#xA;library begins to load." ilk="namespace" name="YAHOO_config">
        <variable citdl="Function" doc="A reference to a function that will be executed every time a YAHOO module&#xA;is loaded.  As parameter, this function will receive the version&#xA;information for the module. See &lt;a href=&quot;YAHOO.env.html#getVersion&quot;&gt;&#xA;YAHOO.env.getVersion&lt;/a&gt; for the description of the version data structure." name="listener" />
        <variable doc="Instructs the yuiloader component to dynamically load yui components and&#xA;their dependencies.  See the yuiloader documentation for more information&#xA;about dynamic loading" name="load" />
        <variable citdl="string" doc="Forces the use of the supplied locale where applicable in the library" name="locale" />
        <variable citdl="boolean" doc="Set to true if the library will be dynamically loaded after window.onload.&#xA;Defaults to false" name="injecting" />
      </scope>
    </scope>
  </file>
</codeintel>
